diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/dma.h gem5-SALAM/benchmarks/common/dma.h
--- gem5/benchmarks/common/dma.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/dma.h	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,26 @@
+#ifndef __DMA_H__
+#define __DMA_H__
+
+#define MMR_ADDR    0x2ff00000
+
+volatile char * FLAGS = (char *)(MMR_ADDR);
+volatile size_t * SRC = (size_t *)(MMR_ADDR+1);
+volatile size_t * DST = (size_t *)(MMR_ADDR+9);
+volatile int * LEN = (int *)(MMR_ADDR+17);
+volatile unsigned flag;
+
+void dmacpy(void * dst, void * src, int len) {
+    *SRC = (size_t)src;
+    *DST = (size_t)dst;
+    *LEN = len;
+    *FLAGS |= 0x01;
+}
+
+int pollDma() {
+    return ((*FLAGS&0x04)==0x04);
+}
+void resetDma() {
+    *FLAGS = 0;
+}
+
+#endif //__DMA_H__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/fake.iso gem5-SALAM/benchmarks/common/fake.iso
--- gem5/benchmarks/common/fake.iso	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/fake.iso	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,8 @@
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
+this is just a fake iso that gem5 needs in order to start correctly
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/.gitignore gem5-SALAM/benchmarks/common/.gitignore
--- gem5/benchmarks/common/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1 @@
+*.o
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/m5ops.h gem5-SALAM/benchmarks/common/m5ops.h
--- gem5/benchmarks/common/m5ops.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/m5ops.h	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,51 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#define ENABLED 1
+#if defined(__arm__)
+static void m5_checkpoint(void)
+{
+	__asm__ __volatile__ ("mov r0, #0; mov r1, #0; mov r2, #0; mov r3, #0; .inst 0xEE000110 | (0x43 << 16);");
+};
+static void m5_dump_stats(void)
+{
+	__asm__ __volatile__ ("mov r0, #0; mov r1, #0; mov r2, #0; mov r3, #0; .inst 0xEE000110 | (0x41 << 16);");
+};
+static void m5_exit()
+{
+	__asm__ __volatile__ ("mov r0, #0; .inst 0xEE000110 | (0x21 << 16);");
+};
+static void m5_fail_1(void)
+{
+	__asm__ __volatile__ ("mov r0, #0; mov r1, #0; mov r2, #1; mov r3, #0; .inst 0xEE000110 | (0x22 << 16);");
+};
+static void m5_reset_stats(void)
+{
+	__asm__ __volatile__ ("mov r0, #0; mov r1, #0; mov r2, #0; mov r3, #0; .inst 0xEE000110 | (0x40 << 16);");
+};
+#elif defined(__aarch64__)
+static void m5_checkpoint(void)
+{
+	__asm__ __volatile__ ("mov x0, #0; mov x1, #0; .inst 0xFF000110 | (0x43 << 16);");
+};
+static void m5_dump_stats(void)
+{
+	__asm__ __volatile__ ("mov x0, #0; mov x1, #0; .inst 0xFF000110 | (0x41 << 16);");
+};
+static void m5_exit(void)
+{
+	__asm__ __volatile__ ("mov x0, #0; .inst 0XFF000110 | (0x21 << 16);");
+};
+static void m5_fail_1(void)
+{
+	__asm__ __volatile__ ("mov x0, #0; mov x1, #1; .inst 0xFF000110 | (0x22 << 16);");
+};
+static void m5_reset_stats(void)
+{
+	__asm__ __volatile__ ("mov x0, #0; mov x1, #0; .inst 0XFF000110 | (0x40 << 16);");
+};
+#else
+#undef ENABLED
+#define ENABLED 0
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/Makefile gem5-SALAM/benchmarks/common/Makefile
--- gem5/benchmarks/common/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,60 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+
+CROSS_COMPILE_DIR = /usr/bin
+
+ARCH          ?= arm
+CROSS_COMPILE ?= arm-none-eabi-
+#CROSS_COMPILE_DIR = /home/samerogers/aarch64-toolchain/bin
+
+#ARCH          ?= aarch64
+#CROSS_COMPILE ?= aarch64-elf-
+
+AS           = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)as
+LD           = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)ld
+CC           = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)gcc
+CXX          = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)g++
+CPP          = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)cpp
+AR           = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)ar
+NM           = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)nm
+STRIP        = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)strip
+OBJCOPY      = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)objcopy
+OBJDUMP      = $(CROSS_COMPILE_DIR)/$(CROSS_COMPILE)objdump
+
+CFLAGS       = -g -O3 -lunistd -I .
+CXXFLAGS     = -g -O3 -lunistd -I . -fno-exceptions
+ASFLAGS      = -EL
+LNK_OPT      = -nostartfiles
+LNK_SCRIPT   = boot.ld
+#LNK_SCRIPT   = start64.ld
+LNK_FILE_OPT = -nostartfiles -Xlinker -T$(LNK_SCRIPT)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/queue_dma.c gem5-SALAM/benchmarks/common/queue_dma.c
--- gem5/benchmarks/common/queue_dma.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/queue_dma.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,57 @@
+#include "stdio.h"
+#include "queue_dma.h"
+
+int launchCpy() {
+    //*FLAGS &= 0xFB;
+    if (valid[rdQueuePtr] == 1) {
+/*        printf("Launching Xfer %d\n", rdQueuePtr);*/
+/*        printf("SRC:%x DST:%x LEN:%d\n", jobs[rdQueuePtr].src, jobs[rdQueuePtr].dst, jobs[rdQueuePtr].len);*/
+        *SRC = jobs[rdQueuePtr].src;
+        *DST = jobs[rdQueuePtr].dst;
+        *LEN = jobs[rdQueuePtr].len;
+        *FLAGS |= 0x01;
+        valid[rdQueuePtr] = 0;
+        inQueue--;
+/*        printf("Xfer %d launched\n", rdQueuePtr);*/
+        if (rdQueuePtr<(QUEUE_SIZE-1))
+            rdQueuePtr++;
+        else
+            rdQueuePtr = 0;
+        return 0;
+    } else {
+        //printf("No more xfers\n");
+        *FLAGS=0;
+        return -1;
+    }
+}
+
+extern int dma_signal;
+
+int dmacpy(void * dst, void * src, int len) {
+    if (valid[wrQueuePtr] == 0) {
+        dma_signal = 0;
+/*        printf("Queueing Xfer %d\n", wrQueuePtr);*/
+        jobs[wrQueuePtr].src = (size_t)src;
+        jobs[wrQueuePtr].dst = (size_t)dst;
+        jobs[wrQueuePtr].len = len;
+        valid[wrQueuePtr] = 1;
+        inQueue++;
+        if (wrQueuePtr<(QUEUE_SIZE-1))
+            wrQueuePtr++;
+        else
+            wrQueuePtr = 0;
+        if ((*FLAGS&0x02) != 0x02)
+            launchCpy();
+        return 0;
+    } else {
+/*        printf("ERROR: Cannot Queue Xfer %d\n", wrQueuePtr);*/
+        return -1;
+    }
+}
+
+int pollDma() {
+    return ((*FLAGS&0x04)==0x04);
+}
+void resetDma() {
+    *FLAGS = 0;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/queue_dma.h gem5-SALAM/benchmarks/common/queue_dma.h
--- gem5/benchmarks/common/queue_dma.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/queue_dma.h	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,33 @@
+#ifndef __DMA_H__
+#define __DMA_H__
+
+#include "inttypes.h"
+#include "stdlib.h"
+
+#define MMR_ADDR    0x2ff00000
+#define QUEUE_SIZE  8
+
+volatile char * FLAGS = (char *)(MMR_ADDR);
+volatile size_t * SRC = (size_t *)(MMR_ADDR+1);
+volatile size_t * DST = (size_t *)(MMR_ADDR+9);
+volatile int * LEN = (int *)(MMR_ADDR+17);
+volatile unsigned flag;
+
+typedef struct {
+    size_t dst;
+    size_t src;
+    int len;
+} DMA_XFER;
+
+static int rdQueuePtr=0;
+static int wrQueuePtr=0;
+static int inQueue=0;
+static DMA_XFER jobs[QUEUE_SIZE];
+static int valid[QUEUE_SIZE];
+
+int launchCpy();
+int dmacpy(void * dst, void * src, int len);
+int pollDma();
+void resetDma();
+
+#endif //__DMA_H__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/common/syscalls.c gem5-SALAM/benchmarks/common/syscalls.c
--- gem5/benchmarks/common/syscalls.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/common/syscalls.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,110 @@
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+int _read_r (struct _reent *r, int file, char * ptr, int len)
+{
+    r = r;
+    file = file;
+    ptr = ptr;
+    len = len;
+
+    errno = EINVAL;
+    return -1;
+}
+
+int _lseek_r (struct _reent *r, int file, int ptr, int dir)
+{
+    r = r;
+    file = file;
+    ptr = ptr;
+    dir = dir;
+
+    return 0;
+}
+
+// The following two functions implement the basis for printf and the UART
+// component in gem5.
+volatile unsigned int * const UART0DR = (unsigned int *)0x1c090000;
+
+void gem5_print(const char *s) {
+    while (*s != '\0')
+    {
+        *UART0DR = (unsigned int)(*s);
+        s++;
+    }
+}
+
+int _write_r (struct _reent *r, int file, char * ptr, int len)
+{
+    r = r;
+    file = file;
+    ptr = ptr;
+
+    gem5_print(ptr);
+
+    return len;
+}
+
+int _close_r (struct _reent *r, int file)
+{
+    return 0;
+}
+
+register char * stack_ptr __asm ("sp");
+
+caddr_t _sbrk_r (struct _reent *r, int incr)
+{
+    extern char   end __asm ("end");
+    static char * heap_end;
+    char *        prev_heap_end;
+
+    if (heap_end == NULL)
+        heap_end = & end;
+
+    prev_heap_end = heap_end;
+
+    if (heap_end + incr > stack_ptr)
+    {
+        errno = ENOMEM;
+        return (caddr_t) -1;
+    }
+
+    heap_end += incr;
+    return (caddr_t) prev_heap_end;
+}
+
+int _fstat_r (struct _reent *r, int file, struct stat * st)
+{
+    r = r;
+    file = file;
+    memset (st, 0, sizeof (* st));
+    st->st_mode = S_IFCHR;
+    return 0;
+}
+
+int _isatty_r(struct _reent *r, int fd)
+{
+    r = r;
+    fd = fd;
+    return 1;
+}
+
+int _getpid(int n)
+{
+    return 1;
+    n = n;
+}
+
+int _kill(int pid, int sig)
+{
+    asm ("swi %a0" :: "i" (11));
+    return -1;                          // Never gets here
+}
+
+void _exit(int sig)
+{
+    _kill(sig, -1);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/.gitignore gem5-SALAM/benchmarks/.gitignore
--- gem5/benchmarks/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,9 @@
+Misc/
+/*/*/*.ll
+/*/*/*.o
+/*/*/*.elf
+/*/*/*.bc
+lenet5/*
+lenet5-kernelunroll/*
+lenet5-nounroll/*
+lenet5-channelunroll/*
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/config.yml gem5-SALAM/benchmarks/lenet/design_a/config.yml
--- gem5/benchmarks/lenet/design_a/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/config.yml	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,147 @@
+---
+acc_cluster:
+  - Name: lenet5_clstr
+  - DMA:
+    - Name: dma
+      BufferSize: 64
+      MaxReqSize: 8
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: top
+      IrPath: hw/ir/top.ll
+      PIOSize: 17
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      InterruptNum: 68
+  - Accelerator:
+    - Name: conv0
+      IrPath: hw/ir/conv0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      Debug: False
+    - Var:
+      - Name: Conv0Input
+        Type: SPM
+        Size: 4096
+        Ports: 150
+    - Var:
+      - Name: Conv0Weights
+        Type: SPM
+        Size: 600
+        Ports: 150
+    - Var:
+      - Name: Conv0Output
+        Type: SPM
+        Size: 18816
+        Ports: 6
+  - Accelerator:
+    - Name: pool0
+      IrPath: hw/ir/pool0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: pool0Input
+        Type: SPM
+        Size: 18816
+        Ports: 24
+    - Var:
+      - Name: pool0Output
+        Type: SPM
+        Size: 4704
+        Ports: 24
+  - Accelerator:
+    - Name: conv1
+      IrPath: hw/ir/conv1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      Debug: False
+    - Var:
+      - Name: Conv1Input
+        Type: SPM
+        Size: 4704
+        Ports: 2400
+    - Var:
+      - Name: Conv1Weights
+        Type: SPM
+        Size: 9600
+        Ports: 2400
+    - Var:
+      - Name: Conv1Output
+        Type: SPM
+        Size: 6400
+        Ports: 16
+  - Accelerator:
+    - Name: pool1
+      IrPath: hw/ir/pool1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: pool1Input
+        Type: SPM
+        Size: 6400
+        Ports: 64
+    - Var:
+      - Name: pool1Output
+        Type: SPM
+        Size: 1600
+        Ports: 64
+  - Accelerator:
+    - Name: fc0
+      IrPath: hw/ir/fc0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      Debug: False
+    - Var:
+      - Name: fc0Input
+        Type: SPM
+        Size: 1600
+        Ports: 1200
+    - Var:
+      - Name: fc0Weights
+        Type: SPM
+        Size: 192000
+        Ports: 1200
+    - Var:
+      - Name: fc0Output
+        Type: SPM
+        Size: 480
+        Ports: 3
+  - Accelerator:
+    - Name: fc1
+      IrPath: hw/ir/fc1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      Debug: False
+    - Var:
+      - Name: fc1Input
+        Type: SPM
+        Size: 480
+        Ports: 120
+    - Var:
+      - Name: fc1Weights
+        Type: SPM
+        Size: 40320
+        Ports: 120
+    - Var:
+      - Name: fc1Output
+        Type: SPM
+        Size: 336
+        Ports: 1
+hw_config:
+  top:
+  conv0:
+  conv1:
+  conv2:
+  fc0:
+  pool0:
+  pool1:
+  fc1:
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/.gitignore gem5-SALAM/benchmarks/lenet/design_a/.gitignore
--- gem5/benchmarks/lenet/design_a/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,2 @@
+*.ll
+ir
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/Makefile gem5-SALAM/benchmarks/lenet/design_a/hw/Makefile
--- gem5/benchmarks/lenet/design_a/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,11 @@
+FOLDERS=source
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/conv0.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/conv0.c
--- gem5/benchmarks/lenet/design_a/hw/source/conv0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/conv0.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv0InDim][conv0InDim][conv0InChan];
+typedef uint32_t array4d_t[conv0KSize][conv0KSize][conv0InChan][conv0OutChan];
+typedef uint32_t array3d_out[conv0OutDim][conv0OutDim][conv0OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < conv0OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv0KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < conv0InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)Conv0Input;
+    void* kernel = (void*)Conv0Weights;
+    void* convOut = (void*)Conv0Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/conv1.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/conv1.c
--- gem5/benchmarks/lenet/design_a/hw/source/conv1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/conv1.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv1InDim][conv1InDim][conv1InChan];
+typedef uint32_t array4d_t[conv1KSize][conv1KSize][conv1InChan][conv1OutChan];
+typedef uint32_t array3d_out[conv1OutDim][conv1OutDim][conv1OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv1OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv1OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < conv1OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv1KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < conv1InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)Conv1Input;
+    void* kernel = (void*)Conv1Weights;
+    void* convOut = (void*)Conv1Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/fc0.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/fc0.c
--- gem5/benchmarks/lenet/design_a/hw/source/fc0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/fc0.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[fc0InDim][fc0InDim][fc0InChan];
+typedef uint32_t array4d_t[fc0KSize][fc0KSize][fc0InChan][fc0OutChan];
+typedef uint32_t array3d_out[fc0OutDim][fc0OutDim][fc0OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < fc0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < fc0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < fc0OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < fc0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < fc0KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < fc0InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)fc0Input;
+    void* kernel = (void*)fc0Weights;
+    void* convOut = (void*)fc0Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/fc1.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/fc1.c
--- gem5/benchmarks/lenet/design_a/hw/source/fc1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/fc1.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[fc1InDim][fc1InDim][fc1InChan];
+typedef uint32_t array4d_t[fc1KSize][fc1KSize][fc1InChan][fc1OutChan];
+typedef uint32_t array3d_out[fc1OutDim][fc1OutDim][fc1OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < fc1OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < fc1OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < fc1OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < fc1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < fc1KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < fc1InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)fc1Input;
+    void* kernel = (void*)fc1Weights;
+    void* convOut = (void*)fc1Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/Makefile gem5-SALAM/benchmarks/lenet/design_a/hw/source/Makefile
--- gem5/benchmarks/lenet/design_a/hw/source/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,10 @@
+LL = top.ll conv0.ll conv1.ll pool0.ll pool1.ll fc0.ll fc1.ll
+
+%.ll : %.c
+	rm -f ../ir/*.ll
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ir
+	mv $^ ../ir/
+clean:
+	rm -f ../ir/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/pool0.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/pool0.c
--- gem5/benchmarks/lenet/design_a/hw/source/pool0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/pool0.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,57 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[pool0InDim][pool0InDim][pool0InChan];
+typedef uint32_t array3d_out[pool0OutDim][pool0OutDim][pool0InChan];
+
+void compute(array3d_in poolIn, array3d_out poolOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool0InDim; h+=pool0KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool0InDim; w+=pool0KSize) {
+            // Input Channels
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool0InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                for (x = 0; x < pool0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < pool0KSize; y++) {
+                        sum += poolIn[h+x][w+y][c];
+                    }
+                }
+                poolOut[h/pool0KSize][w/pool0KSize][c] = sum/(pool0KSize*pool0KSize);
+            }
+        }
+    }
+}
+
+void top(){
+    void* poolIn = (void*)pool0Input;
+    void* poolOut = (void*)pool0Output;
+
+	compute(poolIn,poolOut);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/pool1.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/pool1.c
--- gem5/benchmarks/lenet/design_a/hw/source/pool1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/pool1.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,57 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[pool1InDim][pool1InDim][pool1InChan];
+typedef uint32_t array3d_out[pool1OutDim][pool1OutDim][pool1InChan];
+
+void compute(array3d_in poolIn, array3d_out poolOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool1InDim; h+=pool1KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool1InDim; w+=pool1KSize) {
+            // Input Channels
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool1InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                for (x = 0; x < pool1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < pool1KSize; y++) {
+                        sum += poolIn[h+x][w+y][c];
+                    }
+                }
+                poolOut[h/pool1KSize][w/pool1KSize][c] = sum/(pool1KSize*pool1KSize);
+            }
+        }
+    }
+}
+
+void top(){
+    void* poolIn = (void*)pool1Input;
+    void* poolOut = (void*)pool1Output;
+
+	compute(poolIn,poolOut);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/hw/source/top.c gem5-SALAM/benchmarks/lenet/design_a/hw/source/top.c
--- gem5/benchmarks/lenet/design_a/hw/source/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/hw/source/top.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,140 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+void top(uint64_t feats, uint64_t weights) {
+	// Define ACC MMRs
+	volatile uint8_t  * CONV0Flags  = (uint8_t *)CONV0;
+	volatile uint8_t  * POOL0Flags  = (uint8_t *)POOL0;
+	volatile uint8_t  * CONV1Flags  = (uint8_t *)CONV1;
+	volatile uint8_t  * POOL1Flags  = (uint8_t *)POOL1;
+	volatile uint8_t  * FC0Flags  = (uint8_t *)FC0;
+	volatile uint8_t  * FC1Flags  = (uint8_t *)FC1;
+	// Define DMA MMR
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Features
+	*DmaRdAddr  = feats;
+	*DmaWrAddr  = Conv0Input;
+	*DmaCopyLen = conv0InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Weights
+	*DmaRdAddr  = weights;
+	*DmaWrAddr  = Conv0Weights;
+	*DmaCopyLen = conv0WeightSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the conv0
+	*CONV0Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*CONV0Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = Conv0Output;
+	*DmaWrAddr  = weights;
+	*DmaCopyLen = conv0OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer POOL0 Features
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = pool0Input;
+	*DmaCopyLen = pool0InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the pool0
+	*POOL0Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*POOL0Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = pool0Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = pool0OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Features
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = Conv1Input;
+	*DmaCopyLen = conv1InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer Input Weights
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = Conv1Weights;
+	*DmaCopyLen = conv1WeightSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the conv1
+	*CONV1Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*CONV1Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = Conv1Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = conv1OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Features
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = pool1Input;
+	*DmaCopyLen = pool1InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the pool1
+	*POOL1Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*POOL1Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = pool1Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = pool1OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Features
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = fc0Input;
+	*DmaCopyLen = fc0InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the fc0
+	*FC0Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*FC0Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = fc0Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = fc0OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	// //Transfer Input Features
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = fc1Input;
+	*DmaCopyLen = fc1InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Start the fc1
+	*FC1Flags = DEV_INIT;
+	//Poll function for finish
+	while ((*FC1Flags & DEV_INTR) != DEV_INTR);
+	//Transfer Results Back to Main Memory
+	*DmaRdAddr  = fc1Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = fc1OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/lenet5_clstr_hw_defines.h gem5-SALAM/benchmarks/lenet/design_a/lenet5_clstr_hw_defines.h
--- gem5/benchmarks/lenet/design_a/lenet5_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/lenet5_clstr_hw_defines.h	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,101 @@
+#define NO_UNROLL
+// #define INPUT_UNROLL
+// #define OUTPUT_UNROLL
+
+#include <stdint.h>
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+#define TYPE float
+
+#define conv0InDim 32
+#define conv0InChan 1
+#define conv0OutDim 28
+#define conv0OutChan 6
+#define conv0KSize 5
+#define conv0KernChan 6
+#define conv0InSize conv0InDim*conv0InDim*conv0InChan*sizeof(TYPE)
+#define conv0WeightSize conv0KSize*conv0KSize*conv0InChan*conv0KernChan*sizeof(TYPE)
+#define conv0OutputSize conv0OutDim*conv0OutDim*conv0KernChan*sizeof(TYPE)
+
+#define pool0InDim 28
+#define pool0InChan 6
+#define pool0KSize 2
+#define pool0OutDim 14
+#define pool0InSize pool0InDim*pool0InDim*pool0InChan*sizeof(TYPE)
+#define pool0OutputSize pool0OutDim*pool0OutDim*pool0InChan*sizeof(TYPE)
+
+#define conv1InDim 14
+#define conv1InChan 6
+#define conv1KSize 5
+#define conv1KernChan 16
+#define conv1OutDim 10
+#define conv1OutChan 16
+#define conv1InSize conv1InDim*conv1InDim*conv1InChan*sizeof(TYPE)
+#define conv1WeightSize conv1KSize*conv1KSize*conv1InChan*conv1KernChan*sizeof(TYPE)
+#define conv1OutputSize conv1OutDim*conv1OutDim*conv1KernChan*sizeof(TYPE)
+
+#define pool1InDim 10
+#define pool1InChan 16
+#define pool1KSize 2
+#define pool1OutDim 5
+#define pool1InSize pool1InDim*pool1InDim*pool1InChan*sizeof(TYPE)
+#define pool1OutputSize pool1OutDim*pool1OutDim*pool1InChan*sizeof(TYPE)
+
+#define fc0InDim 5
+#define fc0InChan 16
+#define fc0KSize 5
+#define fc0KernChan 120
+#define fc0OutDim 1
+#define fc0OutChan 120
+#define fc0InSize fc0InDim*fc0InDim*fc0InChan*sizeof(TYPE)
+#define fc0WeightSize fc0KSize*fc0KSize*fc0InChan*fc0KernChan*sizeof(TYPE)
+#define fc0OutputSize fc0OutDim*fc0OutDim*fc0KernChan*sizeof(TYPE)
+
+#define fc1InDim 1
+#define fc1InChan 120
+#define fc1KSize 1
+#define fc1KernChan 84
+#define fc1OutDim 1
+#define fc1OutChan 84
+#define fc1InSize fc1InDim*fc1InDim*fc1InChan*sizeof(TYPE)
+#define fc1WeightSize fc1KSize*fc1KSize*fc0InChan*fc1KernChan*sizeof(TYPE)
+#define fc1OutputSize fc1OutDim*fc1OutDim*fc1KernChan*sizeof(TYPE)
+
+//BEGIN GENERATED CODE
+//Cluster: LENET5_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: CONV0
+#define CONV0 0x10020080
+#define Conv0Input 0x100200c0
+#define Conv0Weights 0x10021100
+#define Conv0Output 0x10021380
+//Accelerator: POOL0
+#define POOL0 0x10025d40
+#define pool0Input 0x10025d80
+#define pool0Output 0x1002a740
+//Accelerator: CONV1
+#define CONV1 0x1002b9c0
+#define Conv1Input 0x1002ba00
+#define Conv1Weights 0x1002cc80
+#define Conv1Output 0x1002f240
+//Accelerator: POOL1
+#define POOL1 0x10030b80
+#define pool1Input 0x10030bc0
+#define pool1Output 0x10032500
+//Accelerator: FC0
+#define FC0 0x10032b80
+#define fc0Input 0x10032bc0
+#define fc0Weights 0x10033240
+#define fc0Output 0x10062080
+//Accelerator: FC1
+#define FC1 0x10062280
+#define fc1Input 0x100622c0
+#define fc1Weights 0x100624c0
+#define fc1Output 0x1006c280
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/Makefile gem5-SALAM/benchmarks/lenet/design_a/Makefile
--- gem5/benchmarks/lenet/design_a/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/boot.ld gem5-SALAM/benchmarks/lenet/design_a/sw/boot.ld
--- gem5/benchmarks/lenet/design_a/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/boot.ld	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/boot.s gem5-SALAM/benchmarks/lenet/design_a/sw/boot.s
--- gem5/benchmarks/lenet/design_a/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/boot.s	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/.gitignore gem5-SALAM/benchmarks/lenet/design_a/sw/.gitignore
--- gem5/benchmarks/lenet/design_a/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/host.h gem5-SALAM/benchmarks/lenet/design_a/sw/host.h
--- gem5/benchmarks/lenet/design_a/sw/host.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/host.h	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,5 @@
+#include "../lenet5_clstr_hw_defines.h"
+
+#define feats       0x8f000000
+#define weights     0x91000000
+volatile uint8_t stage;
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/isr.c gem5-SALAM/benchmarks/lenet/design_a/sw/isr.c
--- gem5/benchmarks/lenet/design_a/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/isr.c	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,9 @@
+#include <stdio.h>
+#include "host.h"
+void isr(void)
+{
+	uint8_t  * MMR  = (uint8_t  *)(TOP);
+	printf("Interrupt\n\r");
+	*MMR = 0x00;
+	stage += 1;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/main.cpp gem5-SALAM/benchmarks/lenet/design_a/sw/main.cpp
--- gem5/benchmarks/lenet/design_a/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/main.cpp	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,23 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "host.h"
+#include "../../../common/m5ops.h"
+int main(void) {
+        // Set stage to 0
+        stage = 0;
+        m5_reset_stats();
+        volatile uint8_t  * MMR  = (uint8_t  *)(TOP + 0x00);
+        volatile uint64_t * ARGS = (uint64_t *)(TOP + 0x01);
+        // Run Head
+        printf("Setting args\n");
+        ARGS[0] = feats;
+        ARGS[1] = weights;
+        printf("Running acc\n");
+        MMR[0]  = 0x01;
+        while(stage == 0);
+        m5_dump_stats();
+	m5_exit();
+
+        return 0;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_a/sw/Makefile gem5-SALAM/benchmarks/lenet/design_a/sw/Makefile
--- gem5/benchmarks/lenet/design_a/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_a/sw/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,14 @@
+include ../../../common/Makefile
+
+OBJS = boot.o ../../../common/syscalls.o main.o isr.o
+
+all: clean main.elf
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/config.yml gem5-SALAM/benchmarks/lenet/design_b/config.yml
--- gem5/benchmarks/lenet/design_b/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/config.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,226 @@
+---
+acc_cluster:
+  - Name: lenet5_clstr
+  - DMA:
+    - Name: dma
+      BufferSize: 64
+      MaxReqSize: 8
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: top
+      IrPath: hw/ir/top.ll
+      PIOSize: 17
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      InterruptNum: 68
+  - Accelerator:
+    - Name: conv0
+      IrPath: hw/ir/conv0.ll
+      Debug: True
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv0Input
+        Type: SPM
+        Size: 4096
+        Ports: 150
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+    - Var:
+      - Name: Conv0Weights
+        Type: SPM
+        Size: 600
+        Ports: 150
+    - Var:
+      - Name: Conv0Output
+        Type: SPM
+        Size: 18816
+        Ports: 6
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_0:6
+
+  - Accelerator:
+    - Name: data_mover_0
+      IrPath: hw/ir/data_mover_0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: pool0
+      IrPath: hw/ir/pool0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: pool0Input
+        Type: SPM
+        Size: 18816
+        Ports: 24
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_0:24
+    - Var:
+      - Name: pool0Output
+        Type: SPM
+        Size: 4704
+        Ports: 6
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_1:6
+  - Accelerator:
+    - Name: data_mover_1
+      IrPath: hw/ir/data_mover_1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: conv1
+      IrPath: hw/ir/conv1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv1Input
+        Type: SPM
+        Size: 4704
+        Ports: 2400
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_1:2400
+    - Var:
+      - Name: Conv1Weights
+        Type: SPM
+        Size: 9600
+        Ports: 2400
+    - Var:
+      - Name: Conv1Output
+        Type: SPM
+        Size: 6400
+        Ports: 16
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_2:16
+
+  - Accelerator:
+    - Name: data_mover_2
+      IrPath: hw/ir/data_mover_2.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: pool1
+      IrPath: hw/ir/pool1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: pool1Input
+        Type: SPM
+        Size: 6400
+        Ports: 64
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_2:64
+    - Var:
+      - Name: pool1Output
+        Type: SPM
+        Size: 1600
+        Ports: 16
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_3:16
+  - Accelerator:
+    - Name: data_mover_3
+      IrPath: hw/ir/data_mover_3.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: conv2
+      IrPath: hw/ir/conv2.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: conv2Input
+        Type: SPM
+        Size: 1600
+        Ports: 1200
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_3:16
+    - Var:
+      - Name: conv2Weights
+        Type: SPM
+        Size: 192000
+        Ports: 1200
+    - Var:
+      - Name: conv2Output
+        Type: SPM
+        Size: 480
+        Ports: 120
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_4:120
+  - Accelerator:
+    - Name: data_mover_4
+      IrPath: hw/ir/data_mover_4.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: fc0
+      IrPath: hw/ir/fc0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: fc0Input
+        Type: SPM
+        Size: 480
+        Ports: 120
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+        Connections: data_mover_4:120
+    - Var:
+      - Name: fc0Weights
+        Type: SPM
+        Size: 40320
+        Ports: 120
+    - Var:
+      - Name: fc0Output
+        Type: SPM
+        Size: 336
+        Ports: 120
+        ReadyMode: True
+        ResetOnRead: False
+        WriteOnValid: False
+hw_config:
+  top:
+  conv0:
+  conv1:
+  conv2:
+  fc0:
+  pool0:
+  pool1:
+  fc1:
+  data_mover_0:
+  data_mover_1:
+  data_mover_2:
+  data_mover_3:
+  data_mover_4:
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/.gitignore gem5-SALAM/benchmarks/lenet/design_b/.gitignore
--- gem5/benchmarks/lenet/design_b/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,2 @@
+*.ll
+ir
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/Makefile gem5-SALAM/benchmarks/lenet/design_b/hw/Makefile
--- gem5/benchmarks/lenet/design_b/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,11 @@
+FOLDERS=source
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b; done )
+
+clean:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/conv0.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv0.c
--- gem5/benchmarks/lenet/design_b/hw/source/conv0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv0InDim][conv0InDim][conv0InChan];
+typedef uint32_t array4d_t[conv0KSize][conv0KSize][conv0InChan][conv0OutChan];
+typedef uint32_t array3d_out[conv0OutDim][conv0OutDim][conv0OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < conv0OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv0KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < conv0InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)Conv0Input;
+    void* kernel = (void*)Conv0Weights;
+    void* convOut = (void*)Conv0Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/conv1.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv1.c
--- gem5/benchmarks/lenet/design_b/hw/source/conv1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv1InDim][conv1InDim][conv1InChan];
+typedef uint32_t array4d_t[conv1KSize][conv1KSize][conv1InChan][conv1OutChan];
+typedef uint32_t array3d_out[conv1OutDim][conv1OutDim][conv1OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv1OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv1OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < conv1OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv1KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < conv1InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)Conv1Input;
+    void* kernel = (void*)Conv1Weights;
+    void* convOut = (void*)Conv1Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/conv2.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv2.c
--- gem5/benchmarks/lenet/design_b/hw/source/conv2.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/conv2.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv2InDim][conv2InDim][conv2InChan];
+typedef uint32_t array4d_t[conv2KSize][conv2KSize][conv2InChan][conv2OutChan];
+typedef uint32_t array3d_out[conv2OutDim][conv2OutDim][conv2OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv2OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv2OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < conv2OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv2KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv2KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < conv2InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)conv2Input;
+    void* kernel = (void*)conv2Weights;
+    void* convOut = (void*)conv2Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/data_mover_0.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_0.c
--- gem5/benchmarks/lenet/design_b/hw/source/data_mover_0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,34 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_t[conv0OutDim][conv0OutDim][conv0OutChan];
+
+void compute(array3d_t in, array3d_t out) {
+
+    // HWC Implementation for Convolution
+    int h,w,c;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < conv0OutChan; c++) {
+               out[h][w][c] = in[h][w][c];
+            }
+        }
+    }
+}
+
+void top(){
+    void* input = (void*)Conv0Output;
+    void* output = (void*)pool0Input;
+
+	compute(input,output);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/data_mover_1.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_1.c
--- gem5/benchmarks/lenet/design_b/hw/source/data_mover_1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,34 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_t[pool0OutDim][pool0OutDim][pool0OutChan];
+
+void compute(array3d_t in, array3d_t out) {
+
+    // HWC Implementation for Convolution
+    int h,w,c;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool0OutChan; c++) {
+               out[h][w][c] = in[h][w][c];
+            }
+        }
+    }
+}
+
+void top(){
+    void* input = (void*)pool0Output;
+    void* output = (void*)Conv1Input;
+
+	compute(input,output);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/data_mover_2.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_2.c
--- gem5/benchmarks/lenet/design_b/hw/source/data_mover_2.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_2.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,34 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_t[conv1OutDim][conv1OutDim][conv1OutChan];
+
+void compute(array3d_t in, array3d_t out) {
+
+    // HWC Implementation for Convolution
+    int h,w,c;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv1OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv1OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < conv1OutChan; c++) {
+               out[h][w][c] = in[h][w][c];
+            }
+        }
+    }
+}
+
+void top(){
+    void* input = (void*)Conv1Output;
+    void* output = (void*)pool1Input;
+
+	compute(input,output);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/data_mover_3.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_3.c
--- gem5/benchmarks/lenet/design_b/hw/source/data_mover_3.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_3.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,34 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_t[pool1OutDim][pool1OutDim][pool1OutChan];
+
+void compute(array3d_t in, array3d_t out) {
+
+    // HWC Implementation for Convolution
+    int h,w,c;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool1OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool1OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool1OutChan; c++) {
+               out[h][w][c] = in[h][w][c];
+            }
+        }
+    }
+}
+
+void top(){
+    void* input = (void*)pool1Output;
+    void* output = (void*)conv2Input;
+
+	compute(input,output);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/data_mover_4.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_4.c
--- gem5/benchmarks/lenet/design_b/hw/source/data_mover_4.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/data_mover_4.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,34 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_t[conv2OutDim][conv2OutDim][conv2OutChan];
+
+void compute(array3d_t in, array3d_t out) {
+
+    // HWC Implementation for Convolution
+    int h,w,c;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < conv2OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv2OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < conv2OutChan; c++) {
+               out[h][w][c] = in[h][w][c];
+            }
+        }
+    }
+}
+
+void top(){
+    void* input = (void*)conv2Output;
+    void* output = (void*)fc0Input;
+
+	compute(input,output);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/fc0.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/fc0.c
--- gem5/benchmarks/lenet/design_b/hw/source/fc0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/fc0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,91 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[fc0InDim][fc0InDim][fc0InChan];
+typedef uint32_t array4d_t[fc0KSize][fc0KSize][fc0InChan][fc0OutChan];
+typedef uint32_t array3d_out[fc0OutDim][fc0OutDim][fc0OutChan];
+
+void compute(array3d_in convInput, array4d_t kernel, array3d_out convOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < fc0OutDim; h++) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < fc0OutDim; w++) {
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            // Output Channels
+            for(cc = 0; cc < fc0OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < fc0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < fc0KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #elif OUTPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c = 0; c < fc0InChan; c++) {
+                            sum += convInput[h+x][w+y][c]
+                            * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                // if(sum >= 2){
+                //     sum = sum*0.964027580076;
+                // } else if (sum < 2 && sum >= 1){
+                //     sum = sum*0.761594155956;
+                // } else if (sum < 1 && sum >= .5){
+                //     sum = sum*0.46211715726;
+                // } else if (sum < .5 && sum >= .25){
+                //     sum = sum*.244918662404;
+                // } else if (sum < .25 && sum >= 0){
+                //     sum = sum*0;
+                // } else if (sum < 0 && sum >= -.25){
+                //     sum = sum*-.244918662404;
+                // } else if (sum < -.25 && sum >= -.5){
+                //     sum = sum*-0.46211715726;
+                // } else if (sum < -.5 && sum >= -1){
+                //     sum = sum*-0.761594155956;
+                // } else if (sum > -1){
+                //     sum = sum*-0.964027580076;
+                // }
+                convOut[h][w][cc] = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convInput = (void*)fc0Input;
+    void* kernel = (void*)fc0Weights;
+    void* convOut = (void*)fc0Output;
+
+	compute(convInput,kernel,convOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/Makefile gem5-SALAM/benchmarks/lenet/design_b/hw/source/Makefile
--- gem5/benchmarks/lenet/design_b/hw/source/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,10 @@
+LL = top.ll conv0.ll conv1.ll conv2.ll pool0.ll pool1.ll fc0.ll data_mover_0.ll data_mover_1.ll data_mover_2.ll data_mover_3.ll data_mover_4.ll
+
+%.ll : %.c
+	rm -f ../ir/*.ll
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../ir
+	mv $^ ../ir/
+clean:
+	rm -f ../ir/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/pool0.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/pool0.c
--- gem5/benchmarks/lenet/design_b/hw/source/pool0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/pool0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,57 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[pool0InDim][pool0InDim][pool0InChan];
+typedef uint32_t array3d_out[pool0OutDim][pool0OutDim][pool0InChan];
+
+void compute(array3d_in poolIn, array3d_out poolOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool0InDim; h+=pool0KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool0InDim; w+=pool0KSize) {
+            // Input Channels
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool0InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                for (x = 0; x < pool0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < pool0KSize; y++) {
+                        sum += poolIn[h+x][w+y][c];
+                    }
+                }
+                poolOut[h/pool0KSize][w/pool0KSize][c] = sum/(pool0KSize*pool0KSize);
+            }
+        }
+    }
+}
+
+void top(){
+    void* poolIn = (void*)pool0Input;
+    void* poolOut = (void*)pool0Output;
+
+	compute(poolIn,poolOut);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/pool1.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/pool1.c
--- gem5/benchmarks/lenet/design_b/hw/source/pool1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/pool1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,57 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[pool1InDim][pool1InDim][pool1InChan];
+typedef uint32_t array3d_out[pool1OutDim][pool1OutDim][pool1InChan];
+
+void compute(array3d_in poolIn, array3d_out poolOut) {
+    // HWC Implementation for Convolution
+    int h,w,c,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool1InDim; h+=pool1KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool1InDim; w+=pool1KSize) {
+            // Input Channels
+            #ifdef NO_UNROLL
+            #pragma nounroll
+            #elif INPUT_UNROLL
+            #pragma nounroll
+            #elif OUTPUT_UNROLL
+            #pragma unroll
+            #endif
+            for(c = 0; c < pool1InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #elif OUTPUT_UNROLL
+                #pragma unroll
+                #endif
+                for (x = 0; x < pool1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #elif OUTPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < pool1KSize; y++) {
+                        sum += poolIn[h+x][w+y][c];
+                    }
+                }
+                poolOut[h/pool1KSize][w/pool1KSize][c] = sum/(pool1KSize*pool1KSize);
+            }
+        }
+    }
+}
+
+void top(){
+    void* poolIn = (void*)pool1Input;
+    void* poolOut = (void*)pool1Output;
+
+	compute(poolIn,poolOut);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/hw/source/top.c gem5-SALAM/benchmarks/lenet/design_b/hw/source/top.c
--- gem5/benchmarks/lenet/design_b/hw/source/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/hw/source/top.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,95 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+void top(uint64_t feats, uint64_t weights) {
+	// Define ACC MMRs
+	volatile uint8_t  * CONV0Flags  = (uint8_t *)CONV0;
+	volatile uint8_t  * DATA_MOVER_0_Flags  = (uint8_t *)DATA_MOVER_0;
+	volatile uint8_t  * POOL0Flags  = (uint8_t *)POOL0;
+	volatile uint8_t  * DATA_MOVER_1_Flags  = (uint8_t *)DATA_MOVER_1;
+	volatile uint8_t  * CONV1Flags  = (uint8_t *)CONV1;
+	volatile uint8_t  * DATA_MOVER_2_Flags  = (uint8_t *)DATA_MOVER_2;
+	volatile uint8_t  * POOL1Flags  = (uint8_t *)POOL1;
+	volatile uint8_t  * DATA_MOVER_3_Flags  = (uint8_t *)DATA_MOVER_3;
+	volatile uint8_t  * CONV2Flags  = (uint8_t *)CONV2;
+	volatile uint8_t  * DATA_MOVER_4_Flags  = (uint8_t *)DATA_MOVER_4;
+	volatile uint8_t  * FC0Flags  = (uint8_t *)FC0;
+
+	// Define DMA MMR
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Features
+	*DmaRdAddr  = feats;
+	*DmaWrAddr  = Conv0Input;
+	*DmaCopyLen = conv0InSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Weights
+	*DmaRdAddr  = weights;
+	*DmaWrAddr  = Conv0Weights;
+	*DmaCopyLen = conv0WeightSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Input Weights
+	*DmaRdAddr  = 0x90000000;
+	*DmaWrAddr  = Conv1Weights;
+	*DmaCopyLen = conv1WeightSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start conv0
+	*CONV0Flags = DEV_INIT;
+	//Start Data Mover 0
+	*DATA_MOVER_0_Flags = DEV_INIT;
+	//Start pool0
+	*POOL0Flags = DEV_INIT;
+	//Start Data Mover 1
+	*DATA_MOVER_1_Flags = DEV_INIT;
+	//Start conv1
+	*CONV1Flags = DEV_INIT;
+	//Start Data Mover 2
+	*DATA_MOVER_2_Flags = DEV_INIT;
+	//Start pool1
+	*POOL1Flags = DEV_INIT;
+	//Start Data Mover 3
+	*DATA_MOVER_3_Flags = DEV_INIT;
+	//Start conv2
+	*CONV2Flags = DEV_INIT;
+	//Start Data Mover 4
+	*DATA_MOVER_4_Flags = DEV_INIT;
+	//Start fc0
+	*FC0Flags = DEV_INIT;
+	// Wait for last acc to exit
+	while ((*FC0Flags & DEV_INTR) != DEV_INTR);
+	// Transfer Results Back to Main Memory
+	*DmaRdAddr  = fc0Output;
+	*DmaWrAddr  = 0x90000000;
+	*DmaCopyLen = fc0OutputSize;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	// //Transfer Input Features
+	// *DmaRdAddr  = 0x90000000;
+	// *DmaWrAddr  = fc1Input;
+	// *DmaCopyLen = fc1InSize;
+	// *DmaFlags   = DEV_INIT;
+	// //Poll DMA for finish
+	// while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	// //Start fc1
+	// *FC1Flags = DEV_INIT;
+	// //Poll function for finish
+	// while ((*FC1Flags & DEV_INTR) != DEV_INTR);
+	// //Transfer Results Back to Main Memory
+	// *DmaRdAddr  = fc1Output;
+	// *DmaWrAddr  = 0x90000000;
+	// *DmaCopyLen = fc1OutputSize;
+	// *DmaFlags   = DEV_INIT;
+	// while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/lenet5_clstr_hw_defines.h gem5-SALAM/benchmarks/lenet/design_b/lenet5_clstr_hw_defines.h
--- gem5/benchmarks/lenet/design_b/lenet5_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/lenet5_clstr_hw_defines.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,117 @@
+#define NO_UNROLL
+// #define INPUT_UNROLL
+// #define OUTPUT_UNROLL
+
+#include <stdint.h>
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+#define TYPE float
+
+#define conv0UnrollFactor 1 // Should be from 1->Input Channels
+#define conv0InDim 32
+#define conv0InChan 1
+#define conv0OutDim 28
+#define conv0OutChan 6
+#define conv0KSize 5
+#define conv0KernChan 6
+#define conv0InSize conv0InDim*conv0InDim*conv0InChan*sizeof(TYPE)
+#define conv0WeightSize conv0KSize*conv0KSize*conv0InChan*conv0KernChan*sizeof(TYPE)
+#define conv0OutputSize conv0OutDim*conv0OutDim*conv0KernChan*sizeof(TYPE)
+
+#define pool0UnrollFactor 1
+#define pool0InDim 28
+#define pool0InChan 6
+#define pool0OutChan 6
+#define pool0KSize 2
+#define pool0OutDim 14
+#define pool0InSize pool0InDim*pool0InDim*pool0InChan*sizeof(TYPE)
+#define pool0OutputSize pool0OutDim*pool0OutDim*pool0InChan*sizeof(TYPE)
+
+#define conv1UnrollFactor 1
+#define conv1InDim 14
+#define conv1InChan 6
+#define conv1KSize 5
+#define conv1KernChan 16
+#define conv1OutDim 10
+#define conv1OutChan 16
+#define conv1InSize conv1InDim*conv1InDim*conv1InChan*sizeof(TYPE)
+#define conv1WeightSize conv1KSize*conv1KSize*conv1InChan*conv1KernChan*sizeof(TYPE)
+#define conv1OutputSize conv1OutDim*conv1OutDim*conv1KernChan*sizeof(TYPE)
+
+#define pool1UnrollFactor 1
+#define pool1InDim 10
+#define pool1InChan 16
+#define pool1OutChan 16
+#define pool1KSize 2
+#define pool1OutDim 5
+#define pool1InSize pool1InDim*pool1InDim*pool1InChan*sizeof(TYPE)
+#define pool1OutputSize pool1OutDim*pool1OutDim*pool1InChan*sizeof(TYPE)
+
+#define conv2InDim 5
+#define conv2InChan 16
+#define conv2KSize 5
+#define conv2KernChan 120
+#define conv2OutDim 1
+#define conv2OutChan 120
+#define conv2InSize conv2InDim*conv2InDim*conv2InChan*sizeof(TYPE)
+#define conv2WeightSize conv2KSize*conv2KSize*conv2InChan*conv2KernChan*sizeof(TYPE)
+#define conv2OutputSize conv2OutDim*conv2OutDim*conv2KernChan*sizeof(TYPE)
+
+#define fc0InDim 1
+#define fc0InChan 120
+#define fc0KSize 1
+#define fc0KernChan 84
+#define fc0OutDim 1
+#define fc0OutChan 84
+#define fc0InSize fc0InDim*fc0InDim*fc0InChan*sizeof(TYPE)
+#define fc0WeightSize fc0KSize*fc0KSize*conv2InChan*fc0KernChan*sizeof(TYPE)
+#define fc0OutputSize fc0OutDim*fc0OutDim*fc0KernChan*sizeof(TYPE)
+
+//BEGIN GENERATED CODE
+//Cluster: LENET5_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: CONV0
+#define CONV0 0x10020080
+#define Conv0Input 0x100200c0
+#define Conv0Weights 0x10021100
+#define Conv0Output 0x10021380
+//Accelerator: DATA_MOVER_0
+#define DATA_MOVER_0 0x10025d40
+//Accelerator: POOL0
+#define POOL0 0x10025d80
+#define pool0Input 0x10025dc0
+#define pool0Output 0x1002a780
+//Accelerator: DATA_MOVER_1
+#define DATA_MOVER_1 0x1002ba00
+//Accelerator: CONV1
+#define CONV1 0x1002ba40
+#define Conv1Input 0x1002ba80
+#define Conv1Weights 0x1002cd00
+#define Conv1Output 0x1002f2c0
+//Accelerator: DATA_MOVER_2
+#define DATA_MOVER_2 0x10030c00
+//Accelerator: POOL1
+#define POOL1 0x10030c40
+#define pool1Input 0x10030c80
+#define pool1Output 0x100325c0
+//Accelerator: DATA_MOVER_3
+#define DATA_MOVER_3 0x10032c40
+//Accelerator: CONV2
+#define CONV2 0x10032c80
+#define conv2Input 0x10032cc0
+#define conv2Weights 0x10033340
+#define conv2Output 0x10062180
+//Accelerator: DATA_MOVER_4
+#define DATA_MOVER_4 0x10062380
+//Accelerator: FC0
+#define FC0 0x100623c0
+#define fc0Input 0x10062400
+#define fc0Weights 0x10062600
+#define fc0Output 0x1006c3c0
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/Makefile gem5-SALAM/benchmarks/lenet/design_b/Makefile
--- gem5/benchmarks/lenet/design_b/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/boot.ld gem5-SALAM/benchmarks/lenet/design_b/sw/boot.ld
--- gem5/benchmarks/lenet/design_b/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/boot.ld	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/boot.s gem5-SALAM/benchmarks/lenet/design_b/sw/boot.s
--- gem5/benchmarks/lenet/design_b/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/boot.s	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/.gitignore gem5-SALAM/benchmarks/lenet/design_b/sw/.gitignore
--- gem5/benchmarks/lenet/design_b/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/.gitignore	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/host.h gem5-SALAM/benchmarks/lenet/design_b/sw/host.h
--- gem5/benchmarks/lenet/design_b/sw/host.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/host.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,5 @@
+#include "../lenet5_clstr_hw_defines.h"
+
+#define feats       0x8f000000
+#define weights     0x91000000
+volatile uint8_t stage;
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/isr.c gem5-SALAM/benchmarks/lenet/design_b/sw/isr.c
--- gem5/benchmarks/lenet/design_b/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/isr.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,9 @@
+#include <stdio.h>
+#include "host.h"
+void isr(void)
+{
+	uint8_t  * MMR  = (uint8_t  *)(TOP);
+	printf("Interrupt\n\r");
+	*MMR = 0x00;
+	stage += 1;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/main.cpp gem5-SALAM/benchmarks/lenet/design_b/sw/main.cpp
--- gem5/benchmarks/lenet/design_b/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/main.cpp	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,23 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "host.h"
+#include "../../../common/m5ops.h"
+int main(void) {
+    // Set stage to 0
+    stage = 0;
+    m5_reset_stats();
+    volatile uint8_t  * MMR  = (uint8_t  *)(TOP + 0x00);
+    volatile uint64_t * ARGS = (uint64_t *)(TOP + 0x01);
+    // Run Head
+    printf("Setting args\n");
+    ARGS[0] = feats;
+    ARGS[1] = weights;
+    printf("Running acc\n");
+    MMR[0]  = 0x01;
+    while(stage == 0);
+    m5_dump_stats();
+	m5_exit();
+
+    return 0;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_b/sw/Makefile gem5-SALAM/benchmarks/lenet/design_b/sw/Makefile
--- gem5/benchmarks/lenet/design_b/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_b/sw/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,14 @@
+include ../../../common/Makefile
+
+OBJS = boot.o ../../../common/syscalls.o main.o isr.o
+
+all: clean main.elf
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/config.yml gem5-SALAM/benchmarks/lenet/design_c/config.yml
--- gem5/benchmarks/lenet/design_c/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/config.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,245 @@
+---
+acc_cluster:
+  - Name: lenet5_clstr
+  - DMA:
+    - Name: dma
+      BufferSize: 128
+      MaxReqSize: 64
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - DMA:
+    - Name: StreamDma
+      PIOMaster: LocalBus
+      Size: 8
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+      BufferSize: 128
+  - Accelerator:
+    - Name: top
+      IrPath: hw/ir/top.ll
+      PIOSize: 9
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      InterruptNum: 68
+  - Accelerator:
+    - Name: data_mover_0
+      IrPath: hw/ir/data_mover_0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: StreamDma
+    - Var:
+      - Name: Conv0LineBuff
+        Type: SPM
+        Size: 640
+        Ports: 25
+  - Accelerator:
+    - Name: conv0
+      IrPath: hw/ir/conv0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv0Weights
+        Type: SPM
+        Size: 600
+        Ports: 25
+    - Var:
+      - Name: Conv0Window
+        Type: SPM
+        Size: 100
+        Ports: 25
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: data_mover_0:25
+    - Var:
+      - Name: Conv0Out
+        Type: Stream
+        StreamSize: 4
+        BufferSize: 16
+        InCon: conv0
+        OutCon: pool_mover_0
+  - Accelerator:
+    - Name: pool_mover_0
+      IrPath: hw/ir/pool_mover_0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: pool0
+      IrPath: hw/ir/pool0.ll
+      Debug: True
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Pool0Window
+        Type: SPM
+        Size: 1344
+        Ports: 4
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: pool_mover_0:4
+    - Var:
+      - Name: Pool0Out
+        Type: Stream
+        StreamSize: 4
+        BufferSize: 16
+        InCon: pool0
+        OutCon: data_mover_1
+  - Accelerator:
+    - Name: data_mover_1
+      IrPath: hw/ir/data_mover_1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv1LineBuff
+        Type: SPM
+        Size: 4704
+        Ports: 150
+  - Accelerator:
+    - Name: conv1
+      IrPath: hw/ir/conv1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv1Weights
+        Type: SPM
+        Size: 9600
+        Ports: 150
+    - Var:
+      - Name: Conv1Window
+        Type: SPM
+        Size: 600
+        Ports: 150
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: data_mover_1:150
+    - Var:
+      - Name: Conv1Out
+        Type: Stream
+        StreamSize: 4
+        BufferSize: 16
+        InCon: conv1
+        OutCon: pool_mover_1
+  - Accelerator:
+    - Name: pool_mover_1
+      IrPath: hw/ir/pool_mover_1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+  - Accelerator:
+    - Name: pool1
+      IrPath: hw/ir/pool1.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Pool1Window
+        Type: SPM
+        Size: 1280
+        Ports: 4
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: pool_mover_1:4
+    - Var:
+      - Name: Pool1Out
+        Type: Stream
+        StreamSize: 4
+        BufferSize: 16
+        InCon: pool1
+        OutCon: data_mover_2
+  - Accelerator:
+    - Name: data_mover_2
+      IrPath: hw/ir/data_mover_2.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv2LineBuff
+        Type: SPM
+        Size: 1600
+        Ports: 400
+  - Accelerator:
+    - Name: conv2
+      IrPath: hw/ir/conv2.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: Conv2Weights
+        Type: SPM
+        Size: 192000
+        Ports: 400
+    - Var:
+      - Name: Conv2Window
+        Type: SPM
+        Size: 1600
+        Ports: 400
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: data_mover_2:400
+    - Var:
+      - Name: Conv2Out
+        Type: Stream
+        StreamSize: 4
+        BufferSize: 16
+        InCon: conv2
+        OutCon: data_mover_3
+  - Accelerator:
+    - Name: data_mover_3
+      IrPath: hw/ir/data_mover_3.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: FC0LineBuff
+        Type: SPM
+        Size: 480
+        Ports: 120
+  - Accelerator:
+    - Name: fc0
+      IrPath: hw/ir/fc0.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: StreamDma
+    - Var:
+      - Name: FC0Weights
+        Type: SPM
+        Size: 40320
+        Ports: 120
+    - Var:
+      - Name: FC0Window
+        Type: SPM
+        Size: 480
+        Ports: 120
+        ReadyMode: True
+        ResetOnRead: True
+        WriteOnValid: False
+        Connections: data_mover_3:12
+hw_config:
+  top:
+  conv0:
+  conv1:
+  conv2:
+  fc0:
+  pool0:
+  pool1:
+  fc1:
+  data_mover_0:
+  data_mover_1:
+  data_mover_2:
+  data_mover_3:
+  data_mover_4:
+  pool_mover_0:
+  pool_mover_1:
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/.gitignore gem5-SALAM/benchmarks/lenet/design_c/.gitignore
--- gem5/benchmarks/lenet/design_c/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/.gitignore	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,2 @@
+*.ll
+ir
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/Makefile gem5-SALAM/benchmarks/lenet/design_c/hw/Makefile
--- gem5/benchmarks/lenet/design_c/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,11 @@
+FOLDERS=source
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b; done )
+
+clean:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/conv0.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv0.c
--- gem5/benchmarks/lenet/design_c/hw/source/conv0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,78 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv0KSize][conv0KSize][conv0InChan];
+typedef uint32_t array4d_t[conv0KSize][conv0KSize][conv0InChan][conv0OutChan];
+
+void compute(array3d_in convWin, array4d_t kernel, uint32_t* strOut) {
+
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    #pragma nounroll
+    for (h=0; h<conv0OutDim; h++){
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv0OutDim; w++) {
+            // Output Channels
+            for(cc = 0; cc < conv0OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv0KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c=0; c<conv0InChan; c++){
+                            sum += convWin[x][y][c] * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+
+            // if(sum >= 2){
+            //     sum = sum*0.964027580076;
+            // } else if (sum < 2 && sum >= 1){
+            //     sum = sum*0.761594155956;
+            // } else if (sum < 1 && sum >= .5){
+            //     sum = sum*0.46211715726;
+            // } else if (sum < .5 && sum >= .25){
+            //     sum = sum*.244918662404;
+            // } else if (sum < .25 && sum >= 0){
+            //     sum = sum*0;
+            // } else if (sum < 0 && sum >= -.25){
+            //     sum = sum*-.244918662404;
+            // } else if (sum < -.25 && sum >= -.5){
+            //     sum = sum*-0.46211715726;
+            // } else if (sum < -.5 && sum >= -1){
+            //     sum = sum*-0.761594155956;
+            // } else if (sum > -1){
+            //     sum = sum*-0.964027580076;
+            // }
+            *strOut = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convWin = (void*)Conv0Window;
+    void* kernel = (void*)Conv0Weights;
+    void* strOut = (void*)Conv0Out;
+
+	compute(convWin,kernel,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/conv1.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv1.c
--- gem5/benchmarks/lenet/design_c/hw/source/conv1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,78 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv1KSize][conv1KSize][conv1InChan];
+typedef uint32_t array4d_t[conv1KSize][conv1KSize][conv1InChan][conv1OutChan];
+
+void compute(array3d_in convWin, array4d_t kernel, uint32_t* strOut) {
+
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    #pragma nounroll
+    for (h=0; h<conv1OutDim; h++){
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv1OutDim; w++) {
+            // Output Channels
+            for(cc = 0; cc < conv1OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv1KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c=0; c<conv1InChan; c++){
+                            sum += convWin[x][y][c] * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+
+            // if(sum >= 2){
+            //     sum = sum*0.964027580076;
+            // } else if (sum < 2 && sum >= 1){
+            //     sum = sum*0.761594155956;
+            // } else if (sum < 1 && sum >= .5){
+            //     sum = sum*0.46211715726;
+            // } else if (sum < .5 && sum >= .25){
+            //     sum = sum*.244918662404;
+            // } else if (sum < .25 && sum >= 0){
+            //     sum = sum*0;
+            // } else if (sum < 0 && sum >= -.25){
+            //     sum = sum*-.244918662404;
+            // } else if (sum < -.25 && sum >= -.5){
+            //     sum = sum*-0.46211715726;
+            // } else if (sum < -.5 && sum >= -1){
+            //     sum = sum*-0.761594155956;
+            // } else if (sum > -1){
+            //     sum = sum*-0.964027580076;
+            // }
+            *strOut = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convWin = (void*)Conv1Window;
+    void* kernel = (void*)Conv1Weights;
+    void* strOut = (void*)Conv1Out;
+
+	compute(convWin,kernel,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/conv2.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv2.c
--- gem5/benchmarks/lenet/design_c/hw/source/conv2.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/conv2.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,78 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[conv2KSize][conv2KSize][conv2InChan];
+typedef uint32_t array4d_t[conv2KSize][conv2KSize][conv2InChan][conv2OutChan];
+
+void compute(array3d_in convWin, array4d_t kernel, uint32_t* strOut) {
+
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    #pragma nounroll
+    for (h=0; h<conv2OutDim; h++){
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < conv2OutDim; w++) {
+            // Output Channels
+            for(cc = 0; cc < conv2OutChan; cc++) {
+                int sum = 0;
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                // Kernel X
+                for (x = 0; x < conv2KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    // Kernel Y
+                    for (y = 0; y < conv2KSize; y++) {
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        // Input Channels
+                        for(c=0; c<conv2InChan; c++){
+                            sum += convWin[x][y][c] * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+
+            // if(sum >= 2){
+            //     sum = sum*0.964027580076;
+            // } else if (sum < 2 && sum >= 1){
+            //     sum = sum*0.761594155956;
+            // } else if (sum < 1 && sum >= .5){
+            //     sum = sum*0.46211715726;
+            // } else if (sum < .5 && sum >= .25){
+            //     sum = sum*.244918662404;
+            // } else if (sum < .25 && sum >= 0){
+            //     sum = sum*0;
+            // } else if (sum < 0 && sum >= -.25){
+            //     sum = sum*-.244918662404;
+            // } else if (sum < -.25 && sum >= -.5){
+            //     sum = sum*-0.46211715726;
+            // } else if (sum < -.5 && sum >= -1){
+            //     sum = sum*-0.761594155956;
+            // } else if (sum > -1){
+            //     sum = sum*-0.964027580076;
+            // }
+            *strOut = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convWin = (void*)Conv2Window;
+    void* kernel = (void*)Conv2Weights;
+    void* strOut = (void*)Conv2Out;
+
+	compute(convWin,kernel,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/data_mover_0.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_0.c
--- gem5/benchmarks/lenet/design_c/hw/source/data_mover_0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,73 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_buf[conv0KSize][conv0InDim][conv0InChan];
+typedef uint32_t array3d_win[conv0KSize][conv0KSize][conv0InChan];
+
+void compute(uint32_t* strIn, array3d_win convWindow, array3d_buf convLineBuff) {
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    // Warmup loop
+    #pragma nounroll
+    for(h=0; h<conv0KSize; h++){
+        #pragma nounroll
+        for(w=0; w<conv0InDim; w++){
+            #pragma nounroll
+            for(c=0; c<conv0InChan; c++){
+                convLineBuff[h][w][c] = *strIn;
+            }
+        }
+    }
+
+    #pragma nounroll
+    for (h=0; h<conv0OutDim; h++){
+        // Once the first row is read data movement resumes
+        if (h>=1) {
+            #pragma nounroll
+            for(w=0; w<conv0InDim; w++){
+                #pragma nounroll
+                for(c=0; c<conv0InChan; c++){
+                    convLineBuff[(h-1)%5][w][c] = *strIn;
+                }
+            }
+        }
+        #pragma nounroll
+        for (w=0; w<conv0OutDim; w++){
+            #pragma nounroll
+            for(cc=0; cc<conv0OutChan; cc++){
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                for(x=0; x<conv0KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    for(y=0; y<conv0KSize; y++){
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        for(c=0; c<conv0InChan; c++){
+                            convWindow[x][y][c] = convLineBuff[(x + h%5)%5][y][c];
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)STREAMDMA_Stream;
+    void* convWindow = (void*)Conv0Window;
+    void* convLineBuff = (void*)Conv0LineBuff;
+
+	compute(strIn,convWindow,convLineBuff);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/data_mover_1.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_1.c
--- gem5/benchmarks/lenet/design_c/hw/source/data_mover_1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,73 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_buf[conv1KSize][conv1InDim][conv1InChan];
+typedef uint32_t array3d_win[conv1KSize][conv1KSize][conv1InChan];
+
+void compute(uint32_t* strIn, array3d_win convWindow, array3d_buf convLineBuff) {
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    // Warmup loop
+    #pragma nounroll
+    for(h=0; h<conv1KSize; h++){
+        #pragma nounroll
+        for(w=0; w<conv1InDim; w++){
+            #pragma nounroll
+            for(c=0; c<conv1InChan; c++){
+                convLineBuff[h][w][c] = *strIn;
+            }
+        }
+    }
+
+    #pragma nounroll
+    for (h=0; h<conv1OutDim; h++){
+        // Once the first row is read data movement resumes
+        if (h>=1) {
+            #pragma nounroll
+            for(w=0; w<conv1InDim; w++){
+                #pragma nounroll
+                for(c=0; c<conv1InChan; c++){
+                    convLineBuff[(h-1)%5][w][c] = *strIn;
+                }
+            }
+        }
+        #pragma nounroll
+        for (w=0; w<conv1OutDim; w++){
+            #pragma nounroll
+            for(cc=0; cc<conv1OutChan; cc++){
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                for(x=0; x<conv1KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    for(y=0; y<conv1KSize; y++){
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        for(c=0; c<conv1InChan; c++){
+                            convWindow[x][y][c] = convLineBuff[(x + h%5)%5][y][c];
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)Pool0Out;
+    void* convWindow = (void*)Conv1Window;
+    void* convLineBuff = (void*)Conv1LineBuff;
+
+	compute(strIn,convWindow,convLineBuff);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/data_mover_2.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_2.c
--- gem5/benchmarks/lenet/design_c/hw/source/data_mover_2.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_2.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,73 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_buf[conv2KSize][conv2InDim][conv2InChan];
+typedef uint32_t array3d_win[conv2KSize][conv2KSize][conv2InChan];
+
+void compute(uint32_t* strIn, array3d_win convWindow, array3d_buf convLineBuff) {
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    // Warmup loop
+    #pragma nounroll
+    for(h=0; h<conv2KSize; h++){
+        #pragma nounroll
+        for(w=0; w<conv2InDim; w++){
+            #pragma nounroll
+            for(c=0; c<conv2InChan; c++){
+                convLineBuff[h][w][c] = *strIn;
+            }
+        }
+    }
+
+    #pragma nounroll
+    for (h=0; h<conv2OutDim; h++){
+        // Once the first row is read data movement resumes
+        if (h>=1) {
+            #pragma nounroll
+            for(w=0; w<conv2InDim; w++){
+                #pragma nounroll
+                for(c=0; c<conv2InChan; c++){
+                    convLineBuff[(h-1)%5][w][c] = *strIn;
+                }
+            }
+        }
+        #pragma nounroll
+        for (w=0; w<conv2OutDim; w++){
+            #pragma nounroll
+            for(cc=0; cc<conv2OutChan; cc++){
+                #ifdef NO_UNROLL
+                #pragma nounroll
+                #elif INPUT_UNROLL
+                #pragma unroll
+                #endif
+                for(x=0; x<conv2KSize; x++) {
+                    #ifdef NO_UNROLL
+                    #pragma nounroll
+                    #elif INPUT_UNROLL
+                    #pragma unroll
+                    #endif
+                    for(y=0; y<conv2KSize; y++){
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        for(c=0; c<conv2InChan; c++){
+                            convWindow[x][y][c] = convLineBuff[(x + h%5)%5][y][c];
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)Pool1Out;
+    void* convWindow = (void*)Conv2Window;
+    void* convLineBuff = (void*)Conv2LineBuff;
+
+	compute(strIn,convWindow,convLineBuff);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/data_mover_3.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_3.c
--- gem5/benchmarks/lenet/design_c/hw/source/data_mover_3.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/data_mover_3.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,55 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_buf[fc0KSize][fc0InDim][fc0InChan];
+typedef uint32_t array3d_win[fc0KSize][fc0KSize][fc0InChan];
+
+void compute(uint32_t* strIn, array3d_win convWindow, array3d_buf convLineBuff) {
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    // Warmup loop
+    #pragma nounroll
+    for(h=0; h<fc0KSize; h++){
+        #pragma nounroll
+        for(w=0; w<fc0InDim; w++){
+            #pragma nounroll
+            for(c=0; c<fc0InChan; c++){
+                convLineBuff[h][w][c] = *strIn;
+            }
+        }
+    }
+
+    #pragma nounroll
+    for (h=0; h<fc0OutDim; h++){
+        #pragma nounroll
+        for (w=0; w<fc0OutDim; w++){
+            #pragma nounroll
+            for(cc=0; cc<fc0OutChan; cc++){
+                #pragma nounroll
+                for(x=0; x<fc0KSize; x++) {
+                    #pragma nounroll
+                    for(y=0; y<fc0KSize; y++){
+                        #ifdef NO_UNROLL
+                        #pragma nounroll
+                        #elif INPUT_UNROLL
+                        #pragma unroll
+                        #endif
+                        for(c=0; c<fc0InChan; c++){
+                            convWindow[x][y][c] = convLineBuff[(x + h%5)%5][y][c];
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)Conv2Out;
+    void* convWindow = (void*)FC0Window;
+    void* convLineBuff = (void*)FC0LineBuff;
+
+	compute(strIn,convWindow,convLineBuff);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/fc0.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/fc0.c
--- gem5/benchmarks/lenet/design_c/hw/source/fc0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/fc0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,62 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_in[fc0KSize][fc0KSize][fc0InChan];
+typedef uint32_t array4d_t[fc0KSize][fc0KSize][fc0InChan][fc0OutChan];
+
+void compute(array3d_in convWin, array4d_t kernel, uint32_t* strOut) {
+
+    int h,w,c,cc,x,y;
+    uint32_t sum;
+
+    #pragma nounroll
+    for (h=0; h<fc0OutDim; h++){
+        #pragma nounroll
+        for (w=0; w<fc0OutDim; w++){
+            sum = 0;
+            #pragma nounroll
+            for(cc=0; cc<fc0OutChan; cc++){
+                #pragma nounroll
+                for(x=0; x<fc0KSize; x++) {
+                    #pragma nounroll
+                    for(y=0; y<fc0KSize; y++){
+                        #pragma nounroll
+                        for(c=0; c<fc0InChan; c++){
+                            sum += convWin[x][y][c] * kernel[x][y][c][cc];
+                        }
+                    }
+                }
+                
+            // if(sum >= 2){
+            //     sum = sum*0.964027580076;
+            // } else if (sum < 2 && sum >= 1){
+            //     sum = sum*0.761594155956;
+            // } else if (sum < 1 && sum >= .5){
+            //     sum = sum*0.46211715726;
+            // } else if (sum < .5 && sum >= .25){
+            //     sum = sum*.244918662404;
+            // } else if (sum < .25 && sum >= 0){
+            //     sum = sum*0;
+            // } else if (sum < 0 && sum >= -.25){
+            //     sum = sum*-.244918662404;
+            // } else if (sum < -.25 && sum >= -.5){
+            //     sum = sum*-0.46211715726;
+            // } else if (sum < -.5 && sum >= -1){
+            //     sum = sum*-0.761594155956;
+            // } else if (sum > -1){
+            //     sum = sum*-0.964027580076;
+            // }
+            *strOut = sum;
+            }
+        }
+    }
+}
+
+void top() {
+    void* convWin = (void*)FC0Window;
+    void* kernel = (void*)FC0Weights;
+    void* strOut = (void*)STREAMDMA_Stream;
+
+	compute(convWin,kernel,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/Makefile gem5-SALAM/benchmarks/lenet/design_c/hw/source/Makefile
--- gem5/benchmarks/lenet/design_c/hw/source/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,9 @@
+LL = top.ll conv0.ll pool0.ll data_mover_0.ll data_mover_1.ll conv1.ll pool1.ll data_mover_2.ll conv2.ll pool_mover_0.ll pool_mover_1.ll fc0.ll data_mover_3.ll
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../ir
+	mv $^ ../ir/
+clean:
+	rm -f ../ir/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/pool0.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool0.c
--- gem5/benchmarks/lenet/design_c/hw/source/pool0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,39 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_win[pool0KSize][pool0InDim][pool0InChan];
+
+void compute(array3d_win poolWin, uint32_t* strOut) {
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool0InDim; h+=pool0KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool0InDim; w+=pool0KSize) {
+            #pragma nounroll
+            for(c = 0; c < pool0InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #pragma nounroll
+                for (x = 0; x < pool0KSize; x++) {
+                    // Kernel Y
+                    #pragma nounroll
+                    for (y = 0; y < pool0KSize; y++) {
+                        // Input Channels
+                        sum += poolWin[x][w+y][c];
+                    }
+                }
+                *strOut = sum/(pool0KSize*pool0KSize);
+            }
+        }
+    }
+}
+
+void top() {
+    void* poolWin = (void*)Pool0Window;
+    void* strOut = (void*)Pool0Out;
+
+	compute(poolWin,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/pool1.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool1.c
--- gem5/benchmarks/lenet/design_c/hw/source/pool1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,39 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_win[pool1KSize][pool1InDim][pool1InChan];
+
+void compute(array3d_win poolWin, uint32_t* strOut) {
+    int h,w,c,cc,x,y;
+    // Input X
+    #pragma nounroll
+    for (h = 0; h < pool1InDim; h+=pool1KSize) {
+        // Input Y
+        #pragma nounroll
+        for (w = 0; w < pool1InDim; w+=pool1KSize) {
+            #pragma nounroll
+            for(c = 0; c < pool1InChan; c++) {
+                int sum = 0;
+                // Kernel X
+                #pragma nounroll
+                for (x = 0; x < pool1KSize; x++) {
+                    // Kernel Y
+                    #pragma nounroll
+                    for (y = 0; y < pool1KSize; y++) {
+                        // Input Channels
+                        sum += poolWin[x][w+y][c];
+                    }
+                }
+                *strOut = sum/(pool1KSize*pool1KSize);
+            }
+        }
+    }
+}
+
+void top() {
+    void* poolWin = (void*)Pool1Window;
+    void* strOut = (void*)Pool1Out;
+
+	compute(poolWin,strOut);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/pool_mover_0.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool_mover_0.c
--- gem5/benchmarks/lenet/design_c/hw/source/pool_mover_0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool_mover_0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,27 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_win[pool0KSize][pool0InDim][pool0InChan];
+
+void data_mover(uint32_t* strIn, array3d_win poolWin) {
+    int h,w,c;
+    // Shift Window
+    #pragma nounroll
+    for(h = 0; h < pool0InDim; h++){
+        #pragma nounroll
+        for (w = 0; w < pool0InDim; w++) {
+            #pragma nounroll
+            for(c = 0; c < pool0InChan; c++) {
+                poolWin[h%2][w][c] = *strIn;
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)Conv0Out;
+    void* poolWin = (void*)Pool0Window;
+
+    data_mover(strIn,poolWin);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/pool_mover_1.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool_mover_1.c
--- gem5/benchmarks/lenet/design_c/hw/source/pool_mover_1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/pool_mover_1.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,27 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+typedef uint32_t array3d_win[pool1KSize][pool1InDim][pool1InChan];
+
+void data_mover(uint32_t* strIn, array3d_win poolWin) {
+    int h,w,c;
+    // Shift Window
+    #pragma nounroll
+    for(h = 0; h < pool1InDim; h++){
+        #pragma nounroll
+        for (w = 0; w < pool1InDim; w++) {
+            #pragma nounroll
+            for(c = 0; c < pool1InChan; c++) {
+                poolWin[h%2][w][c] = *strIn;
+            }
+        }
+    }
+}
+
+void top() {
+    void* strIn = (void*)Conv1Out;
+    void* poolWin = (void*)Pool1Window;
+
+    data_mover(strIn,poolWin);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/hw/source/top.c gem5-SALAM/benchmarks/lenet/design_c/hw/source/top.c
--- gem5/benchmarks/lenet/design_c/hw/source/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/hw/source/top.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,93 @@
+#include "../../lenet5_clstr_hw_defines.h"
+
+void top(uint64_t mainMem) {
+
+	// Define ACC MMRs
+	volatile uint8_t  * DATAMOVE0Flags = (uint8_t *)DATA_MOVER_0;
+	volatile uint8_t  * CONV0Flags  = (uint8_t *)CONV0;
+	volatile uint8_t  * POOLMOVE0Flags = (uint8_t *)POOL_MOVER_0;
+	volatile uint8_t  * POOL0Flags  = (uint8_t *)POOL0;
+	volatile uint8_t  * DATAMOVE1Flags = (uint8_t *)DATA_MOVER_1;
+	volatile uint8_t  * CONV1Flags  = (uint8_t *)CONV1;
+	volatile uint8_t  * POOLMOVE1Flags = (uint8_t *)POOL_MOVER_1;
+	volatile uint8_t  * POOL1Flags  = (uint8_t *)POOL1;
+	volatile uint8_t  * DATAMOVE2Flags = (uint8_t *)DATA_MOVER_2;
+	volatile uint8_t  * Conv2Flags  = (uint8_t *)CONV2;
+	volatile uint8_t  * DATAMOVE3Flags = (uint8_t *)DATA_MOVER_3;
+	volatile uint8_t  * FC0Flags  = (uint8_t *)FC0;
+
+	//StreamDma
+	volatile uint8_t  * StrDmaFlags				= (uint8_t  *)(STREAMDMA_Flags);
+	volatile uint64_t * StrDmaRdAddr			= (uint64_t *)(STREAMDMA_RdAddr);
+	volatile uint64_t * StrDmaWrAddr			= (uint64_t *)(STREAMDMA_WrAddr);
+	volatile uint32_t * StrDmaRdFrameSize		= (uint32_t *)(STREAMDMA_RdFrameSize);
+	volatile uint8_t  * StrDmaNumRdFrames		= (uint8_t  *)(STREAMDMA_NumRdFrames);
+	volatile uint8_t  * StrDmaRdFrameBuffSize	= (uint8_t  *)(STREAMDMA_RdFrameBufSize);
+	volatile uint32_t * StrDmaWrFrameSize		= (uint32_t *)(STREAMDMA_WrFrameSize);
+	volatile uint8_t  * StrDmaNumWrFrames		= (uint8_t  *)(STREAMDMA_NumWrFrames);
+	volatile uint8_t  * StrDmaWrFrameBuffSize	= (uint8_t  *)(STREAMDMA_WrFrameBufSize);
+
+	// Define DMA MMR
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Initialize DRAM-Stream DMA
+	*StrDmaRdAddr = 0x90000000;
+	*StrDmaRdFrameSize = 4096;
+	*StrDmaNumRdFrames = 1;
+	*StrDmaRdFrameBuffSize = 1;
+	//Initialize Stream-DRAM DMA
+	*StrDmaWrAddr = 0x91000000;
+	*StrDmaWrFrameSize = 336;
+	*StrDmaNumWrFrames = 1;
+	*StrDmaWrFrameBuffSize = 1;
+	//Start Stream DMAs
+	*StrDmaFlags = STR_DMA_INIT_RD | STR_DMA_INIT_WR;
+
+	//Transfer Conv 0 Weights
+	*DmaRdAddr  = 0x90010000;
+	*DmaWrAddr  = Conv0Weights;
+	*DmaCopyLen = conv0WeightSize;
+	*DmaFlags   = DEV_INIT;
+	// Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer Conv 1 Weights
+	*DmaRdAddr  = 0x90010000;
+	*DmaWrAddr  = Conv1Weights;
+	*DmaCopyLen = conv1WeightSize;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer Conv 2 Weights
+	*DmaRdAddr  = 0x90010000;
+	*DmaWrAddr  = Conv2Weights;
+	*DmaCopyLen = conv2WeightSize;
+	*DmaFlags   = DEV_INIT;
+	// Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start conv0
+	*DATAMOVE0Flags = DEV_INIT;
+	*CONV0Flags = DEV_INIT;
+	//Start Pool0
+	*POOLMOVE0Flags = DEV_INIT;
+	*POOL0Flags = DEV_INIT;
+	*DATAMOVE1Flags = DEV_INIT;
+	// Start conv1
+	*CONV1Flags = DEV_INIT;
+	// Start pool1
+	*POOLMOVE1Flags = DEV_INIT;
+	*POOL1Flags = DEV_INIT;
+	*DATAMOVE2Flags = DEV_INIT;
+	// Start Conv2
+	*Conv2Flags = DEV_INIT;
+	// Start Conv2
+	*DATAMOVE3Flags = DEV_INIT;
+	*FC0Flags = DEV_INIT;
+	// Verify frame was written
+	while ((*StrDmaFlags & STR_DMA_WR_RUNNING) == STR_DMA_WR_RUNNING);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/lenet5_clstr_hw_defines.h gem5-SALAM/benchmarks/lenet/design_c/lenet5_clstr_hw_defines.h
--- gem5/benchmarks/lenet/design_c/lenet5_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/lenet5_clstr_hw_defines.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,143 @@
+#define NO_UNROLL
+// #define INPUT_UNROLL
+
+#include <stdint.h>
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+#define TYPE uint32_t
+
+#define STR_DMA_INIT_RD	0x01
+#define STR_DMA_INIT_WR 0x02
+#define STR_DMA_RD_INTR	0x10
+#define STR_DMA_WR_INTR	0x20
+#define STR_DMA_RD_RUNNING 0x04
+#define STR_DMA_WR_RUNNING 0x08
+
+#define conv0UnrollFactor 1 // Should be from 1->Input Channels
+#define conv0InDim 32
+#define conv0InChan 1
+#define conv0OutDim 28
+#define conv0OutChan 6
+#define conv0KSize 5
+#define conv0KernChan 6
+#define conv0InSize conv0InDim*conv0InDim*conv0InChan*sizeof(TYPE)
+#define conv0WeightSize conv0KSize*conv0KSize*conv0InChan*conv0KernChan*sizeof(TYPE)
+#define conv0OutputSize conv0OutDim*conv0OutDim*conv0KernChan*sizeof(TYPE)
+
+#define pool0UnrollFactor 1
+#define pool0InDim 28
+#define pool0InChan 6
+#define pool0KSize 2
+#define pool0OutDim 14
+#define pool0InSize pool0InDim*pool0InDim*pool0InChan*sizeof(TYPE)
+#define pool0OutputSize pool0OutDim*pool0OutDim*pool0InChan*sizeof(TYPE)
+
+#define conv1UnrollFactor 1
+#define conv1InDim 14
+#define conv1InChan 6
+#define conv1KSize 5
+#define conv1KernChan 16
+#define conv1OutDim 10
+#define conv1OutChan 16
+#define conv1InSize conv1InDim*conv1InDim*conv1InChan*sizeof(TYPE)
+#define conv1WeightSize conv1KSize*conv1KSize*conv1InChan*conv1KernChan*sizeof(TYPE)
+#define conv1OutputSize conv1OutDim*conv1OutDim*conv1KernChan*sizeof(TYPE)
+
+#define pool1UnrollFactor 1
+#define pool1InDim 10
+#define pool1InChan 16
+#define pool1KSize 2
+#define pool1OutDim 5
+#define pool1InSize pool1InDim*pool1InDim*pool1InChan*sizeof(TYPE)
+#define pool1OutputSize pool1OutDim*pool1OutDim*pool1InChan*sizeof(TYPE)
+
+#define conv2InDim 5
+#define conv2InChan 16
+#define conv2KSize 5
+#define conv2KernChan 120
+#define conv2OutDim 1
+#define conv2OutChan 120
+#define conv2InSize conv2InDim*conv2InDim*conv2InChan*sizeof(TYPE)
+#define conv2WeightSize conv2KSize*conv2KSize*conv2InChan*conv2KernChan*sizeof(TYPE)
+#define conv2OutputSize conv2OutDim*conv2OutDim*conv2KernChan*sizeof(TYPE)
+
+#define fc0InDim 1
+#define fc0InChan 120
+#define fc0KSize 1
+#define fc0KernChan 84
+#define fc0OutDim 1
+#define fc0OutChan 84
+#define fc0InSize fc0InDim*fc0InDim*fc0InChan*sizeof(TYPE)
+#define fc0WeightSize fc0KSize*fc0KSize*conv2InChan*fc0KernChan*sizeof(TYPE)
+#define fc0OutputSize fc0OutDim*fc0OutDim*fc0KernChan*sizeof(TYPE)
+
+//BEGIN GENERATED CODE
+//Cluster: LENET5_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//StreamDMA
+#define STREAMDMA_Flags 0x10020040
+#define STREAMDMA_RdAddr 0x10020044
+#define STREAMDMA_WrAddr 0x1002004c
+#define STREAMDMA_RdFrameSize 0x10020054
+#define STREAMDMA_NumRdFrames 0x10020058
+#define STREAMDMA_RdFrameBufSize 0x10020059
+#define STREAMDMA_WrFrameSize 0x1002005a
+#define STREAMDMA_NumWrFrames 0x1002005e
+#define STREAMDMA_WrFrameBufSize 0x1002005f
+#define STREAMDMA_Stream 0x10020060
+#define STREAMDMA_Status 0x10020080
+//Accelerator: TOP
+#define TOP 0x100200c0
+//Accelerator: DATA_MOVER_0
+#define DATA_MOVER_0 0x10020100
+#define Conv0LineBuff 0x10020140
+//Accelerator: CONV0
+#define CONV0 0x10020400
+#define Conv0Weights 0x10020440
+#define Conv0Window 0x100206c0
+#define Conv0Out 0x10020740
+#define Conv0Out_Status 0x10020780
+//Accelerator: POOL_MOVER_0
+#define POOL_MOVER_0 0x100207c0
+//Accelerator: POOL0
+#define POOL0 0x10020800
+#define Pool0Window 0x10020840
+#define Pool0Out 0x10020dc0
+#define Pool0Out_Status 0x10020e00
+//Accelerator: DATA_MOVER_1
+#define DATA_MOVER_1 0x10020e40
+#define Conv1LineBuff 0x10020e80
+//Accelerator: CONV1
+#define CONV1 0x10022100
+#define Conv1Weights 0x10022140
+#define Conv1Window 0x10024700
+#define Conv1Out 0x10024980
+#define Conv1Out_Status 0x100249c0
+//Accelerator: POOL_MOVER_1
+#define POOL_MOVER_1 0x10024a00
+//Accelerator: POOL1
+#define POOL1 0x10024a40
+#define Pool1Window 0x10024a80
+#define Pool1Out 0x10024fc0
+#define Pool1Out_Status 0x10025000
+//Accelerator: DATA_MOVER_2
+#define DATA_MOVER_2 0x10025040
+#define Conv2LineBuff 0x10025080
+//Accelerator: CONV2
+#define CONV2 0x10025700
+#define Conv2Weights 0x10025740
+#define Conv2Window 0x10054580
+#define Conv2Out 0x10054c00
+#define Conv2Out_Status 0x10054c40
+//Accelerator: DATA_MOVER_3
+#define DATA_MOVER_3 0x10054c80
+#define FC0LineBuff 0x10054cc0
+//Accelerator: FC0
+#define FC0 0x10054ec0
+#define FC0Weights 0x10054f00
+#define FC0Window 0x1005ecc0
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/Makefile gem5-SALAM/benchmarks/lenet/design_c/Makefile
--- gem5/benchmarks/lenet/design_c/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/bench.h gem5-SALAM/benchmarks/lenet/design_c/sw/bench.h
--- gem5/benchmarks/lenet/design_c/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/bench.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1 @@
+volatile int stage;
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/boot.ld gem5-SALAM/benchmarks/lenet/design_c/sw/boot.ld
--- gem5/benchmarks/lenet/design_c/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/boot.ld	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/boot.s gem5-SALAM/benchmarks/lenet/design_c/sw/boot.s
--- gem5/benchmarks/lenet/design_c/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/boot.s	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/.gitignore gem5-SALAM/benchmarks/lenet/design_c/sw/.gitignore
--- gem5/benchmarks/lenet/design_c/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/.gitignore	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/isr.c gem5-SALAM/benchmarks/lenet/design_c/sw/isr.c
--- gem5/benchmarks/lenet/design_c/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/isr.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/main.cpp gem5-SALAM/benchmarks/lenet/design_c/sw/main.cpp
--- gem5/benchmarks/lenet/design_c/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/main.cpp	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,25 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "../../../common/m5ops.h"
+#include "bench.h"
+#include "../lenet5_clstr_hw_defines.h"
+
+volatile uint8_t  * top   = (uint8_t  *)TOP;
+
+int main(void) {
+	m5_reset_stats();
+    volatile int count = 0;
+	stage = 0;
+
+    // uint32_t base = 0x80c00000;
+    // TYPE *mainMem = (TYPE *)base;
+    // *mainMem = (uint32_t)(void *)mainMem;
+
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    // printf("Job complete\n");
+	m5_dump_stats();
+	m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/design_c/sw/Makefile gem5-SALAM/benchmarks/lenet/design_c/sw/Makefile
--- gem5/benchmarks/lenet/design_c/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/design_c/sw/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,12 @@
+include ../../../common/Makefile
+
+OBJS = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/lenet/Makefile gem5-SALAM/benchmarks/lenet/Makefile
--- gem5/benchmarks/lenet/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/lenet/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,11 @@
+FOLDERS=channel_unroll kernel_unroll no_unroll
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/Makefile gem5-SALAM/benchmarks/Makefile
--- gem5/benchmarks/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/Makefile	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,23 @@
+BENCHMARKS=\
+	bfs \
+	fft \
+	gemm \
+	md-grid \
+	md-knn \
+	mergesort \
+	nw \
+	spmv \
+	stencil2d \
+	stencil3d
+
+CFLAGS=-O1 -Wall -Wno-unused-label
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(BENCHMARKS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$b; done )
+
+clean:
+	@( for b in $(BENCHMARKS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/1_config.yml gem5-SALAM/benchmarks/mobilenetv2/1_config.yml
--- gem5/benchmarks/mobilenetv2/1_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/1_config.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,15 @@
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/1/head.yml"
+ - HWPath: "configs/hw_configs/head.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/1/body.yml"
+ - HWPath: "configs/hw_configs/body.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/1/tail.yml"
+ - HWPath: "configs/hw_configs/tail.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/1/classifier.yml"
+ - HWPath: "configs/hw_configs/classifier.yml"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/35_config.yml gem5-SALAM/benchmarks/mobilenetv2/35_config.yml
--- gem5/benchmarks/mobilenetv2/35_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/35_config.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,15 @@
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/35/head.yml"
+ - HWPath: "configs/hw_configs/head.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/35/body.yml"
+ - HWPath: "configs/hw_configs/body.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/35/tail.yml"
+ - HWPath: "configs/hw_configs/tail.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/35/classifier.yml"
+ - HWPath: "configs/hw_configs/classifier.yml"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/75_config.yml gem5-SALAM/benchmarks/mobilenetv2/75_config.yml
--- gem5/benchmarks/mobilenetv2/75_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/75_config.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,15 @@
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/75/head.yml"
+ - HWPath: "configs/hw_configs/head.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/75/body.yml"
+ - HWPath: "configs/hw_configs/body.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/75/tail.yml"
+ - HWPath: "configs/hw_configs/tail.yml"
+---
+acc_cluster:
+ - SysPath: "configs/sys_configs/per_cluster/75/classifier.yml"
+ - HWPath: "configs/hw_configs/classifier.yml"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/body_hw_defines.h gem5-SALAM/benchmarks/mobilenetv2/body_hw_defines.h
--- gem5/benchmarks/mobilenetv2/body_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/body_hw_defines.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,74 @@
+//BEGIN GENERATED CODE
+//Cluster: BODY
+//NonCoherentDMA
+#define BODY_DMA_Flags 0x10021540
+#define BODY_DMA_RdAddr 0x10021541
+#define BODY_DMA_WrAddr 0x10021549
+#define BODY_DMA_CopyLen 0x10021551
+//StreamDMA
+#define BODY_STREAM_DMA0_Flags 0x10021580
+#define BODY_STREAM_DMA0_RdAddr 0x10021584
+#define BODY_STREAM_DMA0_WrAddr 0x1002158c
+#define BODY_STREAM_DMA0_RdFrameSize 0x10021594
+#define BODY_STREAM_DMA0_NumRdFrames 0x10021598
+#define BODY_STREAM_DMA0_RdFrameBufSize 0x10021599
+#define BODY_STREAM_DMA0_WrFrameSize 0x1002159a
+#define BODY_STREAM_DMA0_NumWrFrames 0x1002159e
+#define BODY_STREAM_DMA0_WrFrameBufSize 0x1002159f
+#define BODY_STREAM_DMA0_Stream 0x100215a0
+#define BODY_STREAM_DMA0_Status 0x100215c0
+//StreamDMA
+#define BODY_STREAM_DMA1_Flags 0x10021600
+#define BODY_STREAM_DMA1_RdAddr 0x10021604
+#define BODY_STREAM_DMA1_WrAddr 0x1002160c
+#define BODY_STREAM_DMA1_RdFrameSize 0x10021614
+#define BODY_STREAM_DMA1_NumRdFrames 0x10021618
+#define BODY_STREAM_DMA1_RdFrameBufSize 0x10021619
+#define BODY_STREAM_DMA1_WrFrameSize 0x1002161a
+#define BODY_STREAM_DMA1_NumWrFrames 0x1002161e
+#define BODY_STREAM_DMA1_WrFrameBufSize 0x1002161f
+#define BODY_STREAM_DMA1_Stream 0x10021620
+#define BODY_STREAM_DMA1_Status 0x10021640
+//Accelerator: BODY_TOP
+#define BODY_TOP 0x10021680
+//Accelerator: BODY_RESIDUAL
+#define BODY_RESIDUAL 0x10021700
+#define body_ResidualOut 0x10021740
+#define body_ResidualOut_Status 0x10021780
+//Accelerator: BODY_PWCONV0
+#define BODY_PWCONV0 0x100217c0
+#define body_PWConv0LocalFeats 0x10021800
+#define body_PWConv0Weights 0x10021840
+#define body_PW0Bias 0x10026200
+#define body_PW0IMultBias 0x10026380
+#define body_PW0NShiftBias 0x10026500
+#define body_PW0IMultOut 0x10026680
+#define body_PW0NShiftOut 0x10026800
+#define body_PW0WeightZP 0x10026980
+#define body_PWConv0Out 0x10026b00
+#define body_PWConv0Out_Status 0x10026b40
+//Accelerator: BODY_DWCONV
+#define BODY_DWCONV 0x10026b80
+#define body_DWConvWindow 0x10026c00
+#define body_DWConvWeights 0x10027800
+#define body_DWBias 0x10028540
+#define body_DWIMultBias 0x100286c0
+#define body_DWNShiftBias 0x10028840
+#define body_DWIMultOut 0x100289c0
+#define body_DWNShiftOut 0x10028b40
+#define body_DWWeightZP 0x10028cc0
+#define body_DWConvBuffer 0x10028e40
+#define body_DWConvOutBuffer 0x10030c80
+#define body_DWConvOut 0x10030e00
+#define body_DWConvOut_Status 0x10030e40
+//Accelerator: BODY_PWCONV1
+#define BODY_PWCONV1 0x10030e80
+#define body_PWConv1LocalFeats 0x10030ec0
+#define body_PWConv1Weights 0x10031040
+#define body_PW1Bias 0x1003a380
+#define body_PW1IMultBias 0x1003a400
+#define body_PW1NShiftBias 0x1003a480
+#define body_PW1IMultOut 0x1003a500
+#define body_PW1NShiftOut 0x1003a580
+#define body_PW1WeightZP 0x1003a600
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/classifier_hw_defines.h gem5-SALAM/benchmarks/mobilenetv2/classifier_hw_defines.h
--- gem5/benchmarks/mobilenetv2/classifier_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/classifier_hw_defines.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,33 @@
+//BEGIN GENERATED CODE
+//Cluster: CLASSIFIER
+//NonCoherentDMA
+#define CLASSIFIER_DMA_Flags 0x10062700
+#define CLASSIFIER_DMA_RdAddr 0x10062701
+#define CLASSIFIER_DMA_WrAddr 0x10062709
+#define CLASSIFIER_DMA_CopyLen 0x10062711
+//StreamDMA
+#define CLASSIFIER_STREAM_DMA0_Flags 0x10062740
+#define CLASSIFIER_STREAM_DMA0_RdAddr 0x10062744
+#define CLASSIFIER_STREAM_DMA0_WrAddr 0x1006274c
+#define CLASSIFIER_STREAM_DMA0_RdFrameSize 0x10062754
+#define CLASSIFIER_STREAM_DMA0_NumRdFrames 0x10062758
+#define CLASSIFIER_STREAM_DMA0_RdFrameBufSize 0x10062759
+#define CLASSIFIER_STREAM_DMA0_WrFrameSize 0x1006275a
+#define CLASSIFIER_STREAM_DMA0_NumWrFrames 0x1006275e
+#define CLASSIFIER_STREAM_DMA0_WrFrameBufSize 0x1006275f
+#define CLASSIFIER_STREAM_DMA0_Stream 0x10062760
+#define CLASSIFIER_STREAM_DMA0_Status 0x10062780
+//Accelerator: CLASSIFIER_TOP
+#define CLASSIFIER_TOP 0x100627c0
+//Accelerator: CLASSIFIER_LINEAR
+#define CLASSIFIER_LINEAR 0x10062840
+#define classifier_LinearFeats 0x10062880
+#define classifier_LinearWeights 0x10062dc0
+#define classifier_PWBias 0x1019b600
+#define classifier_PWIMultBias 0x1019ba00
+#define classifier_PWNShiftBias 0x1019be00
+#define classifier_PWIMultOut 0x1019c200
+#define classifier_PWNShiftOut 0x1019c600
+#define classifier_PWWeightZP 0x1019ca00
+#define classifier_LinearSum 0x1019ce00
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/hw_configs/body.yml gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/body.yml
--- gem5/benchmarks/mobilenetv2/configs/hw_configs/body.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/body.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,1237 @@
+hw_config:
+  name: body
+  body_Top:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  body_Residual:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  body_PWConv0:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  body_DWConv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  body_PWConv1:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/hw_configs/classifier.yml gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/classifier.yml
--- gem5/benchmarks/mobilenetv2/configs/hw_configs/classifier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/classifier.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,742 @@
+hw_config:
+  name: classifier
+  classifier_Top:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  classifier_Linear:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/hw_configs/head.yml gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/head.yml
--- gem5/benchmarks/mobilenetv2/configs/hw_configs/head.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/head.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,990 @@
+hw_config:
+  name: head
+  head_Top:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  head_NormalConv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  head_DWConv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  head_PWConv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/hw_configs/tail.yml gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/tail.yml
--- gem5/benchmarks/mobilenetv2/configs/hw_configs/tail.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/hw_configs/tail.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,1978 @@
+hw_config:
+  name: tail
+  tail_Top:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  tail_PWConv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  tail_Reshape:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+  tail_AvgPool:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
+
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/body.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/body.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/body.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/body.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,208 @@
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 160
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 153600
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 8640
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 9600
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 92160
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 960
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 307200
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 320
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/classifier.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/classifier.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/classifier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/classifier.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,76 @@
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/head.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/head.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/head.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/head.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,191 @@
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 864
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 288
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 320
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 3072
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 32
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 512
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/tail.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/tail.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/tail.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/1/tail.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,97 @@
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 320
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 409600
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/body.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/body.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/body.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/body.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,208 @@
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 56
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 18816
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 3024
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 3360
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 32256
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 336
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 37632
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 112
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/classifier.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/classifier.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/classifier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/classifier.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,76 @@
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/head.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/head.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/head.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/head.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,191 @@
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 432
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 144
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 160
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 1536
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 16
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 128
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 8
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/tail.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/tail.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/tail.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/35/tail.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,97 @@
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 112
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 143360
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/body.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/body.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/body.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/body.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,208 @@
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 120
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 86400
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 6480
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 7200
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 69120
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 720
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 172800
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 240
+        Ports: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/classifier.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/classifier.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/classifier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/classifier.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,76 @@
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/head.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/head.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/head.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/head.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,191 @@
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 648
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 216
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 240
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 2304
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 24
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 384
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/tail.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/tail.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/tail.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/per_cluster/75/tail.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,97 @@
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 240
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 307200
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_1.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_1.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_1.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_1.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,577 @@
+---
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 864
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 288
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 320
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 3072
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 32
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 32
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 512
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+---
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 160
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 153600
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 8640
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 9600
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 92160
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 960
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 960
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 307200
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 320
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 320
+        Ports: 1
+---
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 320
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 409600
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
+---
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
+---
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.35.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.35.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.35.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.35.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,576 @@
+---
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 432
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 144
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 160
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 1536
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 16
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 128
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 8
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 8
+        Ports: 1
+---
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 56
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 18816
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 3024
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 3360
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 32256
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 336
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 336
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 37632
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 112
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 112
+        Ports: 1
+---
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 112
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 143360
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
+---
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.75.yml gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.75.yml
--- gem5/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.75.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/configs/sys_configs/whole_system/config_96x96_.75.yml	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,576 @@
+---
+acc_cluster:
+  - Name: head
+  - DMA:
+    - Name: head_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: head_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+  - Accelerator:
+    - Name: head_Top
+      IrPath: hw/ir/head/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: head_NormalConv
+      IrPath: hw/ir/head/NormalConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: head_stream_dma0
+    - Var:
+      - Name: head_NormalConvWindow
+        Type: SPM
+        Size: 27
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvWeights
+        Type: SPM
+        Size: 648
+        Ports: 27
+    - Var:
+      - Name: head_NormalConvBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvIMultOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvNShiftOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvWeightZP
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_NormalConvQBuffer
+        Type: SPM
+        Size: 576
+        Ports: 2
+    - Var:
+      - Name: head_NormalConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_NormalConv
+        OutCon: head_DWConv
+  - Accelerator:
+    - Name: head_DWConv
+      IrPath: hw/ir/head/DWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: head_DWConvWindow
+        Type: SPM
+        Size: 216
+        Ports: 9
+    - Var:
+      - Name: head_DWConvWeights
+        Type: SPM
+        Size: 240
+        Ports: 9
+    - Var:
+      - Name: head_DWConvBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftBias
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvIMultOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvNShiftOut
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvWeightZP
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvQBuffer
+        Type: SPM
+        Size: 2304
+        Ports: 2
+    - Var:
+      - Name: head_DWConvOutBuffer
+        Type: SPM
+        Size: 24
+        Ports: 1
+    - Var:
+      - Name: head_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: head_DWConv
+        OutCon: head_PWConv
+  - Accelerator:
+    - Name: head_PWConv
+      IrPath: hw/ir/head/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: head_stream_dma0
+    - Var:
+      - Name: head_PWConvLocalFeats
+        Type: SPM
+        Size: 24
+        Ports: 24
+    - Var:
+      - Name: head_PWConvWeights
+        Type: SPM
+        Size: 384
+        Ports: 24
+    - Var:
+      - Name: head_PWConvBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftBias
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvIMultOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvNShiftOut
+        Type: SPM
+        Size: 16
+        Ports: 1
+    - Var:
+      - Name: head_PWConvWeightZP
+        Type: SPM
+        Size: 16
+        Ports: 1
+---
+acc_cluster:
+  - Name: body
+  - DMA:
+    - Name: body_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: body_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 212
+      WriteInt: 213
+  - DMA:
+    - Name: body_stream_dma1
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 214
+      WriteInt: 215
+  - Accelerator:
+    - Name: body_top
+      IrPath: hw/ir/body/top.ll
+      Debug: False
+      PIOSize: 81
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+  - Accelerator:
+    - Name: body_residual
+      IrPath: hw/ir/body/Residual.ll
+      Debug: False
+      PIOSize: 17
+      PIOMaster: LocalBus
+      StreamOut: body_stream_dma0,body_stream_dma1
+    - Var:
+      - Name: body_ResidualOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_residual
+        OutCon: body_PWConv0
+  - Accelerator:
+    - Name: body_PWConv0
+      IrPath: hw/ir/body/PWConv0.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_PWConv0LocalFeats
+        Type: SPM
+        Size: 120
+        Ports: 120
+    - Var:
+      - Name: body_PWConv0Weights
+        Type: SPM
+        Size: 86400
+        Ports: 120
+    - Var:
+      - Name: body_PW0Bias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0IMultOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0NShiftOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PW0WeightZP
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_PWConv0Out
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_PWConv0
+        OutCon: body_DWConv
+  - Accelerator:
+    - Name: body_DWConv
+      IrPath: hw/ir/body/DWConv.ll
+      Debug: False
+      PIOSize: 65
+      PIOMaster: LocalBus
+    - Var:
+      - Name: body_DWConvWindow
+        Type: SPM
+        Size: 6480
+        Ports: 9
+    - Var:
+      - Name: body_DWConvWeights
+        Type: SPM
+        Size: 7200
+        Ports: 9
+    - Var:
+      - Name: body_DWBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftBias
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWIMultOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWNShiftOut
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWWeightZP
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWConvBuffer
+        Type: SPM
+        Size: 69120
+        Ports: 2
+    - Var:
+      - Name: body_DWConvOutBuffer
+        Type: SPM
+        Size: 720
+        Ports: 1
+    - Var:
+      - Name: body_DWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: body_DWConv
+        OutCon: body_PWConv1
+  - Accelerator:
+    - Name: body_PWConv1
+      IrPath: hw/ir/body/PWConv1.ll
+      Debug: False
+      PIOSize: 57
+      PIOMaster: LocalBus
+      StreamIn: body_stream_dma0
+    - Var:
+      - Name: body_PWConv1LocalFeats
+        Type: SPM
+        Size: 720
+        Ports: 120
+    - Var:
+      - Name: body_PWConv1Weights
+        Type: SPM
+        Size: 172800
+        Ports: 120
+    - Var:
+      - Name: body_PW1Bias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultBias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftBias
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1IMultOut
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1NShiftOut
+        Type: SPM
+        Size: 240
+        Ports: 1
+    - Var:
+      - Name: body_PW1WeightZP
+        Type: SPM
+        Size: 240
+        Ports: 1
+---
+acc_cluster:
+  - Name: tail
+  - DMA:
+    - Name: tail_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: tail_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: tail_Top
+      IrPath: hw/ir/tail/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: tail_PWConv
+      IrPath: hw/ir/tail/PWConv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamOut: tail_stream_dma0
+    - Var:
+      - Name: tail_PWConvLocalFeats
+        Type: SPM
+        Size: 240
+        Ports: 24
+    - Var:
+      - Name: tail_PWConvWeights
+        Type: SPM
+        Size: 307200
+        Ports: 24
+    - Var:
+      - Name: tail_PWBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftBias
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWIMultOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWNShiftOut
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWWeightZP
+        Type: SPM
+        Size: 1280
+        Ports: 1
+    - Var:
+      - Name: tail_PWConvOut
+        Type: Stream
+        StreamSize: 8
+        BufferSize: 64
+        InCon: tail_PWConv
+        OutCon: tail_Reshape
+  - Accelerator:
+    - Name: tail_Reshape
+      IrPath: hw/ir/tail/Reshape.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: tail_ReshapeOut
+        Type: SPM
+        Size: 11520
+        Ports: 1
+        ReadyMode: True
+        Connections: tail_AvgPool:1
+  - Accelerator:
+    - Name: tail_AvgPool
+      IrPath: hw/ir/tail/AvgPool.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+      StreamIn: tail_stream_dma0
+---
+acc_cluster:
+  - Name: classifier
+  - DMA:
+    - Name: classifier_dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+  - DMA:
+    - Name: classifier_stream_dma0
+      PIOMaster: LocalBus
+      StreamSize: 8
+      BufferSize: 64
+      Type: Stream
+      ReadInt: 210
+      WriteInt: 211
+  - Accelerator:
+    - Name: classifier_Top
+      IrPath: hw/ir/classifier/top.ll
+      PIOSize: 65
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: classifier_Linear
+      IrPath: hw/ir/classifier/Linear.ll
+      PIOSize: 1
+      PIOMaster: LocalBus
+      LocalSlaves: LocalBus
+      Debug: False
+      StreamIn: classifier_stream_dma0
+    - Var:
+      - Name: classifier_LinearFeats
+        Type: SPM
+        Size: 1280
+        Ports: 320
+    - Var:
+      - Name: classifier_LinearWeights
+        Type: SPM
+        Size: 1280000
+        Ports: 320
+    - Var:
+      - Name: classifier_PWBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftBias
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWIMultOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWNShiftOut
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_PWWeightZP
+        Type: SPM
+        Size: 1000
+        Ports: 54
+    - Var:
+      - Name: classifier_LinearSum
+        Type: SPM
+        Size: 1000
+        Ports: 320
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/.gitignore gem5-SALAM/benchmarks/mobilenetv2/.gitignore
--- gem5/benchmarks/mobilenetv2/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/.gitignore	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,5 @@
+*.ll
+*.o
+*.elf
+*defines.h
+network_params.h
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/head_hw_defines.h gem5-SALAM/benchmarks/mobilenetv2/head_hw_defines.h
--- gem5/benchmarks/mobilenetv2/head_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/head_hw_defines.h	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,59 @@
+//BEGIN GENERATED CODE
+//Cluster: HEAD
+//NonCoherentDMA
+#define HEAD_DMA_Flags 0x10020000
+#define HEAD_DMA_RdAddr 0x10020001
+#define HEAD_DMA_WrAddr 0x10020009
+#define HEAD_DMA_CopyLen 0x10020011
+//StreamDMA
+#define HEAD_STREAM_DMA0_Flags 0x10020040
+#define HEAD_STREAM_DMA0_RdAddr 0x10020044
+#define HEAD_STREAM_DMA0_WrAddr 0x1002004c
+#define HEAD_STREAM_DMA0_RdFrameSize 0x10020054
+#define HEAD_STREAM_DMA0_NumRdFrames 0x10020058
+#define HEAD_STREAM_DMA0_RdFrameBufSize 0x10020059
+#define HEAD_STREAM_DMA0_WrFrameSize 0x1002005a
+#define HEAD_STREAM_DMA0_NumWrFrames 0x1002005e
+#define HEAD_STREAM_DMA0_WrFrameBufSize 0x1002005f
+#define HEAD_STREAM_DMA0_Stream 0x10020060
+#define HEAD_STREAM_DMA0_Status 0x10020080
+//Accelerator: HEAD_TOP
+#define HEAD_TOP 0x100200c0
+//Accelerator: HEAD_NORMALCONV
+#define HEAD_NORMALCONV 0x10020140
+#define head_NormalConvWindow 0x10020180
+#define head_NormalConvWeights 0x100201c0
+#define head_NormalConvBias 0x10020380
+#define head_NormalConvIMultBias 0x100203c0
+#define head_NormalConvNShiftBias 0x10020400
+#define head_NormalConvIMultOut 0x10020440
+#define head_NormalConvNShiftOut 0x10020480
+#define head_NormalConvWeightZP 0x100204c0
+#define head_NormalConvQBuffer 0x10020500
+#define head_NormalConvOut 0x10020780
+#define head_NormalConvOut_Status 0x100207c0
+//Accelerator: HEAD_DWCONV
+#define HEAD_DWCONV 0x10020800
+#define head_DWConvWindow 0x10020840
+#define head_DWConvWeights 0x10020900
+#define head_DWConvBias 0x100209c0
+#define head_DWConvIMultBias 0x10020a00
+#define head_DWConvNShiftBias 0x10020a40
+#define head_DWConvIMultOut 0x10020a80
+#define head_DWConvNShiftOut 0x10020ac0
+#define head_DWConvWeightZP 0x10020b00
+#define head_DWConvQBuffer 0x10020b40
+#define head_DWConvOutBuffer 0x10021180
+#define head_DWConvOut 0x100211c0
+#define head_DWConvOut_Status 0x10021200
+//Accelerator: HEAD_PWCONV
+#define HEAD_PWCONV 0x10021240
+#define head_PWConvLocalFeats 0x10021280
+#define head_PWConvWeights 0x100212c0
+#define head_PWConvBias 0x10021380
+#define head_PWConvIMultBias 0x100213c0
+#define head_PWConvNShiftBias 0x10021400
+#define head_PWConvIMultOut 0x10021440
+#define head_PWConvNShiftOut 0x10021480
+#define head_PWConvWeightZP 0x100214c0
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/Makefile
--- gem5/benchmarks/mobilenetv2/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,11 @@
+FOLDERS=source
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b; done )
+
+clean:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/body_defines.h gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/body_defines.h
--- gem5/benchmarks/mobilenetv2/hw/source/body/body_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/body_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,485 @@
+#include "../common/support.h"
+#include "../../../body_hw_defines.h"
+#include "../../../network_params.h"
+
+/***********************************************************
+ * Base Computation Defines
+ ***********************************************************/
+#define KERNEL_SIZE		3
+#define HALF_SIZE		(((KERNEL_SIZE)-1) / 2)
+
+// PW Conv 0
+#define PW0_IN_CH_MAX	__EXPND_PW_CONV_RES_MAX_INPUT_CHAN__
+#define PW0_OUT_CH_MAX	__EXPND_PW_CONV_RES_MAX_OUTPUT_CHANNEL__
+#define PW0_CORE_SIZE	120
+#define PW0WeightSize	PW0_OUT_CH_MAX*PW0_IN_CH_MAX
+#define PW0QParamSize	PW0_OUT_CH_MAX
+
+// DW Conv
+#define DW0_IN_SIZE_MAX	__IRB_DW_CONV_STD_2_MAX_INPUT_SIZE__
+#define DW0_IN_CH_MAX	__IRB_DW_CONV_STD_1_MAX_INPUT_CHAN__
+#define DW0_OUT_CH_MAX	__IRB_DW_CONV_STD_1_MAX_OUTPUT_CHANNEL__
+#define DW0BuffSize		DW0_IN_SIZE_MAX*(KERNEL_SIZE-1)*DW0_IN_CH_MAX
+#define DW0WindowSize	KERNEL_SIZE*KERNEL_SIZE*DW0_IN_CH_MAX
+#define DW0WeightSize	DW0_OUT_CH_MAX*((KERNEL_SIZE*KERNEL_SIZE)+1)
+#define DW0QParamSize	DW0_OUT_CH_MAX
+
+// PW Conv 1
+#define PW1_IN_CH_MAX	__PRJC_PW_CONV_STR1_MAX_INPUT_CHAN__
+#define PW1_OUT_CH_MAX	__PRJC_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__
+#define PW1_CORE_SIZE	120
+#define PW1WeightSize	PW1_OUT_CH_MAX*PW1_IN_CH_MAX
+#define PW1QParamSize	PW1_OUT_CH_MAX
+
+/***********************************************************
+ * Per-Layer Computation Defines
+ ***********************************************************/
+// Iteration 0
+#define RES_0_ENABLE	0
+
+#define PW0_0_I_SIZE 	__FEATURES_2_CONV_0__INPUT_SIZE__
+#define PW0_0_O_SIZE 	__FEATURES_2_CONV_0__OUTPUT_SIZE__
+#define PW0_0_IC_SIZE	__FEATURES_2_CONV_0__INPUT_CHAN__
+#define PW0_0_OC_SIZE	__FEATURES_2_CONV_0__OUTPUT_CHAN__
+#define PW0_0_BIAS_ZP	0
+#define PW0_0_IN_ZP		0
+#define PW0_0_OUT_ZP	0
+
+#define DW0_0_I_SIZE 	__FEATURES_2_CONV_2__INPUT_SIZE__
+#define DW0_0_O_SIZE 	__FEATURES_2_CONV_2__OUTPUT_SIZE__
+#define DW0_0_IC_SIZE	__FEATURES_2_CONV_2__INPUT_CHAN__
+#define DW0_0_OC_SIZE	__FEATURES_2_CONV_2__OUTPUT_CHAN__
+#define DW0_0_STRIDE	__FEATURES_2_CONV_2__STRIDE_SIZE__
+#define DW0_0_BIAS_ZP	0
+#define DW0_0_IN_ZP		0
+#define DW0_0_OUT_ZP	0
+
+#define PW1_0_I_SIZE 	__FEATURES_2_CONV_4__INPUT_SIZE__
+#define PW1_0_O_SIZE 	__FEATURES_2_CONV_4__OUTPUT_SIZE__
+#define PW1_0_IC_SIZE	__FEATURES_2_CONV_4__INPUT_CHAN__
+#define PW1_0_OC_SIZE	__FEATURES_2_CONV_4__OUTPUT_CHAN__
+#define PW1_0_BIAS_ZP	0
+#define PW1_0_IN_ZP		0
+#define PW1_0_OUT_ZP	0
+
+// Iteration 1
+#define RES_1_ENABLE	0
+
+#define PW0_1_I_SIZE 	__FEATURES_3_CONV_0__INPUT_SIZE__
+#define PW0_1_O_SIZE 	__FEATURES_3_CONV_0__OUTPUT_SIZE__
+#define PW0_1_IC_SIZE	__FEATURES_3_CONV_0__INPUT_CHAN__
+#define PW0_1_OC_SIZE	__FEATURES_3_CONV_0__OUTPUT_CHAN__
+#define PW0_1_BIAS_ZP	0
+#define PW0_1_IN_ZP		0
+#define PW0_1_OUT_ZP	0
+
+#define DW0_1_I_SIZE 	__FEATURES_3_CONV_2__INPUT_SIZE__
+#define DW0_1_O_SIZE 	__FEATURES_3_CONV_2__OUTPUT_SIZE__
+#define DW0_1_IC_SIZE	__FEATURES_3_CONV_2__INPUT_CHAN__
+#define DW0_1_OC_SIZE	__FEATURES_3_CONV_2__OUTPUT_CHAN__
+#define DW0_1_STRIDE	__FEATURES_3_CONV_2__STRIDE_SIZE__
+#define DW0_1_BIAS_ZP	0
+#define DW0_1_IN_ZP		0
+#define DW0_1_OUT_ZP	0
+
+#define PW1_1_I_SIZE 	__FEATURES_3_CONV_4__INPUT_SIZE__
+#define PW1_1_O_SIZE 	__FEATURES_3_CONV_4__OUTPUT_SIZE__
+#define PW1_1_IC_SIZE	__FEATURES_3_CONV_4__INPUT_CHAN__
+#define PW1_1_OC_SIZE	__FEATURES_3_CONV_4__OUTPUT_CHAN__
+#define PW1_1_BIAS_ZP	0
+#define PW1_1_IN_ZP		0
+#define PW1_1_OUT_ZP	0
+
+
+// Iteration 2
+#define RES_2_ENABLE	1
+
+#define PW0_2_I_SIZE 	__FEATURES_4_CONV_0__INPUT_SIZE__
+#define PW0_2_O_SIZE 	__FEATURES_4_CONV_0__OUTPUT_SIZE__
+#define PW0_2_IC_SIZE	__FEATURES_4_CONV_0__INPUT_CHAN__
+#define PW0_2_OC_SIZE	__FEATURES_4_CONV_0__OUTPUT_CHAN__
+#define PW0_2_BIAS_ZP	0
+#define PW0_2_IN_ZP		0
+#define PW0_2_OUT_ZP	0
+
+#define DW0_2_I_SIZE 	__FEATURES_4_CONV_2__INPUT_SIZE__
+#define DW0_2_O_SIZE 	__FEATURES_4_CONV_2__OUTPUT_SIZE__
+#define DW0_2_IC_SIZE	__FEATURES_4_CONV_2__INPUT_CHAN__
+#define DW0_2_OC_SIZE	__FEATURES_4_CONV_2__OUTPUT_CHAN__
+#define DW0_2_STRIDE	__FEATURES_4_CONV_2__STRIDE_SIZE__
+#define DW0_2_BIAS_ZP	0
+#define DW0_2_IN_ZP		0
+#define DW0_2_OUT_ZP	0
+
+#define PW1_2_I_SIZE 	__FEATURES_4_CONV_4__INPUT_SIZE__
+#define PW1_2_O_SIZE 	__FEATURES_4_CONV_4__OUTPUT_SIZE__
+#define PW1_2_IC_SIZE	__FEATURES_4_CONV_4__INPUT_CHAN__
+#define PW1_2_OC_SIZE	__FEATURES_4_CONV_4__OUTPUT_CHAN__
+#define PW1_2_BIAS_ZP	0
+#define PW1_2_IN_ZP		0
+#define PW1_2_OUT_ZP	0
+
+// Iteration 3
+#define RES_3_ENABLE	0
+
+#define PW0_3_I_SIZE 	__FEATURES_5_CONV_0__INPUT_SIZE__
+#define PW0_3_O_SIZE 	__FEATURES_5_CONV_0__OUTPUT_SIZE__
+#define PW0_3_IC_SIZE	__FEATURES_5_CONV_0__INPUT_CHAN__
+#define PW0_3_OC_SIZE	__FEATURES_5_CONV_0__OUTPUT_CHAN__
+#define PW0_3_BIAS_ZP	0
+#define PW0_3_IN_ZP		0
+#define PW0_3_OUT_ZP	0
+
+#define DW0_3_I_SIZE 	__FEATURES_5_CONV_2__INPUT_SIZE__
+#define DW0_3_O_SIZE 	__FEATURES_5_CONV_2__OUTPUT_SIZE__
+#define DW0_3_IC_SIZE	__FEATURES_5_CONV_2__INPUT_CHAN__
+#define DW0_3_OC_SIZE	__FEATURES_5_CONV_2__OUTPUT_CHAN__
+#define DW0_3_STRIDE	__FEATURES_5_CONV_2__STRIDE_SIZE__
+#define DW0_3_BIAS_ZP	0
+#define DW0_3_IN_ZP		0
+#define DW0_3_OUT_ZP	0
+
+#define PW1_3_I_SIZE 	__FEATURES_5_CONV_4__INPUT_SIZE__
+#define PW1_3_O_SIZE 	__FEATURES_5_CONV_4__OUTPUT_SIZE__
+#define PW1_3_IC_SIZE	__FEATURES_5_CONV_4__INPUT_CHAN__
+#define PW1_3_OC_SIZE	__FEATURES_5_CONV_4__OUTPUT_CHAN__
+#define PW1_3_BIAS_ZP	0
+#define PW1_3_IN_ZP		0
+#define PW1_3_OUT_ZP	0
+
+// Iteration 4
+#define RES_4_ENABLE	1
+
+#define PW0_4_I_SIZE 	__FEATURES_6_CONV_0__INPUT_SIZE__
+#define PW0_4_O_SIZE 	__FEATURES_6_CONV_0__OUTPUT_SIZE__
+#define PW0_4_IC_SIZE	__FEATURES_6_CONV_0__INPUT_CHAN__
+#define PW0_4_OC_SIZE	__FEATURES_6_CONV_0__OUTPUT_CHAN__
+#define PW0_4_BIAS_ZP	0
+#define PW0_4_IN_ZP		0
+#define PW0_4_OUT_ZP	0
+
+#define DW0_4_I_SIZE 	__FEATURES_6_CONV_2__INPUT_SIZE__
+#define DW0_4_O_SIZE 	__FEATURES_6_CONV_2__OUTPUT_SIZE__
+#define DW0_4_IC_SIZE	__FEATURES_6_CONV_2__INPUT_CHAN__
+#define DW0_4_OC_SIZE	__FEATURES_6_CONV_2__OUTPUT_CHAN__
+#define DW0_4_STRIDE	__FEATURES_6_CONV_2__STRIDE_SIZE__
+#define DW0_4_BIAS_ZP	0
+#define DW0_4_IN_ZP		0
+#define DW0_4_OUT_ZP	0
+
+#define PW1_4_I_SIZE 	__FEATURES_6_CONV_4__INPUT_SIZE__
+#define PW1_4_O_SIZE 	__FEATURES_6_CONV_4__OUTPUT_SIZE__
+#define PW1_4_IC_SIZE	__FEATURES_6_CONV_4__INPUT_CHAN__
+#define PW1_4_OC_SIZE	__FEATURES_6_CONV_4__OUTPUT_CHAN__
+#define PW1_4_BIAS_ZP	0
+#define PW1_4_IN_ZP		0
+#define PW1_4_OUT_ZP	0
+
+// Iteration 5
+#define RES_5_ENABLE	1
+
+#define PW0_5_I_SIZE 	__FEATURES_7_CONV_0__INPUT_SIZE__
+#define PW0_5_O_SIZE 	__FEATURES_7_CONV_0__OUTPUT_SIZE__
+#define PW0_5_IC_SIZE	__FEATURES_7_CONV_0__INPUT_CHAN__
+#define PW0_5_OC_SIZE	__FEATURES_7_CONV_0__OUTPUT_CHAN__
+#define PW0_5_BIAS_ZP	0
+#define PW0_5_IN_ZP		0
+#define PW0_5_OUT_ZP	0
+
+#define DW0_5_I_SIZE 	__FEATURES_7_CONV_2__INPUT_SIZE__
+#define DW0_5_O_SIZE 	__FEATURES_7_CONV_2__OUTPUT_SIZE__
+#define DW0_5_IC_SIZE	__FEATURES_7_CONV_2__INPUT_CHAN__
+#define DW0_5_OC_SIZE	__FEATURES_7_CONV_2__OUTPUT_CHAN__
+#define DW0_5_STRIDE	__FEATURES_7_CONV_2__STRIDE_SIZE__
+#define DW0_5_BIAS_ZP	0
+#define DW0_5_IN_ZP		0
+#define DW0_5_OUT_ZP	0
+
+#define PW1_5_I_SIZE 	__FEATURES_7_CONV_4__INPUT_SIZE__
+#define PW1_5_O_SIZE 	__FEATURES_7_CONV_4__OUTPUT_SIZE__
+#define PW1_5_IC_SIZE	__FEATURES_7_CONV_4__INPUT_CHAN__
+#define PW1_5_OC_SIZE	__FEATURES_7_CONV_4__OUTPUT_CHAN__
+#define PW1_5_BIAS_ZP	0
+#define PW1_5_IN_ZP		0
+#define PW1_5_OUT_ZP	0
+
+
+// Iteration 6
+#define RES_6_ENABLE	0
+
+#define PW0_6_I_SIZE 	__FEATURES_8_CONV_0__INPUT_SIZE__
+#define PW0_6_O_SIZE 	__FEATURES_8_CONV_0__OUTPUT_SIZE__
+#define PW0_6_IC_SIZE	__FEATURES_8_CONV_0__INPUT_CHAN__
+#define PW0_6_OC_SIZE	__FEATURES_8_CONV_0__OUTPUT_CHAN__
+#define PW0_6_BIAS_ZP	0
+#define PW0_6_IN_ZP		0
+#define PW0_6_OUT_ZP	0
+
+#define DW0_6_I_SIZE 	__FEATURES_8_CONV_2__INPUT_SIZE__
+#define DW0_6_O_SIZE 	__FEATURES_8_CONV_2__OUTPUT_SIZE__
+#define DW0_6_IC_SIZE	__FEATURES_8_CONV_2__INPUT_CHAN__
+#define DW0_6_OC_SIZE	__FEATURES_8_CONV_2__OUTPUT_CHAN__
+#define DW0_6_STRIDE	__FEATURES_8_CONV_2__STRIDE_SIZE__
+#define DW0_6_BIAS_ZP	0
+#define DW0_6_IN_ZP		0
+#define DW0_6_OUT_ZP	0
+
+#define PW1_6_I_SIZE 	__FEATURES_8_CONV_4__INPUT_SIZE__
+#define PW1_6_O_SIZE 	__FEATURES_8_CONV_4__OUTPUT_SIZE__
+#define PW1_6_IC_SIZE	__FEATURES_8_CONV_4__INPUT_CHAN__
+#define PW1_6_OC_SIZE	__FEATURES_8_CONV_4__OUTPUT_CHAN__
+#define PW1_6_BIAS_ZP	0
+#define PW1_6_IN_ZP		0
+#define PW1_6_OUT_ZP	0
+
+// Iteration 7
+#define RES_7_ENABLE	1
+
+#define PW0_7_I_SIZE 	__FEATURES_9_CONV_0__INPUT_SIZE__
+#define PW0_7_O_SIZE 	__FEATURES_9_CONV_0__OUTPUT_SIZE__
+#define PW0_7_IC_SIZE	__FEATURES_9_CONV_0__INPUT_CHAN__
+#define PW0_7_OC_SIZE	__FEATURES_9_CONV_0__OUTPUT_CHAN__
+#define PW0_7_BIAS_ZP	0
+#define PW0_7_IN_ZP		0
+#define PW0_7_OUT_ZP	0
+
+#define DW0_7_I_SIZE 	__FEATURES_9_CONV_2__INPUT_SIZE__
+#define DW0_7_O_SIZE 	__FEATURES_9_CONV_2__OUTPUT_SIZE__
+#define DW0_7_IC_SIZE	__FEATURES_9_CONV_2__INPUT_CHAN__
+#define DW0_7_OC_SIZE	__FEATURES_9_CONV_2__OUTPUT_CHAN__
+#define DW0_7_STRIDE	__FEATURES_9_CONV_2__STRIDE_SIZE__
+#define DW0_7_BIAS_ZP	0
+#define DW0_7_IN_ZP		0
+#define DW0_7_OUT_ZP	0
+
+#define PW1_7_I_SIZE 	__FEATURES_9_CONV_4__INPUT_SIZE__
+#define PW1_7_O_SIZE 	__FEATURES_9_CONV_4__OUTPUT_SIZE__
+#define PW1_7_IC_SIZE	__FEATURES_9_CONV_4__INPUT_CHAN__
+#define PW1_7_OC_SIZE	__FEATURES_9_CONV_4__OUTPUT_CHAN__
+#define PW1_7_BIAS_ZP	0
+#define PW1_7_IN_ZP		0
+#define PW1_7_OUT_ZP	0
+
+// Iteration 8
+#define RES_8_ENABLE	1
+
+#define PW0_8_I_SIZE 	__FEATURES_10_CONV_0__INPUT_SIZE__
+#define PW0_8_O_SIZE 	__FEATURES_10_CONV_0__OUTPUT_SIZE__
+#define PW0_8_IC_SIZE	__FEATURES_10_CONV_0__INPUT_CHAN__
+#define PW0_8_OC_SIZE	__FEATURES_10_CONV_0__OUTPUT_CHAN__
+#define PW0_8_BIAS_ZP	0
+#define PW0_8_IN_ZP		0
+#define PW0_8_OUT_ZP	0
+
+#define DW0_8_I_SIZE 	__FEATURES_10_CONV_2__INPUT_SIZE__
+#define DW0_8_O_SIZE 	__FEATURES_10_CONV_2__OUTPUT_SIZE__
+#define DW0_8_IC_SIZE	__FEATURES_10_CONV_2__INPUT_CHAN__
+#define DW0_8_OC_SIZE	__FEATURES_10_CONV_2__OUTPUT_CHAN__
+#define DW0_8_STRIDE	__FEATURES_10_CONV_2__STRIDE_SIZE__
+#define DW0_8_BIAS_ZP	0
+#define DW0_8_IN_ZP		0
+#define DW0_8_OUT_ZP	0
+
+#define PW1_8_I_SIZE 	__FEATURES_10_CONV_4__INPUT_SIZE__
+#define PW1_8_O_SIZE 	__FEATURES_10_CONV_4__OUTPUT_SIZE__
+#define PW1_8_IC_SIZE	__FEATURES_10_CONV_4__INPUT_CHAN__
+#define PW1_8_OC_SIZE	__FEATURES_10_CONV_4__OUTPUT_CHAN__
+#define PW1_8_BIAS_ZP	0
+#define PW1_8_IN_ZP		0
+#define PW1_8_OUT_ZP	0
+
+// Iteration 9
+#define RES_9_ENABLE	1
+
+#define PW0_9_I_SIZE 	__FEATURES_11_CONV_0__INPUT_SIZE__
+#define PW0_9_O_SIZE 	__FEATURES_11_CONV_0__OUTPUT_SIZE__
+#define PW0_9_IC_SIZE	__FEATURES_11_CONV_0__INPUT_CHAN__
+#define PW0_9_OC_SIZE	__FEATURES_11_CONV_0__OUTPUT_CHAN__
+#define PW0_9_BIAS_ZP	0
+#define PW0_9_IN_ZP		0
+#define PW0_9_OUT_ZP	0
+
+#define DW0_9_I_SIZE 	__FEATURES_11_CONV_2__INPUT_SIZE__
+#define DW0_9_O_SIZE 	__FEATURES_11_CONV_2__OUTPUT_SIZE__
+#define DW0_9_IC_SIZE	__FEATURES_11_CONV_2__INPUT_CHAN__
+#define DW0_9_OC_SIZE	__FEATURES_11_CONV_2__OUTPUT_CHAN__
+#define DW0_9_STRIDE	__FEATURES_11_CONV_2__STRIDE_SIZE__
+#define DW0_9_BIAS_ZP	0
+#define DW0_9_IN_ZP		0
+#define DW0_9_OUT_ZP	0
+
+#define PW1_9_I_SIZE 	__FEATURES_11_CONV_4__INPUT_SIZE__
+#define PW1_9_O_SIZE 	__FEATURES_11_CONV_4__OUTPUT_SIZE__
+#define PW1_9_IC_SIZE	__FEATURES_11_CONV_4__INPUT_CHAN__
+#define PW1_9_OC_SIZE	__FEATURES_11_CONV_4__OUTPUT_CHAN__
+#define PW1_9_BIAS_ZP	0
+#define PW1_9_IN_ZP		0
+#define PW1_9_OUT_ZP	0
+
+// Iteration 10
+#define RES_10_ENABLE	0
+
+#define PW0_10_I_SIZE 	__FEATURES_12_CONV_0__INPUT_SIZE__
+#define PW0_10_O_SIZE 	__FEATURES_12_CONV_0__OUTPUT_SIZE__
+#define PW0_10_IC_SIZE	__FEATURES_12_CONV_0__INPUT_CHAN__
+#define PW0_10_OC_SIZE	__FEATURES_12_CONV_0__OUTPUT_CHAN__
+#define PW0_10_BIAS_ZP	0
+#define PW0_10_IN_ZP	0
+#define PW0_10_OUT_ZP	0
+
+#define DW0_10_I_SIZE 	__FEATURES_12_CONV_2__INPUT_SIZE__
+#define DW0_10_O_SIZE 	__FEATURES_12_CONV_2__OUTPUT_SIZE__
+#define DW0_10_IC_SIZE	__FEATURES_12_CONV_2__INPUT_CHAN__
+#define DW0_10_OC_SIZE	__FEATURES_12_CONV_2__OUTPUT_CHAN__
+#define DW0_10_STRIDE	__FEATURES_12_CONV_2__STRIDE_SIZE__
+#define DW0_10_BIAS_ZP	0
+#define DW0_10_IN_ZP	0
+#define DW0_10_OUT_ZP	0
+
+#define PW1_10_I_SIZE 	__FEATURES_12_CONV_4__INPUT_SIZE__
+#define PW1_10_O_SIZE 	__FEATURES_12_CONV_4__OUTPUT_SIZE__
+#define PW1_10_IC_SIZE	__FEATURES_12_CONV_4__INPUT_CHAN__
+#define PW1_10_OC_SIZE	__FEATURES_12_CONV_4__OUTPUT_CHAN__
+#define PW1_10_BIAS_ZP	0
+#define PW1_10_IN_ZP	0
+#define PW1_10_OUT_ZP	0
+
+// Iteration 11
+#define RES_11_ENABLE	1
+
+#define PW0_11_I_SIZE 	__FEATURES_13_CONV_0__INPUT_SIZE__
+#define PW0_11_O_SIZE 	__FEATURES_13_CONV_0__OUTPUT_SIZE__
+#define PW0_11_IC_SIZE	__FEATURES_13_CONV_0__INPUT_CHAN__
+#define PW0_11_OC_SIZE	__FEATURES_13_CONV_0__OUTPUT_CHAN__
+#define PW0_11_BIAS_ZP	0
+#define PW0_11_IN_ZP	0
+#define PW0_11_OUT_ZP	0
+
+#define DW0_11_I_SIZE 	__FEATURES_13_CONV_2__INPUT_SIZE__
+#define DW0_11_O_SIZE 	__FEATURES_13_CONV_2__OUTPUT_SIZE__
+#define DW0_11_IC_SIZE	__FEATURES_13_CONV_2__INPUT_CHAN__
+#define DW0_11_OC_SIZE	__FEATURES_13_CONV_2__OUTPUT_CHAN__
+#define DW0_11_STRIDE	__FEATURES_13_CONV_2__STRIDE_SIZE__
+#define DW0_11_BIAS_ZP	0
+#define DW0_11_IN_ZP	0
+#define DW0_11_OUT_ZP	0
+
+#define PW1_11_I_SIZE 	__FEATURES_13_CONV_4__INPUT_SIZE__
+#define PW1_11_O_SIZE 	__FEATURES_13_CONV_4__OUTPUT_SIZE__
+#define PW1_11_IC_SIZE	__FEATURES_13_CONV_4__INPUT_CHAN__
+#define PW1_11_OC_SIZE	__FEATURES_13_CONV_4__OUTPUT_CHAN__
+#define PW1_11_BIAS_ZP	0
+#define PW1_11_IN_ZP	0
+#define PW1_11_OUT_ZP	0
+
+// Iteration 12
+#define RES_12_ENABLE	1
+
+#define PW0_12_I_SIZE 	__FEATURES_14_CONV_0__INPUT_SIZE__
+#define PW0_12_O_SIZE 	__FEATURES_14_CONV_0__OUTPUT_SIZE__
+#define PW0_12_IC_SIZE	__FEATURES_14_CONV_0__INPUT_CHAN__
+#define PW0_12_OC_SIZE	__FEATURES_14_CONV_0__OUTPUT_CHAN__
+#define PW0_12_BIAS_ZP	0
+#define PW0_12_IN_ZP	0
+#define PW0_12_OUT_ZP	0
+
+#define DW0_12_I_SIZE 	__FEATURES_14_CONV_2__INPUT_SIZE__
+#define DW0_12_O_SIZE 	__FEATURES_14_CONV_2__OUTPUT_SIZE__
+#define DW0_12_IC_SIZE	__FEATURES_14_CONV_2__INPUT_CHAN__
+#define DW0_12_OC_SIZE	__FEATURES_14_CONV_2__OUTPUT_CHAN__
+#define DW0_12_STRIDE	__FEATURES_14_CONV_2__STRIDE_SIZE__
+#define DW0_12_BIAS_ZP	0
+#define DW0_12_IN_ZP	0
+#define DW0_12_OUT_ZP	0
+
+#define PW1_12_I_SIZE 	__FEATURES_14_CONV_4__INPUT_SIZE__
+#define PW1_12_O_SIZE 	__FEATURES_14_CONV_4__OUTPUT_SIZE__
+#define PW1_12_IC_SIZE	__FEATURES_14_CONV_4__INPUT_CHAN__
+#define PW1_12_OC_SIZE	__FEATURES_14_CONV_4__OUTPUT_CHAN__
+#define PW1_12_BIAS_ZP	0
+#define PW1_12_IN_ZP	0
+#define PW1_12_OUT_ZP	0
+
+// Iteration 13
+#define RES_13_ENABLE	0
+
+#define PW0_13_I_SIZE 	__FEATURES_15_CONV_0__INPUT_SIZE__
+#define PW0_13_O_SIZE 	__FEATURES_15_CONV_0__OUTPUT_SIZE__
+#define PW0_13_IC_SIZE	__FEATURES_15_CONV_0__INPUT_CHAN__
+#define PW0_13_OC_SIZE	__FEATURES_15_CONV_0__OUTPUT_CHAN__
+#define PW0_13_BIAS_ZP	0
+#define PW0_13_IN_ZP	0
+#define PW0_13_OUT_ZP	0
+
+#define DW0_13_I_SIZE 	__FEATURES_15_CONV_2__INPUT_SIZE__
+#define DW0_13_O_SIZE 	__FEATURES_15_CONV_2__OUTPUT_SIZE__
+#define DW0_13_IC_SIZE	__FEATURES_15_CONV_2__INPUT_CHAN__
+#define DW0_13_OC_SIZE	__FEATURES_15_CONV_2__OUTPUT_CHAN__
+#define DW0_13_STRIDE	__FEATURES_15_CONV_2__STRIDE_SIZE__
+#define DW0_13_BIAS_ZP	0
+#define DW0_13_IN_ZP	0
+#define DW0_13_OUT_ZP	0
+
+#define PW1_13_I_SIZE 	__FEATURES_15_CONV_4__INPUT_SIZE__
+#define PW1_13_O_SIZE 	__FEATURES_15_CONV_4__OUTPUT_SIZE__
+#define PW1_13_IC_SIZE	__FEATURES_15_CONV_4__INPUT_CHAN__
+#define PW1_13_OC_SIZE	__FEATURES_15_CONV_4__OUTPUT_CHAN__
+#define PW1_13_BIAS_ZP	0
+#define PW1_13_IN_ZP	0
+#define PW1_13_OUT_ZP	0
+
+// Iteration 14
+#define RES_14_ENABLE	1
+
+#define PW0_14_I_SIZE 	__FEATURES_16_CONV_0__INPUT_SIZE__
+#define PW0_14_O_SIZE 	__FEATURES_16_CONV_0__OUTPUT_SIZE__
+#define PW0_14_IC_SIZE	__FEATURES_16_CONV_0__INPUT_CHAN__
+#define PW0_14_OC_SIZE	__FEATURES_16_CONV_0__OUTPUT_CHAN__
+#define PW0_14_BIAS_ZP	0
+#define PW0_14_IN_ZP	0
+#define PW0_14_OUT_ZP	0
+
+#define DW0_14_I_SIZE 	__FEATURES_16_CONV_2__INPUT_SIZE__
+#define DW0_14_O_SIZE 	__FEATURES_16_CONV_2__OUTPUT_SIZE__
+#define DW0_14_IC_SIZE	__FEATURES_16_CONV_2__INPUT_CHAN__
+#define DW0_14_OC_SIZE	__FEATURES_16_CONV_2__OUTPUT_CHAN__
+#define DW0_14_STRIDE	__FEATURES_16_CONV_2__STRIDE_SIZE__
+#define DW0_14_BIAS_ZP	0
+#define DW0_14_IN_ZP	0
+#define DW0_14_OUT_ZP	0
+
+#define PW1_14_I_SIZE 	__FEATURES_16_CONV_4__INPUT_SIZE__
+#define PW1_14_O_SIZE 	__FEATURES_16_CONV_4__OUTPUT_SIZE__
+#define PW1_14_IC_SIZE	__FEATURES_16_CONV_4__INPUT_CHAN__
+#define PW1_14_OC_SIZE	__FEATURES_16_CONV_4__OUTPUT_CHAN__
+#define PW1_14_BIAS_ZP	0
+#define PW1_14_IN_ZP	0
+#define PW1_14_OUT_ZP	0
+
+// Iteration 15
+#define RES_15_ENABLE	1
+
+#define PW0_15_I_SIZE 	__FEATURES_17_CONV_0__INPUT_SIZE__
+#define PW0_15_O_SIZE 	__FEATURES_17_CONV_0__OUTPUT_SIZE__
+#define PW0_15_IC_SIZE	__FEATURES_17_CONV_0__INPUT_CHAN__
+#define PW0_15_OC_SIZE	__FEATURES_17_CONV_0__OUTPUT_CHAN__
+#define PW0_15_BIAS_ZP	0
+#define PW0_15_IN_ZP	0
+#define PW0_15_OUT_ZP	0
+
+#define DW0_15_I_SIZE 	__FEATURES_17_CONV_2__INPUT_SIZE__
+#define DW0_15_O_SIZE 	__FEATURES_17_CONV_2__OUTPUT_SIZE__
+#define DW0_15_IC_SIZE	__FEATURES_17_CONV_2__INPUT_CHAN__
+#define DW0_15_OC_SIZE	__FEATURES_17_CONV_2__OUTPUT_CHAN__
+#define DW0_15_STRIDE	__FEATURES_17_CONV_2__STRIDE_SIZE__
+#define DW0_15_BIAS_ZP	0
+#define DW0_15_IN_ZP	0
+#define DW0_15_OUT_ZP	0
+
+#define PW1_15_I_SIZE 	__FEATURES_17_CONV_4__INPUT_SIZE__
+#define PW1_15_O_SIZE 	__FEATURES_17_CONV_4__OUTPUT_SIZE__
+#define PW1_15_IC_SIZE	__FEATURES_17_CONV_4__INPUT_CHAN__
+#define PW1_15_OC_SIZE	__FEATURES_17_CONV_4__OUTPUT_CHAN__
+#define PW1_15_BIAS_ZP	0
+#define PW1_15_IN_ZP	0
+#define PW1_15_OUT_ZP	0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/DWConv.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/DWConv.c
--- gem5/benchmarks/mobilenetv2/hw/source/body/DWConv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/DWConv.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,176 @@
+#include "body_defines.h"
+
+#define t_MAX_INPUT_CHANNEL     DW0_IN_CH_MAX
+#define t_MAX_OUTPUT_CHANNEL    DW0_OUT_CH_MAX
+#define t_MAX_INPUT_SIZE        DW0_IN_SIZE_MAX
+#define t_ACCUMULATE_TYPE       dType_Reg
+#define t_KSIZE                 KERNEL_SIZE
+
+void DWConv(uint64_t o_size, uint64_t i_size,
+            uint64_t o_c_size, uint64_t i_c_size, uint64_t t_STRIDE,
+            uint64_t bias_zp, uint64_t input_zp, uint64_t output_zp) {
+	volatile dType_8u * STR_IN  	= (dType_8u *)(body_PWConv0Out);
+	volatile dType_8u * BUFFER 		= (dType_8u *)(body_DWConvBuffer); // dType_8u[t_MAX_INPUT_CHANNEL][t_KSIZE-1][t_MAX_INPUT_SIZE]
+	volatile dType_8u * WINDOW 		= (dType_8u *)(body_DWConvWindow); // dType_8u[t_MAX_INPUT_CHANNEL][t_KSIZE][t_KSIZE]
+	volatile dType_8u * WEIGHT		= (dType_8u *)(body_DWConvWeights); // dType_8u[t_MAX_OUTPUT_CHANNEL][t_MAX_OUTPUT_CHANNEL*(t_KSIZE*t_KSIZE+1)]
+	volatile dType_8u * BIAS		= (dType_8u *)(body_DWBias);
+	volatile dType_8u * IMULTBIAS	= (dType_8u *)(body_DWIMultBias);
+	volatile dType_8t * NSHIFTBIAS	= (dType_8t *)(body_DWNShiftBias);
+	volatile dType_8u * IMULTOUT	= (dType_8u *)(body_DWIMultOut);
+	volatile dType_8u * NSHIFTOUT	= (dType_8u *)(body_DWNShiftOut);
+	volatile dType_8u * WEIGHTZP 	= (dType_8u *)(body_DWWeightZP);
+	volatile dType_8u * OUT_8BIT 	= (dType_8u *)(body_DWConvOutBuffer); // dType_8u[t_MAX_OUTPUT_CHANNEL]
+	volatile dType_8u * STR_OUT		= (dType_8u *)(body_DWConvOut);
+
+	dType_8u	weight_zp	= 0;
+	dType_8u	bias 		= 0;
+	dType_Reg	y_com 		= 0;
+    dType_Reg	x_com 		= 0;
+    dType_Reg	y_looper 	= 0;
+    dType_Reg	x_looper 	= 0;
+    dType_Reg	read_count 	= (i_size * HALF_SIZE + HALF_SIZE + 1) * i_c_size;
+
+// Warmup
+buf_x1_n:
+	#pragma nounroll
+    for (dType_Reg x = i_size - HALF_SIZE - 1; x < i_size; x++) {
+    itr_channel_x1:
+		#pragma nounroll
+        for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+            // BUFFER[ch][HALF_SIZE - 1][x] = 1;
+            BUFFER[ch*(t_KSIZE-1)*i_size + (HALF_SIZE-1)*i_size + x] = *STR_IN;
+        }
+    }
+
+buf_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE - 1; y++) {
+    buf_x2_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < i_size; x++) {
+        itr_channel_x2:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // BUFFER[ch][y][x] = 1;
+                BUFFER[ch*(t_KSIZE-1)*i_size + y*i_size + x] = *STR_IN;
+            }
+        }
+    }
+
+win_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE; y++) {
+    win_x_n:
+		#pragma nounroll
+        for (dType_8u x = HALF_SIZE; x < t_KSIZE; x++) {
+        win_itr_channel:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // WINDOW[ch][y][x] = BUFFER[ch][y - 1][x + i_size - t_KSIZE];
+                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = BUFFER[ch*(t_KSIZE-1)*i_size + (y-1)*i_size + (x+i_size-t_KSIZE)];
+            }
+        }
+    }
+
+// Start Convolution
+    dType_Reg yVal, xVal;
+    if (t_STRIDE == 2) {
+        x_looper = y_looper = o_size * 2;
+    } else {
+        x_looper = y_looper = o_size;
+    }
+
+for_y_n:
+	#pragma nounroll
+    for (dType_Reg y = 0; y < y_looper; y++) {
+    	y_com = y;
+    for_x_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < x_looper; x++) {
+        	x_com = x;
+    	compute_loop_channel_n:
+			#pragma nounroll
+        	for (dType_Reg oc = 0; oc < o_c_size; oc++) {
+        		bias = BIAS[oc];
+        		weight_zp = WEIGHTZP[oc];
+        		dType_16t mul_res;
+			    dType_Reg val_out = 0;
+
+			    int count = 0;
+
+			win_i_n:
+				#pragma unroll
+			    for (int i = -HALF_SIZE; i <= HALF_SIZE; i++) {
+			    win_j_n:
+					#pragma unroll
+			        for (int j = -HALF_SIZE; j <= HALF_SIZE; j++) {
+		                if (0 <= (y+i) && (y+i) < i_size && 0 <= (x+j) && (x+j) < i_size) {
+		                    // dType_8t actInp = window[oc][i + HALF_SIZE][j + HALF_SIZE] - input_zp;
+		                    dType_8t actInp = WINDOW[oc*t_KSIZE*t_KSIZE + (i + HALF_SIZE)*t_KSIZE + (j + HALF_SIZE)] - input_zp;
+            				dType_8t actWeight = WEIGHT[(i + HALF_SIZE) * t_KSIZE + (j + HALF_SIZE)] - weight_zp;
+            				mul_res = actInp * actWeight;
+		                    val_out += mul_res;
+		                }
+		            }
+			    }
+
+        		t_ACCUMULATE_TYPE out_i32;
+        		dType_Reg scaled_bias;
+        		dType_16t bias_calib = bias - bias_zp;
+
+        		if (NSHIFTBIAS[oc] >= 0) {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> NSHIFTBIAS[oc];
+        		} else {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> -NSHIFTBIAS[oc];
+        		}
+        		out_i32 = (val_out + scaled_bias);
+        		out_i32 = out_i32 * IMULTOUT[oc];
+        		out_i32 = (out_i32 >> NSHIFTOUT[oc]) + output_zp;
+        		OUT_8BIT[oc] = (t_ACCUMULATE_TYPE)(MAX(0,MIN(out_i32,255)));
+
+        		if (t_STRIDE == 2) {
+        			if (!(y_com % 2) && !(x_com % 2)) {
+        				*STR_OUT = OUT_8BIT[oc];
+        			}
+        		} else {
+        			*STR_OUT = OUT_8BIT[oc];
+        		}
+        	}
+		Data_movement_loop:
+			#pragma nounroll
+		    for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+		    shift_win_y:
+				#pragma unroll
+		        for (dType_8u y = 0; y < t_KSIZE; y++) {
+		        shift_win_x:
+					#pragma unroll
+		            for (dType_8u x = 0; x < t_KSIZE - 1; x++) {
+		                // WINDOW[ch][y][x] = WINDOW[ch][y][x + 1];
+		                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (x+1)];
+		            }
+		        }
+		        // WINDOW[ch][0][t_KSIZE - 1] = BUFFER[ch][0][x];
+		        WINDOW[ch*t_KSIZE*t_KSIZE + 0*t_KSIZE + (t_KSIZE-1)] = BUFFER[ch*(t_KSIZE-1)*i_size + 0*i_size + x];
+		    update_idx1:
+				#pragma unroll
+		        for (int y = 1; y < t_KSIZE - 1; y++) {
+		            // WINDOW[ch][y][t_KSIZE - 1] = BUFFER[ch][y - 1][x] = BUFFER[ch][y][x];
+		            int winidx = ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (t_KSIZE-1);
+		            int buffidx1 = ch*(t_KSIZE-1)*i_size + (y-1)*i_size + x;
+		            int buffidx2 = ch*(t_KSIZE-1)*i_size + y*i_size + x;
+		            WINDOW[winidx] = BUFFER[buffidx1] = BUFFER[buffidx2];
+		        }
+
+		        dType_8u val_in = 0;
+		        if (read_count < i_size * i_size * i_c_size) {
+		            val_in = *STR_IN;
+		            read_count++;
+		        }
+		        // WINDOW[ch][t_KSIZE - 1][t_KSIZE - 1] = BUFFER[ch][t_KSIZE - 2][x] = val_in;
+		        int winidx = ch*t_KSIZE*t_KSIZE + (t_KSIZE-1)*t_KSIZE + (t_KSIZE-1);
+		        int buffidx = ch*(t_KSIZE-1)*i_size + (t_KSIZE-2)*i_size + x;
+		        WINDOW[winidx] = BUFFER[buffidx] = val_in;
+		    }
+		}
+	}
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/Makefile
--- gem5/benchmarks/mobilenetv2/hw/source/body/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,13 @@
+LLVM_PATH = $(WORKING_DIR)/llvm-project/install/bin
+CLUSTER = body
+LL = top.ll Residual.ll PWConv0.ll DWConv.ll PWConv1.ll
+
+# .PHONY clean build
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../../ir/$(CLUSTER)
+	mv $^ ../../ir/$(CLUSTER)/
+clean:
+	rm -f ../../ir/$(CLUSTER)/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/PWConv0.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/PWConv0.c
--- gem5/benchmarks/mobilenetv2/hw/source/body/PWConv0.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/PWConv0.c	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,80 @@
+#include "body_defines.h"
+
+#define t_MAX_INPUT_CHANNEL		PW0_IN_CH_MAX
+#define t_MAX_OUTPUT_CHANNEL	PW0_OUT_CH_MAX
+#define t_CORE_SIZE				PW1_CORE_SIZE
+#define t_ACCUMULATE_TYPE		dType_Reg
+#define t_OUTPUT_TYPE			dType_8u
+
+void PWConv0(uint64_t o_size, uint64_t i_size,
+             uint64_t o_c_size, uint64_t i_c_size,
+             uint64_t bias_zp, uint64_t input_zp, uint64_t output_z) {
+	volatile dType_8u * 	inFifo 			= (dType_8u *)(body_ResidualOut);
+    volatile dType_8u * 	outFifo 		= (dType_8u *)(body_PWConv0Out);
+    volatile dType_8u * 	weights 		= (dType_8u *)(body_PWConv0Weights); // dType_8u[t_MAX_OUTPUT_CHANNEL][t_MAX_INPUT_CHANNEL]
+    volatile dType_8u * 	iMult_bias_acc 	= (dType_8u *)(body_PW0IMultBias);
+    volatile dType_8t * 	nShift_bias_acc = (dType_8t *)(body_PW0NShiftBias);
+    volatile dType_8u * 	iMult_output 	= (dType_8u *)(body_PW0IMultOut);
+    volatile dType_8u * 	nShift_output 	= (dType_8u *)(body_PW0NShiftOut);
+    volatile dType_8u * 	weight_zp 		= (dType_8u *)(body_PW0WeightZP);
+    volatile dType_8u * 	biases_local 	= (dType_8u *)(body_PW0Bias);
+    volatile dType_8u * 	localFeature 	= (dType_8u *)(body_PWConv0LocalFeats); // dType_8u[t_MAX_INPUT_CHANNEL]
+
+pw_convYaxis:
+    #pragma nounroll
+    for (int y = 0; y < o_size; y++) {
+    pw_convXaxis:
+        #pragma nounroll
+        for (int x = 0; x < o_size; x++) {
+        rd_buff_loop_img:
+            #pragma nounroll
+            for (int i = 0; i < t_MAX_INPUT_CHANNEL; i++) {
+                if (i < i_c_size) {
+                    localFeature[i] = *inFifo;
+                } else {
+                    localFeature[i] = input_zp;
+                }
+            }
+        convOutchan:
+            #pragma nounroll
+            for (int oc = 0; oc < o_c_size; oc++) {
+                dType_8u bias = biases_local[oc];
+                dType_Reg sum = 0;
+                // Holds temporary accumulator values
+                dType_32u weight_idx_offset = oc * i_c_size;
+                dType_8u weight_zp_local = weight_zp[oc];
+            // Runs over filter window
+            convInchan_perCore:
+                #pragma nounroll
+                for (dType_16u i = 0; i < (t_MAX_INPUT_CHANNEL / t_CORE_SIZE); i++) {
+                ADDER_TREE_LOOP:
+                    #pragma unroll
+                    for (dType_16u j = 0; j < t_CORE_SIZE; j++) {
+                        dType_Reg input = i * t_CORE_SIZE + j;
+                        dType_16t input_recalib = localFeature[input] - input_zp;
+                        dType_8t k_weight = weights[oc*t_MAX_INPUT_CHANNEL + input] - weight_zp_local;
+                        dType_16t weighted_input = input_recalib * k_weight;
+                        sum = sum + weighted_input;
+                    }
+                }
+                dType_Reg scaled_bias;
+                dType_8t bias_calib = bias - bias_zp;
+
+                dType_16t weighted_bias = bias_calib * iMult_bias_acc[oc];
+
+                if (nShift_bias_acc[oc] >= 0) {
+                    scaled_bias = (weighted_bias) >> nShift_bias_acc[oc];
+                } else {
+                    scaled_bias = (weighted_bias) << -nShift_bias_acc[oc];
+                }
+                dType_Reg biased_input = (sum + scaled_bias);
+                t_ACCUMULATE_TYPE out_i32;
+                dType_16t signed_imul = iMult_output[oc];
+                t_ACCUMULATE_TYPE scaled_output = biased_input * signed_imul;
+                out_i32 = (scaled_output >> nShift_output[oc]) + output_z;
+                t_OUTPUT_TYPE out_nBit = (t_OUTPUT_TYPE)(MAX(0,MIN(out_i32,255)));
+                *outFifo = out_nBit;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/PWConv1.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/PWConv1.c
--- gem5/benchmarks/mobilenetv2/hw/source/body/PWConv1.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/PWConv1.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,88 @@
+#include "body_defines.h"
+
+#define t_MAX_INPUT_CHANNEL		PW1_IN_CH_MAX
+#define t_MAX_OUTPUT_CHANNEL	PW1_OUT_CH_MAX
+#define t_CORE_SIZE				PW1_CORE_SIZE
+#define t_ACCUMULATE_TYPE		dType_Reg
+#define t_OUTPUT_TYPE			dType_8u
+
+void PWConv1(uint64_t o_size, uint64_t i_size,
+             uint64_t o_c_size, uint64_t i_c_size,
+             uint64_t bias_zp, uint64_t input_zp, uint64_t output_zp) {
+                 
+	volatile dType_8u * 	inFifo 			= (dType_8u *)(body_DWConvOut);
+    volatile dType_8u * 	outFifo 		= (dType_8u *)(BODY_STREAM_DMA0_Stream);
+    volatile dType_8u * 	weights 		= (dType_8u *)(body_PWConv1Weights); // dType_8u[t_MAX_OUTPUT_CHANNEL][t_MAX_INPUT_CHANNEL]
+    volatile dType_8u * 	iMult_bias_acc 	= (dType_8u *)(body_PW1IMultBias);
+    volatile dType_8t * 	nShift_bias_acc = (dType_8t *)(body_PW1NShiftBias);
+    volatile dType_8u * 	iMult_output 	= (dType_8u *)(body_PW1IMultOut);
+    volatile dType_8u * 	nShift_output 	= (dType_8u *)(body_PW1NShiftOut);
+    volatile dType_8u * 	weight_zp 		= (dType_8u *)(body_PW1WeightZP);
+    volatile dType_8u * 	biases_local 	= (dType_8u *)(body_PW1Bias);
+    volatile dType_8u * 	localFeature 	= (dType_8u *)(body_PWConv1LocalFeats);
+
+    // Checks that Sam hates™
+	// if(o_size != PW1_0_O_SIZE) return;
+    // if(i_size != PW1_0_I_SIZE) return;
+    // if(o_c_size != PW1_0_OC_SIZE) return;
+    // if(i_c_size != PW1_0_IC_SIZE) return;
+    
+pw_convYaxis:
+    #pragma nounroll
+    for (int y = 0; y < o_size; y++) {
+    pw_convXaxis:
+        #pragma nounroll
+        for (int x = 0; x < o_size; x++) {
+        rd_buff_loop_img:
+            #pragma nounroll
+            for (int i = 0; i < t_MAX_INPUT_CHANNEL; i++) {
+                if (i < i_c_size) {
+                    localFeature[i] = *inFifo;
+                } else {
+                    localFeature[i] = input_zp;
+                }
+            }
+        convOutchan:
+            #pragma nounroll
+            for (int oc = 0; oc < o_c_size; oc++) {
+                dType_8u bias = biases_local[oc];
+                dType_Reg sum = 0;
+                // Holds temporary accumulator values
+                dType_32u weight_idx_offset = oc * i_c_size;
+                dType_8u weight_zp_local = weight_zp[oc];
+            // Runs over filter window
+            convInchan_perCore:
+                #pragma nounroll
+                for (dType_16u i = 0; i < (t_MAX_INPUT_CHANNEL / t_CORE_SIZE); i++) {
+                ADDER_TREE_LOOP:
+                    #pragma unroll
+                    for (dType_16u j = 0; j < t_CORE_SIZE; j++) {
+                        dType_Reg input = i * t_CORE_SIZE + j;
+                        dType_16t input_recalib = localFeature[input] - input_zp;
+                        dType_8t k_weight = weights[oc*t_MAX_INPUT_CHANNEL + input] - weight_zp_local;
+                        dType_16t weighted_input = input_recalib * k_weight;
+                        sum = sum + weighted_input;
+                    }
+                }
+
+                dType_Reg scaled_bias;
+                dType_8t bias_calib = bias - bias_zp;
+
+                dType_16t weighted_bias = bias_calib * iMult_bias_acc[oc];
+
+                if (nShift_bias_acc[oc] >= 0) {
+                    scaled_bias = (weighted_bias) >> nShift_bias_acc[oc];
+                } else {
+                    scaled_bias = (weighted_bias) << -nShift_bias_acc[oc];
+                }
+                dType_Reg biased_input = (sum + scaled_bias);
+                t_ACCUMULATE_TYPE out_i32;
+                dType_16t signed_imul = iMult_output[oc];
+                t_ACCUMULATE_TYPE scaled_output = biased_input * signed_imul;
+                out_i32 = (scaled_output >> nShift_output[oc]) + output_zp;
+                t_OUTPUT_TYPE out_nBit = (t_OUTPUT_TYPE)(MAX(0,MIN(out_i32,255)));
+                *outFifo =out_nBit;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/Residual.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/Residual.c
--- gem5/benchmarks/mobilenetv2/hw/source/body/Residual.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/Residual.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,23 @@
+#include "body_defines.h"
+
+void Residual(uint64_t enable, uint64_t length) {
+	volatile dType_8u * streamIn0 = (dType_8u *)BODY_STREAM_DMA0_Stream;
+	volatile dType_8u * streamIn1 = (dType_8u *)BODY_STREAM_DMA1_Stream;
+	volatile dType_8u * streamOut = (dType_8u *)body_ResidualOut;
+	
+	// Checks that Sam hates™
+	// if(enable != RES_0_ENABLE) return;
+	// if(length != PW0_0_I_SIZE * PW0_0_I_SIZE * PW0_0_IC_SIZE) return;
+	
+	if (enable == 0) {
+		#pragma nounroll
+		for(int i=0; i < length; i++) {
+			*streamOut = *streamIn0;
+		}
+	} else {
+		#pragma nounroll
+		for(int i=0; i < length; i++) {
+			*streamOut = *streamIn0 + *streamIn1;
+		}
+	}
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/body/top.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/top.c
--- gem5/benchmarks/mobilenetv2/hw/source/body/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/body/top.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,747 @@
+#include "body_defines.h"
+
+void top(uint64_t feat_rd_addr,
+		 uint64_t res_rd_addr, uint64_t feat_wr_addr,
+		 uint64_t pw0_weights, uint64_t pw0_quant,
+		 uint64_t dw0_weights, uint64_t dw0_quant,
+		 uint64_t pw1_weights, uint64_t pw1_quant,
+		 uint64_t stage) {
+
+	uint32_t InputSize;
+	uint32_t OutputSize;
+	uint8_t  resEnable;
+
+	//Initialize Accelerators
+	// Residual Parameters
+	volatile uint8_t	* ResFlags		= (uint8_t	*)(BODY_RESIDUAL);
+	volatile uint64_t	* ResEnable		= (uint64_t	*)(BODY_RESIDUAL+1);
+	volatile uint64_t	* ResLength		= (uint64_t *)(BODY_RESIDUAL+9);
+	// Pointwise 0 Parameters
+	volatile uint8_t	* PW0Flags 		= (uint8_t	*)(BODY_PWCONV0);
+	volatile uint64_t	* PW0OSize 		= (uint64_t *)(BODY_PWCONV0+1);
+	volatile uint64_t	* PW0ISize 		= (uint64_t	*)(BODY_PWCONV0+9);
+	volatile uint64_t	* PW0OCSize 	= (uint64_t	*)(BODY_PWCONV0+17);
+	volatile uint64_t	* PW0ICSize 	= (uint64_t	*)(BODY_PWCONV0+25);
+	volatile uint64_t	* PW0BiasZP 	= (uint64_t	*)(BODY_PWCONV0+33);
+	volatile uint64_t	* PW0InputZP 	= (uint64_t	*)(BODY_PWCONV0+41);
+	volatile uint64_t	* PW0OutputZP 	= (uint64_t	*)(BODY_PWCONV0+49);
+	// Depthwise Parameters
+	volatile uint8_t	* DW0Flags 		= (uint8_t	*)(BODY_DWCONV);
+	volatile uint64_t	* DW0OSize 		= (uint64_t	*)(BODY_DWCONV+1);
+	volatile uint64_t	* DW0ISize 		= (uint64_t	*)(BODY_DWCONV+9);
+	volatile uint64_t	* DW0OCSize 	= (uint64_t	*)(BODY_DWCONV+17);
+	volatile uint64_t	* DW0ICSize 	= (uint64_t	*)(BODY_DWCONV+25);
+	volatile uint64_t	* DW0Stride 	= (uint64_t	*)(BODY_DWCONV+33);
+	volatile uint64_t	* DW0BiasZP 	= (uint64_t	*)(BODY_DWCONV+41);
+	volatile uint64_t	* DW0InputZP 	= (uint64_t	*)(BODY_DWCONV+49);
+	volatile uint64_t	* DW0OutputZP 	= (uint64_t	*)(BODY_DWCONV+57);
+	// Pointwise 1 Parameters
+	volatile uint8_t	* PW1Flags 		= (uint8_t	*)(BODY_PWCONV1);
+	volatile uint64_t	* PW1OSize 		= (uint64_t	*)(BODY_PWCONV1+1);
+	volatile uint64_t	* PW1ISize 		= (uint64_t	*)(BODY_PWCONV1+9);
+	volatile uint64_t	* PW1OCSize 	= (uint64_t	*)(BODY_PWCONV1+17);
+	volatile uint64_t	* PW1ICSize 	= (uint64_t	*)(BODY_PWCONV1+25);	
+	volatile uint64_t	* PW1BiasZP 	= (uint64_t	*)(BODY_PWCONV1+33);
+	volatile uint64_t	* PW1InputZP 	= (uint64_t	*)(BODY_PWCONV1+41);
+	volatile uint64_t	* PW1OutputZP 	= (uint64_t	*)(BODY_PWCONV1+49);
+
+	//Initialize DMAs
+	//StreamDma0
+	volatile uint8_t  * StrDma0Flags			= (uint8_t  *)(BODY_STREAM_DMA0_Flags);
+	volatile uint64_t * StrDma0RdAddr			= (uint64_t *)(BODY_STREAM_DMA0_RdAddr);
+	volatile uint64_t * StrDma0WrAddr			= (uint64_t *)(BODY_STREAM_DMA0_WrAddr);
+	volatile uint32_t * StrDma0RdFrameSize		= (uint32_t *)(BODY_STREAM_DMA0_RdFrameSize);
+	volatile uint8_t  * StrDma0NumRdFrames		= (uint8_t  *)(BODY_STREAM_DMA0_NumRdFrames);
+	volatile uint8_t  * StrDma0RdFrameBuffSize	= (uint8_t  *)(BODY_STREAM_DMA0_RdFrameBufSize);
+	volatile uint32_t * StrDma0WrFrameSize		= (uint32_t *)(BODY_STREAM_DMA0_WrFrameSize);
+	volatile uint8_t  * StrDma0NumWrFrames		= (uint8_t  *)(BODY_STREAM_DMA0_NumWrFrames);
+	volatile uint8_t  * StrDma0WrFrameBuffSize	= (uint8_t  *)(BODY_STREAM_DMA0_WrFrameBufSize);
+	//StreamDma1
+	volatile uint8_t  * StrDma1Flags			= (uint8_t  *)(BODY_STREAM_DMA1_Flags);
+	volatile uint64_t * StrDma1RdAddr			= (uint64_t *)(BODY_STREAM_DMA1_RdAddr);
+	volatile uint64_t * StrDma1WrAddr			= (uint64_t *)(BODY_STREAM_DMA1_WrAddr);
+	volatile uint32_t * StrDma1RdFrameSize		= (uint32_t *)(BODY_STREAM_DMA1_RdFrameSize);
+	volatile uint8_t  * StrDma1NumRdFrames		= (uint8_t  *)(BODY_STREAM_DMA1_NumRdFrames);
+	volatile uint8_t  * StrDma1RdFrameBuffSize	= (uint8_t  *)(BODY_STREAM_DMA1_RdFrameBufSize);
+	volatile uint32_t * StrDma1WrFrameSize		= (uint32_t *)(BODY_STREAM_DMA1_WrFrameSize);
+	volatile uint8_t  * StrDma1NumWrFrames		= (uint8_t  *)(BODY_STREAM_DMA1_NumWrFrames);
+	volatile uint8_t  * StrDma1WrFrameBuffSize	= (uint8_t  *)(BODY_STREAM_DMA1_WrFrameBufSize);
+	//MemDma
+	volatile uint8_t  * MemDmaFlags				= (uint8_t  *)(BODY_DMA_Flags);
+	volatile uint64_t * MemDmaRdAddr			= (uint64_t *)(BODY_DMA_RdAddr);
+	volatile uint64_t * MemDmaWrAddr			= (uint64_t *)(BODY_DMA_WrAddr);
+	volatile uint32_t * MemDmaCopyLen			= (uint32_t *)(BODY_DMA_CopyLen);
+
+switch(stage) {
+		case 1:
+			InputSize    = PW0_0_I_SIZE * PW0_0_I_SIZE * PW0_0_IC_SIZE;
+			OutputSize   = PW1_0_O_SIZE * PW1_0_O_SIZE * PW1_0_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_0_ENABLE;
+			*PW0OSize    = PW0_0_O_SIZE;
+			*PW0ISize    = PW0_0_I_SIZE;
+			*PW0ICSize   = PW0_0_IC_SIZE;
+			*PW0OCSize   = PW0_0_OC_SIZE;
+			*PW0BiasZP   = PW0_0_BIAS_ZP;
+			*PW0InputZP  = PW0_0_IN_ZP;
+			*PW0OutputZP = PW0_0_OUT_ZP;
+			*DW0OSize    = DW0_0_O_SIZE;
+			*DW0ISize    = DW0_0_I_SIZE;
+			*DW0ICSize   = DW0_0_IC_SIZE;
+			*DW0OCSize   = DW0_0_OC_SIZE;
+			*DW0Stride   = DW0_0_STRIDE;
+			*DW0BiasZP   = DW0_0_BIAS_ZP;
+			*DW0InputZP  = DW0_0_IN_ZP;
+			*DW0OutputZP = DW0_0_OUT_ZP;
+			*PW1OSize    = PW1_0_O_SIZE;
+			*PW1ISize    = PW1_0_I_SIZE;
+			*PW1ICSize   = PW1_0_IC_SIZE;
+			*PW1OCSize   = PW1_0_OC_SIZE;
+			*PW1BiasZP   = PW1_0_BIAS_ZP;
+			*PW1InputZP  = PW1_0_IN_ZP;
+			*PW1OutputZP = PW1_0_OUT_ZP;
+			
+			break;
+		case 2:
+			InputSize    = PW0_1_I_SIZE * PW0_1_I_SIZE * PW0_1_IC_SIZE;
+			OutputSize   = PW1_1_O_SIZE * PW1_1_O_SIZE * PW1_1_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_1_ENABLE;
+			*PW0OSize    = PW0_1_O_SIZE;
+			*PW0ISize    = PW0_1_I_SIZE;
+			*PW0ICSize   = PW0_1_IC_SIZE;
+			*PW0OCSize   = PW0_1_OC_SIZE;
+			*PW0BiasZP   = PW0_1_BIAS_ZP;
+			*PW0InputZP  = PW0_1_IN_ZP;
+			*PW0OutputZP = PW0_1_OUT_ZP;
+			*DW0OSize    = DW0_1_O_SIZE;
+			*DW0ISize    = DW0_1_I_SIZE;
+			*DW0ICSize   = DW0_1_IC_SIZE;
+			*DW0OCSize   = DW0_1_OC_SIZE;
+			*DW0Stride   = DW0_1_STRIDE;
+			*DW0BiasZP   = DW0_1_BIAS_ZP;
+			*DW0InputZP  = DW0_1_IN_ZP;
+			*DW0OutputZP = DW0_1_OUT_ZP;
+			*PW1OSize    = PW1_1_O_SIZE;
+			*PW1ISize    = PW1_1_I_SIZE;
+			*PW1ICSize   = PW1_1_IC_SIZE;
+			*PW1OCSize   = PW1_1_OC_SIZE;
+			*PW1BiasZP   = PW1_1_BIAS_ZP;
+			*PW1InputZP  = PW1_1_IN_ZP;
+			*PW1OutputZP = PW1_1_OUT_ZP;
+			break;
+		case 3:
+			InputSize    = PW0_2_I_SIZE * PW0_2_I_SIZE * PW0_2_IC_SIZE;
+			OutputSize   = PW1_2_O_SIZE * PW1_2_O_SIZE * PW1_2_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_2_ENABLE;
+			*PW0OSize    = PW0_2_O_SIZE;
+			*PW0ISize    = PW0_2_I_SIZE;
+			*PW0ICSize   = PW0_2_IC_SIZE;
+			*PW0OCSize   = PW0_2_OC_SIZE;
+			*PW0BiasZP   = PW0_2_BIAS_ZP;
+			*PW0InputZP  = PW0_2_IN_ZP;
+			*PW0OutputZP = PW0_2_OUT_ZP;
+			*DW0OSize    = DW0_2_O_SIZE;
+			*DW0ISize    = DW0_2_I_SIZE;
+			*DW0ICSize   = DW0_2_IC_SIZE;
+			*DW0OCSize   = DW0_2_OC_SIZE;
+			*DW0Stride   = DW0_2_STRIDE;
+			*DW0BiasZP   = DW0_2_BIAS_ZP;
+			*DW0InputZP  = DW0_2_IN_ZP;
+			*DW0OutputZP = DW0_2_OUT_ZP;
+			*PW1OSize    = PW1_2_O_SIZE;
+			*PW1ISize    = PW1_2_I_SIZE;
+			*PW1ICSize   = PW1_2_IC_SIZE;
+			*PW1OCSize   = PW1_2_OC_SIZE;
+			*PW1BiasZP   = PW1_2_BIAS_ZP;
+			*PW1InputZP  = PW1_2_IN_ZP;
+			*PW1OutputZP = PW1_2_OUT_ZP;
+			break;
+		case 4:
+			InputSize    = PW0_3_I_SIZE * PW0_3_I_SIZE * PW0_3_IC_SIZE;
+			OutputSize   = PW1_3_O_SIZE * PW1_3_O_SIZE * PW1_3_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_3_ENABLE;
+			*PW0OSize    = PW0_3_O_SIZE;
+			*PW0ISize    = PW0_3_I_SIZE;
+			*PW0ICSize   = PW0_3_IC_SIZE;
+			*PW0OCSize   = PW0_3_OC_SIZE;
+			*PW0BiasZP   = PW0_3_BIAS_ZP;
+			*PW0InputZP  = PW0_3_IN_ZP;
+			*PW0OutputZP = PW0_3_OUT_ZP;
+			*DW0OSize    = DW0_3_O_SIZE;
+			*DW0ISize    = DW0_3_I_SIZE;
+			*DW0ICSize   = DW0_3_IC_SIZE;
+			*DW0OCSize   = DW0_3_OC_SIZE;
+			*DW0Stride   = DW0_3_STRIDE;
+			*DW0BiasZP   = DW0_3_BIAS_ZP;
+			*DW0InputZP  = DW0_3_IN_ZP;
+			*DW0OutputZP = DW0_3_OUT_ZP;
+			*PW1OSize    = PW1_3_O_SIZE;
+			*PW1ISize    = PW1_3_I_SIZE;
+			*PW1ICSize   = PW1_3_IC_SIZE;
+			*PW1OCSize   = PW1_3_OC_SIZE;
+			*PW1BiasZP   = PW1_3_BIAS_ZP;
+			*PW1InputZP  = PW1_3_IN_ZP;
+			*PW1OutputZP = PW1_3_OUT_ZP;
+			break;
+		case 5:
+			InputSize    = PW0_4_I_SIZE * PW0_4_I_SIZE * PW0_4_IC_SIZE;
+			OutputSize   = PW1_4_O_SIZE * PW1_4_O_SIZE * PW1_4_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_4_ENABLE;
+			*PW0OSize    = PW0_4_O_SIZE;
+			*PW0ISize    = PW0_4_I_SIZE;
+			*PW0ICSize   = PW0_4_IC_SIZE;
+			*PW0OCSize   = PW0_4_OC_SIZE;
+			*PW0BiasZP   = PW0_4_BIAS_ZP;
+			*PW0InputZP  = PW0_4_IN_ZP;
+			*PW0OutputZP = PW0_4_OUT_ZP;
+			*DW0OSize    = DW0_4_O_SIZE;
+			*DW0ISize    = DW0_4_I_SIZE;
+			*DW0ICSize   = DW0_4_IC_SIZE;
+			*DW0OCSize   = DW0_4_OC_SIZE;
+			*DW0Stride   = DW0_4_STRIDE;
+			*DW0BiasZP   = DW0_4_BIAS_ZP;
+			*DW0InputZP  = DW0_4_IN_ZP;
+			*DW0OutputZP = DW0_4_OUT_ZP;
+			*PW1OSize    = PW1_4_O_SIZE;
+			*PW1ISize    = PW1_4_I_SIZE;
+			*PW1ICSize   = PW1_4_IC_SIZE;
+			*PW1OCSize   = PW1_4_OC_SIZE;
+			*PW1BiasZP   = PW1_4_BIAS_ZP;
+			*PW1InputZP  = PW1_4_IN_ZP;
+			*PW1OutputZP = PW1_4_OUT_ZP;
+			break;
+		case 6:
+			InputSize    = PW0_5_I_SIZE * PW0_5_I_SIZE * PW0_5_IC_SIZE;
+			OutputSize   = PW1_5_O_SIZE * PW1_5_O_SIZE * PW1_5_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_5_ENABLE;
+			*PW0OSize    = PW0_5_O_SIZE;
+			*PW0ISize    = PW0_5_I_SIZE;
+			*PW0ICSize   = PW0_5_IC_SIZE;
+			*PW0OCSize   = PW0_5_OC_SIZE;
+			*PW0BiasZP   = PW0_5_BIAS_ZP;
+			*PW0InputZP  = PW0_5_IN_ZP;
+			*PW0OutputZP = PW0_5_OUT_ZP;
+			*DW0OSize    = DW0_5_O_SIZE;
+			*DW0ISize    = DW0_5_I_SIZE;
+			*DW0ICSize   = DW0_5_IC_SIZE;
+			*DW0OCSize   = DW0_5_OC_SIZE;
+			*DW0Stride   = DW0_5_STRIDE;
+			*DW0BiasZP   = DW0_5_BIAS_ZP;
+			*DW0InputZP  = DW0_5_IN_ZP;
+			*DW0OutputZP = DW0_5_OUT_ZP;
+			*PW1OSize    = PW1_5_O_SIZE;
+			*PW1ISize    = PW1_5_I_SIZE;
+			*PW1ICSize   = PW1_5_IC_SIZE;
+			*PW1OCSize   = PW1_5_OC_SIZE;
+			*PW1BiasZP   = PW1_5_BIAS_ZP;
+			*PW1InputZP  = PW1_5_IN_ZP;
+			*PW1OutputZP = PW1_5_OUT_ZP;
+			break;
+		case 7:
+			InputSize    = PW0_6_I_SIZE * PW0_6_I_SIZE * PW0_6_IC_SIZE;
+			OutputSize   = PW1_6_O_SIZE * PW1_6_O_SIZE * PW1_6_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_6_ENABLE;
+			*PW0OSize    = PW0_6_O_SIZE;
+			*PW0ISize    = PW0_6_I_SIZE;
+			*PW0ICSize   = PW0_6_IC_SIZE;
+			*PW0OCSize   = PW0_6_OC_SIZE;
+			*PW0BiasZP   = PW0_6_BIAS_ZP;
+			*PW0InputZP  = PW0_6_IN_ZP;
+			*PW0OutputZP = PW0_6_OUT_ZP;
+			*DW0OSize    = DW0_6_O_SIZE;
+			*DW0ISize    = DW0_6_I_SIZE;
+			*DW0ICSize   = DW0_6_IC_SIZE;
+			*DW0OCSize   = DW0_6_OC_SIZE;
+			*DW0Stride   = DW0_6_STRIDE;
+			*DW0BiasZP   = DW0_6_BIAS_ZP;
+			*DW0InputZP  = DW0_6_IN_ZP;
+			*DW0OutputZP = DW0_6_OUT_ZP;
+			*PW1OSize    = PW1_6_O_SIZE;
+			*PW1ISize    = PW1_6_I_SIZE;
+			*PW1ICSize   = PW1_6_IC_SIZE;
+			*PW1OCSize   = PW1_6_OC_SIZE;
+			*PW1BiasZP   = PW1_6_BIAS_ZP;
+			*PW1InputZP  = PW1_6_IN_ZP;
+			*PW1OutputZP = PW1_6_OUT_ZP;
+			break;
+		case 8:
+			InputSize    = PW0_7_I_SIZE * PW0_7_I_SIZE * PW0_7_IC_SIZE;
+			OutputSize   = PW1_7_O_SIZE * PW1_7_O_SIZE * PW1_7_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_7_ENABLE;
+			*PW0OSize    = PW0_7_O_SIZE;
+			*PW0ISize    = PW0_7_I_SIZE;
+			*PW0ICSize   = PW0_7_IC_SIZE;
+			*PW0OCSize   = PW0_7_OC_SIZE;
+			*PW0BiasZP   = PW0_7_BIAS_ZP;
+			*PW0InputZP  = PW0_7_IN_ZP;
+			*PW0OutputZP = PW0_7_OUT_ZP;
+			*DW0OSize    = DW0_7_O_SIZE;
+			*DW0ISize    = DW0_7_I_SIZE;
+			*DW0ICSize   = DW0_7_IC_SIZE;
+			*DW0OCSize   = DW0_7_OC_SIZE;
+			*DW0Stride   = DW0_7_STRIDE;
+			*DW0BiasZP   = DW0_7_BIAS_ZP;
+			*DW0InputZP  = DW0_7_IN_ZP;
+			*DW0OutputZP = DW0_7_OUT_ZP;
+			*PW1OSize    = PW1_7_O_SIZE;
+			*PW1ISize    = PW1_7_I_SIZE;
+			*PW1ICSize   = PW1_7_IC_SIZE;
+			*PW1OCSize   = PW1_7_OC_SIZE;
+			*PW1BiasZP   = PW1_7_BIAS_ZP;
+			*PW1InputZP  = PW1_7_IN_ZP;
+			*PW1OutputZP = PW1_7_OUT_ZP;
+			break;
+		case 9:
+			InputSize    = PW0_8_I_SIZE * PW0_8_I_SIZE * PW0_8_IC_SIZE;
+			OutputSize   = PW1_8_O_SIZE * PW1_8_O_SIZE * PW1_8_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_8_ENABLE;
+			*PW0OSize    = PW0_8_O_SIZE;
+			*PW0ISize    = PW0_8_I_SIZE;
+			*PW0ICSize   = PW0_8_IC_SIZE;
+			*PW0OCSize   = PW0_8_OC_SIZE;
+			*PW0BiasZP   = PW0_8_BIAS_ZP;
+			*PW0InputZP  = PW0_8_IN_ZP;
+			*PW0OutputZP = PW0_8_OUT_ZP;
+			*DW0OSize    = DW0_8_O_SIZE;
+			*DW0ISize    = DW0_8_I_SIZE;
+			*DW0ICSize   = DW0_8_IC_SIZE;
+			*DW0OCSize   = DW0_8_OC_SIZE;
+			*DW0Stride   = DW0_8_STRIDE;
+			*DW0BiasZP   = DW0_8_BIAS_ZP;
+			*DW0InputZP  = DW0_8_IN_ZP;
+			*DW0OutputZP = DW0_8_OUT_ZP;
+			*PW1OSize    = PW1_8_O_SIZE;
+			*PW1ISize    = PW1_8_I_SIZE;
+			*PW1ICSize   = PW1_8_IC_SIZE;
+			*PW1OCSize   = PW1_8_OC_SIZE;
+			*PW1BiasZP   = PW1_8_BIAS_ZP;
+			*PW1InputZP  = PW1_8_IN_ZP;
+			*PW1OutputZP = PW1_8_OUT_ZP;
+			break;
+		case 10:
+			InputSize    = PW0_9_I_SIZE * PW0_9_I_SIZE * PW0_9_IC_SIZE;
+			OutputSize   = PW1_9_O_SIZE * PW1_9_O_SIZE * PW1_9_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_9_ENABLE;
+			*PW0OSize    = PW0_9_O_SIZE;
+			*PW0ISize    = PW0_9_I_SIZE;
+			*PW0ICSize   = PW0_9_IC_SIZE;
+			*PW0OCSize   = PW0_9_OC_SIZE;
+			*PW0BiasZP   = PW0_9_BIAS_ZP;
+			*PW0InputZP  = PW0_9_IN_ZP;
+			*PW0OutputZP = PW0_9_OUT_ZP;
+			*DW0OSize    = DW0_9_O_SIZE;
+			*DW0ISize    = DW0_9_I_SIZE;
+			*DW0ICSize   = DW0_9_IC_SIZE;
+			*DW0OCSize   = DW0_9_OC_SIZE;
+			*DW0Stride   = DW0_9_STRIDE;
+			*DW0BiasZP   = DW0_9_BIAS_ZP;
+			*DW0InputZP  = DW0_9_IN_ZP;
+			*DW0OutputZP = DW0_9_OUT_ZP;
+			*PW1OSize    = PW1_9_O_SIZE;
+			*PW1ISize    = PW1_9_I_SIZE;
+			*PW1ICSize   = PW1_9_IC_SIZE;
+			*PW1OCSize   = PW1_9_OC_SIZE;
+			*PW1BiasZP   = PW1_9_BIAS_ZP;
+			*PW1InputZP  = PW1_9_IN_ZP;
+			*PW1OutputZP = PW1_9_OUT_ZP;
+			break;
+		case 11:
+			InputSize    = PW0_10_I_SIZE * PW0_10_I_SIZE * PW0_10_IC_SIZE;
+			OutputSize   = PW1_10_O_SIZE * PW1_10_O_SIZE * PW1_10_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_10_ENABLE;
+			*PW0OSize    = PW0_10_O_SIZE;
+			*PW0ISize    = PW0_10_I_SIZE;
+			*PW0ICSize   = PW0_10_IC_SIZE;
+			*PW0OCSize   = PW0_10_OC_SIZE;
+			*PW0BiasZP   = PW0_10_BIAS_ZP;
+			*PW0InputZP  = PW0_10_IN_ZP;
+			*PW0OutputZP = PW0_10_OUT_ZP;
+			*DW0OSize    = DW0_10_O_SIZE;
+			*DW0ISize    = DW0_10_I_SIZE;
+			*DW0ICSize   = DW0_10_IC_SIZE;
+			*DW0OCSize   = DW0_10_OC_SIZE;
+			*DW0Stride   = DW0_10_STRIDE;
+			*DW0BiasZP   = DW0_10_BIAS_ZP;
+			*DW0InputZP  = DW0_10_IN_ZP;
+			*DW0OutputZP = DW0_10_OUT_ZP;
+			*PW1OSize    = PW1_10_O_SIZE;
+			*PW1ISize    = PW1_10_I_SIZE;
+			*PW1ICSize   = PW1_10_IC_SIZE;
+			*PW1OCSize   = PW1_10_OC_SIZE;
+			*PW1BiasZP   = PW1_10_BIAS_ZP;
+			*PW1InputZP  = PW1_10_IN_ZP;
+			*PW1OutputZP = PW1_10_OUT_ZP;
+			break;
+		case 12:
+			InputSize    = PW0_11_I_SIZE * PW0_11_I_SIZE * PW0_11_IC_SIZE;
+			OutputSize   = PW1_11_O_SIZE * PW1_11_O_SIZE * PW1_11_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_11_ENABLE;
+			*PW0OSize    = PW0_11_O_SIZE;
+			*PW0ISize    = PW0_11_I_SIZE;
+			*PW0ICSize   = PW0_11_IC_SIZE;
+			*PW0OCSize   = PW0_11_OC_SIZE;
+			*PW0BiasZP   = PW0_11_BIAS_ZP;
+			*PW0InputZP  = PW0_11_IN_ZP;
+			*PW0OutputZP = PW0_11_OUT_ZP;
+			*DW0OSize    = DW0_11_O_SIZE;
+			*DW0ISize    = DW0_11_I_SIZE;
+			*DW0ICSize   = DW0_11_IC_SIZE;
+			*DW0OCSize   = DW0_11_OC_SIZE;
+			*DW0Stride   = DW0_11_STRIDE;
+			*DW0BiasZP   = DW0_11_BIAS_ZP;
+			*DW0InputZP  = DW0_11_IN_ZP;
+			*DW0OutputZP = DW0_11_OUT_ZP;
+			*PW1OSize    = PW1_11_O_SIZE;
+			*PW1ISize    = PW1_11_I_SIZE;
+			*PW1ICSize   = PW1_11_IC_SIZE;
+			*PW1OCSize   = PW1_11_OC_SIZE;
+			*PW1BiasZP   = PW1_11_BIAS_ZP;
+			*PW1InputZP  = PW1_11_IN_ZP;
+			*PW1OutputZP = PW1_11_OUT_ZP;
+			break;
+		case 13:
+			InputSize    = PW0_12_I_SIZE * PW0_12_I_SIZE * PW0_12_IC_SIZE;
+			OutputSize   = PW1_12_O_SIZE * PW1_12_O_SIZE * PW1_12_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_12_ENABLE;
+			*PW0OSize    = PW0_12_O_SIZE;
+			*PW0ISize    = PW0_12_I_SIZE;
+			*PW0ICSize   = PW0_12_IC_SIZE;
+			*PW0OCSize   = PW0_12_OC_SIZE;
+			*PW0BiasZP   = PW0_12_BIAS_ZP;
+			*PW0InputZP  = PW0_12_IN_ZP;
+			*PW0OutputZP = PW0_12_OUT_ZP;
+			*DW0OSize    = DW0_12_O_SIZE;
+			*DW0ISize    = DW0_12_I_SIZE;
+			*DW0ICSize   = DW0_12_IC_SIZE;
+			*DW0OCSize   = DW0_12_OC_SIZE;
+			*DW0Stride   = DW0_12_STRIDE;
+			*DW0BiasZP   = DW0_12_BIAS_ZP;
+			*DW0InputZP  = DW0_12_IN_ZP;
+			*DW0OutputZP = DW0_12_OUT_ZP;
+			*PW1OSize    = PW1_12_O_SIZE;
+			*PW1ISize    = PW1_12_I_SIZE;
+			*PW1ICSize   = PW1_12_IC_SIZE;
+			*PW1OCSize   = PW1_12_OC_SIZE;
+			*PW1BiasZP   = PW1_12_BIAS_ZP;
+			*PW1InputZP  = PW1_12_IN_ZP;
+			*PW1OutputZP = PW1_12_OUT_ZP;
+			break;
+		case 14:
+			InputSize    = PW0_13_I_SIZE * PW0_13_I_SIZE * PW0_13_IC_SIZE;
+			OutputSize   = PW1_13_O_SIZE * PW1_13_O_SIZE * PW1_13_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_13_ENABLE;
+			*PW0OSize    = PW0_13_O_SIZE;
+			*PW0ISize    = PW0_13_I_SIZE;
+			*PW0ICSize   = PW0_13_IC_SIZE;
+			*PW0OCSize   = PW0_13_OC_SIZE;
+			*PW0BiasZP   = PW0_13_BIAS_ZP;
+			*PW0InputZP  = PW0_13_IN_ZP;
+			*PW0OutputZP = PW0_13_OUT_ZP;
+			*DW0OSize    = DW0_13_O_SIZE;
+			*DW0ISize    = DW0_13_I_SIZE;
+			*DW0ICSize   = DW0_13_IC_SIZE;
+			*DW0OCSize   = DW0_13_OC_SIZE;
+			*DW0Stride   = DW0_13_STRIDE;
+			*DW0BiasZP   = DW0_13_BIAS_ZP;
+			*DW0InputZP  = DW0_13_IN_ZP;
+			*DW0OutputZP = DW0_13_OUT_ZP;
+			*PW1OSize    = PW1_13_O_SIZE;
+			*PW1ISize    = PW1_13_I_SIZE;
+			*PW1ICSize   = PW1_13_IC_SIZE;
+			*PW1OCSize   = PW1_13_OC_SIZE;
+			*PW1BiasZP   = PW1_13_BIAS_ZP;
+			*PW1InputZP  = PW1_13_IN_ZP;
+			*PW1OutputZP = PW1_13_OUT_ZP;
+			break;
+		case 15:
+			InputSize    = PW0_14_I_SIZE * PW0_14_I_SIZE * PW0_14_IC_SIZE;
+			OutputSize   = PW1_14_O_SIZE * PW1_14_O_SIZE * PW1_14_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_14_ENABLE;
+			*PW0OSize    = PW0_14_O_SIZE;
+			*PW0ISize    = PW0_14_I_SIZE;
+			*PW0ICSize   = PW0_14_IC_SIZE;
+			*PW0OCSize   = PW0_14_OC_SIZE;
+			*PW0BiasZP   = PW0_14_BIAS_ZP;
+			*PW0InputZP  = PW0_14_IN_ZP;
+			*PW0OutputZP = PW0_14_OUT_ZP;
+			*DW0OSize    = DW0_14_O_SIZE;
+			*DW0ISize    = DW0_14_I_SIZE;
+			*DW0ICSize   = DW0_14_IC_SIZE;
+			*DW0OCSize   = DW0_14_OC_SIZE;
+			*DW0Stride   = DW0_14_STRIDE;
+			*DW0BiasZP   = DW0_14_BIAS_ZP;
+			*DW0InputZP  = DW0_14_IN_ZP;
+			*DW0OutputZP = DW0_14_OUT_ZP;
+			*PW1OSize    = PW1_14_O_SIZE;
+			*PW1ISize    = PW1_14_I_SIZE;
+			*PW1ICSize   = PW1_14_IC_SIZE;
+			*PW1OCSize   = PW1_14_OC_SIZE;
+			*PW1BiasZP   = PW1_14_BIAS_ZP;
+			*PW1InputZP  = PW1_14_IN_ZP;
+			*PW1OutputZP = PW1_14_OUT_ZP;
+			break;
+		case 16:
+			InputSize    = PW0_15_I_SIZE * PW0_15_I_SIZE * PW0_15_IC_SIZE;
+			OutputSize   = PW1_15_O_SIZE * PW1_15_O_SIZE * PW1_15_OC_SIZE;
+			*ResLength   = InputSize;
+			resEnable    = RES_15_ENABLE;
+			*PW0OSize    = PW0_15_O_SIZE;
+			*PW0ISize    = PW0_15_I_SIZE;
+			*PW0ICSize   = PW0_15_IC_SIZE;
+			*PW0OCSize   = PW0_15_OC_SIZE;
+			*PW0BiasZP   = PW0_15_BIAS_ZP;
+			*PW0InputZP  = PW0_15_IN_ZP;
+			*PW0OutputZP = PW0_15_OUT_ZP;
+			*DW0OSize    = DW0_15_O_SIZE;
+			*DW0ISize    = DW0_15_I_SIZE;
+			*DW0ICSize   = DW0_15_IC_SIZE;
+			*DW0OCSize   = DW0_15_OC_SIZE;
+			*DW0Stride   = DW0_15_STRIDE;
+			*DW0BiasZP   = DW0_15_BIAS_ZP;
+			*DW0InputZP  = DW0_15_IN_ZP;
+			*DW0OutputZP = DW0_15_OUT_ZP;
+			*PW1OSize    = PW1_15_O_SIZE;
+			*PW1ISize    = PW1_15_I_SIZE;
+			*PW1ICSize   = PW1_15_IC_SIZE;
+			*PW1OCSize   = PW1_15_OC_SIZE;
+			*PW1BiasZP   = PW1_15_BIAS_ZP;
+			*PW1InputZP  = PW1_15_IN_ZP;
+			*PW1OutputZP = PW1_15_OUT_ZP;
+			break;
+		default:
+			InputSize    = 0;
+			OutputSize   = 0;
+			*ResLength   = 0;
+			resEnable    = 0;
+			*PW0OSize    = 0;
+			*PW0ISize    = 0;
+			*PW0ICSize   = 0;
+			*PW0OCSize   = 0;
+			*PW0BiasZP   = 0;
+			*PW0InputZP  = 0;
+			*PW0OutputZP = 0;
+			*DW0OSize    = 0;
+			*DW0ISize    = 0;
+			*DW0ICSize   = 0;
+			*DW0OCSize   = 0;
+			*DW0Stride   = 0;
+			*DW0BiasZP   = 0;
+			*DW0InputZP  = 0;
+			*DW0OutputZP = 0;
+			*PW1OSize    = 0;
+			*PW1ISize    = 0;
+			*PW1ICSize   = 0;
+			*PW1OCSize   = 0;
+			*PW1BiasZP   = 0;
+			*PW1InputZP  = 0;
+			*PW1OutputZP = 0;
+			return;
+	}
+
+	//Initialize DRAM-Stream DMA
+	*StrDma0RdAddr = feat_rd_addr;
+	*StrDma0RdFrameSize = InputSize;
+	*StrDma0NumRdFrames = 1;
+	*StrDma0RdFrameBuffSize = 1;
+	//Initialize Stream-DRAM DMA
+	*StrDma0WrAddr = feat_wr_addr;
+	*StrDma0WrFrameSize = OutputSize;
+	*StrDma0NumWrFrames = 1;
+	*StrDma0WrFrameBuffSize = 1;
+	//Initialize Res DMA
+	*StrDma1RdAddr = res_rd_addr;
+	*StrDma1RdFrameSize = InputSize;
+	*StrDma1NumRdFrames = 1;
+	*StrDma1RdFrameBuffSize = 1;
+
+	//Start Stream DMAs
+	*StrDma0Flags = STR_DMA_INIT_RD | STR_DMA_INIT_WR;
+	if (resEnable == 1) *StrDma1Flags = STR_DMA_INIT_RD;
+
+	//Transfer Weights and Quantization Params from DRAM to SPMs
+	
+	//Start PW0 Conv Weight Xfer
+	*MemDmaRdAddr  = pw0_weights;
+	*MemDmaWrAddr  = body_PWConv0Weights;
+	*MemDmaCopyLen = PW0WeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	// Start PW0 Conv QParams Xfer
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*0;
+	*MemDmaWrAddr  = body_PW0Bias;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*1;
+	*MemDmaWrAddr  = body_PW0IMultBias;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*2;
+	*MemDmaWrAddr  = body_PW0NShiftBias;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*3;
+	*MemDmaWrAddr  = body_PW0IMultOut;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*4;
+	*MemDmaWrAddr  = body_PW0NShiftOut;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	*MemDmaRdAddr  = pw0_quant + PW0QParamSize*5;
+	*MemDmaWrAddr  = body_PW0WeightZP;
+	*MemDmaCopyLen = PW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	//Start DW0 Conv Weight Xfer
+	*MemDmaRdAddr  = dw0_weights;
+	*MemDmaWrAddr  = body_DWConvWeights;
+	*MemDmaCopyLen = DW0WeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	// Start DW0 Conv QParams Xfer
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*0;
+	*MemDmaWrAddr  = body_DWBias;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*1;
+	*MemDmaWrAddr  = body_DWIMultBias;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*2;
+	*MemDmaWrAddr  = body_DWNShiftBias;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*3;
+	*MemDmaWrAddr  = body_DWIMultOut;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*4;
+	*MemDmaWrAddr  = body_DWNShiftOut;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	*MemDmaRdAddr  = dw0_quant + DW0QParamSize*5;
+	*MemDmaWrAddr  = body_DWWeightZP;
+	*MemDmaCopyLen = DW0QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start PW1 Conv Weight Xfer
+	*MemDmaRdAddr  = pw1_weights;
+	*MemDmaWrAddr  = body_PWConv1Weights;
+	*MemDmaCopyLen = PW1WeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	// Start PW1 Conv QParams Xfer
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*0;
+	*MemDmaWrAddr  = body_PW1Bias;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*1;
+	*MemDmaWrAddr  = body_PW1IMultBias;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*2;
+	*MemDmaWrAddr  = body_PW1NShiftBias;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*3;
+	*MemDmaWrAddr  = body_PW1IMultOut;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*4;
+	*MemDmaWrAddr  = body_PW1NShiftOut;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw1_quant + PW1QParamSize*5;
+	*MemDmaWrAddr  = body_PW1WeightZP;
+	*MemDmaCopyLen = PW1QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start Res
+	*ResEnable = resEnable;
+	*ResFlags = 0x01;
+	//Start PW Conv 0
+	*PW0Flags = 0x01;
+	// Start DW Conv
+	*DW0Flags = 0x01;
+	//Start PW Conv 1
+	*PW1Flags = 0x01;
+	
+	// Wait for all accelerators to finish before sending interrupt to CPU
+	// while ((*StrDma0Flags & STR_DMA_WR_RUNNING) == STR_DMA_WR_RUNNING);
+	while (*PW0Flags != 0x4);
+	while (*DW0Flags != 0x4);
+	while (*PW1Flags != 0x4);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/classifier/classifier_defines.h gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/classifier_defines.h
--- gem5/benchmarks/mobilenetv2/hw/source/classifier/classifier_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/classifier_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,15 @@
+#include "../common/support.h"
+#include "../../../classifier_hw_defines.h"
+#include "../../../network_params.h"
+/***********************************************************
+ * Computation Defines
+ ***********************************************************/
+
+// Linear (Fully Connected)
+#define INPUT_SIZE		__LINEAR_DEPTH_SIZE__
+#define OUTPUT_SIZE		__LINEAR_ROW_SIZE__
+#define WeightSize		INPUT_SIZE*OUTPUT_SIZE
+#define BIAS_ZP			0
+#define INPUT_ZP		0
+#define OUTPUT_ZP		0
+#define QParamSize		1000
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/classifier/Linear.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/Linear.c
--- gem5/benchmarks/mobilenetv2/hw/source/classifier/Linear.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/Linear.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,58 @@
+#include "classifier_defines.h"
+
+#define t_ROW_SIZE		OUTPUT_SIZE
+#define t_DEPTH_SIZE	INPUT_SIZE
+
+void linear() {
+	volatile dType_8u * input           = (dType_8u *)classifier_LinearFeats;
+	volatile dType_8u * weight          = (dType_8u *)classifier_LinearWeights; //dType_8u[t_ROW_SIZE][t_DEPTH_SIZE]
+	volatile dType_8u * weight_zp       = (dType_8u *)classifier_PWWeightZP;
+	volatile dType_8u * biases          = (dType_8u *)classifier_PWBias;
+	volatile dType_8u * iMult_bias_acc  = (dType_8u *)classifier_PWIMultBias;
+    volatile dType_8t * nShift_bias_acc = (dType_8t *)classifier_PWNShiftBias;
+    volatile dType_8u * iMult_output    = (dType_8u *)classifier_PWIMultOut;
+    volatile dType_8u * nShift_output   = (dType_8u *)classifier_PWNShiftOut;
+    volatile dType_8u * res             = (dType_8u *)CLASSIFIER_STREAM_DMA0_Stream;
+    volatile dType_8u * sum             = (dType_8u *)classifier_LinearSum;
+
+	dType_8u   bias_zp   = BIAS_ZP;
+	dType_8u   input_zp  = INPUT_ZP;
+	dType_8u   output_zp = OUTPUT_ZP;
+
+LINEAR_CORE_COMP_ROW_LOOP_SUM:
+    #pragma nounroll
+    for (int i = 0; i < t_ROW_SIZE; i++) {
+        sum[i] = 0;
+        dType_8u w_zp = weight_zp[i];
+    LINEAR_CORE_COMP_DEPTH_LOOP:
+    	#pragma unroll 320
+        for (int j = 0; j < t_DEPTH_SIZE; j++) {
+            dType_Reg k_weight = weight[i*t_DEPTH_SIZE + j] - w_zp;
+            dType_Reg input_recalib = input[j] - input_zp;
+            dType_Reg term = k_weight * input_recalib;
+            sum[i] += term;
+        }
+    }
+LINEAR_CORE_COMP_ROW_LOOP:
+    #pragma nounroll
+    for (int i = 0; i < t_ROW_SIZE; i++) {
+        dType_8u out_8bit;
+        dType_32t out_i32;
+
+        dType_Reg bias_calib = biases[i] - bias_zp;
+        dType_Reg upScaled_Bias = (bias_calib * iMult_bias_acc[i]);
+        dType_Reg scaled_bias;
+
+        if (nShift_bias_acc[i] >= 0) {
+            scaled_bias = upScaled_Bias >> nShift_bias_acc[i];
+        } else {
+            scaled_bias = upScaled_Bias << -nShift_bias_acc[i];
+        }
+        out_i32 = (sum[i] + scaled_bias);
+        dType_Reg downScaled_out = (out_i32 * iMult_output[i]);
+
+        out_i32 = (downScaled_out >> nShift_output[i]) + output_zp;
+        out_8bit = out_i32;
+        *res = out_8bit;
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/classifier/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/Makefile
--- gem5/benchmarks/mobilenetv2/hw/source/classifier/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,13 @@
+LLVM_PATH = $(WORKING_DIR)/llvm-project/install/bin
+CLUSTER = classifier
+LL = top.ll Linear.ll
+
+# .PHONY clean build
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../../ir/$(CLUSTER)
+	mv $^ ../../ir/$(CLUSTER)/
+clean:
+	rm -f ../../ir/$(CLUSTER)/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/classifier/top.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/top.c
--- gem5/benchmarks/mobilenetv2/hw/source/classifier/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/classifier/top.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,101 @@
+#include "classifier_defines.h"
+
+void top(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+		 uint64_t weights, uint64_t quant) {
+
+	// //Initialize Accelerators
+	volatile uint8_t * Linear 		= (uint8_t *)CLASSIFIER_LINEAR;
+
+	//Initialize DMAs
+	//StreamDma
+	volatile uint8_t  * StrDmaFlags				= (uint8_t  *)(CLASSIFIER_STREAM_DMA0_Flags);
+	volatile uint64_t * StrDmaRdAddr			= (uint64_t *)(CLASSIFIER_STREAM_DMA0_RdAddr);
+	volatile uint64_t * StrDmaWrAddr			= (uint64_t *)(CLASSIFIER_STREAM_DMA0_WrAddr);
+	volatile uint32_t * StrDmaRdFrameSize		= (uint32_t *)(CLASSIFIER_STREAM_DMA0_RdFrameSize);
+	volatile uint8_t  * StrDmaNumRdFrames		= (uint8_t  *)(CLASSIFIER_STREAM_DMA0_NumRdFrames);
+	volatile uint8_t  * StrDmaRdFrameBuffSize	= (uint8_t  *)(CLASSIFIER_STREAM_DMA0_RdFrameBufSize);
+	volatile uint32_t * StrDmaWrFrameSize		= (uint32_t *)(CLASSIFIER_STREAM_DMA0_WrFrameSize);
+	volatile uint8_t  * StrDmaNumWrFrames		= (uint8_t  *)(CLASSIFIER_STREAM_DMA0_NumWrFrames);
+	volatile uint8_t  * StrDmaWrFrameBuffSize	= (uint8_t  *)(CLASSIFIER_STREAM_DMA0_WrFrameBufSize);
+	//MemDma
+	volatile uint8_t  * MemDmaFlags				= (uint8_t  *)(CLASSIFIER_DMA_Flags);
+	volatile uint64_t * MemDmaRdAddr			= (uint64_t *)(CLASSIFIER_DMA_RdAddr);
+	volatile uint64_t * MemDmaWrAddr			= (uint64_t *)(CLASSIFIER_DMA_WrAddr);
+	volatile uint32_t * MemDmaCopyLen			= (uint32_t *)(CLASSIFIER_DMA_CopyLen);
+
+	//Initialize Stream-DRAM DMA
+	*StrDmaWrAddr = feat_wr_addr;
+	*StrDmaWrFrameSize = OUTPUT_SIZE;
+	*StrDmaNumWrFrames = 1;
+	*StrDmaWrFrameBuffSize = 1;
+	//Start Stream DMA
+	*StrDmaFlags = STR_DMA_INIT_WR;
+
+	//Transfer Features, Weights, and Quantization Params from DRAM to SPMs
+	
+	//Start Feature Xfer
+	*MemDmaRdAddr  = feat_rd_addr;
+	*MemDmaWrAddr  = classifier_LinearFeats;
+	*MemDmaCopyLen = INPUT_SIZE;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	//Start Weight Xfer
+	*MemDmaRdAddr  = weights;
+	*MemDmaWrAddr  = classifier_LinearWeights;
+	*MemDmaCopyLen = WeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+	
+	// Start PW Conv QParams Xfer
+	*MemDmaRdAddr  = quant + QParamSize*0;
+	*MemDmaWrAddr  = classifier_PWBias;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = quant + QParamSize*1;
+	*MemDmaWrAddr  = classifier_PWIMultBias;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = quant + QParamSize*2;
+	*MemDmaWrAddr  = classifier_PWNShiftBias;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = quant + QParamSize*3;
+	*MemDmaWrAddr  = classifier_PWIMultOut;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = quant + QParamSize*4;
+	*MemDmaWrAddr  = classifier_PWNShiftOut;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = quant + QParamSize*5;
+	*MemDmaWrAddr  = classifier_PWWeightZP;
+	*MemDmaCopyLen = QParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start Linear
+	*Linear = 0x01;
+
+	//Wait for all accelerators to finish before sending interrupt to CPU
+	while ((*StrDmaFlags & STR_DMA_WR_RUNNING) == STR_DMA_WR_RUNNING);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/common/support.h gem5-SALAM/benchmarks/mobilenetv2/hw/source/common/support.h
--- gem5/benchmarks/mobilenetv2/hw/source/common/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/common/support.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,27 @@
+#ifndef __MNV2_SUPPORT_H__
+#define __MNV2_SUPPORT_H__
+#include "inttypes.h"
+
+#define dType_Reg		int32_t
+#define dType_8u		uint8_t
+#define dType_16u		uint16_t
+#define dType_32u		uint32_t
+#define dType_8t		int8_t
+#define dType_16t		int16_t
+#define dType_32t		int32_t
+
+#define MAX(a,b)		((a > b) ? a : b)
+#define MIN(a,b)		((a < b) ? a : b)
+
+#define STR_DMA_INIT_RD	0x01
+#define STR_DMA_INIT_WR 0x02
+#define STR_DMA_RD_INTR	0x10
+#define STR_DMA_WR_INTR	0x20
+#define STR_DMA_RD_RUNNING 0x04
+#define STR_DMA_WR_RUNNING 0x08
+
+
+#define MEM_DMA_INIT	0x01
+#define MEM_DMA_INTR	0x04
+
+#endif //__MNV2_SUPPORT_H__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/DWConv.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/DWConv.c
--- gem5/benchmarks/mobilenetv2/hw/source/head/DWConv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/DWConv.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,190 @@
+#include "head_defines.h"
+#define IN_SIZE					DW_IN_SIZE
+#define OUT_SIZE				DW_OUT_SIZE
+#define IN_CH					DW_IN_CH
+#define OUT_CH					DW_OUT_CH
+#define STRIDE					DW_STRIDE
+#define BIAS_ZP					DW_BIAS_ZP
+#define INPUT_ZP 				DW_INPUT_ZP
+#define OUTPUT_ZP 				DW_OUTPUT_ZP
+
+#define t_MAX_INPUT_CHANNEL     IN_CH
+#define t_MAX_OUTPUT_CHANNEL    OUT_CH
+#define t_MAX_INPUT_SIZE        IN_SIZE
+#define t_ACCUMULATE_TYPE       dType_Reg
+#define t_KSIZE                 KERNEL_SIZE
+
+void DWConv() {
+	volatile dType_8u * STR_IN  	= (dType_8u *)(head_NormalConvOut);
+	volatile dType_8u * BUFFER 		= (dType_8u *)(head_DWConvQBuffer);
+	volatile dType_8u * WINDOW 		= (dType_8u *)(head_DWConvWindow);
+	volatile dType_8u * WEIGHT		= (dType_8u *)(head_DWConvWeights);
+	volatile dType_8u * BIAS		= (dType_8u *)(head_DWConvBias);
+	volatile dType_8u * IMULTBIAS	= (dType_8u *)(head_DWConvIMultBias);
+	volatile dType_8t * NSHIFTBIAS	= (dType_8t *)(head_DWConvNShiftBias);
+	volatile dType_8u * IMULTOUT	= (dType_8u *)(head_DWConvIMultOut);
+	volatile dType_8u * NSHIFTOUT	= (dType_8u *)(head_DWConvNShiftOut);
+	volatile dType_8u * WEIGHTZP 	= (dType_8u *)(head_DWConvWeightZP);
+	volatile dType_8u * OUT_8BIT 	= (dType_8u *)(head_DWConvOutBuffer);
+	volatile dType_8u * STR_OUT		= (dType_8u *)(head_DWConvOut);
+
+	dType_Reg	o_size 		= OUT_SIZE;
+    dType_Reg	i_size 		= IN_SIZE;
+    dType_Reg	o_c_size 	= OUT_CH;
+    dType_Reg	i_c_size 	= IN_CH;
+	dType_32u	t_STRIDE 	= STRIDE;
+	dType_8u	bias_zp 	= BIAS_ZP;
+	dType_8u	input_zp 	= INPUT_ZP;
+	dType_8u	output_zp	= OUTPUT_ZP;
+	dType_8u	weight_zp	= 0;
+	dType_8u	bias 		= 0;
+	dType_Reg	y_com 		= 0;
+    dType_Reg	x_com 		= 0;
+    dType_Reg	y_looper 	= 0;
+    dType_Reg	x_looper 	= 0;
+    dType_Reg	read_count 	= (i_size * HALF_SIZE + HALF_SIZE + 1) * i_c_size;
+
+// Warmup
+buf_x1_n:
+	#pragma nounroll
+    for (dType_Reg x = i_size - HALF_SIZE - 1; x < i_size; x++) {
+    itr_channel_x1:
+		#pragma nounroll
+        for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+            // BUFFER[ch][HALF_SIZE - 1][x] = *STR_IN;
+            BUFFER[ch*(t_KSIZE-1)*i_size + (HALF_SIZE-1)*i_size + x] = *STR_IN;
+        }
+    }
+
+buf_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE - 1; y++) {
+    buf_x2_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < i_size; x++) {
+        itr_channel_x2:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // BUFFER[ch][y][x] = *STR_IN;
+                BUFFER[ch*(t_KSIZE-1)*i_size + y*i_size + x] = *STR_IN;
+            }
+        }
+    }
+
+win_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE; y++) {
+    win_x_n:
+		#pragma nounroll
+        for (dType_8u x = HALF_SIZE; x < t_KSIZE; x++) {
+        win_itr_channel:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // WINDOW[ch][y][x] = BUFFER[ch][y - 1][x + i_size - t_KSIZE];
+                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = BUFFER[ch*(t_KSIZE-1)*i_size + (y-1)*i_size + (x+i_size-t_KSIZE)];
+            }
+        }
+    }
+
+// Start Convolution
+    dType_Reg yVal, xVal;
+    if (t_STRIDE == 2) {
+        x_looper = y_looper = o_size * 2;
+    } else {
+        x_looper = y_looper = o_size;
+    }
+
+for_y_n:
+	#pragma nounroll
+    for (dType_Reg y = 0; y < y_looper; y++) {
+    	y_com = y;
+    for_x_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < x_looper; x++) {
+        	x_com = x;
+    	compute_loop_channel_n:
+			#pragma nounroll
+        	for (dType_Reg oc = 0; oc < o_c_size; oc++) {
+        		bias = BIAS[oc];
+        		weight_zp = WEIGHTZP[oc];
+        		dType_16t mul_res;
+			    dType_Reg val_out = 0;
+
+			    int count = 0;
+
+			win_i_n:
+				#pragma unroll
+			    for (int i = -HALF_SIZE; i <= HALF_SIZE; i++) {
+			    win_j_n:
+					#pragma unroll
+			        for (int j = -HALF_SIZE; j <= HALF_SIZE; j++) {
+		                if (0 <= (y+i) && (y+i) < i_size && 0 <= (x+j) && (x+j) < i_size) {
+		                    // dType_8t actInp = window[oc][i + HALF_SIZE][j + HALF_SIZE] - input_zp;
+		                    dType_8t actInp = WINDOW[oc*t_KSIZE*t_KSIZE + (i + HALF_SIZE)*t_KSIZE + (j + HALF_SIZE)] - input_zp;
+            				dType_8t actWeight = WEIGHT[(i + HALF_SIZE) * t_KSIZE + (j + HALF_SIZE)] - weight_zp;
+            				mul_res = actInp * actWeight;
+		                    val_out += mul_res;
+		                }
+		            }
+			    }
+
+        		t_ACCUMULATE_TYPE out_i32;
+        		dType_Reg scaled_bias;
+        		dType_16t bias_calib = bias - bias_zp;
+
+        		if (NSHIFTBIAS[oc] >= 0) {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> NSHIFTBIAS[oc];
+        		} else {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> -NSHIFTBIAS[oc];
+        		}
+        		out_i32 = (val_out + scaled_bias);
+        		out_i32 = out_i32 * IMULTOUT[oc];
+        		out_i32 = (out_i32 >> NSHIFTOUT[oc]) + output_zp;
+        		OUT_8BIT[oc] = (t_ACCUMULATE_TYPE)(MAX(0,MIN(out_i32,255)));
+
+        		if (t_STRIDE == 2) {
+        			if (!(y_com % 2) && !(x_com % 2)) {
+        				*STR_OUT = OUT_8BIT[oc];
+        			}
+        		} else {
+        			*STR_OUT = OUT_8BIT[oc];
+        		}
+        	}
+		Data_movement_loop:
+			#pragma nounroll
+		    for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+		    shift_win_y:
+				#pragma unroll
+		        for (dType_8u y = 0; y < t_KSIZE; y++) {
+		        shift_win_x:
+					#pragma unroll
+		            for (dType_8u x = 0; x < t_KSIZE - 1; x++) {
+		                // WINDOW[ch][y][x] = WINDOW[ch][y][x + 1];
+		                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (x+1)];
+		            }
+		        }
+		        // WINDOW[ch][0][t_KSIZE - 1] = BUFFER[ch][0][x];
+		        WINDOW[ch*t_KSIZE*t_KSIZE + 0*t_KSIZE + (t_KSIZE-1)] = BUFFER[ch*(t_KSIZE-1)*i_size + 0*i_size + x];
+		    update_idx1:
+				#pragma unroll
+		        for (int y = 1; y < t_KSIZE - 1; y++) {
+		            // WINDOW[ch][y][t_KSIZE - 1] = BUFFER[ch][y - 1][x] = BUFFER[ch][y][x];
+		            int winidx = ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (t_KSIZE-1);
+		            int buffidx1 = ch*(t_KSIZE-1)*i_size + (y-1)*i_size + x;
+		            int buffidx2 = ch*(t_KSIZE-1)*i_size + y*i_size + x;
+		            WINDOW[winidx] = BUFFER[buffidx1] = BUFFER[buffidx2];
+		        }
+
+		        dType_8u val_in = 0;
+		        if (read_count < i_size * i_size * i_c_size) {
+		            val_in = *STR_IN;
+		            read_count++;
+		        }
+		        // WINDOW[ch][t_KSIZE - 1][t_KSIZE - 1] = BUFFER[ch][t_KSIZE - 2][x] = val_in;
+		        int winidx = ch*t_KSIZE*t_KSIZE + (t_KSIZE-1)*t_KSIZE + (t_KSIZE-1);
+		        int buffidx = ch*(t_KSIZE-1)*i_size + (t_KSIZE-2)*i_size + x;
+		        WINDOW[winidx] = BUFFER[buffidx] = val_in;
+		    }
+		}
+	}
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/head_defines.h gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/head_defines.h
--- gem5/benchmarks/mobilenetv2/hw/source/head/head_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/head_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,54 @@
+#include "../common/support.h"
+#include "../../../head_hw_defines.h"
+#include "../../../network_params.h"
+/***********************************************************
+ * Computation Defines
+ ***********************************************************/
+#define KERNEL_SIZE		3
+#define HALF_SIZE		(((KERNEL_SIZE)-1) / 2)
+
+// Normal Conv
+#define CONV_IN_SIZE	__FEATURES_0_0__INPUT_SIZE__
+#define CONV_OUT_SIZE	__FEATURES_0_0__OUTPUT_SIZE__
+#define CONV_IN_CH		__FEATURES_0_0__INPUT_CHAN__
+#define CONV_OUT_CH		__FEATURES_0_0__OUTPUT_CHAN__
+#define CONV_STRIDE		__FEATURES_0_0__STRIDE_SIZE__
+#define CONV_BIAS_ZP	0
+#define CONV_INPUT_ZP	0
+#define CONV_OUTPUT_ZP	0
+#define ConvInputSize	CONV_IN_SIZE*CONV_IN_SIZE*CONV_IN_CH
+#define ConvBuffSize	CONV_IN_SIZE*(KERNEL_SIZE-1)*CONV_IN_CH
+#define ConvWindowSize	KERNEL_SIZE*KERNEL_SIZE*CONV_IN_CH
+#define ConvWeightSize	ConvWindowSize*CONV_OUT_CH
+#define ConvQParamSize	CONV_OUT_CH
+
+// DW Conv
+#define DW_IN_SIZE		__FEATURES_1_CONV_0__INPUT_SIZE__
+#define DW_OUT_SIZE		__FEATURES_1_CONV_0__OUTPUT_SIZE__
+#define DW_IN_CH		__FEATURES_1_CONV_0__INPUT_CHAN__
+#define DW_OUT_CH		__FEATURES_1_CONV_0__OUTPUT_CHAN__
+#define DW_STRIDE		__FEATURES_1_CONV_0__STRIDE_SIZE__ 
+#define DW_BIAS_ZP		0
+#define DW_INPUT_ZP		0
+#define DW_OUTPUT_ZP	0
+#define DWBuffSize		DW_IN_SIZE*(KERNEL_SIZE-1)*DW_IN_CH
+#define DWWindowSize	KERNEL_SIZE*KERNEL_SIZE*DW_IN_CH
+#define DWWeightSize	DW_OUT_CH*((KERNEL_SIZE*KERNEL_SIZE)+1)
+#define DWQParamSize	DW_OUT_CH
+
+// PW Conv
+#define PW_IN_SIZE		__FEATURES_1_CONV_2__INPUT_SIZE__
+#define PW_OUT_SIZE		__FEATURES_1_CONV_2__OUTPUT_SIZE__
+#define PW_IN_CH		__FEATURES_1_CONV_2__INPUT_CHAN__
+#define PW_OUT_CH		__FEATURES_1_CONV_2__OUTPUT_CHAN__
+#define PW_CORE_SIZE	24 // Probably need to set this to input channel size, for now that doesn't matter
+#define PW_BIAS_ZP		0
+#define PW_INPUT_ZP		0
+#define PW_OUTPUT_ZP	0
+#define PWWeightSize	PW_OUT_CH*PW_IN_CH
+#define PWQParamSize	PW_OUT_CH
+#define PWOutputSize	PW_OUT_SIZE*PW_OUT_SIZE*PW_OUT_CH
+
+// StreamDMA
+#define INPUT_SIZE		CONV_IN_SIZE*CONV_IN_SIZE*CONV_IN_CH
+#define OUTPUT_SIZE		PW_OUT_SIZE*PW_OUT_SIZE*PW_OUT_CH
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/Makefile
--- gem5/benchmarks/mobilenetv2/hw/source/head/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,13 @@
+LLVM_PATH = $(WORKING_DIR)/llvm-project/install/bin
+CLUSTER = head
+LL = top.ll NormalConv.ll DWConv.ll PWConv.ll
+
+# .PHONY clean build
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../../ir/$(CLUSTER)
+	mv $^ ../../ir/$(CLUSTER)/
+clean:
+	rm -f ../../ir/$(CLUSTER)/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/NormalConv.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/NormalConv.c
--- gem5/benchmarks/mobilenetv2/hw/source/head/NormalConv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/NormalConv.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,189 @@
+#include "head_defines.h"
+#define IN_SIZE		           	CONV_IN_SIZE
+#define OUT_SIZE	           	CONV_OUT_SIZE
+#define IN_CH	          		CONV_IN_CH
+#define OUT_CH	         		CONV_OUT_CH
+#define STRIDE	         		CONV_STRIDE
+#define BIAS_ZP	        		CONV_BIAS_ZP
+#define INPUT_ZP        		CONV_INPUT_ZP
+#define OUTPUT_ZP 		        CONV_OUTPUT_ZP
+
+#define t_MAX_INPUT_CHANNEL     IN_CH
+#define t_MAX_OUTPUT_CHANNEL    OUT_CH
+#define t_MAX_INPUT_SIZE        IN_SIZE
+#define t_ACCUMULATE_TYPE       dType_Reg
+#define t_STRIDE                STRIDE
+#define t_KSIZE                 KERNEL_SIZE
+
+void NormalConv() {
+	volatile dType_8u * STR_IN  	= (dType_8u *)(HEAD_STREAM_DMA0_Stream);
+	volatile dType_8u * BUFFER 		= (dType_8u *)(head_NormalConvQBuffer);
+	volatile dType_8u * WINDOW 		= (dType_8u *)(head_NormalConvWindow);
+	volatile dType_8u * WEIGHT		= (dType_8u *)(head_NormalConvWeights);
+	volatile dType_8u * BIAS		= (dType_8u *)(head_NormalConvBias);
+	volatile dType_8u * IMULTBIAS	= (dType_8u *)(head_NormalConvIMultBias);
+	volatile dType_8t * NSHIFTBIAS	= (dType_8t *)(head_NormalConvNShiftBias);
+	volatile dType_8u * IMULTOUT	= (dType_8u *)(head_NormalConvIMultOut);
+	volatile dType_8u * NSHIFTOUT	= (dType_8u *)(head_NormalConvNShiftOut);
+	volatile dType_8u * WEIGHTZP 	= (dType_8u *)(head_NormalConvWeightZP);
+	volatile dType_8u * STR_OUT		= (dType_8u *)(head_NormalConvOut);
+
+	dType_Reg	o_size 		= OUT_SIZE;
+    dType_Reg	i_size 		= IN_SIZE;
+    dType_Reg	o_c_size 	= OUT_CH;
+    dType_Reg	i_c_size 	= IN_CH;
+	dType_8u	bias_zp 	= BIAS_ZP;
+	dType_8u	input_zp 	= INPUT_ZP;
+	dType_8u	output_zp	= OUTPUT_ZP;
+	dType_8u	weight_zp	= 0;
+	dType_8u	bias 		= 0;
+	dType_Reg	y_com 		= 0;
+    dType_Reg	x_com 		= 0;
+    dType_Reg	y_looper 	= 0;
+    dType_Reg	x_looper 	= 0;
+    dType_Reg	read_count 	= (i_size * HALF_SIZE + HALF_SIZE + 1) * i_c_size;
+
+// Warmup
+buf_x1_n:
+	#pragma nounroll
+    for (dType_Reg x = i_size - HALF_SIZE - 1; x < i_size; x++) {
+    itr_channel_x1:
+		#pragma nounroll
+        for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+            // BUFFER[ch][HALF_SIZE - 1][x] = *STR_IN;
+            BUFFER[ch*(t_KSIZE-1)*i_size + (HALF_SIZE-1)*i_size + x] = *STR_IN;
+        }
+    }
+
+buf_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE - 1; y++) {
+    buf_x2_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < i_size; x++) {
+        itr_channel_x2:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // BUFFER[ch][y][x] = *STR_IN;
+                BUFFER[ch*(t_KSIZE-1)*i_size + y*i_size + x] = *STR_IN;
+            }
+        }
+    }
+
+win_y_n:
+	#pragma nounroll
+    for (dType_8u y = HALF_SIZE; y < t_KSIZE; y++) {
+    win_x_n:
+		#pragma nounroll
+        for (dType_8u x = HALF_SIZE; x < t_KSIZE; x++) {
+        win_itr_channel:
+			#pragma nounroll
+            for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+                // WINDOW[ch][y][x] = BUFFER[ch][y - 1][x + i_size - t_KSIZE];
+                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = BUFFER[ch*(t_KSIZE-1)*i_size + (y-1)*i_size + (x+i_size-t_KSIZE)];
+            }
+        }
+    }
+
+// Start Convolution
+    dType_Reg yVal, xVal;
+    if (t_STRIDE == 2) {
+        x_looper = y_looper = o_size * 2;
+    } else {
+        x_looper = y_looper = o_size;
+    }
+
+for_y_n:
+	#pragma nounroll
+    for (dType_Reg y = 0; y < y_looper; y++) {
+    	y_com = y;
+    for_x_n:
+		#pragma nounroll
+        for (dType_Reg x = 0; x < x_looper; x++) {
+        	x_com = x;
+    	compute_loop_channel_n:
+			#pragma nounroll
+        	for (dType_Reg oc = 0; oc < o_c_size; oc++) {
+        		bias = BIAS[oc];
+        		weight_zp = WEIGHTZP[oc];
+        		dType_16t mul_res;
+			    dType_Reg val_out = 0;
+
+			    int count = 0;
+
+			win_i_n:
+				#pragma unroll
+			    for (int i = -HALF_SIZE; i <= HALF_SIZE; i++) {
+			    win_j_n:
+					#pragma unroll
+			        for (int j = -HALF_SIZE; j <= HALF_SIZE; j++) {
+			        acc_depth_ch:
+						#pragma unroll
+			            for (int ch = 0; ch < i_c_size; ch++, count++) {
+			                if (0 <= (y+i) && (y+i) < i_size && 0 <= (x+j) && (x+j) < i_size) {
+			                    mul_res = (WINDOW[ch*t_KSIZE*t_KSIZE + (i+HALF_SIZE)*t_KSIZE + (j+HALF_SIZE)] - input_zp) * (WEIGHT[count] - weight_zp);
+			                    val_out += mul_res;
+			                }
+			            }
+			        }
+			    }
+
+        		t_ACCUMULATE_TYPE out_i32;
+        		dType_Reg scaled_bias;
+        		dType_16t bias_calib = bias - bias_zp;
+
+        		if (NSHIFTBIAS[oc] >= 0) {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> NSHIFTBIAS[oc];
+        		} else {
+        			scaled_bias = (bias_calib * IMULTBIAS[oc]) >> -NSHIFTBIAS[oc];
+        		}
+        		out_i32 = (val_out + scaled_bias);
+        		out_i32 = out_i32 * IMULTOUT[oc];
+        		out_i32 = (out_i32 >> NSHIFTOUT[oc]) + output_zp;
+        		dType_8u out_8bit = (t_ACCUMULATE_TYPE)(MAX(0,MIN(out_i32,255)));
+
+        		if (t_STRIDE == 2) {
+        			if (!(y_com % 2) && !(x_com % 2)) {
+        				*STR_OUT = out_8bit;
+        			}
+        		} else {
+        			*STR_OUT = out_8bit;
+        		}
+        	}
+		Data_movement_loop:
+			#pragma nounroll
+		    for (dType_Reg ch = 0; ch < i_c_size; ch++) {
+		    shift_win_y:
+				#pragma unroll
+		        for (dType_8u y = 0; y < t_KSIZE; y++) {
+		        shift_win_x:
+					#pragma unroll
+		            for (dType_8u x = 0; x < t_KSIZE - 1; x++) {
+		                // WINDOW[ch][y][x] = WINDOW[ch][y][x + 1];
+		                WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + x] = WINDOW[ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (x+1)];
+		            }
+		        }
+		        // WINDOW[ch][0][t_KSIZE - 1] = BUFFER[ch][0][x];
+		        WINDOW[ch*t_KSIZE*t_KSIZE + 0*t_KSIZE + (t_KSIZE-1)] = BUFFER[ch*(t_KSIZE-1)*i_size + 0*i_size + x];
+		    update_idx1:
+				#pragma unroll
+		        for (int y = 1; y < t_KSIZE - 1; y++) {
+		            // WINDOW[ch][y][t_KSIZE - 1] = BUFFER[ch][y - 1][x] = BUFFER[ch][y][x];
+		            int winidx = ch*t_KSIZE*t_KSIZE + y*t_KSIZE + (t_KSIZE-1);
+		            int buffidx1 = ch*(t_KSIZE-1)*i_size + (y-1)*i_size + x;
+		            int buffidx2 = ch*(t_KSIZE-1)*i_size + y*i_size + x;
+		            WINDOW[winidx] = BUFFER[buffidx1] = BUFFER[buffidx2];
+		        }
+		        dType_8u val_in = 0;
+		        if (read_count < i_size * i_size * i_c_size) {
+		            val_in = *STR_IN;
+		            read_count++;
+		        }
+		        // WINDOW[ch][t_KSIZE - 1][t_KSIZE - 1] = BUFFER[ch][t_KSIZE - 2][x] = val_in;
+		        int winidx = ch*t_KSIZE*t_KSIZE + (t_KSIZE-1)*t_KSIZE + (t_KSIZE-1);
+		        int buffidx = ch*(t_KSIZE-1)*i_size + (t_KSIZE-2)*i_size + x;
+		        WINDOW[winidx] = BUFFER[buffidx] = val_in;
+		    }
+		}
+	}
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/PWConv.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/PWConv.c
--- gem5/benchmarks/mobilenetv2/hw/source/head/PWConv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/PWConv.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,95 @@
+#include "head_defines.h"
+#define IN_SIZE					PW_IN_SIZE
+#define OUT_SIZE				PW_OUT_SIZE
+#define IN_CH					PW_IN_CH
+#define OUT_CH					PW_OUT_CH
+#define CORE_SIZE				PW_CORE_SIZE
+#define STRIDE					PW_STRIDE
+#define BIAS_ZP					PW_BIAS_ZP
+#define INPUT_ZP 				PW_INPUT_ZP
+#define OUTPUT_ZP 				PW_OUTPUT_ZP
+
+#define t_MAX_INPUT_CHANNEL		IN_CH
+#define t_MAX_OUTPUT_CHANNEL	OUT_CH
+#define t_CORE_SIZE				CORE_SIZE
+#define t_ACCUMULATE_TYPE		dType_Reg
+#define t_OUTPUT_TYPE			dType_8u
+
+void PWConv() {
+	volatile dType_8u * 	inFifo 			= (dType_8u *)(head_DWConvOut);
+    volatile dType_8u * 	outFifo 		= (dType_8u *)(HEAD_STREAM_DMA0_Stream);
+    volatile dType_8u * 	weights 		= (dType_8u *)(head_PWConvWeights); // dType_8u[t_MAX_OUTPUT_CHANNEL][t_MAX_INPUT_CHANNEL]
+    volatile dType_8u * 	iMult_bias_acc 	= (dType_8u *)(head_PWConvIMultBias);
+    volatile dType_8t * 	nShift_bias_acc = (dType_8t *)(head_PWConvNShiftBias);
+    volatile dType_8u * 	iMult_output 	= (dType_8u *)(head_PWConvIMultOut);
+    volatile dType_8u * 	nShift_output 	= (dType_8u *)(head_PWConvNShiftOut);
+    volatile dType_8u * 	weight_zp 		= (dType_8u *)(head_PWConvWeightZP);
+    volatile dType_8u * 	biases_local 	= (dType_8u *)(head_PWConvBias);
+    volatile dType_8u * 	localFeature 	= (dType_8u *)(head_PWConvLocalFeats);
+    dType_8u 	bias_zp 		= 0;
+    dType_8u 	input_zp 		= 0;
+    dType_8u 	output_zp 		= 0;
+    dType_Reg 	o_size 			= OUT_SIZE;
+    dType_Reg 	i_size 			= IN_SIZE;
+    dType_Reg 	o_c_size 		= OUT_CH;
+    dType_Reg 	i_c_size		= IN_CH;
+
+pw_convYaxis:
+    #pragma nounroll
+    for (int y = 0; y < o_size; y++) {
+    pw_convXaxis:
+        #pragma nounroll
+        for (int x = 0; x < o_size; x++) {
+        rd_buff_loop_img:
+            #pragma nounroll
+            for (int i = 0; i < t_MAX_INPUT_CHANNEL; i++) {
+                if (i < i_c_size) {
+                    localFeature[i] = *inFifo;
+                } else {
+                    localFeature[i] = input_zp;
+                }
+            }
+        convOutchan:
+            #pragma nounroll
+            for (int oc = 0; oc < o_c_size; oc++) {
+                dType_8u bias = biases_local[oc];
+                dType_Reg sum = 0;
+                // Holds temporary accumulator values
+                dType_32u weight_idx_offset = oc * i_c_size;
+                dType_8u weight_zp_local = weight_zp[oc];
+            // Runs over filter window
+            convInchan_perCore:
+                #pragma unroll
+                for (dType_16u i = 0; i < (t_MAX_INPUT_CHANNEL / t_CORE_SIZE); i++) {
+                ADDER_TREE_LOOP:
+                    #pragma unroll
+                    for (dType_16u j = 0; j < t_CORE_SIZE; j++) {
+                        dType_Reg input = i * t_CORE_SIZE + j;
+                        dType_16t input_recalib = localFeature[input] - input_zp;
+                        dType_8t k_weight = weights[oc*t_MAX_INPUT_CHANNEL + input] - weight_zp_local;
+                        dType_16t weighted_input = input_recalib * k_weight;
+                        sum = sum + weighted_input;
+                    }
+                }
+
+                dType_Reg scaled_bias;
+                dType_8t bias_calib = bias - bias_zp;
+
+                dType_16t weighted_bias = bias_calib * iMult_bias_acc[oc];
+
+                if (nShift_bias_acc[oc] >= 0) {
+                    scaled_bias = (weighted_bias) >> nShift_bias_acc[oc];
+                } else {
+                    scaled_bias = (weighted_bias) << -nShift_bias_acc[oc];
+                }
+                dType_Reg biased_input = (sum + scaled_bias);
+                t_ACCUMULATE_TYPE out_i32;
+                dType_16t signed_imul = iMult_output[oc];
+                t_ACCUMULATE_TYPE scaled_output = biased_input * signed_imul;
+                out_i32 = (scaled_output >> nShift_output[oc]) + output_zp;
+                t_OUTPUT_TYPE out_nBit = (t_OUTPUT_TYPE)(MAX(0,MIN(out_i32,255)));
+                *outFifo = out_nBit;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/head/top.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/top.c
--- gem5/benchmarks/mobilenetv2/hw/source/head/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/head/top.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,207 @@
+#include "head_defines.h"
+
+void top(uint64_t img_rd_addr, uint64_t feat_wr_addr,
+		 uint64_t conv_weights, uint64_t conv_quant,
+		 uint64_t dw_weights, uint64_t dw_quant,
+		 uint64_t pw_weights, uint64_t pw_quant) {
+
+	//Initialize Accelerators
+	volatile uint8_t * NormConv 	= (uint8_t *)HEAD_NORMALCONV;
+	volatile uint8_t * DWConv 		= (uint8_t *)HEAD_DWCONV;
+	volatile uint8_t * PWConv 		= (uint8_t *)HEAD_PWCONV;
+
+	//Initialize DMAs
+	//StreamDma
+	volatile uint8_t  * StrDmaFlags				= (uint8_t  *)(HEAD_STREAM_DMA0_Flags);
+	volatile uint64_t * StrDmaRdAddr			= (uint64_t *)(HEAD_STREAM_DMA0_RdAddr);
+	volatile uint64_t * StrDmaWrAddr			= (uint64_t *)(HEAD_STREAM_DMA0_WrAddr);
+	volatile uint32_t * StrDmaRdFrameSize		= (uint32_t *)(HEAD_STREAM_DMA0_RdFrameSize);
+	volatile uint8_t  * StrDmaNumRdFrames		= (uint8_t  *)(HEAD_STREAM_DMA0_NumRdFrames);
+	volatile uint8_t  * StrDmaRdFrameBuffSize	= (uint8_t  *)(HEAD_STREAM_DMA0_RdFrameBufSize);
+	volatile uint32_t * StrDmaWrFrameSize		= (uint32_t *)(HEAD_STREAM_DMA0_WrFrameSize);
+	volatile uint8_t  * StrDmaNumWrFrames		= (uint8_t  *)(HEAD_STREAM_DMA0_NumWrFrames);
+	volatile uint8_t  * StrDmaWrFrameBuffSize	= (uint8_t  *)(HEAD_STREAM_DMA0_WrFrameBufSize);
+	//MemDma
+	volatile uint8_t  * MemDmaFlags				= (uint8_t  *)(HEAD_DMA_Flags);
+	volatile uint64_t * MemDmaRdAddr			= (uint64_t *)(HEAD_DMA_RdAddr);
+	volatile uint64_t * MemDmaWrAddr			= (uint64_t *)(HEAD_DMA_WrAddr);
+	volatile uint32_t * MemDmaCopyLen			= (uint32_t *)(HEAD_DMA_CopyLen);
+	//Initialize DRAM-Stream DMA
+	*StrDmaRdAddr = img_rd_addr;
+	*StrDmaRdFrameSize = ConvInputSize;
+	*StrDmaNumRdFrames = 1;
+	*StrDmaRdFrameBuffSize = 1;
+	//Initialize Stream-DRAM DMA
+	*StrDmaWrAddr = feat_wr_addr;
+	*StrDmaWrFrameSize = PWOutputSize;
+	*StrDmaNumWrFrames = 1;
+	*StrDmaWrFrameBuffSize = 1;
+	//Start Stream DMAs
+	*StrDmaFlags = STR_DMA_INIT_RD | STR_DMA_INIT_WR;
+
+	//Transfer Weights and Quantization Params from DRAM to SPMs
+	
+	//Start Norm Conv Weight Xfer
+	*MemDmaRdAddr  = conv_weights;
+	*MemDmaWrAddr  = head_NormalConvWeights;
+	*MemDmaCopyLen = ConvWeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	// Start Normal Conv QParams Xfer
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*0;
+	*MemDmaWrAddr  = head_NormalConvBias;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*1;
+	*MemDmaWrAddr  = head_NormalConvIMultBias;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*2;
+	*MemDmaWrAddr  = head_NormalConvNShiftBias;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*3;
+	*MemDmaWrAddr  = head_NormalConvIMultOut;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*4;
+	*MemDmaWrAddr  = head_NormalConvNShiftOut;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = conv_quant + ConvQParamSize*5;
+	*MemDmaWrAddr  = head_NormalConvWeightZP;
+	*MemDmaCopyLen = ConvQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start DW Conv Weight Xfer
+	*MemDmaRdAddr  = dw_weights;
+	*MemDmaWrAddr  = head_DWConvWeights;
+	*MemDmaCopyLen = DWWeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	// Start DW Conv QParams Xfer
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*0;
+	*MemDmaWrAddr  = head_DWConvBias;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*1;
+	*MemDmaWrAddr  = head_DWConvIMultBias;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*2;
+	*MemDmaWrAddr  = head_DWConvNShiftBias;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*3;
+	*MemDmaWrAddr  = head_DWConvIMultOut;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*4;
+	*MemDmaWrAddr  = head_DWConvNShiftOut;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = dw_quant + DWQParamSize*5;
+	*MemDmaWrAddr  = head_DWConvWeightZP;
+	*MemDmaCopyLen = DWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start PW Conv Weight Xfer
+	*MemDmaRdAddr  = pw_weights;
+	*MemDmaWrAddr  = head_PWConvWeights;
+	*MemDmaCopyLen = PWWeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	// Start PW Conv QParams Xfer
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*0;
+	*MemDmaWrAddr  = head_PWConvBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*1;
+	*MemDmaWrAddr  = head_PWConvIMultBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*2;
+	*MemDmaWrAddr  = head_PWConvNShiftBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*3;
+	*MemDmaWrAddr  = head_PWConvIMultOut;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*4;
+	*MemDmaWrAddr  = head_PWConvNShiftOut;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*5;
+	*MemDmaWrAddr  = head_PWConvWeightZP;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	// Start Norm Conv
+	*NormConv = 0x01;
+	//Start DW Conv
+	*DWConv = 0x01;
+	//Start PW Conv
+	*PWConv = 0x01;
+
+	//Wait for all accelerators to finish before sending interrupt to CPU
+	while ((*StrDmaFlags & STR_DMA_WR_RUNNING) == STR_DMA_WR_RUNNING);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/source/Makefile
--- gem5/benchmarks/mobilenetv2/hw/source/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,15 @@
+CLUSTERS=\
+	head \
+	body \
+	tail \
+	classifier
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(CLUSTERS); do $(MAKE) -C $$b; done )
+
+clean:
+	@( for b in $(CLUSTERS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/AvgPool.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/AvgPool.c
--- gem5/benchmarks/mobilenetv2/hw/source/tail/AvgPool.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/AvgPool.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,29 @@
+#include "tail_defines.h"
+
+#define t_ACCUMULATE_TYPE 	dType_16t
+#define t_I_O_CHAN			POOL_CH
+#define t_KERNEL_SIZE		POOL_SIZE
+
+void Avg_Pooling() {
+	dType_8u   iMult_avg  = POOL_IMULT;
+	dType_8t   nShift_avg = POOL_NSHIFT;
+	volatile dType_8u * inBuffer   = (dType_8u *)tail_ReshapeOut;
+	volatile dType_8u * outFifo    = (dType_8u *)TAIL_STREAM_DMA0_Stream;
+
+	AVG_LOOP_OVER_I_CHAN:
+    #pragma nounroll
+    for (dType_32u jdx = 0, hdx = 0; jdx < t_I_O_CHAN; jdx++)
+    {
+        t_ACCUMULATE_TYPE acc = 0;
+    AVG_LOOP_OVER_K_SIZE:
+        #pragma nounroll
+        for (dType_32u idx = 0; idx < t_KERNEL_SIZE * t_KERNEL_SIZE; idx++, hdx++)
+        {
+            acc += inBuffer[hdx];
+        }
+        t_ACCUMULATE_TYPE downScaled_out = (acc * iMult_avg);
+        t_ACCUMULATE_TYPE mul = downScaled_out >> nShift_avg;
+        dType_8u out_8bit = (dType_8u)(MAX(0,MIN(mul,255)));
+        *outFifo = out_8bit;
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/Makefile gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/Makefile
--- gem5/benchmarks/mobilenetv2/hw/source/tail/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,13 @@
+LLVM_PATH = $(WORKING_DIR)/llvm-project/install/bin
+CLUSTER = tail
+LL = top.ll PWConv.ll Reshape.ll AvgPool.ll
+
+# .PHONY clean build
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build: $(LL)
+	mkdir -p ../../ir/$(CLUSTER)
+	mv $^ ../../ir/$(CLUSTER)/
+clean:
+	rm -f ../../ir/$(CLUSTER)/*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/PWConv.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/PWConv.c
--- gem5/benchmarks/mobilenetv2/hw/source/tail/PWConv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/PWConv.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,94 @@
+#include "tail_defines.h"
+#define IN_SIZE					PW_IN_SIZE
+#define OUT_SIZE				PW_OUT_SIZE
+#define IN_CH					PW_IN_CH
+#define OUT_CH					PW_OUT_CH
+#define CORE_SIZE				PW_CORE_SIZE
+#define BIAS_ZP					PW_BIAS_ZP
+#define INPUT_ZP 				PW_INPUT_ZP
+#define OUTPUT_ZP 				PW_OUTPUT_ZP
+
+#define t_MAX_INPUT_CHANNEL		IN_CH
+#define t_MAX_OUTPUT_CHANNEL	OUT_CH
+#define t_CORE_SIZE				CORE_SIZE
+#define t_ACCUMULATE_TYPE		dType_Reg
+#define t_OUTPUT_TYPE			dType_8u
+
+void PWConv() {
+	volatile dType_8u * 	inFifo 			= (dType_8u *)(TAIL_STREAM_DMA0_Stream);
+    volatile dType_8u * 	outFifo 		= (dType_8u *)(tail_PWConvOut);
+    volatile dType_8u * 	weights 		= (dType_8u *)(tail_PWConvWeights); // dType_8u[t_MAX_OUTPUT_CHANNEL][t_MAX_INPUT_CHANNEL]
+    volatile dType_8u * 	iMult_bias_acc 	= (dType_8u *)(tail_PWIMultBias);
+    volatile dType_8t * 	nShift_bias_acc = (dType_8t *)(tail_PWNShiftBias);
+    volatile dType_8u * 	iMult_output 	= (dType_8u *)(tail_PWIMultOut);
+    volatile dType_8u * 	nShift_output 	= (dType_8u *)(tail_PWNShiftOut);
+    volatile dType_8u * 	weight_zp 		= (dType_8u *)(tail_PWWeightZP);
+    volatile dType_8u * 	biases_local 	= (dType_8u *)(tail_PWBias);
+    volatile dType_8u * 	localFeature 	= (dType_8u *)(tail_PWConvLocalFeats);
+    dType_8u 	bias_zp 		= 0;
+    dType_8u 	input_zp 		= 0;
+    dType_8u 	output_zp 		= 0;
+    dType_Reg 	o_size 			= OUT_SIZE;
+    dType_Reg 	i_size 			= IN_SIZE;
+    dType_Reg 	o_c_size 		= OUT_CH;
+    dType_Reg 	i_c_size		= IN_CH;
+
+pw_convYaxis:
+    #pragma nounroll
+    for (int y = 0; y < o_size; y++) {
+    pw_convXaxis:
+        #pragma nounroll
+        for (int x = 0; x < o_size; x++) {
+        rd_buff_loop_img:
+            #pragma nounroll
+            for (int i = 0; i < t_MAX_INPUT_CHANNEL; i++) {
+                if (i < i_c_size) {
+                    localFeature[i] = *inFifo;
+                } else {
+                    localFeature[i] = input_zp;
+                }
+            }
+        convOutchan:
+            #pragma nounroll
+            for (int oc = 0; oc < o_c_size; oc++) {
+                dType_8u bias = biases_local[oc];
+                dType_Reg sum = 0;
+                // Holds temporary accumulator values
+                dType_32u weight_idx_offset = oc * i_c_size;
+                dType_8u weight_zp_local = weight_zp[oc];
+            // Runs over filter window
+            convInchan_perCore:
+                #pragma unroll
+                for (dType_16u i = 0; i < (t_MAX_INPUT_CHANNEL / t_CORE_SIZE); i++) {
+                ADDER_TREE_LOOP:
+                    #pragma unroll
+                    for (dType_16u j = 0; j < t_CORE_SIZE; j++) {
+                        dType_Reg input = i * t_CORE_SIZE + j;
+                        dType_16t input_recalib = localFeature[input] - input_zp;
+                        dType_8t k_weight = weights[oc*t_MAX_INPUT_CHANNEL + input] - weight_zp_local;
+                        dType_16t weighted_input = input_recalib * k_weight;
+                        sum = sum + weighted_input;
+                    }
+                }
+
+                dType_Reg scaled_bias;
+                dType_8t bias_calib = bias - bias_zp;
+
+                dType_16t weighted_bias = bias_calib * iMult_bias_acc[oc];
+
+                if (nShift_bias_acc[oc] >= 0) {
+                    scaled_bias = (weighted_bias) >> nShift_bias_acc[oc];
+                } else {
+                    scaled_bias = (weighted_bias) << -nShift_bias_acc[oc];
+                }
+                dType_Reg biased_input = (sum + scaled_bias);
+                t_ACCUMULATE_TYPE out_i32;
+                dType_16t signed_imul = iMult_output[oc];
+                t_ACCUMULATE_TYPE scaled_output = biased_input * signed_imul;
+                out_i32 = (scaled_output >> nShift_output[oc]) + output_zp;
+                t_OUTPUT_TYPE out_nBit = (t_OUTPUT_TYPE)(MAX(0,MIN(out_i32,255)));
+                *outFifo =out_nBit;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/Reshape.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/Reshape.c
--- gem5/benchmarks/mobilenetv2/hw/source/tail/Reshape.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/Reshape.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,22 @@
+#include "tail_defines.h"
+
+#define t_OUTPUT_CHANNEL	RS_OUT_CH
+#define t_OUTPUT_SIZE		RS_OUT_SIZE
+
+void reshape() {
+	volatile dType_8u * cin_0 		= (dType_8u *)(tail_PWConvOut);
+	volatile dType_8u * channelwise = (dType_8u *)(tail_ReshapeOut);
+    #pragma nounroll
+	for (dType_Reg i = 0; i < t_OUTPUT_SIZE; i++)
+    {
+        #pragma nounroll
+        for (dType_Reg j = 0; j < t_OUTPUT_SIZE; j++)
+        {
+            #pragma nounroll
+            for (dType_Reg c = 0; c < t_OUTPUT_CHANNEL; c++)
+            {
+                channelwise[(c * (t_OUTPUT_SIZE * t_OUTPUT_SIZE)) + (i * t_OUTPUT_SIZE + j)] = *cin_0;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/tail_defines.h gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/tail_defines.h
--- gem5/benchmarks/mobilenetv2/hw/source/tail/tail_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/tail_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,36 @@
+#include "../common/support.h"
+#include "../../../tail_hw_defines.h"
+#include "../../../network_params.h"
+
+/***********************************************************
+ * Computation Defines
+ ***********************************************************/
+
+// PW Conv
+#define PW_IN_SIZE		__TAIL_PW_CONV_MAX_INPUT_SIZE__
+#define PW_OUT_SIZE		3
+#define PW_IN_CH		__TAIL_PW_CONV_MAX_INPUT_CHAN__
+#define PW_OUT_CH		__TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__
+#define PW_CORE_SIZE	120
+#define PW_BIAS_ZP		0
+#define PW_INPUT_ZP		0
+#define PW_OUTPUT_ZP	0
+#define PWWeightSize	PW_OUT_CH*PW_IN_CH
+#define PWQParamSize	PW_OUT_CH
+#define PWOutputSize	PW_OUT_SIZE*PW_OUT_SIZE*PW_OUT_CH
+
+// Reshape (Matrix Transpose)
+#define RS_OUT_SIZE		3
+#define RS_OUT_CH		__TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__
+
+// Avg Pooling
+#define POOL_CH			__TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__
+#define POOL_SIZE		3
+#define POOL_IMULT		__AVG_POOLING_iMult_KERNEL__
+#define POOL_NSHIFT		__AVG_POOLING__nShift_KERNEL__
+
+// StreamDMA
+#define INPUT_SIZE		PW_IN_SIZE*PW_IN_SIZE*PW_IN_CH
+#define OUTPUT_SIZE		POOL_CH
+
+#define PW_OUT_CH_MAX __TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/hw/source/tail/top.c gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/top.c
--- gem5/benchmarks/mobilenetv2/hw/source/tail/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/hw/source/tail/top.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,102 @@
+#include "tail_defines.h"
+
+void top(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+		 uint64_t pw_weights, uint64_t pw_quant) {
+
+	//Initialize Accelerators
+	volatile uint8_t * PWConv 		= (uint8_t *)TAIL_PWCONV;
+	volatile uint8_t * Reshape		= (uint8_t *)TAIL_RESHAPE;
+	volatile uint8_t * AvgPool 		= (uint8_t *)TAIL_AVGPOOL;
+
+	//Initialize DMAs
+	//StreamDma
+	volatile uint8_t  * StrDmaFlags				= (uint8_t  *)(TAIL_STREAM_DMA0_Flags);
+	volatile uint64_t * StrDmaRdAddr			= (uint64_t *)(TAIL_STREAM_DMA0_RdAddr);
+	volatile uint64_t * StrDmaWrAddr			= (uint64_t *)(TAIL_STREAM_DMA0_WrAddr);
+	volatile uint32_t * StrDmaRdFrameSize		= (uint32_t *)(TAIL_STREAM_DMA0_RdFrameSize);
+	volatile uint8_t  * StrDmaNumRdFrames		= (uint8_t  *)(TAIL_STREAM_DMA0_NumRdFrames);
+	volatile uint8_t  * StrDmaRdFrameBuffSize	= (uint8_t  *)(TAIL_STREAM_DMA0_RdFrameBufSize);
+	volatile uint32_t * StrDmaWrFrameSize		= (uint32_t *)(TAIL_STREAM_DMA0_WrFrameSize);
+	volatile uint8_t  * StrDmaNumWrFrames		= (uint8_t  *)(TAIL_STREAM_DMA0_NumWrFrames);
+	volatile uint8_t  * StrDmaWrFrameBuffSize	= (uint8_t  *)(TAIL_STREAM_DMA0_WrFrameBufSize);
+	//MemDma
+	volatile uint8_t  * MemDmaFlags				= (uint8_t  *)(TAIL_DMA_Flags);
+	volatile uint64_t * MemDmaRdAddr			= (uint64_t *)(TAIL_DMA_RdAddr);
+	volatile uint64_t * MemDmaWrAddr			= (uint64_t *)(TAIL_DMA_WrAddr);
+	volatile uint32_t * MemDmaCopyLen			= (uint32_t *)(TAIL_DMA_CopyLen);
+	//Initialize DRAM-Stream DMA
+	*StrDmaRdAddr = feat_rd_addr;
+	*StrDmaRdFrameSize = INPUT_SIZE;
+	*StrDmaNumRdFrames = 1;
+	*StrDmaRdFrameBuffSize = 1;
+	//Initialize Stream-DRAM DMA
+	*StrDmaWrAddr = feat_wr_addr;
+	*StrDmaWrFrameSize = OUTPUT_SIZE;
+	*StrDmaNumWrFrames = 1;
+	*StrDmaWrFrameBuffSize = 1;
+	//Start Stream DMAs
+	*StrDmaFlags = STR_DMA_INIT_RD | STR_DMA_INIT_WR;
+
+	//Transfer Weights and Quantization Params from DRAM to SPMs
+	//Start PW Conv Weight Xfer
+	*MemDmaRdAddr  = pw_weights;
+	*MemDmaWrAddr  = tail_PWConvWeights;
+	*MemDmaCopyLen = PWWeightSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	// Start PW Conv QParams Xfer
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*0;
+	*MemDmaWrAddr  = tail_PWBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*1;
+	*MemDmaWrAddr  = tail_PWIMultBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*2;
+	*MemDmaWrAddr  = tail_PWNShiftBias;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*3;
+	*MemDmaWrAddr  = tail_PWIMultOut;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*4;
+	*MemDmaWrAddr  = tail_PWNShiftOut;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	*MemDmaRdAddr  = pw_quant + PWQParamSize*5;
+	*MemDmaWrAddr  = tail_PWWeightZP;
+	*MemDmaCopyLen = PWQParamSize;
+	*MemDmaFlags   = MEM_DMA_INIT;
+	//Poll DMA for finish
+	while ((*MemDmaFlags & MEM_DMA_INTR) != MEM_DMA_INTR);
+
+	//Start PW Conv
+	*PWConv = 0x01;
+	//Start Reshape
+	*Reshape = 0x01;
+	//Start AVG Pool
+	*AvgPool = 0x01;
+
+	//Wait for all accelerators to finish before sending interrupt to CPU
+	while ((*StrDmaFlags & STR_DMA_WR_RUNNING) == STR_DMA_WR_RUNNING);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/Makefile gem5-SALAM/benchmarks/mobilenetv2/Makefile
--- gem5/benchmarks/mobilenetv2/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/Makefile	2024-02-22 18:17:14.820943013 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b; done )
+
+clean:
+	@( for b in $(FOLDERS); do $(MAKE) -C $$b clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/network_params.h gem5-SALAM/benchmarks/mobilenetv2/network_params.h
--- gem5/benchmarks/mobilenetv2/network_params.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/network_params.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,1353 @@
+#define WIDTH_35
+// #define WIDTH_75
+// #define WIDTH_1
+
+#ifdef WIDTH_35
+#define __FEATURES_0_0__INPUT_CHAN__                3
+#define __FEATURES_0_0__INPUT_SIZE__                96
+#define __FEATURES_0_0__OUTPUT_CHAN__               16
+#define __FEATURES_0_0__OUTPUT_SIZE__               48
+#define __FEATURES_0_0__KERNEL_SIZE__               3
+#define __FEATURES_0_0__STRIDE_SIZE__               2
+#define __FEATURES_0_0__PADDING_SIZE__              1
+#define __FEATURES_1_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_1_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_0__OUTPUT_CHAN__          16
+#define __FEATURES_1_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_0__KERNEL_SIZE__          3
+#define __FEATURES_1_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_0__PADDING_SIZE__         1
+#define __FEATURES_1_CONV_2__INPUT_CHAN__           16
+#define __FEATURES_1_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_2__OUTPUT_CHAN__          8
+#define __FEATURES_1_CONV_2__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_2__KERNEL_SIZE__          1
+#define __FEATURES_1_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_2__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_0__INPUT_CHAN__           8
+#define __FEATURES_2_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_0__OUTPUT_CHAN__          48
+#define __FEATURES_2_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_2_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_2__INPUT_CHAN__           48
+#define __FEATURES_2_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_2__OUTPUT_CHAN__          48
+#define __FEATURES_2_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_2_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_2_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_2_CONV_4__INPUT_CHAN__           48
+#define __FEATURES_2_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_2_CONV_4__OUTPUT_CHAN__          8
+#define __FEATURES_2_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_0__INPUT_CHAN__           8
+#define __FEATURES_3_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_0__OUTPUT_CHAN__          48
+#define __FEATURES_3_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_2__INPUT_CHAN__           48
+#define __FEATURES_3_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_2__OUTPUT_CHAN__          48
+#define __FEATURES_3_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_3_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_3_CONV_4__INPUT_CHAN__           48
+#define __FEATURES_3_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_4__OUTPUT_CHAN__          8
+#define __FEATURES_3_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_0__INPUT_CHAN__           8
+#define __FEATURES_4_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_0__OUTPUT_CHAN__          48
+#define __FEATURES_4_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_4_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_2__INPUT_CHAN__           48
+#define __FEATURES_4_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_2__OUTPUT_CHAN__          48
+#define __FEATURES_4_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_4_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_4_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_4_CONV_4__INPUT_CHAN__           48
+#define __FEATURES_4_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_4_CONV_4__OUTPUT_CHAN__          16
+#define __FEATURES_4_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_5_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_0__OUTPUT_CHAN__          96
+#define __FEATURES_5_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_2__INPUT_CHAN__           96
+#define __FEATURES_5_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_2__OUTPUT_CHAN__          96
+#define __FEATURES_5_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_5_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_5_CONV_4__INPUT_CHAN__           96
+#define __FEATURES_5_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_4__OUTPUT_CHAN__          16
+#define __FEATURES_5_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_6_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_0__OUTPUT_CHAN__          96
+#define __FEATURES_6_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_2__INPUT_CHAN__           96
+#define __FEATURES_6_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_2__OUTPUT_CHAN__          96
+#define __FEATURES_6_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_6_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_6_CONV_4__INPUT_CHAN__           96
+#define __FEATURES_6_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_4__OUTPUT_CHAN__          16
+#define __FEATURES_6_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_7_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_0__OUTPUT_CHAN__          96
+#define __FEATURES_7_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_7_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_2__INPUT_CHAN__           96
+#define __FEATURES_7_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_2__OUTPUT_CHAN__          96
+#define __FEATURES_7_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_7_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_7_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_7_CONV_4__INPUT_CHAN__           96
+#define __FEATURES_7_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_7_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_7_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_8_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_8_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_8_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_8_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_8_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_8_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_8_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_8_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_9_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_9_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_9_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_9_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_9_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_9_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_9_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_9_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_10_CONV_0__INPUT_CHAN__          24
+#define __FEATURES_10_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_0__OUTPUT_CHAN__         144
+#define __FEATURES_10_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_10_CONV_2__INPUT_CHAN__          144
+#define __FEATURES_10_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_2__OUTPUT_CHAN__         144
+#define __FEATURES_10_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_10_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_10_CONV_4__INPUT_CHAN__          144
+#define __FEATURES_10_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_4__OUTPUT_CHAN__         24
+#define __FEATURES_10_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_0__INPUT_CHAN__          24
+#define __FEATURES_11_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_0__OUTPUT_CHAN__         144
+#define __FEATURES_11_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_2__INPUT_CHAN__          144
+#define __FEATURES_11_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_2__OUTPUT_CHAN__         144
+#define __FEATURES_11_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_11_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_11_CONV_4__INPUT_CHAN__          144
+#define __FEATURES_11_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_4__OUTPUT_CHAN__         32
+#define __FEATURES_11_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_0__INPUT_CHAN__          32
+#define __FEATURES_12_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_0__OUTPUT_CHAN__         192
+#define __FEATURES_12_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_2__INPUT_CHAN__          192
+#define __FEATURES_12_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_2__OUTPUT_CHAN__         192
+#define __FEATURES_12_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_12_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_12_CONV_4__INPUT_CHAN__          192
+#define __FEATURES_12_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_4__OUTPUT_CHAN__         32
+#define __FEATURES_12_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_0__INPUT_CHAN__          32
+#define __FEATURES_13_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_0__OUTPUT_CHAN__         192
+#define __FEATURES_13_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_2__INPUT_CHAN__          192
+#define __FEATURES_13_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_2__OUTPUT_CHAN__         192
+#define __FEATURES_13_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_13_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_13_CONV_4__INPUT_CHAN__          192
+#define __FEATURES_13_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_4__OUTPUT_CHAN__         32
+#define __FEATURES_13_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_0__INPUT_CHAN__          32
+#define __FEATURES_14_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_0__OUTPUT_CHAN__         192
+#define __FEATURES_14_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_14_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_2__INPUT_CHAN__          192
+#define __FEATURES_14_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_2__OUTPUT_CHAN__         192
+#define __FEATURES_14_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_14_CONV_2__STRIDE_SIZE__         2
+#define __FEATURES_14_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_14_CONV_4__INPUT_CHAN__          192
+#define __FEATURES_14_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_14_CONV_4__OUTPUT_CHAN__         56
+#define __FEATURES_14_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_0__INPUT_CHAN__          56
+#define __FEATURES_15_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_0__OUTPUT_CHAN__         336
+#define __FEATURES_15_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_2__INPUT_CHAN__          336
+#define __FEATURES_15_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_2__OUTPUT_CHAN__         336
+#define __FEATURES_15_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_15_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_15_CONV_4__INPUT_CHAN__          336
+#define __FEATURES_15_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_4__OUTPUT_CHAN__         56
+#define __FEATURES_15_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_0__INPUT_CHAN__          56
+#define __FEATURES_16_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_0__OUTPUT_CHAN__         336
+#define __FEATURES_16_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_2__INPUT_CHAN__          336
+#define __FEATURES_16_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_2__OUTPUT_CHAN__         336
+#define __FEATURES_16_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_16_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_16_CONV_4__INPUT_CHAN__          336
+#define __FEATURES_16_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_4__OUTPUT_CHAN__         56
+#define __FEATURES_16_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_0__INPUT_CHAN__          56
+#define __FEATURES_17_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_0__OUTPUT_CHAN__         336
+#define __FEATURES_17_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_2__INPUT_CHAN__          336
+#define __FEATURES_17_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_2__OUTPUT_CHAN__         336
+#define __FEATURES_17_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_17_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_17_CONV_4__INPUT_CHAN__          336
+#define __FEATURES_17_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_4__OUTPUT_CHAN__         112
+#define __FEATURES_17_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_4__PADDING_SIZE__        0
+#define __CONV_0__INPUT_CHAN__                      112
+#define __CONV_0__INPUT_SIZE__                      3
+#define __CONV_0__OUTPUT_CHAN__                     1280
+#define __CONV_0__OUTPUT_SIZE__                     3
+#define __CONV_0__KERNEL_SIZE__                     1
+#define __CONV_0__STRIDE_SIZE__                     1
+#define __CONV_0__PADDING_SIZE__                    0
+#define __MAX_INPUT_CH__                            336
+#define __MAX_OUT_SIZE__                            48
+#define __MAX_ACC_SIZE__                            336
+#define __MAX_BIAS_OUT_CH_SIZE__                    1280
+#define __AVG_POOLING_INPUT_CHAN_SIZE__             1280
+#define __AVG_POOLING_KERNEL_SIZE__                 3
+#define __AVG_POOLING_iMult_KERNEL__                227
+#define __AVG_POOLING__nShift_KERNEL__              11
+#define __LINEAR_ROW_SIZE__                         1000
+#define __LINEAR_DEPTH_SIZE__                       1280
+#define __NORMAL_CONV_MAX_INPUT_CHAN__              3
+#define __NORMAL_CONV_MAX_INPUT_SIZE__              96
+#define __NORMAL_CONV_MAX_OUTPUT_CHANNEL__          16
+#define __NORMAL_CONV_SP_WIEGHT_SIZE__              432
+#define __HEAD_PW_CONV_MAX_INPUT_CHAN__             16
+#define __HEAD_PW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_PW_CONV_MAX_OUTPUT_CHANNEL__         8
+#define __HEAD_PW_CONV_SP_WIEGHT_SIZE__             128
+#define __HEAD_DW_CONV_MAX_INPUT_CHAN__             16
+#define __HEAD_DW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_DW_CONV_MAX_OUTPUT_CHANNEL__         16
+#define __HEAD_DW_CONV_SP_WIEGHT_SIZE__             144
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_CHAN__       56
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_SIZE__       6
+#define __EXPND_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__   336
+#define __EXPND_PW_CONV_STR1_SP_WIEGHT_SIZE__       18816
+#define __EXPND_PW_CONV_STR1_GRP_CORE_SIZE__        8
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_CHAN__       32
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_SIZE__       48
+#define __EXPND_PW_CONV_STR2_MAX_OUTPUT_CHANNEL__   192
+#define __EXPND_PW_CONV_STR2_SP_WIEGHT_SIZE__       6144
+#define __EXPND_PW_CONV_STR2_GRP_CORE_SIZE__        8
+#define __EXPND_PW_CONV_RES_MAX_INPUT_CHAN__        56
+#define __EXPND_PW_CONV_RES_MAX_INPUT_SIZE__        24
+#define __EXPND_PW_CONV_RES_MAX_OUTPUT_CHANNEL__    336
+#define __EXPND_PW_CONV_RES_SP_WIEGHT_SIZE__        18816
+#define __EXPND_PW_CONV_RES_GRP_CORE_SIZE__         8
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_CHAN__        336
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_SIZE__        6
+#define __PRJC_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__    112
+#define __PRJC_PW_CONV_STR1_SP_WIEGHT_SIZE__        37632
+#define __PRJC_PW_CONV_STR1_GRP_CORE_SIZE__         336
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_CHAN__    192
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_SIZE__    24
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_OUTPUT_CHANNEL__   56
+#define __PRJC_PW_PRJ_CONV_STR2_SP_WIEGHT_SIZE__    10752
+#define __PRJC_PW_PRJ_CONV_STR2_GRP_CORE_SIZE__     48
+#define __PRJC_PW_CONV_RES_MAX_INPUT_CHAN__         336
+#define __PRJC_PW_CONV_RES_MAX_INPUT_SIZE__         24
+#define __PRJC_PW_CONV_RES_MAX_OUTPUT_CHANNEL__     56
+#define __PRJC_PW_CONV_RES_SP_WIEGHT_SIZE__         18816
+#define __PRJC_PW_CONV_RES_GRP_CORE_SIZE__          48
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   56
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   336
+#define __EXP_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   18816
+#define __EXP_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   8
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   336
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   112
+#define __PRJC_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   37632
+#define __PRJC_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   48
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_CHAN__        336
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_SIZE__        6
+#define __IRB_DW_CONV_STD_1_MAX_OUTPUT_CHANNEL__    336
+#define __IRB_DW_CONV_STD_1_SP_WIEGHT_SIZE__        3024
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_CHAN__        192
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_SIZE__        48
+#define __IRB_DW_CONV_STD_2_MAX_OUTPUT_CHANNEL__    192
+#define __IRB_DW_CONV_STD_2_SP_WIEGHT_SIZE__        1728
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_CHAN__    336
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_SIZE__    24
+#define __IRB_DW_CONV_STD_1_RES_MAX_OUTPUT_CHANNEL__   336
+#define __IRB_DW_CONV_STD_1_RES_SP_WIEGHT_SIZE__    3024
+#define __COMMON_PW_GRP_CORE_SIZE__                 8
+#define __MAX_DW_STR1_CONV_MAX_INPUT_CHAN__         336
+#define __MAX_DW_STR1_CONV_MAX_INPUT_SIZE__         24
+#define __MAX_DW_STR1_CONV_MAX_OUTPUT_CHANNEL__     336
+#define __MAX_DW_STR1_CONV_SP_WIEGHT_SIZE__         3024
+#define __TAIL_PW_CONV_MAX_INPUT_CHAN__             112
+#define __TAIL_PW_CONV_MAX_INPUT_SIZE__             3
+#define __TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__         1280
+#define __TAIL_PW_CONV_SP_WIEGHT_SIZE__             143360
+#endif
+
+#ifdef WIDTH_75
+#define __FEATURES_0_0__INPUT_CHAN__                3
+#define __FEATURES_0_0__INPUT_SIZE__                96
+#define __FEATURES_0_0__OUTPUT_CHAN__               24
+#define __FEATURES_0_0__OUTPUT_SIZE__               48
+#define __FEATURES_0_0__KERNEL_SIZE__               3
+#define __FEATURES_0_0__STRIDE_SIZE__               2
+#define __FEATURES_0_0__PADDING_SIZE__              1
+#define __FEATURES_1_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_1_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_0__OUTPUT_CHAN__          24
+#define __FEATURES_1_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_0__KERNEL_SIZE__          3
+#define __FEATURES_1_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_0__PADDING_SIZE__         1
+#define __FEATURES_1_CONV_2__INPUT_CHAN__           24
+#define __FEATURES_1_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_2__OUTPUT_CHAN__          16
+#define __FEATURES_1_CONV_2__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_2__KERNEL_SIZE__          1
+#define __FEATURES_1_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_2__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_2_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_0__OUTPUT_CHAN__          96
+#define __FEATURES_2_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_2_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_2__INPUT_CHAN__           96
+#define __FEATURES_2_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_2__OUTPUT_CHAN__          96
+#define __FEATURES_2_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_2_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_2_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_2_CONV_4__INPUT_CHAN__           96
+#define __FEATURES_2_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_2_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_2_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_3_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_3_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_3_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_3_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_3_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_3_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_3_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_3_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_4_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_4_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_4_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_4_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_4_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_4_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_4_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_4_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_4_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_4_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_4_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_5_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_5_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_5_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_5_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_5_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_5_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_5_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_5_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_6_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_6_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_6_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_6_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_6_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_6_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_6_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_6_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_7_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_7_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_7_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_7_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_7_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_7_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_7_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_7_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_7_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_7_CONV_4__OUTPUT_CHAN__          48
+#define __FEATURES_7_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_0__INPUT_CHAN__           48
+#define __FEATURES_8_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_0__OUTPUT_CHAN__          288
+#define __FEATURES_8_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_2__INPUT_CHAN__           288
+#define __FEATURES_8_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_2__OUTPUT_CHAN__          288
+#define __FEATURES_8_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_8_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_8_CONV_4__INPUT_CHAN__           288
+#define __FEATURES_8_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_4__OUTPUT_CHAN__          48
+#define __FEATURES_8_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_0__INPUT_CHAN__           48
+#define __FEATURES_9_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_0__OUTPUT_CHAN__          288
+#define __FEATURES_9_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_2__INPUT_CHAN__           288
+#define __FEATURES_9_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_2__OUTPUT_CHAN__          288
+#define __FEATURES_9_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_9_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_9_CONV_4__INPUT_CHAN__           288
+#define __FEATURES_9_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_4__OUTPUT_CHAN__          48
+#define __FEATURES_9_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_10_CONV_0__INPUT_CHAN__          48
+#define __FEATURES_10_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_0__OUTPUT_CHAN__         288
+#define __FEATURES_10_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_10_CONV_2__INPUT_CHAN__          288
+#define __FEATURES_10_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_2__OUTPUT_CHAN__         288
+#define __FEATURES_10_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_10_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_10_CONV_4__INPUT_CHAN__          288
+#define __FEATURES_10_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_4__OUTPUT_CHAN__         48
+#define __FEATURES_10_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_0__INPUT_CHAN__          48
+#define __FEATURES_11_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_0__OUTPUT_CHAN__         288
+#define __FEATURES_11_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_2__INPUT_CHAN__          288
+#define __FEATURES_11_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_2__OUTPUT_CHAN__         288
+#define __FEATURES_11_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_11_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_11_CONV_4__INPUT_CHAN__          288
+#define __FEATURES_11_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_4__OUTPUT_CHAN__         72
+#define __FEATURES_11_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_0__INPUT_CHAN__          72
+#define __FEATURES_12_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_0__OUTPUT_CHAN__         432
+#define __FEATURES_12_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_2__INPUT_CHAN__          432
+#define __FEATURES_12_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_2__OUTPUT_CHAN__         432
+#define __FEATURES_12_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_12_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_12_CONV_4__INPUT_CHAN__          432
+#define __FEATURES_12_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_4__OUTPUT_CHAN__         72
+#define __FEATURES_12_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_0__INPUT_CHAN__          72
+#define __FEATURES_13_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_0__OUTPUT_CHAN__         432
+#define __FEATURES_13_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_2__INPUT_CHAN__          432
+#define __FEATURES_13_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_2__OUTPUT_CHAN__         432
+#define __FEATURES_13_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_13_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_13_CONV_4__INPUT_CHAN__          432
+#define __FEATURES_13_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_4__OUTPUT_CHAN__         72
+#define __FEATURES_13_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_0__INPUT_CHAN__          72
+#define __FEATURES_14_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_0__OUTPUT_CHAN__         432
+#define __FEATURES_14_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_14_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_2__INPUT_CHAN__          432
+#define __FEATURES_14_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_2__OUTPUT_CHAN__         432
+#define __FEATURES_14_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_14_CONV_2__STRIDE_SIZE__         2
+#define __FEATURES_14_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_14_CONV_4__INPUT_CHAN__          432
+#define __FEATURES_14_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_14_CONV_4__OUTPUT_CHAN__         120
+#define __FEATURES_14_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_0__INPUT_CHAN__          120
+#define __FEATURES_15_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_0__OUTPUT_CHAN__         720
+#define __FEATURES_15_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_2__INPUT_CHAN__          720
+#define __FEATURES_15_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_2__OUTPUT_CHAN__         720
+#define __FEATURES_15_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_15_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_15_CONV_4__INPUT_CHAN__          720
+#define __FEATURES_15_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_4__OUTPUT_CHAN__         120
+#define __FEATURES_15_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_0__INPUT_CHAN__          120
+#define __FEATURES_16_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_0__OUTPUT_CHAN__         720
+#define __FEATURES_16_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_2__INPUT_CHAN__          720
+#define __FEATURES_16_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_2__OUTPUT_CHAN__         720
+#define __FEATURES_16_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_16_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_16_CONV_4__INPUT_CHAN__          720
+#define __FEATURES_16_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_4__OUTPUT_CHAN__         120
+#define __FEATURES_16_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_0__INPUT_CHAN__          120
+#define __FEATURES_17_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_0__OUTPUT_CHAN__         720
+#define __FEATURES_17_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_2__INPUT_CHAN__          720
+#define __FEATURES_17_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_2__OUTPUT_CHAN__         720
+#define __FEATURES_17_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_17_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_17_CONV_4__INPUT_CHAN__          720
+#define __FEATURES_17_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_4__OUTPUT_CHAN__         240
+#define __FEATURES_17_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_4__PADDING_SIZE__        0
+#define __CONV_0__INPUT_CHAN__                      240
+#define __CONV_0__INPUT_SIZE__                      3
+#define __CONV_0__OUTPUT_CHAN__                     1280
+#define __CONV_0__OUTPUT_SIZE__                     3
+#define __CONV_0__KERNEL_SIZE__                     1
+#define __CONV_0__STRIDE_SIZE__                     1
+#define __CONV_0__PADDING_SIZE__                    0
+#define __MAX_INPUT_CH__                            720
+#define __MAX_OUT_SIZE__                            48
+#define __MAX_ACC_SIZE__                            720
+#define __MAX_BIAS_OUT_CH_SIZE__                    1280
+#define __AVG_POOLING_INPUT_CHAN_SIZE__             1280
+#define __AVG_POOLING_KERNEL_SIZE__                 3
+#define __AVG_POOLING_iMult_KERNEL__                227
+#define __AVG_POOLING__nShift_KERNEL__              11
+#define __LINEAR_ROW_SIZE__                         1000
+#define __LINEAR_DEPTH_SIZE__                       1280
+#define __NORMAL_CONV_MAX_INPUT_CHAN__              3
+#define __NORMAL_CONV_MAX_INPUT_SIZE__              96
+#define __NORMAL_CONV_MAX_OUTPUT_CHANNEL__          24
+#define __NORMAL_CONV_SP_WIEGHT_SIZE__              648
+#define __HEAD_PW_CONV_MAX_INPUT_CHAN__             24
+#define __HEAD_PW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_PW_CONV_MAX_OUTPUT_CHANNEL__         16
+#define __HEAD_PW_CONV_SP_WIEGHT_SIZE__             384
+#define __HEAD_DW_CONV_MAX_INPUT_CHAN__             24
+#define __HEAD_DW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_DW_CONV_MAX_OUTPUT_CHANNEL__         24
+#define __HEAD_DW_CONV_SP_WIEGHT_SIZE__             216
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_CHAN__       120
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_SIZE__       6
+#define __EXPND_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__   720
+#define __EXPND_PW_CONV_STR1_SP_WIEGHT_SIZE__       86400
+#define __EXPND_PW_CONV_STR1_GRP_CORE_SIZE__        24
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_CHAN__       72
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_SIZE__       48
+#define __EXPND_PW_CONV_STR2_MAX_OUTPUT_CHANNEL__   432
+#define __EXPND_PW_CONV_STR2_SP_WIEGHT_SIZE__       31104
+#define __EXPND_PW_CONV_STR2_GRP_CORE_SIZE__        8
+#define __EXPND_PW_CONV_RES_MAX_INPUT_CHAN__        120
+#define __EXPND_PW_CONV_RES_MAX_INPUT_SIZE__        24
+#define __EXPND_PW_CONV_RES_MAX_OUTPUT_CHANNEL__    720
+#define __EXPND_PW_CONV_RES_SP_WIEGHT_SIZE__        86400
+#define __EXPND_PW_CONV_RES_GRP_CORE_SIZE__         24
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_CHAN__        720
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_SIZE__        6
+#define __PRJC_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__    240
+#define __PRJC_PW_CONV_STR1_SP_WIEGHT_SIZE__        172800
+#define __PRJC_PW_CONV_STR1_GRP_CORE_SIZE__         720
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_CHAN__    432
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_SIZE__    24
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_OUTPUT_CHANNEL__   120
+#define __PRJC_PW_PRJ_CONV_STR2_SP_WIEGHT_SIZE__    51840
+#define __PRJC_PW_PRJ_CONV_STR2_GRP_CORE_SIZE__     48
+#define __PRJC_PW_CONV_RES_MAX_INPUT_CHAN__         720
+#define __PRJC_PW_CONV_RES_MAX_INPUT_SIZE__         24
+#define __PRJC_PW_CONV_RES_MAX_OUTPUT_CHANNEL__     120
+#define __PRJC_PW_CONV_RES_SP_WIEGHT_SIZE__         86400
+#define __PRJC_PW_CONV_RES_GRP_CORE_SIZE__          144
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   120
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   720
+#define __EXP_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   86400
+#define __EXP_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   24
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   720
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   240
+#define __PRJC_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   172800
+#define __PRJC_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   144
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_CHAN__        720
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_SIZE__        6
+#define __IRB_DW_CONV_STD_1_MAX_OUTPUT_CHANNEL__    720
+#define __IRB_DW_CONV_STD_1_SP_WIEGHT_SIZE__        6480
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_CHAN__        432
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_SIZE__        48
+#define __IRB_DW_CONV_STD_2_MAX_OUTPUT_CHANNEL__    432
+#define __IRB_DW_CONV_STD_2_SP_WIEGHT_SIZE__        3888
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_CHAN__    720
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_SIZE__    24
+#define __IRB_DW_CONV_STD_1_RES_MAX_OUTPUT_CHANNEL__   720
+#define __IRB_DW_CONV_STD_1_RES_SP_WIEGHT_SIZE__    6480
+#define __COMMON_PW_GRP_CORE_SIZE__                 8
+#define __MAX_DW_STR1_CONV_MAX_INPUT_CHAN__         720
+#define __MAX_DW_STR1_CONV_MAX_INPUT_SIZE__         24
+#define __MAX_DW_STR1_CONV_MAX_OUTPUT_CHANNEL__     720
+#define __MAX_DW_STR1_CONV_SP_WIEGHT_SIZE__         6480
+#define __TAIL_PW_CONV_MAX_INPUT_CHAN__             240
+#define __TAIL_PW_CONV_MAX_INPUT_SIZE__             3
+#define __TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__         1280
+#define __TAIL_PW_CONV_SP_WIEGHT_SIZE__             307200
+#endif
+
+#ifdef WIDTH_1
+#define __FEATURES_0_0__INPUT_CHAN__                3
+#define __FEATURES_0_0__INPUT_SIZE__                96
+#define __FEATURES_0_0__OUTPUT_CHAN__               32
+#define __FEATURES_0_0__OUTPUT_SIZE__               48
+#define __FEATURES_0_0__KERNEL_SIZE__               3
+#define __FEATURES_0_0__STRIDE_SIZE__               2
+#define __FEATURES_0_0__PADDING_SIZE__              1
+#define __FEATURES_1_CONV_0__INPUT_CHAN__           32
+#define __FEATURES_1_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_0__OUTPUT_CHAN__          32
+#define __FEATURES_1_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_0__KERNEL_SIZE__          3
+#define __FEATURES_1_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_0__PADDING_SIZE__         1
+#define __FEATURES_1_CONV_2__INPUT_CHAN__           32
+#define __FEATURES_1_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_1_CONV_2__OUTPUT_CHAN__          16
+#define __FEATURES_1_CONV_2__OUTPUT_SIZE__          48
+#define __FEATURES_1_CONV_2__KERNEL_SIZE__          1
+#define __FEATURES_1_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_1_CONV_2__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_0__INPUT_CHAN__           16
+#define __FEATURES_2_CONV_0__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_0__OUTPUT_CHAN__          96
+#define __FEATURES_2_CONV_0__OUTPUT_SIZE__          48
+#define __FEATURES_2_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_2_CONV_2__INPUT_CHAN__           96
+#define __FEATURES_2_CONV_2__INPUT_SIZE__           48
+#define __FEATURES_2_CONV_2__OUTPUT_CHAN__          96
+#define __FEATURES_2_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_2_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_2_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_2_CONV_4__INPUT_CHAN__           96
+#define __FEATURES_2_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_2_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_2_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_2_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_2_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_2_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_3_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_3_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_3_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_3_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_3_CONV_2__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_3_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_3_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_3_CONV_4__INPUT_SIZE__           24
+#define __FEATURES_3_CONV_4__OUTPUT_CHAN__          24
+#define __FEATURES_3_CONV_4__OUTPUT_SIZE__          24
+#define __FEATURES_3_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_3_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_3_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_0__INPUT_CHAN__           24
+#define __FEATURES_4_CONV_0__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_0__OUTPUT_CHAN__          144
+#define __FEATURES_4_CONV_0__OUTPUT_SIZE__          24
+#define __FEATURES_4_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_4_CONV_2__INPUT_CHAN__           144
+#define __FEATURES_4_CONV_2__INPUT_SIZE__           24
+#define __FEATURES_4_CONV_2__OUTPUT_CHAN__          144
+#define __FEATURES_4_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_4_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_4_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_4_CONV_4__INPUT_CHAN__           144
+#define __FEATURES_4_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_4_CONV_4__OUTPUT_CHAN__          32
+#define __FEATURES_4_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_4_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_4_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_4_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_0__INPUT_CHAN__           32
+#define __FEATURES_5_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_0__OUTPUT_CHAN__          192
+#define __FEATURES_5_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_5_CONV_2__INPUT_CHAN__           192
+#define __FEATURES_5_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_2__OUTPUT_CHAN__          192
+#define __FEATURES_5_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_5_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_5_CONV_4__INPUT_CHAN__           192
+#define __FEATURES_5_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_5_CONV_4__OUTPUT_CHAN__          32
+#define __FEATURES_5_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_5_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_5_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_5_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_0__INPUT_CHAN__           32
+#define __FEATURES_6_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_0__OUTPUT_CHAN__          192
+#define __FEATURES_6_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_6_CONV_2__INPUT_CHAN__           192
+#define __FEATURES_6_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_2__OUTPUT_CHAN__          192
+#define __FEATURES_6_CONV_2__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_6_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_6_CONV_4__INPUT_CHAN__           192
+#define __FEATURES_6_CONV_4__INPUT_SIZE__           12
+#define __FEATURES_6_CONV_4__OUTPUT_CHAN__          32
+#define __FEATURES_6_CONV_4__OUTPUT_SIZE__          12
+#define __FEATURES_6_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_6_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_6_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_0__INPUT_CHAN__           32
+#define __FEATURES_7_CONV_0__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_0__OUTPUT_CHAN__          192
+#define __FEATURES_7_CONV_0__OUTPUT_SIZE__          12
+#define __FEATURES_7_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_7_CONV_2__INPUT_CHAN__           192
+#define __FEATURES_7_CONV_2__INPUT_SIZE__           12
+#define __FEATURES_7_CONV_2__OUTPUT_CHAN__          192
+#define __FEATURES_7_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_7_CONV_2__STRIDE_SIZE__          2
+#define __FEATURES_7_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_7_CONV_4__INPUT_CHAN__           192
+#define __FEATURES_7_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_7_CONV_4__OUTPUT_CHAN__          64
+#define __FEATURES_7_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_7_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_7_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_7_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_0__INPUT_CHAN__           64
+#define __FEATURES_8_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_0__OUTPUT_CHAN__          384
+#define __FEATURES_8_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_8_CONV_2__INPUT_CHAN__           384
+#define __FEATURES_8_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_2__OUTPUT_CHAN__          384
+#define __FEATURES_8_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_8_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_8_CONV_4__INPUT_CHAN__           384
+#define __FEATURES_8_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_8_CONV_4__OUTPUT_CHAN__          64
+#define __FEATURES_8_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_8_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_8_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_8_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_0__INPUT_CHAN__           64
+#define __FEATURES_9_CONV_0__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_0__OUTPUT_CHAN__          384
+#define __FEATURES_9_CONV_0__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_0__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_0__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_0__PADDING_SIZE__         0
+#define __FEATURES_9_CONV_2__INPUT_CHAN__           384
+#define __FEATURES_9_CONV_2__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_2__OUTPUT_CHAN__          384
+#define __FEATURES_9_CONV_2__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_2__KERNEL_SIZE__          3
+#define __FEATURES_9_CONV_2__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_2__PADDING_SIZE__         1
+#define __FEATURES_9_CONV_4__INPUT_CHAN__           384
+#define __FEATURES_9_CONV_4__INPUT_SIZE__           6
+#define __FEATURES_9_CONV_4__OUTPUT_CHAN__          64
+#define __FEATURES_9_CONV_4__OUTPUT_SIZE__          6
+#define __FEATURES_9_CONV_4__KERNEL_SIZE__          1
+#define __FEATURES_9_CONV_4__STRIDE_SIZE__          1
+#define __FEATURES_9_CONV_4__PADDING_SIZE__         0
+#define __FEATURES_10_CONV_0__INPUT_CHAN__          64
+#define __FEATURES_10_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_0__OUTPUT_CHAN__         384
+#define __FEATURES_10_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_10_CONV_2__INPUT_CHAN__          384
+#define __FEATURES_10_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_2__OUTPUT_CHAN__         384
+#define __FEATURES_10_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_10_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_10_CONV_4__INPUT_CHAN__          384
+#define __FEATURES_10_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_10_CONV_4__OUTPUT_CHAN__         64
+#define __FEATURES_10_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_10_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_10_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_10_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_0__INPUT_CHAN__          64
+#define __FEATURES_11_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_0__OUTPUT_CHAN__         384
+#define __FEATURES_11_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_11_CONV_2__INPUT_CHAN__          384
+#define __FEATURES_11_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_2__OUTPUT_CHAN__         384
+#define __FEATURES_11_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_11_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_11_CONV_4__INPUT_CHAN__          384
+#define __FEATURES_11_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_11_CONV_4__OUTPUT_CHAN__         96
+#define __FEATURES_11_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_11_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_11_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_11_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_0__INPUT_CHAN__          96
+#define __FEATURES_12_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_0__OUTPUT_CHAN__         576
+#define __FEATURES_12_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_12_CONV_2__INPUT_CHAN__          576
+#define __FEATURES_12_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_2__OUTPUT_CHAN__         576
+#define __FEATURES_12_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_12_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_12_CONV_4__INPUT_CHAN__          576
+#define __FEATURES_12_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_12_CONV_4__OUTPUT_CHAN__         96
+#define __FEATURES_12_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_12_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_12_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_12_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_0__INPUT_CHAN__          96
+#define __FEATURES_13_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_0__OUTPUT_CHAN__         576
+#define __FEATURES_13_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_13_CONV_2__INPUT_CHAN__          576
+#define __FEATURES_13_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_2__OUTPUT_CHAN__         576
+#define __FEATURES_13_CONV_2__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_13_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_13_CONV_4__INPUT_CHAN__          576
+#define __FEATURES_13_CONV_4__INPUT_SIZE__          6
+#define __FEATURES_13_CONV_4__OUTPUT_CHAN__         96
+#define __FEATURES_13_CONV_4__OUTPUT_SIZE__         6
+#define __FEATURES_13_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_13_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_13_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_0__INPUT_CHAN__          96
+#define __FEATURES_14_CONV_0__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_0__OUTPUT_CHAN__         576
+#define __FEATURES_14_CONV_0__OUTPUT_SIZE__         6
+#define __FEATURES_14_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_14_CONV_2__INPUT_CHAN__          576
+#define __FEATURES_14_CONV_2__INPUT_SIZE__          6
+#define __FEATURES_14_CONV_2__OUTPUT_CHAN__         576
+#define __FEATURES_14_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_14_CONV_2__STRIDE_SIZE__         2
+#define __FEATURES_14_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_14_CONV_4__INPUT_CHAN__          576
+#define __FEATURES_14_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_14_CONV_4__OUTPUT_CHAN__         160
+#define __FEATURES_14_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_14_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_14_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_14_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_0__INPUT_CHAN__          160
+#define __FEATURES_15_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_0__OUTPUT_CHAN__         960
+#define __FEATURES_15_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_15_CONV_2__INPUT_CHAN__          960
+#define __FEATURES_15_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_2__OUTPUT_CHAN__         960
+#define __FEATURES_15_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_15_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_15_CONV_4__INPUT_CHAN__          960
+#define __FEATURES_15_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_15_CONV_4__OUTPUT_CHAN__         160
+#define __FEATURES_15_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_15_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_15_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_15_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_0__INPUT_CHAN__          160
+#define __FEATURES_16_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_0__OUTPUT_CHAN__         960
+#define __FEATURES_16_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_16_CONV_2__INPUT_CHAN__          960
+#define __FEATURES_16_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_2__OUTPUT_CHAN__         960
+#define __FEATURES_16_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_16_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_16_CONV_4__INPUT_CHAN__          960
+#define __FEATURES_16_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_16_CONV_4__OUTPUT_CHAN__         160
+#define __FEATURES_16_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_16_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_16_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_16_CONV_4__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_0__INPUT_CHAN__          160
+#define __FEATURES_17_CONV_0__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_0__OUTPUT_CHAN__         960
+#define __FEATURES_17_CONV_0__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_0__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_0__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_0__PADDING_SIZE__        0
+#define __FEATURES_17_CONV_2__INPUT_CHAN__          960
+#define __FEATURES_17_CONV_2__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_2__OUTPUT_CHAN__         960
+#define __FEATURES_17_CONV_2__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_2__KERNEL_SIZE__         3
+#define __FEATURES_17_CONV_2__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_2__PADDING_SIZE__        1
+#define __FEATURES_17_CONV_4__INPUT_CHAN__          960
+#define __FEATURES_17_CONV_4__INPUT_SIZE__          3
+#define __FEATURES_17_CONV_4__OUTPUT_CHAN__         320
+#define __FEATURES_17_CONV_4__OUTPUT_SIZE__         3
+#define __FEATURES_17_CONV_4__KERNEL_SIZE__         1
+#define __FEATURES_17_CONV_4__STRIDE_SIZE__         1
+#define __FEATURES_17_CONV_4__PADDING_SIZE__        0
+#define __CONV_0__INPUT_CHAN__                      320
+#define __CONV_0__INPUT_SIZE__                      3
+#define __CONV_0__OUTPUT_CHAN__                     1280
+#define __CONV_0__OUTPUT_SIZE__                     3
+#define __CONV_0__KERNEL_SIZE__                     1
+#define __CONV_0__STRIDE_SIZE__                     1
+#define __CONV_0__PADDING_SIZE__                    0
+#define __MAX_INPUT_CH__                            960
+#define __MAX_OUT_SIZE__                            48
+#define __MAX_ACC_SIZE__                            960
+#define __MAX_BIAS_OUT_CH_SIZE__                    1280
+#define __AVG_POOLING_INPUT_CHAN_SIZE__             1280
+#define __AVG_POOLING_KERNEL_SIZE__                 3
+#define __AVG_POOLING_iMult_KERNEL__                227
+#define __AVG_POOLING__nShift_KERNEL__              11
+#define __LINEAR_ROW_SIZE__                         1000
+#define __LINEAR_DEPTH_SIZE__                       1280
+#define __NORMAL_CONV_MAX_INPUT_CHAN__              3
+#define __NORMAL_CONV_MAX_INPUT_SIZE__              96
+#define __NORMAL_CONV_MAX_OUTPUT_CHANNEL__          32
+#define __NORMAL_CONV_SP_WIEGHT_SIZE__              864
+#define __HEAD_PW_CONV_MAX_INPUT_CHAN__             32
+#define __HEAD_PW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_PW_CONV_MAX_OUTPUT_CHANNEL__         16
+#define __HEAD_PW_CONV_SP_WIEGHT_SIZE__             512
+#define __HEAD_DW_CONV_MAX_INPUT_CHAN__             32
+#define __HEAD_DW_CONV_MAX_INPUT_SIZE__             48
+#define __HEAD_DW_CONV_MAX_OUTPUT_CHANNEL__         32
+#define __HEAD_DW_CONV_SP_WIEGHT_SIZE__             288
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_CHAN__       160
+#define __EXPND_PW_CONV_STR1_MAX_INPUT_SIZE__       6
+#define __EXPND_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__   960
+#define __EXPND_PW_CONV_STR1_SP_WIEGHT_SIZE__       153600
+#define __EXPND_PW_CONV_STR1_GRP_CORE_SIZE__        32
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_CHAN__       96
+#define __EXPND_PW_CONV_STR2_MAX_INPUT_SIZE__       48
+#define __EXPND_PW_CONV_STR2_MAX_OUTPUT_CHANNEL__   576
+#define __EXPND_PW_CONV_STR2_SP_WIEGHT_SIZE__       55296
+#define __EXPND_PW_CONV_STR2_GRP_CORE_SIZE__        8
+#define __EXPND_PW_CONV_RES_MAX_INPUT_CHAN__        160
+#define __EXPND_PW_CONV_RES_MAX_INPUT_SIZE__        24
+#define __EXPND_PW_CONV_RES_MAX_OUTPUT_CHANNEL__    960
+#define __EXPND_PW_CONV_RES_SP_WIEGHT_SIZE__        153600
+#define __EXPND_PW_CONV_RES_GRP_CORE_SIZE__         8
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_CHAN__        960
+#define __PRJC_PW_CONV_STR1_MAX_INPUT_SIZE__        6
+#define __PRJC_PW_CONV_STR1_MAX_OUTPUT_CHANNEL__    320
+#define __PRJC_PW_CONV_STR1_SP_WIEGHT_SIZE__        307200
+#define __PRJC_PW_CONV_STR1_GRP_CORE_SIZE__         960
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_CHAN__    576
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_INPUT_SIZE__    24
+#define __PRJC_PW_PRJ_CONV_STR2_MAX_OUTPUT_CHANNEL__   160
+#define __PRJC_PW_PRJ_CONV_STR2_SP_WIEGHT_SIZE__    92160
+#define __PRJC_PW_PRJ_CONV_STR2_GRP_CORE_SIZE__     48
+#define __PRJC_PW_CONV_RES_MAX_INPUT_CHAN__         960
+#define __PRJC_PW_CONV_RES_MAX_INPUT_SIZE__         24
+#define __PRJC_PW_CONV_RES_MAX_OUTPUT_CHANNEL__     160
+#define __PRJC_PW_CONV_RES_SP_WIEGHT_SIZE__         153600
+#define __PRJC_PW_CONV_RES_GRP_CORE_SIZE__          48
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   160
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __EXP_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   960
+#define __EXP_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   153600
+#define __EXP_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   8
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_CHAN__   960
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_INPUT_SIZE__   24
+#define __PRJC_PW_STR1_RES_CMN_CONV_MAX_OUTPUT_CHANNEL__   320
+#define __PRJC_PW_STR1_RES_CMN_CONV_SP_WIEGHT_SIZE__   307200
+#define __PRJC_PW_STR1_RES_CMN_CONV_GRP_CORE_SIZE__   48
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_CHAN__        960
+#define __IRB_DW_CONV_STD_1_MAX_INPUT_SIZE__        6
+#define __IRB_DW_CONV_STD_1_MAX_OUTPUT_CHANNEL__    960
+#define __IRB_DW_CONV_STD_1_SP_WIEGHT_SIZE__        8640
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_CHAN__        576
+#define __IRB_DW_CONV_STD_2_MAX_INPUT_SIZE__        48
+#define __IRB_DW_CONV_STD_2_MAX_OUTPUT_CHANNEL__    576
+#define __IRB_DW_CONV_STD_2_SP_WIEGHT_SIZE__        5184
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_CHAN__    960
+#define __IRB_DW_CONV_STD_1_RES_MAX_INPUT_SIZE__    24
+#define __IRB_DW_CONV_STD_1_RES_MAX_OUTPUT_CHANNEL__   960
+#define __IRB_DW_CONV_STD_1_RES_SP_WIEGHT_SIZE__    8640
+#define __COMMON_PW_GRP_CORE_SIZE__                 8
+#define __MAX_DW_STR1_CONV_MAX_INPUT_CHAN__         960
+#define __MAX_DW_STR1_CONV_MAX_INPUT_SIZE__         24
+#define __MAX_DW_STR1_CONV_MAX_OUTPUT_CHANNEL__     960
+#define __MAX_DW_STR1_CONV_SP_WIEGHT_SIZE__         8640
+#define __TAIL_PW_CONV_MAX_INPUT_CHAN__             320
+#define __TAIL_PW_CONV_MAX_INPUT_SIZE__             3
+#define __TAIL_PW_CONV_MAX_OUTPUT_CHANNEL__         1280
+#define __TAIL_PW_CONV_SP_WIEGHT_SIZE__             409600
+#endif
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/boot.ld gem5-SALAM/benchmarks/mobilenetv2/sw/boot.ld
--- gem5/benchmarks/mobilenetv2/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/boot.ld	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/boot.s gem5-SALAM/benchmarks/mobilenetv2/sw/boot.s
--- gem5/benchmarks/mobilenetv2/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/boot.s	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,174 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ mn_head,         68
+.equ mn_body,         69
+.equ mn_tail,         70
+.equ mn_class,        71
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #0x00
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+    b irq_end
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/host.h gem5-SALAM/benchmarks/mobilenetv2/sw/host.h
--- gem5/benchmarks/mobilenetv2/sw/host.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/host.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,30 @@
+#include "../hw/source/common/support.h"
+#include "../head_hw_defines.h"
+#include "../body_hw_defines.h"
+#include "../tail_hw_defines.h"
+#include "../classifier_hw_defines.h"
+
+#define feats       0x8f000000
+#define weights     0x91000000
+#define qparams     0x93000000
+#define head_top    HEAD_TOP
+#define body_top    BODY_TOP
+#define tail_top    TAIL_TOP
+#define class_top   CLASSIFIER_TOP
+
+void runHead(uint64_t img_rd_addr, uint64_t feat_wr_addr,
+             uint64_t conv_weights, uint64_t conv_quant,
+             uint64_t dw_weights, uint64_t dw_quant,
+             uint64_t pw_weights, uint64_t pw_quant);
+
+void runBody(uint8_t phase, uint64_t feat_rd_addr,
+             uint64_t res_rd_addr, uint64_t feat_wr_addr,
+             uint64_t pw0_weights, uint64_t pw0_quant,
+             uint64_t dw0_weights, uint64_t dw0_quant,
+             uint64_t pw1_weights, uint64_t pw1_quant);
+
+void runTail(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+             uint64_t pw_weights, uint64_t pw_quant);
+
+void runClassifier(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+                   uint64_t weight, uint64_t quant);
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/isr.c gem5-SALAM/benchmarks/mobilenetv2/sw/isr.c
--- gem5/benchmarks/mobilenetv2/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/isr.c	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,2 @@
+#include <stdio.h>
+#include "host.h"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/main.cpp gem5-SALAM/benchmarks/mobilenetv2/sw/main.cpp
--- gem5/benchmarks/mobilenetv2/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/main.cpp	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,138 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "host.h"
+#include "../../common/m5ops.h"
+
+int main(void) {
+    volatile uint8_t  * head_MMR  = (uint8_t  *)(head_top);
+    volatile uint8_t  * body_MMR  = (uint8_t  *)(body_top);
+    volatile uint8_t  * tail_MMR  = (uint8_t  *)(tail_top);
+    volatile uint8_t  * class_MMR  = (uint8_t  *)(class_top);
+
+    m5_reset_stats();
+    unsigned phase, rs_offset, rd_offset, wr_offset;
+
+    // Run head
+    phase = 0;
+    printf("Current Stage: %d\n", phase);
+    rs_offset = (phase + 0) * 0x00100000;
+    rd_offset = (phase + 1) * 0x00100000;
+    wr_offset = (phase + 2) * 0x00100000;
+    runHead(phase,
+            feats+rd_offset,
+            feats+rs_offset,
+            feats+wr_offset,
+            weights, qparams,
+            weights, qparams);
+    while(*head_MMR != 0x04);
+
+    // Run body 15 times
+    for(int cur_phase=1; cur_phase<=15; cur_phase++){
+        printf("Current Stage: %d\n", cur_phase);
+        rs_offset = (cur_phase + 0) * 0x00100000;
+        rd_offset = (cur_phase + 1) * 0x00100000;
+        wr_offset = (cur_phase + 2) * 0x00100000;
+        runBody(cur_phase,
+                feats+rd_offset,
+                feats+rs_offset,
+                feats+wr_offset,
+                weights, qparams,
+                weights, qparams,
+                weights, qparams);
+        while(*body_MMR != 0x04);
+    }
+    // Run tail
+    phase = 16;
+    printf("Current Stage: %d\n", phase);
+    runTail(feats+0x01100000,
+            feats+0x01200000,
+            weights, qparams);
+    while(*tail_MMR != 0x04);
+    // Run classifier
+    phase = 17;
+    printf("Current Stage: %d\n", phase);
+    runClassifier(feats+0x01100000,
+            feats+0x01200000,
+            weights, qparams);
+    while(*class_MMR != 0x04);
+
+    m5_dump_stats();
+    m5_exit();
+    return 0;
+}
+
+void runHead(uint64_t img_rd_addr, uint64_t feat_wr_addr,
+             uint64_t conv_weights, uint64_t conv_quant,
+             uint64_t dw_weights, uint64_t dw_quant,
+             uint64_t pw_weights, uint64_t pw_quant) {
+    uint8_t  * MMR  = (uint8_t  *)(head_top);
+    uint64_t * ARGS = (uint64_t *)(head_top+1);
+    printf("Setting args for HEAD\n");
+    ARGS[0] = img_rd_addr;
+    ARGS[1] = feat_wr_addr;
+    ARGS[2] = conv_weights;
+    ARGS[3] = conv_quant;
+    ARGS[4] = dw_weights;
+    ARGS[5] = dw_quant;
+    ARGS[6] = pw_weights;
+    ARGS[7] = pw_quant;
+    printf("Running HEAD\n");
+    MMR[0]  = 0x01;
+}
+
+void runBody(uint8_t phase, uint64_t feat_rd_addr,
+             uint64_t res_rd_addr, uint64_t feat_wr_addr,
+             uint64_t pw0_weights, uint64_t pw0_quant,
+             uint64_t dw0_weights, uint64_t dw0_quant,
+             uint64_t pw1_weights, uint64_t pw1_quant) {
+
+    volatile uint8_t  * MMR  = (uint8_t  *)(body_top);
+    volatile uint64_t * ARGS = (uint64_t *)(body_top+1);
+    volatile uint64_t count;
+
+    printf("Setting args for BODY\n");
+    ARGS[0] = feat_rd_addr;
+    ARGS[1] = res_rd_addr;
+    ARGS[2] = feat_wr_addr;
+    ARGS[3] = pw0_weights;
+    ARGS[4] = pw0_quant;
+    ARGS[5] = dw0_weights;
+    ARGS[6] = dw0_quant;
+    ARGS[7] = pw1_weights;
+    ARGS[8] = pw1_quant;
+    ARGS[9]  = phase;
+
+    printf("Running BODY\n");
+    MMR[0]  = 0x01;
+}
+
+void runTail(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+             uint64_t pw_weights, uint64_t pw_quant) {
+    uint8_t  * MMR  = (uint8_t  *)(tail_top);
+    uint64_t * ARGS = (uint64_t *)(tail_top+1);
+
+    printf("Setting args for TAIL\n");
+    ARGS[0] = feat_rd_addr;
+    ARGS[1] = feat_wr_addr;
+    ARGS[2] = pw_weights;
+    ARGS[3] = pw_quant;
+
+    printf("Running TAIL\n");
+    MMR[0]  = 0x01;
+}
+
+void runClassifier(uint64_t feat_rd_addr, uint64_t feat_wr_addr,
+                   uint64_t weight, uint64_t quant) {
+    uint8_t  * MMR  = (uint8_t  *)(class_top);
+    uint64_t * ARGS = (uint64_t *)(class_top+1);
+
+    printf("Setting args for CLASSIFIER\n");
+    ARGS[0] = feat_rd_addr;
+    ARGS[1] = feat_wr_addr;
+    ARGS[2] = weight;
+    ARGS[3] = quant;
+
+    printf("Running CLASSIFIER\n");
+    MMR[0]  = 0x01;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/sw/Makefile gem5-SALAM/benchmarks/mobilenetv2/sw/Makefile
--- gem5/benchmarks/mobilenetv2/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/sw/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,46 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../common/Makefile
+
+OBJS         = boot.o ../../common/syscalls.o main.o isr.o
+
+all: clean main.elf
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/mobilenetv2/tail_hw_defines.h gem5-SALAM/benchmarks/mobilenetv2/tail_hw_defines.h
--- gem5/benchmarks/mobilenetv2/tail_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/mobilenetv2/tail_hw_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,39 @@
+//BEGIN GENERATED CODE
+//Cluster: TAIL
+//NonCoherentDMA
+#define TAIL_DMA_Flags 0x1003a6c0
+#define TAIL_DMA_RdAddr 0x1003a6c1
+#define TAIL_DMA_WrAddr 0x1003a6c9
+#define TAIL_DMA_CopyLen 0x1003a6d1
+//StreamDMA
+#define TAIL_STREAM_DMA0_Flags 0x1003a700
+#define TAIL_STREAM_DMA0_RdAddr 0x1003a704
+#define TAIL_STREAM_DMA0_WrAddr 0x1003a70c
+#define TAIL_STREAM_DMA0_RdFrameSize 0x1003a714
+#define TAIL_STREAM_DMA0_NumRdFrames 0x1003a718
+#define TAIL_STREAM_DMA0_RdFrameBufSize 0x1003a719
+#define TAIL_STREAM_DMA0_WrFrameSize 0x1003a71a
+#define TAIL_STREAM_DMA0_NumWrFrames 0x1003a71e
+#define TAIL_STREAM_DMA0_WrFrameBufSize 0x1003a71f
+#define TAIL_STREAM_DMA0_Stream 0x1003a720
+#define TAIL_STREAM_DMA0_Status 0x1003a740
+//Accelerator: TAIL_TOP
+#define TAIL_TOP 0x1003a780
+//Accelerator: TAIL_PWCONV
+#define TAIL_PWCONV 0x1003a800
+#define tail_PWConvLocalFeats 0x1003a840
+#define tail_PWConvWeights 0x1003a8c0
+#define tail_PWBias 0x1005d900
+#define tail_PWIMultBias 0x1005de40
+#define tail_PWNShiftBias 0x1005e380
+#define tail_PWIMultOut 0x1005e8c0
+#define tail_PWNShiftOut 0x1005ee00
+#define tail_PWWeightZP 0x1005f340
+#define tail_PWConvOut 0x1005f880
+#define tail_PWConvOut_Status 0x1005f8c0
+//Accelerator: TAIL_RESHAPE
+#define TAIL_RESHAPE 0x1005f900
+#define tail_ReshapeOut 0x1005f940
+//Accelerator: TAIL_AVGPOOL
+#define TAIL_AVGPOOL 0x10062680
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/bfs_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/bfs/bfs_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/bfs/bfs_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/bfs_clstr_hw_defines.h	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,16 @@
+//BEGIN GENERATED CODE
+//Cluster: BFS_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: BFS
+#define BFS 0x10020080
+#define NODES 0x100200c0
+#define EDGES 0x10020900
+#define LEVELS 0x10024940
+#define LEVELCOUNTS 0x10024a80
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/bfs/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,246 @@
+instructions:
+  add:
+    functional_unit: 1
+    functional_unit_limit: 0
+    opcode_num: 13
+    runtime_cycles: 0
+  addrspacecast:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    functional_unit_limit: 0
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    functional_unit_limit: 0
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 49
+    runtime_cycles: 0
+  br:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 5
+    functional_unit_limit: 0
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    functional_unit_limit: 0
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 35
+    runtime_cycles: 0
+  fmul:
+    functional_unit: 7
+    functional_unit_limit: 0
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 46
+    runtime_cycles: 0
+  fptosi:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 42
+    runtime_cycles: 0
+  fptoui:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 41
+    runtime_cycles: 0
+  fptrunc:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 45
+    runtime_cycles: 0
+  frem:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    functional_unit_limit: 0
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 34
+    runtime_cycles: 0
+  icmp:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 53
+    runtime_cycles: 0
+  indirectbr:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 48
+    runtime_cycles: 0
+  invoke:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    functional_unit_limit: 0
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    functional_unit_limit: 0
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    functional_unit_limit: 0
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 47
+    runtime_cycles: 0
+  resume:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    functional_unit_limit: 0
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 40
+    runtime_cycles: 0
+  shl:
+    functional_unit: 3
+    functional_unit_limit: 0
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    functional_unit_limit: 0
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 38
+    runtime_cycles: 0
+  udiv:
+    functional_unit: 2
+    functional_unit_limit: 0
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 43
+    runtime_cycles: 0
+  unreachable:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    functional_unit_limit: 0
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    functional_unit_limit: 0
+    opcode_num: 39
+    runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/bfs/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/bfs/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/configs/quick_config.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/config.yml gem5-SALAM/benchmarks/sys_validation/bfs/config.yml
--- gem5/benchmarks/sys_validation/bfs/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/config.yml	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,298 @@
+---
+acc_cluster:
+  - Name: bfs_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 128
+      BufferSize: 256
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 37
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: bfs
+      IrPath: hw/bfs.ll
+      Debug: False
+      PIOSize: 5
+      PIOMaster: LocalBus
+    - Var:
+      - Name: NODES
+        Type: RegisterBank
+        Size: 2048
+        Ports: 1
+        ReadyMode: False
+    - Var:
+      - Name: EDGES
+        Type: RegisterBank
+        Size: 16384
+        Ports: 1
+        ReadyMode: False
+    - Var:
+      - Name: LEVELS
+        Type: RegisterBank
+        Size: 256
+        Ports: 1
+        ReadyMode: False
+    - Var:
+      - Name: LEVELCOUNTS
+        Type: RegisterBank
+        Size: 40
+        Ports: 1
+        ReadyMode: False
+hw_config:
+  top:
+  bfs:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 1
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 0
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 1
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 0
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/defines.h gem5-SALAM/benchmarks/sys_validation/bfs/defines.h
--- gem5/benchmarks/sys_validation/bfs/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/defines.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdio.h>
+#include <string.h>
+
+#define CHECK
+
+#define MAX_LEVEL INT8_MAX
+
+// Terminology (but not values) from graph500 spec
+//   graph density = 2^-(2*SCALE - EDGE_FACTOR)
+#define SCALE 8
+#define EDGE_FACTOR 16
+
+#define N_NODES (1LL<<SCALE)
+#define N_EDGES (N_NODES*EDGE_FACTOR)
+
+// upper limit
+#define N_LEVELS 10
+
+typedef uint32_t TYPE;
+
+// Larger than necessary for small graphs, but appropriate for large ones
+typedef TYPE edge_index_t;
+typedef TYPE node_index_t;
+typedef int8_t level_t;
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/.gitignore gem5-SALAM/benchmarks/sys_validation/bfs/.gitignore
--- gem5/benchmarks/sys_validation/bfs/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/.gitignore	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1 @@
+config.ini
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/bfs.c gem5-SALAM/benchmarks/sys_validation/bfs/hw/bfs.c
--- gem5/benchmarks/sys_validation/bfs/hw/bfs.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/bfs.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,51 @@
+/*
+Implementations based on:
+Harish and Narayanan. "Accelerating large graph algorithms on the GPU using CUDA." HiPC, 2007.
+Hong, Oguntebi, Olukotun. "Efficient Parallel Graph Exploration on Multi-Core CPU and GPU." PACT, 2011.
+*/
+
+#include "hw_defines.h"
+
+void bfs(node_index_t starting_node) {
+
+  // volatile uint8_t      * nodes_base        = (uint8_t      *)NODESADDR;
+  // volatile uint8_t      * edges_base        = (uint8_t      *)EDGESADDR;
+  // volatile uint8_t      * level_base        = (uint8_t      *)LEVELADDR;
+  // volatile uint8_t      * level_counts_base = (uint8_t      *)LEVELCOUNTSADDR;
+  volatile node_t       * nodes             = (node_t       *)NODES;
+  volatile edge_t       * edges             = (edge_t       *)EDGES;
+  volatile level_t      * level             = (level_t      *)LEVELS;
+  volatile edge_index_t * level_counts      = (edge_index_t *)LEVELCOUNTS;
+
+  node_index_t n;
+  edge_index_t e;
+  level_t horizon;
+  edge_index_t cnt;
+
+  level[starting_node] = 0;
+  level_counts[0] = 1;
+  #pragma nounroll
+  for( horizon=0; horizon<N_LEVELS; horizon++ ) {
+    cnt = 0;
+    // Add unmarked neighbors of the current horizon to the next horizon
+    #pragma nounroll
+    for( n=0; n<N_NODES; n++ ) {
+      if( level[n]==horizon ) {
+        edge_index_t tmp_begin = nodes[n].edge_begin;
+        edge_index_t tmp_end = nodes[n].edge_end;
+        #pragma nounroll
+        for( e=tmp_begin; e<tmp_end; e++ ) {
+          node_index_t tmp_dst = edges[e].dst;
+          level_t tmp_level = level[tmp_dst];
+
+          if( tmp_level ==MAX_LEVEL ) { // Unmarked
+            level[tmp_dst] = horizon+1;
+            ++cnt;
+          }
+        }
+      }
+    }
+    if( (level_counts[horizon+1]=cnt)==0 )
+      break;
+  }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/bfs.h gem5-SALAM/benchmarks/sys_validation/bfs/hw/bfs.h
--- gem5/benchmarks/sys_validation/bfs/hw/bfs.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/bfs.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,22 @@
+/*
+Implementations based on:
+Harish and Narayanan. "Accelerating large graph algorithms on the GPU using CUDA." HiPC, 2007.
+Hong, Oguntebi, Olukotun. "Efficient Parallel Graph Exploration on Multi-Core CPU and GPU." PACT, 2011.
+*/
+
+#include "../defines.h"
+
+typedef struct edge_t_struct {
+  // These fields are common in practice, but we elect not to use them.
+  //weight_t weight;
+  //node_index_t src;
+  node_index_t dst;
+} edge_t;
+
+typedef struct node_t_struct {
+  edge_index_t edge_begin;
+  edge_index_t edge_end;
+} node_t;
+
+void bfs(node_t nodes[N_NODES], edge_t edges[N_EDGES], node_index_t starting_node, level_t level[N_NODES], edge_index_t level_counts[N_LEVELS]);
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/bfs/hw/.gitignore
--- gem5/benchmarks/sys_validation/bfs/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/.gitignore	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/bfs/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/bfs/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/hw_defines.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,30 @@
+/*
+Implementations based on:
+Harish and Narayanan. "Accelerating large graph algorithms on the GPU using CUDA." HiPC, 2007.
+Hong, Oguntebi, Olukotun. "Efficient Parallel Graph Exploration on Multi-Core CPU and GPU." PACT, 2011.
+*/
+
+#include "../defines.h"
+#include "../bfs_clstr_hw_defines.h"
+
+typedef struct edge_t_struct {
+  // These fields are common in practice, but we elect not to use them.
+  //weight_t weight;
+  //node_index_t src;
+  node_index_t dst;
+} edge_t;
+
+typedef struct node_t_struct {
+  edge_index_t edge_begin;
+  edge_index_t edge_end;
+} node_t;
+
+// void bfs(node_t nodes[N_NODES], edge_t edges[N_EDGES], node_index_t starting_node, level_t level[N_NODES], edge_index_t level_counts[N_LEVELS]);
+
+#define DEV_INIT		0x01
+#define DEV_INTR		0x04
+
+#define NODESSIZE		N_NODES  * sizeof(node_t)
+#define EDGESSIZE		N_EDGES  * sizeof(edge_t)
+#define LEVELSIZE		N_NODES  * sizeof(level_t)
+#define LVLCNTSIZE		N_LEVELS * sizeof(edge_index_t)
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/Makefile gem5-SALAM/benchmarks/sys_validation/bfs/hw/Makefile
--- gem5/benchmarks/sys_validation/bfs/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/Makefile	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,8 @@
+TARGET=bfs.ll top.ll
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build : $(TARGET)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/support.h gem5-SALAM/benchmarks/sys_validation/bfs/hw/support.h
--- gem5/benchmarks/sys_validation/bfs/hw/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/support.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,135 @@
+#include <stdlib.h>
+#include <inttypes.h>
+
+///// File and section functions
+char *readfile(int fd);
+char *find_section_start(char *s, int n);
+
+///// Array read functions
+#define SECTION_TERMINATED -1
+int parse_string(char *s, char *arr, int n); // n==-1 : %%-terminated
+int parse_uint8_t_array(char *s, uint8_t *arr, int n);
+int parse_uint16_t_array(char *s, uint16_t *arr, int n);
+int parse_uint32_t_array(char *s, uint32_t *arr, int n);
+int parse_uint64_t_array(char *s, uint64_t *arr, int n);
+int parse_int8_t_array(char *s, int8_t *arr, int n);
+int parse_int16_t_array(char *s, int16_t *arr, int n);
+int parse_int32_t_array(char *s, int32_t *arr, int n);
+int parse_int64_t_array(char *s, int64_t *arr, int n);
+int parse_float_array(char *s, float *arr, int n);
+int parse_double_array(char *s, double *arr, int n);
+
+///// Array write functions
+int write_string(int fd, char *arr, int n);
+int write_uint8_t_array(int fd, uint8_t *arr, int n);
+int write_uint16_t_array(int fd, uint16_t *arr, int n);
+int write_uint32_t_array(int fd, uint32_t *arr, int n);
+int write_uint64_t_array(int fd, uint64_t *arr, int n);
+int write_int8_t_array(int fd, int8_t *arr, int n);
+int write_int16_t_array(int fd, int16_t *arr, int n);
+int write_int32_t_array(int fd, int32_t *arr, int n);
+int write_int64_t_array(int fd, int64_t *arr, int n);
+int write_float_array(int fd, float *arr, int n);
+int write_double_array(int fd, double *arr, int n);
+
+int write_section_header(int fd);
+
+///// Per-benchmark files
+void run_benchmark( void *vargs );
+void input_to_data(int fd, void *vdata);
+void data_to_input(int fd, void *vdata);
+void output_to_data(int fd, void *vdata);
+void data_to_output(int fd, void *vdata);
+int check_data(void *vdata, void *vref);
+
+extern int INPUT_SIZE;
+
+///// TYPE macros
+// Macro trick to automatically expand TYPE into the appropriate function
+// (S)et (T)ype (A)nd (C)oncatenate
+#define __STAC_EXPANDED(f_pfx,t,f_sfx) f_pfx##t##f_sfx
+#define STAC(f_pfx,t,f_sfx) __STAC_EXPANDED(f_pfx,t,f_sfx)
+// Invoke like this:
+//   #define TYPE int32_t
+//   STAC(write_,TYPE,_array)(fd, array, n);
+// where array is of type (TYPE *)
+// This translates to:
+//   write_int32_t_array(fd, array, n);
+
+
+/**** PRNG library. Available at https://github.com/rdadolf/prng. *****/
+#ifndef __PRNG_H__
+#define __PRNG_H__
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#define LAG1 (UINT16_C(24))
+#define LAG2 (UINT16_C(55))
+#define RAND_SSIZE ((UINT16_C(1))<<6)
+#define RAND_SMASK (RAND_SSIZE-1)
+#define RAND_EXHAUST_LIMIT LAG2
+// 10x is a heuristic, it just needs to be large enough to remove correlation
+#define RAND_REFILL_COUNT ((LAG2*10)-RAND_EXHAUST_LIMIT)
+struct prng_rand_t {
+  uint64_t s[RAND_SSIZE]; // Lags
+  uint_fast16_t i; // Location of the current lag
+  uint_fast16_t c; // Exhaustion count
+};
+
+#define PRNG_RAND_MAX UINT64_MAX
+
+
+static inline uint64_t prng_rand(struct prng_rand_t *state) {
+  uint_fast16_t i;
+  uint_fast16_t r, new_rands=0;
+
+  if( !state->c ) { // Randomness exhausted, run forward to refill
+    new_rands += RAND_REFILL_COUNT+1;
+    state->c = RAND_EXHAUST_LIMIT-1;
+  } else {
+    new_rands = 1;
+    state->c--;
+  }
+
+  for( r=0; r<new_rands; r++ ) {
+    i = state->i;
+    state->s[i&RAND_SMASK] = state->s[(i+RAND_SSIZE-LAG1)&RAND_SMASK]
+                              + state->s[(i+RAND_SSIZE-LAG2)&RAND_SMASK];
+    state->i++;
+  }
+  return state->s[i&RAND_SMASK];
+}
+
+static inline void prng_srand(uint64_t seed, struct prng_rand_t *state) {
+  uint_fast16_t i;
+  // Naive seed
+  state->c = RAND_EXHAUST_LIMIT;
+  state->i = 0;
+
+  state->s[0] = seed;
+  for(i=1; i<RAND_SSIZE; i++) {
+    // Arbitrary magic, mostly to eliminate the effect of low-value seeds.
+    // Probably could be better, but the run-up obviates any real need to.
+    state->s[i] = i*(UINT64_C(2147483647)) + seed;
+  }
+
+  // Run forward 10,000 numbers
+  for(i=0; i<10000; i++) {
+    prng_rand(state);
+  }
+}
+
+// Clean up our macros
+#undef LAG1
+#undef LAG2
+#undef RAND_SSIZE
+#undef RAND_SMASK
+#undef RAND_EXHAUST_LIMIT
+#undef RAND_REFILL_COUNT
+
+// PRNG_RAND_MAX is exported
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/hw/top.c gem5-SALAM/benchmarks/sys_validation/bfs/hw/top.c
--- gem5/benchmarks/sys_validation/bfs/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/hw/top.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,54 @@
+#include "hw_defines.h"
+
+void top(uint64_t nodes_addr,
+		 uint64_t edges_addr,
+		 uint64_t levels_addr,
+		 uint64_t level_counts_addr,
+		 node_index_t starting_node) {
+
+	//Define Device MMRs
+	volatile uint8_t  * BFSFlags   = (uint8_t *)(BFS);
+	volatile uint8_t  * BFSConfig  = (uint8_t *)(BFS+1);
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer Nodes
+	*DmaRdAddr  = nodes_addr;
+	*DmaWrAddr  = NODES;
+	*DmaCopyLen = NODESSIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer Edges
+	*DmaRdAddr  = edges_addr;
+	*DmaWrAddr  = EDGES;
+	*DmaCopyLen = EDGESSIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer Levels
+	*DmaRdAddr  = levels_addr;
+	*DmaWrAddr  = LEVELS;
+	*DmaCopyLen = LEVELSIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*(node_index_t *)BFSConfig = starting_node;
+	*BFSFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*BFSFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer level_counts
+	*DmaRdAddr  = LEVELCOUNTS;
+	*DmaWrAddr  = level_counts_addr;
+	*DmaCopyLen = LVLCNTSIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/Makefile gem5-SALAM/benchmarks/sys_validation/bfs/Makefile
--- gem5/benchmarks/sys_validation/bfs/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/bench.h gem5-SALAM/benchmarks/sys_validation/bfs/sw/bench.h
--- gem5/benchmarks/sys_validation/bfs/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/bench.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,34 @@
+#ifndef DEFINES
+#include "../defines.h"
+#endif
+
+volatile int stage;
+
+#include "data.h"
+
+typedef struct {
+    node_index_t * nodes;
+    edge_index_t * edges;
+    level_t      * level;
+    edge_index_t * level_counts;
+    node_index_t starting_node;
+    edge_index_t * check;
+} bfs_struct;
+
+void genData(bfs_struct * bfs) {
+    int i;
+
+    bfs->starting_node = start;
+    for (i = 0; i < 2*N_NODES; i++) {
+        bfs->nodes[i] = nod[i];
+    }
+    for (i = 0; i < N_EDGES; i++) {
+        bfs->edges[i] = edg[i];
+    }
+    for (i = 0; i < N_LEVELS; i++) {
+        bfs->check[i] = chk[i];
+    }
+    for (i = 0; i < N_NODES; i++) {
+        bfs->level[i] = MAX_LEVEL;
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/bfs/sw/boot.ld
--- gem5/benchmarks/sys_validation/bfs/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/boot.ld	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/boot.s gem5-SALAM/benchmarks/sys_validation/bfs/sw/boot.s
--- gem5/benchmarks/sys_validation/bfs/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/boot.s	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/data.c gem5-SALAM/benchmarks/sys_validation/bfs/sw/data.c
--- gem5/benchmarks/sys_validation/bfs/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/data.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,9 @@
+#include "data.h"
+
+const node_index_t start = 38;
+
+const node_index_t nod[2*N_NODES] = {0, 5, 5, 26, 26, 28, 28, 54, 54, 61, 61, 109, 109, 128, 128, 134, 134, 160, 160, 204, 204, 302, 302, 323, 323, 331, 331, 332, 332, 335, 335, 335, 335, 337, 337, 348, 348, 350, 350, 445, 445, 452, 452, 478, 478, 488, 488, 493, 493, 493, 493, 495, 495, 499, 499, 510, 510, 512, 512, 669, 669, 670, 670, 715, 715, 724, 724, 727, 727, 743, 743, 743, 743, 747, 747, 748, 748, 774, 774, 797, 797, 805, 805, 810, 810, 818, 818, 833, 833, 841, 841, 933, 933, 933, 933, 939, 939, 939, 939, 939, 939, 940, 940, 966, 966, 977, 977, 977, 977, 977, 977, 983, 983, 1028, 1028, 1030, 1030, 1033, 1033, 1051, 1051, 1058, 1058, 1065, 1065, 1072, 1072, 1117, 1117, 1125, 1125, 1133, 1133, 1173, 1173, 1220, 1220, 1237, 1237, 1261, 1261, 1268, 1268, 1272, 1272, 1317, 1317, 1339, 1339, 1362, 1362, 1410, 1410, 1414, 1414, 1414, 1414, 1421, 1421, 1437, 1437, 1440, 1440, 1464, 1464, 1506, 1506, 1509, 1509, 1549, 1549, 1568, 1568, 1579, 1579, 1629, 1629, 1632, 1632, 1652, 1652, 1652, 1652, 1652, 1652, 1657, 1657, 1676, 1676, 1694, 1694, 1713, 1713, 1799, 1799, 1800, 1800, 1843, 1843, 1847, 1847, 1848, 1848, 1942, 1942, 1943, 1943, 1948, 1948, 1975, 1975, 2064, 2064, 2070, 2070, 2077, 2077, 2081, 2081, 2083, 2083, 2086, 2086, 2087, 2087, 2102, 2102, 2122, 2122, 2135, 2135, 2141, 2141, 2192, 2192, 2235, 2235, 2240, 2240, 2241, 2241, 2245, 2245, 2245, 2245, 2245, 2245, 2250, 2250, 2266, 2266, 2285, 2285, 2292, 2292, 2295, 2295, 2319, 2319, 2322, 2322, 2343, 2343, 2343, 2343, 2345, 2345, 2349, 2349, 2353, 2353, 2370, 2370, 2381, 2381, 2394, 2394, 2414, 2414, 2414, 2414, 2420, 2420, 2440, 2440, 2485, 2485, 2491, 2491, 2501, 2501, 2589, 2589, 2597, 2597, 2598, 2598, 2598, 2598, 2619, 2619, 2640, 2640, 2645, 2645, 2652, 2652, 2658, 2658, 2667, 2667, 2717, 2717, 2722, 2722, 2726, 2726, 2750, 2750, 2790, 2790, 2797, 2797, 2802, 2802, 2850, 2850, 2851, 2851, 2861, 2861, 2861, 2861, 2863, 2863, 2866, 2866, 2868, 2868, 2877, 2877, 2903, 2903, 2917, 2917, 2918, 2918, 2921, 2921, 2929, 2929, 2930, 2930, 2931, 2931, 2954, 2954, 2972, 2972, 2973, 2973, 2983, 2983, 2996, 2996, 3011, 3011, 3071, 3071, 3075, 3075, 3083, 3083, 3092, 3092, 3117, 3117, 3125, 3125, 3146, 3146, 3149, 3149, 3157, 3157, 3158, 3158, 3159, 3159, 3160, 3160, 3180, 3180, 3181, 3181, 3181, 3181, 3245, 3245, 3248, 3248, 3251, 3251, 3254, 3254, 3256, 3256, 3280, 3280, 3301, 3301, 3311, 3311, 3361, 3361, 3413, 3413, 3417, 3417, 3431, 3431, 3431, 3431, 3431, 3431, 3433, 3433, 3453, 3453, 3552, 3552, 3570, 3570, 3586, 3586, 3594, 3594, 3595, 3595, 3602, 3602, 3630, 3630, 3689, 3689, 3696, 3696, 3698, 3698, 3717, 3717, 3738, 3738, 3746, 3746, 3754, 3754, 3755, 3755, 3756, 3756, 3757, 3757, 3805, 3805, 3825, 3825, 3833, 3833, 3833, 3833, 3840, 3840, 3844, 3844, 3881, 3881, 3882, 3882, 3883, 3883, 3930, 3930, 3940, 3940, 3941, 3941, 3944, 3944, 3944, 3944, 3963, 3963, 3966, 3966, 3974, 3974, 3985, 3985, 3985, 3985, 4012, 4012, 4034, 4034, 4037, 4037, 4039, 4039, 4088, 4088, 4096};
+
+const edge_index_t edg[N_EDGES] = {45, 93, 204, 207, 232, 7, 9, 10, 19, 29, 66, 101, 105, 116, 130, 134, 140, 145, 158, 186, 198, 213, 214, 220, 221, 237, 29, 105, 9, 10, 19, 29, 39, 45, 63, 73, 74, 82, 83, 96, 98, 101, 105, 112, 145, 150, 180, 183, 198, 203, 205, 214, 221, 254, 29, 45, 96, 125, 137, 190, 231, 7, 9, 10, 17, 19, 21, 29, 31, 33, 45, 51, 56, 67, 81, 82, 84, 87, 89, 96, 101, 116, 117, 125, 128, 130, 136, 137, 145, 155, 159, 162, 164, 167, 187, 189, 208, 214, 215, 220, 221, 231, 235, 237, 240, 241, 245, 250, 254, 19, 21, 29, 31, 38, 40, 45, 66, 73, 81, 82, 87, 96, 105, 141, 145, 159, 221, 237, 1, 5, 96, 152, 170, 214, 9, 19, 27, 29, 38, 45, 67, 68, 73, 79, 86, 89, 96, 98, 101, 105, 158, 159, 183, 187, 198, 207, 214, 220, 231, 232, 1, 3, 5, 8, 10, 19, 29, 31, 32, 38, 51, 65, 66, 72, 75, 87, 89, 96, 99, 101, 105, 116, 125, 130, 143, 145, 153, 155, 158, 185, 187, 189, 191, 196, 198, 206, 207, 214, 221, 232, 235, 237, 240, 251, 1, 3, 5, 9, 11, 12, 19, 20, 21, 29, 31, 38, 39, 44, 45, 51, 56, 62, 63, 66, 67, 68, 69, 72, 73, 74, 75, 76, 79, 81, 82, 84, 85, 87, 93, 94, 96, 101, 104, 105, 107, 114, 115, 116, 117, 118, 120, 123, 124, 125, 128, 137, 138, 141, 142, 144, 145, 149, 150, 151, 154, 155, 159, 162, 170, 178, 180, 182, 183, 184, 185, 187, 188, 189, 198, 204, 205, 206, 207, 209, 212, 213, 214, 216, 218, 220, 221, 222, 224, 226, 227, 231, 232, 233, 245, 248, 251, 254, 10, 29, 36, 51, 67, 72, 87, 96, 98, 117, 149, 150, 162, 183, 198, 206, 214, 220, 222, 229, 240, 10, 14, 45, 69, 155, 183, 203, 254, 162, 12, 105, 106, 68, 101, 5, 29, 51, 63, 105, 142, 183, 220, 239, 240, 254, 66, 101, 1, 3, 5, 6, 8, 9, 10, 20, 29, 31, 39, 42, 43, 45, 55, 56, 60, 63, 65, 66, 67, 72, 73, 75, 81, 82, 84, 85, 87, 89, 94, 95, 96, 98, 99, 101, 102, 104, 105, 113, 116, 117, 124, 128, 130, 135, 136, 138, 141, 142, 145, 146, 149, 153, 155, 157, 158, 159, 160, 162, 164, 170, 171, 178, 180, 182, 183, 184, 186, 189, 191, 195, 198, 199, 203, 204, 205, 206, 207, 209, 214, 215, 216, 219, 220, 221, 224, 225, 231, 237, 240, 245, 251, 253, 254, 10, 19, 29, 130, 170, 214, 240, 5, 6, 10, 29, 44, 45, 63, 74, 96, 101, 105, 114, 116, 142, 145, 155, 159, 170, 171, 177, 187, 206, 214, 224, 231, 254, 29, 45, 47, 73, 96, 103, 137, 177, 236, 237, 29, 56, 96, 135, 198, 45, 183, 29, 207, 214, 232, 8, 29, 39, 101, 104, 117, 135, 161, 183, 214, 251, 145, 221, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 17, 19, 20, 21, 22, 23, 26, 27, 31, 32, 33, 34, 38, 39, 42, 43, 45, 47, 50, 51, 52, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 79, 81, 82, 84, 85, 87, 89, 92, 95, 96, 98, 101, 104, 105, 108, 109, 110, 113, 114, 116, 117, 118, 123, 124, 125, 126, 128, 129, 130, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 170, 171, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 198, 200, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 228, 230, 231, 232, 236, 237, 238, 240, 241, 243, 245, 246, 247, 250, 251, 252, 253, 254, 63, 5, 6, 9, 10, 19, 29, 38, 39, 44, 45, 56, 59, 66, 72, 75, 82, 92, 95, 96, 98, 101, 105, 116, 117, 125, 128, 130, 136, 142, 145, 149, 155, 158, 178, 187, 189, 198, 214, 221, 231, 232, 237, 240, 241, 250, 9, 29, 61, 81, 96, 105, 135, 214, 243, 5, 29, 235, 29, 67, 72, 75, 84, 87, 105, 108, 155, 157, 162, 171, 189, 198, 214, 221, 11, 145, 198, 221, 170, 6, 8, 9, 10, 29, 31, 56, 66, 69, 87, 101, 117, 125, 141, 142, 145, 149, 162, 174, 182, 198, 220, 221, 240, 245, 250, 3, 10, 19, 27, 29, 31, 45, 75, 84, 101, 105, 117, 145, 155, 156, 159, 162, 167, 198, 206, 214, 219, 235, 6, 63, 101, 204, 214, 221, 225, 250, 72, 75, 96, 101, 155, 19, 29, 62, 72, 178, 195, 206, 237, 19, 29, 45, 69, 75, 87, 96, 101, 104, 117, 183, 198, 206, 214, 245, 10, 21, 31, 45, 66, 101, 162, 221, 0, 3, 4, 5, 6, 8, 10, 12, 19, 21, 22, 25, 29, 31, 39, 43, 44, 51, 56, 59, 63, 66, 67, 70, 72, 73, 75, 79, 80, 81, 82, 84, 85, 87, 93, 94, 96, 98, 99, 101, 104, 105, 106, 107, 113, 116, 117, 124, 128, 132, 137, 138, 142, 145, 146, 149, 150, 151, 154, 155, 158, 159, 162, 169, 170, 177, 178, 183, 187, 195, 198, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 220, 221, 222, 224, 225, 231, 233, 237, 240, 241, 254, 22, 29, 96, 170, 214, 219, 29, 5, 9, 10, 11, 17, 29, 45, 57, 63, 75, 101, 105, 132, 142, 145, 159, 162, 174, 189, 198, 209, 214, 220, 231, 237, 248, 29, 61, 63, 105, 112, 113, 130, 215, 224, 240, 255, 19, 29, 98, 103, 207, 245, 5, 10, 19, 23, 29, 31, 38, 45, 63, 67, 68, 71, 72, 84, 85, 87, 96, 101, 104, 105, 116, 117, 124, 130, 138, 142, 145, 150, 178, 181, 183, 195, 198, 203, 204, 206, 207, 213, 214, 220, 221, 225, 237, 240, 250, 51, 155, 29, 59, 198, 29, 31, 45, 58, 63, 84, 96, 98, 101, 115, 145, 158, 187, 198, 204, 214, 215, 255, 19, 29, 72, 84, 94, 138, 145, 32, 52, 96, 105, 162, 183, 231, 10, 29, 42, 87, 214, 215, 231, 3, 10, 17, 19, 21, 29, 30, 40, 45, 51, 52, 56, 59, 64, 67, 68, 72, 79, 82, 84, 87, 93, 95, 96, 101, 104, 105, 106, 116, 129, 136, 137, 138, 155, 158, 159, 170, 189, 203, 206, 207, 237, 247, 250, 251, 29, 63, 72, 94, 116, 134, 150, 181, 9, 19, 29, 96, 98, 107, 198, 214, 1, 6, 9, 10, 18, 19, 29, 31, 38, 44, 45, 67, 82, 84, 85, 95, 96, 98, 101, 105, 112, 116, 130, 137, 145, 150, 152, 153, 155, 159, 170, 183, 189, 198, 209, 214, 227, 231, 237, 245, 5, 8, 10, 11, 19, 29, 34, 45, 56, 63, 66, 75, 78, 81, 84, 94, 96, 98, 101, 105, 114, 116, 117, 124, 125, 135, 141, 142, 144, 145, 155, 156, 158, 162, 177, 185, 195, 198, 203, 206, 207, 214, 226, 237, 248, 250, 251, 8, 10, 16, 29, 56, 63, 75, 101, 127, 140, 178, 183, 198, 203, 214, 240, 254, 10, 12, 29, 38, 43, 72, 93, 94, 95, 96, 101, 105, 116, 130, 136, 160, 183, 221, 224, 225, 231, 241, 245, 254, 45, 72, 96, 128, 145, 159, 221, 56, 101, 128, 255, 9, 10, 11, 19, 29, 31, 34, 41, 42, 45, 56, 60, 63, 64, 69, 70, 81, 87, 96, 98, 101, 104, 105, 116, 138, 141, 145, 159, 162, 164, 177, 183, 186, 189, 198, 206, 214, 215, 224, 225, 227, 231, 237, 240, 254, 3, 6, 8, 10, 19, 22, 29, 45, 74, 101, 105, 117, 124, 135, 145, 170, 183, 198, 206, 214, 240, 251, 3, 10, 21, 29, 73, 82, 96, 101, 104, 105, 117, 125, 130, 142, 144, 145, 155, 162, 181, 195, 213, 220, 243, 9, 10, 19, 29, 31, 34, 39, 41, 43, 45, 51, 67, 68, 82, 84, 85, 87, 93, 95, 96, 98, 101, 104, 105, 117, 137, 141, 145, 149, 150, 153, 166, 171, 174, 183, 188, 195, 207, 212, 213, 214, 216, 226, 231, 240, 241, 248, 254, 10, 181, 187, 214, 67, 82, 94, 116, 149, 174, 207, 8, 10, 29, 45, 63, 87, 101, 105, 117, 126, 133, 158, 183, 206, 217, 254, 45, 116, 214, 5, 6, 10, 19, 29, 32, 45, 67, 72, 89, 105, 118, 128, 140, 145, 155, 162, 169, 187, 198, 206, 209, 250, 254, 3, 5, 6, 10, 19, 29, 31, 45, 63, 66, 74, 75, 78, 84, 86, 87, 93, 96, 98, 101, 103, 105, 114, 117, 142, 145, 152, 155, 158, 159, 161, 162, 198, 203, 207, 209, 214, 221, 225, 233, 237, 254, 3, 142, 187, 5, 10, 19, 29, 34, 39, 45, 56, 59, 60, 63, 66, 67, 75, 82, 87, 89, 96, 98, 101, 104, 105, 114, 136, 145, 162, 168, 180, 181, 183, 189, 207, 209, 214, 221, 231, 245, 250, 251, 254, 10, 19, 29, 45, 56, 66, 75, 96, 101, 116, 117, 162, 183, 187, 205, 206, 207, 220, 224, 8, 82, 96, 101, 105, 117, 145, 162, 187, 198, 224, 5, 6, 9, 10, 11, 19, 29, 34, 38, 43, 45, 56, 62, 63, 72, 75, 79, 82, 84, 89, 96, 98, 104, 110, 113, 124, 135, 140, 141, 143, 145, 149, 151, 155, 158, 159, 171, 188, 189, 198, 204, 206, 207, 213, 214, 224, 232, 235, 245, 255, 145, 221, 246, 5, 8, 9, 19, 29, 81, 84, 87, 93, 96, 104, 105, 159, 183, 198, 206, 214, 226, 240, 254, 29, 31, 112, 142, 214, 0, 10, 45, 63, 69, 75, 82, 89, 101, 142, 183, 184, 207, 214, 221, 237, 250, 251, 254, 10, 19, 45, 60, 64, 67, 69, 78, 101, 114, 145, 149, 169, 198, 207, 214, 240, 251, 19, 29, 31, 63, 66, 69, 75, 96, 105, 125, 145, 146, 155, 183, 187, 198, 203, 214, 250, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19, 21, 22, 23, 29, 31, 32, 41, 43, 45, 47, 56, 59, 61, 63, 65, 66, 67, 69, 70, 72, 74, 75, 82, 84, 85, 86, 87, 89, 95, 98, 101, 104, 105, 106, 113, 116, 117, 124, 125, 126, 130, 138, 142, 145, 154, 155, 156, 158, 159, 162, 169, 170, 177, 183, 186, 187, 189, 195, 198, 206, 207, 213, 214, 215, 216, 217, 220, 221, 224, 225, 227, 237, 240, 241, 251, 254, 162, 3, 8, 11, 19, 29, 31, 45, 55, 59, 65, 66, 67, 72, 75, 82, 84, 87, 96, 101, 104, 105, 113, 128, 135, 142, 145, 155, 158, 169, 170, 177, 198, 204, 206, 214, 216, 217, 221, 231, 232, 240, 251, 254, 9, 19, 45, 214, 101, 1, 3, 5, 8, 9, 10, 16, 18, 19, 21, 27, 29, 31, 38, 39, 40, 41, 43, 44, 45, 51, 56, 59, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 79, 82, 84, 85, 86, 93, 94, 96, 98, 100, 103, 104, 105, 111, 113, 114, 116, 117, 123, 125, 130, 135, 138, 140, 141, 142, 143, 145, 149, 150, 151, 152, 154, 155, 159, 162, 164, 168, 170, 171, 173, 183, 198, 204, 206, 207, 214, 215, 220, 221, 225, 231, 235, 237, 245, 248, 250, 251, 252, 254, 255, 19, 22, 55, 82, 101, 170, 10, 19, 27, 29, 43, 45, 56, 63, 72, 74, 75, 84, 87, 89, 96, 98, 101, 116, 125, 198, 204, 207, 209, 214, 236, 237, 240, 1, 2, 3, 6, 8, 9, 10, 14, 17, 19, 21, 29, 31, 32, 34, 39, 45, 51, 52, 56, 61, 63, 66, 67, 69, 72, 73, 74, 75, 79, 81, 82, 84, 86, 89, 95, 96, 98, 101, 107, 113, 115, 116, 117, 128, 130, 137, 140, 141, 142, 144, 145, 149, 150, 154, 155, 158, 159, 160, 161, 162, 164, 169, 171, 177, 180, 182, 183, 185, 187, 188, 189, 191, 195, 198, 204, 207, 213, 214, 217, 220, 221, 222, 225, 231, 232, 240, 251, 254, 14, 45, 63, 96, 206, 214, 10, 45, 65, 105, 112, 169, 214, 29, 34, 185, 206, 29, 214, 29, 87, 116, 101, 3, 52, 66, 92, 107, 116, 130, 159, 162, 177, 183, 193, 203, 214, 221, 19, 29, 45, 52, 87, 96, 98, 101, 105, 124, 145, 198, 206, 213, 214, 223, 231, 233, 240, 255, 10, 21, 29, 67, 82, 84, 94, 101, 142, 155, 162, 178, 235, 10, 59, 105, 166, 186, 198, 1, 5, 9, 10, 19, 21, 29, 31, 45, 56, 63, 64, 66, 67, 69, 72, 78, 80, 85, 96, 101, 104, 105, 110, 112, 128, 135, 142, 143, 144, 145, 147, 155, 159, 160, 162, 171, 182, 183, 195, 198, 206, 207, 213, 214, 225, 231, 237, 245, 248, 254, 5, 10, 11, 19, 27, 29, 31, 38, 39, 43, 45, 56, 67, 73, 74, 75, 79, 82, 85, 86, 96, 101, 105, 128, 135, 142, 145, 159, 162, 164, 171, 174, 179, 186, 187, 198, 203, 206, 207, 214, 221, 240, 254, 10, 29, 81, 150, 183, 183, 10, 124, 214, 254, 10, 29, 101, 177, 237, 10, 19, 29, 45, 56, 67, 73, 87, 96, 113, 120, 187, 188, 203, 207, 221, 4, 5, 9, 10, 29, 31, 38, 67, 74, 95, 96, 101, 104, 149, 182, 206, 207, 214, 231, 29, 79, 96, 128, 152, 198, 232, 68, 207, 247, 5, 10, 19, 29, 31, 45, 70, 71, 81, 98, 105, 116, 117, 126, 137, 145, 170, 177, 191, 195, 204, 214, 231, 251, 29, 63, 145, 1, 5, 9, 19, 20, 29, 31, 52, 56, 66, 69, 74, 96, 101, 105, 112, 142, 155, 170, 207, 241, 45, 51, 29, 79, 183, 254, 1, 64, 183, 240, 19, 23, 27, 29, 32, 67, 73, 87, 98, 101, 116, 117, 145, 155, 203, 221, 254, 5, 19, 29, 31, 63, 69, 84, 142, 206, 221, 232, 4, 5, 10, 22, 29, 45, 63, 66, 75, 105, 128, 145, 227, 10, 19, 29, 45, 56, 60, 63, 72, 96, 101, 145, 162, 177, 198, 205, 214, 231, 232, 237, 240, 1, 68, 81, 87, 101, 105, 6, 10, 19, 29, 38, 67, 72, 75, 87, 101, 105, 155, 177, 191, 206, 214, 221, 224, 237, 240, 10, 17, 19, 21, 29, 31, 38, 45, 51, 56, 67, 74, 82, 83, 92, 93, 96, 98, 101, 105, 114, 116, 117, 130, 136, 145, 146, 155, 158, 159, 162, 195, 198, 199, 201, 204, 206, 207, 214, 216, 237, 240, 245, 248, 254, 9, 29, 87, 101, 116, 214, 10, 29, 67, 74, 105, 116, 145, 177, 183, 207, 1, 3, 5, 6, 9, 10, 19, 21, 28, 29, 31, 36, 38, 39, 45, 51, 56, 59, 60, 66, 67, 70, 72, 73, 74, 75, 81, 82, 84, 86, 87, 88, 94, 95, 96, 98, 101, 105, 113, 116, 117, 128, 129, 135, 137, 138, 142, 144, 149, 150, 151, 152, 153, 155, 159, 162, 163, 170, 174, 175, 177, 178, 181, 182, 183, 188, 189, 195, 198, 203, 204, 206, 207, 213, 214, 215, 216, 220, 221, 225, 227, 231, 232, 237, 240, 245, 251, 254, 19, 29, 45, 95, 142, 159, 198, 227, 116, 10, 11, 19, 29, 31, 38, 45, 75, 78, 87, 94, 101, 105, 125, 145, 160, 183, 189, 198, 219, 221, 3, 10, 11, 29, 45, 56, 64, 66, 75, 101, 105, 118, 145, 162, 170, 174, 178, 198, 199, 214, 221, 10, 45, 87, 101, 145, 7, 29, 66, 82, 101, 126, 145, 9, 19, 66, 75, 145, 189, 10, 29, 45, 96, 101, 105, 162, 231, 254, 5, 9, 10, 12, 19, 21, 29, 31, 34, 39, 41, 45, 57, 63, 66, 67, 74, 81, 82, 87, 95, 96, 98, 101, 105, 114, 116, 130, 135, 141, 142, 145, 158, 159, 162, 171, 178, 181, 183, 203, 207, 214, 216, 220, 231, 240, 245, 247, 250, 254, 29, 39, 67, 96, 214, 19, 29, 34, 240, 1, 8, 9, 19, 29, 31, 45, 59, 63, 67, 79, 82, 87, 96, 98, 105, 142, 155, 183, 214, 221, 231, 250, 251, 5, 6, 8, 10, 19, 21, 29, 39, 45, 51, 63, 66, 70, 72, 82, 87, 89, 96, 101, 105, 112, 116, 117, 142, 145, 146, 155, 162, 169, 177, 183, 191, 200, 207, 220, 226, 231, 240, 247, 254, 19, 29, 69, 105, 116, 149, 225, 27, 29, 82, 105, 213, 5, 10, 11, 13, 19, 29, 34, 38, 39, 44, 45, 51, 61, 67, 72, 74, 81, 82, 84, 85, 86, 96, 97, 101, 105, 112, 114, 116, 117, 138, 142, 145, 150, 154, 155, 159, 198, 203, 206, 207, 214, 215, 220, 221, 232, 237, 240, 254, 145, 5, 19, 29, 72, 101, 105, 117, 178, 214, 225, 75, 115, 5, 39, 250, 84, 101, 45, 81, 94, 96, 98, 105, 107, 159, 191, 7, 10, 19, 20, 21, 29, 37, 45, 47, 63, 66, 73, 96, 98, 101, 103, 128, 130, 145, 150, 203, 206, 214, 216, 224, 233, 19, 21, 29, 34, 75, 87, 101, 105, 116, 117, 155, 207, 221, 252, 221, 101, 198, 221, 29, 38, 51, 75, 78, 117, 145, 150, 145, 29, 21, 22, 29, 45, 67, 72, 96, 98, 105, 112, 123, 128, 138, 141, 144, 145, 159, 183, 198, 203, 214, 215, 248, 10, 19, 29, 31, 42, 45, 56, 68, 114, 145, 150, 155, 164, 187, 206, 207, 220, 232, 117, 3, 10, 19, 29, 84, 105, 183, 214, 222, 231, 29, 56, 64, 74, 76, 84, 145, 155, 183, 198, 206, 231, 254, 10, 19, 29, 38, 105, 116, 125, 145, 183, 205, 206, 209, 214, 237, 240, 3, 8, 10, 11, 12, 17, 19, 25, 27, 29, 43, 45, 56, 61, 66, 68, 69, 72, 73, 75, 79, 84, 85, 89, 93, 95, 96, 101, 105, 112, 116, 118, 119, 133, 134, 144, 145, 149, 155, 158, 159, 177, 180, 181, 182, 189, 194, 195, 198, 207, 209, 214, 221, 231, 233, 240, 247, 250, 251, 254, 10, 19, 29, 93, 9, 10, 29, 67, 105, 108, 221, 231, 1, 19, 29, 72, 96, 115, 117, 201, 214, 5, 8, 9, 10, 21, 29, 31, 45, 59, 76, 81, 83, 85, 86, 95, 96, 105, 117, 124, 178, 206, 214, 221, 248, 251, 10, 29, 75, 87, 105, 124, 145, 237, 5, 9, 10, 19, 29, 31, 34, 51, 63, 66, 72, 84, 87, 96, 105, 145, 149, 153, 183, 221, 254, 4, 29, 221, 9, 19, 29, 105, 128, 141, 159, 169, 29, 112, 183, 19, 29, 42, 45, 56, 67, 74, 75, 96, 105, 116, 128, 142, 145, 183, 207, 216, 231, 240, 250, 9, 1, 3, 8, 9, 10, 11, 19, 23, 29, 31, 34, 36, 38, 39, 43, 45, 51, 56, 58, 59, 65, 66, 67, 68, 72, 73, 81, 82, 86, 87, 89, 94, 95, 96, 98, 101, 104, 105, 113, 115, 116, 117, 126, 138, 142, 145, 146, 149, 150, 162, 173, 177, 181, 183, 203, 207, 214, 217, 221, 225, 226, 231, 237, 240, 19, 142, 150, 29, 159, 250, 142, 186, 214, 206, 254, 3, 12, 19, 29, 56, 63, 67, 68, 82, 95, 112, 117, 124, 135, 145, 155, 162, 170, 177, 198, 207, 214, 221, 231, 0, 10, 19, 29, 40, 45, 56, 59, 87, 98, 101, 104, 105, 128, 142, 145, 207, 214, 225, 241, 254, 3, 10, 19, 29, 45, 85, 138, 182, 214, 221, 9, 10, 11, 19, 21, 29, 39, 42, 43, 45, 56, 63, 67, 72, 73, 79, 81, 85, 87, 89, 96, 98, 101, 106, 108, 113, 116, 117, 125, 136, 141, 142, 145, 162, 170, 178, 181, 182, 187, 202, 207, 208, 209, 214, 220, 221, 225, 231, 240, 250, 0, 8, 9, 10, 19, 26, 29, 45, 55, 56, 63, 67, 75, 78, 82, 84, 85, 87, 93, 94, 96, 101, 104, 105, 116, 117, 124, 125, 127, 130, 142, 144, 145, 155, 159, 162, 171, 178, 183, 195, 198, 203, 204, 206, 213, 214, 215, 221, 224, 227, 231, 250, 5, 29, 45, 206, 10, 19, 45, 51, 66, 81, 82, 84, 104, 182, 183, 206, 231, 250, 10, 75, 1, 10, 45, 56, 74, 75, 87, 96, 105, 113, 116, 145, 161, 207, 214, 220, 221, 231, 237, 240, 1, 3, 5, 7, 8, 9, 10, 11, 19, 20, 21, 26, 27, 29, 31, 32, 34, 39, 40, 43, 45, 47, 51, 56, 59, 62, 65, 66, 67, 68, 72, 73, 75, 76, 80, 82, 84, 87, 89, 92, 93, 94, 95, 96, 98, 99, 101, 104, 105, 106, 107, 109, 112, 113, 116, 117, 120, 125, 128, 138, 141, 142, 143, 145, 150, 155, 156, 158, 162, 164, 170, 177, 180, 182, 183, 186, 187, 198, 201, 203, 204, 205, 206, 207, 213, 215, 217, 221, 224, 232, 236, 237, 240, 242, 245, 247, 248, 250, 254, 5, 19, 29, 45, 52, 59, 62, 72, 96, 101, 145, 162, 177, 207, 214, 220, 237, 254, 10, 19, 29, 45, 75, 96, 98, 142, 145, 155, 170, 195, 231, 240, 250, 254, 29, 79, 96, 98, 105, 198, 214, 248, 10, 19, 29, 39, 47, 149, 240, 255, 1, 5, 8, 10, 11, 17, 19, 38, 45, 51, 56, 74, 85, 96, 101, 105, 145, 155, 159, 162, 178, 206, 213, 215, 224, 225, 240, 245, 1, 3, 5, 6, 9, 10, 19, 28, 29, 31, 34, 36, 38, 40, 44, 45, 56, 69, 70, 82, 84, 88, 93, 96, 98, 101, 105, 112, 117, 124, 135, 136, 141, 145, 149, 150, 158, 162, 171, 172, 173, 183, 185, 187, 189, 190, 198, 203, 205, 206, 207, 213, 214, 231, 232, 237, 240, 241, 254, 10, 11, 29, 45, 105, 180, 231, 29, 113, 10, 19, 21, 29, 45, 52, 69, 72, 85, 86, 87, 96, 141, 170, 207, 214, 220, 237, 240, 19, 29, 40, 45, 56, 69, 72, 82, 96, 101, 105, 116, 145, 160, 164, 198, 204, 206, 220, 226, 246, 10, 67, 75, 89, 159, 198, 225, 232, 10, 66, 72, 96, 137, 145, 146, 207, 29, 11, 29, 4, 5, 8, 10, 19, 21, 29, 31, 45, 51, 61, 62, 66, 69, 72, 75, 84, 98, 101, 105, 113, 116, 125, 128, 138, 145, 154, 155, 158, 159, 180, 181, 183, 185, 195, 198, 203, 206, 207, 209, 213, 216, 221, 222, 232, 240, 250, 254, 0, 8, 9, 10, 26, 29, 31, 87, 98, 105, 126, 136, 138, 145, 162, 178, 214, 221, 226, 231, 10, 45, 82, 113, 170, 183, 251, 255, 5, 9, 33, 39, 87, 101, 114, 22, 29, 104, 214, 1, 5, 6, 9, 19, 22, 29, 31, 42, 45, 51, 56, 63, 66, 67, 72, 82, 93, 96, 101, 104, 116, 123, 138, 141, 142, 145, 162, 182, 188, 198, 213, 214, 215, 221, 224, 254, 29, 17, 5, 9, 11, 17, 19, 20, 29, 31, 38, 45, 52, 56, 68, 72, 73, 75, 89, 94, 96, 98, 104, 105, 113, 117, 134, 138, 141, 142, 145, 155, 157, 159, 162, 182, 183, 195, 198, 206, 213, 214, 216, 219, 220, 221, 224, 231, 254, 5, 29, 31, 45, 69, 75, 96, 130, 204, 221, 214, 29, 32, 74, 5, 10, 19, 29, 38, 43, 55, 66, 69, 84, 87, 101, 116, 142, 145, 155, 214, 220, 250, 29, 88, 225, 29, 63, 127, 155, 159, 183, 214, 254, 10, 51, 67, 75, 101, 116, 142, 177, 187, 214, 217, 5, 29, 31, 38, 40, 56, 63, 67, 81, 84, 93, 95, 101, 155, 158, 167, 183, 195, 200, 206, 207, 209, 214, 216, 231, 245, 254, 9, 10, 19, 27, 29, 63, 67, 73, 84, 93, 94, 96, 98, 101, 105, 128, 145, 158, 183, 187, 233, 254, 29, 101, 171, 19, 29, 3, 5, 10, 12, 17, 19, 21, 29, 45, 68, 69, 72, 75, 79, 81, 82, 84, 89, 93, 96, 98, 101, 105, 116, 117, 120, 133, 135, 142, 145, 154, 155, 159, 162, 181, 183, 189, 202, 204, 214, 215, 216, 221, 231, 237, 240, 247, 250, 251, 52, 59, 71, 87, 101, 113, 219, 233};
+
+const edge_index_t chk[N_LEVELS] = {1, 26, 184, 22, 0, 0, 0, 0, 0, 0};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/data.h gem5-SALAM/benchmarks/sys_validation/bfs/sw/data.h
--- gem5/benchmarks/sys_validation/bfs/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/data.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,6 @@
+#include "../defines.h"
+
+extern const node_index_t start;
+extern const node_index_t nod[2*N_NODES];
+extern const edge_index_t edg[N_EDGES];
+extern const edge_index_t chk[N_LEVELS];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/bfs/sw/.gitignore
--- gem5/benchmarks/sys_validation/bfs/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/.gitignore	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/isr.c gem5-SALAM/benchmarks/sys_validation/bfs/sw/isr.c
--- gem5/benchmarks/sys_validation/bfs/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/isr.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/bfs/sw/main.cpp
--- gem5/benchmarks/sys_validation/bfs/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/main.cpp	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,75 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+#include "../bfs_clstr_hw_defines.h"
+
+bfs_struct bfs;
+
+#define BASE            0x80c00000
+
+#define NODES_OFFSET 0
+#define EDGES_OFFSET NODES_OFFSET + sizeof(node_index_t) * N_NODES * 2
+#define LEVEL_OFFSET EDGES_OFFSET + sizeof(edge_index_t) * N_EDGES
+#define COUNT_OFFSET LEVEL_OFFSET + sizeof(level_t)      * N_NODES
+#define CHECK_OFFSET COUNT_OFFSET + sizeof(edge_index_t) * N_LEVELS
+
+volatile uint8_t      * top        = (uint8_t      *)(TOP);
+volatile uint32_t     * NODES_ADDR = (uint32_t     *)(TOP+1);
+volatile uint32_t     * EDGES_ADDR = (uint32_t     *)(TOP+9);
+volatile uint32_t     * LEVEL_ADDR = (uint32_t     *)(TOP+17);
+volatile uint32_t     * COUNT_ADDR = (uint32_t     *)(TOP+25);
+volatile node_index_t * START_ADDR = (node_index_t *)(TOP+33);
+
+int main(void) {
+    node_index_t * nodes 			= (node_index_t *)(BASE + NODES_OFFSET);
+    edge_index_t * edges 			= (edge_index_t *)(BASE + EDGES_OFFSET);
+    level_t      * level 			= (level_t      *)(BASE + LEVEL_OFFSET);
+    edge_index_t * level_counts 	= (edge_index_t *)(BASE + COUNT_OFFSET);
+    edge_index_t * check 			= (edge_index_t *)(BASE + CHECK_OFFSET);
+	stage = 0;
+    volatile int count = 0;
+    bfs.nodes = nodes;
+    bfs.edges = edges;
+    bfs.level = level;
+    bfs.level_counts = level_counts;
+    bfs.check = check;
+
+    node_index_t starting_node = 38;
+
+    printf("Generating data\n");
+    genData(&bfs);
+    printf("Data generated\n");
+
+    *NODES_ADDR = (uint32_t)(void *)nodes;
+    *EDGES_ADDR = (uint32_t)(void *)edges;
+    *LEVEL_ADDR = (uint32_t)(void *)level;
+    *COUNT_ADDR = (uint32_t)(void *)level_counts;
+    printf("Starting node: %d\n", starting_node);
+    *START_ADDR = starting_node;
+
+    printf("Starting job\n");
+
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+	bool fail = false;
+
+    for (int i = 0; i < N_LEVELS; i++) {
+        if (level_counts[i] != check[i]) {
+            fail = true;
+            printf("Mismatch: %d found, %d expected\n", level_counts[i], check[i]);
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+    m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/bfs/sw/Makefile gem5-SALAM/benchmarks/sys_validation/bfs/sw/Makefile
--- gem5/benchmarks/sys_validation/bfs/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/bfs/sw/Makefile	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/fft/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/fft/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/fft/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/configs/quick_config.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/config.yml gem5-SALAM/benchmarks/sys_validation/fft/config.yml
--- gem5/benchmarks/sys_validation/fft/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/config.yml	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,294 @@
+---
+acc_cluster:
+  - Name: fft_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 32
+      BufferSize: 64
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 33
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: fft
+      IrPath: hw/fft.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: REAL
+        Type: SPM
+        Size: 8192
+        Ports: 1
+    - Var:
+      - Name: IMG
+        Type: SPM
+        Size: 8192
+        Ports: 1
+    - Var:
+      - Name: REALTWID
+        Type: SPM
+        Size: 4096
+        Ports: 1
+    - Var:
+      - Name: IMGTWID
+        Type: SPM
+        Size: 4096
+        Ports: 1
+hw_config:
+  top:
+  fft:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/defines.h gem5-SALAM/benchmarks/sys_validation/fft/defines.h
--- gem5/benchmarks/sys_validation/fft/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/defines.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,13 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#define CHECK
+
+#define FFT_SIZE 1024
+#define FFT_HALF FFT_SIZE/2
+#define twoPI 6.28318530717959
+
+// Error Percentage
+#define EPSILON ((double)1.0e-6)
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/fft_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/fft/fft_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/fft/fft_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/fft_clstr_hw_defines.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,16 @@
+//BEGIN GENERATED CODE
+//Cluster: FFT_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: FFT
+#define FFT 0x10020080
+#define REAL 0x100200c0
+#define IMG 0x10022100
+#define REALTWID 0x10024140
+#define IMGTWID 0x10025180
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/.gitignore gem5-SALAM/benchmarks/sys_validation/fft/.gitignore
--- gem5/benchmarks/sys_validation/fft/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/.gitignore	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/fft.c gem5-SALAM/benchmarks/sys_validation/fft/hw/fft.c
--- gem5/benchmarks/sys_validation/fft/hw/fft.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/fft.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,44 @@
+#include "hw_defines.h"
+
+void fft() {
+
+    // volatile uint8_t * realbase     = (uint8_t *)REALADDR;
+    // volatile uint8_t * imgbase      = (uint8_t *)IMGADDR;
+    // volatile uint8_t * realtwidbase = (uint8_t *)REALTWIDADDR;
+    // volatile uint8_t * imgtwidbase  = (uint8_t *)IMGTWIDADDR;
+    volatile double  * real         = (double  *)REAL;
+    volatile double  * img          = (double  *)IMG;
+    volatile double  * real_twid    = (double  *)REALTWID;
+    volatile double  * img_twid     = (double  *)IMGTWID;
+
+    int even, odd, span, log, rootindex;
+    double temp;
+
+    log = 0;
+
+    outer:
+    for(span=FFT_SIZE>>1; span; span>>=1, log++){
+        inner:
+        for(odd=span; odd<FFT_SIZE; odd++){
+            odd |= span;
+            even = odd ^ span;
+
+            temp = real[even] + real[odd];
+            real[odd] = real[even] - real[odd];
+            real[even] = temp;
+
+            temp = img[even] + img[odd];
+            img[odd] = img[even] - img[odd];
+            img[even] = temp;
+
+            rootindex = (even<<log) & (FFT_SIZE - 1);
+            if(rootindex){
+                temp = real_twid[rootindex] * real[odd] -
+                    img_twid[rootindex]  * img[odd];
+                img[odd] = real_twid[rootindex]*img[odd] +
+                    img_twid[rootindex]*real[odd];
+                real[odd] = temp;
+            }
+        }
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/fft/hw/.gitignore
--- gem5/benchmarks/sys_validation/fft/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/.gitignore	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/fft/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/fft/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/hw_defines.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,10 @@
+//Standard Libraries
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../fft_clstr_hw_defines.h"
+
+#define DEV_INIT		0x01
+#define DEV_INTR		0x04
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/Makefile gem5-SALAM/benchmarks/sys_validation/fft/hw/Makefile
--- gem5/benchmarks/sys_validation/fft/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/Makefile	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,6 @@
+KERN=fft.c top.c
+build: $(FILES)
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/support.h gem5-SALAM/benchmarks/sys_validation/fft/hw/support.h
--- gem5/benchmarks/sys_validation/fft/hw/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/support.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,135 @@
+#include <stdlib.h>
+#include <inttypes.h>
+
+///// File and section functions
+char *readfile(int fd);
+char *find_section_start(char *s, int n);
+
+///// Array read functions
+#define SECTION_TERMINATED -1
+int parse_string(char *s, char *arr, int n); // n==-1 : %%-terminated
+int parse_uint8_t_array(char *s, uint8_t *arr, int n);
+int parse_uint16_t_array(char *s, uint16_t *arr, int n);
+int parse_uint32_t_array(char *s, uint32_t *arr, int n);
+int parse_uint64_t_array(char *s, uint64_t *arr, int n);
+int parse_int8_t_array(char *s, int8_t *arr, int n);
+int parse_int16_t_array(char *s, int16_t *arr, int n);
+int parse_int32_t_array(char *s, int32_t *arr, int n);
+int parse_int64_t_array(char *s, int64_t *arr, int n);
+int parse_float_array(char *s, float *arr, int n);
+int parse_double_array(char *s, double *arr, int n);
+
+///// Array write functions
+int write_string(int fd, char *arr, int n);
+int write_uint8_t_array(int fd, uint8_t *arr, int n);
+int write_uint16_t_array(int fd, uint16_t *arr, int n);
+int write_uint32_t_array(int fd, uint32_t *arr, int n);
+int write_uint64_t_array(int fd, uint64_t *arr, int n);
+int write_int8_t_array(int fd, int8_t *arr, int n);
+int write_int16_t_array(int fd, int16_t *arr, int n);
+int write_int32_t_array(int fd, int32_t *arr, int n);
+int write_int64_t_array(int fd, int64_t *arr, int n);
+int write_float_array(int fd, float *arr, int n);
+int write_double_array(int fd, double *arr, int n);
+
+int write_section_header(int fd);
+
+///// Per-benchmark files
+void run_benchmark( void *vargs );
+void input_to_data(int fd, void *vdata);
+void data_to_input(int fd, void *vdata);
+void output_to_data(int fd, void *vdata);
+void data_to_output(int fd, void *vdata);
+int check_data(void *vdata, void *vref);
+
+extern int INPUT_SIZE;
+
+///// TYPE macros
+// Macro trick to automatically expand TYPE into the appropriate function
+// (S)et (T)ype (A)nd (C)oncatenate
+#define __STAC_EXPANDED(f_pfx,t,f_sfx) f_pfx##t##f_sfx
+#define STAC(f_pfx,t,f_sfx) __STAC_EXPANDED(f_pfx,t,f_sfx)
+// Invoke like this:
+//   #define TYPE int32_t
+//   STAC(write_,TYPE,_array)(fd, array, n);
+// where array is of type (TYPE *)
+// This translates to:
+//   write_int32_t_array(fd, array, n);
+
+
+/**** PRNG library. Available at https://github.com/rdadolf/prng. *****/
+#ifndef __PRNG_H__
+#define __PRNG_H__
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#define LAG1 (UINT16_C(24))
+#define LAG2 (UINT16_C(55))
+#define RAND_SSIZE ((UINT16_C(1))<<6)
+#define RAND_SMASK (RAND_SSIZE-1)
+#define RAND_EXHAUST_LIMIT LAG2
+// 10x is a heuristic, it just needs to be large enough to remove correlation
+#define RAND_REFILL_COUNT ((LAG2*10)-RAND_EXHAUST_LIMIT)
+struct prng_rand_t {
+  uint64_t s[RAND_SSIZE]; // Lags
+  uint_fast16_t i; // Location of the current lag
+  uint_fast16_t c; // Exhaustion count
+};
+
+#define PRNG_RAND_MAX UINT64_MAX
+
+
+static inline uint64_t prng_rand(struct prng_rand_t *state) {
+  uint_fast16_t i;
+  uint_fast16_t r, new_rands=0;
+
+  if( !state->c ) { // Randomness exhausted, run forward to refill
+    new_rands += RAND_REFILL_COUNT+1;
+    state->c = RAND_EXHAUST_LIMIT-1;
+  } else {
+    new_rands = 1;
+    state->c--;
+  }
+
+  for( r=0; r<new_rands; r++ ) {
+    i = state->i;
+    state->s[i&RAND_SMASK] = state->s[(i+RAND_SSIZE-LAG1)&RAND_SMASK]
+                              + state->s[(i+RAND_SSIZE-LAG2)&RAND_SMASK];
+    state->i++;
+  }
+  return state->s[i&RAND_SMASK];
+}
+
+static inline void prng_srand(uint64_t seed, struct prng_rand_t *state) {
+  uint_fast16_t i;
+  // Naive seed
+  state->c = RAND_EXHAUST_LIMIT;
+  state->i = 0;
+
+  state->s[0] = seed;
+  for(i=1; i<RAND_SSIZE; i++) {
+    // Arbitrary magic, mostly to eliminate the effect of low-value seeds.
+    // Probably could be better, but the run-up obviates any real need to.
+    state->s[i] = i*(UINT64_C(2147483647)) + seed;
+  }
+
+  // Run forward 10,000 numbers
+  for(i=0; i<10000; i++) {
+    prng_rand(state);
+  }
+}
+
+// Clean up our macros
+#undef LAG1
+#undef LAG2
+#undef RAND_SSIZE
+#undef RAND_SMASK
+#undef RAND_EXHAUST_LIMIT
+#undef RAND_REFILL_COUNT
+
+// PRNG_RAND_MAX is exported
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/hw/top.c gem5-SALAM/benchmarks/sys_validation/fft/hw/top.c
--- gem5/benchmarks/sys_validation/fft/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/hw/top.c	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,66 @@
+#include "hw_defines.h"
+
+void top(uint64_t REAL_addr,
+		 uint64_t IMG_addr,
+		 uint64_t REALTWID_addr,
+		 uint64_t IMGTWID_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * FFTFlags  = (uint8_t *)FFT;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer REAL
+	*DmaRdAddr  = REAL_addr;
+	*DmaWrAddr  = REAL;
+	*DmaCopyLen = FFT_SIZE * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer IMG
+	*DmaRdAddr  = IMG_addr;
+	*DmaWrAddr  = IMG;
+	*DmaCopyLen = FFT_SIZE * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer REAL
+	*DmaRdAddr  = REALTWID_addr;
+	*DmaWrAddr  = REALTWID;
+	*DmaCopyLen = FFT_HALF * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer IMG
+	*DmaRdAddr  = IMGTWID_addr;
+	*DmaWrAddr  = IMGTWID;
+	*DmaCopyLen = FFT_HALF * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*FFTFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*FFTFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer REAL back
+	*DmaRdAddr  = REAL;
+	*DmaWrAddr  = REAL_addr;
+	*DmaCopyLen = FFT_SIZE * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer IMG back
+	*DmaRdAddr  = IMG;
+	*DmaWrAddr  = IMG_addr;
+	*DmaCopyLen = FFT_SIZE * sizeof(double);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/Makefile gem5-SALAM/benchmarks/sys_validation/fft/Makefile
--- gem5/benchmarks/sys_validation/fft/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/Makefile	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/bench.h gem5-SALAM/benchmarks/sys_validation/fft/sw/bench.h
--- gem5/benchmarks/sys_validation/fft/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/bench.h	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,27 @@
+#include "../defines.h"
+#include "data.h"
+
+volatile int stage;
+
+typedef struct {
+    double * real;
+    double * img;
+    double * real_twid;
+    double * img_twid;
+    double * real_check;
+    double * img_check;
+} fft_struct;
+
+void genData(fft_struct * ffts) {
+    int i;
+    for (i = 0; i < FFT_SIZE; i++) {
+        ffts->real[i] = re[i];
+        ffts->img[i] = co[i];
+        ffts->real_check[i] = re_chk[i];
+        ffts->img_check[i] = co_chk[i];
+    }
+    for (i = 0; i < FFT_SIZE/2; i++) {
+        ffts->real_twid[i] = re_twid[i];
+        ffts->img_twid[i] = co_twid[i];
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/fft/sw/boot.ld
--- gem5/benchmarks/sys_validation/fft/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/boot.ld	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/boot.s gem5-SALAM/benchmarks/sys_validation/fft/sw/boot.s
--- gem5/benchmarks/sys_validation/fft/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/boot.s	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/data.c gem5-SALAM/benchmarks/sys_validation/fft/sw/data.c
--- gem5/benchmarks/sys_validation/fft/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/data.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,28 @@
+#include "data.h"
+
+#ifndef TEST
+const double re[FFT_SIZE] = {0.8483178396146527, 0.9316474009271629, 0.0749141099239747, 0.3243126095086337, 0.4889216894177568, 0.2003220013219365, 0.2465207945154783, 0.5009444841545747, 0.3833875674814791, 0.8638473264891788, 0.4270323830861616, 0.0263683207747022, 0.1798125277440863, 0.5388504032397917, 0.9782153590525915, 0.8309093043465101, 0.8577368190902865, 0.9543748287741737, 0.8490474371089849, 0.3694121479802369, 0.3352441047664209, 0.7552438928694989, 0.2817087394018067, 0.4852360002861091, 0.7268004045533238, 0.6343918397825450, 0.2104079488356254, 0.0395947057002634, 0.0400209978161234, 0.2976758337005888, 0.9521082225628823, 0.1866873697274503, 0.7358651200871347, 0.1361097436415447, 0.9090931683964897, 0.4604792296588825, 0.5769636562652027, 0.8616704275858206, 0.8767687582692533, 0.0279669403183254, 0.8816612565392817, 0.1866195592416753, 0.7633503369248252, 0.2150746941951263, 0.1339641300308199, 0.7161428864829403, 0.1365021466723779, 0.5001932391978972, 0.8470236345937937, 0.4470622249540837, 0.7140811894103265, 0.0127652175460312, 0.3876666127209407, 0.9958895038034786, 0.0926458725571736, 0.9676672240567189, 0.3736362838672994, 0.0488822949430138, 0.4076365668481068, 0.4603180906842517, 0.2873166763901486, 0.4365584272465929, 0.5850196896009423, 0.9590813817633715, 0.9980595552286854, 0.6068136140773602, 0.7043815368917442, 0.1974515966674346, 0.6575472564589070, 0.9454611044982865, 0.5747363779881197, 0.2194919783622648, 0.5763745454924379, 0.7153851752905834, 0.8911010718686341, 0.5206280483477259, 0.1501220678649025, 0.3812301813733660, 0.0463248309608765, 0.4254903780644615, 0.4973494195501764, 0.4281354730441760, 0.1142915128435944, 0.0804645407448647, 0.4373515560814680, 0.2582268915654431, 0.7683934478079263, 0.0766898881091194, 0.8463122892926332, 0.1107166721271598, 0.5840612962298976, 0.8557126220464411, 0.4838001677368423, 0.0621016340325793, 0.1310235740565679, 0.3776118887938892, 0.3530460812272584, 0.4149216674120018, 0.2064459122797230, 0.8343916891700796, 0.0932775064851222, 0.2731170192259920, 0.3356228717457055, 0.3267963290017710, 0.0435681404918652, 0.7228303690021292, 0.2107907960557750, 0.9615694238266003, 0.9326414560282523, 0.9394618799882867, 0.1764777376547630, 0.3732788212737727, 0.4000735922705779, 0.1120309369903489, 0.0511100243190568, 0.8575182783261570, 0.1349654718909908, 0.9723092959416103, 0.8067179481103881, 0.4657453752075365, 0.8214647023258758, 0.6642716262994925, 0.2924958180021960, 0.9396144243758447, 0.6692048055281263, 0.4554570494036198, 0.0154017302137861, 0.9462209557130911, 0.9279331770197743, 0.8926116198429296, 0.9844385803033128, 0.8235301034352464, 0.1171662519206369, 0.9738432213333370, 0.1702801969466125, 0.9700813330218533, 0.3431322540111262, 0.3521808070203251, 0.6456496860574097, 0.0078332098488572, 0.2780721231188467, 0.9308493287741327, 0.3391027675786487, 0.6387221774977941, 0.1387668025077644, 0.3193379819348149, 0.2938847760898528, 0.3760463174887679, 0.1542553433051521, 0.6639159037834084, 0.3564936178023257, 0.4878134574691712, 0.0345427675439928, 0.5848943772682992, 0.0693781648667100, 0.2191364932019932, 0.2761112415673199, 0.2440285243758249, 0.1440250692777039, 0.7614656056422392, 0.9809620066037130, 0.9348033021342805, 0.7552137859210596, 0.6065311722051752, 0.5503350398133949, 0.6275061460415338, 0.0111472337609468, 0.1246312888209616, 0.4231461451579110, 0.6484414922888584, 0.2337922181906040, 0.6779685516426726, 0.8782741573686651, 0.6177010100415349, 0.2939854446950563, 0.8761871775505162, 0.1810071211477334, 0.8720289503655566, 0.2532811225707449, 0.6100117892988954, 0.9301354739598914, 0.5191027833281141, 0.1431706944572742, 0.1708568797583734, 0.6242359909565518, 0.9782736794109049, 0.9891683505866096, 0.0196826080659797, 0.2768293352286383, 0.0768308861291690, 0.6270659160444320, 0.3147389465422545, 0.5336071033488232, 0.0120537996182269, 0.5307654724048916, 0.5153605911637142, 0.7528566241924224, 0.7033589194426896, 0.3209196647064811, 0.4410043195102882, 0.0111739864620048, 0.2863026779679601, 0.2683100918304755, 0.2979827363431253, 0.3721852873425603, 0.1633665685261703, 0.6533281645944697, 0.2843454312853405, 0.9051319563159713, 0.5983082899373767, 0.5757792223158209, 0.2692903346720601, 0.6096013896981760, 0.0901025770439411, 0.4634050247425767, 0.6204605185689965, 0.5112592424386806, 0.4937665420329518, 0.4695717035134276, 0.9097122918366112, 0.3201641400746201, 0.9905173479273656, 0.0056370341850618, 0.3921534977584564, 0.3346194563079505, 0.6360433801365077, 0.5201155310158935, 0.4362019819492165, 0.3809198621760362, 0.5670535082271564, 0.0529453230927324, 0.6790772399224166, 0.2868627608072348, 0.9392660254042972, 0.5753465166316099, 0.6541005362632644, 0.2817555840484371, 0.6612642174687781, 0.9423159385445181, 0.9174747407529212, 0.9779240481377166, 0.2986892413220574, 0.1916000764166038, 0.7468217076566656, 0.5936366233299584, 0.5410113779987784, 0.0748945408290509, 0.3395152960985217, 0.7470779072815197, 0.3161020201267201, 0.7374536219431782, 0.2805479172708150, 0.7130278376509701, 0.8459418603364357, 0.7522291563308318, 0.7673406794115867, 0.9791920811987473, 0.1123833682832090, 0.5471981463946101, 0.0433784996754932, 0.7831913287613563, 0.1725964107004632, 0.8671010177349522, 0.6393078646525761, 0.3310881842077714, 0.5352403136965146, 0.7661294193430825, 0.9244074576810648, 0.0287942216685237, 0.6707214734656840, 0.1748621195872093, 0.2273862811658987, 0.2993243342441511, 0.1768052463670724, 0.4825229633452092, 0.0222151629699995, 0.1239513072997847, 0.2987613558162890, 0.1379142600723082, 0.3440376084075450, 0.4373647696000651, 0.8535612938381643, 0.1715420896272014, 0.4749277287386244, 0.1199070948150680, 0.8089862728472129, 0.1441451973256533, 0.4292770696419592, 0.5211270487544926, 0.0011758916400356, 0.7007083090818177, 0.5281931199838487, 0.7671373984849126, 0.6021015440913253, 0.8912456482822858, 0.7899403302123719, 0.6772490738704474, 0.4708856876330734, 0.1763984475095891, 0.1463600662811033, 0.0165949685352888, 0.6068381808285457, 0.3224651525151173, 0.5148486338006011, 0.8463707450685359, 0.2157857682105999, 0.4175494429555621, 0.3779135888568587, 0.1956304117824023, 0.2671144901023431, 0.2978924140317022, 0.1791553064131353, 0.1601117923815020, 0.4436703260522413, 0.4354899010428503, 0.4863644602979916, 0.0455654999679936, 0.9061800810138900, 0.7274221170832363, 0.9082424735107425, 0.1397186081418257, 0.8710584598934502, 0.6569208507280179, 0.9408021142124381, 0.8543062414871980, 0.6782227444037920, 0.9034898824859597, 0.4495484633567567, 0.2222523874894407, 0.3137809125552068, 0.6478283781152648, 0.4165082365846282, 0.0360033802245706, 0.1218543381677559, 0.5108797423897457, 0.5180611700108055, 0.6056074920261487, 0.8779639279963387, 0.9471242759165983, 0.0824748458740915, 0.8674863090505956, 0.7868870903622686, 0.3087124472657461, 0.5009663253734257, 0.1286847456523950, 0.8405951440090710, 0.8737823046846828, 0.5714577591226613, 0.3163790157527726, 0.7294478876193773, 0.7828848822471060, 0.9947426877569866, 0.6268310698491563, 0.9471211534578475, 0.2243844220207657, 0.8573988054285285, 0.2936439994440631, 0.6987905411296418, 0.9507698943631454, 0.2277384525626225, 0.0983196954057779, 0.1158788858867381, 0.3943691258852570, 0.6522812929588194, 0.9323529611324425, 0.2505797725678027, 0.9463081170472853, 0.6972081938469031, 0.2217159609909230, 0.0158618584757915, 0.7992336160031288, 0.4916870887409591, 0.4203222451574106, 0.4954300164669786, 0.4072567181943900, 0.9436149636721938, 0.1115558766484206, 0.2133777544768501, 0.4926894729576140, 0.2288864259039310, 0.9233105307500995, 0.5522443624207825, 0.7804758780629942, 0.8577533254670533, 0.5175537145011389, 0.7458849304738195, 0.4700598126387943, 0.7256984927494721, 0.4946461243081034, 0.5928752445277561, 0.1435942641956947, 0.4530628816644502, 0.7303585087668238, 0.6771458036224584, 0.9821343857747540, 0.0328071121334004, 0.1185647260517267, 0.8226081939044526, 0.8158652049794541, 0.8828048367094834, 0.6291305933887741, 0.0868219653016111, 0.2738519339014919, 0.7144746575303565, 0.4011478376237659, 0.5007377866913673, 0.2288648035566036, 0.4618209141005981, 0.4425821772294087, 0.8664060965744277, 0.9349865168431754, 0.6358704096466863, 0.0008392427989186, 0.1111643065065295, 0.5246200509372015, 0.1354282528990725, 0.9424363035310214, 0.0744909276406249, 0.0310511640320245, 0.3761947915818324, 0.0217261429493881, 0.4949483768791444, 0.0973932294672044, 0.2981311546048886, 0.4083570361665385, 0.9868219940278903, 0.5543595302377633, 0.8069034553160739, 0.7665658438032671, 0.4969299039679246, 0.8434804973005380, 0.7665036069247364, 0.3282416327845119, 0.2149426327922223, 0.2818218695863094, 0.0961871139367003, 0.5579491260907850, 0.5867774049443926, 0.0881760013338349, 0.9878358065870914, 0.1061326855761554, 0.7271613020145520, 0.5798325617779146, 0.1155059662760101, 0.6973883104954021, 0.5049354722387228, 0.6508972709054981, 0.9006534219964644, 0.9605391610546545, 0.1394240512290819, 0.1671649450914079, 0.1664775697290567, 0.4080768206037291, 0.8477853400387060, 0.4499655955247234, 0.0255424858209450, 0.8505854782984940, 0.4636431798425881, 0.8918284279836336, 0.4856684644884649, 0.1659858594059837, 0.0238823839065784, 0.7994671317638116, 0.3751432912824046, 0.3804227384496434, 0.8413148607509543, 0.6506283850297021, 0.9766834855366925, 0.2191262745253812, 0.0248922210452291, 0.2231645580382334, 0.7404604855597532, 0.9355345620434551, 0.1653789667168293, 0.1059396938307424, 0.0020044749140114, 0.4132138001260813, 0.3312924847795359, 0.6492165403032210, 0.2445108317174756, 0.2171661955475684, 0.0119041354225503, 0.3199195886761848, 0.8799274836463801, 0.1697847195140275, 0.8799610104744855, 0.8029777980474817, 0.7691105305599997, 0.8614010915991184, 0.1349045754696620, 0.1039159475547794, 0.8460187964385510, 0.3083002773220541, 0.2412000351515887, 0.6655076815675369, 0.7731655682148677, 0.3339247226528733, 0.6582442922969689, 0.5215653744435931, 0.3567305965895141, 0.2981062040854478, 0.3833902369228816, 0.6969715537271688, 0.6615875892135347, 0.2121642451626392, 0.6571424956786973, 0.5146580817967552, 0.2742574950854690, 0.0533838274345822, 0.3421116783190124, 0.4346208023329561, 0.9428593202287435, 0.8746535554914753, 0.2787038915386076, 0.0607629710157441, 0.9475482605076305, 0.8000948050982155, 0.6696032733350000, 0.1191064572806398, 0.2713718953917491, 0.9754531978352212, 0.2555018393548908, 0.3156812728266634, 0.0378755150817178, 0.9773316421998351, 0.4036409576832637, 0.5324200478158887, 0.2225676235619323, 0.8308367730086326, 0.1544569956255000, 0.0976873451282712, 0.1354281620445729, 0.4682417610236912, 0.4112113092197985, 0.8283636157802693, 0.2354485044044702, 0.5138595908016150, 0.5212459531899646, 0.4374620898104384, 0.2897529706909659, 0.7560560479391087, 0.3444473384695645, 0.2101710283430648, 0.1913184876725962, 0.0194703354524034, 0.8244829999712530, 0.7004725373098700, 0.8548257075248383, 0.7529110407603758, 0.7272569630111225, 0.3430262664463163, 0.0543663112093189, 0.8584713279607648, 0.7237250361599911, 0.6861199156789359, 0.5769331828313227, 0.8880877406289909, 0.6817980021300837, 0.7181124881078564, 0.9474077459051521, 0.1669314152562441, 0.7977844154557096, 0.8776813456744198, 0.3617756810620581, 0.9250877956455573, 0.7853559941128757, 0.1073013935372346, 0.5154524213956178, 0.7705336169182980, 0.7455632462415369, 0.6858314418579472, 0.1451982048517642, 0.9769921914533929, 0.2707441083651104, 0.3692377801896228, 0.7895927671791430, 0.6419221159474837, 0.7595767306201764, 0.7091781136952096, 0.3356167379256038, 0.0962530381386420, 0.8259778697714617, 0.9345988394413669, 0.3858489471473220, 0.0361507946973068, 0.4856627526839860, 0.1892051894625248, 0.4575719204283109, 0.2364687687064010, 0.3024395144952008, 0.4236979859470674, 0.5712537893453448, 0.0743859838433636, 0.6992511255983868, 0.2143443403429400, 0.2557727874806550, 0.6020575222876966, 0.9329008633467030, 0.4591264949733487, 0.1316420504742486, 0.1834118248178533, 0.8616452724482049, 0.4934215152695882, 0.7063222135519909, 0.8890629485443693, 0.3378400307458436, 0.8999166805341422, 0.6545776790901677, 0.2924360980490139, 0.5331525361872268, 0.8521209023427115, 0.5028403366193390, 0.1964219728651424, 0.9007642452958530, 0.6041960938460277, 0.2353145244248827, 0.8739339865772545, 0.2358180816613767, 0.0053266675227582, 0.0245024808476083, 0.4565489134444910, 0.2971400601481179, 0.3462918638414297, 0.3174831292643161, 0.1022473410018786, 0.6345702753207734, 0.7986179739274762, 0.0887550087202571, 0.5395607076593224, 0.5027804701398525, 0.9545712661808851, 0.1311646089110300, 0.3816839551933244, 0.0287340536949976, 0.9741228417106041, 0.8881115817590194, 0.9443051692007695, 0.3973297345018290, 0.2435155738852830, 0.1652102803404903, 0.3243142246189342, 0.8630564791046341, 0.7427364645761575, 0.7628397127536366, 0.2767754158606018, 0.0538923118737419, 0.1873698021206745, 0.1533627910315691, 0.4113317799803305, 0.1961934245958332, 0.9159060981202446, 0.8137254244255523, 0.4905641817376404, 0.1733549482124006, 0.5895471919253229, 0.0471340501793856, 0.9186568804660693, 0.2220043575160327, 0.8392061621265459, 0.4075368623069701, 0.8249215210109830, 0.9296441921715146, 0.7625185210257652, 0.5646893167247345, 0.6062559916719461, 0.7733470603381122, 0.3581334207021432, 0.2525868596630824, 0.8030837979013034, 0.9078980508746070, 0.0213157617704918, 0.6198872241946154, 0.6982054377522401, 0.9125352939114136, 0.8662395645424570, 0.4964301003594250, 0.4589454657543227, 0.9729557362505116, 0.4761687642040447, 0.2915994889708689, 0.0625496872006724, 0.1082706330984529, 0.2676008131717454, 0.4510148028230647, 0.4210224473120947, 0.1548976062879481, 0.8710345719788597, 0.2967209912992471, 0.8860973384349545, 0.1028653706204793, 0.9112527657530287, 0.8316115232944399, 0.7876503979181846, 0.5703146078114243, 0.7668035869923945, 0.9765830388028187, 0.0635054924724125, 0.5053664034118617, 0.1667977138441292, 0.9084464933427940, 0.7396569990701948, 0.8901329413650267, 0.1282122077353620, 0.4280410688231076, 0.3546730853650018, 0.6740117202355542, 0.6993058676596479, 0.1008720531313658, 0.1655201742599672, 0.1678607872980307, 0.3498860824240698, 0.6979183623465720, 0.2972227666959424, 0.2718621421393922, 0.1371334239013910, 0.4695049786139125, 0.8856335695096561, 0.0421636389002602, 0.6171453064703414, 0.8408735929295654, 0.0821163784732936, 0.6958031307930189, 0.6798926151186255, 0.6338000423355364, 0.4342430860317124, 0.2476013748163865, 0.1524726995823791, 0.8910536354990762, 0.4307119981575572, 0.9065538585311617, 0.2802491643541730, 0.8519531607780675, 0.1309172521114062, 0.5223657172611972, 0.5940340561115732, 0.3471992523602176, 0.8553387616652556, 0.6768882381811585, 0.5180580908117607, 0.3464191929026591, 0.1534112256529780, 0.0416632587526700, 0.8032127017104451, 0.4956108399308800, 0.4327021758264568, 0.3047239994232592, 0.8910031103464617, 0.3485973984888802, 0.6992259055414151, 0.9250438169849708, 0.7898209042260892, 0.6802180037968130, 0.2967131969491587, 0.2720348328492520, 0.4998718700371028, 0.9163578329533125, 0.1844334098123010, 0.0446327913910037, 0.8986315754794177, 0.9565339328231259, 0.5917358349016343, 0.3039301433909674, 0.5032089054635454, 0.0098436923475592, 0.2290618525922859, 0.9941160211092916, 0.8018469588895006, 0.4515732147894628, 0.8513496134842463, 0.0670183661705313, 0.6178567164242852, 0.4182952572441551, 0.5383931272117743, 0.8023733482266281, 0.5417656241717650, 0.8788865026335969, 0.9290448072784062, 0.8280212198734908, 0.7615164777749828, 0.2390743428106357, 0.3649655704104566, 0.9861748858550504, 0.9590151332996334, 0.7884061132262163, 0.0238172507286693, 0.0288057462668017, 0.7563025130758088, 0.6327250271593858, 0.6647564006738251, 0.0403168932323779, 0.0851091202383121, 0.7131062167973624, 0.8266676506818488, 0.9699554487883290, 0.8566660020465017, 0.1673708090915806, 0.4935407356523587, 0.2583648166914596, 0.1595971470629153, 0.2616218585439897, 0.1565142635892891, 0.3304712882926483, 0.9311919539307059, 0.1237307163308776, 0.8449149809933604, 0.3000564008709446, 0.1208132269579128, 0.8551890471212074, 0.0613489685386913, 0.7006205445868144, 0.1740531003432544, 0.7732481261159894, 0.1343660168913316, 0.7749930699273819, 0.9868025567899982, 0.7757411308234101, 0.1887441922584664, 0.0740016559370295, 0.2881953716589823, 0.5678458093960356, 0.4288866101517670, 0.0670517898261449, 0.4631190147842646, 0.2993357137446890, 0.9724694844095528, 0.2340145672977075, 0.2952070238889182, 0.1034148020388507, 0.2599693743121106, 0.1983623100747410, 0.7891247745270171, 0.1365468411207909, 0.1704415101615018, 0.3795300396545589, 0.7872552286992399, 0.6761356879505004, 0.5746224709379114, 0.2599649322694619, 0.4465083963340758, 0.1772230114168324, 0.8958712439541665, 0.6755852294955170, 0.0424740404216321, 0.3474975250466014, 0.2787291110962878, 0.4239709392959372, 0.1264310228573687, 0.3030433007684182, 0.6167934317373043, 0.9774138579905517, 0.7922540390432117, 0.9754042035037350, 0.2937298063641197, 0.0493613402709324, 0.2131441317680902, 0.7118006990276875, 0.1926245778050174, 0.0565962349320215, 0.1083695656991906, 0.3233653572329019, 0.6883633369417523, 0.8142820788077080, 0.4708595737453577, 0.9574256940403741, 0.8577722569424684, 0.0390429387589084, 0.6485406197671680, 0.2286115179667637, 0.2505120841371920, 0.4679479656413075, 0.4803960416666576, 0.6427271305126666, 0.1298867853024623, 0.2293811386379165, 0.1945257046607350, 0.5737600072544007, 0.9456753829298495, 0.2914040068729966, 0.0411626576385112, 0.0851770531853963, 0.7512162357048413, 0.9114283912185644, 0.1084939194571904, 0.0340797220314683, 0.6686522970980507, 0.1906153990139051, 0.3274779492389834, 0.2516885885036551, 0.0772963287875257, 0.8935280009426281, 0.6201968041430754, 0.6029673627910744, 0.2263063654776020, 0.0421182878029569, 0.0135692741556023, 0.3516307018310701, 0.3075847105833159, 0.5301877412643056, 0.3610995616465294, 0.0932831537509481, 0.5333126231650014, 0.8783698621094786, 0.4581192548325713, 0.6692522865725606, 0.3856532909282943, 0.6141582130483899, 0.7281831720947005, 0.1948844614969170, 0.4943642276124682, 0.0784046332183870, 0.4345422259377688, 0.6558368046570618, 0.2400154516354979, 0.8126312836129430, 0.0042070986675205, 0.7770597741058617, 0.1301261926096061, 0.9201150257154005, 0.0150107888897510, 0.8096920536489608, 0.4692264045572709, 0.6698343981997922, 0.4625374292719958, 0.9620387146985410, 0.8815344945317943, 0.3039975463072964, 0.1632562644673550, 0.6693371407177068, 0.0255299687668171, 0.8262515235259924, 0.8290796078644540, 0.5251654865487730, 0.1769262026207146, 0.4146529856406467, 0.6257710753225278, 0.5385762819453994, 0.3467421010954000, 0.1803570538412348, 0.0062855490090003, 0.1631445529039522, 0.4952396311548886, 0.1707236567576024, 0.9432265054633366, 0.7188326227851898, 0.0739719232510591, 0.3438571127652211, 0.7995944476081212, 0.1332539980868194, 0.0690427248469638, 0.9524527209180689, 0.3688802404953913, 0.4580401459470407, 0.7170697644292721, 0.1786917333296686, 0.3231652528555629, 0.0632698207861022, 0.2341749143379414, 0.4131050383018145, 0.2951629865399300, 0.2573327687674984, 0.5130724364261614, 0.1589627169488473, 0.1819274409586360, 0.3605838202714328, 0.5440325678864545, 0.9090988849041570, 0.9379179733105221, 0.0141064347307200, 0.8508626122118714, 0.8167047819570149, 0.2623920121133221, 0.4495180123110233, 0.6073459575540703, 0.8055352308781114, 0.0827481756805070, 0.6495691246737028, 0.9557837386834148, 0.1689731366639478, 0.4739915237375780, 0.4228752065265029, 0.3864621066601071, 0.5216681823333275, 0.5101372326813385, 0.9282979463152260, 0.1934401620509328, 0.4407899952942061, 0.7970175752643954, 0.2477094328926093, 0.4700907027077451, 0.1180233354974776, 0.8422914801798748, 0.1531763443715683, 0.9784896365217246, 0.6142847292421334, 0.7350009968521926, 0.1559845355507213, 0.6408397957395198, 0.8871901348808436, 0.9853156529299215, 0.2043291709958035, 0.6791988294404089, 0.1737458412194951, 0.5556855949910641, 0.1662239833913383, 0.9252958993331035, 0.8815207942410712, 0.9207020404321706, 0.9462893018422216, 0.4915897861261869, 0.0532454258881340, 0.6745415400933488, 0.5767564764496971, 0.4995223250778442, 0.5741762963226479, 0.2972223117023296, 0.2369406864338512, 0.1705331838829866, 0.2544590026820316, 0.5933356553889287, 0.7557815104974221, 0.7308638669478563, 0.2163376957510569, 0.2586691231426438, 0.7553707339814911};
+
+const double co[FFT_SIZE] = {0.6706497803768818, 0.8259915659051159, 0.6127769850532617, 0.4042432493346517, 0.0563064540342341, 0.4506809985950107, 0.6728182306226016, 0.2093887700710019, 0.2629049630806244, 0.0068903568874143, 0.6741981263711310, 0.8026358879744457, 0.6615563839200532, 0.2011487589490933, 0.2966113305625048, 0.5350148999623799, 0.7123884593841227, 0.8801106496231675, 0.1057599762765537, 0.7736908773165471, 0.1150862062662503, 0.3439478131991411, 0.2162976539518998, 0.0057640498417387, 0.5205619338920122, 0.1837588835868946, 0.1072048133407638, 0.9330220583897403, 0.0781877556303664, 0.6604415374454923, 0.0055543256941696, 0.2113213532549362, 0.4166371044168225, 0.2489126317221700, 0.8804237290693118, 0.9114630717835008, 0.2122197185028387, 0.1872496047054253, 0.0283493571356546, 0.0011739769717719, 0.2587451230366413, 0.6134283988672150, 0.7960136720771441, 0.4417212743517567, 0.3538190365232776, 0.4820827424201957, 0.7270079301991990, 0.5540293780631791, 0.6844720529281880, 0.7395825773469121, 0.1689867872929229, 0.7390011771948182, 0.3889554660143338, 0.0158743815304996, 0.2794561312296530, 0.5488249778351199, 0.9939879360511114, 0.3265921768161898, 0.7380059200028429, 0.2686659846029050, 0.0140301867513706, 0.0345076306283345, 0.7098586658566393, 0.8804033136216555, 0.1311251822393278, 0.1738269702011150, 0.9467849911595574, 0.0635165505526809, 0.8045666146925562, 0.5500252055448300, 0.2960850128458551, 0.3791679357611623, 0.3318679405186607, 0.1383370271666072, 0.9622471231685127, 0.0008209235817533, 0.2858982586997720, 0.9627033012525220, 0.5536461903980735, 0.0203918495292208, 0.2673520692161342, 0.3587292238852842, 0.0093934765497702, 0.0284739994461690, 0.5054042027492341, 0.8181935096212357, 0.5459306504169178, 0.9984011518683296, 0.4788924934998232, 0.9047358057561707, 0.6958031753814037, 0.0826713344650157, 0.2449075192032626, 0.4332419552713540, 0.7481090411770011, 0.3337436210362408, 0.1288111479371150, 0.1393425109365868, 0.3694359018085516, 0.2161886277610609, 0.0868289540623030, 0.2809660913222927, 0.6834390896658262, 0.6599492802927122, 0.0703576285531474, 0.8851721422324230, 0.0784159016220343, 0.6775815611931443, 0.8723857873635551, 0.3442387428829488, 0.7488398469947676, 0.6865869483303326, 0.5721400649461029, 0.5113942038836549, 0.7175259320021290, 0.5784878853002242, 0.1192925964151463, 0.3728264511453223, 0.3324480279209299, 0.7348138089866270, 0.9113418227917187, 0.0133558732261029, 0.0444334379695671, 0.7655890089284283, 0.8380837128929514, 0.6909078386850797, 0.8479124776327206, 0.7677202200246880, 0.5153327254961750, 0.8930457828966226, 0.6018790515210961, 0.0665720402909682, 0.5962448507692394, 0.3392590904124880, 0.1112857249315309, 0.5367884989765819, 0.9916240181373843, 0.8331481345246642, 0.2994661478507417, 0.8627726556183214, 0.6182353827040976, 0.6149876265111006, 0.3531793653091488, 0.5143005186400568, 0.5926468898446244, 0.3649024825358713, 0.5343363005946771, 0.5725036130122593, 0.3174075718189375, 0.3751798269431847, 0.6578860801973966, 0.9332728824329765, 0.1146445520498136, 0.1662239710723725, 0.8694019864172604, 0.7499672365062569, 0.7271363734624335, 0.9430020624479579, 0.4132824422670823, 0.4837363618225233, 0.4671709271543480, 0.4537214639120629, 0.7954668379373012, 0.2438654997599063, 0.4419460762806375, 0.6777206266673230, 0.9957734162654772, 0.2480800843375707, 0.1280403970412000, 0.3644668863337679, 0.9616873414436868, 0.1868708749314857, 0.6930411666732398, 0.5780037143603487, 0.5608423882500977, 0.6441989655644730, 0.9713249811202351, 0.4294390166286234, 0.8969774741365252, 0.1960699631492769, 0.7224530353170772, 0.1268089950416111, 0.9397683680282519, 0.5315018323429732, 0.2254886187046609, 0.0429141142621825, 0.2024717685614631, 0.6910933955316909, 0.7314732999603543, 0.1551093873719042, 0.6743060895480667, 0.4556540188327001, 0.4432436833380574, 0.5606860679844500, 0.6319108687982481, 0.0116703069980435, 0.2322452408551318, 0.3536862332363362, 0.1158322695030433, 0.9634522939857088, 0.8487323055999937, 0.4353499310626945, 0.6302969530620972, 0.1274088565446815, 0.2453010715007161, 0.7126333281485220, 0.5808262573450925, 0.5096368273743479, 0.4906882869254115, 0.6495880834323012, 0.0233123321742689, 0.0041469810558323, 0.8805597089399800, 0.2018707114365797, 0.3379314576230700, 0.4753747255809189, 0.6616274253970083, 0.3197317654981836, 0.2874055811093641, 0.0698162859045715, 0.5185972464080254, 0.3712390779666960, 0.0395522598727142, 0.8522029796288904, 0.6429233013492220, 0.1716043134564161, 0.0245860778925260, 0.1192679823597833, 0.2251123162515863, 0.2278627039406244, 0.6021001931781610, 0.7716493715297760, 0.7086536443199765, 0.6378488996151952, 0.9778896639349272, 0.6175561601799165, 0.1438112390964338, 0.5655215638728978, 0.8964914023258709, 0.4929803186620192, 0.3181047984817529, 0.2571762285898997, 0.5341139182822019, 0.4481070842468913, 0.7442557099061952, 0.0755455037462515, 0.0881736635594114, 0.8292182561831798, 0.4702901568278792, 0.3172165412962517, 0.5192743623627130, 0.0639664291315532, 0.7885729748132124, 0.8739453984594142, 0.2044745982999192, 0.7544967854617538, 0.6899486205135590, 0.9665559358594927, 0.1942611672076565, 0.2071430333395867, 0.2651524610606420, 0.6428563324162907, 0.6081367216327236, 0.4238958468282013, 0.7672532189318672, 0.9786971502709926, 0.0170800252756996, 0.5413752736159771, 0.4882800093012846, 0.5664635732064296, 0.4535325668908858, 0.4184044325889613, 0.9097756987185860, 0.4766618682549004, 0.9760491135221880, 0.6888504370810208, 0.5485435178768772, 0.5561370316148891, 0.0094666403269690, 0.3360619728116845, 0.4604348339427876, 0.9134297132560247, 0.9908922097051105, 0.1251950412031655, 0.5663664606143862, 0.0945400483940218, 0.4625197493670939, 0.8639195447432346, 0.0039262799519478, 0.6833368379014721, 0.7422283452747417, 0.3367793143998574, 0.5412184398424924, 0.3761234842735970, 0.8815788022034485, 0.6074823902030668, 0.4777707505251232, 0.9635916031584622, 0.2727502301296457, 0.1733453829569238, 0.8644986842700396, 0.9691780174692244, 0.2882628109384491, 0.6786791865359718, 0.8478671149035980, 0.4535076944249774, 0.1640098684409771, 0.4073202121801956, 0.5009583692983397, 0.9463817489661509, 0.0961353922326324, 0.1998223443867649, 0.7008862334619737, 0.2881202049236278, 0.3458537061813881, 0.2114514447990400, 0.0648526139252205, 0.8359259337698395, 0.7136411968729466, 0.8839727629895447, 0.4485996609021738, 0.4126785318598829, 0.1302233136776000, 0.6566698732369666, 0.7658415354209089, 0.0691474385841039, 0.5299372100597235, 0.8072030763876551, 0.7386502398203574, 0.8163976724866837, 0.9099590634362089, 0.1079579315030378, 0.1217338602508726, 0.8398682867388026, 0.0527879920083521, 0.8411987867709243, 0.5329342173929354, 0.0519388465693226, 0.8361373832400553, 0.6360358915176915, 0.7620059555978824, 0.7335875744925811, 0.7068483685535193, 0.8204346828900280, 0.2406901567099838, 0.3119376161816957, 0.8188672952427822, 0.0569869927182464, 0.8160735672225893, 0.1962001548817530, 0.6846908215984758, 0.0249193853783506, 0.5050224922572938, 0.8070765288638290, 0.9050568111880135, 0.5962573669748086, 0.1064109752073065, 0.8717233586021045, 0.7111238873247069, 0.8958953958961852, 0.0124857341852776, 0.3721871578061370, 0.1618305771923772, 0.7515039566733900, 0.7107271696811842, 0.2336812851484666, 0.1458156473180457, 0.9620985323087055, 0.8275964656273100, 0.1190767363568868, 0.9233858731422754, 0.5322410813615738, 0.0985540318104040, 0.8424411570469573, 0.0666493030651335, 0.5341925877342263, 0.5394414482514946, 0.8742698174359415, 0.7370734913518688, 0.0641610061811848, 0.7294092153878285, 0.3213275986725672, 0.1358937559382011, 0.5447052195538291, 0.1646240051946704, 0.1159073445476051, 0.5472078151545781, 0.7913238484821290, 0.2545447567715644, 0.5902198217476829, 0.6180104514739206, 0.2679718156247742, 0.6567257066434474, 0.4768088481712171, 0.8438998411194075, 0.8018278899795357, 0.7121966511487732, 0.9440082058646051, 0.3903038249845164, 0.6657680925264067, 0.9707962023941167, 0.9758816432468408, 0.5180344881975328, 0.4590301346752441, 0.5790243849919570, 0.9827581127256924, 0.7580890772895353, 0.0282653007892825, 0.4742266549813303, 0.5206714623709152, 0.0880362523484991, 0.9441696695392323, 0.4154944551240305, 0.4854395925471128, 0.5980708329728217, 0.1514730782817679, 0.2277850588198586, 0.6003959811473946, 0.4138648613445658, 0.5214294374618673, 0.5357899328102427, 0.1126604961733214, 0.3978861271719195, 0.1572100962678205, 0.9684761870036048, 0.2823789715122690, 0.7350302037352653, 0.2226577397656659, 0.2146205511975388, 0.7368134024381822, 0.6851977195850656, 0.2901994887952524, 0.2484031578734452, 0.8406937400471280, 0.7330257783888604, 0.6786698842197517, 0.2108314045756776, 0.9729048073557747, 0.1308633059219713, 0.8793668353727628, 0.3849229287904603, 0.1940388764205123, 0.1682749150222659, 0.7803041144613144, 0.7925818205728924, 0.6160000615567424, 0.6645809359455023, 0.6374354155824379, 0.2899256792758656, 0.2300623404836308, 0.5242963335351867, 0.1784243876633100, 0.2478678303610563, 0.6137636967201309, 0.1159975240188399, 0.4192057281273810, 0.6103248712962920, 0.6050614699403944, 0.6385246389661129, 0.7328477801951783, 0.1442908280252166, 0.2314561865539927, 0.6455315357936088, 0.0036223892582007, 0.0890605637757619, 0.6577781560016939, 0.5651268147351131, 0.5703656983239329, 0.5241197109565234, 0.0928816194038764, 0.5691972941463214, 0.8203219486093015, 0.2960977178239230, 0.4965672877217533, 0.2267953990067369, 0.1616474206061058, 0.2368359225241292, 0.8386880802324272, 0.4304339747920264, 0.8145921244355058, 0.2926089852252082, 0.4587937530266486, 0.4627877133550086, 0.9834880148784035, 0.2091795422250676, 0.8352278251817872, 0.0575487671296270, 0.3627326891505497, 0.6041543996670723, 0.0240717091937075, 0.4567222795141845, 0.4187870842887678, 0.5690436201072602, 0.3836306545353996, 0.7612922517768207, 0.5830063635525695, 0.7915574263840475, 0.4175259561486966, 0.2865009367887664, 0.4939103319869848, 0.2032170404710166, 0.8525061025761500, 0.7470551056895179, 0.8704712147963954, 0.6021654256915009, 0.6238331380559238, 0.2855855561303914, 0.6225569675320149, 0.2935555722964330, 0.9589648176738705, 0.9601991287755726, 0.5852953296215396, 0.6340552231766458, 0.6093081552867891, 0.8201434308862593, 0.2822697850577675, 0.9967785368852289, 0.2335465394107082, 0.6133704666150794, 0.4904032972340310, 0.1486629614533488, 0.8344672104592319, 0.9135908892417143, 0.7375622842785539, 0.5897558904109929, 0.1098753606683376, 0.9272881333662260, 0.6750529795155394, 0.8462439715445221, 0.2697821392669694, 0.7935084333473916, 0.8943474250522346, 0.2476696228020709, 0.3595067971832537, 0.8828856110778583, 0.6013691126210915, 0.9341383640410316, 0.4639396851498175, 0.8290389292699053, 0.9429304352276578, 0.8081843415934805, 0.2868742714089621, 0.6535422941066777, 0.6023122114508395, 0.2223677379303567, 0.6361442691922778, 0.3982437177621924, 0.5200912939619448, 0.5758078305226627, 0.7748887228869331, 0.1868994335680947, 0.8514212268643726, 0.3243979065563521, 0.4913208241743346, 0.0238366876477415, 0.1780986630421012, 0.8175212786729061, 0.9890372316210527, 0.3728789405866972, 0.6985932887801443, 0.3352356552544678, 0.3583583587778792, 0.4466220774815540, 0.0073745961146291, 0.6395481290571057, 0.5310219901165730, 0.7821001015015184, 0.2685203738424503, 0.1438215294677934, 0.5978443760279027, 0.9795823619109548, 0.3137689628064870, 0.3214138467598521, 0.8115559552087143, 0.2312886358012007, 0.8212584584657652, 0.9204949582089900, 0.0535134842000858, 0.9994410687255284, 0.6078550477689345, 0.7973926779009489, 0.1996560290000941, 0.5062876995415149, 0.8106786658315915, 0.0578425989842830, 0.5827079546553868, 0.0432037154811639, 0.5040317224858045, 0.9355691016054981, 0.2346848591614981, 0.5349390666455331, 0.9174472475955017, 0.9493137647333125, 0.4753405498076677, 0.1103976875454604, 0.7558087927388618, 0.3570947260322702, 0.8038972094324570, 0.3579640237972918, 0.7760442284305953, 0.3810516153211138, 0.1975746340404962, 0.8492999204369951, 0.6765546499587541, 0.1665838822246852, 0.1122785128910717, 0.2931939247600330, 0.7919951366782531, 0.0000582404213271, 0.8365080694915067, 0.2203637985585991, 0.6121296532474468, 0.2632961130913377, 0.0167285780013336, 0.4663309861016941, 0.7681799354590529, 0.3578060430860387, 0.2507600408199844, 0.5213115453088991, 0.3586892252566525, 0.6067751293117634, 0.9444632137746499, 0.9554219865588455, 0.5440689530350660, 0.1909700800250211, 0.1093806604767160, 0.7921633027842446, 0.1450294874919295, 0.1471985053609071, 0.0840312398289538, 0.0154118778449698, 0.4113809834270833, 0.3409183263468049, 0.8245251809130726, 0.6855985912090038, 0.2734045968044596, 0.7470573345824032, 0.7955318051569673, 0.0098127554247992, 0.6683780880410551, 0.1955225398256463, 0.3766197726646677, 0.0391047380371551, 0.2781487271629544, 0.1364691784907707, 0.2850721502751419, 0.0328973603833372, 0.9943792719896820, 0.6688384792981219, 0.4181112610271447, 0.1958179163192384, 0.9487291300060424, 0.3077654564242168, 0.7734300984283474, 0.6001396078131837, 0.8288257992036374, 0.0598446880534251, 0.0041856455700249, 0.9894728358865287, 0.0264532417712930, 0.4804227234935126, 0.0209322318342958, 0.9079223600125221, 0.9942765238896506, 0.5695570360172535, 0.7908262776651667, 0.9298491328745901, 0.2208941532330675, 0.4179045817888594, 0.6575322667894352, 0.8683361463991330, 0.0839274555745167, 0.5310017743192919, 0.5588325296668758, 0.0790463710490849, 0.7141867336772016, 0.4660200337484994, 0.7912064169318891, 0.8692844841966102, 0.5698923882269467, 0.4622641334170032, 0.1857573872948335, 0.5555595117353874, 0.0274413368339296, 0.1478438882769952, 0.4022779560333388, 0.8310386550646565, 0.1955024169867306, 0.8105401474647648, 0.3179930012343569, 0.0645600918293471, 0.2821075221546099, 0.8126411863275826, 0.1958498653224454, 0.3417382871033576, 0.5429096178775660, 0.0584930853678110, 0.4318403446245803, 0.3400144716621019, 0.9163287579962210, 0.6570576629613014, 0.4512718082641197, 0.9918900189591481, 0.4125872327658243, 0.3068165288947494, 0.3917093909562097, 0.3211895063719646, 0.3791139793096455, 0.3120045087232532, 0.1830462244693473, 0.5714279559387955, 0.2432982030208981, 0.3619224357655671, 0.4432778294797055, 0.7380736063012061, 0.9969313795461562, 0.5796349622748407, 0.7489459668531810, 0.7253672276173816, 0.5964103996236462, 0.2396655416315751, 0.0793554566490335, 0.3066772003296285, 0.5463786145232832, 0.0368418381532545, 0.9528706490181399, 0.6710863315232413, 0.2502500622002418, 0.4954620639638203, 0.2095527133076652, 0.4969308697084986, 0.4630343362496562, 0.7156447186913564, 0.9234436793840297, 0.1856394858598623, 0.3900936852835272, 0.6562750780860392, 0.6782481697309971, 0.0911612232140149, 0.1506002710545582, 0.4054244376561835, 0.4151740738781450, 0.9276398938602863, 0.6659787134123577, 0.9664801684939164, 0.3115282554454715, 0.8850230123909625, 0.6794787234586774, 0.2039261229292699, 0.5261577562343004, 0.8031207979755999, 0.6089336135656924, 0.7589013122320359, 0.3252171220337829, 0.2898318363065108, 0.7628518731394488, 0.1208005967267066, 0.4226086253200432, 0.4642084456183688, 0.6308854486034864, 0.1873009554916036, 0.6745428364676211, 0.3021643928953425, 0.6945713970307663, 0.2122282798610379, 0.4109919470346464, 0.2792336701373840, 0.6547910278041879, 0.2040536576239929, 0.8670961185862694, 0.8436951669448575, 0.7947723365945589, 0.7520419119893480, 0.7868348879649741, 0.2582729804497911, 0.8551167038829224, 0.3565121290335632, 0.1988301591539327, 0.1253561067512468, 0.3366010045544819, 0.3272425311344930, 0.1538595967543899, 0.1033105160116152, 0.3743997170512169, 0.6153147887679208, 0.6675935686067275, 0.8367262623602036, 0.6291700812098902, 0.0581007481140927, 0.5781984136712619, 0.2994004347902761, 0.2100447758866776, 0.3443339876707654, 0.0288499938062725, 0.3475022184142304, 0.7603928954830640, 0.5794945515381902, 0.5742942870031563, 0.0880799601167812, 0.1316003510675131, 0.2672551380763951, 0.4159943880195391, 0.5989595178839436, 0.2079628915883681, 0.7947277676573256, 0.7012523488967064, 0.3131759144170164, 0.9430180194210784, 0.8093026915237201, 0.7638995751704638, 0.9863321525652662, 0.4003011775272923, 0.9392228653340066, 0.5293987821876242, 0.0699443843988401, 0.3134108149213973, 0.7679636839503412, 0.2065000836745334, 0.5092162007580897, 0.3550337294465232, 0.2625737652496218, 0.3582208438688635, 0.9962482615397005, 0.7136425903233395, 0.9873002903568326, 0.7940620208707384, 0.1919963578354481, 0.6051337418560589, 0.2133650689005113, 0.9788801647903563, 0.4018239919361203, 0.9855890087001478, 0.8940523377283587, 0.3345351792526688, 0.9332820447600124, 0.5065539962732061, 0.9850765452102191, 0.5451311385903999, 0.6739192120991860, 0.8995240635621277, 0.5550385370458792, 0.3985632869525510, 0.9486246686280224, 0.3963824622451271, 0.0923621929153820, 0.4044468670200175, 0.9129165705540221, 0.2474533411648938, 0.0907881496037106, 0.5333879332631586, 0.0824018675289126, 0.2441935596529791, 0.5602324445708283, 0.2031084500396330, 0.3395845457034887, 0.8651871658783690, 0.1909952863567097, 0.2795872739642140, 0.8312696340084913, 0.7787417059599778, 0.0449367160743683, 0.4692373597415473, 0.1408660435935495, 0.4078630996645722, 0.9620032624635270, 0.2366611129563654, 0.5014567508919666, 0.0981788114016942, 0.1806323541546026, 0.4900608810254211, 0.2257804796681363, 0.6635944289309471, 0.5115215380743492, 0.4660595600809136, 0.5893662854201182, 0.2212515715943369, 0.0890093449785207, 0.9642799094591201, 0.7520228015470677, 0.5725258426375218, 0.2807641908627197, 0.9622855547195419, 0.6132306130320873, 0.1471264854779259, 0.5576803869075215, 0.5224653336349999, 0.4353217702014705, 0.2121603219439661, 0.5072724887865836, 0.3664609952382488, 0.3621023188399063, 0.0568475790644856, 0.6277682176611352, 0.1804715445896593, 0.5440077939177549, 0.6382937479031150, 0.1863015302591411, 0.4739561207873199, 0.9198099739242492, 0.4462258281478695, 0.3780301601045438, 0.1416867369433903, 0.3206521623141904, 0.8805001012584773, 0.9963772804791737, 0.4617856603383861, 0.6395592546966653, 0.2299436212495613, 0.5523120968280731, 0.0390347512883195, 0.9754607130246790, 0.6898141941820103, 0.6098647799232504, 0.0011919751190465, 0.2742158816023777, 0.0129619504510874, 0.7112811891677699, 0.8748053417175690, 0.7771672829000217, 0.8636747421080946, 0.2008204071149156, 0.1670931862843831, 0.9930516449781763, 0.2295481356655345, 0.4619626182430470, 0.2716373586077914, 0.4774434444031093, 0.1554564497529733, 0.5801407455126777, 0.9251803686711203, 0.5870197311906299, 0.4426079411888729, 0.8193189482072215, 0.9469464587102370, 0.6456911458242299, 0.6790549569637353, 0.4549697186771808, 0.7432000533939859, 0.4987473965562773, 0.0215206591826416, 0.4239912636305227, 0.3798668775474282, 0.5902707500336405, 0.4617226843808971, 0.1450335004744172, 0.8270521721189605, 0.4798500419297958, 0.3531084288980881, 0.4127904888076044, 0.3979812311811942, 0.0633748050049529, 0.9628699220321748, 0.2808764620100573, 0.7951747844806449, 0.6440324052030922, 0.8268915145821329, 0.6776694233399565, 0.7476721154021942, 0.7913956135491885, 0.4438037611563914, 0.1894062094066217, 0.6742821959559429, 0.0751962319153344, 0.4171746726632544, 0.8028094818238460, 0.5741540631774584, 0.2119586184816012, 0.7002240855906146, 0.5915092902196697, 0.4088850928024466, 0.3891466494839805, 0.4450613685799698, 0.8605063273274033, 0.7619769015116673, 0.4109791488118166, 0.6995209428283368, 0.7927465224293798, 0.6651371873253121, 0.8783821906590518, 0.7324899106003891, 0.9787996433785298, 0.2243933711503675, 0.3396867072456570, 0.9706742302917581, 0.4226697559960621, 0.4053856578671966, 0.4299848906994959, 0.0195538050942645, 0.4882446058399408, 0.0050335943612510, 0.6184150514021836, 0.7436742538352471, 0.9760423311005739, 0.4809790251925535, 0.8281110640624487, 0.4293368810785904, 0.7447513040531746, 0.3658407082754213, 0.9347167863565927, 0.5756712042417134, 0.8907119866888689, 0.5040296297570688, 0.0431348307802444, 0.9924178790289504, 0.1382007251365877, 0.6552489912530833, 0.3028184124450130, 0.6008649706098884, 0.2387731461416915, 0.6260593296138161, 0.3966320214295392, 0.4410662055655723, 0.3598054629319845, 0.1273167659069661, 0.5659734413179224, 0.2577111394577001, 0.7920323294835268, 0.2084368240195619, 0.3714806785942453, 0.1605691731804975, 0.8915152147589399, 0.6678945841165947, 0.9620524271442882, 0.5115421986130528};
+
+const double re_twid[FFT_SIZE/2] = {1.0000000000000000, 0.9999811752826011, 0.9999247018391445, 0.9998305817958234, 0.9996988186962042, 0.9995294175010931, 0.9993223845883495, 0.9990777277526454, 0.9987954562051724, 0.9984755805732948, 0.9981181129001492, 0.9977230666441916, 0.9972904566786902, 0.9968202992911657, 0.9963126121827780, 0.9957674144676598, 0.9951847266721969, 0.9945645707342554, 0.9939069700023561, 0.9932119492347945, 0.9924795345987100, 0.9917097536690995, 0.9909026354277800, 0.9900582102622971, 0.9891765099647810, 0.9882575677307495, 0.9873014181578583, 0.9863080972445987, 0.9852776423889412, 0.9842100923869290, 0.9831054874312163, 0.9819638691095552, 0.9807852804032304, 0.9795697656854405, 0.9783173707196277, 0.9770281426577543, 0.9757021300385286, 0.9743393827855759, 0.9729399522055601, 0.9715038909862518, 0.9700312531945440, 0.9685220942744173, 0.9669764710448521, 0.9653944416976893, 0.9637760657954398, 0.9621214042690416, 0.9604305194155658, 0.9587034748958715, 0.9569403357322088, 0.9551411683057707, 0.9533060403541938, 0.9514350209690083, 0.9495281805930366, 0.9475855910177411, 0.9456073253805213, 0.9435934581619603, 0.9415440651830207, 0.9394592236021898, 0.9373390119125748, 0.9351835099389475, 0.9329927988347388, 0.9307669610789836, 0.9285060804732155, 0.9262102421383113, 0.9238795325112866, 0.9215140393420419, 0.9191138516900577, 0.9166790599210426, 0.9142097557035306, 0.9117060320054298, 0.9091679830905223, 0.9065957045149152, 0.9039892931234432, 0.9013488470460219, 0.8986744656939537, 0.8959662497561850, 0.8932243011955152, 0.8904487232447578, 0.8876396204028538, 0.8847970984309377, 0.8819212643483549, 0.8790122264286334, 0.8760700941954065, 0.8730949784182900, 0.8700869911087113, 0.8670462455156925, 0.8639728561215866, 0.8608669386377671, 0.8577286100002719, 0.8545579883654004, 0.8513551931052650, 0.8481203448032971, 0.8448535652497069, 0.8415549774368982, 0.8382247055548379, 0.8348628749863799, 0.8314696123025450, 0.8280450452577556, 0.8245893027850251, 0.8211025149911044, 0.8175848131515835, 0.8140363297059482, 0.8104571982525947, 0.8068475535437990, 0.8032075314806447, 0.7995372691079048, 0.7958369046088833, 0.7921065773002122, 0.7883464276266060, 0.7845565971555750, 0.7807372285720943, 0.7768884656732322, 0.7730104533627368, 0.7691033376455794, 0.7651672656224587, 0.7612023854842616, 0.7572088465064843, 0.7531867990436122, 0.7491363945234590, 0.7450577854414657, 0.7409511253549589, 0.7368165688773697, 0.7326542716724126, 0.7284643904482249, 0.7242470829514667, 0.7200025079613813, 0.7157308252838184, 0.7114321957452161, 0.7071067811865472, 0.7027547444572251, 0.6983762494089726, 0.6939714608896537, 0.6895405447370666, 0.6850836677727000, 0.6806009977954528, 0.6760927035753156, 0.6715589548470181, 0.6669999223036371, 0.6624157775901715, 0.6578066932970783, 0.6531728429537764, 0.6485144010221121, 0.6438315428897912, 0.6391244448637754, 0.6343932841636450, 0.6296382389149267, 0.6248594881423860, 0.6200572117632889, 0.6152315905806265, 0.6103828062763090, 0.6055110414043251, 0.6006164793838685, 0.5956993044924330, 0.5907597018588738, 0.5857978574564384, 0.5808139580957641, 0.5758081914178449, 0.5707807458869669, 0.5657318107836128, 0.5606615761973356, 0.5555702330196018, 0.5504579729366044, 0.5453249884220460, 0.5401714727298924, 0.5349976198870967, 0.5298036246862943, 0.5245896826784685, 0.5193559901655892, 0.5141027441932213, 0.5088301425431067, 0.5035383837257170, 0.4982276669727813, 0.4928981922297835, 0.4875501601484354, 0.4821837720791223, 0.4767992300633216, 0.4713967368259972, 0.4659764957679657, 0.4605387109582396, 0.4550835871263432, 0.4496113296546060, 0.4441221445704286, 0.4386162385385271, 0.4330938188531515, 0.4275550934302816, 0.4220002707997992, 0.4164295600976367, 0.4108431710579035, 0.4052413140049893, 0.3996241998456462, 0.3939920400610475, 0.3883450466988257, 0.3826834323650892, 0.3770074102164177, 0.3713171939518370, 0.3656129978047734, 0.3598950365349877, 0.3541635254204897, 0.3484186802494339, 0.3426607173119938, 0.3368898533922194, 0.3311063057598758, 0.3253102921622623, 0.3195020308160151, 0.3136817403988909, 0.3078496400415344, 0.3020059493192273, 0.2961508882436231, 0.2902846772544617, 0.2844075372112712, 0.2785196893850524, 0.2726213554499484, 0.2667127574748978, 0.2607941179152749, 0.2548656596045140, 0.2489276057457194, 0.2429801799032631, 0.2370236059943665, 0.2310581082806704, 0.2250839113597921, 0.2191012401568691, 0.2131103199160907, 0.2071113761922179, 0.2011046348420913, 0.1950903220161277, 0.1890686641498054, 0.1830398879551402, 0.1770042204121480, 0.1709618887603005, 0.1649131204899692, 0.1588581433338608, 0.1527971852584427, 0.1467304744553611, 0.1406582393328486, 0.1345807085071253, 0.1284981107937924, 0.1224106751992154, 0.1163186309119040, 0.1102222072938823, 0.1041216338720538, 0.0980171403295599, 0.0919089564971320, 0.0857973123444392, 0.0796824379714293, 0.0735645635996666, 0.0674439195636632, 0.0613207363022078, 0.0551952443496891, 0.0490676743274172, 0.0429382569349401, 0.0368072229413581, 0.0306748031766359, 0.0245412285229114, 0.0184067299058039, 0.0122715382857191, 0.0061358846491536, -0.0000000000000008, -0.0061358846491553, -0.0122715382857207, -0.0184067299058056, -0.0245412285229130, -0.0306748031766376, -0.0368072229413598, -0.0429382569349417, -0.0490676743274189, -0.0551952443496908, -0.0613207363022094, -0.0674439195636649, -0.0735645635996682, -0.0796824379714309, -0.0857973123444409, -0.0919089564971337, -0.0980171403295615, -0.1041216338720555, -0.1102222072938839, -0.1163186309119056, -0.1224106751992170, -0.1284981107937940, -0.1345807085071270, -0.1406582393328502, -0.1467304744553627, -0.1527971852584444, -0.1588581433338624, -0.1649131204899708, -0.1709618887603021, -0.1770042204121496, -0.1830398879551418, -0.1890686641498070, -0.1950903220161293, -0.2011046348420929, -0.2071113761922195, -0.2131103199160923, -0.2191012401568707, -0.2250839113597937, -0.2310581082806720, -0.2370236059943681, -0.2429801799032647, -0.2489276057457210, -0.2548656596045156, -0.2607941179152765, -0.2667127574748994, -0.2726213554499499, -0.2785196893850541, -0.2844075372112728, -0.2902846772544633, -0.2961508882436247, -0.3020059493192289, -0.3078496400415359, -0.3136817403988925, -0.3195020308160167, -0.3253102921622639, -0.3311063057598774, -0.3368898533922210, -0.3426607173119953, -0.3484186802494355, -0.3541635254204912, -0.3598950365349892, -0.3656129978047749, -0.3713171939518385, -0.3770074102164193, -0.3826834323650907, -0.3883450466988272, -0.3939920400610490, -0.3996241998456477, -0.4052413140049907, -0.4108431710579050, -0.4164295600976382, -0.4220002707998005, -0.4275550934302831, -0.4330938188531527, -0.4386162385385286, -0.4441221445704304, -0.4496113296546075, -0.4550835871263449, -0.4605387109582409, -0.4659764957679672, -0.4713967368259985, -0.4767992300633231, -0.4821837720791235, -0.4875501601484369, -0.4928981922297851, -0.4982276669727828, -0.5035383837257186, -0.5088301425431079, -0.5141027441932228, -0.5193559901655904, -0.5245896826784698, -0.5298036246862955, -0.5349976198870982, -0.5401714727298940, -0.5453249884220474, -0.5504579729366058, -0.5555702330196031, -0.5606615761973370, -0.5657318107836140, -0.5707807458869683, -0.5758081914178461, -0.5808139580957655, -0.5857978574564400, -0.5907597018588752, -0.5956993044924344, -0.6006164793838698, -0.6055110414043265, -0.6103828062763103, -0.6152315905806278, -0.6200572117632900, -0.6248594881423873, -0.6296382389149281, -0.6343932841636464, -0.6391244448637767, -0.6438315428897923, -0.6485144010221134, -0.6531728429537775, -0.6578066932970796, -0.6624157775901726, -0.6669999223036384, -0.6715589548470194, -0.6760927035753168, -0.6806009977954540, -0.6850836677727012, -0.6895405447370678, -0.6939714608896548, -0.6983762494089738, -0.7027547444572261, -0.7071067811865483, -0.7114321957452174, -0.7157308252838195, -0.7200025079613827, -0.7242470829514677, -0.7284643904482261, -0.7326542716724136, -0.7368165688773708, -0.7409511253549598, -0.7450577854414668, -0.7491363945234603, -0.7531867990436133, -0.7572088465064855, -0.7612023854842626, -0.7651672656224598, -0.7691033376455804, -0.7730104533627378, -0.7768884656732331, -0.7807372285720953, -0.7845565971555761, -0.7883464276266070, -0.7921065773002133, -0.7958369046088842, -0.7995372691079059, -0.8032075314806456, -0.8068475535438001, -0.8104571982525954, -0.8140363297059492, -0.8175848131515846, -0.8211025149911054, -0.8245893027850261, -0.8280450452577565, -0.8314696123025460, -0.8348628749863807, -0.8382247055548389, -0.8415549774368990, -0.8448535652497078, -0.8481203448032981, -0.8513551931052659, -0.8545579883654013, -0.8577286100002728, -0.8608669386377681, -0.8639728561215874, -0.8670462455156934, -0.8700869911087120, -0.8730949784182908, -0.8760700941954074, -0.8790122264286341, -0.8819212643483557, -0.8847970984309383, -0.8876396204028546, -0.8904487232447584, -0.8932243011955160, -0.8959662497561857, -0.8986744656939545, -0.9013488470460227, -0.9039892931234439, -0.9065957045149160, -0.9091679830905229, -0.9117060320054305, -0.9142097557035311, -0.9166790599210433, -0.9191138516900582, -0.9215140393420426, -0.9238795325112872, -0.9262102421383119, -0.9285060804732161, -0.9307669610789843, -0.9329927988347395, -0.9351835099389481, -0.9373390119125755, -0.9394592236021904, -0.9415440651830213, -0.9435934581619608, -0.9456073253805218, -0.9475855910177416, -0.9495281805930371, -0.9514350209690089, -0.9533060403541943, -0.9551411683057712, -0.9569403357322093, -0.9587034748958720, -0.9604305194155661, -0.9621214042690420, -0.9637760657954403, -0.9653944416976897, -0.9669764710448525, -0.9685220942744177, -0.9700312531945444, -0.9715038909862521, -0.9729399522055605, -0.9743393827855762, -0.9757021300385289, -0.9770281426577547, -0.9783173707196280, -0.9795697656854409, -0.9807852804032308, -0.9819638691095556, -0.9831054874312166, -0.9842100923869294, -0.9852776423889414, -0.9863080972445989, -0.9873014181578587, -0.9882575677307497, -0.9891765099647812, -0.9900582102622973, -0.9909026354277802, -0.9917097536690997, -0.9924795345987102, -0.9932119492347947, -0.9939069700023562, -0.9945645707342556, -0.9951847266721970, -0.9957674144676599, -0.9963126121827781, -0.9968202992911659, -0.9972904566786903, -0.9977230666441917, -0.9981181129001493, -0.9984755805732949, -0.9987954562051725, -0.9990777277526455, -0.9993223845883495, -0.9995294175010933, -0.9996988186962042, -0.9998305817958234, -0.9999247018391446, -0.9999811752826011};
+
+const double co_twid[FFT_SIZE/2] = {-0.0000000000000000, -0.0061358846491545, -0.0122715382857199, -0.0184067299058048, -0.0245412285229123, -0.0306748031766366, -0.0368072229413589, -0.0429382569349408, -0.0490676743274180, -0.0551952443496900, -0.0613207363022086, -0.0674439195636641, -0.0735645635996675, -0.0796824379714302, -0.0857973123444399, -0.0919089564971328, -0.0980171403295607, -0.1041216338720546, -0.1102222072938831, -0.1163186309119048, -0.1224106751992163, -0.1284981107937932, -0.1345807085071263, -0.1406582393328493, -0.1467304744553618, -0.1527971852584435, -0.1588581433338615, -0.1649131204899700, -0.1709618887603013, -0.1770042204121488, -0.1830398879551410, -0.1890686641498063, -0.1950903220161284, -0.2011046348420920, -0.2071113761922187, -0.2131103199160915, -0.2191012401568699, -0.2250839113597929, -0.2310581082806712, -0.2370236059943673, -0.2429801799032640, -0.2489276057457203, -0.2548656596045147, -0.2607941179152757, -0.2667127574748985, -0.2726213554499491, -0.2785196893850532, -0.2844075372112720, -0.2902846772544625, -0.2961508882436240, -0.3020059493192283, -0.3078496400415350, -0.3136817403988916, -0.3195020308160158, -0.3253102921622631, -0.3311063057598765, -0.3368898533922202, -0.3426607173119946, -0.3484186802494347, -0.3541635254204906, -0.3598950365349883, -0.3656129978047741, -0.3713171939518377, -0.3770074102164185, -0.3826834323650899, -0.3883450466988265, -0.3939920400610483, -0.3996241998456470, -0.4052413140049901, -0.4108431710579041, -0.4164295600976374, -0.4220002707997999, -0.4275550934302823, -0.4330938188531522, -0.4386162385385278, -0.4441221445704295, -0.4496113296546068, -0.4550835871263441, -0.4605387109582402, -0.4659764957679664, -0.4713967368259979, -0.4767992300633224, -0.4821837720791230, -0.4875501601484362, -0.4928981922297843, -0.4982276669727821, -0.5035383837257178, -0.5088301425431073, -0.5141027441932220, -0.5193559901655898, -0.5245896826784692, -0.5298036246862949, -0.5349976198870975, -0.5401714727298931, -0.5453249884220467, -0.5504579729366050, -0.5555702330196025, -0.5606615761973363, -0.5657318107836135, -0.5707807458869676, -0.5758081914178456, -0.5808139580957647, -0.5857978574564391, -0.5907597018588745, -0.5956993044924337, -0.6006164793838692, -0.6055110414043258, -0.6103828062763097, -0.6152315905806272, -0.6200572117632894, -0.6248594881423867, -0.6296382389149273, -0.6343932841636457, -0.6391244448637761, -0.6438315428897917, -0.6485144010221127, -0.6531728429537770, -0.6578066932970790, -0.6624157775901721, -0.6669999223036378, -0.6715589548470187, -0.6760927035753163, -0.6806009977954534, -0.6850836677727007, -0.6895405447370672, -0.6939714608896542, -0.6983762494089731, -0.7027547444572256, -0.7071067811865478, -0.7114321957452168, -0.7157308252838189, -0.7200025079613820, -0.7242470829514672, -0.7284643904482255, -0.7326542716724131, -0.7368165688773702, -0.7409511253549594, -0.7450577854414663, -0.7491363945234596, -0.7531867990436127, -0.7572088465064849, -0.7612023854842621, -0.7651672656224592, -0.7691033376455799, -0.7730104533627373, -0.7768884656732328, -0.7807372285720948, -0.7845565971555755, -0.7883464276266066, -0.7921065773002127, -0.7958369046088838, -0.7995372691079053, -0.8032075314806452, -0.8068475535437996, -0.8104571982525951, -0.8140363297059486, -0.8175848131515839, -0.8211025149911050, -0.8245893027850256, -0.8280450452577560, -0.8314696123025456, -0.8348628749863803, -0.8382247055548383, -0.8415549774368987, -0.8448535652497073, -0.8481203448032976, -0.8513551931052654, -0.8545579883654008, -0.8577286100002723, -0.8608669386377675, -0.8639728561215870, -0.8670462455156930, -0.8700869911087117, -0.8730949784182904, -0.8760700941954068, -0.8790122264286337, -0.8819212643483553, -0.8847970984309380, -0.8876396204028542, -0.8904487232447582, -0.8932243011955157, -0.8959662497561854, -0.8986744656939541, -0.9013488470460223, -0.9039892931234436, -0.9065957045149156, -0.9091679830905226, -0.9117060320054301, -0.9142097557035309, -0.9166790599210429, -0.9191138516900580, -0.9215140393420422, -0.9238795325112870, -0.9262102421383116, -0.9285060804732158, -0.9307669610789839, -0.9329927988347391, -0.9351835099389478, -0.9373390119125752, -0.9394592236021901, -0.9415440651830210, -0.9435934581619606, -0.9456073253805215, -0.9475855910177413, -0.9495281805930369, -0.9514350209690086, -0.9533060403541941, -0.9551411683057709, -0.9569403357322090, -0.9587034748958717, -0.9604305194155660, -0.9621214042690418, -0.9637760657954401, -0.9653944416976895, -0.9669764710448523, -0.9685220942744175, -0.9700312531945442, -0.9715038909862520, -0.9729399522055603, -0.9743393827855760, -0.9757021300385287, -0.9770281426577545, -0.9783173707196278, -0.9795697656854406, -0.9807852804032305, -0.9819638691095555, -0.9831054874312165, -0.9842100923869292, -0.9852776423889413, -0.9863080972445988, -0.9873014181578585, -0.9882575677307496, -0.9891765099647811, -0.9900582102622972, -0.9909026354277801, -0.9917097536690996, -0.9924795345987101, -0.9932119492347946, -0.9939069700023562, -0.9945645707342555, -0.9951847266721969, -0.9957674144676598, -0.9963126121827781, -0.9968202992911658, -0.9972904566786903, -0.9977230666441916, -0.9981181129001493, -0.9984755805732948, -0.9987954562051724, -0.9990777277526454, -0.9993223845883495, -0.9995294175010931, -0.9996988186962042, -0.9998305817958234, -0.9999247018391445, -0.9999811752826011, -1.0000000000000000, -0.9999811752826011, -0.9999247018391445, -0.9998305817958234, -0.9996988186962042, -0.9995294175010931, -0.9993223845883494, -0.9990777277526454, -0.9987954562051724, -0.9984755805732947, -0.9981181129001492, -0.9977230666441915, -0.9972904566786902, -0.9968202992911657, -0.9963126121827779, -0.9957674144676597, -0.9951847266721968, -0.9945645707342553, -0.9939069700023559, -0.9932119492347944, -0.9924795345987099, -0.9917097536690994, -0.9909026354277799, -0.9900582102622970, -0.9891765099647808, -0.9882575677307494, -0.9873014181578582, -0.9863080972445984, -0.9852776423889411, -0.9842100923869289, -0.9831054874312162, -0.9819638691095551, -0.9807852804032302, -0.9795697656854403, -0.9783173707196274, -0.9770281426577542, -0.9757021300385283, -0.9743393827855756, -0.9729399522055600, -0.9715038909862516, -0.9700312531945438, -0.9685220942744172, -0.9669764710448518, -0.9653944416976891, -0.9637760657954396, -0.9621214042690414, -0.9604305194155656, -0.9587034748958713, -0.9569403357322086, -0.9551411683057704, -0.9533060403541935, -0.9514350209690080, -0.9495281805930363, -0.9475855910177408, -0.9456073253805209, -0.9435934581619601, -0.9415440651830205, -0.9394592236021896, -0.9373390119125746, -0.9351835099389473, -0.9329927988347385, -0.9307669610789834, -0.9285060804732151, -0.9262102421383109, -0.9238795325112864, -0.9215140393420416, -0.9191138516900573, -0.9166790599210423, -0.9142097557035302, -0.9117060320054294, -0.9091679830905219, -0.9065957045149150, -0.9039892931234429, -0.9013488470460217, -0.8986744656939534, -0.8959662497561846, -0.8932243011955149, -0.8904487232447573, -0.8876396204028535, -0.8847970984309372, -0.8819212643483546, -0.8790122264286330, -0.8760700941954062, -0.8730949784182895, -0.8700869911087108, -0.8670462455156921, -0.8639728561215861, -0.8608669386377668, -0.8577286100002715, -0.8545579883654000, -0.8513551931052645, -0.8481203448032968, -0.8448535652497065, -0.8415549774368977, -0.8382247055548374, -0.8348628749863793, -0.8314696123025447, -0.8280450452577550, -0.8245893027850247, -0.8211025149911040, -0.8175848131515832, -0.8140363297059477, -0.8104571982525940, -0.8068475535437987, -0.8032075314806442, -0.7995372691079043, -0.7958369046088828, -0.7921065773002117, -0.7883464276266056, -0.7845565971555746, -0.7807372285720937, -0.7768884656732316, -0.7730104533627362, -0.7691033376455788, -0.7651672656224582, -0.7612023854842610, -0.7572088465064839, -0.7531867990436116, -0.7491363945234587, -0.7450577854414652, -0.7409511253549581, -0.7368165688773691, -0.7326542716724119, -0.7284643904482244, -0.7242470829514660, -0.7200025079613809, -0.7157308252838177, -0.7114321957452157, -0.7071067811865467, -0.7027547444572243, -0.6983762494089720, -0.6939714608896530, -0.6895405447370661, -0.6850836677726994, -0.6806009977954522, -0.6760927035753150, -0.6715589548470176, -0.6669999223036366, -0.6624157775901707, -0.6578066932970777, -0.6531728429537756, -0.6485144010221116, -0.6438315428897904, -0.6391244448637748, -0.6343932841636445, -0.6296382389149262, -0.6248594881423853, -0.6200572117632880, -0.6152315905806258, -0.6103828062763083, -0.6055110414043245, -0.6006164793838678, -0.5956993044924324, -0.5907597018588732, -0.5857978574564380, -0.5808139580957634, -0.5758081914178440, -0.5707807458869663, -0.5657318107836120, -0.5606615761973350, -0.5555702330196011, -0.5504579729366038, -0.5453249884220452, -0.5401714727298919, -0.5349976198870960, -0.5298036246862934, -0.5245896826784677, -0.5193559901655883, -0.5141027441932207, -0.5088301425431058, -0.5035383837257165, -0.4982276669727806, -0.4928981922297830, -0.4875501601484347, -0.4821837720791213, -0.4767992300633209, -0.4713967368259963, -0.4659764957679650, -0.4605387109582387, -0.4550835871263427, -0.4496113296546053, -0.4441221445704281, -0.4386162385385263, -0.4330938188531505, -0.4275550934302808, -0.4220002707997982, -0.4164295600976359, -0.4108431710579025, -0.4052413140049887, -0.3996241998456455, -0.3939920400610469, -0.3883450466988249, -0.3826834323650886, -0.3770074102164169, -0.3713171939518360, -0.3656129978047726, -0.3598950365349867, -0.3541635254204891, -0.3484186802494331, -0.3426607173119932, -0.3368898533922187, -0.3311063057598752, -0.3253102921622615, -0.3195020308160141, -0.3136817403988901, -0.3078496400415334, -0.3020059493192268, -0.2961508882436223, -0.2902846772544611, -0.2844075372112704, -0.2785196893850518, -0.2726213554499475, -0.2667127574748968, -0.2607941179152741, -0.2548656596045130, -0.2489276057457188, -0.2429801799032623, -0.2370236059943659, -0.2310581082806696, -0.2250839113597916, -0.2191012401568683, -0.2131103199160897, -0.2071113761922171, -0.2011046348420903, -0.1950903220161269, -0.1890686641498046, -0.1830398879551396, -0.1770042204121472, -0.1709618887602999, -0.1649131204899684, -0.1588581433338597, -0.1527971852584419, -0.1467304744553601, -0.1406582393328478, -0.1345807085071245, -0.1284981107937918, -0.1224106751992146, -0.1163186309119034, -0.1102222072938815, -0.1041216338720528, -0.0980171403295591, -0.0919089564971310, -0.0857973123444384, -0.0796824379714284, -0.0735645635996660, -0.0674439195636624, -0.0613207363022072, -0.0551952443496883, -0.0490676743274162, -0.0429382569349392, -0.0368072229413571, -0.0306748031766351, -0.0245412285229105, -0.0184067299058033, -0.0122715382857182, -0.0061358846491530};
+
+const double re_chk[FFT_SIZE] = {499.6815828018352477, -3.5965481374096271, -8.6091733537799833, 2.0596425161174237, -2.6860348462437180, 18.3618185668513654, -17.4940266628799534, 19.6766609993246249, -0.3267842152172840, 6.6167017745735244, 3.7154986060204038, -3.1633285176205961, 7.9196631052383220, -13.2702817218792006, 8.3850247810499248, 21.7441677218203147, 13.7154911239726047, 2.5549465578157919, -0.4893785097528318, 7.3473220933959560, 14.1079822142617246, 11.5001153586105147, -1.7873841170319331, -3.5310602688490063, -3.7397517201992967, 2.0295638448133211, 7.7513922709537191, 0.4987486091518538, 9.1653121515586626, -1.9172781406374746, -1.5062605698068181, -1.4745832653717967, 5.5923213879946072, 7.4814817381057459, -6.9288677272366792, 9.7647998933324480, -11.2018221786393575, 0.2248954017189471, -5.9059469792883172, 12.2942260015566198, -17.8998097226953199, 1.8672568987443050, -3.1286613869244899, 9.3851031264659994, 9.7999782984125510, 9.4534296860522993, -10.3692620838118579, 10.8012659215335667, 2.9372059549506266, 0.4042729210070926, 7.9295238490130986, 6.3552424619673102, -9.1192802916008198, -1.6440965202725577, -11.2580652771583729, 10.0835009133181899, 14.3928571040740465, -0.9463071782463643, -3.6272927119441212, -2.4687295235906141, 3.7667783426427532, -1.2713719952639964, 4.7352691016227473, 1.6080230234052093, 14.6608699632429875, 5.0425261032654163, -8.1078383775986591, 12.2694669952056490, -5.3447561750360073, -8.6775571687577475, 17.3551671128764227, -10.0085668359087983, -8.1949326495607355, -6.8714315834345019, -2.2670624052816439, -16.8481926428680850, 21.3359931305202224, 16.6692598326072954, 1.0484366364485034, 5.0033779458475802, 1.8455482808793580, -17.1299436766020463, 8.0793516362854163, -1.2632947313631648, -11.1335517105674278, -10.1510027301746177, 11.0380161949925935, 5.9371398972511100, -14.6275883160768672, 5.2260098304055411, -15.7669630936730396, 3.8685177117507035, 10.6192770565881709, -12.5132686257084522, -0.4307709774361430, 5.2227319536262726, 5.3400735490690607, -3.6318625905697144, 22.0133492043055909, -7.6139154825554645, 18.8033894770888885, -4.6247792813002526, 2.3676451286687197, 3.9364513626749718, 23.7926837294793643, -0.6810408560820012, -6.0955904362312578, 4.4471636955315441, 15.4991375841504428, 5.3112521265310484, 3.6529779009522247, -6.3663607209918922, -3.0314448060097137, -2.6034210752852083, 0.5483579356658133, -1.0694236056584552, -4.6420890041187484, 21.8035164062587121, 0.0437598030564410, -4.2812536029278725, 15.3356084681333105, 6.6511615304321392, -4.8383608504312390, -2.4329720555247150, 6.1548042489158430, -6.0278230019681285, -7.5317817322014804, -1.7067998171618233, 4.6603181107989542, 10.3964107742856466, -5.8815794057954882, 6.0068631166585984, 14.9185147174948334, -2.3249463599017375, 11.5219011652679288, 9.9064781787410627, -3.3160381025739705, -3.8936160158345361, 9.9356895579989448, -13.8541995522526555, -15.3954208729566293, 12.0750591667925828, 8.7670065222319629, -2.0170574068938629, -8.5423235897480332, 18.6653825592386902, 6.7850006885556953, -16.7766436365048364, -2.6846418474966391, 6.2036809221112783, -13.2944663604972408, -6.4255866364562610, -8.0198265000105238, 8.1867111251998992, -4.6332072434797915, 9.1431223905949235, 5.1806331702432793, -10.9465225142992324, 0.6371248524423032, -4.4278729335773281, -0.9959523524723330, 7.7260365997319873, 13.8783711701864476, -0.0549042452099924, -4.0775835361903239, 9.2194026945605891, 2.0058650397648892, 15.0263791982142472, 15.5774664399838159, -2.5356019524979514, 9.7830370264034272, 6.5215957666850954, -4.3364798585062427, 8.1029798511886799, -5.4446154371148889, 20.7562553273625312, 6.6084760865289640, -9.0151188624933383, 16.8169699063819387, 2.2462234715144405, 8.7187895194567027, 5.2359553793883213, -6.3949932019458107, -5.4065048823380106, 0.9459619118405946, -5.8680729350673477, 10.3262012079088006, 8.9925339752796791, 6.6127188603107321, -1.2182716681634416, 5.9416782291888559, 12.7737205084300527, -9.5575658456062715, -12.2743202847618615, -0.4703051110191795, 0.2676437400260172, -8.1620813442002369, -10.1295570487141280, -3.9161777356910732, -3.9693530924911093, 25.2829529734855996, 0.6561847803898875, 7.6144345755790255, 7.4189198091877735, 2.8932833886494400, -24.4599473355233670, 15.8355068429527126, 0.4878587255004678, -7.5193339544879194, 9.3691158650649449, -0.6455625029206953, -11.5994675740207303, 16.6254585596720368, -1.6167232626850447, 1.2938622693602189, -4.9882464037077821, -3.6487642620103600, -8.1753673153976703, 11.0347167835034199, -0.2138367913715111, 15.7671569973381480, -0.5332694577262558, -12.3607514892000037, -0.9202695784353185, -0.1938544715407602, 1.0267245597104830, -3.3324229247602712, 13.5229215264544234, -13.0698466226096688, 2.1750021701459357, -5.4159626838472033, 0.2956643639490983, -13.0671491105392494, 6.7257359043570855, 3.1580019040780973, 3.4629838397898238, 12.8485848329235939, 13.6439895968306129, 7.8776855355855755, -17.7372135152678325, 7.5147220545510569, 12.2793554552792585, -2.3686601318464957, -11.1423234427946554, -15.4299277070759473, 0.6239861866319325, -9.2255080788920587, -9.5684339256697193, 11.4525711108549721, -0.7158179047329867, 11.6269178551383394, -0.5765873367396228, 3.9431195199651623, -3.0649088164581433, 18.3191405162708634, 4.9451372132728579, -8.1898535392718710, 10.2467565993362317, -6.7799684079464901, 11.7531282338894698, -3.0739048326698653, -5.3594911909522329, 8.8299694638789603, 5.1370782311875223, -4.0711491872413523, -13.9014229594921090, -1.2868041488011617, 20.6772922481535701, 2.2881617144113475, -12.2583705107904493, 0.6037616571241866, 3.0415995706908681, -3.2222794589857489, 4.0685367850084777, -1.5583699501152646, 11.5045361172903071, -14.9091624323900636, 6.9209435086483371, -5.7772364316360836, -1.9898534234014815, 4.1971072780761958, -0.2404311924943312, 1.9396310332806896, 15.9881414759067937, 3.1711513621823229, -10.2168840355642399, -9.5922126071070810, -2.5675592945577370, 13.7860796280553775, -5.6310386948729114, 18.5677405082493472, 4.4102800381136085, 5.7009855259138762, 1.7310457505455623, -6.8530985754364036, 4.8268101018432752, 5.0660048717934174, 8.6394234773658187, 5.4927177140309205, 14.0853645746294980, 8.9176082793246518, 3.4619009245431740, -1.0610049802469090, 7.1310874892518781, 5.2698772592827989, 4.3955178888810185, -9.4383709775289493, 13.0658789831991360, 1.6630952624330644, -4.7159267414646138, 11.4724824383638300, 12.8559572447452624, -0.9566890796764351, -9.9703785723925282, -6.6248594767665114, 8.8788399136990019, 18.4822551394064121, -7.7033714181267765, -10.9425419164617956, -17.4744144511672168, -12.8021956492376816, -22.2305329454613698, 1.0805046805538490, -0.2841140965979549, -8.2149259054194630, -4.9986544084140334, 6.9044650220722801, 9.7815317920423190, -13.5574716011577205, -3.3781476618665973, -6.4823296496743072, -2.7014291231586629, -12.4229610314693240, -2.8507945453289443, -5.7401524151982795, -3.5626003621113616, 7.4171632680127351, 0.0001323617795421, 3.0880282068257214, 6.3299127559933348, 3.0393666063102494, -9.8441294353611504, 1.4820288092437535, -8.1577236252529630, -8.1104121518223380, 11.7074507502663856, 4.4863496106814456, 0.0163395157960351, 17.4534824536090412, 14.0472713144210779, -10.5520409460421973, -6.7639836649713523, -1.0054775756356440, -13.2095681433803733, -0.2610932599217488, -9.2135564977933484, -2.4955897340692372, -0.6878565241090697, -3.2330797988811781, 0.8626944057415387, -2.8911225664442783, -8.7784061080520068, 2.4943612182913348, 2.9559035983644879, 7.8267385360351680, 0.1993076871138557, -16.1603637102725841, 11.1463967200483562, 8.8284599893462001, 4.9211927873182297, 4.4308934175744588, -9.0632511931262734, -9.3015460944874491, -3.8043691780946700, 4.1296260256885020, 20.4950898659289891, -2.0271764273643491, -10.2260154730118842, -7.6023640053008466, -1.0169257885710001, 6.0743887552227855, 10.7787246249407218, -7.6133506661572925, 9.6678144560853809, -5.4409074169220908, 12.7833535268658096, -7.1840316364005439, 7.1265569438991960, -10.3576284337027058, -4.1069741794163583, 2.6786711738435356, 1.7972770863380232, 20.9542098269569692, 7.1529604453721038, -1.5930249299444155, 6.4432797866790130, 15.7562901314255992, 8.4458650100657113, -13.5751139930782116, 15.8626252946529078, -2.2748030796579943, -21.4590298522777800, 6.7291621825759069, -13.6370846444190494, -4.7428670092394940, -2.0790641202386650, 9.9399981044320072, -2.2151205751804586, -0.7855180774520325, 2.0119334852585653, -3.6222259053929449, -1.1834509697794628, -3.7801625142190165, 0.4292442373939558, 5.0194533647852433, -11.1584640943231008, -3.6089375286729686, 6.6301168293498245, -18.1652367222728373, -13.1236366664579407, 10.2789696069274825, -25.8211869624063226, -3.5708150347427994, -12.5763670629021647, -14.4570400059158644, 9.1072537512879492, 11.0477317834839361, -4.1085221584928222, -21.7121542102498672, -0.9387542101401607, -13.7627263025602140, -4.7487365538562747, -8.1145683043782242, -0.3648969144529888, -4.1570710878251642, -1.6962382539923153, 4.9849627238602592, -2.2976132126174438, 5.7622968534395058, 9.6340436048268732, -6.2476250861411380, -17.5720028408384472, 3.8759021771182316, 3.6135851688070075, 3.3295037545388508, -6.7427946835834325, 1.0070528503237899, -16.9286687999753767, -4.0824450111309076, -5.9057160617505389, 0.8261415130776246, 1.1251746360001587, 6.3155318051509042, 8.3383429011570307, -23.2702428142640763, 2.4713411476263758, -10.1187743528522951, 4.9724407753038564, 7.1397012239502864, 0.3532507589480214, 23.3620533313098022, 10.8420997322771111, 4.9467319409616080, 6.4083782384278019, -9.8851770602604034, -14.9542553213673415, 6.7692312241974877, -3.4168263846258595, -4.3425391691472717, -0.8630148239227704, -3.3722781236096306, 6.9975091839139640, 1.9751292906487170, 0.2422652660267040, 4.2342620149515477, 6.2914427101701405, 0.1610369468926542, 10.5575511590376792, -26.5045519288861051, 8.6816559473880481, -20.2554729896783492, 1.5787540535398996, -3.4384860970074564, 6.4577575259534958, -3.8978962656034506, 6.1963894732138263, -5.8210536928039200, -12.7241415883490863, 16.8871312292416960, 6.7699499252214892, 2.5371741722920236, -6.5121552144552366, -0.4946506603590208, 3.1421292758999684, 11.1852203167073156, 14.0678044979882095, 2.1587210919684683, -7.7726722698481971, -17.4599021007772954, 3.6620459295200112, 19.1338007596331288, -9.3216381466651548, -6.1479851424503904, -5.6100963880082348, 12.9577993762765296, 0.1585528884087992, 11.2173492519944489, -7.1295409559102332, 9.1372748054128774, 5.9934591943967135, 6.1406441515322410, 8.5770434577813823, -4.2590942019659508, -2.0367473747654561, 8.9367149442751206, 8.2413285359376651, 10.8670226115231401, -1.7035336979620990, 5.4634720215949208, 4.5403553621144166, 10.2036845149121991, 0.0875880406603002, 5.8331997166210128, -14.4991466556419475, 19.1957528113826399, -3.1948677609472789, -0.0070932026365339, 1.2926829954782710, -11.7266544172142311, 16.6238282575182268, -17.2755939443606366, -6.8384589211947011, 3.7498267059318913, 4.3988874617383757, -13.0637692288105445, 5.8942208094270772, 2.8270502345570732, -2.1543268139909539, -12.1314587504938771, -0.5990616940282019, 7.7450148051264076, -18.2585736619789785, 10.9657333712173433, -8.8325987855642865, -0.8019118037644581, -10.2002685398219217, 9.1524002806953284, 23.5299847290090192, -1.2931801795128735, -0.8320921735381805, 16.9306637300521921, 0.0812098738650739, -6.9207306195325957, -9.5842410738273536, -2.6283680901585686, -7.5508250644709189, 6.4130079470147567, -4.1324479284614792, 5.2957258709096262, -6.4386842846010879, -5.4376413694246200, -5.5834365549301150, 2.8632418308759422, -1.3599264960383235, 7.8984481879394899, -9.3812449649695502, -4.5600364173210926, -7.8828236315881641, 7.3168441216696189, -0.2199833561809941, 17.0090719300577931, 6.1937856648846887, 3.4836310773952879, -10.5727877396828696, 5.8775148362456706, -1.6405598080377661, 17.9570848201736837, -17.7682617993456873, 2.5929736483557821, -3.1335816460122929, -7.9516490143447278, -4.7205535818996474, -5.7674506274526021, -11.9316961258303582, 2.7886044111211903, 4.3352115669935376, 2.1768620947390778, 9.8270733315270533, 8.3952715912352573, -3.5811484258998432, 5.0691134491696914, 1.9668840457964261, 3.6374855288933201, -27.6247585727328939, 9.5920972395105508, 6.3300707181950315, 0.1992609004678334, 7.0022759562615304, -7.3299794426330873, 1.3534296414420517, -5.1445324637163461, -9.7969166003199355, 1.9929344381006922, -2.5655924358959443, -2.1992759525407868, -5.0117492043680967, -1.3482865692675410, -4.1155776677270133, 4.6482668279675252, 24.6716241865667740, -6.9755379983381900, 8.9010171424790698, 16.1069182230158567, 7.7204333509476593, 3.8072029739535744, 11.1070686586798733, -9.9834803461662123, 8.3681359405896441, -1.1335829296854492, 15.1744826053315336, -4.8269722252462524, 6.6006992911747906, 6.7377842139830841, 0.0662985634822659, 5.6748859014131945, 5.9702479140741325, 4.7843564233245663, 2.3616941026196026, 3.4416531946715931, 0.8494283857542000, 7.9308022803972458, -4.6749846252542246, 6.2470255600435891, -11.5691226892695340, -0.1394317930575180, 4.1493850813858195, 9.5684693104237333, 2.2343634695334629, -8.2356198816886046, 11.3177394505238151, -15.4799249423262637, 15.3759390131685834, -7.4206052761453973, -4.7772483269282420, 11.3383018521168992, 4.9254439428655070, -2.2624701279061563, 3.5638454368858081, 0.9527909059776176, 1.7097600179168042, -11.0628849386227905, -17.9282191210254602, -10.4094990570033037, 3.5862787894796351, 1.5474801391245394, 2.5020328835897407, -1.3066877422131165, 1.9643990347242366, 0.6419405020159576, 10.5650397489502748, 8.9799248397728650, 3.9701358114759309, 9.0024280779550185, -6.0507377772526958, 15.4665922253664796, -4.4151289293897236, 5.2466041151176226, -2.2055575732700117, 7.3689570992294620, 2.3364140530194852, 7.0962176476071352, -15.2203389264000020, -5.9092619378653826, -5.9599718408378077, 10.4943181108915251, 7.3365091309559798, -10.0104615730382580, 7.8104907093238589, -14.5385304704638649, 7.6060869599275920, 11.9579995491107525, -14.3267461188118865, -12.7298610902622986, 8.4942121072728316, 15.4055379421196967, 5.7740135541335276, 16.5901117572974783, -0.2580583274057329, 2.9145953692884632, -10.4319696802810675, -17.8142436825248147, -17.6596549715583144, -1.8721716198742282, 7.1002695346950375, -9.4555247343243831, -15.1613045408764311, -16.8817685165568534, 0.3648454743007381, -8.0706165125763718, 7.4297963290601370, -2.8236974184657813, -12.1610647651385335, 22.8845167694437421, 3.8771659675807673, -1.4627740239314950, -3.8045752858250252, 10.8958631403264832, -2.7653237554911536, -16.0993367135496044, 12.0385932889819944, -13.7920608492889887, 7.4631833183500671, 4.6448697645166499, -13.6476392574700647, -0.2004320823239354, -16.7368408406938549, -2.1962232437142206, 0.2374383263178497, -5.3550219949738107, 12.1516605520316219, -10.1397416329570724, 1.1428970978069124, 6.7239227838974873, 9.3605399124623165, -6.3203202114260302, 10.9574241818925451, 11.7234530338272549, 6.6814939290682105, -10.2031480756173529, 2.6794364176049426, -8.0471717999082522, -11.3880346018653498, 0.5134175967727419, 10.9080756203700027, -17.9385088554622385, -15.5928608022694561, 9.0825811737046784, -16.3160389919420759, 5.8025791703609260, -4.2605065307130650, 5.1894553109548491, 5.7824155656848832, 1.6759330561374082, -7.7457904803312587, 0.9169218673320216, -28.6854287578779683, 16.9155536590423559, 20.7675434357734652, 8.4573348531086943, -1.3090977548793914, -5.7813229605828171, -0.6663583353499751, 1.7378765752536438, -2.1757846948683071, 6.1433423747632290, 14.3831842035350022, -2.7565559023484187, 8.9792030909607412, 10.5560863911582494, 13.6482828178448621, 6.4234629507071812, -16.2902979411082498, -9.7414951881106759, 5.1253275180054718, -15.3473965641601815, 1.5402155284481083, 14.7803618971838890, 17.3699422088607953, 7.8499945296466302, 5.4379479418484680, -6.6591786436031253, -26.9147586023641594, -2.2743384805422444, 13.5791698580203981, 25.7051195906365919, -15.1361058637111512, 11.1997386720764087, 2.7044357915472208, -13.2487055569884618, 6.4869054408316664, 10.8099473563841197, 3.8298695009674915, 3.5190996702116415, 0.2980069761416335, 0.8745975638965735, -8.4976633073548395, -2.2975704501136516, -0.3186783440563925, -12.0802976061054821, -10.6181665716557703, 8.1862288312029321, 4.8284303691105057, 1.2253476097622515, -11.6124150598310010, -2.1881254748736803, -14.2339451925993359, 6.1712985487966971, 2.5287716124231370, -2.9214196852192429, 3.9926851947538098, 4.1897284346592532, -14.3946922888329549, -17.5423608090120950, 13.4560428487981465, -11.1747459755545488, -5.8420199220963855, -4.9733319827090403, -11.1843372737421234, -2.7266781396405233, -10.5763838729175159, -1.7221296775359738, 10.2008198838216479, 7.2631754828749182, 3.4464975427254716, 11.2690400948215945, 6.1829729673271379, -10.0515690614552859, -1.3383105718194210, -2.4353351059132056, 2.4977502280955690, -17.3324732860211874, -18.5342376632378141, -11.6756649216517392, 18.5819296108340026, 16.7763608899043675, -11.7550720850186661, -5.1664668369370563, -3.9267501627309094, 9.0260497136628182, -11.3013482840684745, -0.7526838893564087, -3.6108208939624515, -8.1295679919507204, -7.6265290344270191, 11.4398823780502727, -0.5436314732322352, 1.8974129030873570, 4.0335916051987653, -0.5169641361195412, -3.8656966006826154, 0.2707387533518517, -12.5569633571821289, -4.4387150775993218, -7.7956642871991280, -5.1999068074983636, 1.5372027867934195, -8.1161239983570717, 17.0930021276602133, -6.6514162203133544, -4.2826959320699576, 12.9483321134470692, -6.8071213371086197, -3.2764269312567773, 12.8980023921631837, 10.4719409123034612, -11.5437921756238051, 5.3346734748447266, -2.4176257992438499, 1.0866961036944360, -5.6497825829972328, -2.6515651916096710, -5.9911081823148917, 4.8811756777744222, -6.2677263939136356, -4.8359913231089990, 15.3107335957283439, -18.1184471512029432, -0.9332647728601788, -7.4591661932122815, 11.2753006048426254, -11.9563256694213393, 8.5180232938542062, -19.4329050359259696, 0.7697326201175034, -13.7800115143015169, 8.8552213223051623, 0.4517694049725192, 5.4135065562981728, 11.9860939926570111, -6.5358474866501224, 8.0089878690253578, 20.2193776110777925, 6.0766138523451909, -8.5534631885967016, 15.8234801847316682, -4.9825948344112554, -3.9997310516197420, 10.0899294833612085, 6.7811191513193378, -4.2795846156127837, -8.6487548527333651, -18.0496419825926502, -4.4015535814599129, 11.6647187471709994, 13.8571930115533775, 21.9919081268032031, -16.5606955859210387, -15.8469600979042866, -7.0445152234296184, -1.5986909779570504, 8.5737311145512773, -11.2563221359219003, 2.1246277586268443, 4.8876674069164796, -5.5954622751070460, 5.6356711777776312, -6.1788436545738312, -4.5153369757587436, 8.5642834789141435, 11.8384280804072173, -7.7895512561012126, 21.8032266744273073, 3.8281825294899723, 4.1471525837937318, -0.6312415000184710, -2.8141478731359566, 18.9971433120930548, -6.6011685550637615, 4.3272057442526721, 3.4646151490004944, -2.2120623628086857, 19.3608928344886948, -1.1999772462264708, -9.8048442797984610, -2.4249124682744929, -0.0745360560988972, 3.8363519700484749, -1.9409759668786712, -12.1705206829627848, -10.6902606830150262, 6.5009439334759040, -4.8644499314437848, 12.4469826209516743, -11.2334538775593220, -1.8599988851340834, 6.8984007799384530, -14.8957518980226098, -3.6032704617316469, -9.5763645200035796, 3.6955828544301941, 11.5587370729329404, 9.7732268499520618, 3.1949060990274809, -6.2577941987982673, 8.4158963284543997, -6.3391702944626278, -13.2995123418193995, -14.9116034671478364, 6.2282785464570685, -3.8226578106215117, 6.7719494793928616, -12.2628945427405931, -11.5823449816504898, -15.6078475891691504, -12.0403779920255598, 12.8948765946093555, -11.0144000475442496, 3.6092314178386582, -4.9084241779031306, 8.3149947205506187, -13.7866049093040601, 0.5147077789258887, 0.2427165586053164, -13.1103514243831896, -6.4670185545911689, -0.3358480556109029, 0.0342616371854118, -1.7649796149940573, -2.7233118354004326, -3.3818105327333954, 8.1220590751180914, 5.4796621489107089, -0.0702616693056153, -5.6776776876589210, 10.8510075686747740, -2.3506433956191666, -2.6277879146878114, -8.4381558394318432, -2.7812573856151603, -10.4846825969828821, 0.1658046930753057, -4.1010881682340798, 14.0738182177162940, -6.4428719312500169, -6.6328710538571016, -1.1445153709605509, -7.6719623825446579, 6.0234658834644978, -11.0210582573619931, 11.3256830420907519, -12.7249330256583271, 13.3449782203469631, 17.7925856629203629, 4.4579363574975268, -7.4844542366127520, 6.0562648289782697, -1.8743604846402167, -4.5851520740373406, 5.8980355715772497, -4.5254555186843977, -4.8302135799192349, 6.9883523772335590, -7.1190665409134333, 9.7952737385887616, 4.8971989763278403, 10.4447848736600193, 8.9624907837488887, -5.1492099971134841, -4.1433440368690908, 6.6821403709619167, 11.8956704209165647, 19.0194101586387383, -4.5234807106811328, -7.2884490970378835, 0.2036927498181782, -2.6823090234396529, 2.7256244136251322, 7.9181674111214235, 3.5699109733761745, 1.4739355809851400, 3.9447802767997002, -3.1812445597692234, -6.2957699694126728, -9.0643520225084337};
+
+const double co_chk[FFT_SIZE] = {509.4771675150243482, -1.0691225265986475, -11.3634668751500918, -3.6789775171668611, 17.0636835199097092, -18.7509283378856964, 6.7388623228171811, 7.0781711015274391, -2.5422806978521826, 6.7059234168084316, 11.8263762158053911, -14.2198451240484882, 2.1911127534884196, -9.3293778591769616, -2.7972591881344275, 3.8420300885011294, -8.7997280535391731, -8.7573610607115313, -4.8212991503841067, 8.8803675170459595, -5.5716798851954454, -15.2956694846945727, -14.8866511470937031, 11.0940483909365053, -13.4191555664679125, -2.7659936287430380, 2.8539526614813862, -1.4416709622857167, -6.4766534191766159, -4.0248743754053056, 2.5658220680680452, 0.1482989677481079, 10.0928812108262047, 0.1013606600962103, 11.1958417952159870, -0.2922602760294701, -10.1985410562259720, -11.3628816243901891, 3.0318103362543836, -6.8583258952089041, 8.0262223360448566, 2.9394321406324155, -18.9895584275153162, -17.7712798647424641, 1.0180176168459791, -3.2690354731511473, -0.3210824224393942, 17.3300319024931397, 6.1106973497115931, 5.7594023160431291, -4.1614537309297237, -13.8453242759752388, -1.9441261078987675, -4.4347660681341399, -0.6620395514264165, -1.5029425874423410, 22.3930426935769162, -8.0693399693491461, 1.7488733651852812, 4.3915402678647375, 1.5798456088986379, 11.1857993248495049, -3.7310621974946150, 0.6411475618575402, 4.2544837081615823, -3.4601503984961433, -5.3118338694598997, 0.3746928565680476, -6.9780513959593797, 6.1677483452598132, 3.6514642086999944, 9.6125000329085566, 14.7302193339243441, -1.8714663761929575, -1.7783501589564819, 9.1749607529304438, 3.3645428069722243, -7.1498608438045004, -10.1384146010999743, 0.8688814099243922, -1.1221539244810534, -4.8024883785444290, -2.4835369565425740, -13.0282102074963166, -9.1268402590866309, 19.5051905967708272, -1.2010531672041698, -0.9211815404621315, -7.7851249978809918, -12.2017454294857330, -4.1513617466189796, 14.8188083568208366, 5.7471408063266658, 6.0851704403543607, -2.8411614257438629, 0.3143952713614544, -8.6297536720629608, 1.3300942963555049, 18.3981457331160669, -1.3733252774255860, -8.6201764791243161, -9.3834971947254129, -13.9137481089358594, 2.6562027185159183, -4.3352455983379148, -12.8944352463270757, 2.2628194117432652, 6.6825784069272434, -1.3083179354105408, 12.0454584827153734, -3.7468608888625741, -0.9555598299614503, 10.6739301980337817, 10.1410417816037128, -13.3501368221749033, -7.6905357948560997, -7.4001059571756382, -5.4365205878205884, -1.7030053680790180, -10.4188377759008297, 16.0156819551168574, -2.2860761715999374, 8.1364406067414965, -2.5877839748977389, 14.1196145151357744, -7.2436319082656428, -6.4035887716626405, 1.6586479263787317, 2.3483314499941166, -5.2095358516512551, 12.5436015259344149, 7.3499063122824477, 7.7535076006317682, -4.3684593668897156, 16.1752749968461167, -1.7621479870413728, 2.5671383045057574, -7.7313359511570656, 5.2707831492498096, -12.1015303805099741, 16.1345450774474877, 3.0746661232453212, 13.6262399020934097, 6.6354725390866589, -17.7856649327247673, -1.3681692225209012, -1.2648702003139873, 4.5531844185092503, 11.9169980150154657, 10.2829452720621148, 19.1623546254488986, 14.2363097495115571, -5.9118724736752410, -11.4442215303375612, -10.7533962688808540, -5.8165425920009302, 9.8374368600768065, 4.1324993737134443, -4.2081155168057629, 6.6581417589014924, 7.4795450110598498, -1.4506884413457453, -5.2855619002203529, -6.6028292583288195, 1.1580353012498206, -1.0577110519715163, 3.3187115115984915, -7.4629545678824183, -6.1807835517475738, -1.1986052890972960, 17.0517488385248157, -1.7227940484143209, 7.7894729316916900, -1.4156432667798002, 0.9506429380860895, 6.9851981560935883, -4.7463093510144354, 0.0535899196913605, 4.1755541684588842, -7.1599042939044324, 22.4542442729043117, 5.2253548765448041, 18.5118572750815886, -2.1850077051829988, 9.3403210141522877, -5.7677934680605061, -3.9786570969601911, -25.1133020868369385, -6.8724745546086030, -6.5620110885394691, 11.7963442311315969, -6.9457696370629822, 13.4232434598899566, -6.0502081404623773, -17.3306563723519140, -16.9817264519591795, -2.7345033427778382, 11.6820662560497102, -3.9465711850423708, 9.8423256267765051, 17.4457387587225732, 9.7408839882869103, 14.1572414984139705, 13.5476092033881983, 6.1407598190128976, -1.0311791181555510, -8.5430433948226217, -0.4818144627232668, 20.5624399059404439, 9.7598502627550872, -4.5525173619368786, 4.3016628470978606, 0.2472520922414312, 3.9632277310609965, 1.3220187299371124, -12.8561878421817433, 10.2085617957268191, -2.8584533753950048, -6.5606591011014324, -4.8743745518918971, 8.3426584051497077, -11.1336787804023825, -2.1938852431307199, 2.1821113428448653, 6.4042060110350674, -3.2633003388584969, -11.1840539255335720, 3.3087005865383885, 0.3610661912534709, -15.4362465187227365, -18.8612381110388299, -11.3123737042298025, 9.9929082498193154, 10.7964268220570503, -2.4732821747456795, -10.3708913632761828, -12.9831799966106942, 3.6564083552979012, 6.5391167874333664, 25.7402882743062804, 12.7127881222585177, -18.6329649048722175, -15.9581386485720245, -1.5645082160435182, 2.2182475205550789, 12.5851460652380531, -5.9077398784521673, 1.8559758161089053, 14.4832818928857971, 13.5137851727556733, -0.3285142942301205, -14.4631082565510880, 4.1028325030146675, 3.4662603782168318, -0.1089977759973166, 2.7822013488195827, -5.3846756885247125, -1.6126909487049161, -6.9298103284356420, -7.0021288930746737, 12.2389579717314803, 3.3677929694750839, -8.6504455170572037, -7.9295073739328901, 15.2498867890426837, 13.4201620419092542, 3.7710829656027380, -8.4857273423860953, -8.9964315651655919, -9.5138801860125088, -6.9188108454401060, -4.0934906785118610, -1.8606241856150865, 10.7446602402078639, -6.0764475494166845, -8.2826642548493012, -4.5712770305809904, 7.8503307423744424, -9.2340219563677675, -0.4498456743743642, -12.5294491594631108, 8.9301767051937606, 8.5339356517939340, -4.8644737781991143, 5.1209513552616395, -3.2544989584165416, 5.8752589574209395, -4.3895209142044234, -0.3472910621288499, 19.7301661282085483, -6.0622880597696884, -7.0740884975155627, -18.0693921993985640, -12.0430819456038094, -3.7298508819985701, 6.4111013912061123, -2.9611872612594539, -6.9617648256237086, -6.0448116888534145, 1.1541892510429896, 5.0966847305254834, -1.0601478654966168, 2.7012479828800910, -1.4460619339275751, -1.1860268129948786, -13.1600554454112508, 2.1586888292295345, 6.3890050226192265, -4.1065017782073419, 4.4544450450995026, 3.0959333328024030, -9.5106126591418931, 2.8271406996342079, -2.2292932414834294, 8.9654622529184795, 1.4551274373046801, 1.0058753274951591, 7.2222789085632986, 2.6252312035666328, -3.5370366713692722, -1.9872485429674098, 5.9593709525429812, 11.9245370516917770, -6.2558857522387878, -8.2169749017536695, 9.6660831181695457, -17.7224722467668201, 4.2662315151350416, 4.0362590639067033, -5.4957542616934436, -12.1834255563933986, 6.3456730995168300, 8.1522162695041871, 4.7640406178469705, 0.1622119544062954, -23.5230687288005562, 6.7407264180116719, 8.2089341051787024, -2.2876055716194115, -9.3583304947415691, -13.0761753294997689, 3.4844378560336589, 9.8053559749602108, 2.3521071609199193, 3.0213839744496811, -10.5809697128241602, -20.5916171434338970, 19.9961187807572038, -5.6578348758392796, 4.7823976779135311, 6.2455928096053892, -6.9554298698634263, 3.5537944670096806, -5.3554197646490174, -17.9688055081900409, -10.2874356820655990, 9.2789553587600828, 2.5261580639168346, 8.3425615663248838, -2.5607869600170932, 8.0622363831248176, 18.6501950139748232, 5.2883843632964425, -19.6464291834517084, 6.9158647203750032, 11.2295251369818292, 2.1781654016346512, -1.8223199890328190, -5.6573249796250096, -0.3800245110555971, 3.1094117819113265, 19.0022410881677004, 0.4040530787965562, 6.2233457070012452, 6.2360974787504384, 21.1933153868538966, 0.1007736265180630, -0.7471272213770361, -6.8975061513383444, 4.2843307340097194, -1.2755448385290089, -2.9058663904896376, 9.1368218492617856, 11.8316161411440532, 0.3306969429405626, 14.5926321065440838, -6.0804059934370187, -7.0793244640592405, -6.4382000795648402, 20.9240986898050529, 10.2755071239025675, 1.2755292202931470, -13.4092532318034490, 2.7234311107211635, 4.9694925335937565, -3.1146658843459796, -1.6571439574345472, 7.0093213444142464, -6.5297733190729499, 10.7489945265772793, 11.6991134344005765, 2.7742378400838987, 5.4038815670923785, -1.9164325164809584, -11.8792434157374505, -9.6672193739614389, 4.8776389983341257, 10.7752178463106585, -2.6671460721261422, 5.2056634422608266, 0.6386170373082333, 1.7759576172400928, 4.2618607582373720, 0.8175205968451045, 8.3009038312281440, 9.3549301291563047, 0.3467208343820389, -0.4003067259586452, 4.2490122632864527, -21.7048209571422426, -27.2444092568215055, 2.1878828302292330, 2.3018798237476403, 25.2891206334118586, -0.6073212197461109, -8.2852719417593867, -6.0630291681448227, -2.3974185864668982, 7.8524145149202589, 2.8749796098034146, -11.8799865324303600, -10.3771881797819230, -5.2226636353773728, -6.9836354216765635, 5.2708328867956702, -4.4541946355781903, 1.6134265054867942, -9.5962707007439345, -11.4898273773143185, 10.1838370479910783, -0.1727296291112257, 20.3640384784467159, -1.0162443948216744, 6.6103434322971859, 4.9291347858288317, -2.0433669355016901, 6.9113546503490140, 6.0078034249413408, 6.6402096273131868, -4.2078143715970988, -0.9118169634474933, -8.8183114640586773, 3.7578610769979597, -4.3545088404925441, -3.4393961562000634, -7.8453128793158147, 0.3177149497117517, 2.6169959408685024, -5.0625004389532631, 2.7589352810803884, 7.8794196258193185, -9.1958657812288234, 6.8357133812348643, -15.9013562806333724, 2.3309898082344822, 3.2148028068139598, 18.0782796973334960, 1.9142464693548646, 16.5294602080613267, 10.6092310690253520, 2.2515078594369387, 1.8137253555528821, -6.3680756392584037, -8.4483908339879612, 7.6717554291679892, 5.4930767215326330, -10.6265297157860026, 1.8818981263750034, 21.3149150234563578, 3.8593471710994880, -3.5831066561031801, -3.8454186359516789, 2.5814635800957140, -15.3233262872611604, -9.2783997525511239, -1.8184703019583361, -6.5872082135873669, 7.5453032928501482, 14.1301106838305390, 26.2209280542465422, -3.5272558833221033, -2.6999311738171614, 6.6776217256282839, -5.1592051703564694, 7.6212220255768033, 9.9359203044114270, -9.2205792541791318, 16.2212211451444155, 0.6513079650619749, -2.1367218678175033, 7.0246136696178318, -17.4308799044995943, -21.3329948798568125, 27.6784239261190805, -11.1978918168987605, 1.1661325979922772, 5.2830824627803619, -9.2632826806818951, -12.2890371914381085, 13.7414733985052244, -1.1129477952326159, 8.6269894095243309, -7.4528933204714338, 19.7159884607275870, -7.5566791296049693, 8.8760520732270258, 2.5187149837510772, -17.4202150463984715, -2.3169591071778606, 5.5900015969946750, -3.5787339868122858, -5.8632314797174336, 0.5690990442439361, -6.3458762011675258, -10.4403969758066673, -15.4620367050211875, 1.2137827258088199, -0.1204939600232470, -7.3108684626860274, 11.7822552566782015, 0.6147094877144608, 7.5283810710247110, 4.3412266489360336, 10.8822234920032663, 9.1766789528784756, -0.9409781694630146, 5.2039643103181294, 4.9010983041280163, -10.4196985823493957, 0.4960208234466705, 4.3254952546092014, -19.6595703572169995, 5.8621074556264574, -0.3967614525893759, -10.4354489491222093, 5.3521075041296005, -7.7149537718020724, 8.5205151723471353, 0.2020332197920542, 0.2045187161882158, 13.6577496941137895, -11.0828350390502379, 2.1179025488957111, 3.6743436001724881, -14.1201261177543707, -6.4497958032414546, 2.3908811313469416, -6.7945596278928280, -21.6142746677860771, 0.0367472311021668, -10.6817185893259392, -16.3873524299427373, -8.4056149252247430, -6.5382039185743199, -8.6238146390925969, 3.3956348532358378, -2.9680469594706671, -2.5226968153139713, 5.7769929125454844, 5.6956580870093134, -6.8934727134167577, 8.9547109509959153, -1.6462407800289740, 6.2632465223801148, -5.4032700086591063, -0.2892218698350137, -7.2300905604303596, 16.0460264146495000, 13.6862279500495632, 6.1118898131814987, -14.0265985405482532, 1.2616777434351398, -4.2385750321063398, 6.1396221158300399, -2.7398755919125337, 13.0298762157260235, 13.5894637685750475, 8.7751050298463689, 6.9124187840268565, 5.6991029192884444, -6.6717567260029309, -13.8039013269567032, 10.9575692673650522, -6.0318501152700179, -4.7087385907739030, 19.8646550213303570, -8.3448230203874161, 0.8642640522358542, 21.0971995396229275, 9.5034918438059037, -0.7083543090468183, -8.7506773533144653, 7.0661158347372286, -2.0284181776123629, -25.9080762997937484, -3.3549293384305408, -3.7605046162476126, -2.5120912581487072, 3.3433137277063492, 0.6168733546058367, 6.4016016152127380, -6.3406133014327830, 9.3416007169517137, 6.2170264127619257, -3.2438763301187334, -12.6837910520096884, 4.6138106005109094, 2.7074399057531799, 8.8428102606074113, -6.4164470840622370, -4.7816435400129293, -4.0524409628769309, 13.7050718276674708, 3.0115298623501827, 21.7905022518484195, -17.5426573556294194, -5.4653471681262147, 5.0799584363143904, 1.0001216450617951, -15.1138971376091042, -5.4616490098788457, 1.8233716310636656, 5.5433101282851549, 10.4257820700679638, -4.4267190979415378, -0.6437548161246869, -16.2685602521426311, -2.1683717127720286, -3.2858365687863840, -2.7471350707870554, 3.8104031979047259, -6.6221653938041101, -10.2052218611058532, 9.6748224729673762, -5.1266155273860141, -3.8472920675959896, -4.2312791144003787, -0.9742162918103769, 16.5020684682492700, -9.4047713106687993, -13.9872584884323086, -25.2218767268031243, 16.1040137687211704, 14.0122856267984606, -14.4738748850399030, -7.8371549997165193, 1.9017210190585794, 7.6444805980305031, 15.0539612855198115, 7.2252916840651444, 10.4737994540279757, -14.0346488127384745, 6.1394176769931601, 0.3296710964376692, 1.5006289077526445, 14.4666830975924796, 15.5965274068421138, 14.5087056860196597, -0.1967826108769106, -4.5282453792428718, -5.3922855477053560, -5.8366415470159048, 5.9393635582100490, 1.3179416414240923, 6.0556846053604279, 6.4345965426395857, 5.5414552428595822, 6.6264146215961581, -2.0785069265199976, -11.9084659771926198, -5.4323998447931459, 3.2927202415336736, -1.7265941237216262, 0.9847009675928504, -15.7178903362299032, 5.8509896537988011, -12.1694940034138490, 1.9963444601807598, -1.9950947375230221, 11.7485719478380037, 12.8829090562355937, 2.6464413370067783, -14.0156890745566791, 2.7300954288029580, 4.3114961741828690, -11.2788700271375379, -1.6348403941178224, 8.7364589407178102, 6.1878473599969084, 10.5041290421133660, -1.6879936624921790, -14.3034662167278253, -6.4217034054841866, 1.3983521513265318, -11.0234036031760692, -8.7955404099508403, -7.0408859769287027, 0.8161171583020885, -16.5803277501859299, -2.3462282641452381, 9.0659597596535306, -9.3459643488172048, 10.6279974793896486, -12.3088164383448166, 6.5465870410625602, 4.6452926697138928, -14.0758940163192996, 0.0910023567400717, -2.9764617129600657, -4.3826507843458264, 14.8602398081994309, -3.8150070767021296, -8.6962564502391793, 15.5943953955318193, -13.6995159533940871, 0.6522644521113028, 6.5680133322143712, -15.8622425507430123, 7.0130764914807644, 3.8416847677490855, -13.4646625707587440, 9.3786098521393342, 16.0396313063695075, 1.7050367370406647, -16.9918560079411591, 17.6408618815236977, -5.0084734495298893, 11.2850437624875486, -5.3666703813428143, 3.0753644001620466, -4.5141249968996577, 10.9851525243824639, -15.5451753735674139, 3.5801666169834521, 12.5018119518393789, 10.7023396633520420, -6.4359527720948719, 19.7657595893629363, -2.9890803858030690, 4.9324479647832327, 7.8761479748795535, -12.5817153113803215, 0.6665113254425505, -7.8133850875187569, 6.1148500606014746, -13.2817326160424916, -7.7472175111625470, 13.2488205813645550, 2.5576684227576494, 0.2773072231094722, 14.1568491177038016, 0.7705658279071788, 18.0327845931980129, -6.3872202262209292, -3.1208080557597500, 0.4962345719463288, -8.2559184504023850, -2.4491593141169417, -9.2235721738236123, -2.4329692756437309, 0.3557483126741561, 6.0510006884238789, -10.4657297062495900, 0.1062160983640608, -3.4150834753971817, -10.2321420824385356, 2.0078844061184000, -10.5402727721117451, -2.4934199729762145, 14.6447775052751563, -1.1848589419236752, -1.9849445331939428, -5.1566823206800230, 5.1412758427412903, 9.8791300744399528, -18.2127203809232903, 3.2606793742616009, -12.1653454273564030, 6.5197897616185623, 12.5527576706433912, -19.4073351788971884, -21.5672060655233189, -9.6297842467006909, -10.8765625149764240, -7.4320314102095892, 3.7591317407471774, -28.4413872394029390, 1.1973946509181808, 23.3294295864010195, -5.6521001217833291, -19.1730981216763254, 11.6251992089266309, 14.0834623678193598, -7.8423131977093039, 0.4891324588121075, 4.9406108675027767, 12.4502408064477521, -3.5596005462160250, 1.6809730026194067, -7.0208854109715464, 12.5670834507713440, 18.6860259778440962, -12.8123568789836639, 4.4725328878969846, 1.3309153185426061, -5.8171878616332968, -11.0425214335134143, -3.6798863009088398, -5.7279851242150999, 3.6411522069007747, 10.1972771813481344, 10.1470659062439772, -11.5834968007994821, -5.7241993842909498, -14.7908271549887491, -3.3348023377863196, -2.9058196692974936, 1.6130254111344677, 8.8112899638053346, -12.2100804626353412, -11.3512500429534473, -18.2858193771618360, -1.3161548952339337, 5.4845799899224446, 0.3959223781496539, -7.9725364396941956, -9.5366774158735481, -1.0718579339731269, -29.5368945700499950, 4.6311368608368042, -8.4537354796477651, 4.8293866845415474, -6.9900881837930555, 13.6710001445441023, 10.7616416112059987, -3.6716238079154349, -5.0047832388797415, -8.9807209852098353, 11.9638348977301483, -0.5032826639698529, 11.4659448332837037, -3.0025989206635408, 14.1071418311894021, 9.1960960133877734, 7.0568792717423063, 5.1693823980143181, -0.6340601795188729, -5.9001368668518985, 1.7021884302436683, 5.7153794934610218, -1.9495841151674795, -5.3862879932648902, 2.9195957417867593, 9.8941867077563987, -4.0122049696785647, 10.7323970554248369, -7.4234549503426805, -1.1957366136003231, -15.1401573905432372, 7.5932518324509681, 3.3206078438855346, -5.7455640964609174, -3.3337740151409405, 9.4568789189403741, -15.0236719288649230, -3.5331675589746343, -0.4174042766387167, 18.4519263330854315, -13.7994216292489327, -5.1364680829845319, 1.0104457416339505, 3.0413120887531528, 7.2144317765245054, 5.3390662941586848, 10.3706735312077498, -6.0657466603357868, -1.4558389371730485, 3.7714029521664374, 1.6099696059176951, 8.7744980653957434, 17.7165902240645750, 8.8418849059618125, 9.5733216231342091, 11.1093189569403599, 4.3100700095608619, -20.6712109720362704, 1.1438386017551760, -3.4562588619134047, 10.0903575132651699, 10.9417892877076195, -12.1678456948027556, 3.9742245950007931, 15.6457352681923432, -4.2027538951441485, 9.4016308665159531, 3.3663561196011411, 6.4282157829695254, 5.8610023436655947, 1.9535716592956343, 2.0354669525509115, -8.5168440567162307, 10.8652403597146261, -9.7786588320578378, -4.2149049415666600, -1.6954633715218130, 3.0356416357905451, -3.2405757976408940, -0.7889723913904363, -9.4224532713531470, 7.3712425253753961, 17.5609549712799655, -11.3884826363604308, -1.5062755930138194, 8.5543273040935635, 4.1880146479471314, -8.4671702764378658, 16.6320453805184805, 1.2202653063960520, 19.1776960663346330, 19.7211405836863847, 19.6147916876586983, 5.5121582544286154, -10.4718429695257953, 6.8674750894910828, 1.4797661017251516, 4.4260794129565904, 3.0356372070541835, -1.8150065757829821, 5.7072946598642940, 5.8468605816273520, -8.0708405674265631, -3.6391979073531449, -0.8735999862443524, 1.4379228575183696, 4.2048465158538004, 2.6401634644961973, -20.2066028012160892, -13.9682141908105972, -6.8229750575385442, -7.4993418621411845, 4.1490431793053864, 4.6004404245646286, 6.5649201690707129, -3.4656220139720970, -2.3951932849991229, 2.4670216769521618, -6.1938182077822255, 0.1808401848304779, -10.6463952112669666, -10.2707355422798621, 7.3490688681969205, 8.5002812829049468, -2.0916565942543772, 9.4495885573451446, 4.3588016331743011, -4.7342130513787177, 0.7939574160286655, -3.9608210931515719, -2.1954706568152984, -12.0433394679589298, -5.4856536445981865, -5.8243652116099964, -3.4593659391972578, -1.8737020585699646, -6.0942547871437149, 10.4582196178734748, 11.5016373230561015, -6.8694267995163045, 3.4151144511188365, -9.7582334131300001, 4.7477518587666889, -26.5296930825118125, -1.0723579821214768, 9.9205742329777244, -9.2712699621504200, 2.7295180649220390, -22.2174101025761104, 10.6862301489037037, -0.6686556886390225, -8.6492030066658838, 0.1533673325151987, 12.6976712647841445, 3.0929303728303985, 1.5078876375072010, -7.5858100262868069, -4.0315740139543754, -7.5396759825634883, 10.1960128509418482, 12.8345104352118700, 12.4329179636536136, -7.8527552257166757, -7.0061057739156123, -7.7417835006118532, 2.1425216679390866, 5.5711417177191400, -3.4432382008601294, 10.1290912933752200, 16.0525072081791045, 1.6531054973363100, -6.9875178207558433, -4.4690676724606941, 14.2318326865154940, 4.6795085273592960, 9.1593374900810378, 3.3631009566892263, 7.3869696993764880, 10.4232642725430846, 0.9874474611711577, 6.6741824466910771, 6.9540033769317322, 6.5678038275788930, 2.8909228355561067, 0.5891315976107392, -3.9498122374363480};
+
+#else
+const double re[FFT_SIZE] = {};
+
+const double co[FFT_SIZE] = {};
+
+const double re_twid[FFT_SIZE/2] = {};
+
+const double co_twid[FFT_SIZE/2] = {};
+
+const double re_chk[FFT_SIZE] = {};
+
+const double co_chk[FFT_SIZE] = {};
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/data.h gem5-SALAM/benchmarks/sys_validation/fft/sw/data.h
--- gem5/benchmarks/sys_validation/fft/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/data.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+#include "../defines.h"
+
+extern const double re[FFT_SIZE];
+
+extern const double co[FFT_SIZE];
+
+extern const double re_twid[FFT_SIZE/2];
+
+extern const double co_twid[FFT_SIZE/2];
+
+extern const double re_chk[FFT_SIZE];
+
+extern const double co_chk[FFT_SIZE];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/fft/sw/.gitignore
--- gem5/benchmarks/sys_validation/fft/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/.gitignore	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/isr.c gem5-SALAM/benchmarks/sys_validation/fft/sw/isr.c
--- gem5/benchmarks/sys_validation/fft/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/isr.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/fft/sw/main.cpp
--- gem5/benchmarks/sys_validation/fft/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/main.cpp	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,83 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+#include "../fft_clstr_hw_defines.h"
+
+fft_struct ffts;
+
+#define BASE            0x80c00000
+
+#define REAL_OFFSET     0
+#define IMG_OFFSET      8*FFT_SIZE
+#define RTWID_OFFSET    16*FFT_SIZE
+#define ITWID_OFFSET    20*FFT_SIZE
+#define RCHK_OFFSET     24*FFT_SIZE
+#define ICHK_OFFSET     32*FFT_SIZE
+
+volatile uint8_t  * top           = (uint8_t  *)(TOP);
+volatile uint32_t * loc_real      = (uint32_t *)(TOP+1);
+volatile uint32_t * loc_img       = (uint32_t *)(TOP+9);
+volatile uint32_t * loc_real_twid = (uint32_t *)(TOP+17);
+volatile uint32_t * loc_img_twid  = (uint32_t *)(TOP+25);
+
+int __attribute__ ((optimize("0"))) main(void) {
+	double *real       	= (double *)(BASE+REAL_OFFSET);
+	double *img        	= (double *)(BASE+IMG_OFFSET);
+	double *real_twid  	= (double *)(BASE+RTWID_OFFSET);
+	double *img_twid   	= (double *)(BASE+ITWID_OFFSET);
+	double *real_check 	= (double *)(BASE+RCHK_OFFSET);
+	double *img_check  	= (double *)(BASE+ICHK_OFFSET);
+
+    volatile int count = 0;
+    stage = 0;
+
+    ffts.real       = real;
+    ffts.img        = img;
+    ffts.real_twid  = real_twid;
+    ffts.img_twid   = img_twid;
+    ffts.real_check = real_check;
+    ffts.img_check  = img_check;
+
+    printf("Generating data\n");
+    genData(&ffts);
+    printf("Data generated\n");
+
+    *loc_real       = (uint32_t)(void *)real;
+	*loc_img        = (uint32_t)(void *)img;
+	*loc_real_twid  = (uint32_t)(void *)real_twid;
+	*loc_img_twid   = (uint32_t)(void *)img_twid;
+
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+    bool fail = false;
+	double creal, cimg;
+    for (int i = 0; i < FFT_SIZE; i++) {
+        creal = real[i] - real_check[i];
+        cimg = img[i] - img_check[i];
+		// printf("[%i] = Real: %.12f, Img: %.12f \n", i, creal, cimg);
+		
+        if((creal > EPSILON) || (creal < -EPSILON)) {
+            fail = true;
+        }
+        if((cimg > EPSILON) || (cimg < -EPSILON)) {
+            fail = true;
+        }
+        if (fail) {
+            printf("Diff[%i] = Real: %f, Img: %f \n", i, real[i], img[i]);
+            break;
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+    m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/fft/sw/Makefile gem5-SALAM/benchmarks/sys_validation/fft/sw/Makefile
--- gem5/benchmarks/sys_validation/fft/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/fft/sw/Makefile	2024-02-22 18:17:14.828943054 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f ../../../common/syscalls.o *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/gemm/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/gemm/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/gemm/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/configs/quick_config.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/config.yml gem5-SALAM/benchmarks/sys_validation/gemm/config.yml
--- gem5/benchmarks/sys_validation/gemm/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/config.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,290 @@
+---
+acc_cluster:
+  - Name: gemm_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 25
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: gemm
+      IrPath: hw/gemm.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: MATRIX1
+        Type: SPM
+        Size: 32768
+        Ports: 2
+    - Var:
+      - Name: MATRIX2
+        Type: SPM
+        Size: 32768
+        Ports: 2
+    - Var:
+      - Name: MATRIX3
+        Type: SPM
+        Size: 32768
+        Ports: 2
+hw_config:
+  name: gemm_clstr
+  top:
+  gemm:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/defines.h gem5-SALAM/benchmarks/sys_validation/gemm/defines.h
--- gem5/benchmarks/sys_validation/gemm/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,9 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+#define CHECK
+
+#define TYPE double
+#define ROW 64
+#define COL 64
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/gemm_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/gemm/gemm_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/gemm/gemm_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/gemm_clstr_hw_defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,15 @@
+//BEGIN GENERATED CODE
+//Cluster: GEMM_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: GEMM
+#define GEMM 0x10020080
+#define MATRIX1 0x100200c0
+#define MATRIX2 0x10028100
+#define MATRIX3 0x10030140
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/.gitignore gem5-SALAM/benchmarks/sys_validation/gemm/.gitignore
--- gem5/benchmarks/sys_validation/gemm/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/hw/gemm.c gem5-SALAM/benchmarks/sys_validation/gemm/hw/gemm.c
--- gem5/benchmarks/sys_validation/gemm/hw/gemm.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/hw/gemm.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,46 @@
+#include "hw_defines.h"
+
+// void gemm(){
+//     TYPE    * m1     = (TYPE    *)MATRIX1;
+//     TYPE    * m2     = (TYPE    *)MATRIX2;
+//     TYPE    * m3     = (TYPE    *)MATRIX3;
+//     int k_col, i_col;
+//     TYPE mult, sum;
+//     for(int i=0;i<row_size;i++) {
+//         for(int j=0;j<col_size;j++) {
+//             i_col = i * col_size;
+//             sum = 0;
+//             #pragma unroll
+//             for(int k=0;k<row_size;k++) {
+//                 k_col = k * col_size;
+//                 mult = m1[i_col + k] * m2[k_col + j];
+//                 sum += mult;
+//             }
+//             m3[i_col + j]  = sum;
+//         }
+//     }
+// }
+
+void gemm(){
+    TYPE    * m1     = (TYPE    *)MATRIX1;
+    TYPE    * m2     = (TYPE    *)MATRIX2;
+    TYPE    * m3     = (TYPE    *)MATRIX3;
+    int k_col, i_col;
+    TYPE mult, sum;
+    for(int ij=0; ij<row_size*col_size; ij++) {
+        // Column index
+        int i = ij % row_size;
+        // Row index
+        int j = ij / row_size;
+
+        i_col = i * col_size;
+        sum = 0;
+        #pragma unroll
+        for(int k=0;k<row_size;k++) {
+            k_col = k * col_size;
+            mult = m1[i_col + k] * m2[k_col + j];
+            sum += mult;
+        }
+        m3[i_col + j]  = sum;
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/gemm/hw/.gitignore
--- gem5/benchmarks/sys_validation/gemm/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/hw/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,3 @@
+*.ll
+*.o
+*.bc
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/gemm/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/gemm/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/hw/hw_defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,15 @@
+//Standard Libraries
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../gemm_clstr_hw_defines.h"
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+//Specify row/column sizes
+#define row_size 	ROW
+#define col_size 	COL
+#define mat_size	row_size*col_size*sizeof(TYPE)
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/hw/Makefile gem5-SALAM/benchmarks/sys_validation/gemm/hw/Makefile
--- gem5/benchmarks/sys_validation/gemm/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/hw/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,6 @@
+KERN=gemm.c top.c
+build: $(FILES)
+	clang -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN) -target armv7-pc-none-eabi
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/hw/top.c gem5-SALAM/benchmarks/sys_validation/gemm/hw/top.c
--- gem5/benchmarks/sys_validation/gemm/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/hw/top.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,43 @@
+#include "hw_defines.h"
+
+void top(uint64_t m1_addr,
+		 uint64_t m2_addr,
+		 uint64_t m3_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * GEMMFlags  = (uint8_t *)GEMM;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer M1
+	*DmaRdAddr  = m1_addr;
+	*DmaWrAddr  = MATRIX1;
+	*DmaCopyLen = mat_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = m2_addr;
+	*DmaWrAddr  = MATRIX2;
+	*DmaCopyLen = mat_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*GEMMFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*GEMMFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer M3
+	*DmaRdAddr  = MATRIX3;
+	*DmaWrAddr  = m3_addr;
+	*DmaCopyLen = mat_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/Makefile gem5-SALAM/benchmarks/sys_validation/gemm/Makefile
--- gem5/benchmarks/sys_validation/gemm/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/bench.h gem5-SALAM/benchmarks/sys_validation/gemm/sw/bench.h
--- gem5/benchmarks/sys_validation/gemm/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/bench.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,25 @@
+#include "../defines.h"
+
+#define rcIndex     (r*ROW + c)
+
+volatile int stage;
+
+typedef struct {
+    TYPE * a;
+    TYPE * b;
+    TYPE * c;
+    int row_size;
+    int col_size;
+} gemm_struct;
+
+void genData(gemm_struct * ges) {
+    int r, c, k, mult, sum;
+
+    for( r=0; r < ges->row_size; r++ ) {
+        for( c=0; c < ges->col_size; c++ ) {
+            ges->a[rcIndex] = rcIndex;
+            ges->b[rcIndex] = (ges->row_size * ges->col_size) - 1 - rcIndex;
+        }
+    }
+}
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/gemm/sw/boot.ld
--- gem5/benchmarks/sys_validation/gemm/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/boot.ld	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/boot.s gem5-SALAM/benchmarks/sys_validation/gemm/sw/boot.s
--- gem5/benchmarks/sys_validation/gemm/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/boot.s	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/gemm/sw/.gitignore
--- gem5/benchmarks/sys_validation/gemm/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/isr.c gem5-SALAM/benchmarks/sys_validation/gemm/sw/isr.c
--- gem5/benchmarks/sys_validation/gemm/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/isr.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/gemm/sw/main.cpp
--- gem5/benchmarks/sys_validation/gemm/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/main.cpp	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,79 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+#include "../gemm_clstr_hw_defines.h"
+
+gemm_struct ges;
+
+volatile uint8_t  * top   = (uint8_t  *)(TOP + 0x00);
+volatile uint32_t * val_a = (uint32_t *)(TOP + 0x01);
+volatile uint32_t * val_b = (uint32_t *)(TOP + 0x09);
+volatile uint32_t * val_c = (uint32_t *)(TOP + 0x11);
+
+int __attribute__ ((optimize("0"))) main(void) {
+	m5_reset_stats();
+    uint32_t base = 0x80c00000;
+	TYPE *m1 = (TYPE *)base;
+	TYPE *m2 = (TYPE *)(base+8*ROW*COL);
+	TYPE *m3 = (TYPE *)(base+16*ROW*COL);
+	TYPE *check = (TYPE *)(base+24*ROW*COL);
+	int row_size = ROW;
+    int col_size = COL;
+    volatile int count = 0;
+	stage = 0;
+
+    ges.a = m1;
+    ges.b = m2;
+    ges.c = m3;
+    ges.row_size = row_size;
+    ges.col_size = col_size;
+
+    printf("Generating data\n");
+    genData(&ges);
+    printf("Data generated\n");
+
+    *val_a = (uint32_t)(void *)m1;
+    *val_b = (uint32_t)(void *)m2;
+    *val_c = (uint32_t)(void *)m3;
+    // printf("%d\n", *top);
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+#ifdef CHECK
+    printf("Checking result\n");
+    printf("Running bench on CPU\n");
+	bool fail = false;
+	int i, j, k, k_col, i_col;
+	TYPE sum = 0;
+	TYPE mult = 0;
+	for(i=0;i<ROW;i++) {
+        for(j=0;j<COL;j++) {
+            i_col = i * COL;
+            sum = 0;
+            for(k=0;k<ROW;k++) {
+                k_col = k * COL;
+                mult = m1[i_col + k] * m2[k_col + j];
+                sum += mult;
+            }
+            check[i_col + j] = sum;
+        }
+    }
+    printf("Comparing CPU run to accelerated run\n");
+    for(i=0; i<ROW*COL; i++) {
+        if(m3[i] != check[i]) {
+            printf("Expected:%f Actual:%f\n", check[i], m3[i]);
+            fail = true;
+            break;
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+	m5_dump_stats();
+	m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/gemm/sw/Makefile gem5-SALAM/benchmarks/sys_validation/gemm/sw/Makefile
--- gem5/benchmarks/sys_validation/gemm/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/gemm/sw/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/.gitignore gem5-SALAM/benchmarks/sys_validation/.gitignore
--- gem5/benchmarks/sys_validation/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/.gitignore	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,4 @@
+/*/*/*.ll
+/*/*/*.o
+/*/*/*.elf
+/*/*/*.bc
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/Makefile gem5-SALAM/benchmarks/sys_validation/Makefile
--- gem5/benchmarks/sys_validation/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/Makefile	2024-02-22 18:17:14.824943033 -0600
@@ -0,0 +1,19 @@
+BENCHMARKS= \
+	fft \
+	gemm \
+	md-knn \
+	nw \
+	stencil2d \
+	stencil3d
+
+CFLAGS=-O1 -Wall -Wno-unused-label
+
+.PHONY: build clean all
+
+build:
+	@( for b in $(BENCHMARKS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$b; done )
+	
+clean:
+	@( for b in $(BENCHMARKS); do $(MAKE) -C $$b clean || exit ; done )
+	
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/config.yml gem5-SALAM/benchmarks/sys_validation/md_grid/config.yml
--- gem5/benchmarks/sys_validation/md_grid/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/config.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,289 @@
+---
+acc_cluster:
+  - Name: md_grid_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 25
+      InterruptNum: 95
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: md_grid
+      IrPath: hw/md_grid.ll
+      Debug: True
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: NPOINTS
+        Type: SPM
+        Size: 256
+        Ports: 2
+    - Var:
+      - Name: FORCE
+        Type: SPM
+        Size: 15360
+        Ports: 2
+    - Var:
+      - Name: POSITION
+        Type: SPM
+        Size: 15360
+        Ports: 2
+hw_config:
+  top:
+  md_grid:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/defines.h gem5-SALAM/benchmarks/sys_validation/md_grid/defines.h
--- gem5/benchmarks/sys_validation/md_grid/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,57 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#include "stdint.h"
+#include "md_grid_clstr_hw_defines.h"
+
+//#define SPM
+#define CHECK
+//#define TEST
+
+#ifdef TEST
+#define TYPE double
+// Problem Constants
+#define nAtoms        64
+#define domainEdge    20.0
+#define blockSide     4
+#define nBlocks       (blockSide*blockSide*blockSide)
+#define blockEdge     (domainEdge/((TYPE)blockSide))
+// Memory Bound
+// This is an artifact of using statically-allocated arrays. We'll pretend that
+// it doesn't exist and instead track the actual number of points.
+#define densityFactor 1
+// LJ coefficients
+#define lj1           1.5
+#define lj2           2.0
+
+#else
+#define TYPE double
+// Problem Constants
+#define nAtoms        256
+#define domainEdge    20.0
+#define blockSide     4
+//#define blockSide     1
+#define nBlocks       (blockSide*blockSide*blockSide)
+#define blockEdge     (domainEdge/((TYPE)blockSide))
+// Memory Bound
+// This is an artifact of using statically-allocated arrays. We'll pretend that
+// it doesn't exist and instead track the actual number of points.
+#define densityFactor 10
+// LJ coefficients
+#define lj1           1.5
+#define lj2           2.0
+
+
+#endif
+
+typedef struct {
+  TYPE x, y, z;
+} dvector_t;
+typedef struct {
+  int32_t x, y, z;
+} ivector_t;
+
+#define MIN(x,y) ( (x)<(y) ? (x) : (y) )
+#define MAX(x,y) ( (x)>(y) ? (x) : (y) )
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/.gitignore gem5-SALAM/benchmarks/sys_validation/md_grid/.gitignore
--- gem5/benchmarks/sys_validation/md_grid/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/md_grid/hw/.gitignore
--- gem5/benchmarks/sys_validation/md_grid/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/hw/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/hw/Makefile gem5-SALAM/benchmarks/sys_validation/md_grid/hw/Makefile
--- gem5/benchmarks/sys_validation/md_grid/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/hw/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,7 @@
+KERN=md_grid.c top.c
+
+build: $(FILES)
+	clang -O1 -S -m32 -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/hw/md_grid.c gem5-SALAM/benchmarks/sys_validation/md_grid/hw/md_grid.c
--- gem5/benchmarks/sys_validation/md_grid/hw/md_grid.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/hw/md_grid.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,65 @@
+#include "md.h"
+
+#define MIN(x,y) ( (x)<(y) ? (x) : (y) )
+#define MAX(x,y) ( (x)>(y) ? (x) : (y) )
+
+void md( int n_points[blockSide][blockSide][blockSide],
+         dvector_t force[blockSide][blockSide][blockSide][densityFactor],
+         dvector_t position[blockSide][blockSide][blockSide][densityFactor] )
+{
+  ivector_t b0, b1; // b0 is the current block, b1 is b0 or a neighboring block
+  dvector_t p, q; // p is a point in b0, q is a point in either b0 or b1
+  int32_t p_idx, q_idx;
+  TYPE dx, dy, dz, r2inv, r6inv, potential, f;
+
+  // Iterate over the grid, block by block
+  loop_grid0_x: for( b0.x=0; b0.x<blockSide; b0.x++ ) {
+  loop_grid0_y: for( b0.y=0; b0.y<blockSide; b0.y++ ) {
+  loop_grid0_z: for( b0.z=0; b0.z<blockSide; b0.z++ ) {
+  // Iterate over the 3x3x3 (modulo boundary conditions) cube of blocks around b0
+  loop_grid1_x: for( b1.x=MAX(0,b0.x-1); b1.x<MIN(blockSide,b0.x+2); b1.x++ ) {
+  loop_grid1_y: for( b1.y=MAX(0,b0.y-1); b1.y<MIN(blockSide,b0.y+2); b1.y++ ) {
+  loop_grid1_z: for( b1.z=MAX(0,b0.z-1); b1.z<MIN(blockSide,b0.z+2); b1.z++ ) {
+    // For all points in b0
+    dvector_t *base_q = position[b1.x][b1.y][b1.z];
+    int q_idx_range = n_points[b1.x][b1.y][b1.z];
+    loop_p: for( p_idx=0; p_idx<n_points[b0.x][b0.y][b0.z]; p_idx++ ) {
+      p = position[b0.x][b0.y][b0.z][p_idx];
+      TYPE sum_x = force[b0.x][b0.y][b0.z][p_idx].x;
+      TYPE sum_y = force[b0.x][b0.y][b0.z][p_idx].y;
+      TYPE sum_z = force[b0.x][b0.y][b0.z][p_idx].z;
+      // For all points in b1
+      loop_q: for( q_idx=0; q_idx< q_idx_range ; q_idx++ ) {
+        q = *(base_q + q_idx);
+
+        // Don't compute our own
+        if( q.x!=p.x || q.y!=p.y || q.z!=p.z ) {
+          // Compute the LJ-potential
+          dx = p.x - q.x;
+          dy = p.y - q.y;
+          dz = p.z - q.z;
+          r2inv = 1.0/( dx*dx + dy*dy + dz*dz );
+          r6inv = r2inv*r2inv*r2inv;
+          potential = r6inv*(lj1*r6inv - lj2);
+          // Update forces
+          f = r2inv*potential;
+          sum_x += f*dx;
+          sum_y += f*dy;
+          sum_z += f*dz;
+        }
+      } // loop_q
+      force[b0.x][b0.y][b0.z][p_idx].x = sum_x ;
+      force[b0.x][b0.y][b0.z][p_idx].y = sum_y ;
+      force[b0.x][b0.y][b0.z][p_idx].z = sum_z ;
+    } // loop_p
+  }}} // loop_grid1_*
+  }}} // loop_grid0_*
+}
+
+void top() {
+  void * points   = (void *)NPOINTS;
+  void * force    = (void *)FORCE;
+  void * position = (void *)POSITION;
+
+  md(points,force,position);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/hw/md.h gem5-SALAM/benchmarks/sys_validation/md_grid/hw/md.h
--- gem5/benchmarks/sys_validation/md_grid/hw/md.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/hw/md.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,23 @@
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include "../defines.h"
+
+void md( int32_t n_points[blockSide][blockSide][blockSide],
+         dvector_t force[blockSide][blockSide][blockSide][densityFactor],
+         dvector_t position[blockSide][blockSide][blockSide][densityFactor]
+       );
+////////////////////////////////////////////////////////////////////////////////
+// Test harness interface code.
+
+struct bench_args_t {
+  int32_t n_points[blockSide][blockSide][blockSide];
+  dvector_t force[blockSide][blockSide][blockSide][densityFactor];
+  dvector_t position[blockSide][blockSide][blockSide][densityFactor];
+};
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+#define points_size nBlocks*sizeof(int32_t)
+#define grid_size   nBlocks*densityFactor*sizeof(dvector_t)
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/hw/top.c gem5-SALAM/benchmarks/sys_validation/md_grid/hw/top.c
--- gem5/benchmarks/sys_validation/md_grid/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/hw/top.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,43 @@
+#include "md.h"
+
+void top(uint64_t npoints,
+		 uint64_t force,
+		 uint64_t position) {
+
+	//Define Device MMRs
+	volatile uint8_t  * MD_GRIDFlags  = (uint8_t *)MD_GRID;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer M1
+	*DmaRdAddr  = npoints;
+	*DmaWrAddr  = NPOINTS;
+	*DmaCopyLen = points_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = position;
+	*DmaWrAddr  = POSITION;
+	*DmaCopyLen = grid_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*MD_GRIDFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*MD_GRIDFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer M3
+	*DmaRdAddr  = FORCE;
+	*DmaWrAddr  = force;
+	*DmaCopyLen = grid_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/Makefile gem5-SALAM/benchmarks/sys_validation/md_grid/Makefile
--- gem5/benchmarks/sys_validation/md_grid/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+FOLDERS=\
+	sw\
+	hw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+	
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+	
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/md_grid_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/md_grid/md_grid_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/md_grid/md_grid_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/md_grid_clstr_hw_defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,15 @@
+//BEGIN GENERATED CODE
+//Cluster: MD_GRID_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: MD_GRID
+#define MD_GRID 0x10020080
+#define NPOINTS 0x100200c0
+#define FORCE 0x10020200
+#define POSITION 0x10023e40
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/bench.h gem5-SALAM/benchmarks/sys_validation/md_grid/sw/bench.h
--- gem5/benchmarks/sys_validation/md_grid/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/bench.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,66 @@
+#include "defines.h"
+#include "data.h"
+#include <cmath>
+
+#define EPSILON 1.0e-2
+#define blockSide3 blockSide*blockSide*blockSide
+#define blockSide2 blockSide*blockSide
+
+typedef struct {
+    int32_t * n_points;
+    TYPE * force;
+    TYPE * position;
+    TYPE * check;
+//    int blockSide;
+//    int densityFactor;
+} md_struct;
+
+int checkData(md_struct * mds) {
+    int i;
+	double result;
+    for (int i = 0; i < blockSide3*densityFactor*3; i++) {
+    	result = std::abs((mds->force[i]-mds->check[i]))/(mds->check[i]);
+        if (result > EPSILON) {
+            printf("Check Failed\n");
+            return 0;
+        }
+    }
+    printf("Check Passed\n");
+    return 1;
+}
+
+void genData(md_struct * mds) {
+    int i;
+#ifndef TEST
+    for (i = 0; i < blockSide3; i++) {
+        mds->n_points[i] = n_p[i];
+    }
+    for(i = 0; i < blockSide3*densityFactor; i++) {
+        mds->position[3*i] = pos[3*i];
+        mds->position[3*i+1] = pos[3*i+1];
+        mds->position[3*i+2] = pos[3*i+2];
+        mds->check[3*i] = chk[3*i];
+        mds->check[3*i+1] = chk[3*i+1];
+        mds->check[3*i+2] = chk[3*i+2];
+        mds->force[3*i] = 0.0;
+        mds->force[3*i+1] = 0.0;
+        mds->force[3*i+2] = 0.0;
+    }
+#else
+    for (i = 0; i < blockSide3; i++) {
+        mds->n_points[i] = 1;
+    }
+    for(i = 0; i < blockSide3*densityFactor; i++) {
+        mds->position[3*i] = 3.0*i;
+        mds->position[3*i+1] = 3.0*i;
+        mds->position[3*i+2] = 3.0*i;
+        mds->check[3*i] = chk[3*i];
+        mds->check[3*i+1] = chk[3*i+1];
+        mds->check[3*i+2] = chk[3*i+2];
+        mds->force[3*i] = 0.0;
+        mds->force[3*i+1] = 0.0;
+        mds->force[3*i+2] = 0.0;
+    }
+#endif
+}
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/md_grid/sw/boot.ld
--- gem5/benchmarks/sys_validation/md_grid/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/boot.ld	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/boot.s gem5-SALAM/benchmarks/sys_validation/md_grid/sw/boot.s
--- gem5/benchmarks/sys_validation/md_grid/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/boot.s	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,185 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ sam_dev_id,      49
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable1    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_unexpected:
+//    cmp r2, #timer_irq_id
+//	cmp r2, #kmio_irq_id
+//	cmp r2, #uart0_irq_id
+//	cmp r2, #rtc_irq_id
+    cmp r2, #sam_dev_id
+    bne irq_unexpected  // if irq is not from sam_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+//    ldr r2, =timer_irq_id
+//	ldr r2, = uart0_irq_id
+//	ldr r2, = rtc_irq_id
+//	ldr r2, = kmio_irq_id
+    ldr r2, = sam_dev_id
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/data.c gem5-SALAM/benchmarks/sys_validation/md_grid/sw/data.c
--- gem5/benchmarks/sys_validation/md_grid/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/data.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,10 @@
+#include "data.h"
+
+#ifndef TEST
+const int n_p[blockSide*blockSide*blockSide] = {4, 4, 3, 4, 5, 5, 2, 1, 1, 8, 4, 8, 3, 3, 7, 5, 4, 5, 6, 2, 2, 4, 4, 3, 3, 4, 7, 2, 3, 2, 2, 1, 7, 1, 3, 7, 6, 3, 3, 4, 3, 4, 5, 5, 6, 4, 2, 5, 7, 6, 5, 4, 3, 3, 5, 4, 4, 4, 3, 2, 3, 2, 7, 5};
+const TYPE pos[3*blockSide*blockSide*blockSide*densityFactor] = {3.6751776717378926, 4.2081589767125083, 2.1440962668152759, 0.1878695309954036, 1.6092908148972949, 0.5694799889233795, 1.9227078446526487, 3.5831061282627052, 3.9964468877352988, 2.1591586300607557, 0.7200676044914117, 2.4346772050174530, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.1261290806846831, 4.0064400264387299, 9.0136199719002139, 2.7868502187317352, 4.1289182455944600, 7.3887180361710314, 0.1127406837012356, 0.7910451974542847, 7.8430699551691285, 1.4978908165810179, 1.7634732711882284, 6.7903059219704334, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.5366177225833804, 3.1021877474380846, 12.5413183208886387, 4.5572540788124876, 1.0589064618546478, 12.0420038635632203, 2.5039008240633098, 2.3981418963013592, 11.3273292122877240, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 2.7221948728308938, 4.9782526344434004, 18.1818633679297932, 0.5593388063665081, 0.0234795394354381, 17.6332251307856360, 2.5361799008322228, 2.8634138891454834, 18.7953673605650380, 0.3172371695158291, 2.3815347271377356, 15.9846723200625753, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 4.3259530790379968, 9.7047200057221819, 0.1152809968347733, 1.6534266893003142, 9.6760033547368458, 4.8981503840652518, 1.2420326806515858, 8.6648391054270792, 2.6204714811313572, 0.2671174645220583, 5.8499163600439203, 0.8886687593913422, 3.4972423917441855, 9.0706513378177149, 4.5477256233179739, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 4.1877754014200370, 7.6677513496295822, 5.2580992616124878, 0.9776458988602766, 6.5318435363237963, 8.1527313369621357, 0.4078369905844157, 9.9469883910035293, 5.3470413843226838, 1.7365790812460604, 5.4623403845198393, 5.6193218264458542, 3.5361049273414475, 9.5332373650980067, 9.6504592669041838, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.5637551126073275, 5.9535166740117766, 13.2088307489098451, 2.3181468909521010, 9.4011962527758861, 10.9441563030915603, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.8529174511434725, 5.5891226245930596, 19.3533444811343784, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 2.6225036447865557, 12.1362722815472051, 3.4765394040222990, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 4.2264270650987248, 14.7173024017426926, 8.3327420883364507, 0.2553043509206231, 14.7800235438963625, 7.7533322544188135, 0.9264966192175300, 11.0729238079614696, 8.5098075612892305, 2.7753360501552873, 11.8529377968924887, 6.3867596386962973, 4.8773099951981260, 11.0067007962678982, 8.8389215256127489, 4.6449048171026357, 14.0671783888537920, 7.0737246647267247, 3.2022358476300394, 14.0177246692394739, 8.8734065210448261, 2.8718852839138940, 12.3602090294784119, 9.0612576332890029, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 4.9304158903095656, 13.4563646124520311, 10.0188896830914942, 3.5962505548817258, 13.2311276784010641, 10.7770080647958348, 0.6901526125666906, 11.7003937920188470, 14.1971733171327852, 3.4171375951674676, 10.6300366468594643, 12.4847198191310369, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.2703310110536179, 13.1509451291781403, 16.0913322938511243, 1.0222004863811358, 14.3505186400425799, 17.1503655665231420, 2.3433250384127384, 11.9248970153847882, 19.4768644266667401, 0.0829396211166469, 12.1920277939635202, 17.6111941787996003, 3.4519282140092651, 12.8571266483258135, 17.3420203546990450, 1.0557598401670412, 10.3612234002161117, 16.8239757354184860, 1.6494969174818297, 12.7207178303538289, 17.3497261810119134, 2.3712945210345331, 14.2439330229754635, 16.4521638780890527, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.7918941140052675, 18.6604411677948043, 0.8004199563224681, 3.7449920941085066, 17.5353751653850658, 0.5669871427130923, 4.5097723740932185, 19.5654735882180972, 0.8582822852436496, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 4.0229751789818655, 19.5643071810518308, 5.9322266112500959, 4.1428606667917336, 15.6638265752271266, 5.3030492212128397, 3.4308417925440269, 19.8178441941022108, 9.4985545747724878, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 1.5683180324406867, 19.2313884765320040, 13.5516312238628860, 0.3318993707057750, 17.2899736854007919, 12.1367636165709136, 2.6044662735519992, 18.8160422842487627, 13.1333974647393319, 1.3829487716820774, 18.0697976497191952, 10.5987442011944708, 2.4370867633551181, 16.7973657347760543, 10.2175948477949134, 3.9240030976350608, 15.6576976449421181, 13.6938164319695161, 1.2832201236236951, 18.4662106150019909, 14.5881843077565705, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 2.7667405433321446, 17.8220214373726833, 19.2449424633702542, 1.5337977621823875, 19.9680230373665921, 16.9262457858526645, 0.3080346042757222, 16.9582495526544115, 18.9244191142618199, 1.2970522785044105, 18.1236016202777996, 16.7185186753967905, 4.4876884404153135, 18.1011362237602711, 17.1479761085705711, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 6.7851818082497601, 3.4056039389322494, 2.2257144986306177, 7.4437057468512062, 4.9060214300143219, 3.2673313705234071, 5.4550046025929149, 2.9272013256220664, 3.4669076591384762, 9.7272892059598330, 4.2290288959808002, 0.9113099993598716, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 8.8344254870351335, 2.6792826006163977, 7.0763807304655524, 5.7463335278029710, 0.2806037350274115, 8.7311685449318581, 5.9217002569171031, 4.3898395672452963, 7.5833587152232447, 7.0609216245451680, 2.5762229587422998, 8.2984333482400352, 8.4064449031482127, 1.9710806362080797, 9.9086003293395724, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 5.1749024607328264, 3.7323911848335052, 12.2685679773443006, 6.8847748576589751, 3.5295547530952605, 14.9767969398953511, 8.4629229031582209, 2.5608079408240010, 12.9688298457771687, 7.6183972435207252, 4.5022463250317255, 11.3410701645431278, 5.1435245717979949, 3.8320015283320767, 10.6822783656440379, 8.1464042436039126, 3.9126082356480452, 10.0191673859667940, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 9.5778498699964629, 2.2143334425431953, 18.0947161151234148, 7.2893377266753587, 4.6758443638120806, 19.2337468288737377, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 8.5627094608835197, 7.1745844777056833, 2.2858302568718885, 7.4437431561227392, 7.8873825177051406, 3.2366115438475438, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 6.4862521901726744, 8.0848649866930344, 9.7784337883551373, 5.7260535593592010, 8.7069986212538897, 5.3662018366095099, 6.8807521681509005, 6.7212394562336897, 8.7472953920013019, 5.7624040984725564, 8.7097980208570078, 6.9170741236277618, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 6.6489605584185973, 9.3149075041507299, 14.6962761797325392, 7.2980496507174255, 5.8776955217970546, 10.6867260118935405, 6.3220404025344026, 6.3443308259250344, 14.7490724388635641, 9.1806026935048806, 8.0229567524753183, 11.5804876998391393, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 5.7179651739954398, 7.6246036274673203, 19.2540660250504416, 8.3680886517792246, 5.9864866848830207, 18.1955139743717211, 9.2503949873418794, 8.5855413928391844, 17.2783908948646925, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 7.5209263497753573, 11.4500722602451859, 3.0851068661030423, 5.5222248313463975, 14.5427274692486712, 4.8805704875164988, 9.8537894591522797, 14.7414698270373776, 4.5777285180786205, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 8.7470311216293606, 10.1080840549846833, 5.1645378313088619, 6.7124574349141106, 13.6687817933165245, 6.5359265800354196, 7.4655764254754544, 13.7317389666066525, 8.0014718454115581, 6.3481514363787506, 13.2783180756681674, 7.5035965388636949, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 7.0635873061829768, 12.7744435499558833, 10.2860103728011349, 9.8137657385082306, 11.9661657987475341, 12.9917616686460242, 9.7656001860256918, 13.4144294693136796, 11.3292714641285919, 6.1742489453149219, 14.1369673710703854, 10.0193265074685129, 5.0908951354312872, 11.8575048905551217, 11.8043964349536594, 5.3594363124954834, 14.6071701753364778, 13.1345141328689490, 5.4770386780298388, 10.3606897639506563, 14.2894931506071305, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 5.8797088939011255, 11.2168477650019547, 17.5237435510103232, 5.6869086257068098, 10.1927365474869589, 18.1026391263194277, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 7.7791093202866755, 19.9177900760695721, 0.3174876306099913, 9.4177137526614665, 19.2718320631692421, 3.5279689501917821, 8.9909692671351333, 16.1440615277531023, 4.4450477497888139, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 9.3434185430869618, 18.6960660426856116, 9.0744292782412579, 5.3422898020468619, 18.9276349793230168, 5.9578482806340451, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 6.6217636841554288, 15.3450643786373426, 10.7048062739302914, 6.3275803150554522, 16.3214713444517869, 14.5889577523875467, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 9.2086966788557518, 17.0712258767632861, 18.2685942651204947, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 10.4125609669545192, 0.0164184716350660, 3.0024413572980491, 13.1989856058542436, 0.8713628098373043, 1.4071525710629489, 11.5697577060044843, 2.6993094378198168, 2.3858519283029271, 11.6978875453659832, 3.3244794214474496, 1.3875632973341996, 10.9439629278922013, 3.8852233441531299, 0.8675699935098641, 11.1227406322977824, 2.7582852014461645, 0.1893328065393807, 10.4225409750898521, 0.0785255990389568, 0.0235178328007123, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 11.5155844463164172, 0.4662466434853773, 5.3858066934412019, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 11.4428012989220580, 2.2406187398069779, 10.2278840776730977, 12.7208676027301557, 3.4320862691283209, 10.4023106203178699, 10.3510742900227761, 3.2924801038934080, 14.9176986094763908, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 13.4839625274226194, 0.5273664154940431, 16.0527177594889139, 11.5392731253040548, 4.2443943700567752, 17.2334085517164119, 13.5593710328534520, 3.7374174986297151, 17.5654831473733033, 12.8839793112894601, 3.6201424229546681, 19.4264996224047017, 10.3072118232742849, 0.2334061399608698, 15.0571324838484486, 13.7989724102711797, 2.2476673656641801, 19.3311187171898560, 14.2224777464941372, 4.5547690512524506, 17.9179079179237029, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.3228577296588071, 9.6416548484039133, 2.7300429334475576, 12.9129937211481938, 5.9893229570148341, 0.1566641969771449, 10.6721420669764644, 8.8648736667611487, 0.2410759923645371, 12.6059390612419442, 5.9596547268625066, 2.5481771308936310, 10.3854872472542592, 5.6109583454163001, 1.2793285826310643, 14.2145433936236838, 5.0115954513560546, 4.6736257029693311, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.7601184000568590, 9.2063618136850334, 5.3733196920580992, 14.9621808235400202, 7.5522377758777850, 6.6748724207248156, 13.4861217909613345, 6.2947789308450908, 9.1130803766540005, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 11.5274909098487583, 6.6373588103732137, 14.3077035058116682, 13.8218679106338183, 5.5365867045727661, 14.6294659992070848, 14.9364341531333107, 8.9621416849378264, 11.8727324665991674, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 10.9764995567023966, 7.4727256773459869, 19.8797587210222275, 10.5638623996769727, 6.7355862879971484, 15.3427479696982516, 14.7730047964071467, 6.2756182511041372, 16.3279534497336734, 13.5429160724491666, 9.5361769634243423, 19.6426877154950787, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.7916515469382421, 14.2816237882065309, 3.3797357458584583, 12.5501229208306757, 13.5544125333464613, 0.2229446752189353, 14.8851141981239028, 10.8202275599755673, 1.5109100749250302, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 10.2251848487736119, 13.2325485079401659, 9.8753308406590374, 12.1627344326544709, 12.7861572930515202, 8.4779169365640250, 10.8243687968498481, 12.0420308818265056, 7.5224696854719397, 12.1496478040613365, 13.5449814774089479, 9.5554150105024647, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.5360080910664777, 10.4112386778402453, 12.6878367956508988, 14.5401586039839792, 10.0038647839579440, 11.0805875612635809, 13.8608233334647952, 12.3540202008306981, 11.5600742872069731, 11.2137213596890000, 10.6153094480978325, 12.6382173759649614, 13.6667367580294439, 14.0141661816363534, 14.8445669054948333, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 11.6812259245979515, 13.9160635076280741, 17.1142524409288228, 13.2252843493755616, 11.3104312774579547, 18.8463187708903632, 10.2969726760120217, 13.5735837307194362, 16.9274149013707174, 14.5484423416647264, 14.2728239374589307, 18.1648494702148504, 12.1121498405229744, 10.6586843478587099, 17.5592785599267742, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.0876307378348837, 18.9356998231911469, 3.9490319333486923, 14.4566073800425841, 17.7034428446484604, 4.2158159211154995, 12.0375810304219222, 16.4706020687049275, 1.3314408058193639, 10.0147557338273447, 19.6551622545138471, 4.5772960711320723, 10.4134292474183034, 18.6997303368635066, 1.7607250469699816, 12.7174081929337248, 18.8833933907846472, 0.0167848559783718, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 10.3719449281605076, 19.8103469585473100, 7.4247815593339208, 13.5815447984483324, 15.4329874305955190, 5.7372552161446952, 12.9565675623052972, 18.1991812687241783, 8.3301647316925624, 14.5139698549894405, 15.8264769696425809, 9.8929224861620675, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.1730728863995292, 18.7853205080859418, 12.7569779923039039, 11.5069303326321979, 19.5577932786985436, 13.0820107252652882, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 14.2477691876824526, 19.0874965754834740, 17.6022129924633504, 14.2605567530194026, 15.7714594962642494, 16.9188372067287141, 10.1004498451458762, 18.9424230691569520, 16.1415305772765798, 13.9758108225928357, 17.4344671720420905, 19.0153978872629068, 13.0456258591763881, 15.0300791334677992, 18.6470592226488492, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 19.0421644512576478, 0.1110865138833930, 3.7337473945490069, 16.6878337834015902, 4.3237725552212183, 1.8655501297024442, 18.6654576486595296, 0.6908553508798563, 2.2928910409962713, 19.9154683253095435, 2.4926257764192314, 4.9616016867514139, 19.7833670117321923, 4.0494353712292614, 0.3936521613195942, 16.1797254569442579, 1.8908009678804352, 2.8829039465130659, 16.4086936578005584, 2.5736949130478992, 4.8138031341996772, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 17.2769465297835758, 0.1378071377482869, 8.5406476617232325, 16.9809487421796987, 2.1151995255310747, 7.3882429596047370, 18.8600412489591598, 2.8805013855540791, 8.2656488453416461, 18.1942458367322217, 1.3963257180914304, 6.4032828014924013, 16.9573422980719606, 4.3157153642119992, 9.0701538884995472, 17.6794552597908954, 2.7943721628365132, 8.9719932180434760, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 16.5198313181023195, 1.4982821984794936, 12.2555397010652349, 17.3880397283452091, 4.3827298640398640, 14.9993447301251379, 19.5209822704437599, 0.4443032593999899, 13.7770087416204152, 19.8948537551397315, 0.4983877075670113, 12.5366213969831257, 18.9261623409457087, 2.9163129463609136, 13.9441638769380631, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 19.2690458797141737, 0.2234797292400960, 16.9746461119998742, 19.2419706461741100, 4.4343192198184598, 16.5519293125461999, 16.8779968223881518, 0.6561422426680080, 16.0365577995907138, 19.4159240478823349, 1.7364393060322221, 19.5176328649368145, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 15.4738175463309418, 6.7048820953284167, 2.3017241253250060, 16.8488231409391460, 8.1451343638878004, 1.3329860613026692, 15.1617815457907064, 9.2364182820119609, 0.5653060157856495, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 15.1048778573899778, 6.8789562639828219, 5.6341747880361348, 17.4405790073111326, 8.5887803325724672, 5.0656224514148986, 19.5584809627543308, 6.3620959696350585, 5.9737848264411486, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 16.7616742578590276, 9.1091409880723955, 13.8181567737015936, 17.2554531123664283, 5.5614424623769327, 12.3647076540819523, 17.0440595925778062, 6.6923891261590107, 12.8584660269844413, 17.4211691978690055, 8.2535706371976580, 13.1384170145603569, 18.4677174628455063, 9.8337417748191829, 10.6448216272314760, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 17.6084745813862362, 9.2095845931776505, 18.2292614356700184, 19.4461859188322066, 7.4565290229064454, 16.1343589622077630, 15.2293121128447844, 9.6747272364504653, 19.6192401320742604, 16.8119028801814210, 6.2387523236339151, 17.4756460936936548, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 17.9395494827305022, 12.2002357859779096, 3.9213992629855374, 18.4881491536212970, 10.8275054723195439, 0.5758844333704736, 16.3773459048556447, 11.4291551824532256, 1.1397398543649275, 18.8722992734438755, 10.6838517546845253, 2.2311175329684114, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 16.9404726918758755, 13.6894410585637605, 8.9412444990816748, 19.4016266604370671, 10.7357699795316375, 6.8626450802225243, 18.6169865754826560, 12.2997525302220119, 6.7820553515729740, 16.5843651236635949, 14.9415581456303936, 9.4058031365575836, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 18.9092220899657306, 11.0005041108965997, 11.4947275597623939, 18.6027094791978271, 14.4490607063415428, 10.3820556665622821, 17.6560967341896671, 13.3153618505281344, 12.5826118677754817, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 16.9663567922930554, 13.4129956075376366, 18.6329480185432601, 16.6181860869302014, 10.7002979992475993, 17.1547363818057299, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 15.2670067384965051, 15.9202734415428822, 4.3014938839025252, 17.4789079691882847, 15.0445831266166348, 4.0894919659983850, 19.5739430054198529, 15.3225883868616499, 0.3416005055139921, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 17.9298280465174180, 18.3494948150584243, 9.8596063732403838, 18.8801641172921038, 16.3173040995890837, 7.8060764996903291, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 16.3638701924247130, 15.3678689561585262, 10.9186130083383564, 16.4292940465175157, 18.2268364558343734, 13.2854325259898509, 18.7922884875168954, 15.3117801785685650, 13.3840961105625276, 15.3544044004937597, 18.5586635403954858, 10.3066545099235007, 15.1042757184211922, 15.9093367587460239, 12.1306234441035024, 17.0861248297439587, 15.3168307084181787, 13.5644548880758400, 15.2401191119576485, 15.7377418072453708, 14.6717514898516210, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 19.1816276352674322, 17.6080662724331098, 19.9611911045737074, 18.6528291205650447, 17.4477157472711006, 18.7892375997657339, 17.8522323968585930, 17.8609156579324519, 19.6887716060662541, 15.3468135882317327, 15.0899357092350765, 19.5838416239749478, 17.8249129656457157, 17.6315760440689715, 15.7988066042474369, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000};
+
+const TYPE chk[3*blockSide*blockSide*blockSide*densityFactor] = {0.0008016146700337, -0.0020612837355072, 0.0032332671592132, 0.0009657118885183, -0.0002559778828942, 0.0009366593142218, 0.0015737295206710, 0.0025164681238565, 0.0008421486301414, -0.0007693122326422, 0.0011008966727841, -0.0005170781277456, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0042426913231147, 0.0012573272962747, -0.0043626231122797, -0.0058821718876515, 0.0008912304752724, 0.0007981985366119, 0.0111909952553888, 0.0080859975169486, -0.0082458653141254, -0.0101317804230405, -0.0054681912391431, 0.0087561474785383, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0267580953782801, -0.0181488887985749, -0.0329532343064745, -0.0016756031075928, 0.0039166123027246, -0.0011824246551046, -0.0230819130166738, 0.0187939588481652, 0.0332566784825497, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0428574158153332, 0.0223263953422374, 0.0590668667488971, 0.0000398854878357, 0.0011838433681570, -0.0006169800086439, 0.0001127043722985, 0.0083982902875366, -0.0021869618210129, 0.0004195832617033, -0.0007926583756136, 0.0007043678046081, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0000531463948199, -0.0000361577666351, 0.0002689196974539, -0.1795461267317063, 0.0375728602830572, 0.0655083308093748, 0.0011889498663721, 0.0014161944608434, 0.0039014923008386, 0.0002823102410679, 0.0001176443220691, 0.0003351106123218, 0.0049032503743093, -0.0308778478119831, 0.0226967666615731, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0046891067675452, 0.0515484305928833, -0.0146531343244131, 0.0011094340348861, -0.0027566954001805, -0.0006936610183670, 0.1977004950044021, -0.0426013496792352, -0.0709412061470357, 0.0019703521004494, -0.0037883850192022, 0.0016847318605780, -0.0175135653995458, 0.0055272601833707, 0.0215907283787189, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0001780254997250, -0.0011082841058664, -0.0003915347354026, 0.0269073841382492, 0.0069259798103592, -0.0209249904783105, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0426696651009882, -0.0308877417785578, -0.0572963990182955, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0000939578908079, -0.0014212990787822, 0.0018997455840246, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.1204947814886540, -0.1701542391576167, -0.0111901954757517, 0.0010984229394016, -0.0003851614574388, 0.0004046275052823, 0.0053220051720462, 0.0023165974787598, 0.0003525348081090, -0.0001142149980863, -0.0003022538657350, 0.0016197449466316, -0.0085442651864849, -0.0006223407329152, 0.0048869632129421, -0.0108493802874439, 0.0449461160168093, 0.1051247983437815, 0.1647383818467405, 0.0567185698956202, -0.0688002926185729, 0.0175442416759592, 0.0482792765953833, 0.0032727269937419, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0592909446828081, 0.0635912015305100, 0.0330142881557682, 0.0752894659803055, 0.0080089606378843, -0.0618024734131891, 0.0016486847864912, 0.0019948253560223, 0.0042621957483977, 0.0043808763038075, 0.0015734328866385, -0.0073205984703925, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0879758901997003, 0.0338102764169575, 0.2330680054591917, 0.1106384515496441, -0.0946842935461264, -0.0828600895057100, -0.0011550212865317, 0.0026804885157450, -0.0079561150105339, 0.0607676705350274, 0.0186481935728355, -0.0180659937109340, -0.0446143371395681, 0.0087111628934016, -0.0070781316273632, -0.0020040322853012, 0.0116221257080258, 0.0025764735621329, -0.0735674296370898, 0.0902057776026366, -0.1710455148552032, -0.1372982973773928, -0.0726321709132671, 0.0464146074727411, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0007551946823331, -0.0001872191838872, -0.0000281648205895, 0.0023527587054983, 0.0078764128903397, 0.0012030904619356, -0.0026008656299250, -0.0076633759411431, -0.0011108495708290, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1148276658388596, -0.0556248659511400, 0.0024525295358168, 0.0229591108906597, -0.0205487476934463, -0.0027824868746763, -0.0009258121756698, -0.0013434767559833, 0.0004356374223916, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.3213378722238427, -0.2951157522871649, 0.0410604798590038, 0.0106837086385966, 0.0077372643406002, -0.0093250423278907, -0.3869342633197253, 0.1463278268786601, 0.1615271115152888, 0.0237451600077906, -0.0405812370514187, 0.0014040629574545, -0.0299419056008585, 0.0356088153952852, 0.0113005964034503, 0.0207437622067401, -0.0134754493498122, -0.0068984789793771, 0.0635858482175531, 0.1442037424495205, -0.1956937966636535, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0017515505722391, -0.0003618969810815, -0.0029565738931423, -0.0028482596761533, -0.0256309745472979, -0.0040634856953386, 0.0032053826119937, 0.0011804378473153, -0.0019056056970107, 0.0035200257514817, 0.0243766433773361, -0.0042530831121714, -0.0020091385572978, -0.0002839950378757, 0.0008911620266546, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0101579317927858, 0.0090484453549082, 0.0255602897685860, -0.0062357163576728, -0.0132346823333880, -0.0111300685339492, 0.0154938064070440, 0.0084742369963749, -0.0169370197677059, 0.3493661140241782, -0.0257813489428274, 0.0075948202399911, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0080513591682765, -0.0003435781642636, 0.0067019359555706, 0.0012290776584109, 0.0023492892258333, 0.0000937700734115, 0.0037801818133428, -0.0042678918589221, 0.0037133706020399, 0.0098199001932781, 0.0044194078518575, 0.0026560569388156, -0.0074014114142038, 0.0210629134569731, -0.0050566308889909, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000166229340228, 0.0035032421583956, -0.0748982652139666, 0.0009205757465129, 0.0006734184516102, -0.0019982440541865, -0.0009594017803750, 0.0026662861455810, -0.0002124850243123, 0.0108758069902455, 0.0375330219728405, -0.1139668719610184, 0.0046722878544998, -0.0044297189867139, 0.0740117330777845, -0.0344895103109037, 0.0215150161191926, 0.0767657759161824, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0008515335231784, 0.0011701636800202, -0.0007419048674524, 0.0086878110512158, 0.0107598582023829, -0.0085947205295207, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0413085405522693, 0.0239917433264527, 0.0357156095034951, 0.0419468801179095, -0.0271964840982822, -0.0348503702771976, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0091027449219709, -0.0317133427817201, -0.0218761855187477, -0.0219848272538993, -0.0135416381876195, 0.0837023222438274, -0.0076339017565340, 0.0247951335905305, 0.0297399281276362, -0.0039749705905268, -0.0016243054618179, -0.0879315542861506, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0468807749390627, 0.0410697288044842, -0.0158567546975064, 0.0170610821506539, -0.0760157036622600, 0.0248874397173449, 0.0005195737390543, -0.0003363461286372, -0.0001129064855776, -0.0009566598559609, -0.0006115814988428, -0.0003095436949597, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0005432617272709, 0.0007377543546827, -0.0009600114173474, -0.0081466769590123, -0.0092784136037697, 0.0078372221485811, 0.0002020071726526, -0.0016044685868399, -0.0000521038316568, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0005611030885686, -0.0010279611105609, 0.0015221674934736, -0.0189394175064694, 0.0133827824650017, 0.0172243828395186, -0.0300340773798848, 0.0486031501020633, -0.0043942471178263, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0014911313865790, 0.0003489717135695, -0.0012618288280424, -0.1790075936230213, -0.1994360049256822, 0.5604354493123419, -0.2564299561913451, -0.0941911823691335, -0.1454074789360139, 0.3974594759649666, 0.3075609420163656, -0.4108592085914512, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0389866391704262, 0.0529324449935396, -0.0126086174964111, 0.0116274285483952, -0.0061432435210796, -0.0093443838850450, 0.0279785032945351, -0.0166639858865789, -0.0838961390886420, -0.0685634951780475, -0.0175075570323587, 0.0644985687202421, -0.0091583877443038, 0.0031408034088689, -0.0051159609932893, -0.0175298370518508, 0.0157574469794754, 0.0068385354426639, 0.0454148829607619, -0.0408693593291291, 0.0146825287520033, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0708325938802943, -0.3707171788013304, 0.2090005800749688, 0.0696892393746579, 0.3698360789751528, -0.2096034434623567, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0001162930251807, -0.0003360036982691, 0.0005623751354960, 0.1524579413440236, 0.0912421774528825, 0.2502086720481890, 0.0299155626791728, -0.0481069133729052, 0.0045561206976490, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0033743045768102, 0.0033421831760145, -0.0052365850368850, -0.1148859226862679, 0.0550102086803810, -0.0022080961920992, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0422400120972266, -0.1133330350496087, -0.0620131796721079, -0.0036493280132725, -0.0031626889626801, -0.0029450569944850, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0004540543186728, 0.0003733528790385, -0.0008257874734353, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0016595041936221, 0.0016983856531714, 0.0003337076781276, -0.0032757333275589, 0.0031895317800154, 0.0006904905531620, 0.0423883754323453, 0.2421292062205354, -0.3935963191428360, -0.5460321622971337, 0.0395791595567607, -0.0431009080486237, 0.1622562523053928, -0.4238624044867859, 0.2064102202214718, 0.0190526436223607, 0.2614895906793391, 0.2479145441474787, 0.0010304633448615, 0.0022023377605555, 0.0015826908335284, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0009220899629042, -0.0000393054842927, -0.0020509894522389, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0263955421081405, 0.0258220671095092, 0.0036983252135958, -0.0274446295848477, -0.0251797553959176, -0.0039138280177073, -0.0004239797831378, -0.0000432487126822, 0.0007154761370208, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0000707394350930, 0.0005838843443950, 0.0001996600039543, 0.0114836634631033, -0.0035442215533755, 0.0024129973750894, 0.3298282875913066, 0.4237314613037090, 0.2002182099530759, 0.0405014940378005, -0.0429447239418359, -0.0257148334534142, 0.0002668385666598, 0.0012118563719967, 0.0001378671350596, -0.0322023403663033, 0.0526231753324126, -0.0021433272438742, -0.3494914762831171, -0.4262204526004207, -0.1810705867366519, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0137738694512999, 0.0204146722122910, -0.0261888005344849, -0.0027968662690393, -0.0014301187310803, 0.0057283446923816, 0.0000046939505855, -0.0008150230131906, 0.0005313518104254, -0.0007750389063415, -0.0019741629286755, -0.0052772449852880, -0.0224236849575694, -0.0939017659761533, -0.0224302453181006, 0.0024035593832342, 0.0057557406146801, 0.0011353880204633, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0030337546652350, -0.0130520653047131, 0.0047684090735163, 0.0381003190195692, -0.1759262286434487, -0.2905493215147570, 0.0004449687337694, -0.0001334741736791, -0.0003581775545681, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.1048771325462825, 0.0095426733344107, 0.1157457216411089, 0.0029445438808390, 0.0050882787062597, 0.0098881611590995, -0.0652327713234532, 0.1889620661454769, -0.0910186395503672, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0000156589993671, 0.0002182354431198, -0.0008230343265443, 0.1070678616343370, -0.0111578132921657, -0.1142506850507911, -0.0020142310553977, -0.0079740955357981, -0.0041327471946413, 0.0447325427636785, 0.0197455146618225, -0.0089663365081650, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0053183402577394, 0.0169088226094414, 0.0101800420699541, 0.0001399963570736, 0.0004336611136793, 0.0004805129544838, 0.0449951361848489, -0.0227113686055153, -0.0023325030124900, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0090333426388336, 0.0119807054039994, 0.0822953569498199, -0.0287366263574300, 0.1307941159417806, 0.1889542825079312, 0.0230412756158479, 0.0145538359353853, 0.0190899415850896, -0.0141479652081345, -0.1464109154503823, -0.1995194976832997, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0102822404702486, -0.0486077840122376, -0.0776855865366434, 0.0565731105477124, -0.1340540331248832, 0.1698993458268650, 0.0014906036144699, -0.0066907418100084, 0.0010125853764796, -0.0111657659443726, 0.0116960795325082, 0.0024469247846338, 0.0035046331961354, 0.0047584096205458, 0.0014395179195658, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.1333337525265387, -0.0318600143751384, -0.0154561648192441, -0.0135654016525637, -0.0261459119912975, -0.0137280228917552, 0.1390321513981113, 0.0341663892885011, 0.0188085891949614, -0.0215895340188821, 0.0420157602795929, 0.0225563734878390, 0.0185451314760312, 0.0103607198165909, 0.0218384870782002, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0709365913702072, -0.2380127030729829, 0.0513783405944045, -0.0642002129610421, 0.2198017716955442, -0.0500723124976861, -0.0003255200258128, 0.0018321347868712, -0.0001790717815276, -0.1471370542789476, -0.0952357140679121, -0.2588070402788974, -0.0037589488125727, 0.0021388025933205, 0.0088674940206693, -0.0012651123576027, -0.0012782101646254, 0.0015271223991517, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0028803058878676, -0.0039602692972474, 0.0039667288250546, 0.0055566496531415, 0.0019932761943058, -0.0055053446107937, 0.0001938525128812, -0.0002094671793510, 0.0004127628287690, 0.0143656246591519, -0.0031246866903968, 0.0082793443344567, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0040204515701607, -0.0018868910389561, -0.0005264436789894, 0.0013527643125421, -0.0005780921235166, 0.0000875929760601, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0009156847433242, -0.0068270787029342, 0.0051061542751151, -0.0002872508884305, -0.0154502241648810, 0.0141659021359401, -0.0000367961284332, -0.0006445832028076, 0.0003954191602603, 0.0013512133554388, 0.0008654505467664, -0.0070301963569058, 0.0378613025502546, -0.0148571558579193, -0.0182629679998363, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0171244948612434, 0.0278944340865733, -0.0633672287989910, -0.0011432465437173, -0.0002157903106158, 0.0014015262889581, 0.0156575607406717, -0.0249594192597853, 0.0653680569099316, -0.0035054207309154, -0.0026479735917827, 0.0014153119720327, -0.0004194101643891, -0.0000810910031136, 0.0002996744769866, 0.0029728614510050, 0.0052680374681129, 0.0108577060011738, 0.0006758974522929, -0.0049810999334929, -0.0088485988779339, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0005923661813341, 0.0084201459600550, -0.0043303661178495, 0.0472616256003619, -0.0094154067206348, 0.0015570519479162, -0.1714846384530933, -0.0152660074814996, 0.0915073959805966, -0.0297488200356278, 0.0219017430892599, 0.0263238444988996, 0.0235685269465409, -0.0478839712717235, -0.0046819911737951, 0.1302404241601678, 0.0451081961486606, -0.1163690382367431, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0009990333512011, 0.0003500277525316, 0.0002626015903429, 0.0055026040441423, -0.0013416482415214, -0.0003052488806474, 0.0775606548299859, 0.0143383468133951, -0.2606498232111347, -0.0795304062057260, -0.0104297574743495, 0.2619565202015096, -0.0026784679118908, -0.0003343218737249, 0.0019249205497706, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0022007154156997, 0.0011547181552869, -0.0007508847071831, -0.0038153104464105, 0.0004607425782580, -0.0032919064581829, 0.0022458514859954, 0.0000106738005259, 0.0004349774033362, -0.0001276167746256, -0.0004153605966995, -0.0010341132271985, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0038045507526040, 0.0040420209778283, -0.0030081453257749, -0.0123225758015090, 0.0013871430031204, 0.0005121874913231, 0.0032943861089370, 0.0189884529862400, 0.0216843555331750, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0412132936337798, 0.1838391598110417, 0.2801473298145968, -0.0024633393703112, -0.0003908592556341, 0.0005264167627606, -0.0006065223355158, 0.0002107483488243, -0.0001213691374696, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.1526478708999199, -0.2024655516872423, -0.1626730940395208, -0.0563251141650802, 0.3023964899561370, 0.1331800396132101, 0.0702315034013259, -0.2394975183705634, -0.1196443548919606, -0.1703839548416286, 0.1403023578679205, 0.1473964695666927, 0.0299221887944748, 0.0807791581558369, 0.0598083130366062, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0067948015413230, 0.0076256991001257, -0.0057136534343011, -0.0012798176769765, -0.0007896616762824, 0.0002466612245451, -0.0483896719821349, -0.0027594017230452, -0.0015618822994514, -0.0040728919857370, -0.0001881422519999, -0.0033935974677219, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0009998642127137, -0.0015084513746965, -0.0019097915646343, 0.0036296151030395, -0.0026032460755202, 0.0469470829951975, -0.0455790357408855, -0.0259067532673741, 0.0120243717627473, -0.0136255267251922, 0.0061642867965609, -0.0427878615799737, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0440780709289049, 0.1709182375221937, 0.0669723202167151, -0.0177194647725344, 0.0342461578756077, -0.0020350359261940, 0.0164086448057910, -0.0339089889391380, 0.0013705842480099, 0.0375707522820355, -0.1460660596172995, 0.0135139818818003, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0318001680094672, -0.0800348992715833, -0.0584335655513780, -0.0131825715285276, 0.0003118724494567, -0.0028722713362092, 0.0006940454413882, 0.0090158249685174, 0.0005071067797072, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0046046901218460, 0.0023350145652545, 0.0002808483804970, 0.0047885138520584, -0.0079744905705208, 0.0068080601719305, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0128518108626240, -0.0026518038091979, -0.0062140673981869, -0.0051913790796481, 0.0001162968587750, 0.0001675473330337, -0.0000970258212066, -0.0001038533932548, 0.0001154359896710, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0024794823930704, -0.0011210079880082, 0.0001861868418523, -0.0012259091325350, -0.0005167514660963, 0.0015060428963622, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0122187230601565, -0.0125727673551077, -0.0567387323088952, -0.0044911171921989, -0.0019018120712079, -0.0010013103709688, -0.0468430225349176, -0.0029127807530683, 0.0026060259246207, 0.0009968074534412, -0.0023467310315809, 0.0015418563325374, 0.0216082132405872, -0.0082000934629875, -0.0196998056266698, 0.0355174529973460, -0.0017494825368486, -0.0065320193204915, 0.0024090563061103, -0.0043557898172702, -0.0034551653197571, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.2919863255898946, 0.0001722670713344, -0.2852506531745930, -0.0795148800700761, 0.1325206293878184, 0.4623270632459219, 0.3705872270252406, -0.1330791720914045, -0.1781596204320695, -0.0150327506791896, -0.0136009752443854, -0.0267669782412858, -0.0008529956979031, -0.0006639698036322, -0.0006456426532591, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000};
+#else
+const TYPE chk[3*blockSide*blockSide*blockSide*densityFactor] = {0.0240073102331004, 0.0240073102331004, 0.0240073102331004, 0.0000131130651293, 0.0000131130651293, 0.0000131130651293, 0.0000131130651293, 0.0000131130651293, 0.0000131130651293, -0.0239926900260237, -0.0239926900260237, -0.0239926900260237, 0.0239945146566700, 0.0239945146566700, 0.0239945146566700, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, -0.0239945111493718, -0.0239945111493718, -0.0239945111493718, 0.0239945146566700, 0.0239945146566700, 0.0239945146566700, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, 0.0000000027069351, -0.0239945111493718, -0.0239945111493718, -0.0239945111493718, 0.0239926915441751, 0.0239926915441751, 0.0239926915441751, -0.0000131100615258, -0.0000131100615258, -0.0000131100615258, -0.0000131100615258, -0.0000131100615258, -0.0000131100615258, -0.0240073078553028, -0.0240073078553028, -0.0240073078553028, 0.0240073080404576, 0.0240073080404576, 0.0240073080404576, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, -0.0239926912607669, -0.0239926912607669, -0.0239926912607669, 0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0239945124171142, -0.0239945124171142, -0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0239945124171142, -0.0239945124171142, -0.0239945124171142, 0.0239926912607669, 0.0239926912607669, 0.0239926912607669, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0240073080404576, -0.0240073080404576, -0.0240073080404576, 0.0240073080404576, 0.0240073080404576, 0.0240073080404576, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, 0.0000131104188164, -0.0239926912607669, -0.0239926912607669, -0.0239926912607669, 0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0239945124171142, -0.0239945124171142, -0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0239945124171142, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0239945124171142, -0.0239945124171142, -0.0239945124171142, 0.0239926912607669, 0.0239926912607669, 0.0239926912607669, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0000131104188164, -0.0240073080404576, -0.0240073080404576, -0.0240073080404576, 0.0240073078553028, 0.0240073078553028, 0.0240073078553028, 0.0000131100615258, 0.0000131100615258, 0.0000131100615258, 0.0000131100615258, 0.0000131100615258, 0.0000131100615258, -0.0239926915441751, -0.0239926915441751, -0.0239926915441751, 0.0239945111493718, 0.0239945111493718, 0.0239945111493718, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0239945146566700, -0.0239945146566700, -0.0239945146566700, 0.0239945111493718, 0.0239945111493718, 0.0239945111493718, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0000000027069351, -0.0239945146566700, -0.0239945146566700, -0.0239945146566700, 0.0239926900260237, 0.0239926900260237, 0.0239926900260237, -0.0000131130651293, -0.0000131130651293, -0.0000131130651293, -0.0000131130651293, -0.0000131130651293, -0.0000131130651293, -0.0240073102331004, -0.0240073102331004, -0.0240073102331004};
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/data.h gem5-SALAM/benchmarks/sys_validation/md_grid/sw/data.h
--- gem5/benchmarks/sys_validation/md_grid/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/data.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,5 @@
+#include "../defines.h"
+
+extern const int n_p[blockSide*blockSide*blockSide];
+extern const TYPE pos[3*blockSide*blockSide*blockSide*densityFactor];
+extern const TYPE chk[3*blockSide*blockSide*blockSide*densityFactor];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/defines.h gem5-SALAM/benchmarks/sys_validation/md_grid/sw/defines.h
--- gem5/benchmarks/sys_validation/md_grid/sw/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/defines.h	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+#include "../defines.h"
+
+volatile int stage;
+
+void runCPUBench( int n_points[blockSide][blockSide][blockSide],
+         dvector_t force[blockSide][blockSide][blockSide][densityFactor],
+         dvector_t position[blockSide][blockSide][blockSide][densityFactor] );
+
+int checkResults(dvector_t force[blockSide][blockSide][blockSide][densityFactor],
+                  dvector_t check[blockSide][blockSide][blockSide][densityFactor]);
+
+void makeCheck(void * npoints, void * force, void * position);
+int runCheck(void * force, void * check);
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/md_grid/sw/.gitignore
--- gem5/benchmarks/sys_validation/md_grid/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/isr.c gem5-SALAM/benchmarks/sys_validation/md_grid/sw/isr.c
--- gem5/benchmarks/sys_validation/md_grid/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/isr.c	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "defines.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/md_grid/sw/main.cpp
--- gem5/benchmarks/sys_validation/md_grid/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/main.cpp	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,67 @@
+#include <cstdio>
+#include <cstring>
+
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+#define BASE            0x80c00000
+
+#define NP_OFFSET       0
+#define FRC_OFFSET      (NP_OFFSET  + sizeof(int32_t)*blockSide*blockSide*blockSide)
+#define POS_OFFSET      (FRC_OFFSET + sizeof(dvector_t)*(blockSide*blockSide*blockSide*densityFactor))
+#define CHK_OFFSET      (POS_OFFSET + sizeof(dvector_t)*(blockSide*blockSide*blockSide*densityFactor))
+
+md_struct mds;
+
+volatile uint8_t  * top   = (uint8_t  *)(TOP + 0x00);
+volatile uint32_t * val_a = (uint32_t *)(TOP + 0x01);
+volatile uint32_t * val_b = (uint32_t *)(TOP + 0x09);
+volatile uint32_t * val_c = (uint32_t *)(TOP + 0x11);
+
+int main(void) {
+	int32_t *n_points    = (int32_t *)(BASE+NP_OFFSET);
+	TYPE *force          = (TYPE    *)(BASE+FRC_OFFSET);
+	TYPE *position       = (TYPE    *)(BASE+POS_OFFSET);
+	TYPE *check          = (TYPE    *)(BASE+CHK_OFFSET);
+    int i, j, k, d;
+    volatile int count = 0;
+	stage = 0;
+
+    mds.n_points = n_points;
+    mds.force = force;
+    mds.position = position;
+    mds.check = check;
+
+    printf("Generating data\n");
+    genData(&mds);
+    printf("Data generated\n");
+
+    *val_a = (uint32_t)(void *)n_points;
+    *val_b = (uint32_t)(void *)force;
+    *val_c = (uint32_t)(void *)position;
+    // printf("%d\n", *top);
+    *top = 0x01;
+    while (*top != 0x04) count++;
+
+    printf("Job complete\n");
+#ifdef CHECK
+	if(!checkData(&mds)) {
+	    for(i = 0; i < blockSide3*densityFactor; i++) {
+	        int dind = i % densityFactor;
+	        int kind = (i - dind) / densityFactor % blockSide;
+	        int jind = (i - dind - densityFactor * kind) / densityFactor / blockSide % blockSide;
+	        int iind = (i - dind - densityFactor * kind - densityFactor * blockSide * jind) / densityFactor / blockSide / blockSide;
+            printf("f[%d][%d][%d][%d]\n", iind, jind, kind, dind);
+            printf("xe:%.10f\n", force[3*i]);
+            printf("xc:%.10f\n", check[3*i]);
+            printf("ye:%.10f\n", force[3*i+1]);
+            printf("yc:%.10f\n", check[3*i+1]);
+            printf("ze:%.10f\n", force[3*i+2]);
+            printf("zc:%.10f\n", check[3*i+2]);
+            printf("\n");
+	    }
+	}
+#endif
+	m5_dump_stats();
+	m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_grid/sw/Makefile gem5-SALAM/benchmarks/sys_validation/md_grid/sw/Makefile
--- gem5/benchmarks/sys_validation/md_grid/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_grid/sw/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,46 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+all: clean main.elf
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/md_knn/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/md_knn/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/configs/quick_config.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/config.yml gem5-SALAM/benchmarks/sys_validation/md_knn/config.yml
--- gem5/benchmarks/sys_validation/md_knn/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/config.yml	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,303 @@
+---
+acc_cluster:
+  - Name: mdknn_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 57
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: md_knn
+      IrPath: hw/md_knn.ll
+      Debug: True
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: FORCEXADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: FORCEYADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: FORCEZADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: POSITIONXADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: POSITIONYADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: POSITIONZADDR
+        Type: SPM
+        Size: 2048
+        Ports: 1
+      - Name: NLADDR
+        Type: SPM
+        Size: 16384
+        Ports: 1
+hw_config:
+  top:
+  md_knn:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/defines.h gem5-SALAM/benchmarks/sys_validation/md_knn/defines.h
--- gem5/benchmarks/sys_validation/md_knn/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/defines.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,25 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "mdknn_clstr_hw_defines.h"
+
+#define CHECK
+
+#define TYPE double
+// Problem Constants
+#define nAtoms        256
+#define maxNeighbors  16
+// LJ coefficients
+#define lj1           1.5
+#define lj2           2.0
+
+#define DEV_INIT      0x01
+#define DEV_INTR      0x04
+
+#define ARRAY_SIZE    nAtoms * sizeof(TYPE)
+#define NL_SIZE       nAtoms * maxNeighbors * sizeof(int32_t)
+
+#endif
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/.gitignore gem5-SALAM/benchmarks/sys_validation/md_knn/.gitignore
--- gem5/benchmarks/sys_validation/md_knn/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/.gitignore	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/md_knn/hw/.gitignore
--- gem5/benchmarks/sys_validation/md_knn/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/hw/.gitignore	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/hw/Makefile gem5-SALAM/benchmarks/sys_validation/md_knn/hw/Makefile
--- gem5/benchmarks/sys_validation/md_knn/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/hw/Makefile	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,6 @@
+KERN=md_knn.c top.c
+build: $(FILES)
+	clang -O1 -S -target armv7-pc-none-eabi -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/hw/md_knn.c gem5-SALAM/benchmarks/sys_validation/md_knn/hw/md_knn.c
--- gem5/benchmarks/sys_validation/md_knn/hw/md_knn.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/hw/md_knn.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,68 @@
+/*
+Implemenataion based on:
+A. Danalis, G. Marin, C. McCurdy, J. S. Meredith, P. C. Roth, K. Spafford, V. Tipparaju, and J. S. Vetter.
+The scalable heterogeneous computing (shoc) benchmark suite.
+In Proceedings of the 3rd Workshop on General-Purpose Computation on Graphics Processing Units, 2010.
+*/
+
+#include "../defines.h"
+
+void md_kernel() {
+
+    uint8_t * force_x_base    = (uint8_t *)FORCEXADDR;
+    uint8_t * force_y_base    = (uint8_t *)FORCEYADDR;
+    uint8_t * force_z_base    = (uint8_t *)FORCEZADDR;
+    uint8_t * position_x_base = (uint8_t *)POSITIONXADDR;
+    uint8_t * position_y_base = (uint8_t *)POSITIONYADDR;
+    uint8_t * position_z_base = (uint8_t *)POSITIONZADDR;
+    uint8_t * nl_base         = (uint8_t *)NLADDR;
+    TYPE    * force_x         = (TYPE    *)force_x_base;
+    TYPE    * force_y         = (TYPE    *)force_y_base;
+    TYPE    * force_z         = (TYPE    *)force_z_base;
+    TYPE    * position_x      = (TYPE    *)position_x_base;
+    TYPE    * position_y      = (TYPE    *)position_y_base;
+    TYPE    * position_z      = (TYPE    *)position_z_base;
+    int32_t * NL              = (int32_t *)nl_base;
+
+    TYPE delx, dely, delz, r2inv;
+    TYPE r6inv, potential, force, j_x, j_y, j_z;
+    TYPE i_x, i_y, i_z, fx, fy, fz;
+    int32_t i, j, jidx;
+
+    loop_i :
+    for (i = 0; i < nAtoms; i++) {
+        i_x = position_x[i];
+        i_y = position_y[i];
+        i_z = position_z[i];
+        fx = 0;
+        fy = 0;
+        fz = 0;
+
+        loop_j :
+        for( j = 0; j < maxNeighbors; j++) {
+            // Get neighbor
+            jidx = NL[i*maxNeighbors + j];
+            // Look up x,y,z positions
+            j_x = position_x[jidx];
+            j_y = position_y[jidx];
+            j_z = position_z[jidx];
+            // Calc distance
+            delx = i_x - j_x;
+            dely = i_y - j_y;
+            delz = i_z - j_z;
+            r2inv = 1.0/( delx*delx + dely*dely + delz*delz );
+            // Assume no cutoff and aways account for all nodes in area
+            r6inv = r2inv * r2inv * r2inv;
+            potential = r6inv*(lj1*r6inv - lj2);
+            // Sum changes in force
+            force = r2inv*potential;
+            fx += delx * force;
+            fy += dely * force;
+            fz += delz * force;
+        }
+        //Update forces after all neighbors accounted for.
+        force_x[i] = fx;
+        force_y[i] = fy;
+        force_z[i] = fz;
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/hw/support.h gem5-SALAM/benchmarks/sys_validation/md_knn/hw/support.h
--- gem5/benchmarks/sys_validation/md_knn/hw/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/hw/support.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,135 @@
+#include <stdlib.h>
+#include <inttypes.h>
+
+///// File and section functions
+char *readfile(int fd);
+char *find_section_start(char *s, int n);
+
+///// Array read functions
+#define SECTION_TERMINATED -1
+int parse_string(char *s, char *arr, int n); // n==-1 : %%-terminated
+int parse_uint8_t_array(char *s, uint8_t *arr, int n);
+int parse_uint16_t_array(char *s, uint16_t *arr, int n);
+int parse_uint32_t_array(char *s, uint32_t *arr, int n);
+int parse_uint64_t_array(char *s, uint64_t *arr, int n);
+int parse_int8_t_array(char *s, int8_t *arr, int n);
+int parse_int16_t_array(char *s, int16_t *arr, int n);
+int parse_int32_t_array(char *s, int32_t *arr, int n);
+int parse_int64_t_array(char *s, int64_t *arr, int n);
+int parse_float_array(char *s, float *arr, int n);
+int parse_double_array(char *s, double *arr, int n);
+
+///// Array write functions
+int write_string(int fd, char *arr, int n);
+int write_uint8_t_array(int fd, uint8_t *arr, int n);
+int write_uint16_t_array(int fd, uint16_t *arr, int n);
+int write_uint32_t_array(int fd, uint32_t *arr, int n);
+int write_uint64_t_array(int fd, uint64_t *arr, int n);
+int write_int8_t_array(int fd, int8_t *arr, int n);
+int write_int16_t_array(int fd, int16_t *arr, int n);
+int write_int32_t_array(int fd, int32_t *arr, int n);
+int write_int64_t_array(int fd, int64_t *arr, int n);
+int write_float_array(int fd, float *arr, int n);
+int write_double_array(int fd, double *arr, int n);
+
+int write_section_header(int fd);
+
+///// Per-benchmark files
+void run_benchmark( void *vargs );
+void input_to_data(int fd, void *vdata);
+void data_to_input(int fd, void *vdata);
+void output_to_data(int fd, void *vdata);
+void data_to_output(int fd, void *vdata);
+int check_data(void *vdata, void *vref);
+
+extern int INPUT_SIZE;
+
+///// TYPE macros
+// Macro trick to automatically expand TYPE into the appropriate function
+// (S)et (T)ype (A)nd (C)oncatenate
+#define __STAC_EXPANDED(f_pfx,t,f_sfx) f_pfx##t##f_sfx
+#define STAC(f_pfx,t,f_sfx) __STAC_EXPANDED(f_pfx,t,f_sfx)
+// Invoke like this:
+//   #define TYPE int32_t
+//   STAC(write_,TYPE,_array)(fd, array, n);
+// where array is of type (TYPE *)
+// This translates to:
+//   write_int32_t_array(fd, array, n);
+
+
+/**** PRNG library. Available at https://github.com/rdadolf/prng. *****/
+#ifndef __PRNG_H__
+#define __PRNG_H__
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#define LAG1 (UINT16_C(24))
+#define LAG2 (UINT16_C(55))
+#define RAND_SSIZE ((UINT16_C(1))<<6)
+#define RAND_SMASK (RAND_SSIZE-1)
+#define RAND_EXHAUST_LIMIT LAG2
+// 10x is a heuristic, it just needs to be large enough to remove correlation
+#define RAND_REFILL_COUNT ((LAG2*10)-RAND_EXHAUST_LIMIT)
+struct prng_rand_t {
+  uint64_t s[RAND_SSIZE]; // Lags
+  uint_fast16_t i; // Location of the current lag
+  uint_fast16_t c; // Exhaustion count
+};
+
+#define PRNG_RAND_MAX UINT64_MAX
+
+
+static inline uint64_t prng_rand(struct prng_rand_t *state) {
+  uint_fast16_t i;
+  uint_fast16_t r, new_rands=0;
+
+  if( !state->c ) { // Randomness exhausted, run forward to refill
+    new_rands += RAND_REFILL_COUNT+1;
+    state->c = RAND_EXHAUST_LIMIT-1;
+  } else {
+    new_rands = 1;
+    state->c--;
+  }
+
+  for( r=0; r<new_rands; r++ ) {
+    i = state->i;
+    state->s[i&RAND_SMASK] = state->s[(i+RAND_SSIZE-LAG1)&RAND_SMASK]
+                              + state->s[(i+RAND_SSIZE-LAG2)&RAND_SMASK];
+    state->i++;
+  }
+  return state->s[i&RAND_SMASK];
+}
+
+static inline void prng_srand(uint64_t seed, struct prng_rand_t *state) {
+  uint_fast16_t i;
+  // Naive seed
+  state->c = RAND_EXHAUST_LIMIT;
+  state->i = 0;
+
+  state->s[0] = seed;
+  for(i=1; i<RAND_SSIZE; i++) {
+    // Arbitrary magic, mostly to eliminate the effect of low-value seeds.
+    // Probably could be better, but the run-up obviates any real need to.
+    state->s[i] = i*(UINT64_C(2147483647)) + seed;
+  }
+
+  // Run forward 10,000 numbers
+  for(i=0; i<10000; i++) {
+    prng_rand(state);
+  }
+}
+
+// Clean up our macros
+#undef LAG1
+#undef LAG2
+#undef RAND_SSIZE
+#undef RAND_SMASK
+#undef RAND_EXHAUST_LIMIT
+#undef RAND_REFILL_COUNT
+
+// PRNG_RAND_MAX is exported
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/hw/top.c gem5-SALAM/benchmarks/sys_validation/md_knn/hw/top.c
--- gem5/benchmarks/sys_validation/md_knn/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/hw/top.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,82 @@
+#include "../defines.h"
+
+void top(uint64_t force_x_addr,
+		 uint64_t force_y_addr,
+		 uint64_t force_z_addr,
+		 uint64_t position_x_addr,
+		 uint64_t position_y_addr,
+		 uint64_t position_z_addr,
+		 uint64_t nl_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * MDFlags    = (uint8_t *)MD_KNN;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer Position X
+	*DmaRdAddr  = position_x_addr;
+	*DmaWrAddr  = POSITIONXADDR;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	//Transfer Position Y
+	*DmaRdAddr  = position_y_addr;
+	*DmaWrAddr  = POSITIONYADDR;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	//Transfer Position Z
+	*DmaRdAddr  = position_z_addr;
+	*DmaWrAddr  = POSITIONZADDR;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	//Transfer NL
+	*DmaRdAddr  = nl_addr;
+	*DmaWrAddr  = NLADDR;
+	*DmaCopyLen = NL_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+
+	//Start the accelerated function
+	*MDFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*MDFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Force X
+	*DmaRdAddr  = FORCEXADDR;
+	*DmaWrAddr  = force_x_addr;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	//Transfer Force Y
+	*DmaRdAddr  = FORCEYADDR;
+	*DmaWrAddr  = force_y_addr;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	//Transfer Force Z
+	*DmaRdAddr  = FORCEZADDR;
+	*DmaWrAddr  = force_z_addr;
+	*DmaCopyLen = ARRAY_SIZE;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	*DmaFlags = 0x00;
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/Makefile gem5-SALAM/benchmarks/sys_validation/md_knn/Makefile
--- gem5/benchmarks/sys_validation/md_knn/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/Makefile	2024-02-22 18:17:14.832943075 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/mdknn_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/md_knn/mdknn_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/md_knn/mdknn_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/mdknn_clstr_hw_defines.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,19 @@
+//BEGIN GENERATED CODE
+//Cluster: MDKNN_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: MD_KNN
+#define MD_KNN 0x10020080
+#define FORCEXADDR 0x100200c0
+#define FORCEYADDR 0x10020900
+#define FORCEZADDR 0x10021140
+#define POSITIONXADDR 0x10021980
+#define POSITIONYADDR 0x100221c0
+#define POSITIONZADDR 0x10022a00
+#define NLADDR 0x10023240
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/bench.h gem5-SALAM/benchmarks/sys_validation/md_knn/sw/bench.h
--- gem5/benchmarks/sys_validation/md_knn/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/bench.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,34 @@
+#include "../defines.h"
+#include "data.h"
+
+#define EPSILON 1.0e-2
+
+volatile int stage;
+
+typedef struct {
+    TYPE * force_x;
+    TYPE * force_y;
+    TYPE * force_z;
+    TYPE * position_x;
+    TYPE * position_y;
+    TYPE * position_z;
+    int32_t * NL;
+    TYPE * check_x;
+    TYPE * check_y;
+    TYPE * check_z;
+} md_struct;
+
+void genData(md_struct * mds) {
+    int i;
+    for(i = 0; i < nAtoms; i++) {
+        mds->check_x[i]     = c_x[i];
+        mds->check_y[i]     = c_y[i];
+        mds->check_z[i]     = c_z[i];
+        mds->position_x[i]  = p_x[i];
+        mds->position_y[i]  = p_y[i];
+        mds->position_z[i]  = p_z[i];
+    }
+    for(i = 0; i < nAtoms*maxNeighbors; i++) {
+        mds->NL[i] = n_l[i];
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/md_knn/sw/boot.ld
--- gem5/benchmarks/sys_validation/md_knn/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/boot.ld	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/boot.s gem5-SALAM/benchmarks/sys_validation/md_knn/sw/boot.s
--- gem5/benchmarks/sys_validation/md_knn/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/boot.s	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/data.c gem5-SALAM/benchmarks/sys_validation/md_knn/sw/data.c
--- gem5/benchmarks/sys_validation/md_knn/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/data.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,19 @@
+#include "data.h"
+
+#ifndef TEST
+const TYPE p_x[nAtoms] = {16.9663567922930554, 16.5198313181023195, 6.4862521901726744, 1.1261290806846831, 4.9304158903095656, 4.1877754014200370, 17.2769465297835758, 13.4839625274226194, 3.5962505548817258, 4.0229751789818655, 16.6181860869302014, 14.2477691876824526, 16.9809487421796987, 15.4738175463309418, 15.1048778573899778, 4.3259530790379968, 14.5360080910664777, 3.6751776717378926, 0.7918941140052675, 1.5637551126073275, 19.0421644512576478, 4.2264270650987248, 2.7221948728308938, 17.6084745813862362, 11.5392731253040548, 3.7449920941085066, 0.5593388063665081, 5.1749024607328264, 15.2670067384965051, 8.8344254870351335, 14.3228577296588071, 14.5401586039839792, 16.9404726918758755, 14.7916515469382421, 0.2553043509206231, 7.7791093202866755, 1.8529174511434725, 10.9764995567023966, 0.9776458988602766, 14.7601184000568590, 5.7463335278029710, 0.6901526125666906, 19.1816276352674322, 2.6225036447865557, 14.0876307378348837, 1.2703310110536179, 18.9092220899657306, 5.9217002569171031, 11.5274909098487583, 2.7667405433321446, 10.4125609669545192, 5.7179651739954398, 0.9264966192175300, 0.4078369905844157, 8.5627094608835197, 0.1878695309954036, 8.7470311216293606, 16.3638701924247130, 1.5337977621823875, 9.5778498699964629, 11.6812259245979515, 1.6534266893003142, 1.2420326806515858, 14.9621808235400202, 7.0609216245451680, 2.7868502187317352, 16.6878337834015902, 1.7365790812460604, 6.7124574349141106, 13.1989856058542436, 14.4566073800425841, 1.5683180324406867, 18.6528291205650447, 6.8847748576589751, 7.4655764254754544, 11.4428012989220580, 1.0222004863811358, 11.5697577060044843, 19.4461859188322066, 6.6489605584185973, 16.4292940465175157, 0.2671174645220583, 18.7922884875168954, 16.7616742578590276, 0.3080346042757222, 15.3544044004937597, 17.8522323968585930, 12.0375810304219222, 2.3433250384127384, 6.7851818082497601, 19.4016266604370671, 12.9129937211481938, 17.2554531123664283, 18.6169865754826560, 7.0635873061829768, 2.7753360501552873, 7.2980496507174255, 7.5209263497753573, 6.3481514363787506, 18.6654576486595296, 11.6978875453659832, 17.3880397283452091, 5.5222248313463975, 18.8600412489591598, 15.2293121128447844, 9.3434185430869618, 15.1042757184211922, 4.8773099951981260, 12.5501229208306757, 19.9154683253095435, 8.4629229031582209, 7.2893377266753587, 13.5593710328534520, 13.8608233334647952, 5.8797088939011255, 12.8839793112894601, 17.4405790073111326, 17.9395494827305022, 18.6027094791978271, 2.5361799008322228, 3.4171375951674676, 4.5097723740932185, 19.7833670117321923, 13.8218679106338183, 1.5366177225833804, 13.4861217909613345, 10.6721420669764644, 11.2137213596890000, 10.3072118232742849, 4.6449048171026357, 19.2690458797141737, 5.7260535593592010, 12.6059390612419442, 7.4437057468512062, 5.6869086257068098, 9.8137657385082306, 11.5155844463164172, 0.0829396211166469, 10.2251848487736119, 18.1942458367322217, 10.3719449281605076, 0.1127406837012356, 17.0440595925778062, 12.7208676027301557, 7.6183972435207252, 4.5572540788124876, 13.5815447984483324, 14.1730728863995292, 11.5069303326321979, 13.2252843493755616, 17.9298280465174180, 19.5584809627543308, 5.1435245717979949, 14.9364341531333107, 14.8851141981239028, 1.4978908165810179, 16.5843651236635949, 6.3220404025344026, 10.3854872472542592, 14.2605567530194026, 17.4789079691882847, 15.3468135882317327, 13.7989724102711797, 10.9439629278922013, 4.1428606667917336, 3.4519282140092651, 12.1627344326544709, 6.6217636841554288, 19.5739430054198529, 18.4881491536212970, 9.7656001860256918, 3.4972423917441855, 8.3680886517792246, 3.5361049273414475, 19.5209822704437599, 11.1227406322977824, 6.8807521681509005, 9.2086966788557518, 3.4308417925440269, 2.5039008240633098, 16.1797254569442579, 9.2503949873418794, 10.4225409750898521, 13.6667367580294439, 10.5638623996769727, 10.8243687968498481, 17.8249129656457157, 12.1496478040613365, 9.4177137526614665, 5.4550046025929149, 0.3318993707057750, 10.2969726760120217, 16.9573422980719606, 8.1464042436039126, 5.3422898020468619, 1.9227078446526487, 3.2022358476300394, 5.7624040984725564, 9.7272892059598330, 1.2970522785044105, 14.5484423416647264, 17.6794552597908954, 17.4211691978690055, 2.6044662735519992, 17.0861248297439587, 1.3829487716820774, 8.9909692671351333, 14.7730047964071467, 12.9565675623052972, 2.1591586300607557, 2.4370867633551181, 1.0557598401670412, 12.1121498405229744, 1.6494969174818297, 15.2401191119576485, 6.1742489453149219, 16.4086936578005584, 16.8119028801814210, 16.3773459048556447, 6.3275803150554522, 3.9240030976350608, 19.8948537551397315, 10.1004498451458762, 4.4876884404153135, 13.9758108225928357, 14.2224777464941372, 7.4437431561227392, 13.0456258591763881, 14.2145433936236838, 18.9261623409457087, 19.2419706461741100, 0.3172371695158291, 18.4677174628455063, 8.4064449031482127, 16.8488231409391460, 18.8722992734438755, 9.8537894591522797, 1.2832201236236951, 10.3510742900227761, 2.3181468909521010, 14.5139698549894405, 5.0908951354312872, 2.8718852839138940, 5.3594363124954834, 13.5429160724491666, 16.8779968223881518, 2.3712945210345331, 18.8801641172921038, 17.6560967341896671, 19.4159240478823349, 5.4770386780298388, 9.1806026935048806, 10.0147557338273447, 15.1617815457907064, 10.4134292474183034, 12.7174081929337248};
+
+const TYPE p_y[nAtoms] = {13.4129956075376366, 1.4982821984794936, 8.0848649866930344, 4.0064400264387299, 13.4563646124520311, 7.6677513496295822, 0.1378071377482869, 0.5273664154940431, 13.2311276784010641, 19.5643071810518308, 10.7002979992475993, 19.0874965754834740, 2.1151995255310747, 6.7048820953284167, 6.8789562639828219, 9.7047200057221819, 10.4112386778402453, 4.2081589767125083, 18.6604411677948043, 5.9535166740117766, 0.1110865138833930, 14.7173024017426926, 4.9782526344434004, 9.2095845931776505, 4.2443943700567752, 17.5353751653850658, 0.0234795394354381, 3.7323911848335052, 15.9202734415428822, 2.6792826006163977, 9.6416548484039133, 10.0038647839579440, 13.6894410585637605, 14.2816237882065309, 14.7800235438963625, 19.9177900760695721, 5.5891226245930596, 7.4727256773459869, 6.5318435363237963, 9.2063618136850334, 0.2806037350274115, 11.7003937920188470, 17.6080662724331098, 12.1362722815472051, 18.9356998231911469, 13.1509451291781403, 11.0005041108965997, 4.3898395672452963, 6.6373588103732137, 17.8220214373726833, 0.0164184716350660, 7.6246036274673203, 11.0729238079614696, 9.9469883910035293, 7.1745844777056833, 1.6092908148972949, 10.1080840549846833, 15.3678689561585262, 19.9680230373665921, 2.2143334425431953, 13.9160635076280741, 9.6760033547368458, 8.6648391054270792, 7.5522377758777850, 2.5762229587422998, 4.1289182455944600, 4.3237725552212183, 5.4623403845198393, 13.6687817933165245, 0.8713628098373043, 17.7034428446484604, 19.2313884765320040, 17.4477157472711006, 3.5295547530952605, 13.7317389666066525, 2.2406187398069779, 14.3505186400425799, 2.6993094378198168, 7.4565290229064454, 9.3149075041507299, 18.2268364558343734, 5.8499163600439203, 15.3117801785685650, 9.1091409880723955, 16.9582495526544115, 18.5586635403954858, 17.8609156579324519, 16.4706020687049275, 11.9248970153847882, 3.4056039389322494, 10.7357699795316375, 5.9893229570148341, 5.5614424623769327, 12.2997525302220119, 12.7744435499558833, 11.8529377968924887, 5.8776955217970546, 11.4500722602451859, 13.2783180756681674, 0.6908553508798563, 3.3244794214474496, 4.3827298640398640, 14.5427274692486712, 2.8805013855540791, 9.6747272364504653, 18.6960660426856116, 15.9093367587460239, 11.0067007962678982, 13.5544125333464613, 2.4926257764192314, 2.5608079408240010, 4.6758443638120806, 3.7374174986297151, 12.3540202008306981, 11.2168477650019547, 3.6201424229546681, 8.5887803325724672, 12.2002357859779096, 14.4490607063415428, 2.8634138891454834, 10.6300366468594643, 19.5654735882180972, 4.0494353712292614, 5.5365867045727661, 3.1021877474380846, 6.2947789308450908, 8.8648736667611487, 10.6153094480978325, 0.2334061399608698, 14.0671783888537920, 0.2234797292400960, 8.7069986212538897, 5.9596547268625066, 4.9060214300143219, 10.1927365474869589, 11.9661657987475341, 0.4662466434853773, 12.1920277939635202, 13.2325485079401659, 1.3963257180914304, 19.8103469585473100, 0.7910451974542847, 6.6923891261590107, 3.4320862691283209, 4.5022463250317255, 1.0589064618546478, 15.4329874305955190, 18.7853205080859418, 19.5577932786985436, 11.3104312774579547, 18.3494948150584243, 6.3620959696350585, 3.8320015283320767, 8.9621416849378264, 10.8202275599755673, 1.7634732711882284, 14.9415581456303936, 6.3443308259250344, 5.6109583454163001, 15.7714594962642494, 15.0445831266166348, 15.0899357092350765, 2.2476673656641801, 3.8852233441531299, 15.6638265752271266, 12.8571266483258135, 12.7861572930515202, 15.3450643786373426, 15.3225883868616499, 10.8275054723195439, 13.4144294693136796, 9.0706513378177149, 5.9864866848830207, 9.5332373650980067, 0.4443032593999899, 2.7582852014461645, 6.7212394562336897, 17.0712258767632861, 19.8178441941022108, 2.3981418963013592, 1.8908009678804352, 8.5855413928391844, 0.0785255990389568, 14.0141661816363534, 6.7355862879971484, 12.0420308818265056, 17.6315760440689715, 13.5449814774089479, 19.2718320631692421, 2.9272013256220664, 17.2899736854007919, 13.5735837307194362, 4.3157153642119992, 3.9126082356480452, 18.9276349793230168, 3.5831061282627052, 14.0177246692394739, 8.7097980208570078, 4.2290288959808002, 18.1236016202777996, 14.2728239374589307, 2.7943721628365132, 8.2535706371976580, 18.8160422842487627, 15.3168307084181787, 18.0697976497191952, 16.1440615277531023, 6.2756182511041372, 18.1991812687241783, 0.7200676044914117, 16.7973657347760543, 10.3612234002161117, 10.6586843478587099, 12.7207178303538289, 15.7377418072453708, 14.1369673710703854, 2.5736949130478992, 6.2387523236339151, 11.4291551824532256, 16.3214713444517869, 15.6576976449421181, 0.4983877075670113, 18.9424230691569520, 18.1011362237602711, 17.4344671720420905, 4.5547690512524506, 7.8873825177051406, 15.0300791334677992, 5.0115954513560546, 2.9163129463609136, 4.4343192198184598, 2.3815347271377356, 9.8337417748191829, 1.9710806362080797, 8.1451343638878004, 10.6838517546845253, 14.7414698270373776, 18.4662106150019909, 3.2924801038934080, 9.4011962527758861, 15.8264769696425809, 11.8575048905551217, 12.3602090294784119, 14.6071701753364778, 9.5361769634243423, 0.6561422426680080, 14.2439330229754635, 16.3173040995890837, 13.3153618505281344, 1.7364393060322221, 10.3606897639506563, 8.0229567524753183, 19.6551622545138471, 9.2364182820119609, 18.6997303368635066, 18.8833933907846472};
+
+const TYPE p_z[nAtoms] = {18.6329480185432601, 12.2555397010652349, 9.7784337883551373, 9.0136199719002139, 10.0188896830914942, 5.2580992616124878, 8.5406476617232325, 16.0527177594889139, 10.7770080647958348, 5.9322266112500959, 17.1547363818057299, 17.6022129924633504, 7.3882429596047370, 2.3017241253250060, 5.6341747880361348, 0.1152809968347733, 12.6878367956508988, 2.1440962668152759, 0.8004199563224681, 13.2088307489098451, 3.7337473945490069, 8.3327420883364507, 18.1818633679297932, 18.2292614356700184, 17.2334085517164119, 0.5669871427130923, 17.6332251307856360, 12.2685679773443006, 4.3014938839025252, 7.0763807304655524, 2.7300429334475576, 11.0805875612635809, 8.9412444990816748, 3.3797357458584583, 7.7533322544188135, 0.3174876306099913, 19.3533444811343784, 19.8797587210222275, 8.1527313369621357, 5.3733196920580992, 8.7311685449318581, 14.1971733171327852, 19.9611911045737074, 3.4765394040222990, 3.9490319333486923, 16.0913322938511243, 11.4947275597623939, 7.5833587152232447, 14.3077035058116682, 19.2449424633702542, 3.0024413572980491, 19.2540660250504416, 8.5098075612892305, 5.3470413843226838, 2.2858302568718885, 0.5694799889233795, 5.1645378313088619, 10.9186130083383564, 16.9262457858526645, 18.0947161151234148, 17.1142524409288228, 4.8981503840652518, 2.6204714811313572, 6.6748724207248156, 8.2984333482400352, 7.3887180361710314, 1.8655501297024442, 5.6193218264458542, 6.5359265800354196, 1.4071525710629489, 4.2158159211154995, 13.5516312238628860, 18.7892375997657339, 14.9767969398953511, 8.0014718454115581, 10.2278840776730977, 17.1503655665231420, 2.3858519283029271, 16.1343589622077630, 14.6962761797325392, 13.2854325259898509, 0.8886687593913422, 13.3840961105625276, 13.8181567737015936, 18.9244191142618199, 10.3066545099235007, 19.6887716060662541, 1.3314408058193639, 19.4768644266667401, 2.2257144986306177, 6.8626450802225243, 0.1566641969771449, 12.3647076540819523, 6.7820553515729740, 10.2860103728011349, 6.3867596386962973, 10.6867260118935405, 3.0851068661030423, 7.5035965388636949, 2.2928910409962713, 1.3875632973341996, 14.9993447301251379, 4.8805704875164988, 8.2656488453416461, 19.6192401320742604, 9.0744292782412579, 12.1306234441035024, 8.8389215256127489, 0.2229446752189353, 4.9616016867514139, 12.9688298457771687, 19.2337468288737377, 17.5654831473733033, 11.5600742872069731, 17.5237435510103232, 19.4264996224047017, 5.0656224514148986, 3.9213992629855374, 10.3820556665622821, 18.7953673605650380, 12.4847198191310369, 0.8582822852436496, 0.3936521613195942, 14.6294659992070848, 12.5413183208886387, 9.1130803766540005, 0.2410759923645371, 12.6382173759649614, 15.0571324838484486, 7.0737246647267247, 16.9746461119998742, 5.3662018366095099, 2.5481771308936310, 3.2673313705234071, 18.1026391263194277, 12.9917616686460242, 5.3858066934412019, 17.6111941787996003, 9.8753308406590374, 6.4032828014924013, 7.4247815593339208, 7.8430699551691285, 12.8584660269844413, 10.4023106203178699, 11.3410701645431278, 12.0420038635632203, 5.7372552161446952, 12.7569779923039039, 13.0820107252652882, 18.8463187708903632, 9.8596063732403838, 5.9737848264411486, 10.6822783656440379, 11.8727324665991674, 1.5109100749250302, 6.7903059219704334, 9.4058031365575836, 14.7490724388635641, 1.2793285826310643, 16.9188372067287141, 4.0894919659983850, 19.5838416239749478, 19.3311187171898560, 0.8675699935098641, 5.3030492212128397, 17.3420203546990450, 8.4779169365640250, 10.7048062739302914, 0.3416005055139921, 0.5758844333704736, 11.3292714641285919, 4.5477256233179739, 18.1955139743717211, 9.6504592669041838, 13.7770087416204152, 0.1893328065393807, 8.7472953920013019, 18.2685942651204947, 9.4985545747724878, 11.3273292122877240, 2.8829039465130659, 17.2783908948646925, 0.0235178328007123, 14.8445669054948333, 15.3427479696982516, 7.5224696854719397, 15.7988066042474369, 9.5554150105024647, 3.5279689501917821, 3.4669076591384762, 12.1367636165709136, 16.9274149013707174, 9.0701538884995472, 10.0191673859667940, 5.9578482806340451, 3.9964468877352988, 8.8734065210448261, 6.9170741236277618, 0.9113099993598716, 16.7185186753967905, 18.1648494702148504, 8.9719932180434760, 13.1384170145603569, 13.1333974647393319, 13.5644548880758400, 10.5987442011944708, 4.4450477497888139, 16.3279534497336734, 8.3301647316925624, 2.4346772050174530, 10.2175948477949134, 16.8239757354184860, 17.5592785599267742, 17.3497261810119134, 14.6717514898516210, 10.0193265074685129, 4.8138031341996772, 17.4756460936936548, 1.1397398543649275, 14.5889577523875467, 13.6938164319695161, 12.5366213969831257, 16.1415305772765798, 17.1479761085705711, 19.0153978872629068, 17.9179079179237029, 3.2366115438475438, 18.6470592226488492, 4.6736257029693311, 13.9441638769380631, 16.5519293125461999, 15.9846723200625753, 10.6448216272314760, 9.9086003293395724, 1.3329860613026692, 2.2311175329684114, 4.5777285180786205, 14.5881843077565705, 14.9176986094763908, 10.9441563030915603, 9.8929224861620675, 11.8043964349536594, 9.0612576332890029, 13.1345141328689490, 19.6426877154950787, 16.0365577995907138, 16.4521638780890527, 7.8060764996903291, 12.5826118677754817, 19.5176328649368145, 14.2894931506071305, 11.5804876998391393, 4.5772960711320723, 0.5653060157856495, 1.7607250469699816, 0.0167848559783718};
+
+const TYPE c_x[nAtoms] = {-0.0045795189517608, 0.0010006544024939, 0.0091353696597257, 0.0042083936032755, 0.0593902131124659, 0.0046532535512106, 0.0006000365319329, -0.0000749367839938, 0.0753128895754742, 0.1148295162832887, 0.0048178879330691, -0.0009192037800680, 0.0472773018929201, 0.0038046401480434, -0.0412273030911962, -0.0000508553772453, 0.0102953805332252, 0.0007925298799086, 0.0007545233671592, 0.0001392802906365, -0.0171184405409007, -0.1203620059221036, -0.0428603544791572, -0.0067776896522974, 0.0114879325563022, 0.0023562821077880, 0.0000391861670495, 0.0000165070167933, -0.0128529391671262, -0.0080499826906790, 0.0138042637110846, 0.0566116805226414, -0.0440312338098056, 0.0053294616085111, 0.0010526192037506, 0.0001147188716166, 0.0426656532030718, -0.0000212247716140, 0.0010476259487722, 0.0030316460754411, 0.0012217212317550, 0.0016100161283132, -0.2919842006498220, -0.0001263469957246, 0.0709385190313541, 0.0879389850840536, -0.0317543611690016, 0.0038558278418436, -0.1048689889554224, -0.0017563368590621, 0.0016546462302004, 0.0005332160253217, 0.0052461792716530, 0.1976687090519876, -0.0412878437605855, 0.0009642577260911, -0.0014795854002822, -0.0121757721007683, -0.0028504232314383, 0.0008557032670345, -0.1333490342654787, -0.1795839529229207, 0.0011741467235024, 0.0380988958748112, 0.0098290177403689, -0.0059394288417645, -0.0011112390377251, 0.0019360813285793, -0.1790140341055154, -0.0032822499942972, -0.0642028730865273, 0.3213302258114489, -0.0795103495668107, 0.0009249859997316, -0.2563673304702790, 0.0263929082423519, 0.1106130094452820, 0.0423576663203423, -0.0012599904430325, -0.0468686511629383, -0.0044725886187494, 0.0002759794502637, -0.0468025687946449, 0.1526817352499845, 0.0032008593634687, 0.0010082430260856, 0.3705908922719823, -0.0003239373355089, -0.0011621009219526, -0.0101502302074965, -0.0176873827812899, -0.0028082644015579, -0.0562869461910865, 0.0164525952082818, -0.0389120305315647, -0.0002934752613145, 0.0170772842771684, 0.0005685548421083, 0.3973848498696269, 0.0156659068077403, -0.5460767881222509, 0.0055272732361114, -0.0189348407404303, -0.1714603595644497, -0.0483845953470964, 0.0033901275017676, 0.0216360228752040, -0.0084529293853750, 0.0001315032347755, -0.0034959747577141, -0.0009674478125459, 0.0086731771760339, 0.3298190943502501, 0.0014037974609553, -0.0708439953985395, 0.0404965424040329, -0.0024431770515170, 0.0010255436882137, -0.0131284830784892, 0.0001107894045428, 0.0043489999572390, -0.0025900388331786, -0.0004115483005159, 0.0029441987217273, 0.0267318335418436, 0.0004492962577070, -0.0000118814823774, -0.0111666797134007, 0.0002612526527235, -0.0108123629566951, -0.0021967544953101, -0.0219334991645086, -0.0008072705431594, -0.0062180153691900, 0.0696851989869954, 0.0116706349082798, -0.0009197466653283, 0.0607571882232662, -0.0090764551016809, -0.0297350634328291, -0.0028854968545133, 0.0111844408520772, 0.0702751037497208, -0.0274510576702956, 0.0108620503230867, -0.0016654135342545, 0.0055536903088580, 0.0040215988538506, 0.0013443186434745, -0.0135661906202453, -0.0024661114479737, -0.0005830143302719, 0.0046680270345165, -0.0652088129568841, 0.0450028719225990, -0.0101447240127669, 0.0376052470474780, 0.0005240782658987, -0.0224426423294674, -0.0002910927982936, -0.0051747127483074, -0.0150230189973244, -0.0322002731555954, 0.1622415321561700, 0.0229398419088130, -0.0446167817688489, -0.0287335659308238, -0.0422364612898884, -0.0000963835163646, 0.0036370411706518, 0.0280013819737468, 0.0048581820747142, -0.0081577795803511, -0.0175719109984944, 0.0775684556042425, 0.0190416527519842, -0.0076179361251093, 0.0004652525750220, -0.0009343774153151, -0.0231144603615749, 0.0029893502908488, 0.0001801247605473, 0.0010268143764088, 0.0034433621848123, 0.1070704879119819, 0.0230402269038010, -0.0008276849658398, -0.0141396876251974, 0.1524687750685142, 0.0154750738627719, 0.0106527073918973, 0.1390133656788715, 0.0235710403959843, -0.0344766425756731, -0.1148909896693189, 0.0015579206478781, 0.1645774774300167, -0.0039179163868212, 0.3493697437410079, 0.0035133934524417, -0.0216271592954963, 0.1302617696357277, -0.1703575644791838, -0.3869387858113245, 0.0355531941524447, 0.0237223616175110, 0.0299049624989864, -0.0020402994586124, 0.0002027347657051, -0.0007713403730759, -0.0299788776589361, -0.0020198567010444, 0.0185155204413976, -0.0735885335513550, 0.0024034012998256, -0.0684886891186168, 0.0007281890893727, -0.0040434798710332, -0.0455652681632317, -0.0036143754165868, 0.0208290447385603, -0.0795234886573328, -0.0000522834042340, -0.0019925194859428, 0.0013486672055835, -0.3495038995226429, 0.0419544425375063, 0.0378408511170425, 0.0024016736757507, -0.0026407530717009, -0.0037870789867693, 0.0004175645624719, 0.0299430948513492, -0.0073927860855057, -0.0123112251762417, -0.0136111792788654, -0.0300323763139989, 0.0635715384111979, -0.0004256208694251, 0.0268540142335609, 0.0143655791137093, -0.0092086363985898, 0.0174422479137566, -0.0174821426174726, 0.0447451301957200, 0.0022557391534384, -0.1373513130683182, -0.0011967822510849, 0.0007376061506525, -0.0001246538476983, 0.0454143283079350, -0.0009430098858331, -0.1471428921985210, 0.0033023440310946, -0.0037655439177521, -0.0012653569888536};
+
+const TYPE c_y[nAtoms] = {0.0023366376424289, 0.0003274706321093, -0.0317479641666915, 0.0012419462439193, 0.0637072217014040, 0.0515247773607932, 0.0084045555673605, 0.0005624979925615, 0.0080552120116362, -0.0556008960067645, -0.0080103578063896, -0.0068012877531211, -0.0094373727621233, 0.0040491473997874, 0.1838488708935814, -0.0000329217738144, -0.0486651522720374, -0.0020812533673982, -0.0001865388585123, -0.0011163309733541, 0.0278902562968541, -0.1701359061526200, 0.0223444808569898, 0.0076336976576161, -0.0035534307488968, 0.0078791535525673, 0.0011834506428879, 0.0034651769465794, -0.0026456678554020, -0.0003757237280991, 0.0204392592717834, -0.1341136394015902, 0.1708886589100200, 0.0169252013985751, -0.0003766157939695, -0.0003324887616034, -0.0308939263298839, 0.0002184454698729, -0.0027649631618547, -0.0130654958351564, 0.0023219393970790, 0.0019834044128723, 0.0001735693539581, -0.0014243371464416, -0.2379998639374943, 0.0337901919648708, -0.0800381526645846, -0.0042882016507604, 0.0095543650571517, -0.0003561319504468, 0.0016866337868831, 0.0007368577037479, 0.0023084275797397, -0.0425990197749463, 0.0240141812475105, -0.0002574691461937, 0.0003193690063291, -0.0125262146585251, -0.0256253333202020, 0.0011553048731904, -0.0318421152535022, 0.0375666593857264, 0.0014204053250233, -0.1759238848951172, 0.0043839134142663, 0.0008433075880576, -0.0002185312693791, -0.0037839926180563, -0.1993764437829915, 0.0031752022194020, 0.2198255398372332, -0.2950945874465774, 0.1325234030790587, 0.0006446002998840, -0.0941228296290855, 0.0258034128580267, -0.0946892177713960, 0.2421010978137048, -0.0007871048444721, 0.0410660104155664, -0.0018648306017793, 0.0001157720230893, -0.0029084922099082, -0.2024342135417301, 0.0011865628025500, -0.0023212217321001, -0.1330767144835761, 0.0018370939411536, 0.0026763976180610, 0.0090248908717061, 0.0342410726204171, -0.0014405021372105, 0.3023897312616984, -0.0338972551110036, 0.0530617283566031, -0.0001800754800253, -0.0760380341554816, -0.0010444867178764, 0.3076913346327718, -0.0249657988992430, 0.0395407494884418, -0.0013262154159867, 0.0134247098751451, -0.0152856937009451, -0.0027215020481674, 0.0033808602304749, -0.0081973177823275, -0.0006244932736350, 0.0004418447508018, -0.0026540261962620, 0.0026224217557514, 0.0107719407465121, 0.4237093953585532, -0.0067061534541944, -0.3707297694857420, -0.0429536112623487, -0.0003548272938677, -0.0015110681874581, 0.0003318723560599, 0.0083982660573683, 0.0015051986891214, -0.0076625117130702, -0.0000763039531262, 0.0050752984544254, -0.0181594871889979, -0.0001355499297827, -0.0008031959876353, 0.0116819064236495, 0.0011946764139594, 0.0449968124493289, 0.0011508230180537, -0.0135743895994105, -0.0019691942483913, -0.0132373148723370, 0.3698192133911120, -0.0061370866386815, -0.0000729034691551, 0.0186453375976536, 0.0119855587926925, 0.0218890264932470, -0.0039330460108275, 0.0080792493352998, -0.2394672890560277, -0.0251952678329363, 0.0375433977375618, 0.0038995428668366, 0.0019955311865223, -0.0018492365594615, -0.0005520286146161, -0.0261453751340513, -0.0011075161069945, 0.0001948306751402, -0.0044790436546044, 0.1889540789341556, -0.0227193922159459, -0.0054836019124442, -0.1460147243572459, -0.0003664681325090, -0.0939104211081484, -0.0154570498303793, 0.0001123255366511, -0.0136088942649073, 0.0526088956811829, -0.4238662874232183, -0.0205412110766567, 0.0086878559725064, 0.1307735706335590, -0.1133049718359686, -0.0001045825111041, -0.0026014797665092, -0.0166498565389207, -0.0308604792251989, -0.0092910105418492, 0.0055174663365743, 0.0143293189093238, 0.2614724745817563, 0.0247773620378728, 0.0003831462057484, -0.0013167642344193, 0.0187730446099219, 0.0052379121488160, -0.0015940959040823, 0.0021975748335872, 0.0047359053913183, -0.0111371379860461, 0.0145569002390629, -0.0006418750407132, -0.1464057061882958, 0.0912606924784732, 0.0084551029910644, 0.0077678520607954, 0.0341888748346538, -0.0479023890543295, 0.0214990277589202, 0.0550477446675383, 0.0024907014211731, 0.0567838303071173, -0.0016621172065412, -0.0257821729016364, 0.0243891766729837, 0.0419936554597676, 0.0450860621847714, 0.1403281670891161, 0.1463614376976397, -0.0017285937093979, -0.0405585790724259, -0.0481034606850254, -0.0080034944849930, -0.0001514350786818, 0.0010962928496224, 0.0356322486183008, 0.0116038104005805, 0.0103487323204759, 0.0901928901889105, -0.0043284345085213, -0.0175056197409945, -0.0050159466691116, -0.0001498369750154, -0.0259007558420731, -0.0031305723026013, -0.0134227689148391, -0.0104359111559650, -0.0006359153097625, -0.0002637271329941, 0.0008758023313190, -0.4262596837197251, -0.0271864123638465, -0.0148677802658914, 0.0057793928931485, -0.0003491377993326, 0.0004572245645245, -0.0007924008463422, 0.0808090414918233, 0.0210423147466303, 0.0014013192489283, 0.0061641436821485, 0.0485863153347486, 0.1442332705438349, -0.0000792767590709, 0.0069381503605460, -0.0030704680578749, 0.0030640963993225, 0.0482341990542410, 0.0157785548694374, 0.0197977314964901, -0.0000054396724673, -0.0726394763631353, -0.0005130689122156, 0.0090154796102442, -0.0004177376502328, -0.0409149941359858, -0.0006041777520952, -0.0952224642959121, 0.0190031262088979, 0.0021461123577084, -0.0012753032555793};
+
+const TYPE c_z[nAtoms] = {0.0003331512668661, 0.0002392120969401, -0.0218611391798295, -0.0043484272383932, 0.0329947799990490, -0.0146782857920584, -0.0043264753208002, 0.0002111559620985, -0.0616769764841274, 0.0024402260802260, 0.0068561389518542, 0.0051228434822202, 0.0015556858914776, -0.0030079565567761, 0.2801438646043106, 0.0002553439754180, -0.0776834863713215, 0.0032178259599896, -0.0000288724087788, -0.0003847089647469, -0.0633668376027912, -0.0112524663991965, 0.0590707831589821, -0.0056919888034930, 0.0024470720125280, 0.0012002520267324, -0.0006168471515519, -0.0748726901632676, -0.0062071834250270, 0.0067230987356224, -0.0262004152445645, 0.1698864827414849, 0.0669824617989436, 0.0101532262082429, 0.0003900035793537, 0.0005591346076319, -0.0572891489425459, -0.0007936995563046, -0.0007021699658971, 0.0047530256937731, 0.0000974143274047, 0.0042961165362821, -0.2852481524977619, 0.0018567269190672, 0.0513750314167724, 0.2330943247791502, -0.0584476952568427, 0.0037015750519698, 0.1157746758480753, -0.0029497571483984, 0.0003263178349143, -0.0009411404605778, 0.0003596378839630, -0.0709492495184697, 0.0356827223533080, 0.0009354610571981, -0.0012980121078216, -0.0567567502241796, -0.0040607289581101, -0.0007313617580492, -0.0154257678128280, 0.0654912187330980, 0.0038889485552302, -0.2905522136980022, 0.0026851646639413, 0.0007816373949054, 0.0013587960952252, 0.0016601308727936, 0.5603000262801787, 0.0006780042616553, -0.0500807662723323, 0.0410674215399688, 0.4623328631161086, -0.0019719369280860, -0.1454303235918162, 0.0036884042652098, -0.0828243512247075, -0.3936253527887135, 0.0002505778812599, -0.0158104643473662, -0.0010161863868166, 0.0003279173705771, 0.0025764273051478, -0.1626907358940115, -0.0018993907695316, 0.0015298063401423, -0.1781552297085376, -0.0001909113161382, -0.0079422450319257, 0.0255201419607594, -0.0020390798176853, 0.0056911873564627, 0.1331656617175906, 0.0013727870340908, -0.0126124160760607, 0.0015172696044835, 0.0248717371382690, 0.0014821198116345, -0.4108352984041132, 0.0653666723806979, -0.0431257796514816, -0.0002968751529700, 0.0172399257956327, 0.0915130698215933, -0.0015382964176610, -0.0052289648198087, -0.0197380798483629, 0.0049713429819444, 0.0004630283434048, 0.0014184876475261, -0.0002099181478943, -0.0085797884795251, 0.2002357351267306, 0.0009646486489415, 0.2090351871409680, -0.0256913220244116, 0.0005049209977443, -0.0019294137333642, -0.0028997129696970, -0.0021850374210273, -0.0073238564504272, -0.0011107178223412, 0.0002944720422556, 0.0098881318599914, -0.0329406389557539, -0.0003501107973728, 0.0005112082493486, 0.0024255012883502, 0.0001321747236266, 0.1051236954315492, -0.0007499001911237, 0.0836681231925889, -0.0053123333960179, -0.0111641466718695, -0.2095742719753632, -0.0093385967473624, -0.0020474154802312, -0.0180564904661425, 0.0822950923266108, 0.0263247652423681, 0.0039636525475914, -0.0082461979610267, -0.1196296703912288, -0.0039262893942859, -0.1139517005709203, -0.0011817949033491, -0.0055312767275372, -0.0005253057648256, 0.0000867237272117, -0.0136913013204265, 0.0002079297964426, -0.0001169896606389, 0.0739588590687230, -0.0910231816311404, -0.0023677683865490, 0.0087596902805567, 0.0135088043437074, -0.0000928166893061, -0.0224606779225434, 0.0142005245509785, 0.0001630922189449, -0.0267438864579996, -0.0021300964727106, 0.2063792487288936, -0.0028357615413782, -0.0070580837078370, 0.1889589560564129, -0.0619377684469789, 0.0001128528766564, 0.0469392673932266, -0.0839092463935101, 0.0226664366280997, 0.0078626075697730, 0.0216608457706066, -0.2606512596199520, 0.2478995971183793, 0.0297534314122946, -0.0008155620215197, 0.0004371884464687, 0.0332578076009335, 0.0108376628860144, 0.0000007824016011, 0.0015775486745661, 0.0014589425129476, -0.1142393020213334, 0.0190785606654878, -0.0006248384781040, -0.1995323055061711, 0.2502031059197560, -0.0169422107694874, -0.0093248573023010, 0.0188242711288708, -0.0047097087096664, 0.0767160302397170, -0.0022254422717735, 0.0008329842963042, -0.0688654127105466, -0.0879815484345477, 0.0075719330453578, -0.0042393898655229, 0.0226070124561855, -0.1163466321045853, 0.1474058783526109, 0.1615328753760150, -0.0065505097964318, 0.0013964798123428, 0.0045456406569018, -0.0041245215557732, 0.0004197531876269, -0.0005187860088975, 0.0112936957030108, 0.0025967044153008, 0.0218753509992570, -0.1710207902692772, -0.0034345509449755, 0.0644348346323744, -0.0088243589631982, -0.0033734274494978, 0.0120083767551926, -0.0029241444429930, -0.0068912192515364, 0.2619540409601694, 0.0004023182384380, 0.0008998462050639, -0.0070081692366391, -0.1810543739508146, -0.0348855935088357, -0.0182359604117160, 0.0011597708381245, 0.0019225304829568, -0.0032813548962147, 0.0007034138528733, 0.0598153434231341, -0.0050409856810312, 0.0004819880487538, -0.0427970018552158, -0.0044339270624758, -0.1956870570977186, 0.0007194999056275, -0.0209173932681773, 0.0082794876055903, -0.0050261207363631, 0.0033376851343108, 0.0068452305011028, -0.0089297311876238, 0.0004422536221071, 0.0464839568455993, 0.0015022400340921, 0.0004868431363263, -0.0010306986922436, 0.0147385409694710, -0.0003063028730447, -0.2588093315853564, 0.0216622321431159, 0.0088582862311794, 0.0015241305792138};
+
+const int n_l[nAtoms*maxNeighbors] = {161, 200, 10, 159, 104, 227, 23, 149, 72, 86, 214, 42, 224, 183, 186, 244, 229, 174, 221, 201, 245, 6, 101, 92, 192, 143, 103, 12, 7, 142, 123, 75, 176, 96, 197, 251, 173, 107, 144, 47, 193, 241, 131, 239, 152, 94, 120, 79, 65, 38, 179, 155, 141, 124, 67, 152, 19, 47, 195, 27, 145, 239, 40, 173, 215, 8, 196, 21, 94, 241, 242, 167, 107, 98, 129, 74, 243, 68, 120, 210, 171, 131, 197, 61, 67, 226, 62, 65, 47, 53, 38, 176, 95, 17, 133, 173, 12, 139, 201, 103, 1, 192, 216, 221, 109, 20, 174, 143, 180, 229, 99, 75, 128, 245, 112, 162, 238, 24, 225, 115, 59, 1, 123, 101, 130, 207, 110, 229, 4, 242, 196, 241, 215, 21, 120, 107, 243, 94, 167, 210, 220, 173, 129, 239, 194, 178, 164, 121, 210, 102, 21, 205, 129, 25, 188, 18, 252, 206, 105, 196, 23, 104, 0, 83, 149, 244, 200, 78, 217, 212, 202, 207, 16, 183, 161, 248, 224, 159, 186, 86, 227, 222, 214, 161, 72, 147, 200, 80, 148, 177, 42, 60, 139, 201, 103, 6, 216, 192, 109, 180, 20, 228, 1, 151, 143, 14, 99, 125, 234, 66, 132, 253, 228, 30, 14, 91, 116, 39, 154, 63, 180, 216, 218, 100, 63, 228, 39, 116, 13, 125, 132, 30, 151, 216, 192, 234, 66, 12, 253, 154, 62, 43, 171, 97, 226, 54, 61, 131, 5, 81, 17, 126, 133, 53, 56, 95, 31, 153, 113, 83, 127, 202, 248, 183, 232, 142, 46, 10, 135, 187, 48, 123, 189, 195, 89, 209, 81, 133, 67, 55, 5, 62, 65, 226, 171, 155, 54, 47, 25, 121, 9, 164, 194, 35, 43, 102, 34, 129, 95, 188, 178, 21, 206, 196, 124, 179, 239, 27, 3, 231, 152, 157, 120, 38, 22, 173, 211, 145, 41, 250, 99, 109, 139, 180, 216, 12, 6, 66, 122, 103, 201, 69, 151, 228, 192, 13, 196, 129, 4, 215, 98, 242, 8, 164, 68, 210, 74, 167, 102, 95, 107, 94, 36, 119, 51, 231, 111, 157, 19, 26, 73, 172, 211, 134, 124, 27, 79, 114, 10, 104, 217, 78, 0, 244, 83, 207, 149, 202, 230, 212, 225, 101, 200, 142, 112, 115, 238, 225, 59, 184, 162, 123, 172, 48, 207, 37, 7, 111, 128, 181, 121, 18, 35, 164, 102, 9, 194, 43, 188, 206, 254, 129, 97, 68, 252, 236, 231, 119, 22, 36, 124, 145, 179, 19, 73, 27, 111, 157, 152, 59, 51, 3, 152, 144, 145, 179, 73, 96, 110, 124, 193, 157, 19, 233, 64, 47, 176, 40, 33, 70, 146, 160, 44, 87, 117, 247, 208, 156, 32, 108, 93, 236, 218, 240, 64, 233, 193, 47, 136, 75, 40, 133, 176, 144, 189, 96, 50, 143, 152, 89, 154, 253, 39, 218, 13, 234, 116, 132, 14, 126, 63, 117, 91, 235, 33, 169, 153, 16, 113, 83, 127, 202, 232, 125, 166, 46, 142, 187, 248, 32, 63, 92, 156, 118, 57, 93, 240, 247, 248, 46, 113, 106, 90, 232, 187, 150, 166, 31, 28, 160, 146, 70, 117, 154, 108, 218, 87, 30, 44, 236, 39, 93, 235, 168, 196, 242, 52, 210, 21, 95, 205, 129, 164, 8, 190, 4, 53, 43, 102, 61, 254, 121, 188, 25, 252, 255, 87, 206, 194, 9, 236, 18, 44, 102, 164, 140, 22, 119, 51, 231, 211, 111, 26, 134, 19, 88, 157, 172, 73, 137, 114, 124, 244, 181, 172, 212, 24, 115, 149, 184, 111, 225, 104, 112, 51, 207, 48, 59, 3, 67, 65, 173, 239, 53, 5, 52, 61, 155, 171, 19, 195, 197, 47, 179, 63, 14, 30, 116, 13, 154, 228, 117, 234, 132, 253, 125, 218, 90, 93, 185, 64, 233, 145, 152, 29, 47, 193, 179, 155, 27, 65, 144, 110, 141, 189, 3, 45, 211, 120, 213, 137, 246, 76, 239, 165, 8, 250, 241, 220, 88, 243, 242, 72, 86, 186, 161, 0, 224, 11, 200, 159, 227, 214, 82, 204, 80, 10, 183, 95, 61, 171, 53, 62, 102, 164, 15, 129, 97, 131, 5, 68, 52, 34, 242, 70, 28, 146, 87, 255, 252, 254, 208, 188, 33, 140, 160, 206, 236, 85, 247, 213, 246, 76, 137, 41, 165, 211, 88, 220, 84, 120, 199, 114, 243, 250, 237, 232, 248, 202, 118, 83, 32, 153, 31, 16, 90, 82, 142, 93, 156, 57, 204, 64, 176, 65, 152, 193, 29, 96, 144, 233, 40, 2, 197, 5, 189, 133, 67, 184, 123, 238, 24, 207, 251, 181, 127, 153, 112, 225, 172, 16, 143, 212, 157, 84, 223, 199, 58, 76, 246, 237, 165, 213, 45, 88, 71, 219, 220, 203, 137, 136, 182, 77, 69, 100, 175, 163, 198, 89, 29, 133, 189, 158, 180, 132, 228, 134, 172, 111, 114, 22, 181, 36, 157, 79, 37, 88, 250, 119, 211, 165, 73, 242, 95, 173, 239, 53, 196, 34, 61, 107, 8, 38, 120, 4, 21, 129, 171, 61, 62, 95, 171, 52, 43, 5, 38, 67, 242, 173, 34, 131, 197, 107, 239, 226, 158, 133, 126, 198, 56, 89, 132, 163, 131, 97, 91, 100, 5, 15, 77, 209, 81, 195, 17, 189, 155, 67, 89, 141, 62, 65, 133, 5, 3, 38, 171, 97, 226, 131, 185, 197, 54, 68, 98, 74, 236, 5, 176, 171, 107, 126, 166, 156, 106, 240, 118, 32, 204, 248, 85, 82, 150, 80, 214, 113, 247, 147, 187, 199, 237, 49, 71, 223, 84, 203, 190, 76, 246, 220, 219, 205, 45, 213, 165, 24, 238, 111, 128, 115, 172, 112, 73, 162, 7, 225, 110, 184, 37, 48, 157, 191, 227, 183, 200, 159, 212, 149, 177, 161, 224, 214, 135, 222, 244, 0, 127, 53, 171, 62, 95, 43, 5, 52, 131, 67, 38, 197, 242, 173, 107, 15, 81, 61, 171, 53, 81, 43, 5, 15, 67, 17, 95, 131, 195, 38, 197, 226, 52, 14, 39, 125, 116, 228, 13, 192, 30, 151, 132, 31, 153, 90, 216, 234, 232, 29, 233, 47, 193, 40, 152, 144, 96, 176, 27, 65, 145, 75, 110, 189, 179, 3, 67, 155, 38, 47, 195, 152, 141, 179, 5, 64, 189, 176, 40, 17, 124, 180, 13, 122, 216, 228, 234, 99, 132, 91, 14, 109, 69, 100, 20, 253, 116, 65, 195, 38, 5, 3, 155, 171, 17, 61, 62, 53, 47, 81, 189, 131, 197, 98, 74, 129, 102, 21, 164, 215, 236, 94, 4, 206, 107, 97, 196, 56, 95, 77, 100, 175, 182, 50, 180, 163, 136, 198, 66, 216, 132, 91, 228, 158, 99, 44, 28, 146, 33, 87, 160, 208, 255, 254, 252, 188, 236, 140, 206, 247, 240, 203, 237, 190, 205, 199, 58, 210, 220, 178, 223, 219, 246, 84, 49, 243, 76, 86, 42, 186, 161, 0, 224, 11, 159, 200, 214, 82, 204, 80, 227, 183, 10, 110, 157, 27, 238, 144, 172, 59, 111, 145, 152, 128, 184, 96, 193, 24, 22, 98, 68, 215, 94, 129, 4, 167, 138, 21, 102, 185, 107, 170, 236, 196, 206, 143, 233, 193, 110, 29, 144, 125, 64, 238, 136, 128, 1, 96, 123, 48, 192, 246, 45, 213, 137, 165, 84, 88, 199, 41, 211, 49, 220, 237, 223, 58, 114, 100, 163, 175, 69, 198, 50, 158, 132, 182, 136, 228, 91, 180, 133, 89, 54, 230, 217, 23, 202, 101, 83, 142, 10, 92, 207, 229, 46, 104, 232, 123, 225, 250, 157, 114, 134, 181, 120, 241, 251, 135, 184, 51, 2, 172, 127, 96, 165, 147, 106, 186, 204, 214, 85, 57, 150, 82, 240, 159, 11, 156, 148, 248, 118, 62, 17, 195, 55, 67, 15, 209, 61, 171, 53, 5, 189, 89, 65, 43, 155, 204, 248, 118, 57, 186, 80, 214, 106, 156, 46, 150, 32, 183, 240, 85, 247, 202, 142, 153, 16, 31, 232, 46, 10, 92, 78, 207, 248, 23, 217, 123, 113, 49, 199, 76, 58, 246, 223, 237, 213, 45, 137, 165, 88, 71, 220, 203, 190, 150, 147, 240, 208, 80, 106, 57, 156, 148, 247, 204, 214, 118, 32, 82, 146, 72, 42, 161, 186, 224, 11, 0, 159, 200, 227, 214, 80, 204, 82, 183, 10, 254, 255, 108, 70, 33, 44, 236, 206, 188, 28, 146, 252, 35, 160, 154, 218, 213, 165, 137, 211, 76, 45, 246, 134, 114, 84, 51, 41, 49, 250, 36, 199, 189, 133, 17, 198, 54, 158, 163, 226, 175, 77, 100, 50, 195, 29, 209, 182, 93, 116, 117, 232, 32, 151, 235, 46, 39, 118, 63, 160, 156, 247, 14, 169, 132, 158, 163, 100, 13, 126, 175, 198, 253, 77, 66, 234, 30, 228, 54, 69, 142, 202, 101, 229, 192, 83, 123, 1, 153, 201, 207, 78, 232, 230, 125, 103, 90, 117, 32, 160, 247, 118, 156, 116, 232, 235, 46, 39, 33, 28, 57, 248, 215, 4, 74, 167, 241, 98, 170, 107, 138, 8, 243, 68, 135, 21, 129, 196, 242, 61, 52, 43, 129, 53, 196, 107, 171, 21, 98, 173, 34, 102, 164, 68, 144, 176, 193, 2, 152, 251, 27, 47, 64, 233, 110, 157, 73, 197, 29, 79, 56, 226, 131, 102, 68, 236, 54, 15, 171, 98, 43, 126, 197, 206, 74, 5, 68, 74, 129, 215, 21, 4, 94, 107, 102, 196, 167, 242, 164, 95, 8, 138, 20, 180, 109, 216, 122, 66, 139, 69, 12, 103, 6, 228, 13, 151, 201, 77, 163, 77, 175, 198, 158, 69, 132, 91, 182, 50, 228, 133, 136, 180, 89, 54, 229, 230, 92, 217, 142, 207, 123, 78, 245, 1, 202, 225, 174, 112, 83, 130, 164, 68, 129, 98, 21, 74, 206, 43, 97, 95, 236, 194, 196, 215, 4, 9, 201, 12, 139, 192, 6, 109, 151, 216, 1, 221, 92, 20, 229, 174, 14, 180, 244, 149, 23, 10, 212, 0, 217, 207, 37, 200, 161, 225, 227, 78, 83, 60, 140, 208, 167, 148, 252, 194, 206, 74, 188, 138, 215, 170, 187, 240, 236, 178, 57, 240, 204, 214, 80, 147, 85, 156, 183, 248, 113, 82, 118, 32, 150, 187, 173, 242, 4, 98, 241, 197, 94, 8, 95, 196, 2, 129, 215, 239, 21, 74, 87, 154, 33, 218, 30, 126, 253, 236, 255, 28, 254, 146, 70, 206, 97, 160, 139, 20, 99, 103, 216, 12, 151, 180, 201, 122, 66, 6, 192, 228, 14, 116, 144, 73, 238, 233, 193, 27, 128, 75, 96, 152, 145, 157, 64, 143, 184, 59, 172, 51, 59, 73, 37, 22, 24, 181, 157, 119, 238, 184, 36, 115, 134, 79, 225, 115, 24, 162, 207, 123, 7, 217, 238, 59, 101, 245, 184, 48, 37, 128, 16, 31, 187, 127, 166, 153, 183, 106, 240, 57, 248, 138, 170, 32, 135, 156, 134, 165, 250, 79, 51, 88, 181, 213, 246, 211, 191, 45, 243, 157, 120, 76, 162, 112, 225, 24, 59, 37, 207, 7, 217, 238, 172, 123, 184, 111, 244, 245, 39, 14, 63, 151, 90, 235, 234, 117, 13, 30, 93, 228, 154, 218, 253, 169, 235, 160, 93, 218, 90, 169, 33, 116, 154, 30, 28, 39, 234, 168, 253, 32, 156, 32, 57, 248, 82, 247, 204, 46, 150, 106, 93, 240, 232, 90, 80, 85, 22, 36, 231, 26, 111, 51, 73, 124, 19, 157, 172, 27, 59, 145, 179, 211, 241, 239, 250, 173, 8, 41, 242, 107, 4, 79, 243, 52, 94, 2, 45, 211, 25, 35, 18, 9, 194, 188, 164, 254, 102, 252, 206, 43, 236, 87, 255, 129, 66, 99, 109, 180, 234, 20, 13, 216, 151, 139, 169, 116, 235, 253, 228, 91, 207, 48, 112, 225, 184, 24, 101, 142, 92, 238, 217, 153, 83, 202, 143, 7, 179, 19, 3, 145, 27, 231, 152, 65, 141, 38, 73, 155, 26, 22, 157, 119, 63, 143, 14, 192, 153, 31, 75, 228, 39, 92, 142, 251, 201, 16, 48, 123, 54, 158, 91, 132, 30, 226, 253, 198, 154, 97, 163, 108, 56, 13, 100, 133, 135, 16, 113, 170, 251, 31, 138, 153, 48, 187, 183, 184, 166, 212, 79, 94, 238, 7, 110, 59, 24, 73, 75, 112, 233, 162, 115, 143, 144, 123, 225, 184, 21, 98, 68, 196, 102, 164, 95, 74, 4, 242, 215, 107, 8, 94, 167, 34, 245, 249, 174, 229, 230, 221, 101, 1, 7, 162, 217, 225, 112, 78, 92, 207, 197, 5, 171, 226, 56, 97, 176, 61, 107, 95, 54, 2, 133, 47, 173, 43, 91, 158, 228, 13, 100, 163, 77, 198, 30, 14, 126, 54, 175, 66, 253, 39, 89, 54, 189, 226, 198, 158, 17, 163, 47, 29, 131, 5, 77, 100, 175, 132, 114, 51, 165, 79, 250, 181, 88, 211, 213, 172, 157, 246, 45, 191, 111, 137, 127, 170, 138, 94, 251, 191, 113, 187, 79, 183, 250, 241, 60, 16, 166, 215, 50, 77, 29, 69, 100, 75, 228, 216, 180, 182, 233, 175, 163, 64, 143, 12, 213, 45, 211, 76, 88, 246, 165, 41, 84, 114, 134, 199, 120, 49, 220, 250, 170, 187, 166, 185, 94, 74, 135, 127, 113, 215, 167, 98, 68, 240, 4, 236, 12, 103, 109, 6, 216, 201, 20, 180, 192, 99, 151, 66, 228, 1, 14, 221, 105, 252, 208, 188, 206, 44, 194, 70, 146, 254, 148, 236, 85, 240, 9, 147, 155, 3, 65, 179, 195, 67, 124, 40, 209, 38, 145, 152, 47, 64, 189, 55, 92, 202, 83, 101, 153, 123, 232, 78, 207, 229, 192, 16, 31, 217, 230, 46, 75, 125, 192, 233, 193, 1, 123, 110, 238, 29, 48, 201, 144, 92, 12, 251, 193, 96, 152, 110, 27, 233, 176, 64, 73, 251, 2, 157, 47, 75, 145, 238, 179, 27, 152, 40, 124, 110, 73, 233, 144, 64, 193, 3, 96, 47, 65, 19, 28, 70, 33, 208, 236, 44, 166, 160, 240, 187, 185, 156, 87, 206, 32, 252, 80, 85, 148, 106, 214, 240, 57, 204, 208, 150, 11, 186, 159, 183, 222, 156, 147, 222, 105, 85, 80, 208, 106, 11, 214, 240, 140, 159, 177, 183, 219, 170, 212, 244, 104, 200, 60, 227, 10, 191, 0, 161, 37, 183, 23, 159, 181, 207, 85, 247, 57, 156, 80, 118, 240, 106, 82, 147, 32, 204, 208, 248, 186, 214, 116, 109, 103, 90, 14, 192, 63, 201, 216, 12, 139, 66, 13, 39, 234, 228, 27, 144, 96, 179, 193, 145, 47, 64, 233, 176, 65, 40, 124, 110, 3, 2, 31, 16, 83, 202, 142, 113, 232, 125, 127, 92, 46, 123, 48, 248, 207, 63, 218, 30, 253, 234, 169, 108, 33, 235, 117, 39, 13, 126, 116, 91, 132, 160, 141, 65, 3, 195, 67, 209, 179, 40, 38, 47, 189, 17, 152, 64, 124, 145, 32, 57, 118, 240, 247, 106, 150, 248, 85, 204, 93, 113, 82, 187, 146, 208, 73, 79, 27, 172, 144, 250, 96, 184, 181, 251, 110, 51, 111, 152, 19, 238, 198, 163, 132, 54, 100, 91, 175, 77, 126, 133, 226, 89, 228, 13, 69, 182, 200, 227, 214, 224, 183, 161, 60, 11, 0, 186, 204, 191, 106, 80, 149, 86, 28, 33, 117, 93, 70, 247, 146, 168, 218, 235, 32, 44, 156, 90, 169, 154, 200, 227, 0, 224, 159, 86, 72, 149, 60, 11, 42, 214, 183, 10, 186, 104, 115, 112, 225, 24, 7, 59, 245, 207, 217, 249, 238, 123, 128, 37, 101, 130, 100, 198, 175, 158, 77, 91, 132, 69, 182, 54, 133, 89, 50, 126, 228, 13, 102, 129, 21, 68, 194, 98, 9, 196, 95, 43, 34, 74, 206, 25, 242, 4, 213, 246, 45, 88, 76, 114, 137, 211, 134, 41, 250, 220, 243, 219, 120, 223, 187, 185, 138, 113, 170, 146, 240, 31, 127, 74, 32, 236, 156, 135, 16, 39, 215, 4, 94, 243, 74, 21, 8, 170, 98, 241, 219, 220, 196, 138, 129, 210, 160, 169, 117, 235, 218, 33, 28, 154, 70, 93, 108, 44, 253, 247, 87, 255, 235, 218, 234, 117, 253, 154, 168, 30, 116, 13, 160, 33, 39, 90, 93, 108, 138, 135, 94, 187, 127, 167, 166, 215, 74, 185, 113, 243, 241, 4, 98, 183, 5, 61, 131, 62, 197, 53, 43, 95, 67, 226, 15, 97, 107, 38, 173, 52, 111, 181, 51, 37, 184, 24, 59, 157, 73, 238, 134, 48, 79, 115, 112, 22, 239, 107, 242, 120, 52, 2, 241, 197, 8, 95, 4, 38, 176, 196, 5, 94, 221, 229, 130, 245, 1, 101, 230, 201, 6, 92, 249, 103, 7, 192, 142, 12, 163, 100, 198, 77, 182, 69, 158, 91, 50, 132, 89, 133, 54, 136, 180, 228, 2, 96, 47, 197, 193, 144, 251, 152, 131, 64, 173, 5, 107, 29, 27, 65, 222, 191, 60, 227, 219, 224, 223, 159, 11, 200, 148, 183, 49, 161, 114, 243, 205, 210, 9, 203, 194, 71, 190, 21, 167, 237, 196, 220, 164, 105, 34, 215, 124, 145, 152, 27, 3, 19, 65, 141, 40, 155, 231, 38, 47, 64, 144, 73, 216, 66, 99, 20, 69, 139, 228, 109, 12, 77, 122, 13, 100, 132, 136, 175, 172, 184, 37, 212, 79, 134, 51, 48, 114, 157, 111, 24, 244, 149, 191, 250, 175, 50, 69, 77, 100, 163, 198, 89, 136, 158, 91, 133, 180, 189, 132, 54, 214, 159, 60, 200, 106, 113, 204, 227, 191, 16, 212, 248, 127, 135, 149, 57, 48, 181, 24, 238, 123, 172, 251, 157, 207, 37, 79, 212, 127, 112, 73, 225, 166, 138, 187, 56, 74, 236, 170, 68, 98, 146, 94, 113, 39, 127, 206, 31, 80, 72, 204, 214, 82, 86, 159, 11, 42, 106, 147, 224, 0, 161, 200, 248, 166, 138, 185, 113, 170, 240, 127, 135, 146, 31, 106, 156, 57, 32, 208, 74, 252, 254, 206, 35, 140, 87, 236, 44, 194, 255, 70, 105, 121, 9, 208, 146, 89, 17, 133, 195, 209, 47, 65, 29, 67, 64, 198, 5, 155, 226, 54, 50, 205, 71, 237, 210, 203, 220, 199, 178, 34, 8, 196, 58, 246, 243, 45, 76, 60, 212, 227, 177, 183, 149, 135, 200, 159, 114, 181, 127, 219, 222, 170, 224, 201, 103, 12, 92, 125, 139, 6, 1, 142, 63, 143, 151, 216, 14, 228, 109, 144, 233, 96, 64, 152, 110, 29, 176, 47, 75, 27, 2, 251, 40, 143, 145, 9, 164, 178, 102, 188, 206, 252, 21, 129, 105, 121, 140, 68, 210, 25, 98, 67, 17, 209, 155, 65, 189, 81, 55, 5, 141, 3, 89, 38, 62, 47, 133, 21, 242, 8, 4, 129, 210, 215, 34, 95, 107, 98, 52, 164, 167, 241, 68, 131, 5, 176, 2, 107, 171, 173, 56, 226, 95, 47, 98, 61, 96, 97, 68, 163, 158, 175, 100, 77, 89, 133, 54, 91, 132, 182, 50, 126, 69, 226, 189, 58, 237, 84, 49, 223, 71, 76, 203, 246, 220, 190, 45, 213, 165, 219, 137, 227, 161, 159, 0, 60, 149, 224, 183, 214, 10, 212, 191, 11, 104, 244, 86, 103, 192, 12, 6, 139, 1, 216, 92, 109, 221, 151, 229, 143, 125, 142, 174, 83, 142, 92, 153, 232, 46, 16, 78, 31, 101, 207, 123, 10, 217, 248, 23, 71, 237, 205, 190, 220, 210, 178, 199, 58, 223, 219, 243, 246, 167, 8, 49, 82, 214, 248, 106, 57, 80, 186, 118, 183, 156, 159, 240, 147, 113, 150, 32, 210, 190, 178, 203, 71, 237, 34, 220, 196, 21, 8, 9, 4, 243, 167, 242, 236, 188, 252, 102, 68, 254, 87, 74, 146, 194, 140, 164, 98, 97, 105, 185, 123, 217, 225, 112, 101, 48, 24, 142, 83, 184, 115, 23, 202, 92, 104, 244, 85, 140, 240, 105, 146, 70, 44, 147, 187, 106, 252, 156, 57, 148, 28, 150, 55, 195, 17, 189, 155, 89, 81, 67, 141, 65, 133, 40, 47, 3, 5, 64, 205, 190, 196, 178, 21, 203, 8, 34, 220, 4, 71, 167, 215, 242, 243, 129, 137, 213, 45, 41, 88, 165, 76, 246, 134, 120, 114, 250, 36, 19, 22, 51, 149, 244, 60, 191, 181, 104, 37, 200, 10, 183, 227, 184, 127, 48, 207, 135, 45, 137, 76, 165, 246, 88, 211, 41, 114, 84, 134, 220, 250, 199, 49, 120, 204, 183, 159, 106, 80, 186, 147, 82, 200, 57, 248, 11, 227, 60, 113, 224, 4, 167, 94, 74, 21, 98, 8, 241, 196, 243, 129, 68, 107, 242, 170, 138, 180, 139, 12, 228, 66, 109, 20, 99, 103, 201, 6, 14, 192, 13, 69, 151, 207, 225, 101, 230, 23, 78, 112, 123, 104, 10, 142, 83, 202, 115, 244, 92, 154, 169, 253, 235, 30, 117, 234, 33, 108, 160, 13, 116, 39, 168, 28, 93, 243, 220, 223, 167, 203, 177, 246, 222, 215, 165, 191, 241, 237, 170, 4, 8, 243, 219, 246, 203, 8, 210, 237, 167, 190, 223, 71, 45, 4, 241, 215, 165, 174, 229, 1, 130, 245, 201, 6, 103, 101, 230, 92, 192, 12, 139, 142, 249, 177, 148, 11, 219, 224, 159, 147, 60, 191, 227, 223, 183, 214, 200, 80, 243, 49, 199, 58, 219, 237, 220, 246, 203, 84, 71, 177, 76, 165, 243, 222, 45, 11, 227, 159, 161, 200, 86, 60, 72, 214, 177, 186, 0, 222, 42, 183, 191, 112, 115, 207, 162, 24, 217, 123, 101, 7, 37, 48, 184, 238, 245, 230, 59, 54, 131, 133, 56, 97, 5, 197, 158, 171, 126, 89, 15, 198, 189, 17, 132, 200, 159, 60, 161, 224, 191, 149, 183, 0, 11, 177, 214, 212, 222, 244, 86, 14, 132, 13, 216, 63, 66, 180, 77, 39, 100, 125, 91, 116, 12, 30, 163, 101, 174, 221, 230, 1, 92, 245, 130, 142, 78, 201, 217, 192, 202, 103, 249, 101, 229, 78, 217, 249, 130, 245, 92, 207, 142, 174, 225, 23, 202, 221, 112, 26, 119, 124, 22, 19, 36, 179, 145, 27, 73, 3, 157, 152, 111, 211, 51, 46, 202, 83, 153, 31, 90, 248, 142, 16, 32, 93, 118, 92, 113, 156, 63, 193, 64, 29, 144, 75, 110, 40, 152, 96, 47, 27, 145, 143, 176, 73, 238, 253, 13, 169, 30, 154, 218, 235, 116, 66, 91, 39, 14, 132, 117, 122, 228, 169, 117, 218, 234, 116, 154, 253, 90, 30, 93, 160, 168, 13, 39, 33, 151, 206, 68, 146, 185, 87, 74, 97, 102, 188, 98, 56, 254, 252, 166, 33, 108, 71, 203, 199, 58, 190, 220, 205, 223, 84, 246, 210, 76, 49, 219, 45, 178, 24, 110, 128, 59, 73, 184, 48, 123, 112, 7, 144, 172, 75, 157, 225, 143, 173, 120, 52, 242, 107, 241, 8, 19, 38, 41, 2, 250, 4, 196, 95, 197, 57, 156, 106, 85, 208, 187, 32, 113, 166, 147, 150, 146, 118, 204, 80, 214, 120, 8, 4, 94, 250, 243, 215, 107, 173, 242, 239, 167, 196, 79, 220, 2, 196, 8, 52, 107, 4, 95, 21, 173, 129, 239, 241, 34, 215, 120, 98, 94, 220, 219, 167, 241, 8, 215, 4, 94, 250, 120, 246, 210, 196, 170, 21, 165, 104, 149, 212, 37, 10, 23, 207, 181, 200, 217, 0, 225, 60, 227, 161, 191, 130, 7, 174, 229, 1, 101, 249, 230, 221, 112, 162, 225, 217, 123, 207, 115, 76, 45, 213, 165, 137, 220, 41, 88, 199, 211, 84, 223, 243, 49, 237, 114, 150, 156, 118, 32, 57, 93, 160, 240, 85, 28, 82, 90, 117, 106, 146, 248, 204, 82, 118, 46, 57, 106, 156, 32, 214, 113, 232, 16, 83, 183, 31, 240, 130, 230, 245, 217, 101, 162, 229, 174, 225, 112, 78, 115, 7, 221, 207, 23, 79, 120, 241, 114, 134, 157, 243, 165, 239, 135, 8, 94, 41, 211, 173, 181, 96, 2, 127, 48, 144, 176, 184, 79, 135, 193, 157, 250, 125, 94, 170, 138, 188, 140, 254, 206, 44, 105, 35, 70, 236, 194, 87, 208, 255, 146, 9, 28, 154, 234, 30, 218, 13, 169, 91, 235, 126, 132, 39, 108, 116, 117, 66, 14, 188, 87, 255, 252, 35, 206, 44, 70, 236, 140, 108, 121, 146, 28, 33, 194, 87, 254, 44, 70, 188, 35, 108, 252, 28, 33, 206, 146, 236, 160, 168, 140};
+#else
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/data.h gem5-SALAM/benchmarks/sys_validation/md_knn/sw/data.h
--- gem5/benchmarks/sys_validation/md_knn/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/data.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,9 @@
+#include "../defines.h"
+
+extern const TYPE p_x[nAtoms];
+extern const TYPE p_y[nAtoms];
+extern const TYPE p_z[nAtoms];
+extern const TYPE c_x[nAtoms];
+extern const TYPE c_y[nAtoms];
+extern const TYPE c_z[nAtoms];
+extern const int n_l[nAtoms*maxNeighbors];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/md_knn/sw/.gitignore
--- gem5/benchmarks/sys_validation/md_knn/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/.gitignore	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/isr.c gem5-SALAM/benchmarks/sys_validation/md_knn/sw/isr.c
--- gem5/benchmarks/sys_validation/md_knn/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/isr.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/md_knn/sw/main.cpp
--- gem5/benchmarks/sys_validation/md_knn/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/main.cpp	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,91 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include <cmath>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+#define BASE            0x80c00000
+#define FRCX_OFFSET     0
+#define FRCY_OFFSET     (FRCX_OFFSET  + sizeof(TYPE)*nAtoms)
+#define FRCZ_OFFSET     (FRCY_OFFSET  + sizeof(TYPE)*nAtoms)
+#define POSX_OFFSET     (FRCZ_OFFSET  + sizeof(TYPE)*nAtoms)
+#define POSY_OFFSET     (POSX_OFFSET  + sizeof(TYPE)*nAtoms)
+#define POSZ_OFFSET     (POSY_OFFSET  + sizeof(TYPE)*nAtoms)
+#define NL_OFFSET       (POSZ_OFFSET  + sizeof(TYPE)*nAtoms)
+#define CHKX_OFFSET     (NL_OFFSET    + sizeof(int32_t)*nAtoms*maxNeighbors)
+#define CHKY_OFFSET     (CHKX_OFFSET  + sizeof(TYPE)*nAtoms)
+#define CHKZ_OFFSET     (CHKY_OFFSET  + sizeof(TYPE)*nAtoms)
+
+md_struct mds;
+
+volatile uint8_t  * top            = (uint8_t  *) (TOP + 0);
+volatile uint32_t * loc_force_x    = (uint32_t *) (TOP + 1);
+volatile uint32_t * loc_force_y    = (uint32_t *) (TOP + 9);
+volatile uint32_t * loc_force_z    = (uint32_t *) (TOP + 17);
+volatile uint32_t * loc_position_x = (uint32_t *) (TOP + 25);
+volatile uint32_t * loc_position_y = (uint32_t *) (TOP + 33);
+volatile uint32_t * loc_position_z = (uint32_t *) (TOP + 41);
+volatile uint32_t * loc_NL         = (uint32_t *) (TOP + 49);
+
+int main(void) {
+	TYPE *force_x       = (TYPE     *)(BASE+FRCX_OFFSET);
+	TYPE *force_y       = (TYPE     *)(BASE+FRCY_OFFSET);
+	TYPE *force_z       = (TYPE     *)(BASE+FRCZ_OFFSET);
+	TYPE *position_x    = (TYPE     *)(BASE+POSX_OFFSET);
+	TYPE *position_y    = (TYPE     *)(BASE+POSY_OFFSET);
+	TYPE *position_z    = (TYPE     *)(BASE+POSZ_OFFSET);
+	int32_t *NL         = (int32_t  *)(BASE+NL_OFFSET);
+	TYPE *check_x       = (TYPE     *)(BASE+CHKX_OFFSET);
+	TYPE *check_y       = (TYPE     *)(BASE+CHKY_OFFSET);
+	TYPE *check_z       = (TYPE     *)(BASE+CHKZ_OFFSET);
+
+    volatile int count = 0;
+    stage = 0;
+
+    mds.force_x     = force_x;
+    mds.force_y     = force_y;
+    mds.force_z     = force_z;
+    mds.position_x  = position_x;
+    mds.position_y  = position_y;
+    mds.position_z  = position_z;
+    mds.NL          = NL;
+    mds.check_x     = check_x;
+    mds.check_y     = check_y;
+    mds.check_z     = check_z;
+
+    printf("Generating data\n");
+    genData(&mds);
+    printf("Data generated\n");
+
+    *loc_force_x     = (uint32_t)(void *)force_x;
+    *loc_force_y     = (uint32_t)(void *)force_y;
+    *loc_force_z     = (uint32_t)(void *)force_z;
+    *loc_position_x  = (uint32_t)(void *)position_x;
+    *loc_position_y  = (uint32_t)(void *)position_y;
+    *loc_position_z  = (uint32_t)(void *)position_z;
+    *loc_NL          = (uint32_t)(void *)NL;
+
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+    bool fail = false;
+    for (int i = 0; i < nAtoms; i++) {
+        if ((std::abs(force_x[i]-check_x[i])/check_x[i] > EPSILON) ||
+            (std::abs(force_y[i]-check_y[i])/check_y[i] > EPSILON) ||
+            (std::abs(force_z[i]-check_z[i])/check_z[i] > EPSILON)) {
+            fail = true;
+            break;
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+    m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/md_knn/sw/Makefile gem5-SALAM/benchmarks/sys_validation/md_knn/sw/Makefile
--- gem5/benchmarks/sys_validation/md_knn/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/md_knn/sw/Makefile	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/mergesort/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/mergesort/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/configs/quick_config.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/config.yml gem5-SALAM/benchmarks/sys_validation/mergesort/config.yml
--- gem5/benchmarks/sys_validation/mergesort/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/config.yml	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,286 @@
+---
+acc_cluster:
+  - Name: merge_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 25
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: mergesort
+      IrPath: hw/mergesort.ll
+      Debug: True
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: MAIN
+        Type: SPM
+        Size: 8192
+        Ports: 1
+    - Var:
+      - Name: TEMP
+        Type: SPM
+        Size: 8192
+        Ports: 1
+        ReadyMode: False
+        ResetOnRead: True
+hw_config:
+  top:
+  mergesort:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/defines.h gem5-SALAM/benchmarks/sys_validation/mergesort/defines.h
--- gem5/benchmarks/sys_validation/mergesort/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/defines.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,9 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#define CHECK
+
+#define TYPE uint32_t
+#define SIZE 2048
+
+#endif
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/.gitignore gem5-SALAM/benchmarks/sys_validation/mergesort/.gitignore
--- gem5/benchmarks/sys_validation/mergesort/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/.gitignore	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,3 @@
+config.ini
+simulation/
+*.ll
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/mergesort/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/mergesort/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/hw/hw_defines.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,12 @@
+//Standard Libraries
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../merge_clstr_hw_defines.h"
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+#define arr_size SIZE*sizeof(TYPE)
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/hw/Makefile gem5-SALAM/benchmarks/sys_validation/mergesort/hw/Makefile
--- gem5/benchmarks/sys_validation/mergesort/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/hw/Makefile	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,6 @@
+KERN=mergesort.c top.c
+build: $(FILES)
+	clang -O1 -S -target armv7-pc-none-eabi -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/hw/mergesort.c gem5-SALAM/benchmarks/sys_validation/mergesort/hw/mergesort.c
--- gem5/benchmarks/sys_validation/mergesort/hw/mergesort.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/hw/mergesort.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,60 @@
+#include "hw_defines.h"
+
+void merge(int start, int m, int stop){
+    
+    uint8_t * arrBase = (uint8_t *)MAIN;
+    uint8_t * tempBase = (uint8_t *)(TEMP);
+    TYPE    * a     = (TYPE    *)arrBase;
+    TYPE    * temp     = (TYPE    *)tempBase;
+    
+    int i, j, k;
+
+    merge_label1 : for(i=start; i<=m; i++){
+        temp[i] = a[i];
+    }
+
+    merge_label2 : for(j=m+1; j<=stop; j++){
+        temp[m+1+stop-j] = a[j];
+    }
+
+    i = start;
+    j = stop;
+
+
+    merge_label3 : for(k=start; k<=stop; k++){
+        TYPE tmp_j = temp[j];
+        TYPE tmp_i = temp[i];
+        if(tmp_j < tmp_i) {
+            a[k] = tmp_j;
+            j--;
+        } else {
+            a[k] = tmp_i;
+            i++;
+        }
+    }
+}
+
+void top() {
+    int start, stop;
+    int i, m, from, mid, to;
+
+    uint8_t * arrBase = (uint8_t *)MAIN;
+    volatile TYPE    * a     = (TYPE    *)arrBase;
+    
+    start = 0;
+    stop = SIZE;
+
+    mergesort_label1 : for(m=1; m<stop-start; m+=m) {
+        mergesort_label2 : for(i=start; i<stop; i+=m+m) {
+            from = i;
+            mid = i+m-1;
+            to = i+m+m-1;
+            if(to < stop){
+                merge(from, mid, to);
+            }
+            else{
+                merge(from, mid, stop);
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/hw/top.c gem5-SALAM/benchmarks/sys_validation/mergesort/hw/top.c
--- gem5/benchmarks/sys_validation/mergesort/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/hw/top.c	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,33 @@
+#include "hw_defines.h"
+
+void top(uint64_t unsorted,
+		 uint64_t sorted) {
+
+	//Define Device MMRs
+	volatile uint8_t  * SORTFlags  = (uint8_t *)MERGESORT;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Result
+	*DmaRdAddr  = unsorted;
+	*DmaWrAddr  = MAIN;
+	*DmaCopyLen = arr_size;
+	*DmaFlags   = DEV_INIT;
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*SORTFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*SORTFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer Result
+	*DmaRdAddr  = MAIN;
+	*DmaWrAddr  = sorted;
+	*DmaCopyLen = arr_size;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/Makefile gem5-SALAM/benchmarks/sys_validation/mergesort/Makefile
--- gem5/benchmarks/sys_validation/mergesort/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/Makefile	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/merge_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/mergesort/merge_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/mergesort/merge_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/merge_clstr_hw_defines.h	2024-02-22 18:17:14.836943096 -0600
@@ -0,0 +1,14 @@
+//BEGIN GENERATED CODE
+//Cluster: MERGE_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: MERGESORT
+#define MERGESORT 0x10020080
+#define MAIN 0x100200c0
+#define TEMP 0x10022100
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/bench.h gem5-SALAM/benchmarks/sys_validation/mergesort/sw/bench.h
--- gem5/benchmarks/sys_validation/mergesort/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/bench.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,16 @@
+#include "../defines.h"
+
+#define rcIndex     (r*ROW + c)
+
+volatile int stage;
+
+// void genData(gemm_struct * ges) {
+//     int r, c, k, mult, sum;
+
+//     for( r=0; r < ges->row_size; r++ ) {
+//         for( c=0; c < ges->col_size; c++ ) {
+//             ges->a[rcIndex] = rcIndex;
+//             ges->b[rcIndex] = (ges->row_size * ges->col_size) - 1 - rcIndex;
+//         }
+//     }
+// }
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/mergesort/sw/boot.ld
--- gem5/benchmarks/sys_validation/mergesort/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/boot.ld	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/boot.s gem5-SALAM/benchmarks/sys_validation/mergesort/sw/boot.s
--- gem5/benchmarks/sys_validation/mergesort/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/boot.s	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/mergesort/sw/.gitignore
--- gem5/benchmarks/sys_validation/mergesort/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/isr.c gem5-SALAM/benchmarks/sys_validation/mergesort/sw/isr.c
--- gem5/benchmarks/sys_validation/mergesort/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/isr.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/mergesort/sw/main.cpp
--- gem5/benchmarks/sys_validation/mergesort/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/main.cpp	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,58 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+#include "../merge_clstr_hw_defines.h"
+
+volatile uint8_t  * top   = (uint8_t  *) (TOP + 0x00);
+volatile uint32_t * unsorted = (uint32_t *) (TOP + 0x01);
+volatile uint32_t * sorted = (uint32_t *) (TOP + 0x09);
+
+int __attribute__ ((optimize("0"))) main(void) {
+	m5_reset_stats();
+    uint32_t base = 0x80c00000;
+	TYPE *originalArr = (TYPE *)base;
+    TYPE *sortedArr = (TYPE *) (base+SIZE*sizeof(TYPE));
+    int j = 0;
+    for(int i = SIZE-1; i >= 0; i--) {
+        originalArr[j] = i;
+        j++;
+    }
+    // printf("Top: %x\n", top);
+    // printf("Top + 1: %x\n", unsorted);
+    // printf("Top + 9: %x\n", sorted);
+    // Prints out generated array
+    // for(int i = 0; i < SIZE; i++){
+    //     printf("Original Array: Index: %d Value: %d\n", i, originalArr[i]);
+    // }
+    // Prints out what should be the empty sorted array
+    // for(int i = 0; i < SIZE; i++){
+    //     printf("Empty Array: Index: %d Value: %d\n", i, sortedArr[i]);
+    // }
+    volatile int count = 0;
+	stage = 0;
+
+    // Set top address MMRs
+    *unsorted = (uint32_t)(void *) originalArr;
+    *sorted = (uint32_t)(void *) sortedArr;
+    // Run the top level function
+    *top = 0x01;
+    while (stage < 1) count++;
+    #ifdef CHECK
+    bool fail = false;
+    for(int i = 0; i < SIZE; i++){
+        if(i != sortedArr[i]){
+            printf("ERROR: Index: %d Value: %d \n", i, sortedArr[i]);
+            fail = true;
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+    #endif
+    printf("Job complete\n");
+	m5_dump_stats();
+	m5_exit();
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/mergesort/sw/Makefile gem5-SALAM/benchmarks/sys_validation/mergesort/sw/Makefile
--- gem5/benchmarks/sys_validation/mergesort/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/mergesort/sw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/nw/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/nw/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/nw/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/configs/quick_config.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/config.yml gem5-SALAM/benchmarks/sys_validation/nw/config.yml
--- gem5/benchmarks/sys_validation/nw/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/config.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,304 @@
+---
+acc_cluster:
+  - Name: nw_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 33
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: nw
+      IrPath: hw/nw.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: SEQA
+        Type: RegisterBank
+        Size: 128
+        Ports: 2
+    - Var:
+      - Name: SEQB
+        Type: RegisterBank
+        Size: 128
+        Ports: 2
+    - Var:
+      - Name: ALIGNEDA
+        Type: RegisterBank
+        Size: 256
+        Ports: 2
+    - Var:
+      - Name: ALIGNEDB
+        Type: RegisterBank
+        Size: 256
+        Ports: 2
+    - Var:
+      - Name: M
+        Type: SPM
+        Size: 66564
+        Ports: 2
+    - Var:
+      - Name: PTR
+        Type: SPM
+        Size: 16641
+        Ports: 2
+hw_config:
+  top:
+  nw:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/defines.h gem5-SALAM/benchmarks/sys_validation/nw/defines.h
--- gem5/benchmarks/sys_validation/nw/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/defines.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,9 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#define CHECK
+
+#define ALEN 128
+#define BLEN 128
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/.gitignore gem5-SALAM/benchmarks/sys_validation/nw/.gitignore
--- gem5/benchmarks/sys_validation/nw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/nw/hw/.gitignore
--- gem5/benchmarks/sys_validation/nw/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/nw/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/nw/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/hw_defines.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,10 @@
+//Standard Libraries
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../nw_clstr_hw_defines.h"
+
+#define DEV_INIT		0x01
+#define DEV_INTR		0x04
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/Makefile gem5-SALAM/benchmarks/sys_validation/nw/hw/Makefile
--- gem5/benchmarks/sys_validation/nw/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,6 @@
+KERN=nw.c top.c
+
+build : $(FILES)
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm $(KERN)
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/nw.c gem5-SALAM/benchmarks/sys_validation/nw/hw/nw.c
--- gem5/benchmarks/sys_validation/nw/hw/nw.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/nw.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,103 @@
+#include "hw_defines.h"
+
+#define MATCH_SCORE 1
+#define MISMATCH_SCORE -1
+#define GAP_SCORE -1
+
+#define ALIGN '\\'
+#define SKIPA '^'
+#define SKIPB '<'
+
+#define MAX(A,B) ( ((A)>(B))?(A):(B) )
+
+void needwun(){
+
+    volatile uint8_t * seqA     = (uint8_t *)SEQA;
+    volatile uint8_t * seqB     = (uint8_t *)SEQB;
+    volatile uint8_t * alignedA = (uint8_t *)ALIGNEDA;
+    volatile uint8_t * alignedB = (uint8_t *)ALIGNEDB;
+    volatile int32_t * m        = (int32_t *)M;
+    volatile uint8_t * ptr      = (uint8_t *)PTR;
+
+    int score, up_left, up, left, max;
+    int row, row_up, r;
+    int a_idx, b_idx;
+    int a_str_idx, b_str_idx;
+
+    init_row:
+    for(a_idx=0; a_idx<(ALEN+1); a_idx++){
+        m[a_idx] = a_idx * GAP_SCORE;
+    }
+    init_col:
+    for(b_idx=0; b_idx<(BLEN+1); b_idx++){
+        m[b_idx*(ALEN+1)] = b_idx * GAP_SCORE;
+    }
+
+    // Matrix filling loop
+    fill_out:
+    for(b_idx=1; b_idx<(BLEN+1); b_idx++){
+        fill_in:
+        for(a_idx=1; a_idx<(ALEN+1); a_idx++){
+            if(seqA[a_idx-1] == seqB[b_idx-1]){
+                score = MATCH_SCORE;
+            } else {
+                score = MISMATCH_SCORE;
+            }
+
+            row_up = (b_idx-1)*(ALEN+1);
+            row = (b_idx)*(ALEN+1);
+
+            up_left = m[row_up + (a_idx-1)] + score;
+            up      = m[row_up + (a_idx  )] + GAP_SCORE;
+            left    = m[row    + (a_idx-1)] + GAP_SCORE;
+
+            max = MAX(up_left, MAX(up, left));
+
+            m[row + a_idx] = max;
+            if(max == left){
+                ptr[row + a_idx] = SKIPB;
+            } else if(max == up){
+                ptr[row + a_idx] = SKIPA;
+            } else{
+                ptr[row + a_idx] = ALIGN;
+            }
+        }
+    }
+
+    // TraceBack (n.b. aligned sequences are backwards to avoid string appending)
+    a_idx = ALEN;
+    b_idx = BLEN;
+    a_str_idx = 0;
+    b_str_idx = 0;
+
+    trace:
+    while(a_idx>0 || b_idx>0) {
+        r = b_idx*(ALEN+1);
+        if (ptr[r + a_idx] == ALIGN){
+            alignedA[a_str_idx++] = seqA[a_idx-1];
+            alignedB[b_str_idx++] = seqB[b_idx-1];
+            a_idx--;
+            b_idx--;
+        }
+        else if (ptr[r + a_idx] == SKIPB){
+            alignedA[a_str_idx++] = seqA[a_idx-1];
+            alignedB[b_str_idx++] = '-';
+            a_idx--;
+        }
+        else{ // SKIPA
+            alignedA[a_str_idx++] = '-';
+            alignedB[b_str_idx++] = seqB[b_idx-1];
+            b_idx--;
+        }
+    }
+
+    // Pad the result
+    pad_a:
+    for( ; a_str_idx<ALEN+BLEN; a_str_idx++ ) {
+      alignedA[a_str_idx] = '_';
+    }
+    pad_b:
+    for( ; b_str_idx<ALEN+BLEN; b_str_idx++ ) {
+      alignedB[b_str_idx] = '_';
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/support.h gem5-SALAM/benchmarks/sys_validation/nw/hw/support.h
--- gem5/benchmarks/sys_validation/nw/hw/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/support.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,135 @@
+#include <stdlib.h>
+#include <inttypes.h>
+
+///// File and section functions
+char *readfile(int fd);
+char *find_section_start(char *s, int n);
+
+///// Array read functions
+#define SECTION_TERMINATED -1
+int parse_string(char *s, char *arr, int n); // n==-1 : %%-terminated
+int parse_uint8_t_array(char *s, uint8_t *arr, int n);
+int parse_uint16_t_array(char *s, uint16_t *arr, int n);
+int parse_uint32_t_array(char *s, uint32_t *arr, int n);
+int parse_uint64_t_array(char *s, uint64_t *arr, int n);
+int parse_int8_t_array(char *s, int8_t *arr, int n);
+int parse_int16_t_array(char *s, int16_t *arr, int n);
+int parse_int32_t_array(char *s, int32_t *arr, int n);
+int parse_int64_t_array(char *s, int64_t *arr, int n);
+int parse_float_array(char *s, float *arr, int n);
+int parse_double_array(char *s, double *arr, int n);
+
+///// Array write functions
+int write_string(int fd, char *arr, int n);
+int write_uint8_t_array(int fd, uint8_t *arr, int n);
+int write_uint16_t_array(int fd, uint16_t *arr, int n);
+int write_uint32_t_array(int fd, uint32_t *arr, int n);
+int write_uint64_t_array(int fd, uint64_t *arr, int n);
+int write_int8_t_array(int fd, int8_t *arr, int n);
+int write_int16_t_array(int fd, int16_t *arr, int n);
+int write_int32_t_array(int fd, int32_t *arr, int n);
+int write_int64_t_array(int fd, int64_t *arr, int n);
+int write_float_array(int fd, float *arr, int n);
+int write_double_array(int fd, double *arr, int n);
+
+int write_section_header(int fd);
+
+///// Per-benchmark files
+void run_benchmark( void *vargs );
+void input_to_data(int fd, void *vdata);
+void data_to_input(int fd, void *vdata);
+void output_to_data(int fd, void *vdata);
+void data_to_output(int fd, void *vdata);
+int check_data(void *vdata, void *vref);
+
+extern int INPUT_SIZE;
+
+///// TYPE macros
+// Macro trick to automatically expand TYPE into the appropriate function
+// (S)et (T)ype (A)nd (C)oncatenate
+#define __STAC_EXPANDED(f_pfx,t,f_sfx) f_pfx##t##f_sfx
+#define STAC(f_pfx,t,f_sfx) __STAC_EXPANDED(f_pfx,t,f_sfx)
+// Invoke like this:
+//   #define TYPE int32_t
+//   STAC(write_,TYPE,_array)(fd, array, n);
+// where array is of type (TYPE *)
+// This translates to:
+//   write_int32_t_array(fd, array, n);
+
+
+/**** PRNG library. Available at https://github.com/rdadolf/prng. *****/
+#ifndef __PRNG_H__
+#define __PRNG_H__
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#define LAG1 (UINT16_C(24))
+#define LAG2 (UINT16_C(55))
+#define RAND_SSIZE ((UINT16_C(1))<<6)
+#define RAND_SMASK (RAND_SSIZE-1)
+#define RAND_EXHAUST_LIMIT LAG2
+// 10x is a heuristic, it just needs to be large enough to remove correlation
+#define RAND_REFILL_COUNT ((LAG2*10)-RAND_EXHAUST_LIMIT)
+struct prng_rand_t {
+  uint64_t s[RAND_SSIZE]; // Lags
+  uint_fast16_t i; // Location of the current lag
+  uint_fast16_t c; // Exhaustion count
+};
+
+#define PRNG_RAND_MAX UINT64_MAX
+
+
+static inline uint64_t prng_rand(struct prng_rand_t *state) {
+  uint_fast16_t i;
+  uint_fast16_t r, new_rands=0;
+
+  if( !state->c ) { // Randomness exhausted, run forward to refill
+    new_rands += RAND_REFILL_COUNT+1;
+    state->c = RAND_EXHAUST_LIMIT-1;
+  } else {
+    new_rands = 1;
+    state->c--;
+  }
+
+  for( r=0; r<new_rands; r++ ) {
+    i = state->i;
+    state->s[i&RAND_SMASK] = state->s[(i+RAND_SSIZE-LAG1)&RAND_SMASK]
+                              + state->s[(i+RAND_SSIZE-LAG2)&RAND_SMASK];
+    state->i++;
+  }
+  return state->s[i&RAND_SMASK];
+}
+
+static inline void prng_srand(uint64_t seed, struct prng_rand_t *state) {
+  uint_fast16_t i;
+  // Naive seed
+  state->c = RAND_EXHAUST_LIMIT;
+  state->i = 0;
+
+  state->s[0] = seed;
+  for(i=1; i<RAND_SSIZE; i++) {
+    // Arbitrary magic, mostly to eliminate the effect of low-value seeds.
+    // Probably could be better, but the run-up obviates any real need to.
+    state->s[i] = i*(UINT64_C(2147483647)) + seed;
+  }
+
+  // Run forward 10,000 numbers
+  for(i=0; i<10000; i++) {
+    prng_rand(state);
+  }
+}
+
+// Clean up our macros
+#undef LAG1
+#undef LAG2
+#undef RAND_SSIZE
+#undef RAND_SMASK
+#undef RAND_EXHAUST_LIMIT
+#undef RAND_REFILL_COUNT
+
+// PRNG_RAND_MAX is exported
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/hw/top.c gem5-SALAM/benchmarks/sys_validation/nw/hw/top.c
--- gem5/benchmarks/sys_validation/nw/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/hw/top.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,53 @@
+#include "hw_defines.h"
+
+void top(uint64_t seqa_addr,
+		 uint64_t seqb_addr,
+		 uint64_t aligneda_addr,
+		 uint64_t alignedb_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * NWFlags    = (uint8_t *)NW;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer SEQA
+	*DmaRdAddr  = seqa_addr;
+	*DmaWrAddr  = SEQA;
+	*DmaCopyLen = ALEN;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer SEQB
+	*DmaRdAddr  = seqb_addr;
+	*DmaWrAddr  = SEQB;
+	*DmaCopyLen = BLEN;
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*NWFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*NWFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer AlignedA
+	*DmaRdAddr  = ALIGNEDA;
+	*DmaWrAddr  = aligneda_addr;
+	*DmaCopyLen = (ALEN+BLEN);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer AlignedB
+	*DmaRdAddr  = ALIGNEDB;
+	*DmaWrAddr  = alignedb_addr;
+	*DmaCopyLen = (ALEN+BLEN);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/Makefile gem5-SALAM/benchmarks/sys_validation/nw/Makefile
--- gem5/benchmarks/sys_validation/nw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/nw_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/nw/nw_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/nw/nw_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/nw_clstr_hw_defines.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,18 @@
+//BEGIN GENERATED CODE
+//Cluster: NW_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: NW
+#define NW 0x10020080
+#define SEQA 0x100200c0
+#define SEQB 0x10020180
+#define ALIGNEDA 0x10020240
+#define ALIGNEDB 0x10020380
+#define M 0x100204c0
+#define PTR 0x10030900
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/bench.h gem5-SALAM/benchmarks/sys_validation/nw/sw/bench.h
--- gem5/benchmarks/sys_validation/nw/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/bench.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,29 @@
+#include "../defines.h"
+#include "../nw_clstr_hw_defines.h"
+
+#include "data.h"
+
+volatile int stage;
+
+typedef struct {
+    char * seqA;
+    char * seqB;
+    char * alignedA;
+    char * alignedB;
+    char * checkA;
+    char * checkB;
+} nw_struct;
+
+void genData(nw_struct * nws) {
+    int i;
+    for (i = 0; i < ALEN; i++) {
+        nws->seqA[i] = a[i];
+    }
+    for (i = 0; i < BLEN; i++) {
+        nws->seqB[i] = b[i];
+    }
+    for (i = 0; i < (ALEN+BLEN); i++) {
+        nws->checkA[i] = alia[i];
+        nws->checkB[i] = alib[i];
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/nw/sw/boot.ld
--- gem5/benchmarks/sys_validation/nw/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/boot.ld	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/boot.s gem5-SALAM/benchmarks/sys_validation/nw/sw/boot.s
--- gem5/benchmarks/sys_validation/nw/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/boot.s	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/data.c gem5-SALAM/benchmarks/sys_validation/nw/sw/data.c
--- gem5/benchmarks/sys_validation/nw/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/data.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,13 @@
+#include "data.h"
+
+#ifndef TEST
+const char *a = "tcgacgaaataggatgacagcacgttctcgtattagagggccgcggtacaaaccaaatgctgcggcgtacagggcacggggcgctgttcgggagatcgggggaatcgtggcgtgggtgattcgccggc";
+const char *b = "ttcgagggcgcgtgtcgcggtccatcgacatgcccggtcggtgggacgtgggcgcctgatatagaggaatgcgattggaaggtcggacgggtcggcgagttgggcccggtgaatctgccatggtcgat";
+const char *alia = "cggccgcttag-tgggtgcggtgctaagggggctagagggcttg-tc-gcggggcacgggacatgcg--gcg-t--cgtaaaccaaacat-g-gcgccgggag-attatgctcttgcacg-acag-ta----g-gat-aaagc---agc-t_________________________________________________________________________________________________________";
+const char *alib = "--------tagct-ggtaccgt-ctaa-gtggc--ccggg-ttgagcggctgggca--gg-c-tg-gaag-gttagcgt-aaggagatatagtccg-cgggtgcagggtg-gctggcccgtacagctacctggcgctgtgcgcgggagctt_________________________________________________________________________________________________________";
+#else
+const char *a = "tcgacgaaataggatg";
+const char *b = "ttcgagggcgcgtgtc";
+const char *alia = "--gtag-gataaagcagc-t____________";
+const char *alib = "ctgt-gcg---cgggagctt____________";
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/data.h gem5-SALAM/benchmarks/sys_validation/nw/sw/data.h
--- gem5/benchmarks/sys_validation/nw/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/data.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,6 @@
+#include "../defines.h"
+
+extern const char *a;
+extern const char *b;
+extern const char *alia;
+extern const char *alib;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/nw/sw/.gitignore
--- gem5/benchmarks/sys_validation/nw/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/isr.c gem5-SALAM/benchmarks/sys_validation/nw/sw/isr.c
--- gem5/benchmarks/sys_validation/nw/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/isr.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/nw/sw/main.cpp
--- gem5/benchmarks/sys_validation/nw/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/main.cpp	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,75 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+nw_struct nws;
+
+#define BASE        0x80c00000
+#define SEQA_OFF    0
+#define SEQB_OFF    SEQA_OFF   + ALEN
+#define ALIA_OFF    SEQB_OFF   + BLEN
+#define ALIB_OFF    ALIA_OFF   + (ALEN+BLEN)
+#define CHECKA_OFF  ALIB_OFF   + (ALEN+BLEN)
+#define CHECKB_OFF  CHECKA_OFF + (ALEN+BLEN)
+
+volatile uint8_t * top        = (uint8_t *)(TOP + 0x00);
+volatile int32_t * val_seqa   = (int32_t *)(TOP + 0x01);
+volatile int32_t * val_seqb   = (int32_t *)(TOP + 0x09);
+volatile int32_t * val_aligna = (int32_t *)(TOP + 0x11);
+volatile int32_t * val_alignb = (int32_t *)(TOP + 0x19);
+
+int main(void) {
+	char * seqA     = (char *)(BASE+SEQA_OFF);
+	char * seqB     = (char *)(BASE+SEQB_OFF);
+	char * alignedA = (char *)(BASE+ALIA_OFF);
+	char * alignedB = (char *)(BASE+ALIB_OFF);
+	char * checkA   = (char *)(BASE+CHECKA_OFF);
+	char * checkB   = (char *)(BASE+CHECKB_OFF);
+
+    volatile int count = 0;
+
+	stage = 0;
+    nws.seqA = seqA;
+    nws.seqB = seqB;
+    nws.alignedA = alignedA;
+    nws.alignedB = alignedB;
+    nws.checkA = checkA;
+    nws.checkB = checkB;
+
+    printf("Generating data\n");
+    genData(&nws);
+    printf("Data generated\n");
+
+    *val_seqa   = (uint32_t)(void *)seqA;
+    *val_seqb   = (uint32_t)(void *)seqB;
+    *val_aligna = (uint32_t)(void *)alignedA;
+    *val_alignb = (uint32_t)(void *)alignedB;
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+    bool fail = false;
+    for (int i = 0; i < (ALEN+BLEN); i++) {
+        if (alignedA[i] != checkA[i]) {
+            printf("Check Failed\n");
+            fail = true;
+            break;
+        }
+        if (alignedB[i] != checkB[i]) {
+            printf("Check Failed\n");
+            fail = true;
+            break;
+        }
+    }
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+	m5_dump_stats();
+    m5_exit();
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/nw/sw/Makefile gem5-SALAM/benchmarks/sys_validation/nw/sw/Makefile
--- gem5/benchmarks/sys_validation/nw/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/nw/sw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/config.yml gem5-SALAM/benchmarks/sys_validation/spmv/config.yml
--- gem5/benchmarks/sys_validation/spmv/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/config.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,299 @@
+---
+acc_cluster:
+  - Name: spmv_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 41
+      InterruptNum: 95
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: spmv
+      IrPath: hw/spmv.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: VAL
+        Type: SPM
+        Size: 13328
+        Ports: 2
+    - Var:
+      - Name: COLS
+        Type: SPM
+        Size: 6664
+        Ports: 2
+    - Var:
+      - Name: ROWDELIMS
+        Type: SPM
+        Size: 1980
+        Ports: 2
+    - Var:
+      - Name: VEC
+        Type: SPM
+        Size: 3952
+        Ports: 2
+    - Var:
+      - Name: OUT
+        Type: SPM
+        Size: 3952
+        Ports: 2
+hw_config:
+  top:
+  spmv:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 0
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/defines.h gem5-SALAM/benchmarks/sys_validation/spmv/defines.h
--- gem5/benchmarks/sys_validation/spmv/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/defines.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,25 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#include "spmv_clstr_hw_defines.h"
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+//#define SPM
+#define CHECK
+//#define TEST
+
+#ifndef TEST
+// These constants valid for the IEEE 494 bus interconnect matrix
+#define NNZ 1666
+#define N 494
+#define TYPE double
+
+#else
+#define NNZ 19
+#define N 7
+#define TYPE double
+#endif
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/.gitignore gem5-SALAM/benchmarks/sys_validation/spmv/.gitignore
--- gem5/benchmarks/sys_validation/spmv/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/spmv/hw/.gitignore
--- gem5/benchmarks/sys_validation/spmv/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/Makefile gem5-SALAM/benchmarks/sys_validation/spmv/hw/Makefile
--- gem5/benchmarks/sys_validation/spmv/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,7 @@
+KERN=spmv.c top.c
+
+build: $(FILES)
+	clang -O1 -S -m32 -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/spmv.c gem5-SALAM/benchmarks/sys_validation/spmv/hw/spmv.c
--- gem5/benchmarks/sys_validation/spmv/hw/spmv.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/spmv.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+/*
+Based on algorithm described here:
+http://www.cs.berkeley.edu/~mhoemmen/matrix-seminar/slides/UCB_sparse_tutorial_1.pdf
+*/
+#include "spmv.h"
+
+void spmv(TYPE val[NNZ], int32_t cols[NNZ], int32_t rowDelimiters[N+1], TYPE vec[N], TYPE out[N]) {
+    int i, j;
+    TYPE sum, Si;
+
+    spmv_1 : for(i = 0; i < N; i++){
+        sum = 0; Si = 0;
+        int tmp_begin = rowDelimiters[i];
+        int tmp_end = rowDelimiters[i+1];
+        spmv_2 : for (j = tmp_begin; j < tmp_end; j++){
+            Si = val[j] * vec[cols[j]];
+            sum = sum + Si;
+        }
+        out[i] = sum;
+    }
+}
+
+void top() {
+    void * val = (void *)VAL;
+    void * cols = (void *)COLS;
+    void * rowDelimiters = (void *)ROWDELIMS;
+    void * vec = (void *)VEC;
+    void * out = (void *)OUT;
+
+    spmv(val,cols,rowDelimiters,vec,out);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/spmv.h gem5-SALAM/benchmarks/sys_validation/spmv/hw/spmv.h
--- gem5/benchmarks/sys_validation/spmv/hw/spmv.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/spmv.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,22 @@
+/*
+Based on algorithm described here:
+http://www.cs.berkeley.edu/~mhoemmen/matrix-seminar/slides/UCB_sparse_tutorial_1.pdf
+*/
+
+#include <stdlib.h>
+#include <stdio.h>
+#include "support.h"
+#include "../defines.h"
+
+void spmv(TYPE val[NNZ], int32_t cols[NNZ], int32_t rowDelimiters[N + 1],
+          TYPE vec[N], TYPE out[N]);
+////////////////////////////////////////////////////////////////////////////////
+// Test harness interface code.
+
+struct bench_args_t {
+  TYPE val[NNZ];
+  int32_t cols[NNZ];
+  int32_t rowDelimiters[N+1];
+  TYPE vec[N];
+  TYPE out[N];
+};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/support.h gem5-SALAM/benchmarks/sys_validation/spmv/hw/support.h
--- gem5/benchmarks/sys_validation/spmv/hw/support.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/support.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,135 @@
+#include <stdlib.h>
+#include <inttypes.h>
+
+///// File and section functions
+char *readfile(int fd);
+char *find_section_start(char *s, int n);
+
+///// Array read functions
+#define SECTION_TERMINATED -1
+int parse_string(char *s, char *arr, int n); // n==-1 : %%-terminated
+int parse_uint8_t_array(char *s, uint8_t *arr, int n);
+int parse_uint16_t_array(char *s, uint16_t *arr, int n);
+int parse_uint32_t_array(char *s, uint32_t *arr, int n);
+int parse_uint64_t_array(char *s, uint64_t *arr, int n);
+int parse_int8_t_array(char *s, int8_t *arr, int n);
+int parse_int16_t_array(char *s, int16_t *arr, int n);
+int parse_int32_t_array(char *s, int32_t *arr, int n);
+int parse_int64_t_array(char *s, int64_t *arr, int n);
+int parse_float_array(char *s, float *arr, int n);
+int parse_double_array(char *s, double *arr, int n);
+
+///// Array write functions
+int write_string(int fd, char *arr, int n);
+int write_uint8_t_array(int fd, uint8_t *arr, int n);
+int write_uint16_t_array(int fd, uint16_t *arr, int n);
+int write_uint32_t_array(int fd, uint32_t *arr, int n);
+int write_uint64_t_array(int fd, uint64_t *arr, int n);
+int write_int8_t_array(int fd, int8_t *arr, int n);
+int write_int16_t_array(int fd, int16_t *arr, int n);
+int write_int32_t_array(int fd, int32_t *arr, int n);
+int write_int64_t_array(int fd, int64_t *arr, int n);
+int write_float_array(int fd, float *arr, int n);
+int write_double_array(int fd, double *arr, int n);
+
+int write_section_header(int fd);
+
+///// Per-benchmark files
+void run_benchmark( void *vargs );
+void input_to_data(int fd, void *vdata);
+void data_to_input(int fd, void *vdata);
+void output_to_data(int fd, void *vdata);
+void data_to_output(int fd, void *vdata);
+int check_data(void *vdata, void *vref);
+
+extern int INPUT_SIZE;
+
+///// TYPE macros
+// Macro trick to automatically expand TYPE into the appropriate function
+// (S)et (T)ype (A)nd (C)oncatenate
+#define __STAC_EXPANDED(f_pfx,t,f_sfx) f_pfx##t##f_sfx
+#define STAC(f_pfx,t,f_sfx) __STAC_EXPANDED(f_pfx,t,f_sfx)
+// Invoke like this:
+//   #define TYPE int32_t
+//   STAC(write_,TYPE,_array)(fd, array, n);
+// where array is of type (TYPE *)
+// This translates to:
+//   write_int32_t_array(fd, array, n);
+
+
+/**** PRNG library. Available at https://github.com/rdadolf/prng. *****/
+#ifndef __PRNG_H__
+#define __PRNG_H__
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <inttypes.h>
+#include <stdint.h>
+
+#define LAG1 (UINT16_C(24))
+#define LAG2 (UINT16_C(55))
+#define RAND_SSIZE ((UINT16_C(1))<<6)
+#define RAND_SMASK (RAND_SSIZE-1)
+#define RAND_EXHAUST_LIMIT LAG2
+// 10x is a heuristic, it just needs to be large enough to remove correlation
+#define RAND_REFILL_COUNT ((LAG2*10)-RAND_EXHAUST_LIMIT)
+struct prng_rand_t {
+  uint64_t s[RAND_SSIZE]; // Lags
+  uint_fast16_t i; // Location of the current lag
+  uint_fast16_t c; // Exhaustion count
+};
+
+#define PRNG_RAND_MAX UINT64_MAX
+
+
+static inline uint64_t prng_rand(struct prng_rand_t *state) {
+  uint_fast16_t i;
+  uint_fast16_t r, new_rands=0;
+
+  if( !state->c ) { // Randomness exhausted, run forward to refill
+    new_rands += RAND_REFILL_COUNT+1;
+    state->c = RAND_EXHAUST_LIMIT-1;
+  } else {
+    new_rands = 1;
+    state->c--;
+  }
+
+  for( r=0; r<new_rands; r++ ) {
+    i = state->i;
+    state->s[i&RAND_SMASK] = state->s[(i+RAND_SSIZE-LAG1)&RAND_SMASK]
+                              + state->s[(i+RAND_SSIZE-LAG2)&RAND_SMASK];
+    state->i++;
+  }
+  return state->s[i&RAND_SMASK];
+}
+
+static inline void prng_srand(uint64_t seed, struct prng_rand_t *state) {
+  uint_fast16_t i;
+  // Naive seed
+  state->c = RAND_EXHAUST_LIMIT;
+  state->i = 0;
+
+  state->s[0] = seed;
+  for(i=1; i<RAND_SSIZE; i++) {
+    // Arbitrary magic, mostly to eliminate the effect of low-value seeds.
+    // Probably could be better, but the run-up obviates any real need to.
+    state->s[i] = i*(UINT64_C(2147483647)) + seed;
+  }
+
+  // Run forward 10,000 numbers
+  for(i=0; i<10000; i++) {
+    prng_rand(state);
+  }
+}
+
+// Clean up our macros
+#undef LAG1
+#undef LAG2
+#undef RAND_SSIZE
+#undef RAND_SMASK
+#undef RAND_EXHAUST_LIMIT
+#undef RAND_REFILL_COUNT
+
+// PRNG_RAND_MAX is exported
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/hw/top.c gem5-SALAM/benchmarks/sys_validation/spmv/hw/top.c
--- gem5/benchmarks/sys_validation/spmv/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/hw/top.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,59 @@
+#include "spmv.h"
+
+void top(uint64_t val,
+		 uint64_t cols,
+		 uint64_t rowDelims,
+		 uint64_t vec,
+		 uint64_t out) {
+
+	//Define Device MMRs
+	volatile uint8_t  * SPMVFlags  = (uint8_t *)SPMV;
+	volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer M1
+	*DmaRdAddr  = val;
+	*DmaWrAddr  = VAL;
+	*DmaCopyLen = NNZ*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = cols;
+	*DmaWrAddr  = COLS;
+	*DmaCopyLen = NNZ*sizeof(int32_t);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = rowDelims;
+	*DmaWrAddr  = ROWDELIMS;
+	*DmaCopyLen = (N+1)*sizeof(int32_t);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = vec;
+	*DmaWrAddr  = VEC;
+	*DmaCopyLen = N*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*SPMVFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*SPMVFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer M3
+	*DmaRdAddr  = OUT;
+	*DmaWrAddr  = out;
+	*DmaCopyLen = N*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/Makefile gem5-SALAM/benchmarks/sys_validation/spmv/Makefile
--- gem5/benchmarks/sys_validation/spmv/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,13 @@
+FOLDERS=\
+	sw\
+	hw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+	
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+	
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/spmv_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/spmv/spmv_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/spmv/spmv_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/spmv_clstr_hw_defines.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,17 @@
+//BEGIN GENERATED CODE
+//Cluster: SPMV
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: SPMV
+#define SPMV 0x10020080
+#define VAL 0x100200c0
+#define COLS 0x10023500
+#define ROWDELIMS 0x10024f40
+#define VEC 0x10025700
+#define OUT 0x10026680
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/spmv/sw/boot.ld
--- gem5/benchmarks/sys_validation/spmv/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/boot.ld	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/boot.s gem5-SALAM/benchmarks/sys_validation/spmv/sw/boot.s
--- gem5/benchmarks/sys_validation/spmv/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/boot.s	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,180 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,    36   // 36 <64 => set_enable1 Reg
+.equ sam_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable1    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_unexpected:
+//    cmp r2, #timer_irq_id
+//	cmp r2, #kmio_irq_id
+//	cmp r2, #uart0_irq_id
+//	cmp r2, #rtc_irq_id
+    cmp r2, #sam_dev_id
+    bne irq_unexpected  // if irq is not from timer0
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+//    ldr r2, =timer_irq_id
+//	ldr r2, = uart0_irq_id
+	ldr r2, = sam_dev_id
+//	ldr r2, = kmio_irq_id
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/data.c gem5-SALAM/benchmarks/sys_validation/spmv/sw/data.c
--- gem5/benchmarks/sys_validation/spmv/sw/data.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/data.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,20 @@
+#include "data.h"
+
+#ifndef TEST
+const TYPE mat[NNZ] = {2220.8739999999997963, -9.9601590000000009, -9.9601590000000009, -8.1967210000000001, -8.1967210000000001, -4.0518640000000001, -4.0518640000000001, 5.4106699999999996, -5.4106699999999996, -5.4106699999999996, 13.5708599999999997, -5.6657229999999998, -5.6657229999999998, -7.9051380000000000, -7.9051380000000000, 618.3967999999999847, -91.9963199999999972, -91.9963199999999972, -100.0000000000000000, -100.0000000000000000, -294.1175999999999817, -294.1175999999999817, -53.5045500000000018, -53.5045500000000018, -73.3675700000000006, -73.3675700000000006, 8.0000000000000000, -8.0000000000000000, -8.0000000000000000, 5.2511120000000000, -1.5267180000000000, -1.5267180000000000, -3.7243949999999999, -3.7243949999999999, 12.5098099999999999, -0.5000000000000000, -0.5000000000000000, -2.6191719999999998, -2.6191719999999998, -3.6036039999999998, -3.6036039999999998, -5.7870369999999998, -5.7870369999999998, 91.9963199999999972, 10.2144999999999992, -10.2144999999999992, -10.2144999999999992, 277.3765999999999963, -127.2265000000000015, -127.2265000000000015, -150.1501000000000090, -150.1501000000000090, 79.8003400000000056, -50.3018100000000032, -50.3018100000000032, -29.4985299999999988, -29.4985299999999988, 13.0155700000000003, -1.3333330000000001, -1.3333330000000001, -2.1584289999999999, -2.1584289999999999, -9.5238090000000000, -9.5238090000000000, 1.3333330000000001, 2.1584289999999999, 7.0126229999999996, -7.0126229999999996, -7.0126229999999996, 60.1257599999999996, -21.7864900000000006, -21.7864900000000006, -7.0372969999999997, -7.0372969999999997, -4.8053819999999998, -4.8053819999999998, 100.1223999999999990, -17.6056300000000014, -17.6056300000000014, -17.6056300000000014, -17.6056300000000014, -14.3061500000000006, -14.3061500000000006, -28.8184499999999986, -28.8184499999999986, 0.5000000000000000, 7.0372969999999997, 17.6056300000000014, 17.6056300000000014, 105.8066000000000031, -37.3134299999999968, -37.3134299999999968, -68.4931500000000000, -68.4931500000000000, 238.1596000000000117, -81.9672199999999975, -81.9672199999999975, -108.6955999999999989, -108.6955999999999989, -10.1832999999999991, -10.1832999999999991, 7.8064020000000003, -7.8064020000000003, -7.8064020000000003, 25.0479899999999986, -4.7415839999999996, -4.7415839999999996, -12.5000000000000000, -12.5000000000000000, 72.5843600000000038, -42.3728800000000021, -42.3728800000000021, -30.2114800000000017, -30.2114800000000017, 423.7287999999999784, -423.7287999999999784, -423.7287999999999784, 1022.7340000000000373, -3.7674720000000002, -3.7674720000000002, -595.2381000000000313, -595.2381000000000313, 7.6136960000000000, -4.3878890000000004, -4.3878890000000004, -3.2258060000000000, -3.2258060000000000, 5.4288819999999998, -5.4288819999999998, -5.4288819999999998, 28.9126800000000017, -17.0940200000000004, -17.0940200000000004, -6.3897769999999996, -6.3897769999999996, 16.3765700000000010, -5.0000000000000000, -5.0000000000000000, -11.3765599999999996, -11.3765599999999996, 106.1646999999999963, -62.1118000000000023, -62.1118000000000023, -44.0528600000000026, -44.0528600000000026, 62.1118000000000023, 13.6054399999999998, -13.6054399999999998, -13.6054399999999998, 1122.9039999999999964, -1111.1110000000001037, -1111.1110000000001037, -11.7924500000000005, -11.7924500000000005, 208.5615999999999985, -8.5616439999999994, -8.5616439999999994, -200.0000000000000000, -200.0000000000000000, 19.2869600000000005, -11.0497200000000007, -11.0497200000000007, -8.2372320000000006, -8.2372320000000006, 50.4298100000000034, -22.5733600000000010, -22.5733600000000010, -16.8067199999999985, -16.8067199999999985, 107.3191000000000059, -84.7457600000000042, -84.7457600000000042, 1125.3079999999999927, -11.6550100000000008, -11.6550100000000008, -1111.1110000000001037, -1111.1110000000001037, -2.5419420000000001, -2.5419420000000001, 40.6302400000000006, -34.8432000000000031, -34.8432000000000031, -5.7870369999999998, -5.7870369999999998, 32.2580600000000004, -32.2580600000000004, -32.2580600000000004, 50.4519400000000005, -11.9904100000000007, -11.9904100000000007, -38.4615399999999994, -38.4615399999999994, 21.8901100000000000, -6.2932660000000000, -6.2932660000000000, -4.9975009999999997, -4.9975009999999997, -5.3361789999999996, -5.3361789999999996, -5.2631579999999998, -5.2631579999999998, 14.9534800000000008, -6.7567570000000003, -6.7567570000000003, 29.2795300000000012, -3.4199730000000002, -3.4199730000000002, -14.2045499999999993, -14.2045499999999993, 1682.9860000000001037, -114.0250999999999948, -114.0250999999999948, -1333.3330000000000837, -1333.3330000000000837, -180.1802000000000135, -180.1802000000000135, -55.4477400000000031, -55.4477400000000031, 65.3933700000000044, -47.6190500000000014, -47.6190500000000014, -6.0096150000000002, -6.0096150000000002, -11.7647099999999991, -11.7647099999999991, 168.4124999999999943, -111.1110999999999933, -111.1110999999999933, -5.0761419999999999, -5.0761419999999999, -4.6061730000000001, -4.6061730000000001, 39.4463500000000025, -24.2718400000000010, -24.2718400000000010, -15.1745099999999997, -15.1745099999999997, 10.4849999999999994, -4.8192769999999996, -4.8192769999999996, 89.1608399999999932, -37.8787900000000022, -37.8787900000000022, -51.2820499999999981, -51.2820499999999981, 14.7029499999999995, -6.8965519999999998, -6.8965519999999998, -7.8064020000000003, -7.8064020000000003, 40.8459500000000020, -21.9780200000000008, -21.9780200000000008, -18.8679300000000012, -18.8679300000000012, 20.8446800000000003, -9.6339109999999994, -9.6339109999999994, -11.2107600000000005, -11.2107600000000005, 19.2146100000000004, -14.4092199999999995, -14.4092199999999995, 8.2908159999999995, -6.2500000000000000, -6.2500000000000000, -2.0408160000000000, -2.0408160000000000, 63.9985399999999984, -13.8888900000000000, -13.8888900000000000, -43.8596500000000020, -43.8596500000000020, 2.0408160000000000, 25.7062700000000000, -18.1818199999999983, -18.1818199999999983, -7.5244549999999997, -7.5244549999999997, 8.0840739999999993, -8.0840739999999993, -8.0840739999999993, 17.0013800000000010, -0.6702413000000000, -0.6702413000000000, -3.3411300000000002, -3.3411300000000002, -9.5238090000000000, -9.5238090000000000, -3.4662039999999998, -3.4662039999999998, 0.6702413000000000, 68.6351099999999974, -56.1797800000000009, -56.1797800000000009, -5.6433410000000004, -5.6433410000000004, -6.8119889999999996, -6.8119889999999996, 56.1797800000000009, 794.4358999999999469, -9.7276270000000000, -9.7276270000000000, -714.2857999999999947, -714.2857999999999947, -70.4225299999999947, -70.4225299999999947, 63.7407899999999970, -23.4192000000000000, -23.4192000000000000, -15.0761400000000005, -15.0761400000000005, -10.7526899999999994, -10.7526899999999994, -14.4927499999999991, -14.4927499999999991, 9.7276270000000000, 898.1735999999999649, -64.1025700000000001, -64.1025700000000001, -8.4674010000000006, -8.4674010000000006, -49.6277899999999974, -49.6277899999999974, -15.0150100000000002, -15.0150100000000002, -23.2558100000000003, -23.2558100000000003, 309.7513999999999896, -22.5225200000000001, -22.5225200000000001, -22.5225200000000001, -22.5225200000000001, -27.0270299999999999, -27.0270299999999999, -57.4712600000000009, -57.4712600000000009, -45.6829600000000013, -45.6829600000000013, 44.6596100000000007, -8.2918740000000000, -8.2918740000000000, -8.4245999999999999, -8.4245999999999999, -2.1739130000000002, -2.1739130000000002, -2.2256840000000002, -2.2256840000000002, 10.7526899999999994, 22.5225200000000001, 22.5225200000000001, 27.0270299999999999, 43.2569599999999994, -11.6279100000000000, -11.6279100000000000, -25.6410300000000007, -25.6410300000000007, -5.9880240000000002, -5.9880240000000002, 14.9548600000000000, -1.3241520000000000, -1.3241520000000000, -2.0028039999999998, -2.0028039999999998, 59.7835899999999967, -18.9933499999999995, -18.9933499999999995, -18.5185199999999988, -18.5185199999999988, -22.2717199999999984, -22.2717199999999984, 76.9893200000000064, -9.7656250000000000, -9.7656250000000000, -3.3322229999999999, -3.3322229999999999, -9.6618359999999992, -9.6618359999999992, -33.3333399999999997, -33.3333399999999997, -1.9029499999999999, -1.9029499999999999, 54.8651300000000006, -34.2465699999999984, -34.2465699999999984, -20.6185599999999987, -20.6185599999999987, 130.6547999999999945, -106.3829999999999956, -106.3829999999999956, 8.6511689999999994, -4.8804299999999996, -4.8804299999999996, -3.7707389999999998, -3.7707389999999998, 18.5295400000000008, -4.1203130000000003, -4.1203130000000003, 318.4947000000000230, -294.1175999999999817, -294.1175999999999817, -14.0252499999999998, -14.0252499999999998, -3.5448420000000000, -3.5448420000000000, -3.0395140000000000, -3.0395140000000000, 11.6143999999999998, -11.6143999999999998, -11.6143999999999998, 55.8730199999999968, -40.0000000000000000, -40.0000000000000000, -15.8730200000000004, -15.8730200000000004, 345.7321000000000026, 8.1511340000000008, -4.8100050000000003, -4.8100050000000003, 215.0901000000000067, -125.0000000000000000, -125.0000000000000000, -90.0901000000000067, -90.0901000000000067, 295.4284999999999854, -38.7596899999999991, -38.7596899999999991, -38.9105100000000022, -38.9105100000000022, -11.5340299999999996, -11.5340299999999996, -23.7529700000000012, -23.7529700000000012, 79.7815099999999973, -74.6268699999999967, -74.6268699999999967, -5.1546390000000004, -5.1546390000000004, 38.7596899999999991, 38.9105100000000022, 94.0535600000000045, -7.8926600000000002, -7.8926600000000002, 7.8926600000000002, 17.5513300000000001, -10.7991399999999995, -10.7991399999999995, -6.7521940000000003, -6.7521940000000003, 15.5732900000000001, -5.8927519999999998, -5.8927519999999998, -9.6805420000000009, -9.6805420000000009, 76.2711900000000043, -33.8982999999999990, -33.8982999999999990, 1230.3369999999999891, -116.2790999999999997, -116.2790999999999997, -769.2308000000000447, -769.2308000000000447, -344.8276000000000181, -344.8276000000000181, 26.0416699999999999, -26.0416699999999999, -26.0416699999999999, 79.6698899999999952, -22.4719100000000012, -22.4719100000000012, -10.0000000000000000, -10.0000000000000000, -9.1659030000000001, -9.1659030000000001, 104.4050000000000011, -55.6482999999999990, -55.6482999999999990, -48.7567099999999982, -48.7567099999999982, 85.5357900000000058, -4.7169809999999996, -4.7169809999999996, -17.7935899999999982, -17.7935899999999982, -18.3823499999999989, -18.3823499999999989, -44.6428599999999989, -44.6428599999999989, 4.7169809999999996, 14.4092199999999995, -14.4092199999999995, -14.4092199999999995, 41.1329500000000010, -20.0803200000000004, -20.0803200000000004, -21.0526300000000006, -21.0526300000000006, 91.6945300000000003, -72.4637699999999967, -72.4637699999999967, -19.2307699999999997, -19.2307699999999997, 9.7847360000000005, -9.7847360000000005, -9.7847360000000005, 1.0298659999999999, -1.0298659999999999, -1.0298659999999999, 2.1645020000000001, -2.1645020000000001, -2.1645020000000001, 26.6899599999999992, -3.4928400000000002, -3.4928400000000002, -6.8027210000000000, -6.8027210000000000, -3.4152999999999998, -3.4152999999999998, 140.1105000000000018, -36.7647100000000009, -36.7647100000000009, -37.3134299999999968, -37.3134299999999968, -46.9483600000000010, -46.9483600000000010, -19.0839700000000008, -19.0839700000000008, 14.0104399999999991, -2.6041669999999999, -2.6041669999999999, -5.3966539999999998, -5.3966539999999998, 13.9848300000000005, -3.3806630000000002, -3.3806630000000002, 32.2401800000000023, -18.2149399999999986, -18.2149399999999986, 36.7678099999999972, -18.5528799999999983, -18.5528799999999983, 29.7563299999999984, -19.0839700000000008, -19.0839700000000008, -10.6723599999999994, -10.6723599999999994, 28.7154799999999994, -10.1625999999999994, -10.1625999999999994, 176.9231000000000051, -76.9230699999999956, -76.9230699999999956, 16.9491499999999995, -16.9491499999999995, -16.9491499999999995, 33.9419600000000017, -5.7836900000000000, -5.7836900000000000, -12.9032300000000006, -12.9032300000000006, -9.6339109999999994, -9.6339109999999994, -5.6211349999999998, -5.6211349999999998, 38.0870499999999979, -7.5187970000000002, -7.5187970000000002, -3.0184120000000001, -3.0184120000000001, 28.7178800000000010, 3.2948930000000001, -3.2948930000000001, -3.2948930000000001, 10.2830100000000009, -6.9881209999999996, -6.9881209999999996, 39.1090900000000019, -19.8412700000000015, -19.8412700000000015, -19.2678200000000004, -19.2678200000000004, 56.2528300000000030, -18.9393899999999995, -18.9393899999999995, -37.3134299999999968, -37.3134299999999968, 19.8412700000000015, 15.9744399999999995, -15.9744399999999995, -15.9744399999999995, 15.9744399999999995, -15.9744399999999995, -15.9744399999999995, 18.3823499999999989, -18.3823499999999989, -18.3823499999999989, 62.1118000000000023, -62.1118000000000023, -62.1118000000000023, 54.3478199999999987, -54.3478199999999987, -54.3478199999999987, 22.5733600000000010, -22.5733600000000010, -22.5733600000000010, 405.7851999999999748, -333.3333000000000084, -333.3333000000000084, -59.1715999999999980, -59.1715999999999980, -13.2802100000000003, -13.2802100000000003, 444.0341000000000236, -370.3704000000000178, -370.3704000000000178, -60.2409600000000012, -60.2409600000000012, -13.4228199999999998, -13.4228199999999998, 125.4902000000000015, -58.8235200000000020, -58.8235200000000020, -66.6666699999999963, -66.6666699999999963, 13.5685199999999995, -13.5685199999999995, -13.5685199999999995, 173.0337000000000103, 754.0348999999999933, 643.3153999999999542, -188.6792000000000087, -188.6792000000000087, -188.6792000000000087, -188.6792000000000087, -12.1802700000000002, -12.1802700000000002, -22.6244399999999999, -22.6244399999999999, 274.5828000000000202, -31.5556899999999985, -31.5556899999999985, 13.2802100000000003, 13.4228199999999998, 86.1757400000000047, -8.5763289999999994, -8.5763289999999994, -6.8780520000000003, -6.8780520000000003, -70.7213600000000042, -70.7213600000000042, 31.8957900000000016, 19.6078399999999995, -9.8039220000000000, -9.8039220000000000, -9.8039220000000000, -9.8039220000000000, 36.0613499999999974, -20.6077900000000014, -20.6077900000000014, -15.4535599999999995, -15.4535599999999995, 38.1282700000000006, -10.1010100000000005, -10.1010100000000005, 52.8684799999999981, -5.3714350000000000, -5.3714350000000000, -2.4520019999999998, -2.4520019999999998, -45.0450500000000034, -45.0450500000000034, 55.5094899999999996, -5.4436580000000001, -5.4436580000000001, -2.4467829999999999, -2.4467829999999999, -47.6190500000000014, -47.6190500000000014, 29.8600700000000003, -15.6250000000000000, -15.6250000000000000, 4.8987850000000002, 218.7209000000000003, -17.3611100000000000, -17.3611100000000000, 10009.6800000000002910, -10000.0000000000000000, -10000.0000000000000000, 10004.7399999999997817, 410.3967000000000098, 95.7427899999999994, -40.7346799999999973, -40.7346799999999973, -10.0230499999999996, -10.0230499999999996, -21.1685000000000016, -21.1685000000000016, -16.4636199999999988, -16.4636199999999988, -7.3529410000000004, -7.3529410000000004, 202.0149999999999864, -19.4363500000000009, -19.4363500000000009, -141.8439999999999941, -141.8439999999999941, 2.2099449999999998, -2.2099449999999998, -2.2099449999999998, 8.6686589999999999, -1.7721070000000001, -1.7721070000000001, 132.4125999999999976, -22.5225200000000001, -22.5225200000000001, -109.8901000000000039, -109.8901000000000039, 1076.9710000000000036, -999.9999000000000251, -999.9999000000000251, -15.5981900000000007, -15.5981900000000007, -27.3597800000000007, -27.3597800000000007, -34.0135999999999967, -34.0135999999999967, 2.6191719999999998, 11.8660899999999998, -8.0710250000000006, -8.0710250000000006, -3.7950659999999998, -3.7950659999999998, 1022.5220000000000482, 66.8002699999999976, -66.8002699999999976, -66.8002699999999976, 77.0498999999999938, -4.9731449999999997, -4.9731449999999997, -5.2764879999999996, -5.2764879999999996, 179.1666999999999916, -166.6666999999999916, -166.6666999999999916, 76.9230699999999956, -76.9230699999999956, -76.9230699999999956, 111.7663000000000011, 618.7910000000000537, -19.4325699999999983, -19.4325699999999983, 41.1108499999999992, -9.2421330000000008, -9.2421330000000008, -25.5754500000000000, -25.5754500000000000, 41.5001999999999995, 3.6764700000000001, -3.6764700000000001, -3.6764700000000001, 5.4200540000000004, -5.4200540000000004, -5.4200540000000004, 36.9436899999999966, -14.4717800000000008, -14.4717800000000008, 14.3215199999999996, 14.6412899999999997, -14.6412899999999997, -14.6412899999999997, 89.8292600000000050, -75.1879700000000071, -75.1879700000000071, 17.0940200000000004, 48.7011499999999984, -3.3199429999999999, -3.3199429999999999, -10.1760500000000000, -10.1760500000000000, -16.6057799999999993, -16.6057799999999993, 3.3199429999999999, 10.1760500000000000, 14.2949199999999994, 38.5442499999999981, 4.0978130000000004, -2.4283630000000000, -2.4283630000000000, -1.6694490000000000, -1.6694490000000000, 0.1703577000000000, -0.1703577000000000, -0.1703577000000000, 12.4391599999999993, -2.7449900000000000, -2.7449900000000000, 209.3358000000000061, -8.0000000000000000, -8.0000000000000000, -12.0149000000000008, -12.0149000000000008, -17.8444000000000003, -17.8444000000000003, -30.4878000000000000, -30.4878000000000000, -14.1683199999999996, -14.1683199999999996, -36.5630700000000033, -36.5630700000000033, 29.5478300000000011, -10.2009600000000002, -10.2009600000000002, -11.3468699999999991, -11.3468699999999991, 10.2009600000000002, 11.3468699999999991, 12.0149000000000008, 17.8444000000000003, 28.4983199999999997, -18.3150200000000005, -18.3150200000000005, 10.6116700000000002, -8.1833069999999992, -8.1833069999999992, 101.3766999999999996, -42.5531900000000007, -42.5531900000000007, 4.8053819999999998, -4.8053819999999998, -4.8053819999999998, 8.1833069999999992, 40.3137600000000020, -20.8811900000000001, -20.8811900000000001, 124.7891999999999939, -104.1667000000000058, -104.1667000000000058, 1214.5329999999999018, -1123.5950000000000273, -1123.5950000000000273, -5.7583789999999997, -5.7583789999999997, -85.1788800000000066, -85.1788800000000066, 1543.6079999999999472, -15.4987100000000009, -15.4987100000000009, -93.2835800000000006, -93.2835800000000006, -53.1067499999999981, -53.1067499999999981, -16.8719399999999986, -16.8719399999999986, 5.7583789999999997, 149.5704000000000065, -64.3914900000000046, -64.3914900000000046, 21.7773600000000016, -6.2786460000000002, -6.2786460000000002, 6.2786460000000002, 8.7950739999999996, -8.7950739999999996, -8.7950739999999996, 45.5701499999999982, -20.8768300000000018, -20.8768300000000018, -15.8982500000000009, -15.8982500000000009, 9.9613230000000001, 16.7371499999999997, -8.3125509999999991, -8.3125509999999991, 33.0112700000000032, 10.2947299999999995, -5.7012539999999996, -5.7012539999999996, -4.5934770000000000, -4.5934770000000000, 243.9951000000000079, -181.8181999999999903, -181.8181999999999903, -11.4155300000000004, -11.4155300000000004, -50.7614200000000011, -50.7614200000000011, 278.1383999999999901, -46.6635599999999968, -46.6635599999999968, -5.4674690000000004, -5.4674690000000004, -28.7356300000000005, -28.7356300000000005, 11.4155300000000004, 77.5710799999999949, -26.8096500000000013, -26.8096500000000013, 978.0082999999999629, -59.5238099999999974, -59.5238099999999974, -149.2537000000000091, -149.2537000000000091, 14.1752699999999994, -10.5042000000000009, -10.5042000000000009, -3.6710720000000001, -3.6710720000000001, 24.7521300000000011, -3.9936099999999999, -3.9936099999999999, -7.1530760000000004, -7.1530760000000004, 27.5141400000000012, -14.7058800000000005, -14.7058800000000005, -5.7110219999999998, -5.7110219999999998, -7.0972320000000000, -7.0972320000000000, 74.1440000000000055, -24.3902399999999986, -24.3902399999999986, -4.6446820000000004, -4.6446820000000004, 238.1673999999999864, -200.0000000000000000, -200.0000000000000000, -8.1168829999999996, -8.1168829999999996, -11.1111100000000000, -11.1111100000000000, 224.6879000000000133, 15.2439000000000000, -15.2439000000000000, -15.2439000000000000, 19.7585799999999985, -4.5146730000000002, -4.5146730000000002, 36.4963499999999996, -36.4963499999999996, -36.4963499999999996, 95.4541600000000017, -55.2486200000000025, -55.2486200000000025, -3.7091989999999999, -3.7091989999999999, 100.6927000000000021, -19.3050199999999990, -19.3050199999999990, -65.7894699999999943, -65.7894699999999943, 329.6231000000000222, -200.0000000000000000, -200.0000000000000000, -11.9760500000000008, -11.9760500000000008, -117.6470000000000056, -117.6470000000000056, 285.1879999999999882, 11.9760500000000008, 144.4567000000000121, 165.7238000000000113, -62.2083999999999975, -62.2083999999999975, -87.6424200000000013, -87.6424200000000013, 82.1884399999999999, -58.0046400000000020, -58.0046400000000020, -24.1838000000000015, -24.1838000000000015, 151.4336999999999875, -40.3225800000000021, -40.3225800000000021, 48.5151600000000016, -4.4622940000000000, -4.4622940000000000, 8.2308979999999998, -4.2372880000000004, -4.2372880000000004, 26.7507799999999989, -9.3896709999999999, -9.3896709999999999, 329.2194000000000074, -186.5672000000000139, -186.5672000000000139, -38.5802499999999995, -38.5802499999999995, -72.5163100000000043, -72.5163100000000043, 28.6242400000000004, -27.1739099999999993, -27.1739099999999993, -1.4503260000000000, -1.4503260000000000, 27.1739099999999993, 36.9804000000000030, -30.1023500000000013, -30.1023500000000013, 129.9704000000000121, 99.0061900000000037, -78.1250000000000000, -78.1250000000000000, 45.4867599999999968, -7.7124790000000001, -7.7124790000000001, 20007.7099999999991269, -10000.0000000000000000, -10000.0000000000000000, -10000.0000000000000000, -10000.0000000000000000, 10000.0000000000000000, 10000.0000000000000000, 10.8453700000000008, -7.5131480000000002, -7.5131480000000002, 14.7567599999999999, -8.0000000000000000, -8.0000000000000000, 1.4598540000000000, -1.4598540000000000, -1.4598540000000000, 103.4287999999999954, -40.0000000000000000, -40.0000000000000000, -49.0196100000000001, -49.0196100000000001, 49.4598500000000030, 141.7923000000000116, -10.9673200000000008, -10.9673200000000008, -22.2717199999999984, -22.2717199999999984, -48.1540899999999965, -48.1540899999999965, -42.0168099999999995, -42.0168099999999995, 545.1684000000000196, -90.7441000000000031, -90.7441000000000031, -90.0090000000000003, -90.0090000000000003, -89.1265599999999978, -89.1265599999999978, -28.6615099999999998, -28.6615099999999998, -60.0600600000000000, -60.0600600000000000, 90.7441000000000031, 90.0090000000000003, 89.1265599999999978, 204.9044000000000096, -4.9043650000000003, -4.9043650000000003, 172.7262000000000057, -63.6942700000000031, -63.6942700000000031, -27.6243100000000013, -27.6243100000000013, 26.7418000000000013, -5.7836900000000000, -5.7836900000000000, 10.8049099999999996, 10.9673200000000008, 12.3300099999999997, -8.2781459999999996, -8.2781459999999996, 6.8027210000000000, -6.8027210000000000, -6.8027210000000000, 33.4146599999999978, -4.6339199999999998, -4.6339199999999998, 146.1641999999999939, -72.2543299999999959, -72.2543299999999959, -73.9098299999999995, -73.9098299999999995, 1493.0409999999999400, -17.2413799999999995, -17.2413799999999995, -26.8817200000000014, -26.8817200000000014, -18.1818199999999983, -18.1818199999999983, 43.9259500000000003, -13.3155800000000006, -13.3155800000000006, -13.3689800000000005, -13.3689800000000005, 13.3155800000000006, 13.3689800000000005, 27.8209699999999991, -9.5419850000000004, -9.5419850000000004, -8.3402829999999994, -8.3402829999999994, -6.3938620000000004, -6.3938620000000004, 12.3225300000000004, -4.6772689999999999, -4.6772689999999999, -7.6452600000000004, -7.6452600000000004, 278.5131000000000085, -81.6993499999999955, -81.6993499999999955, 273.0466000000000122, -86.2068900000000014, -86.2068900000000014, -104.1667000000000058, -104.1667000000000058, -18.2815399999999997, -18.2815399999999997, 86.2068900000000014, 15.7582799999999992, -10.9528999999999996, -10.9528999999999996, 42.0657799999999966, 8.1168829999999996, 273.4637999999999920, 39.0280300000000011, -3.4928400000000002, -3.4928400000000002, -18.0831799999999987, -18.0831799999999987, -17.4520100000000014, -17.4520100000000014, 151.9719000000000051, -49.0196100000000001, -49.0196100000000001, -49.0196100000000001, -49.0196100000000001, 65.0280800000000028, -5.9665869999999996, -5.9665869999999996, -5.9665869999999996, -5.9665869999999996, 124.4662000000000006, 17.4520100000000014, 59.0678300000000007, -4.0816330000000001, -4.0816330000000001, 59.0678300000000007, -4.0816330000000001, -4.0816330000000001, 4.0816330000000001, 4.0816330000000001, 10.7991399999999995, -10.7991399999999995, -10.7991399999999995, 81.4247399999999999, -30.3030299999999997, -30.3030299999999997, 39.0625000000000000, -39.0625000000000000, -39.0625000000000000, 507.6857999999999720, -5.6818179999999998, -5.6818179999999998, -500.0000000000000000, -500.0000000000000000, -2.0040079999999998, -2.0040079999999998, 328.2355999999999767, -212.7659999999999911, -212.7659999999999911, 503.4153000000000020, 2.0040079999999998, 100.9094000000000051, -12.8024600000000000, -12.8024600000000000, 5112.3850000000002183, -2000.0000000000000000, -2000.0000000000000000, -2000.0000000000000000, -2000.0000000000000000, -500.0000000000000000, -500.0000000000000000, -500.0000000000000000, -500.0000000000000000, -8.5106380000000001, -8.5106380000000001, -41.6666700000000034, -41.6666700000000034, 2077.7860000000000582, -11.5606899999999992, -11.5606899999999992, -66.2251700000000056, -66.2251700000000056, 11.5606899999999992, 2077.7860000000000582, -11.5606899999999992, -11.5606899999999992, -66.2251700000000056, -66.2251700000000056, 11.5606899999999992, 1166.6520000000000437, -555.5555000000000518, -555.5555000000000518, 17.5979300000000016, -13.2100399999999993, -13.2100399999999993, 57.2854200000000020, -33.1016199999999969, -33.1016199999999969, 46.6991999999999976, -45.2488699999999966, -45.2488699999999966, 2286.1529999999997926, -370.3704000000000178, -370.3704000000000178, -370.3704000000000178, -370.3704000000000178, -370.3704000000000178, -370.3704000000000178, -41.3223199999999977, -41.3223199999999977, 238.1108000000000118, -60.2409600000000012, -60.2409600000000012, -60.2409600000000012, -60.2409600000000012, -60.2409600000000012, -60.2409600000000012, -42.3728800000000021, -42.3728800000000021, 13.4228199999999998, -13.4228199999999998, -13.4228199999999998, 13.4228199999999998, -13.4228199999999998, -13.4228199999999998, 13.4228199999999998, -13.4228199999999998, -13.4228199999999998, 59.9258799999999994, 9.6608129999999992, -6.4350069999999997, -6.4350069999999997, 444.0341000000000236, 444.0341000000000236, 444.0341000000000236, 69.4748500000000035, -3.8461539999999999, -3.8461539999999999, 13.5643300000000000, -9.7181730000000002, -9.7181730000000002, 16.5104900000000008, -12.0481900000000000, -12.0481900000000000, 10029.6299999999991996, -9.0744089999999993, -9.0744089999999993, -10000.0000000000000000, -10000.0000000000000000, 18.1818199999999983, -18.1818199999999983, -18.1818199999999983, 1295.9590000000000600, 15.6091400000000000, 3.1055899999999999, -3.1055899999999999, -3.1055899999999999, 1120.0039999999999054, 74.3247400000000056, -64.9350699999999961, -64.9350699999999961, 4.5871560000000002, -4.5871560000000002, -4.5871560000000002, 9.6632990000000003, 23.8961000000000006, -5.7142860000000004, -5.7142860000000004, 92.8092900000000043, -14.6842900000000007, -14.6842900000000007, 49.8710799999999992, 12.2331900000000005, -6.5189050000000002, -6.5189050000000002, 85.9659900000000050, 81.9562999999999988, -44.6428599999999989, -44.6428599999999989, 2.1645020000000001, -2.1645020000000001, -2.1645020000000001, 74.3359099999999984, -3.6145450000000001, -3.6145450000000001, 90.2128600000000063, 10.4691100000000006, -2.3980820000000000, -2.3980820000000000, 3.6145450000000001, 63.8367199999999997, -19.1938600000000008, -19.1938600000000008, 4.9731449999999997, 90.8585199999999986, -3.6205650000000000, -3.6205650000000000, -12.0336900000000000, -12.0336900000000000, -29.0697699999999983, -29.0697699999999983, -21.8866300000000003, -21.8866300000000003, 86.7836900000000071, -24.2130800000000015, -24.2130800000000015, -3.8109760000000001, -3.8109760000000001, -12.1951199999999993, -12.1951199999999993, -21.7391299999999994, -21.7391299999999994, -3.9904229999999998, -3.9904229999999998, 38.1019700000000014, 3.6205650000000000, 3.8109760000000001, 12.0336900000000000, 12.1951199999999993, 49.9031000000000020, -20.8333300000000001, -20.8333300000000001, 10089.3099999999994907, -10000.0000000000000000, -10000.0000000000000000, 9.4302689999999991, -6.0496070000000000, -6.0496070000000000, 11.4339399999999998, 192.3077000000000112, -192.3077000000000112, -192.3077000000000112, 141.2346000000000004, -15.7853200000000005, -15.7853200000000005, -7.3588930000000001, -7.3588930000000001, -7.8733950000000004, -7.8733950000000004, -57.1102199999999982, -57.1102199999999982, 32.0484399999999994, -8.1672650000000004, -8.1672650000000004, -8.0958550000000002, -8.0958550000000002, 7.3588930000000001, 8.1672650000000004, 7.8733950000000004, 8.0958550000000002, 26.3810700000000011, 42.5531900000000007, 21.2314200000000000, -21.2314200000000000, -21.2314200000000000, 1.1697270000000000, -1.1697270000000000, -1.1697270000000000, 30.3739699999999999, -3.5223670000000000, -3.5223670000000000, -11.5740700000000007, -11.5740700000000007, 262.9839000000000055, -188.6792000000000087, -188.6792000000000087, -13.6986299999999996, -13.6986299999999996, -60.6060599999999994, -60.6060599999999994, 277.7794000000000096, -26.3088599999999992, -26.3088599999999992, -26.4830499999999986, -26.4830499999999986, 13.6986299999999996, 84.3590300000000042, 111.3657000000000039, 108.6042999999999950, -49.0196100000000001, -49.0196100000000001, 123.0803999999999974, -92.5925900000000013, -92.5925900000000013, 12.3307099999999998, 8.5223669999999991, 121.0169999999999959, -23.4741800000000005, -23.4741800000000005, 74.5726700000000022, 127.6411999999999978, -35.2112699999999990, -35.2112699999999990, -84.0336199999999991, -84.0336199999999991, -8.3963059999999992, -8.3963059999999992, 78.4239000000000033, -9.8135429999999992, -9.8135429999999992, 249.7547999999999888, -153.8461000000000070, -153.8461000000000070, -11.8750699999999991, -11.8750699999999991, 123.4568000000000012, -123.4568000000000012, -123.4568000000000012, 8.3963059999999992, 133.2702999999999918, 248.3154000000000110, 109.3950999999999993, 10.0350699999999993, 18.1129099999999994, -1.6492940000000000, -1.6492940000000000, 1.6492940000000000, 8.2201459999999997, -2.5188920000000001, -2.5188920000000001, 386.1499000000000024, 209.3694000000000131, -138.3126000000000033, -138.3126000000000033, 38.3333399999999997, -5.0000000000000000, -5.0000000000000000, 13.2759699999999992, 44.3075100000000006, 133.2931000000000097, -10.5820100000000004, -10.5820100000000004, -23.5294099999999986, -23.5294099999999986, 14.9202899999999996, 13.9482499999999998, 286.5966000000000236, 19.0886400000000016, -13.8121500000000008, -13.8121500000000008, 12.4631600000000002, 85.6072800000000029, -37.4531899999999993, -37.4531899999999993, 10037.4500000000007276, 212.2223999999999933, 4.2354930000000000, -4.2354930000000000, -4.2354930000000000, 12.0418900000000004, 21.7692399999999999, 117.2840000000000060, -24.6913599999999995, -24.6913599999999995, 60.4233800000000016, 12.3725500000000004, -10.1625999999999994, -10.1625999999999994, 31.5656600000000012, -31.5656600000000012, -31.5656600000000012, 83.2819099999999963, -1.4144470000000000, -1.4144470000000000, 2.5419420000000001, 119.8662999999999954, -8.3333340000000007, -8.3333340000000007, -34.0135999999999967, -34.0135999999999967, -77.5193799999999982, -77.5193799999999982, 8.3333340000000007, 108.8545000000000016, 343.4710999999999785, 17.6870599999999989, 42.0954800000000020, 19.0460400000000014, -8.4817640000000001, -8.4817640000000001, 51.3229299999999995, -6.7795009999999998, -6.7795009999999998, -22.2717199999999984, -22.2717199999999984, 32.6174099999999996, 9.9638869999999997, 8.4817640000000001, 30.2114800000000017, 17.3611100000000000, 66.7081699999999955, 12.0783500000000004, 490.5504999999999995, -240.9638999999999953, -240.9638999999999953, 91.8750799999999970, -80.0000000000000000, -80.0000000000000000, 492.3722999999999956, 155.0669000000000040, 3.7243949999999999, 39.5029600000000016, -9.9700900000000008, -9.9700900000000008, 10032.6200000000008004, -10.3448499999999992, -10.3448499999999992, 57.5176400000000001, 13.2874900000000000, 66.6289400000000001, 7.5188920000000001, 6.7673899999999998, 7.7579520000000004, -7.7579520000000004, -7.7579520000000004, 26.1762799999999984, 14.7082899999999999, 19.6891199999999991, 69.8580699999999979, -27.2479599999999991, -27.2479599999999991, -26.4550300000000007, -26.4550300000000007, -16.1550900000000013, -16.1550900000000013, 83.5518299999999954, -39.0625000000000000, -39.0625000000000000, -17.2413799999999995, -17.2413799999999995, 82.7588999999999970, -17.2413799999999995, -17.2413799999999995, 10000.0000000000000000, -10000.0000000000000000, -10000.0000000000000000, 185.1031999999999869, -6.6225170000000002, -6.6225170000000002, -6.5359480000000003, -6.5359480000000003, -6.5359480000000003, -6.5359480000000003, 10039.0599999999994907, 6.6225170000000002, 6.5359480000000003, 6.5359480000000003, 73.4736699999999985, -65.7894699999999943, -65.7894699999999943, 112.0369000000000028, 10219.7099999999991269, -6.9444450000000000, -6.9444450000000000, -10000.0000000000000000, -10000.0000000000000000, 80.4967999999999932, -9.2592590000000001, -9.2592590000000001, -2.2727270000000002, -2.2727270000000002, -2.2727270000000002, -2.2727270000000002, -3.7807189999999999, -3.7807189999999999, -3.8895369999999998, -3.8895369999999998, 10000.0000000000000000, 9.2592590000000001, 2.2727270000000002, 2.2727270000000002, 3.7807189999999999, 3.8895369999999998, 9.5732269999999993, 57.7426800000000000, 6796.3400000000001455, -69.6136500000000069, -69.6136500000000069, -6666.6670000000003711, -6666.6670000000003711, 313.5160999999999945, -243.9024000000000001, -243.9024000000000001, 78.3364899999999977, -68.0272099999999966, -68.0272099999999966, -10.3092799999999993, -10.3092799999999993, 56.0289100000000033, -11.9760500000000008, -11.9760500000000008, -44.0528600000000026, -44.0528600000000026, 69.9848300000000023, -35.9712299999999985, -35.9712299999999985, 60.1258199999999974, -24.1545899999999989, -24.1545899999999989, 92.1817900000000066, 418.9938999999999965, -33.8982999999999990, -33.8982999999999990, -29.7619100000000003, -29.7619100000000003, -44.4444400000000002, -44.4444400000000002, -44.4444400000000002, -44.4444400000000002, 33.8982999999999990, 29.7619100000000003, 44.4444400000000002, 44.4444400000000002, 66.5424100000000038, 18.2815399999999997, 6841.9049999999997453, -32.0512799999999984, -32.0512799999999984, -70.6713799999999992, -70.6713799999999992, 662.7050000000000409, -265.6041999999999916, -265.6041999999999916, -32.2580600000000004, -32.2580600000000004, -88.8888900000000035, -88.8888900000000035, 318.8808000000000220, -53.2764999999999986, -53.2764999999999986, 204.9703000000000088, -51.0204099999999983, -51.0204099999999983, -51.0204099999999983, -51.0204099999999983, 51.0204099999999983, 51.0204099999999983, 142.1654000000000053, 22.6244399999999999, 162.3037999999999954, -72.1678500000000014, -72.1678500000000014, -45.4132600000000011, -45.4132600000000011, -44.7227200000000025, -44.7227200000000025, 64.7997500000000031, -44.0528600000000026, -44.0528600000000026, -20.7468900000000005, -20.7468900000000005, 170.2747999999999990, -54.0540499999999966, -54.0540499999999966, 20.7468900000000005, 54.0540499999999966, 111.6384000000000043, 110.9479000000000042};
+
+const int col[NNZ] = {0, 15, 45, 266, 1, 3, 2, 51, 185, 1, 3, 7, 119, 157, 428, 431, 4, 114, 5, 149, 432, 6, 17, 164, 366, 425, 3, 7, 8, 421, 9, 204, 276, 10, 411, 435, 11, 12, 13, 15, 11, 12, 11, 13, 14, 15, 0, 11, 14, 15, 16, 18, 56, 15, 16, 19, 20, 280, 333, 6, 17, 15, 18, 16, 19, 16, 20, 21, 22, 139, 21, 22, 139, 154, 196, 23, 24, 23, 24, 156, 169, 25, 98, 424, 26, 27, 26, 27, 84, 172, 28, 306, 315, 29, 30, 29, 30, 181, 185, 31, 375, 443, 32, 33, 238, 32, 33, 34, 221, 35, 324, 418, 36, 146, 261, 37, 38, 397, 37, 38, 39, 280, 38, 39, 416, 40, 46, 327, 412, 41, 171, 327, 42, 174, 43, 101, 285, 44, 173, 202, 263, 284, 0, 45, 252, 40, 46, 152, 284, 47, 204, 270, 282, 305, 48, 49, 113, 454, 48, 49, 237, 330, 441, 50, 81, 408, 2, 51, 396, 52, 270, 309, 53, 161, 405, 54, 268, 362, 55, 123, 223, 15, 56, 83, 57, 58, 59, 57, 58, 346, 376, 57, 59, 60, 331, 417, 61, 437, 62, 63, 88, 189, 393, 62, 63, 64, 65, 427, 435, 64, 65, 66, 68, 69, 70, 67, 69, 71, 72, 213, 66, 68, 66, 67, 69, 70, 71, 141, 310, 319, 66, 69, 70, 73, 74, 75, 90, 352, 67, 69, 71, 211, 212, 439, 463, 67, 72, 70, 73, 70, 74, 70, 75, 76, 77, 186, 263, 76, 77, 122, 264, 78, 79, 213, 420, 78, 79, 146, 251, 354, 392, 436, 80, 395, 456, 50, 81, 286, 82, 386, 422, 56, 83, 172, 27, 84, 87, 115, 274, 453, 85, 87, 86, 87, 235, 84, 85, 86, 87, 62, 88, 325, 89, 90, 385, 70, 89, 90, 92, 93, 94, 370, 91, 94, 386, 90, 92, 90, 93, 90, 91, 94, 95, 94, 95, 96, 325, 421, 97, 149, 155, 25, 98, 223, 99, 157, 219, 390, 100, 101, 43, 100, 101, 177, 232, 285, 102, 305, 428, 103, 104, 190, 256, 262, 103, 104, 105, 254, 106, 245, 333, 107, 190, 379, 108, 111, 109, 111, 110, 111, 108, 109, 110, 111, 122, 178, 297, 112, 262, 336, 377, 415, 48, 113, 114, 284, 4, 113, 114, 353, 84, 115, 116, 115, 116, 118, 117, 123, 345, 116, 118, 345, 3, 119, 428, 120, 122, 121, 122, 186, 263, 296, 77, 111, 120, 121, 122, 178, 264, 55, 117, 123, 124, 125, 124, 125, 384, 126, 128, 225, 127, 224, 437, 126, 128, 129, 140, 130, 140, 131, 140, 132, 141, 133, 142, 134, 139, 135, 140, 141, 143, 136, 140, 141, 144, 137, 198, 339, 138, 146, 21, 22, 134, 139, 129, 130, 131, 135, 136, 140, 69, 132, 135, 136, 141, 142, 472, 477, 486, 133, 141, 142, 241, 135, 143, 136, 144, 145, 182, 244, 338, 36, 79, 138, 146, 147, 433, 442, 148, 149, 216, 5, 97, 148, 149, 396, 150, 152, 153, 154, 151, 152, 153, 154, 46, 150, 151, 152, 202, 150, 151, 153, 22, 150, 151, 154, 240, 97, 155, 156, 24, 155, 156, 3, 99, 157, 158, 159, 182, 247, 387, 391, 158, 159, 368, 398, 160, 409, 53, 161, 354, 162, 166, 245, 163, 166, 230, 416, 469, 6, 164, 165, 340, 422, 162, 163, 166, 167, 168, 167, 168, 343, 399, 24, 169, 324, 170, 171, 41, 170, 171, 27, 83, 172, 201, 44, 173, 174, 284, 42, 173, 174, 175, 463, 176, 225, 101, 177, 339, 111, 122, 178, 179, 180, 179, 180, 232, 30, 181, 145, 158, 182, 183, 184, 247, 182, 183, 182, 184, 2, 30, 185, 76, 121, 186, 187, 197, 211, 188, 189, 62, 188, 189, 400, 103, 107, 190, 191, 194, 195, 373, 379, 415, 190, 191, 192, 193, 191, 192, 191, 193, 190, 194, 190, 195, 22, 196, 464, 187, 197, 200, 137, 198, 363, 199, 279, 197, 200, 172, 201, 246, 44, 152, 202, 296, 203, 204, 205, 206, 9, 47, 203, 204, 207, 282, 356, 368, 203, 205, 203, 206, 277, 204, 207, 208, 207, 208, 209, 210, 209, 210, 456, 464, 71, 187, 211, 71, 212, 443, 67, 78, 213, 214, 389, 439, 215, 216, 217, 218, 148, 215, 216, 276, 285, 428, 215, 217, 215, 218, 234, 99, 219, 270, 448, 220, 366, 463, 34, 221, 239, 435, 222, 344, 397, 406, 55, 98, 223, 376, 453, 127, 224, 225, 281, 376, 126, 176, 224, 225, 226, 227, 226, 227, 419, 228, 229, 228, 229, 314, 435, 163, 230, 385, 472, 231, 232, 233, 234, 101, 180, 231, 232, 231, 233, 218, 231, 234, 86, 235, 300, 398, 236, 299, 307, 49, 237, 293, 32, 238, 321, 221, 239, 421, 154, 240, 328, 142, 241, 257, 430, 479, 242, 243, 308, 242, 243, 145, 244, 299, 106, 162, 245, 201, 246, 332, 158, 182, 247, 248, 247, 248, 249, 250, 248, 249, 248, 250, 79, 251, 362, 45, 252, 255, 253, 255, 105, 254, 255, 384, 252, 253, 254, 255, 103, 256, 265, 335, 401, 426, 241, 257, 258, 259, 260, 430, 465, 257, 258, 257, 259, 257, 260, 36, 261, 442, 103, 112, 262, 335, 377, 44, 76, 121, 263, 264, 77, 122, 263, 264, 256, 265, 0, 266, 406, 267, 268, 54, 267, 268, 421, 269, 371, 403, 47, 52, 219, 270, 271, 309, 376, 270, 271, 272, 273, 271, 272, 271, 273, 84, 274, 344, 374, 406, 275, 314, 393, 9, 216, 276, 431, 206, 277, 278, 430, 478, 277, 278, 199, 279, 280, 16, 38, 279, 280, 224, 281, 47, 204, 282, 283, 284, 286, 287, 44, 46, 113, 173, 283, 284, 288, 289, 43, 101, 216, 285, 288, 289, 81, 283, 286, 283, 287, 284, 285, 288, 290, 284, 285, 289, 291, 288, 290, 289, 291, 292, 293, 237, 292, 293, 418, 294, 446, 295, 296, 297, 298, 121, 202, 295, 296, 455, 111, 295, 297, 295, 298, 236, 244, 299, 371, 235, 300, 301, 303, 305, 309, 322, 428, 300, 301, 302, 492, 301, 302, 300, 303, 304, 493, 303, 304, 47, 102, 300, 305, 309, 28, 306, 433, 236, 307, 372, 242, 308, 408, 52, 270, 300, 305, 309, 316, 317, 318, 390, 69, 310, 316, 317, 318, 319, 311, 316, 312, 317, 313, 318, 229, 275, 314, 28, 315, 427, 309, 310, 311, 316, 309, 310, 312, 317, 309, 310, 313, 318, 69, 310, 319, 320, 319, 320, 400, 238, 321, 322, 300, 321, 322, 339, 434, 323, 324, 35, 169, 323, 324, 88, 96, 325, 326, 327, 40, 41, 326, 327, 240, 328, 395, 329, 330, 49, 329, 330, 60, 331, 334, 246, 332, 391, 16, 106, 333, 331, 334, 433, 256, 262, 335, 112, 336, 342, 337, 393, 145, 338, 341, 137, 177, 322, 339, 165, 340, 422, 338, 341, 336, 342, 415, 168, 343, 222, 274, 344, 347, 349, 351, 352, 117, 118, 345, 346, 348, 350, 352, 374, 58, 345, 346, 344, 347, 345, 348, 344, 349, 345, 350, 344, 351, 394, 70, 344, 345, 352, 402, 114, 353, 419, 79, 161, 354, 355, 384, 204, 356, 357, 358, 360, 398, 356, 357, 359, 361, 356, 358, 357, 359, 356, 360, 357, 361, 54, 251, 362, 198, 363, 364, 437, 365, 366, 6, 220, 365, 366, 375, 425, 367, 368, 369, 370, 159, 204, 367, 368, 371, 372, 367, 369, 90, 367, 370, 269, 299, 368, 371, 307, 368, 372, 391, 190, 373, 407, 274, 345, 374, 31, 366, 375, 58, 223, 224, 270, 376, 394, 112, 262, 377, 378, 379, 380, 382, 107, 190, 378, 379, 383, 378, 380, 416, 429, 381, 383, 378, 382, 379, 381, 383, 125, 254, 355, 384, 89, 230, 385, 82, 91, 386, 158, 387, 388, 387, 388, 214, 389, 438, 99, 309, 390, 158, 332, 372, 391, 403, 79, 392, 438, 62, 275, 337, 393, 351, 376, 394, 80, 328, 395, 456, 464, 51, 149, 396, 37, 222, 397, 159, 235, 356, 398, 168, 399, 441, 189, 320, 400, 256, 401, 402, 352, 401, 402, 269, 391, 403, 404, 405, 53, 404, 405, 222, 266, 274, 406, 373, 407, 426, 50, 308, 408, 160, 409, 417, 410, 411, 10, 410, 411, 436, 40, 412, 413, 414, 415, 416, 413, 414, 112, 190, 342, 413, 415, 39, 163, 380, 413, 416, 60, 409, 417, 35, 293, 418, 227, 353, 419, 423, 78, 420, 421, 434, 8, 96, 239, 268, 420, 421, 82, 165, 340, 422, 419, 423, 25, 424, 6, 366, 425, 256, 407, 426, 64, 315, 427, 3, 102, 119, 216, 300, 428, 430, 380, 429, 430, 241, 257, 277, 428, 429, 430, 3, 276, 431, 5, 432, 147, 306, 334, 433, 436, 322, 420, 434, 435, 10, 64, 221, 229, 434, 435, 79, 411, 433, 436, 61, 127, 364, 437, 389, 392, 438, 71, 214, 439, 440, 441, 49, 399, 440, 441, 147, 261, 442, 31, 212, 443, 444, 445, 446, 448, 444, 445, 449, 454, 294, 444, 446, 454, 447, 449, 219, 444, 448, 450, 451, 452, 445, 447, 449, 448, 450, 448, 451, 448, 452, 84, 223, 453, 454, 48, 445, 446, 453, 454, 296, 455, 456, 457, 80, 210, 395, 455, 456, 458, 459, 460, 461, 462, 455, 457, 456, 458, 456, 459, 456, 460, 456, 461, 456, 462, 71, 175, 220, 463, 196, 210, 395, 464, 257, 465, 466, 479, 465, 466, 480, 467, 471, 477, 468, 472, 477, 163, 469, 470, 469, 470, 471, 467, 470, 471, 141, 230, 468, 472, 473, 474, 475, 476, 472, 473, 472, 474, 472, 475, 472, 476, 141, 467, 468, 477, 277, 478, 241, 465, 479, 480, 482, 466, 479, 480, 481, 482, 485, 480, 481, 485, 479, 480, 482, 483, 484, 482, 483, 482, 484, 480, 481, 485, 141, 486, 487, 489, 492, 493, 488, 489, 490, 487, 488, 489, 491, 488, 490, 489, 491, 301, 487, 492, 303, 487, 493};
+
+const int row[N+1] = {0, 4, 6, 9, 16, 18, 21, 26, 28, 30, 33, 36, 40, 42, 44, 46, 53, 59, 61, 63, 65, 67, 70, 75, 77, 81, 84, 86, 90, 93, 95, 99, 102, 105, 107, 109, 112, 115, 118, 122, 125, 129, 132, 134, 137, 142, 145, 149, 154, 158, 163, 166, 169, 172, 175, 178, 181, 184, 187, 191, 193, 196, 198, 203, 205, 209, 211, 215, 220, 222, 230, 238, 245, 247, 249, 251, 253, 257, 261, 265, 272, 275, 278, 281, 284, 290, 292, 295, 299, 302, 305, 312, 315, 317, 319, 323, 325, 328, 331, 334, 338, 340, 346, 349, 354, 356, 358, 361, 364, 366, 368, 370, 377, 382, 386, 390, 393, 396, 399, 402, 405, 407, 412, 419, 422, 424, 427, 430, 433, 435, 437, 439, 441, 443, 445, 447, 451, 455, 458, 460, 464, 470, 479, 483, 485, 487, 491, 495, 498, 501, 506, 510, 514, 519, 522, 527, 530, 533, 536, 542, 546, 548, 551, 554, 559, 561, 564, 567, 569, 573, 576, 578, 581, 585, 589, 592, 594, 596, 599, 602, 604, 607, 609, 615, 617, 619, 622, 625, 628, 630, 634, 643, 647, 649, 651, 653, 655, 658, 661, 664, 666, 668, 671, 675, 679, 687, 689, 692, 695, 697, 699, 703, 706, 709, 712, 715, 719, 725, 727, 730, 734, 737, 741, 745, 750, 755, 759, 761, 764, 766, 770, 774, 778, 782, 784, 787, 791, 794, 797, 800, 803, 806, 811, 814, 816, 819, 822, 825, 829, 833, 835, 837, 840, 843, 845, 849, 853, 859, 866, 868, 870, 872, 875, 880, 885, 889, 891, 894, 896, 900, 903, 910, 914, 916, 918, 923, 926, 930, 935, 937, 940, 944, 946, 949, 953, 961, 967, 970, 972, 976, 980, 982, 984, 986, 990, 992, 996, 1001, 1004, 1006, 1010, 1018, 1022, 1024, 1028, 1030, 1035, 1038, 1041, 1044, 1053, 1059, 1061, 1063, 1065, 1068, 1071, 1075, 1079, 1083, 1087, 1090, 1093, 1098, 1100, 1104, 1107, 1109, 1113, 1116, 1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 1141, 1144, 1148, 1151, 1153, 1156, 1158, 1165, 1173, 1176, 1178, 1180, 1182, 1184, 1187, 1192, 1195, 1198, 1200, 1206, 1210, 1212, 1214, 1216, 1218, 1221, 1223, 1225, 1227, 1233, 1237, 1243, 1245, 1248, 1252, 1256, 1259, 1262, 1265, 1271, 1274, 1278, 1283, 1287, 1289, 1291, 1294, 1298, 1301, 1304, 1307, 1309, 1312, 1315, 1320, 1323, 1327, 1330, 1335, 1338, 1341, 1345, 1348, 1351, 1354, 1357, 1360, 1362, 1365, 1369, 1372, 1375, 1378, 1380, 1384, 1386, 1390, 1392, 1397, 1402, 1405, 1408, 1412, 1416, 1422, 1426, 1428, 1430, 1433, 1436, 1439, 1446, 1449, 1455, 1458, 1460, 1465, 1469, 1475, 1479, 1483, 1486, 1489, 1491, 1495, 1498, 1501, 1505, 1509, 1513, 1515, 1521, 1524, 1526, 1528, 1530, 1534, 1539, 1543, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1569, 1573, 1577, 1580, 1583, 1586, 1589, 1592, 1595, 1603, 1605, 1607, 1609, 1611, 1615, 1617, 1622, 1628, 1631, 1636, 1638, 1640, 1643, 1645, 1649, 1652, 1656, 1658, 1660, 1663, 1666};
+
+const TYPE vect[N] = {0.8483178396146527, 0.6706497803768818, 0.9316474009271629, 0.8259915659051159, 0.0749141099239747, 0.6127769850532617, 0.3243126095086337, 0.4042432493346517, 0.4889216894177568, 0.0563064540342341, 0.2003220013219365, 0.4506809985950107, 0.2465207945154783, 0.6728182306226016, 0.5009444841545747, 0.2093887700710019, 0.3833875674814791, 0.2629049630806244, 0.8638473264891788, 0.0068903568874143, 0.4270323830861616, 0.6741981263711310, 0.0263683207747022, 0.8026358879744457, 0.1798125277440863, 0.6615563839200532, 0.5388504032397917, 0.2011487589490933, 0.9782153590525915, 0.2966113305625048, 0.8309093043465101, 0.5350148999623799, 0.8577368190902865, 0.7123884593841227, 0.9543748287741737, 0.8801106496231675, 0.8490474371089849, 0.1057599762765537, 0.3694121479802369, 0.7736908773165471, 0.3352441047664209, 0.1150862062662503, 0.7552438928694989, 0.3439478131991411, 0.2817087394018067, 0.2162976539518998, 0.4852360002861091, 0.0057640498417387, 0.7268004045533238, 0.5205619338920122, 0.6343918397825450, 0.1837588835868946, 0.2104079488356254, 0.1072048133407638, 0.0395947057002634, 0.9330220583897403, 0.0400209978161234, 0.0781877556303664, 0.2976758337005888, 0.6604415374454923, 0.9521082225628823, 0.0055543256941696, 0.1866873697274503, 0.2113213532549362, 0.7358651200871347, 0.4166371044168225, 0.1361097436415447, 0.2489126317221700, 0.9090931683964897, 0.8804237290693118, 0.4604792296588825, 0.9114630717835008, 0.5769636562652027, 0.2122197185028387, 0.8616704275858206, 0.1872496047054253, 0.8767687582692533, 0.0283493571356546, 0.0279669403183254, 0.0011739769717719, 0.8816612565392817, 0.2587451230366413, 0.1866195592416753, 0.6134283988672150, 0.7633503369248252, 0.7960136720771441, 0.2150746941951263, 0.4417212743517567, 0.1339641300308199, 0.3538190365232776, 0.7161428864829403, 0.4820827424201957, 0.1365021466723779, 0.7270079301991990, 0.5001932391978972, 0.5540293780631791, 0.8470236345937937, 0.6844720529281880, 0.4470622249540837, 0.7395825773469121, 0.7140811894103265, 0.1689867872929229, 0.0127652175460312, 0.7390011771948182, 0.3876666127209407, 0.3889554660143338, 0.9958895038034786, 0.0158743815304996, 0.0926458725571736, 0.2794561312296530, 0.9676672240567189, 0.5488249778351199, 0.3736362838672994, 0.9939879360511114, 0.0488822949430138, 0.3265921768161898, 0.4076365668481068, 0.7380059200028429, 0.4603180906842517, 0.2686659846029050, 0.2873166763901486, 0.0140301867513706, 0.4365584272465929, 0.0345076306283345, 0.5850196896009423, 0.7098586658566393, 0.9590813817633715, 0.8804033136216555, 0.9980595552286854, 0.1311251822393278, 0.6068136140773602, 0.1738269702011150, 0.7043815368917442, 0.9467849911595574, 0.1974515966674346, 0.0635165505526809, 0.6575472564589070, 0.8045666146925562, 0.9454611044982865, 0.5500252055448300, 0.5747363779881197, 0.2960850128458551, 0.2194919783622648, 0.3791679357611623, 0.5763745454924379, 0.3318679405186607, 0.7153851752905834, 0.1383370271666072, 0.8911010718686341, 0.9622471231685127, 0.5206280483477259, 0.0008209235817533, 0.1501220678649025, 0.2858982586997720, 0.3812301813733660, 0.9627033012525220, 0.0463248309608765, 0.5536461903980735, 0.4254903780644615, 0.0203918495292208, 0.4973494195501764, 0.2673520692161342, 0.4281354730441760, 0.3587292238852842, 0.1142915128435944, 0.0093934765497702, 0.0804645407448647, 0.0284739994461690, 0.4373515560814680, 0.5054042027492341, 0.2582268915654431, 0.8181935096212357, 0.7683934478079263, 0.5459306504169178, 0.0766898881091194, 0.9984011518683296, 0.8463122892926332, 0.4788924934998232, 0.1107166721271598, 0.9047358057561707, 0.5840612962298976, 0.6958031753814037, 0.8557126220464411, 0.0826713344650157, 0.4838001677368423, 0.2449075192032626, 0.0621016340325793, 0.4332419552713540, 0.1310235740565679, 0.7481090411770011, 0.3776118887938892, 0.3337436210362408, 0.3530460812272584, 0.1288111479371150, 0.4149216674120018, 0.1393425109365868, 0.2064459122797230, 0.3694359018085516, 0.8343916891700796, 0.2161886277610609, 0.0932775064851222, 0.0868289540623030, 0.2731170192259920, 0.2809660913222927, 0.3356228717457055, 0.6834390896658262, 0.3267963290017710, 0.6599492802927122, 0.0435681404918652, 0.0703576285531474, 0.7228303690021292, 0.8851721422324230, 0.2107907960557750, 0.0784159016220343, 0.9615694238266003, 0.6775815611931443, 0.9326414560282523, 0.8723857873635551, 0.9394618799882867, 0.3442387428829488, 0.1764777376547630, 0.7488398469947676, 0.3732788212737727, 0.6865869483303326, 0.4000735922705779, 0.5721400649461029, 0.1120309369903489, 0.5113942038836549, 0.0511100243190568, 0.7175259320021290, 0.8575182783261570, 0.5784878853002242, 0.1349654718909908, 0.1192925964151463, 0.9723092959416103, 0.3728264511453223, 0.8067179481103881, 0.3324480279209299, 0.4657453752075365, 0.7348138089866270, 0.8214647023258758, 0.9113418227917187, 0.6642716262994925, 0.0133558732261029, 0.2924958180021960, 0.0444334379695671, 0.9396144243758447, 0.7655890089284283, 0.6692048055281263, 0.8380837128929514, 0.4554570494036198, 0.6909078386850797, 0.0154017302137861, 0.8479124776327206, 0.9462209557130911, 0.7677202200246880, 0.9279331770197743, 0.5153327254961750, 0.8926116198429296, 0.8930457828966226, 0.9844385803033128, 0.6018790515210961, 0.8235301034352464, 0.0665720402909682, 0.1171662519206369, 0.5962448507692394, 0.9738432213333370, 0.3392590904124880, 0.1702801969466125, 0.1112857249315309, 0.9700813330218533, 0.5367884989765819, 0.3431322540111262, 0.9916240181373843, 0.3521808070203251, 0.8331481345246642, 0.6456496860574097, 0.2994661478507417, 0.0078332098488572, 0.8627726556183214, 0.2780721231188467, 0.6182353827040976, 0.9308493287741327, 0.6149876265111006, 0.3391027675786487, 0.3531793653091488, 0.6387221774977941, 0.5143005186400568, 0.1387668025077644, 0.5926468898446244, 0.3193379819348149, 0.3649024825358713, 0.2938847760898528, 0.5343363005946771, 0.3760463174887679, 0.5725036130122593, 0.1542553433051521, 0.3174075718189375, 0.6639159037834084, 0.3751798269431847, 0.3564936178023257, 0.6578860801973966, 0.4878134574691712, 0.9332728824329765, 0.0345427675439928, 0.1146445520498136, 0.5848943772682992, 0.1662239710723725, 0.0693781648667100, 0.8694019864172604, 0.2191364932019932, 0.7499672365062569, 0.2761112415673199, 0.7271363734624335, 0.2440285243758249, 0.9430020624479579, 0.1440250692777039, 0.4132824422670823, 0.7614656056422392, 0.4837363618225233, 0.9809620066037130, 0.4671709271543480, 0.9348033021342805, 0.4537214639120629, 0.7552137859210596, 0.7954668379373012, 0.6065311722051752, 0.2438654997599063, 0.5503350398133949, 0.4419460762806375, 0.6275061460415338, 0.6777206266673230, 0.0111472337609468, 0.9957734162654772, 0.1246312888209616, 0.2480800843375707, 0.4231461451579110, 0.1280403970412000, 0.6484414922888584, 0.3644668863337679, 0.2337922181906040, 0.9616873414436868, 0.6779685516426726, 0.1868708749314857, 0.8782741573686651, 0.6930411666732398, 0.6177010100415349, 0.5780037143603487, 0.2939854446950563, 0.5608423882500977, 0.8761871775505162, 0.6441989655644730, 0.1810071211477334, 0.9713249811202351, 0.8720289503655566, 0.4294390166286234, 0.2532811225707449, 0.8969774741365252, 0.6100117892988954, 0.1960699631492769, 0.9301354739598914, 0.7224530353170772, 0.5191027833281141, 0.1268089950416111, 0.1431706944572742, 0.9397683680282519, 0.1708568797583734, 0.5315018323429732, 0.6242359909565518, 0.2254886187046609, 0.9782736794109049, 0.0429141142621825, 0.9891683505866096, 0.2024717685614631, 0.0196826080659797, 0.6910933955316909, 0.2768293352286383, 0.7314732999603543, 0.0768308861291690, 0.1551093873719042, 0.6270659160444320, 0.6743060895480667, 0.3147389465422545, 0.4556540188327001, 0.5336071033488232, 0.4432436833380574, 0.0120537996182269, 0.5606860679844500, 0.5307654724048916, 0.6319108687982481, 0.5153605911637142, 0.0116703069980435, 0.7528566241924224, 0.2322452408551318, 0.7033589194426896, 0.3536862332363362, 0.3209196647064811, 0.1158322695030433, 0.4410043195102882, 0.9634522939857088, 0.0111739864620048, 0.8487323055999937, 0.2863026779679601, 0.4353499310626945, 0.2683100918304755, 0.6302969530620972, 0.2979827363431253, 0.1274088565446815, 0.3721852873425603, 0.2453010715007161, 0.1633665685261703, 0.7126333281485220, 0.6533281645944697, 0.5808262573450925, 0.2843454312853405, 0.5096368273743479, 0.9051319563159713, 0.4906882869254115, 0.5983082899373767, 0.6495880834323012, 0.5757792223158209, 0.0233123321742689, 0.2692903346720601, 0.0041469810558323, 0.6096013896981760, 0.8805597089399800, 0.0901025770439411, 0.2018707114365797, 0.4634050247425767, 0.3379314576230700, 0.6204605185689965, 0.4753747255809189, 0.5112592424386806, 0.6616274253970083, 0.4937665420329518, 0.3197317654981836, 0.4695717035134276, 0.2874055811093641, 0.9097122918366112, 0.0698162859045715, 0.3201641400746201, 0.5185972464080254, 0.9905173479273656, 0.3712390779666960, 0.0056370341850618, 0.0395522598727142, 0.3921534977584564, 0.8522029796288904, 0.3346194563079505, 0.6429233013492220, 0.6360433801365077, 0.1716043134564161, 0.5201155310158935, 0.0245860778925260, 0.4362019819492165, 0.1192679823597833, 0.3809198621760362, 0.2251123162515863, 0.5670535082271564, 0.2278627039406244, 0.0529453230927324, 0.6021001931781610, 0.6790772399224166, 0.7716493715297760, 0.2868627608072348, 0.7086536443199765, 0.9392660254042972, 0.6378488996151952, 0.5753465166316099, 0.9778896639349272, 0.6541005362632644, 0.6175561601799165, 0.2817555840484371, 0.1438112390964338, 0.6612642174687781, 0.5655215638728978, 0.9423159385445181, 0.8964914023258709, 0.9174747407529212, 0.4929803186620192, 0.9779240481377166, 0.3181047984817529, 0.2986892413220574, 0.2571762285898997, 0.1916000764166038, 0.5341139182822019, 0.7468217076566656, 0.4481070842468913, 0.5936366233299584, 0.7442557099061952, 0.5410113779987784, 0.0755455037462515, 0.0748945408290509, 0.0881736635594114};
+
+const TYPE chk[N] = {1871.7848080859318998, -8.8439346286551412, -4.1057636527807517, 289.6985128226187953, -11.3888136769930313, -307.8727521860603247, -192.7076542348153225, 3.3739865325637135, -3.7889578481137649, -3.0030200188998841, 8.0089633919431567, -3.3878017418294029, -3.0507008083914444, 59.2886936321243780, 2.9780958415066543, -158.1087480869031481, -40.3262360397810298, -0.9998784011311241, -8.6790677362391619, -3.6421228254484515, 3.8221319552663089, 28.1578751222559660, -22.8084561065140434, 14.1462897791780868, -27.0101605289843931, -33.4278312802921320, -15.4282590237712292, 102.0737627182930538, -122.9141674420853576, 177.5731832035259004, -194.6708453104239425, -9.5877871247874005, -0.5910436133885639, -7.4448808984098021, -21.2901834471117652, 6.5296397343814405, 207.7696636653149085, -82.8785136868552854, -627.8396077027809952, -4.5538964512164206, -4.8696341365514755, 18.8627359579027427, -13.4001854927612971, -1.1962227013482489, -24.7211712469747376, -62.8975685233145612, 20.7683449290265152, -1456.6387643549214772, 51.3752220577458871, -150.1990543825074838, -0.5786378479182659, -29.5124032253664268, -133.3076202113051067, 110.1763257597252306, -234.5138421221315923, -24.8925210009502003, -11.0773106295720893, -28.3848223330828553, -17.6783022552457716, 11.4499164125633826, -12.7091616872776072, -1.5614053746095236, 6.8041196526507148, 4.9259887100509641, -11.3506549539871635, 1190.9436075001278823, -2484.5111002742546589, -110.2096940987770068, -11.9447166291469706, -74.2937020753856672, -24.3940727044116699, -8.8416055446615545, -0.3193098789636171, -4.8323913872224225, 31.6010612222814871, -14.2357972762354450, -16.4245656655571004, -11.4073779417708359, -3.3683862158863089, -0.5831733830976340, -28.1555167811446907, -21.0448917754093010, -3.4837296605126014, 9.5905875806634455, -10.7108437322303942, -2.4630859330493071, -30.9994367236274364, -13.2741097589108961, 109.1759648784947103, -831.5751831466451449, -54.2097201844439525, -10.7368018292021077, -9.0510378505474502, 596.6175577306246396, -81.7191777681538269, -33.1422416862454199, -31.7594411557345140, 168.6614422223490806, -43.5252908408722732, -95.1344962278169106, -25.0744583969294759, -15.2923513744222141, 4.6992766898660987, 66.1447600745041342, -18.5332104250914220, -15.6392125648504408, -6.6174697666645255, -1.0879563968423296, -4.8853220326143560, -15.4712344386299527, -30.1430410773888227, -0.2481221561805920, -47.5276662794670912, -2.8305404462721935, 19.7919632674200727, 3.0205207835020609, 5.7608975154015045, 217.5469408419017157, -265.0008164051230892, -14.1798142706209820, -2.2002285117553266, -8.0793180083037104, -7.0930533216017135, 104.1196140123579141, -116.6557205310090808, 124.6351416292567080, -82.7524326735291140, -26.4842704123301473, 2.0349001696593234, -12.7480204773969277, 19.1486987216882341, 60.8196984735684865, -7.8963423184519606, 11.3250281729143616, -8.0721066338425551, -1.9329324366658569, 31.6559865113579377, 392.8591952594022132, -193.1217106521979758, -796.6479203536769091, -39.5458760918757619, -99.5606132752340898, 62.3359925628013940, -8.1001851626878789, -37.8182719517499280, -15.9080533562545163, -45.5361469446285270, 73.9836670420719145, -152.2360106684313621, -22.8908134766747509, -0.8971288764742744, 1.6748021950719214, 30.9084340367891777, -29.8387648959012708, -48.4172596268893045, 6.9620768652454332, -5.5179177328512674, 12.5569742548993322, -0.9179957634002185, -19.8778311347448877, 11.7887306408715222, -20.8678667499200401, -32.3227983968563208, -26.1615889856070964, -5.2857544551806335, -2.9183908628467439, 13.0042084086873135, -1.4060534467112857, -1.5314522771159977, -6.9603370186869240, -6.1349795939893799, -23.0237310261970762, -18.0955620222033389, -3.8714606901731021, -4.5687398489700506, -1.7641704717111413, -26.0744876339404286, -41.8864955933674779, 0.0842325156402604, 7.2387011463599933, 171.5920167232028746, -318.1415275909248521, -462.6796794455115105, -56.5291503888484073, -17.9800390649588522, 53.6292862354133248, -58.5439720406343369, 142.2734603500565811, 580.0664146297856405, -203.2063609329190683, 86.7562082412331677, 25.7648797354961268, -27.2634049872177400, -19.4942694467464044, 3.3362938341511645, -5.0681806125144071, 1.2745978051065041, -16.0787286512922414, 20.9676353947546197, 6.7952369035818938, -2.2131175656875501, -48.1202955747272227, 12.9561102587239390, -39.4560642896417164, -3660.9006748120191332, 4027.9694847203504651, 134.3972912874223766, -20.7228805656372117, -14.8924085218783269, -13.0587457803110016, 65.5436963885441486, -204.7246445215849917, 0.7280292482259990, 1.9692169463096698, 111.5192436130447504, -176.8751606241443142, -959.3073635761014657, -20.7620597623385521, -7.3897091677512412, 1010.1690013903163390, 36.2534606878878662, -14.0346306179491389, -75.8835561414735196, 141.3986934054079825, -18.7427766081788540, 9.9605941180847282, 2.3599058214195114, 20.6191828535223607, -11.1235304599698104, 2.9833005939198873, -60.7609350399250516, 17.4346349701559049, -20.5765762708552202, 7.5919997675561497, 36.2202688256436289, -1.6647136078425038, 1.8663411854113692, 109.5142131389502964, -16.2008695270493597, -22.5255419909889234, -44.4648440265346636, -41.9690445502082454, -7.7149806638302678, 6.9277556462491425, 19.8987672590675402, -25.6095329507658178, -7.2696315110631664, -54.0561117761851122, 26.0731812026484207, 90.6100033717952300, -117.1523140441187252, -1358.1360510674574016, -66.7277613631491135, 1112.8348382090882751, -142.0859836352898640, -74.7653244881297212, 106.5968714819060068, 2.3316076458121895, -24.9494763887881703, 0.7030289941015688, 0.4420052213994232, 23.0081504119473763, 167.2100554452262884, -217.4999358314942128, 111.4107260136770066, -8.3333961174175712, -48.9593151816018448, 21.7515415610445864, 319.2133211513757374, -16.8436937217716647, 1.6133803025361830, -15.9204693708605500, -9.8535831028968666, -10.1033966404954612, -2.5909967530970111, 7.8008828616401971, -29.3540362142419191, 40.3306272905754071, 5.8816614585927383, 20.3634143186272922, -41.7604202286373507, -3.7771106316670915, -23.8688734189802432, 44.9083790983060851, -26.6538280112725658, -5.9368211167880318, -66.1272829898980916, 63.0096926875636001, -22.6072880203460862, -2.6636053785806633, 0.7136416170167985, 114.5682170441557730, -154.5188872580180259, -106.2992824087824886, 0.1076961886411922, 1.7999643732687751, 6.9205708732205569, -73.1659541184407232, -9.5358595584767336, 9034.6811655120600335, 6428.3482987614233934, -2.7130028388457679, 48.5318295127536388, -57.3406342522616228, 131.9520669424607604, -55.6731111450469456, 295.0214800996614031, -177.3227928764624721, -99.1454563287276756, 220.0600401365433925, -36.3624458451291446, 19.2224774922722581, 2.8685377665355274, 17.3636158236268834, -11.1766483537520696, -6.3240649121962180, 94.1677260348064920, 517.6258969709534767, -58.7840871654754693, -11.8055048737910617, -19.7050764733324755, 38.4544032094926536, -21.8527509282711598, 6.4051121067341246, -15.7230499761801905, -96.8796388432965614, 144.5883880520403011, -108.5270895292474762, 37.9985191216638540, -11.7136032458725090, 197.0852836008277222, 34.3564214089367468, -17.3964645156189910, 95.8439119078080637, -71.7636963382541069, 53.9478574544632039, 79.6300976596169789, 15.9527846947069722, 52.8035210663891945, 0.0645350270188201, -5.3314174515736248, 23.6571395564440152, -6.2471523518731011, 77.7876444768589010, -675.2627969379977912, 211.9190754900325260, -3216.8360208307267385, -2045.5501719175044855, -493.5133056841480084, -443.9102052257845799, -42.4060244738823826, 1293.7815179533238279, 487.5841811759120219, -54.8133813095899782, 1020.3673465704118826, -535.0255687071303328, -19.7308611248566343, 1614.0070384548191669, -319.7381410863234805, -404.8324165665175087, -438.3024782236904002, -66.9186257294047806, -63.4642744302176496, -57.9036519695690899, -25.9383281933588350, -47.0603903494329430, -29.4326163521255495, 54.3524640596935456, 730.0789231412579738, 36.0587461239678078, -5.0519624357748576, -2.9250423725631514, 1535.8211661286259186, -3774.7541075839271798, 892.0568778648539592, -1.0153272322639033, 293.5008571439258276, 23.7234488268187498, 52.2504514282590264, 15.5571868983889132, 2.5029395641808936, 0.4732728443675525, 23.2301053969714815, 38.1078926443680430, 6.0613899268872107, -2.3799962203020524, 44.6857690567703756, -14.6747050577247720, -31.7282452452638672, 44.0722759469662151, -40.9224988054577423, -23.5383332758564876, 31.6529293986003779, 8.2240783290234845, 11.7269400267686343, -143.0022284810266342, 71.6059294474964787, -75.7633251173143947, -11.3162489857358999, -40.6462848628561986, -11.3776308232304935, -16.7677548059059447, 10.5180077638598881, 19.7343566114501741, -7.6854950852902775, -2.6995362232872404, 26.8527358639635452, 19.8774656644438252, -137.8851900039671250, -51.4184208952680279, 26.6312969236649479, -22.0369035264292066, 101.0392158710919830, 135.5635316703188664, -80.1084874449653483, 64.2733412417919681, -15.1081092270946016, -86.1886924398141332, 57.9064531820786357, -121.6972419986612124, 6.9148477624079021, 324.2818730558734046, 2.2759148462490337, -1.6466880240586437, 383.0918086953634543, -34.7333847880945541, -4.0805110580642285, 156.1638214898648016, 148.1792339293115219, -5.5957897580932130, 4773.2500243420108745, -0.5087160669729016, 73.3022182442790893, -6.9129742379189594, -17.0037918576874816, 72.9286085661630068, -83.1542460309150471, 121.2064124325577694, 60.1949231164581420, -12.3034432377556033, -5.6863836584204810, -17.4413799734767636, 36.5534795786125812, 220.3473852268654127, -1.6294110602065643, 120.3441861874725021, 4387.1376633766303712, -15.4668571077764234, 52.1487279212117016, 9.9111460108396603, 17.4448144397329798, 18.7000019332348586, -22.8773695371921733, 4.7619535334250003, -1.0212201350424337, 1553.3595396478458497, -2644.9605837905137378, 2.2508517239483838, -9.3185695179376893, 0.4685151300908785, 3892.5228487948334077, -6023.6472088138989420, -3754.5350769937749646, -19.8387615821018706, -4.5337270471402755, 9392.4641462224717543, 7.4425275565646194, 60.1587583693673054, 3828.2284715210594186, -8705.7219818705398211, -349.6691446384469373, -94.2542749549050995, 4.9444842990352171, -1.4883262417015199, -22.7782566675297105, 262.9228196612849047, -41.4939436943127689, -93.2106691274442767, -54.0862563070921851, 137.2328473295738149, 3289.7010045606616586, 421.7222858299887207, -35.7612002805023792, -29.6145667077643822, 51.4469089457480422, -93.3746342238168836, 53.2095284717940018, 86.3360563783271573, -101.2096472194543537, -1.6900237078904561, -37.3756946065164684, -2.5774958040035170, -58.2295810103489302, 110.2558197718876016};
+
+#else
+const TYPE mat[NNZ] = {1, 10, 2, 11, 12, 13, 3, 14, 4, 15, 5, 16, 17, 18, 6, 19, 20, 21, 7};
+const int col[NNZ] = {0, 3, 1, 4, 0, 1, 2, 1, 3, 4, 4, 6, 3, 4, 5, 6, 2, 4, 6};
+const int row[N+1] = {0, 2, 4, 7, 10, 12, 16, 19};
+const TYPE vect[N] = {1, 2, 3, 4, 5, 6, 7};
+const TYPE chk[N] = {41, 59, 47, 119, 137, 327, 214};
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/data.h gem5-SALAM/benchmarks/sys_validation/spmv/sw/data.h
--- gem5/benchmarks/sys_validation/spmv/sw/data.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/data.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,7 @@
+#include "../defines.h"
+
+extern const TYPE mat[NNZ];
+extern const int col[NNZ];
+extern const int row[N+1];
+extern const TYPE vect[N];
+extern const TYPE chk[N];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/spmv/sw/.gitignore
--- gem5/benchmarks/sys_validation/spmv/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/isr.c gem5-SALAM/benchmarks/sys_validation/spmv/sw/isr.c
--- gem5/benchmarks/sys_validation/spmv/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/isr.c	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,10 @@
+#include <stdio.h>
+#include "spmv.h"
+
+void isr(void)
+{
+    // uint8_t * hwacc = (uint8_t *)0x2f000000;
+    // hwacc[0] = 0x0;
+    // printf("Interrupt\n\r");
+	// common_val = 1;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/spmv/sw/main.cpp
--- gem5/benchmarks/sys_validation/spmv/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/main.cpp	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,76 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "spmv.h"
+#include "../../../common/m5ops.h"
+
+spmv_struct sps;
+
+#define BASE            0x80c00000
+#define SPM_BASE        0x2f100000
+
+#ifdef TEST
+//Ensure 8 byte alignment
+#define VAL_OFFSET      0
+#define COLS_OFFSET     8*NNZ
+#define ROWD_OFFSET     8*NNZ + 4*NNZ
+#define VEC_OFFSET      8*NNZ + 4*NNZ + 4*(N+2)
+#define OUT_OFFSET      8*NNZ + 4*NNZ + 4*(N+2) + 8*N
+#define CHK_OFFSET      8*NNZ + 4*NNZ + 4*(N+2) + 8*N + 8*N
+#else
+//Ensure 8 byte alignment
+#define VAL_OFFSET      0
+#define COLS_OFFSET     8*NNZ
+#define ROWD_OFFSET     8*NNZ + 4*(NNZ+1)
+#define VEC_OFFSET      8*NNZ + 4*(NNZ+1) + 4*(N+1)
+#define OUT_OFFSET      8*NNZ + 4*(NNZ+1) + 4*(N+1) + 8*(N+1)
+#define CHK_OFFSET      8*NNZ + 4*(NNZ+1) + 4*(N+1) + 8*(N+1) + 8*(N+1)
+#endif
+
+volatile uint8_t  * acc      = (uint8_t  *)(TOP);
+volatile uint32_t * loc_val  = (uint32_t *)(TOP+1);
+volatile uint32_t * loc_cols = (uint32_t *)(TOP+9);
+volatile uint32_t * loc_rows = (uint32_t *)(TOP+17);
+volatile uint32_t * loc_vec  = (uint32_t *)(TOP+25);
+volatile uint32_t * loc_out  = (uint32_t *)(TOP+33);
+
+int main(void) {
+	TYPE *val          = (TYPE *)(BASE+VAL_OFFSET);
+	int *cols          = (int  *)(BASE+COLS_OFFSET);
+	int *rowDelimiters = (int  *)(BASE+ROWD_OFFSET);
+	TYPE *vec          = (TYPE *)(BASE+VEC_OFFSET);
+	TYPE *out          = (TYPE *)(BASE+OUT_OFFSET);
+	TYPE *check        = (TYPE *)(BASE+CHK_OFFSET);
+    volatile int count = 0;
+
+    sps.val = val;
+    sps.cols = cols;
+    sps.rowDelimiters = rowDelimiters;
+    sps.vec = vec;
+    sps.out = out;
+    sps.check = check;
+
+    printf("Generating data\n");
+    genData(&sps);
+    printf("Data generated\n");
+
+    *loc_val  = (uint64_t)(BASE+VAL_OFFSET);
+    *loc_cols = (uint64_t)(BASE+COLS_OFFSET);
+    *loc_rows = (uint64_t)(BASE+ROWD_OFFSET);
+    *loc_vec  = (uint64_t)(BASE+VEC_OFFSET);
+    *loc_out  = (uint64_t)(BASE+OUT_OFFSET);
+
+    *acc = DEV_INIT;
+	while(*acc != DEV_INTR) count++;
+    printf("Job complete\n");
+#ifdef CHECK
+	if(!checkData(&sps)) {
+	    for (int i = 0; i < N; i++) {
+	        if(((sps.out[i]-sps.check[i]) > EPSILON) || ((sps.out[i]-sps.check[i]) < -EPSILON))
+	            printf("out[%2d]=%10f expected[%d]=%10f\n", i, sps.out[i], i, sps.check[i]);
+	    }
+	}
+#endif
+	m5_dump_stats();
+  	m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/Makefile gem5-SALAM/benchmarks/sys_validation/spmv/sw/Makefile
--- gem5/benchmarks/sys_validation/spmv/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,46 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o data.o main.o isr.o
+
+all: clean main.elf
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/spmv/sw/spmv.h gem5-SALAM/benchmarks/sys_validation/spmv/sw/spmv.h
--- gem5/benchmarks/sys_validation/spmv/sw/spmv.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/spmv/sw/spmv.h	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,40 @@
+#include "../defines.h"
+#include "data.h"
+
+#define EPSILON 1.0e-6
+
+typedef struct {
+    TYPE * val;
+    int * cols;
+    int * rowDelimiters;
+    TYPE * vec;
+    TYPE * out;
+    TYPE * check;
+} spmv_struct;
+
+int checkData(spmv_struct * sps) {
+    int i;
+    for (i = 0; i < N; i++) {
+        if(((sps->out[i]-sps->check[i]) > EPSILON) || ((sps->out[i]-sps->check[i]) < -EPSILON)) {
+            printf("Check Failed\n");
+            return 0;
+        }
+    }
+    printf("Check Passed\n");
+    return 1;
+}
+
+void genData(spmv_struct * sps) {
+    int i;
+    for (i = 0; i < NNZ; i++) {
+        sps->val[i] = mat[i];
+        sps->cols[i] = col[i];
+    }
+    for (i = 0; i <= N; i++) {
+        sps->rowDelimiters[i] = row[i];
+    }
+    for (i = 0; i < N; i++) {
+        sps->vec[i] = vect[i];
+        sps->check[i] = chk[i];
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/stencil2d/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/configs/quick_config.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/config.yml gem5-SALAM/benchmarks/sys_validation/stencil2d/config.yml
--- gem5/benchmarks/sys_validation/stencil2d/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/config.yml	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,289 @@
+---
+acc_cluster:
+  - Name: stencil2d_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 25
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: stencil2d
+      IrPath: hw/stencil2d.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: ORIG
+        Type: SPM
+        Size: 32768
+        Ports: 1
+    - Var:
+      - Name: SOL
+        Type: SPM
+        Size: 32768
+        Ports: 1
+    - Var:
+      - Name: FILTER
+        Type: RegisterBank
+        Size: 360
+        Ports: 1
+hw_config:
+  top:
+  stencil2d:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 1
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 1
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/defines.h gem5-SALAM/benchmarks/sys_validation/stencil2d/defines.h
--- gem5/benchmarks/sys_validation/stencil2d/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,19 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#define CHECK
+
+//Define input sizes
+#define COL 64
+#define ROW 128
+#define FIL 9
+
+//Data Bounds
+#define TYPE int32_t
+#define MAX 1000
+#define MIN 1
+
+//Set number of iterations to execute
+#define MAX_ITERATION 1
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil2d/.gitignore
--- gem5/benchmarks/sys_validation/stencil2d/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/.gitignore	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/.gitignore
--- gem5/benchmarks/sys_validation/stencil2d/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/.gitignore	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/stencil2d/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/hw_defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,14 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../stencil2d_clstr_hw_defines.h"
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+//Define input sizes
+#define col_size COL
+#define row_size ROW
+#define f_size FIL
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/hw/Makefile gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/Makefile
--- gem5/benchmarks/sys_validation/stencil2d/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/Makefile	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,6 @@
+KERN=stencil2d.c top.c
+build: $(FILES)
+	clang -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/hw/stencil2d.c gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/stencil2d.c
--- gem5/benchmarks/sys_validation/stencil2d/hw/stencil2d.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/stencil2d.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,30 @@
+#include "hw_defines.h"
+
+void stencil (){
+    TYPE    * orig       = (TYPE    *)ORIG;
+    TYPE    * sol        = (TYPE    *)SOL;
+    TYPE    * filter     = (TYPE    *)FILTER;
+    int r, c, k1, k2;
+    TYPE temp, mul;
+
+    stencil_label1:
+    #pragma nounroll
+    for (c=0; c<col_size-2; c++) {
+        stencil_label2:
+        #pragma unroll 2
+        for (r=0; r<row_size-2; r++) {
+            temp = (TYPE)0;
+            stencil_label3:
+            #pragma nounroll
+            for (k1=0;k1<3;k1++){
+                stencil_label4:
+                #pragma unroll
+                for (k2=0;k2<3;k2++){
+                    mul = filter[k1*3 + k2] * orig[(r+k1)*col_size + c+k2];
+                    temp += mul;
+                }
+            }
+            sol[(r*col_size) + c] = temp;
+        }
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/hw/top.c gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/top.c
--- gem5/benchmarks/sys_validation/stencil2d/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/hw/top.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,43 @@
+#include "hw_defines.h"
+
+void top(uint64_t ORIG_addr,
+		 uint64_t SOL_addr,
+		 uint64_t FILTER_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * STENCILFlags  = (uint8_t *)STENCIL2D;
+	volatile uint8_t  * DmaFlags      = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr     = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr     = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen    = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer M1
+	*DmaRdAddr  = ORIG_addr;
+	*DmaWrAddr  = ORIG;
+	*DmaCopyLen = row_size * col_size * sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer M2
+	*DmaRdAddr  = FILTER_addr;
+	*DmaWrAddr  = FILTER;
+	*DmaCopyLen = f_size * sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*STENCILFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*STENCILFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer M3
+	*DmaRdAddr  = SOL;
+	*DmaWrAddr  = SOL_addr;
+	*DmaCopyLen = row_size * col_size * sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/Makefile gem5-SALAM/benchmarks/sys_validation/stencil2d/Makefile
--- gem5/benchmarks/sys_validation/stencil2d/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/Makefile	2024-02-22 18:17:14.840943117 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/stencil2d_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/stencil2d/stencil2d_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/stencil2d/stencil2d_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/stencil2d_clstr_hw_defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,15 @@
+//BEGIN GENERATED CODE
+//Cluster: STENCIL2D_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: STENCIL2D
+#define STENCIL2D 0x10020080
+#define ORIG 0x100200c0
+#define SOL 0x10028100
+#define FILTER 0x10030140
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/bench.h gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/bench.h
--- gem5/benchmarks/sys_validation/stencil2d/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/bench.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,63 @@
+#include "../defines.h"
+#include "../stencil2d_clstr_hw_defines.h"
+
+#define F_SIZE       3
+
+#define EPSILON 1.0e-6
+#define rcIndex     (r*COL + c)
+
+volatile int stage;
+
+typedef struct {
+    TYPE * inp;
+    TYPE * sol;
+    TYPE * filter;
+    TYPE * check;
+} stencil_struct;
+
+int checkData( stencil_struct * sts ) {
+    int i;
+
+    for (i = 0; i < ROW*COL; i++) {
+        if (sts->sol[i]!= sts->check[i]) {
+            printf("Check Failed\n");
+            return 0;
+        }
+    }
+    printf("Check Passed\n");
+
+    return 1;
+}
+
+void genData(stencil_struct * sts) {
+    int r, c, k1, k2, temp, mul, sol;
+
+    for( r=0; r < ROW; r++ ) {
+        for( c=0; c < COL; c++ ) {
+            sts->inp[rcIndex] = rcIndex;
+            //printf("Input[%d]=%d\n", rcIndex, rcIndex);
+        }
+    }
+
+    for(k1=0; k1 < F_SIZE; k1++) {
+        for (k2=0; k2 < F_SIZE; k2++){
+            sts->filter[k1*F_SIZE + k2] = k1*F_SIZE + k2;
+        }
+    }
+
+    for( r=0; r < ROW-2; r++ ) {
+        for( c=0; c < COL-2; c++ ) {
+            temp = (TYPE)0;
+
+            for(k1=0; k1 < F_SIZE; k1++) {
+                for (k2=0; k2 < F_SIZE; k2++){
+                    mul = sts->filter[k1*F_SIZE + k2] * sts->inp[(r+k1)*COL + c + k2];
+                    temp += mul;
+                }
+            }
+            sts->check[rcIndex] = temp;
+        }
+    }
+
+}
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/boot.ld
--- gem5/benchmarks/sys_validation/stencil2d/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/boot.ld	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/boot.s gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/boot.s
--- gem5/benchmarks/sys_validation/stencil2d/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/boot.s	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/.gitignore
--- gem5/benchmarks/sys_validation/stencil2d/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/.gitignore	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/isr.c gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/isr.c
--- gem5/benchmarks/sys_validation/stencil2d/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/isr.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/main.cpp
--- gem5/benchmarks/sys_validation/stencil2d/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/main.cpp	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,62 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+#define INP_OFFSET      0
+#define SOL_OFFSET      sizeof(TYPE)*ROW*COL
+#define FIL_OFFSET      2*sizeof(TYPE)*ROW*COL
+#define CHK_OFFSET      2*sizeof(TYPE)*ROW*COL  + sizeof(TYPE)*FIL
+
+stencil_struct sts;
+
+volatile uint8_t  * top        = (uint8_t  *)TOP;
+volatile uint32_t * loc_inp    = (uint32_t *)(TOP + 0x1);
+volatile uint32_t * loc_sol    = (uint32_t *)(TOP + 0x9);
+volatile uint32_t * loc_filter = (uint32_t *)(TOP + 0x11);
+
+int main(void) {
+    m5_reset_stats();
+	uint32_t base = 0x80c00000;
+	TYPE *inp     = (TYPE *)(base+INP_OFFSET);
+	TYPE *sol     = (TYPE *)(base+SOL_OFFSET);
+	TYPE *filter  = (TYPE *)(base+FIL_OFFSET);
+	TYPE *check   = (TYPE *)(base+CHK_OFFSET);
+    int i;
+    volatile int count = 0;
+	stage = 0;
+
+    sts.inp = inp;
+    sts.sol = sol;
+    sts.filter = filter;
+    sts.check = check;
+
+    printf("Generating data\n");
+    genData(&sts);
+    printf("Data generated\n");
+
+    *loc_inp    = (uint32_t)(void *)inp;
+    *loc_sol    = (uint32_t)(void *)sol;
+    *loc_filter = (uint32_t)(void *)filter;
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+    bool fail = false;
+	if(!checkData(&sts)) {
+	    for (i = 0; i < ROW*COL; i++) {
+	        if(sts.sol[i] != sts.check[i])
+	            printf("out[%2d]=%d expected[%d]=%d\n", i, sts.sol[i], i, sts.check[i]);
+	    }
+	}
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+	m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil2d/sw/Makefile gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/Makefile
--- gem5/benchmarks/sys_validation/stencil2d/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil2d/sw/Makefile	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    datatypes:
+      floating_point:
+        size:
+          - single
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/10ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,31 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    datatypes:
+      integer:
+        size:
+          - all
+        sign:
+          - signed
+          - unsigned
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add # These are added to the generated C++ files and python Class
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/additional_units/float_trig_sine/float_trig_sine.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_trig_sine'
+    stages: 3
+    cycles: 3
+    enum_value: 17
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - none
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_register/bit_register.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_register'
+    stages: 0
+    cycles: 0
+    enum_value: 15
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: any
+        sign: any
+        APMode: True
+      pointer:
+        size: any
+        sign: any
+        APMode: True
+    instructions: # LLVM OpCode: Runtime Cycles
+      - any
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bit_shifter/bit_shifter.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bit_shifter'
+    stages: 1
+    cycles: 1
+    enum_value: 3
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - shl
+      - lshr
+      - ashr
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/bitwise_operations/bitwise_operations.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'bitwise_operations'
+    stages: 1
+    cycles: 1
+    enum_value: 4
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - and_inst
+      - or_inst
+      - xor_inst
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_adder/double_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 6
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+      - fsub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_divider/double_divider.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 10
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/double_multiplier/double_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'double_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 9
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: double
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_adder/float_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_adder'
+    stages: 3
+    cycles: 5
+    enum_value: 5
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fadd
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_divider/float_divider.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_divider'
+    stages: 3
+    cycles: 16
+    enum_value: 8
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/float_multiplier/float_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,38 @@
+---
+functional_unit:
+  parameters:
+    alias: 'float_multiplier'
+    stages: 3
+    cycles: 5
+    enum_value: 7
+    datatypes:
+      integer:
+        size: none
+        sign: none
+        APMode: False
+      floating_point:
+        size: single
+        sign: any
+        APMode: True
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - fmul
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_adder/integer_adder.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,39 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_adder'
+    stages: 1
+    cycles: 1
+    enum_value: 1
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - add
+      - sub
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/functional_units/40nm_model/5ns/default_profile/integer_multiplier/integer_multiplier.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,40 @@
+---
+functional_unit:
+  parameters:
+    alias: 'integer_multiplier'
+    stages: 1
+    cycles: 1
+    enum_value: 2
+    datatypes:
+      integer:
+        size: any
+        sign: any
+        APMode: True
+      floating_point:
+        size: none
+        sign: none
+        APMode: False
+      pointer:
+        size: none
+        sign: none
+        APMode: False
+    instructions: # LLVM OpCode: Runtime Cycles
+      - mul
+      - udiv
+      - sdiv
+    limit: 0 # Max Concurrent Functional Unit Scheduling (0 = Max IR Instances)
+  power_model:
+    units:
+      power: mW
+      energy: pJ
+      time: ns
+      area: um^2
+    latency: 5
+    internal_power: 9.743773e-03
+    switch_power: 7.400587e-03
+    dynamic_power: 1.800732e-03
+    dynamic_energy: 9.003937e-03
+    leakage_power: 7.395312e-05
+    area: 5.981433e+00
+    path_delay: 1.75
+...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/instructions/inst_list.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/instructions/inst_list.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/hw_interface/instructions/inst_list.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/hw_interface/instructions/inst_list.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,197 @@
+instructions:
+  add:
+    functional_unit: 1
+    opcode_num: 13
+    runtime_cycles: 1
+  addrspacecast:
+    functional_unit: 0
+    opcode_num: 50
+    runtime_cycles: 1
+  alloca:
+    functional_unit: 0
+    opcode_num: 31
+    runtime_cycles: 0
+  and_inst:
+    functional_unit: 4
+    opcode_num: 28
+    runtime_cycles: 1
+  ashr:
+    functional_unit: 3
+    opcode_num: 27
+    runtime_cycles: 1
+  bitcast:
+    functional_unit: 0
+    opcode_num: 49
+    runtime_cycles: 1
+  br:
+    functional_unit: 0
+    opcode_num: 2
+    runtime_cycles: 0
+  call:
+    functional_unit: 0
+    opcode_num: 56
+    runtime_cycles: 0
+  fadd:
+    functional_unit: 6
+    opcode_num: 14
+    runtime_cycles: 5
+  fcmp:
+    functional_unit: 0
+    opcode_num: 54
+    runtime_cycles: 1
+  fdiv:
+    functional_unit: 10
+    opcode_num: 21
+    runtime_cycles: 16
+  fence:
+    functional_unit: 0
+    opcode_num: 35
+    runtime_cycles: 1
+  fmul:
+    functional_unit: 9
+    opcode_num: 18
+    runtime_cycles: 4
+  fpext:
+    functional_unit: 0
+    opcode_num: 46
+    runtime_cycles: 1
+  fptosi:
+    functional_unit: 0
+    opcode_num: 42
+    runtime_cycles: 1
+  fptoui:
+    functional_unit: 0
+    opcode_num: 41
+    runtime_cycles: 1
+  fptrunc:
+    functional_unit: 0
+    opcode_num: 45
+    runtime_cycles: 1
+  frem:
+    functional_unit: 0
+    opcode_num: 24
+    runtime_cycles: 16
+  fsub:
+    functional_unit: 6
+    opcode_num: 16
+    runtime_cycles: 5
+  gep:
+    functional_unit: 0
+    opcode_num: 34
+    runtime_cycles: 1
+  icmp:
+    functional_unit: 0
+    opcode_num: 53
+    runtime_cycles: 1
+  indirectbr:
+    functional_unit: 0
+    opcode_num: 4
+    runtime_cycles: 0
+  inttoptr:
+    functional_unit: 0
+    opcode_num: 48
+    runtime_cycles: 1
+  invoke:
+    functional_unit: 0
+    opcode_num: 5
+    runtime_cycles: 0
+  landingpad:
+    functional_unit: 0
+    opcode_num: 66
+    runtime_cycles: 0
+  load:
+    functional_unit: 0
+    opcode_num: 32
+    runtime_cycles: 0
+  lshr:
+    functional_unit: 3
+    opcode_num: 26
+    runtime_cycles: 1
+  mul:
+    functional_unit: 2
+    opcode_num: 17
+    runtime_cycles: 1
+  or_inst:
+    functional_unit: 4
+    opcode_num: 29
+    runtime_cycles: 1
+  phi:
+    functional_unit: 0
+    opcode_num: 55
+    runtime_cycles: 0
+  ptrtoint:
+    functional_unit: 0
+    opcode_num: 47
+    runtime_cycles: 1
+  resume:
+    functional_unit: 0
+    opcode_num: 6
+    runtime_cycles: 0
+  ret:
+    functional_unit: 0
+    opcode_num: 1
+    runtime_cycles: 0
+  sdiv:
+    functional_unit: 2
+    opcode_num: 20
+    runtime_cycles: 1
+  select:
+    functional_unit: 0
+    opcode_num: 57
+    runtime_cycles: 0
+  sext:
+    functional_unit: 0
+    opcode_num: 40
+    runtime_cycles: 1
+  shl:
+    functional_unit: 3
+    opcode_num: 25
+    runtime_cycles: 1
+  srem:
+    functional_unit: 0
+    opcode_num: 23
+    runtime_cycles: 1
+  store:
+    functional_unit: 0
+    opcode_num: 33
+    runtime_cycles: 0
+  sub:
+    functional_unit: 1
+    opcode_num: 15
+    runtime_cycles: 1
+  switch_inst:
+    functional_unit: 0
+    opcode_num: 3
+    runtime_cycles: 0
+  trunc:
+    functional_unit: 0
+    opcode_num: 38
+    runtime_cycles: 1
+  udiv:
+    functional_unit: 2
+    opcode_num: 19
+    runtime_cycles: 1
+  uitofp:
+    functional_unit: 0
+    opcode_num: 43
+    runtime_cycles: 1
+  unreachable:
+    functional_unit: 0
+    opcode_num: 7
+    runtime_cycles: 0
+  urem:
+    functional_unit: 0
+    opcode_num: 22
+    runtime_cycles: 1
+  vaarg:
+    functional_unit: 0
+    opcode_num: 60
+    runtime_cycles: 0
+  xor_inst:
+    functional_unit: 4
+    opcode_num: 30
+    runtime_cycles: 1
+  zext:
+    functional_unit: 0
+    opcode_num: 39
+    runtime_cycles: 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/configs/quick_config.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/quick_config.yml
--- gem5/benchmarks/sys_validation/stencil3d/configs/quick_config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/configs/quick_config.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,4 @@
+---
+  simulator_config:
+    functional_units: #Custom To Quick Config, Auto-Generated
+    instructions: #Custom To Quick Config, Auto-Generated
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/config.yml gem5-SALAM/benchmarks/sys_validation/stencil3d/config.yml
--- gem5/benchmarks/sys_validation/stencil3d/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/config.yml	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,289 @@
+---
+acc_cluster:
+  - Name: stencil3d_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: Top
+      IrPath: hw/top.ll
+      PIOSize: 25
+      InterruptNum: 68
+      PIOMaster: LocalBus
+      # Local to PIO
+      LocalSlaves: LocalBus
+      Debug: False
+  - Accelerator:
+    - Name: stencil3d
+      IrPath: hw/stencil3d.ll
+      Debug: False
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: C_VAR
+        Type: RegisterBank
+        Size: 8
+        Ports: 2
+    - Var:
+      - Name: ORIG
+        Type: SPM
+        Size: 65536
+        Ports: 2
+    - Var:
+      - Name: SOL
+        Type: SPM
+        Size: 65536
+        Ports: 2
+hw_config:
+  top:
+  stencil3d:
+    instructions:
+      add:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 13
+        runtime_cycles: 1
+      addrspacecast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 50
+        runtime_cycles: 1
+      alloca:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 31
+        runtime_cycles: 0
+      and_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 28
+        runtime_cycles: 1
+      ashr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 27
+        runtime_cycles: 1
+      bitcast:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 49
+        runtime_cycles: 0
+      br:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 2
+        runtime_cycles: 0
+      call:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 56
+        runtime_cycles: 0
+      fadd:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 14
+        runtime_cycles: 5
+      fcmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 54
+        runtime_cycles: 1
+      fdiv:
+        functional_unit: 10
+        functional_unit_limit: 0
+        opcode_num: 21
+        runtime_cycles: 16
+      fence:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 35
+        runtime_cycles: 0
+      fmul:
+        functional_unit: 9
+        functional_unit_limit: 0
+        opcode_num: 18
+        runtime_cycles: 4
+      fpext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 46
+        runtime_cycles: 0
+      fptosi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 42
+        runtime_cycles: 0
+      fptoui:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 41
+        runtime_cycles: 0
+      fptrunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 45
+        runtime_cycles: 0
+      frem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 24
+        runtime_cycles: 16
+      fsub:
+        functional_unit: 6
+        functional_unit_limit: 0
+        opcode_num: 16
+        runtime_cycles: 5
+      gep:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 34
+        runtime_cycles: 0
+      icmp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 53
+        runtime_cycles: 0
+      indirectbr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 4
+        runtime_cycles: 0
+      inttoptr:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 48
+        runtime_cycles: 0
+      invoke:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 5
+        runtime_cycles: 0
+      landingpad:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 66
+        runtime_cycles: 0
+      load:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 32
+        runtime_cycles: 0
+      lshr:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 26
+        runtime_cycles: 1
+      mul:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 17
+        runtime_cycles: 1
+      or_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 29
+        runtime_cycles: 1
+      phi:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 55
+        runtime_cycles: 0
+      ptrtoint:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 47
+        runtime_cycles: 0
+      resume:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 6
+        runtime_cycles: 0
+      ret:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 1
+        runtime_cycles: 0
+      sdiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 20
+        runtime_cycles: 1
+      select:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 57
+        runtime_cycles: 0
+      sext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 40
+        runtime_cycles: 0
+      shl:
+        functional_unit: 3
+        functional_unit_limit: 0
+        opcode_num: 25
+        runtime_cycles: 1
+      srem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 23
+        runtime_cycles: 1
+      store:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 33
+        runtime_cycles: 0
+      sub:
+        functional_unit: 1
+        functional_unit_limit: 0
+        opcode_num: 15
+        runtime_cycles: 1
+      switch_inst:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 3
+        runtime_cycles: 0
+      trunc:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 38
+        runtime_cycles: 0
+      udiv:
+        functional_unit: 2
+        functional_unit_limit: 0
+        opcode_num: 19
+        runtime_cycles: 1
+      uitofp:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 43
+        runtime_cycles: 0
+      unreachable:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 7
+        runtime_cycles: 0
+      urem:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 22
+        runtime_cycles: 1
+      vaarg:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 60
+        runtime_cycles: 0
+      xor_inst:
+        functional_unit: 4
+        functional_unit_limit: 0
+        opcode_num: 30
+        runtime_cycles: 1
+      zext:
+        functional_unit: 0
+        functional_unit_limit: 0
+        opcode_num: 39
+        runtime_cycles: 0
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/defines.h gem5-SALAM/benchmarks/sys_validation/stencil3d/defines.h
--- gem5/benchmarks/sys_validation/stencil3d/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,20 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#define CHECK
+
+#define C_SIZE  2
+
+//Define input sizes
+#define HYT     32
+#define COL     32
+#define ROW     16
+//Data Bounds
+#define TYPE int32_t
+#define MAX 1000
+#define MIN 1
+//Convenience Macros
+#define SIZE (ROW * COL * HYT)
+#define INDX(_row_size,_col_size,_i,_j,_k) ((_i)+_row_size*((_j)+_col_size*(_k)))
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil3d/.gitignore
--- gem5/benchmarks/sys_validation/stencil3d/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/.gitignore	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,2 @@
+config.ini
+simulation/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/hw/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/.gitignore
--- gem5/benchmarks/sys_validation/stencil3d/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/.gitignore	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/hw/hw_defines.h gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/hw_defines.h
--- gem5/benchmarks/sys_validation/stencil3d/hw/hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/hw_defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,21 @@
+/*
+Implementation based on algorithm described in:
+"Stencil computation optimization and auto-tuning on state-of-the-art multicore architectures"
+K. Datta, M. Murphy, V. Volkov, S. Williams, J. Carter, L. Oliker, D. Patterson, J. Shalf, K. Yelick
+SC 2008
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdint.h>
+#include "../defines.h"
+#include "../stencil3d_clstr_hw_defines.h"
+
+#define DEV_INIT	0x01
+#define DEV_INTR	0x04
+
+//Define input sizes
+#define height_size HYT
+#define col_size 	COL
+#define row_size 	ROW
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/hw/Makefile gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/Makefile
--- gem5/benchmarks/sys_validation/stencil3d/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/Makefile	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,6 @@
+KERN=stencil3d.c top.c
+build: $(FILES)
+	clang -O1 -S -fno-slp-vectorize -fno-vectorize -fno-unroll-loops -fno-inline -fno-builtin -emit-llvm $(KERN)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/hw/stencil3d.c gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/stencil3d.c
--- gem5/benchmarks/sys_validation/stencil3d/hw/stencil3d.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/stencil3d.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,82 @@
+/*
+Implementation based on algorithm described in:
+"Stencil computation optimization and auto-tuning on state-of-the-art multicore architectures"
+K. Datta, M. Murphy, V. Volkov, S. Williams, J. Carter, L. Oliker, D. Patterson, J. Shalf, K. Yelick
+SC 2008
+*/
+
+#include "hw_defines.h"
+
+void stencil3d() {
+    TYPE    * C        = (TYPE    *)C_VAR;
+    TYPE    * orig     = (TYPE    *)ORIG;
+    TYPE    * sol      = (TYPE    *)SOL;
+
+    int i, j, k;
+    TYPE sum0, sum1, mul0, mul1;
+
+    // Handle boundary conditions by filling with original values
+    height_bound_col :
+    #pragma nounroll
+    // #pragma unroll
+    for(j=0; j<col_size; j++) {
+        height_bound_row :
+        #pragma unroll 2
+        // #pragma nounroll
+        for(k=0; k<row_size; k++) {
+            sol[INDX(row_size, col_size, k, j, 0)] = orig[INDX(row_size, col_size, k, j, 0)];
+            sol[INDX(row_size, col_size, k, j, height_size-1)] = orig[INDX(row_size, col_size, k, j, height_size-1)];
+        }
+    }
+    col_bound_height :
+    #pragma nounroll
+    // #pragma unroll
+    for(i=1; i<height_size-1; i++) {
+        col_bound_row :
+        #pragma unroll 2
+        // #pragma nounroll
+        for(k=0; k<row_size; k++) {
+            sol[INDX(row_size, col_size, k, 0, i)] = orig[INDX(row_size, col_size, k, 0, i)];
+            sol[INDX(row_size, col_size, k, col_size-1, i)] = orig[INDX(row_size, col_size, k, col_size-1, i)];
+        }
+    }
+    row_bound_height :
+    #pragma nounroll
+    // #pragma unroll
+    for(i=1; i<height_size-1; i++) {
+        row_bound_col :
+        #pragma unroll 2
+        // #pragma nounroll
+        for(j=1; j<col_size-1; j++) {
+            sol[INDX(row_size, col_size, 0, j, i)] = orig[INDX(row_size, col_size, 0, j, i)];
+            sol[INDX(row_size, col_size, row_size-1, j, i)] = orig[INDX(row_size, col_size, row_size-1, j, i)];
+        }
+    }
+
+    // Stencil computation
+    loop_height :
+    // #pragma unroll 2
+    #pragma nounroll
+    for(i = 1; i < height_size - 1; i++){
+        loop_col :
+        // #pragma unroll 2
+        #pragma nounroll
+        for(j = 1; j < col_size - 1; j++){
+            loop_row :
+            // #pragma unroll 2
+            #pragma unroll
+            for(k = 1; k < row_size - 1; k++){
+                sum0 = orig[INDX(row_size, col_size, k, j, i)];
+                sum1 = orig[INDX(row_size, col_size, k, j, i + 1)] +
+                       orig[INDX(row_size, col_size, k, j, i - 1)] +
+                       orig[INDX(row_size, col_size, k, j + 1, i)] +
+                       orig[INDX(row_size, col_size, k, j - 1, i)] +
+                       orig[INDX(row_size, col_size, k + 1, j, i)] +
+                       orig[INDX(row_size, col_size, k - 1, j, i)];
+                mul0 = sum0 * C[0];
+                mul1 = sum1 * C[1];
+                sol[INDX(row_size, col_size, k, j, i)] = mul0 + mul1;
+            }
+        }
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/hw/top.c gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/top.c
--- gem5/benchmarks/sys_validation/stencil3d/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/hw/top.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,43 @@
+#include "hw_defines.h"
+
+void top(uint64_t C_addr,
+		 uint64_t ORIG_addr,
+		 uint64_t SOL_addr) {
+
+	//Define Device MMRs
+	volatile uint8_t  * STENCILFlags  = (uint8_t *)STENCIL3D;
+	volatile uint8_t  * DmaFlags      = (uint8_t  *)(DMA_Flags);
+	volatile uint64_t * DmaRdAddr     = (uint64_t *)(DMA_RdAddr);
+	volatile uint64_t * DmaWrAddr     = (uint64_t *)(DMA_WrAddr);
+	volatile uint32_t * DmaCopyLen    = (uint32_t *)(DMA_CopyLen);
+
+	//Transfer Input Matrices
+	//Transfer C
+	*DmaRdAddr  = C_addr;
+	*DmaWrAddr  = C_VAR;
+	*DmaCopyLen = C_SIZE*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	//Transfer ORIG
+	*DmaRdAddr  = ORIG_addr;
+	*DmaWrAddr  = ORIG;
+	*DmaCopyLen = SIZE*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+
+	//Start the accelerated function
+	*STENCILFlags = DEV_INIT;
+	//Poll function for finish
+	while ((*STENCILFlags & DEV_INTR) != DEV_INTR);
+
+	//Transfer SOL
+	*DmaRdAddr  = SOL;
+	*DmaWrAddr  = SOL_addr;
+	*DmaCopyLen = SIZE*sizeof(TYPE);
+	*DmaFlags   = DEV_INIT;
+	//Poll DMA for finish
+	while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/Makefile gem5-SALAM/benchmarks/sys_validation/stencil3d/Makefile
--- gem5/benchmarks/sys_validation/stencil3d/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/Makefile	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+	
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+	
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/stencil3d_clstr_hw_defines.h gem5-SALAM/benchmarks/sys_validation/stencil3d/stencil3d_clstr_hw_defines.h
--- gem5/benchmarks/sys_validation/stencil3d/stencil3d_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/stencil3d_clstr_hw_defines.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,15 @@
+//BEGIN GENERATED CODE
+//Cluster: STENCIL3D_CLSTR
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+//Accelerator: STENCIL3D
+#define STENCIL3D 0x10020080
+#define C_VAR 0x100200c0
+#define ORIG 0x10020100
+#define SOL 0x10030140
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/bench.h gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/bench.h
--- gem5/benchmarks/sys_validation/stencil3d/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/bench.h	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,75 @@
+#include "../defines.h"
+#include "../stencil3d_clstr_hw_defines.h"
+
+volatile int stage;
+
+typedef struct {
+    TYPE * C;
+    TYPE * inp;
+    TYPE * sol;
+    TYPE * check;
+} stencil_struct;
+
+int checkData( stencil_struct * sts ) {
+    int i, j, k;
+
+    for( i=0; i < SIZE; i++ ) {
+        if (sts->sol[i]!= sts->check[i]) {
+            printf("Check Failed\n");
+            return 0;
+        }
+    }
+    printf("Check Passed\n");
+
+    return 1;
+}
+
+void genData(stencil_struct * sts) {
+
+    int i, j, k, sum0, sum1, mul0, mul1;
+
+    for( i=0; i < SIZE; i++ ) {
+        sts->inp[i] = i;
+    }
+
+    for( i=0; i < C_SIZE; i++ ) {
+        sts->C[i] = i+2;
+    }
+
+    for(j=0; j < COL; j++) {
+        for(k=0; k < ROW; k++) {
+            sts->check[INDX(ROW, COL, k, j, 0)] = sts->inp[INDX(ROW, COL, k, j, 0)];
+            sts->check[INDX(ROW, COL, k, j, HYT-1)] = sts->inp[INDX(ROW, COL, k, j, HYT-1)];
+        }
+    }
+    for(i=1; i < HYT-1; i++) {
+        for(k=0; k < ROW; k++) {
+            sts->check[INDX(ROW, COL, k, 0, i)] = sts->inp[INDX(ROW, COL, k, 0, i)];
+            sts->check[INDX(ROW, COL, k, COL-1, i)] = sts->inp[INDX(ROW, COL, k, COL-1, i)];
+        }
+    }
+    for(i=1; i < HYT-1; i++) {
+        for(j=1; j < COL-1; j++) {
+            sts->check[INDX(ROW, COL, 0, j, i)] = sts->inp[INDX(ROW, COL, 0, j, i)];
+            sts->check[INDX(ROW, COL, ROW-1, j, i)] = sts->inp[INDX(ROW, COL, ROW-1, j, i)];
+        }
+    }
+
+    // Stencil computation
+    for(i = 1; i < HYT - 1; i++){
+        for(j = 1; j < COL - 1; j++){
+            for(k = 1; k < ROW - 1; k++){
+                sum0 = sts->inp[INDX(ROW, COL, k, j, i)];
+                sum1 = sts->inp[INDX(ROW, COL, k, j, i + 1)] +
+                       sts->inp[INDX(ROW, COL, k, j, i - 1)] +
+                       sts->inp[INDX(ROW, COL, k, j + 1, i)] +
+                       sts->inp[INDX(ROW, COL, k, j - 1, i)] +
+                       sts->inp[INDX(ROW, COL, k + 1, j, i)] +
+                       sts->inp[INDX(ROW, COL, k - 1, j, i)];
+                mul0 = sum0 * sts->C[0];
+                mul1 = sum1 * sts->C[1];
+                sts->check[INDX(ROW, COL, k, j, i)] = mul0 + mul1;
+            }
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/boot.ld gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/boot.ld
--- gem5/benchmarks/sys_validation/stencil3d/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/boot.ld	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/boot.s gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/boot.s
--- gem5/benchmarks/sys_validation/stencil3d/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/boot.s	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/.gitignore gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/.gitignore
--- gem5/benchmarks/sys_validation/stencil3d/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/.gitignore	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/isr.c gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/isr.c
--- gem5/benchmarks/sys_validation/stencil3d/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/isr.c	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,12 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/main.cpp gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/main.cpp
--- gem5/benchmarks/sys_validation/stencil3d/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/main.cpp	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,64 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+#define C_OFFSET        0
+#define INP_OFFSET      sizeof(TYPE)*C_SIZE
+#define SOL_OFFSET      sizeof(TYPE)*C_SIZE + sizeof(TYPE)*SIZE
+#define CHK_OFFSET      sizeof(TYPE)*C_SIZE + 2*sizeof(TYPE)*SIZE
+
+stencil_struct sts;
+
+volatile uint8_t  * top     = (uint8_t  *)(TOP + 0x00);
+volatile uint32_t * loc_C   = (uint32_t *)(TOP + 0x01);
+volatile uint32_t * loc_inp = (uint32_t *)(TOP + 0x09);
+volatile uint32_t * loc_sol = (uint32_t *)(TOP + 0x11);
+
+int main(void) {
+    m5_reset_stats();
+    uint32_t BASE = 0x80c00000;
+    TYPE *C       = (TYPE *)(BASE+C_OFFSET);
+	TYPE *inp     = (TYPE *)(BASE+INP_OFFSET);
+	TYPE *sol     = (TYPE *)(BASE+SOL_OFFSET);
+	TYPE *check   = (TYPE *)(BASE+CHK_OFFSET);
+	int i;
+    volatile int count = 0;
+	stage = 0;
+
+    sts.C = C;
+    sts.inp = inp;
+    sts.sol = sol;
+    sts.check = check;
+
+    printf("Generating data\n");
+    genData(&sts);
+    printf("Data generated\n");
+
+    *loc_C   = (uint32_t)(void *)C;
+    *loc_inp = (uint32_t)(void *)inp;
+    *loc_sol = (uint32_t)(void *)sol;
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    printf("Job complete\n");
+
+#ifdef CHECK
+    bool fail = false;
+	if(!checkData(&sts)) {
+	    for (i = 0; i < SIZE; i++) {
+	        if(sts.sol[i] != sts.check[i]) {
+	            printf("out[%2d]=%d expected[%d]=%d\n", i, sts.sol[i], i, sts.check[i]);
+                fail = true;
+            }
+	    }
+	}
+    if(fail)
+        printf("Check Failed\n");
+    else
+        printf("Check Passed\n");
+#endif
+	m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/sys_validation/stencil3d/sw/Makefile gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/Makefile
--- gem5/benchmarks/sys_validation/stencil3d/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/sys_validation/stencil3d/sw/Makefile	2024-02-22 18:17:14.844943138 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/config.yml gem5-SALAM/benchmarks/test-cases/geptest/config.yml
--- gem5/benchmarks/test-cases/geptest/config.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/config.yml	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,43 @@
+---
+acc_cluster:
+  - Name: geptest_clstr
+  - DMA:
+    - Name: dma
+      MaxReqSize: 64
+      BufferSize: 128
+      PIOMaster: LocalBus
+      Type: NonCoherent
+      InterruptNum: 95
+  - Accelerator:
+    - Name: top
+      IrPath: benchmarks/test-cases/geptest/hw/top.ll
+      ConfigPath: benchmarks/test-cases/geptest/hw/top.ini
+      Debug: False
+      InterruptNum: 68
+      PIOSize: 1
+      PIOMaster: LocalBus
+    - Var:
+      - Name: TESTA
+        Type: SPM
+        Size: 1024
+        Ports: 1
+    - Var:
+      - Name: TESTB
+        Type: SPM
+        Size: 1024
+        Ports: 1
+    - Var:
+      - Name: TESTC
+        Type: SPM
+        Size: 1024
+        Ports: 1
+    - Var:
+      - Name: TESTD
+        Type: SPM
+        Size: 1024
+        Ports: 1
+    - Var:
+      - Name: TESTE
+        Type: SPM
+        Size: 1024
+        Ports: 1
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/defines.h gem5-SALAM/benchmarks/test-cases/geptest/defines.h
--- gem5/benchmarks/test-cases/geptest/defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/defines.h	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,31 @@
+#ifndef __DEFINES_H__
+#define __DEFINES_H__
+
+#include <stdlib.h>
+#include <inttypes.h>
+#include <stdio.h>
+#include <string.h>
+
+#define CHECK
+
+#define MAX_LEVEL INT8_MAX
+
+// Terminology (but not values) from graph500 spec
+//   graph density = 2^-(2*SCALE - EDGE_FACTOR)
+#define SCALE 8
+#define EDGE_FACTOR 16
+
+#define N_NODES (1LL<<SCALE)
+#define N_EDGES (N_NODES*EDGE_FACTOR)
+
+// upper limit
+#define N_LEVELS 10
+
+typedef uint32_t TYPE;
+
+// Larger than necessary for small graphs, but appropriate for large ones
+typedef TYPE edge_index_t;
+typedef TYPE node_index_t;
+typedef int8_t level_t;
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/geptest_clstr_hw_defines.h gem5-SALAM/benchmarks/test-cases/geptest/geptest_clstr_hw_defines.h
--- gem5/benchmarks/test-cases/geptest/geptest_clstr_hw_defines.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/geptest_clstr_hw_defines.h	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,15 @@
+//BEGIN GENERATED CODE
+//Cluster: TOP
+//NonCoherentDMA
+#define DMA_Flags 0x10020000
+#define DMA_RdAddr 0x10020001
+#define DMA_WrAddr 0x10020009
+#define DMA_CopyLen 0x10020011
+//Accelerator: TOP
+#define TOP 0x10020040
+#define TESTA 0x10020080
+#define TESTB 0x100204c0
+#define TESTC 0x10020900
+#define TESTD 0x10020d40
+#define TESTE 0x10021180
+//END GENERATED CODE
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/.gitignore gem5-SALAM/benchmarks/test-cases/geptest/.gitignore
--- gem5/benchmarks/test-cases/geptest/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/.gitignore	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,3 @@
+config.ini
+simulation/
+configs/*
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/hw/.gitignore gem5-SALAM/benchmarks/test-cases/geptest/hw/.gitignore
--- gem5/benchmarks/test-cases/geptest/hw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/hw/.gitignore	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1 @@
+*.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/hw/Makefile gem5-SALAM/benchmarks/test-cases/geptest/hw/Makefile
--- gem5/benchmarks/test-cases/geptest/hw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/hw/Makefile	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,8 @@
+TARGET=top.ll
+
+%.ll : %.c
+	clang -O1 -S -target armv7-pc-none-eabi -emit-llvm -o $@ $<
+build : $(TARGET)
+
+clean:
+	rm -f *.ll
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/hw/top.c gem5-SALAM/benchmarks/test-cases/geptest/hw/top.c
--- gem5/benchmarks/test-cases/geptest/hw/top.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/hw/top.c	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,68 @@
+#include "../geptest_clstr_hw_defines.h"
+
+typedef struct base_struct {
+	unsigned first;
+	unsigned second;
+} base_struct_t;
+
+typedef unsigned array1d_t[256];
+typedef unsigned array4d_t[4][4][4][4];
+typedef base_struct_t struct_array[8][4][4];
+
+void compute(unsigned * a, base_struct_t * b, array1d_t c, array4d_t d, struct_array e) {
+	int i,j,k,l,count;
+
+	for (i=0; i<256; i++) {
+		a[i] = i;
+	}
+
+	count = 0;
+	for (i=0; i<128; i++) {
+		b[i].first = count;
+		count++;
+		b[i].second = count;
+		count++;
+	}
+
+	for (i=0; i<256; i++) {
+		c[i] = i;
+	}
+
+	count = 0;
+	for (i=0; i<4; i++) {
+		for (j=0; j<4; j++) {
+			for (k=0; k<4; k++) {
+				for (l=0; l<4; l++) {
+					d[i][j][k][l] = count;
+					count++;
+				}
+			}
+		}
+	}
+
+	count = 0;
+	for (i=0; i<8; i++) {
+		for (j=0; j<4; j++) {
+			for (k=0; k<4; k++) {
+				e[i][j][k].first = count;
+				count++;
+				e[i][j][k].second = count;
+				count++;
+			}
+		}
+	}
+
+	return;
+}
+
+void top() {
+	void * a = (void *)TESTA;
+	void * b = (void *)TESTB;
+	void * c = (void *)TESTC;
+	void * d = (void *)TESTD;
+	void * e = (void *)TESTE;
+
+	compute(a,b,c,d,e);
+
+	return;
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/hw/top.ini gem5-SALAM/benchmarks/test-cases/geptest/hw/top.ini
--- gem5/benchmarks/test-cases/geptest/hw/top.ini	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/hw/top.ini	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,89 @@
+[CycleCounts]
+counter = 1
+gep = 0
+phi = 0
+select = 1
+ret = 1
+br = 0
+switch = 1
+indirectbr = 1
+invoke = 1
+resume = 1
+unreachable = 1
+icmp = 0
+fcmp = 1
+trunc = 0
+zext = 0
+sext = 0
+fptrunc = 1
+fpext = 1
+fptoui = 1
+fptosi = 1
+uitofp = 1
+ptrtoint = 1
+inttoptr = 1
+bitcast = 1
+addrspacecast = 1
+call = 1
+vaarg = 1
+landingpad = 1
+catchpad = 1
+alloca = 1
+load = 0
+store = 0
+fence = 1
+cmpxchg = 1
+atomicrmw = 1
+extractvalue = 1
+insertvalue = 1
+extractelement = 1
+insertelement = 1
+shufflevector = 1
+shl = 1
+lshr = 1
+ashr = 1
+andinst = 1
+orinst = 1
+xor = 1
+add = 1
+sub = 1
+mul = 1
+udiv = 1
+sdiv = 1
+urem = 1
+srem = 1
+fadd = 5
+fsub = 5
+fmul = 4
+fdiv = 16
+frem = 16
+
+[FunctionalUnits]
+fp_sp_add = -1
+fp_dp_add = -1
+fp_sp_mul = -1
+fp_sp_div = -1
+fp_dp_mul = -1
+fp_dp_div = -1
+fu_int_add = -1
+fu_int_mul = -1
+fu_int_bit = -1
+fu_int_shift = -1
+fu_counter = -1
+fu_gep = -1
+fu_compare = -1
+fu_conversion = -1
+
+[Scheduler]
+fu_pipelined = 1
+fu_clock_period = 10
+sched_threshold = 10000
+lockstep_mode = True
+
+[AccConfig]
+flags_size = 1
+config_size = 0
+int_num = 68
+clock_period = 10
+premap_data = 0
+data_bases = 0
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/Makefile gem5-SALAM/benchmarks/test-cases/geptest/Makefile
--- gem5/benchmarks/test-cases/geptest/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/Makefile	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,11 @@
+FOLDERS=hw sw
+
+.PHONY: build clean all
+
+build:
+	@( for f in $(FOLDERS); do $(MAKE) CFLAGS="$(CFLAGS)" -C $$f; done )
+
+clean:
+	@( for f in $(FOLDERS); do $(MAKE) -C $$f clean || exit ; done )
+
+all: clean build
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/bench.h gem5-SALAM/benchmarks/test-cases/geptest/sw/bench.h
--- gem5/benchmarks/test-cases/geptest/sw/bench.h	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/bench.h	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,7 @@
+#ifndef DEFINES
+#include "../defines.h"
+#endif
+
+volatile int stage;
+
+#include "../geptest_clstr_hw_defines.h"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/boot.ld gem5-SALAM/benchmarks/test-cases/geptest/sw/boot.ld
--- gem5/benchmarks/test-cases/geptest/sw/boot.ld	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/boot.ld	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ 			Frederik Lauer
+ */
+
+
+ENTRY(_Reset)
+SECTIONS
+{
+
+	.text : {
+		. = 0x00000000;
+		boot.o (INTERRUPT_VECTOR)
+		*(.text)
+	}
+	. = 0x80000000;
+
+	.data : { *(.data) }
+	.bss : { *(.bss COMMON) }
+	. = ALIGN(8);
+	stack_base = .;
+	. = . + 0x1000; /* 4kB of stack memory*/
+	. = . + 0x1000; /* 4kB of stack memory for IRQ*/
+	PROVIDE (end = .)   ;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/boot.s gem5-SALAM/benchmarks/test-cases/geptest/sw/boot.s
--- gem5/benchmarks/test-cases/geptest/sw/boot.s	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/boot.s	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,178 @@
+/*
+ * Copyright (c) 2015, University of Kaiserslautern
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its
+ *    contributors may be used to endorse or promote products derived from
+ *    this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Matthias Jung
+ *          Frederik Lauer
+ */
+
+.section INTERRUPT_VECTOR, "x"
+.global _Reset
+_Reset:
+    B Reset_Handler    /* Reset */
+    B .                /* Undefined */
+    B .                /* SWI */
+    B .                /* Prefetch Abort */
+    B .                /* Data Abort */
+    B .                /* reserved */
+    B irq_handler      /* IRQ */
+    B .                /* FIQ */
+
+
+.equ Len_Stack,        0x1000;  // 4kB of stack memory
+.equ Len_IRQ_Stack,    0x1000;  // 4kB of stack memory for IRQ Mode
+//.equ stack_base,      0x18000   // stack_base defined in Linker Script
+
+//GIC_Distributor
+//.equ GIC_Dist_Base,     0x1f001000
+.equ GIC_Dist_Base,		0x2c001000
+
+//Register offsets
+.equ set_enable1,       0x104
+.equ set_enable2,       0x108
+
+//Example definitions
+//.equ timer_irq_id,      36   // 36 <64 => set_enable1 Reg
+.equ timer_irq_id,    131   // 36 <64 => set_enable1 Reg
+.equ kmio_irq_id,     44
+.equ uart0_irq_id,    37
+.equ rtc_irq_id,      36
+.equ top_dev_id,      68
+
+//GIC_CPU_INTERFACE
+//.equ GIC_CPU_BASE,                  0x1f000100
+.equ GIC_CPU_BASE,                  0x2c002000
+.equ GIC_CPU_mask_reg_offset,       0x04
+.equ GIC_CPU_Int_Ack_reg_offset,    0x0C
+.equ GIC_CPU_End_of_int_offset,     0x10
+
+
+.global Reset_Handler
+Reset_Handler:
+    // Set up stack pointers for IRQ processor mode
+    mov R1, #0b11010010 // interrupts masked, MODE = IRQ   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to IRQ mode
+    ldr SP, =stack_base + Len_Stack + Len_IRQ_Stack // set IRQ stack
+
+    // Change back to SVC (supervisor) mode with interrupts disabled
+    mov R1, #0b11010011 // interrupts masked, MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1    // change to SVC mode
+    ldr SP, =stack_base + Len_Stack // set stack
+
+    // Enable individual interrupts, set target
+    bl config_gic_dist
+
+    // Enable individual interrupts, set target
+    bl config_gic_cpu_interface
+
+    // Enable interrupts in GIC Distributor
+    ldr r0, =GIC_Dist_Base
+    mov r1, #1
+    str r1, [r0]
+
+    // Enable IRQ interrupts in the processor:
+    mov R1, #0b01010011 // IRQ not masked (=0), MODE = SVC   IRQ | FIQ | 0 | Mode[4:0]
+    msr CPSR, R1
+
+    bl main
+    B .
+
+
+.global config_gic_dist
+config_gic_dist:
+    push {lr}
+    /* Enable the Interrupt in the Set-Enable Register of the GIC Distributor
+     *  Set-enable1 Reg Offset Address = 0x104
+     *      Bits 0 to 31 correspond to interrupt input lines 32 to 63 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  Set-enable2 Reg Offset Address = 0x108
+     *      Bits 0 to 31 correspond to interrupt input lines 64 to 95 respectively.
+     *      A bit set to 1 indicates an enabled interrupt.
+     *  This Example: Interrupt of timer0 => IRQ ID = 36
+     */
+
+    ldr r1, =GIC_Dist_Base + set_enable2    // r1 = Set-enable1 Reg Address
+    mov r2, #1
+    //IRQ ID - 32 => 5th bit = 1
+    lsl r2, r2, #4
+
+    ldr r3, [r1]    // read current register value
+    orr r3, r3, r2  // set the enable bit
+    str r3, [r1]    // store the new register value
+
+    /* Configure Interrupt Processor Taget
+     * Reg offset  0x820     for ID32 − ID35
+     *             0x824     for ID36 − ID39
+     *             ...
+     * default values are 0x01010101 => CPU0 is target for all.
+     */
+    pop {pc}
+
+
+.global config_gic_cpu_interface
+config_gic_cpu_interface:
+    push {lr}
+
+    // set Interrupt Priority mask (enable all priority levels)
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_mask_reg_offset
+    ldr r2, =0xFFFF
+    str r2, [r1]
+
+    // set the enable bit in the GIC_CPU_INTERFACE
+    mov r2, #1
+    ldr r1, =GIC_CPU_BASE
+    str r2, [r1]
+    pop {pc}
+
+
+// IRQ Handler that calls the ISR function in C
+.global irq_handler
+irq_handler:
+    push {r0-r7,lr}
+
+    // Read the interrupt acknowledge register of the GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_Int_Ack_reg_offset
+    ldr r2, [r1]
+
+irq_top:
+    cmp r2, #top_dev_id
+    bne irq_end  // if irq is not from top_dev
+
+    // Jump to C - must clear the timer interrupt!
+    BL isr
+    ldr r2, = top_dev_id
+
+irq_end:
+    // write the IRQ ID to the END_OF_INTERRUPT Register of GIC_CPU_INTERFACE
+    ldr r1, =GIC_CPU_BASE + GIC_CPU_End_of_int_offset
+    str r2, [r1]
+
+    pop {r0-r7,lr}
+    subs pc, lr, #4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/.gitignore gem5-SALAM/benchmarks/test-cases/geptest/sw/.gitignore
--- gem5/benchmarks/test-cases/geptest/sw/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/.gitignore	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,2 @@
+*.o
+*.elf
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/isr.c gem5-SALAM/benchmarks/test-cases/geptest/sw/isr.c
--- gem5/benchmarks/test-cases/geptest/sw/isr.c	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/isr.c	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,13 @@
+#include <stdio.h>
+#include "bench.h"
+
+extern volatile uint8_t * top;
+
+void isr(void)
+{
+	printf("Interrupt\n");
+	stage += 1;
+	*top = 0x00;
+	// printf("%d\n", *top);
+	printf("Interrupt finished\n");
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/main.cpp gem5-SALAM/benchmarks/test-cases/geptest/sw/main.cpp
--- gem5/benchmarks/test-cases/geptest/sw/main.cpp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/main.cpp	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,42 @@
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include "bench.h"
+#include "../../../common/m5ops.h"
+
+volatile uint8_t * top  = (uint8_t *)TOP;
+
+int main(void) {
+    unsigned * a    = (unsigned *)TESTA;
+    unsigned * b    = (unsigned *)TESTB;
+    unsigned * c    = (unsigned *)TESTC;
+    unsigned * d    = (unsigned *)TESTD;
+    unsigned * e    = (unsigned *)TESTE;
+
+    volatile int count = 0;
+
+    unsigned achk = 0;
+    unsigned bchk = 0;
+    unsigned cchk = 0;
+    unsigned dchk = 0;
+    unsigned echk = 0;
+
+    *top = 0x01;
+    while (stage < 1) count++;
+
+    for (count=0; count<256; count++) {
+        achk += a[count];
+        bchk += b[count];
+        cchk += c[count];
+        dchk += d[count];
+        echk += e[count];
+    }
+    printf("A Check: %d %s\n", achk, achk==32640 ? "PASSED" : "FAILED");
+    printf("B Check: %d %s\n", bchk, bchk==32640 ? "PASSED" : "FAILED");
+    printf("C Check: %d %s\n", cchk, cchk==32640 ? "PASSED" : "FAILED");
+    printf("D Check: %d %s\n", dchk, dchk==32640 ? "PASSED" : "FAILED");
+    printf("E Check: %d %s\n", echk, echk==32640 ? "PASSED" : "FAILED");
+
+    m5_dump_stats();
+    m5_exit();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/benchmarks/test-cases/geptest/sw/Makefile gem5-SALAM/benchmarks/test-cases/geptest/sw/Makefile
--- gem5/benchmarks/test-cases/geptest/sw/Makefile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/benchmarks/test-cases/geptest/sw/Makefile	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,44 @@
+# Copyright (c) 2015, University of Kaiserslautern
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met:
+#
+# 1. Redistributions of source code must retain the above copyright notice,
+#    this list of conditions and the following disclaimer.
+#
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# 3. Neither the name of the copyright holder nor the names of its
+#    contributors may be used to endorse or promote products derived from
+#    this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
+# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+# Authors: 	Matthias Jung
+#			Frederik Lauer
+include ../../../common/Makefile
+
+OBJS         = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+	$(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+	$(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+
+clean:
+	rm -f *.o *.elf
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/CODE-OF-CONDUCT.md gem5-SALAM/CODE-OF-CONDUCT.md
--- gem5/CODE-OF-CONDUCT.md	2024-02-22 18:16:36.240741315 -0600
+++ gem5-SALAM/CODE-OF-CONDUCT.md	1969-12-31 18:00:00.000000000 -0600
@@ -1,135 +0,0 @@
-
-# Contributor Covenant Code of Conduct
-
-## Our Pledge
-
-We as members, contributors, and leaders pledge to make participation in our
-community a harassment-free experience for everyone, regardless of age, body
-size, visible or invisible disability, ethnicity, sex characteristics, gender
-identity and expression, level of experience, education, socio-economic status,
-nationality, personal appearance, race, religion, or sexual identity
-and orientation.
-
-We pledge to act and interact in ways that contribute to an open, welcoming,
-diverse, inclusive, and healthy community.
-
-## Scope
-
-This Code of Conduct applies within all community spaces (e.g., mailing lists,
-forums, code review platforms, workshops, etc.), and also applies when an
-individual is officially representing the community in public spaces. Examples of
-representing our community include using an official e-mail address, posting via
-an official social media account, or acting as an appointed representative at an
-online or offline event.
-
-## Our Standards
-
-Examples of behavior that contributes to a positive environment for our
-community include:
-
-* Demonstrating empathy and kindness toward other people
-* Being respectful of differing opinions, viewpoints, and experiences
-* Giving and gracefully accepting constructive feedback
-* Accepting responsibility and apologizing to those affected by our mistakes,
-  and learning from the experience
-* Focusing on what is best not just for us as individuals, but for the
-  overall community
-
-Examples of unacceptable behavior include:
-
-* The use of sexualized language or imagery, and sexual attention or
-  advances of any kind
-* Trolling, insulting or derogatory comments, and personal or political attacks
-* Public or private harassment
-* Publishing others' private information, such as a physical or email
-  address, without their explicit permission
-* Other conduct which could reasonably be considered inappropriate in a
-  professional setting
-
-## Enforcement Responsibilities
-
-The project management committee (PMC) is responsible for clarifying and
-enforcing our standards of acceptable behavior and will take appropriate and
-fair corrective action in response to any behavior that they deem
-inappropriate, threatening, offensive, or harmful.
-
-The PMC has the right and responsibility to remove, edit, or reject
-comments, commits, code, wiki edits, issues, and other contributions that are
-not aligned to this Code of Conduct, and will communicate reasons for moderation
-decisions when appropriate.
-
-See the [governance document](http://www.gem5.org/governance/) for more information.
-<http://www.gem5.org/governance/>
-
-## Enforcement
-
-Instances of abusive, harassing, or otherwise unacceptable behavior may be
-reported to the project management committee (PMC). The point of contact for
-code of conduct violations is David Wood (david@cs.wisc.edu) or any other
-member of the PMC. See the MAINTAINERS file for a list of the current PMC
-members and email addresses.
-All complaints will be reviewed and investigated promptly and fairly.
-
-All community leaders are obligated to respect the privacy and security of the
-reporter of any incident.
-
-## Enforcement Guidelines
-
-Community leaders will follow these Community Impact Guidelines in determining
-the consequences for any action they deem in violation of this Code of Conduct:
-
-### 1. Correction
-
-**Community Impact**: Use of inappropriate language or other behavior deemed
-unprofessional or unwelcome in the community.
-
-**Consequence**: A private, written warning from community leaders, providing
-clarity around the nature of the violation and an explanation of why the
-behavior was inappropriate. A public apology may be requested.
-
-### 2. Warning
-
-**Community Impact**: A violation through a single incident or series
-of actions.
-
-**Consequence**: A warning with consequences for continued behavior. No
-interaction with the people involved, including unsolicited interaction with
-those enforcing the Code of Conduct, for a specified period of time. This
-includes avoiding interactions in community spaces as well as external channels
-like social media. Violating these terms may lead to a temporary or
-permanent ban.
-
-### 3. Temporary Ban
-
-**Community Impact**: A serious violation of community standards, including
-sustained inappropriate behavior.
-
-**Consequence**: A temporary ban from any sort of interaction or public
-communication with the community for a specified period of time. No public or
-private interaction with the people involved, including unsolicited interaction
-with those enforcing the Code of Conduct, is allowed during this period.
-Violating these terms may lead to a permanent ban.
-
-### 4. Permanent Ban
-
-**Community Impact**: Demonstrating a pattern of violation of community
-standards, including sustained inappropriate behavior,  harassment of an
-individual, or aggression toward or disparagement of classes of individuals.
-
-**Consequence**: A permanent ban from any sort of public interaction within
-the community.
-
-## Attribution
-
-This Code of Conduct is adapted from the [Contributor Covenant][homepage],
-version 2.0, available at
-<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.
-
-Community Impact Guidelines were inspired by [Mozilla's code of conduct
-enforcement ladder](https://github.com/mozilla/diversity).
-
-[homepage]: https://www.contributor-covenant.org
-
-For answers to common questions about this code of conduct, see the FAQ at
-<https://www.contributor-covenant.org/faq>. Translations are available at
-<https://www.contributor-covenant.org/translations>.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/boards/abstract_board.py gem5-SALAM/components_library/boards/abstract_board.py
--- gem5/components_library/boards/abstract_board.py	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/components_library/boards/abstract_board.py	2024-02-22 18:17:14.848943159 -0600
@@ -25,11 +25,13 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 from abc import ABCMeta, abstractmethod
-
 from .mem_mode import MemMode
 
 from m5.objects import System, Port, IOXBar, ClockDomain
 
+from ..isas import ISA
+from ..coherence_protocol import CoherenceProtocol
+
 from typing import List
 
 
@@ -145,24 +147,6 @@
         raise NotImplementedError
 
     @abstractmethod
-    def has_coherent_io(self) -> bool:
-        """Determine whether the board needs coherent I/O
-
-        :returns: True if the board needs coherent I/O, false otherwise
-        """
-        raise NotImplementedError
-
-    @abstractmethod
-    def get_mem_side_coherent_io_port(self):
-        """Get the memory-side coherent I/O port.
-        This abstract method must be implemented if has_coherent_io is true.
-
-        This returns a *port* (not a bus) that should be connected to a
-        CPU-side port for which coherent I/O (DMA) is issued.
-        """
-        raise NotImplementedError
-
-    @abstractmethod
     def get_clock_domain(self) -> ClockDomain:
         """Get the clock domain.
 
@@ -183,22 +167,6 @@
         """
         raise NotImplementedError
 
-    @abstractmethod
-    def setup_memory_ranges(self) -> None:
-        """
-        Set the memory ranges for this board.
-
-        This is called by `connect_things`. It can query the board's memory
-        to determine the size and the set the memory ranges on the memory if
-        it needs to move the memory devices.
-
-        The simplest implementation just sets the board's memory range to be
-        the size of memory and memory's memory range to be the same as the
-        board. Full system implementations will likely need something more
-        complicated.
-        """
-        raise NotImplementedError
-
     @abstractmethod
     def connect_things(self) -> None:
         """Connects all the components to the board.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/boards/riscv_board.py gem5-SALAM/components_library/boards/riscv_board.py
--- gem5/components_library/boards/riscv_board.py	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/components_library/boards/riscv_board.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,378 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os
-from typing import Optional
-
-from ..utils.override import overrides
-from .simple_board import SimpleBoard
-from .abstract_board import AbstractBoard
-from ..processors.abstract_processor import AbstractProcessor
-from ..memory.abstract_memory_system import AbstractMemorySystem
-from ..cachehierarchies.abstract_cache_hierarchy import AbstractCacheHierarchy
-from ..isas import ISA
-from ..runtime import get_runtime_isa
-
-import m5
-
-from m5.objects import (
-    Bridge,
-    PMAChecker,
-    RiscvLinux,
-    AddrRange,
-    IOXBar,
-    RiscvRTC,
-    HiFive,
-    CowDiskImage,
-    RawDiskImage,
-    MmioVirtIO,
-    VirtIOBlock,
-    Frequency,
-    Port,
-)
-
-from m5.util.fdthelper import (
-    Fdt,
-    FdtNode,
-    FdtProperty,
-    FdtPropertyStrings,
-    FdtPropertyWords,
-    FdtState,
-)
-
-
-class RiscvBoard(SimpleBoard):
-    """
-    A board capable of full system simulation for RISC-V
-
-    At a high-level, this is based on the HiFive Unmatched board from SiFive.
-
-    This board assumes that you will be booting Linux.
-
-    **Limitations**
-    * Only works with classic caches
-    """
-
-    def __init__(
-        self,
-        clk_freq: str,
-        processor: AbstractProcessor,
-        memory: AbstractMemorySystem,
-        cache_hierarchy: AbstractCacheHierarchy,
-    ) -> None:
-        super().__init__(clk_freq, processor, memory, cache_hierarchy)
-
-        if get_runtime_isa() != ISA.RISCV:
-            raise EnvironmentError(
-                "RiscvBoard will only work with the RISC-V ISA. Please"
-                " recompile gem5 with ISA=RISCV."
-            )
-        if cache_hierarchy.is_ruby():
-            raise EnvironmentError("RiscvBoard is not compatible with Ruby")
-
-        self.workload = RiscvLinux()
-
-        # Contains a CLINT, PLIC, UART, and some functions for the dtb, etc.
-        self.platform = HiFive()
-        # Note: This only works with single threaded cores.
-        self.platform.plic.n_contexts = self.processor.get_num_cores() * 2
-        self.platform.attachPlic()
-        self.platform.clint.num_threads = self.processor.get_num_cores()
-
-        # Add the RTC
-        # TODO: Why 100MHz? Does something else need to change when this does?
-        self.platform.rtc = RiscvRTC(frequency=Frequency("100MHz"))
-        self.platform.clint.int_pin = self.platform.rtc.int_pin
-
-        # Incoherent I/O bus
-        self.iobus = IOXBar()
-
-        # The virtio disk
-        self.disk = MmioVirtIO(
-            vio=VirtIOBlock(),
-            interrupt_id=0x8,
-            pio_size=4096,
-            pio_addr=0x10008000,
-        )
-
-        # Note: This overrides the platform's code because the platform isn't
-        # general enough.
-        self._on_chip_devices = [self.platform.clint, self.platform.plic]
-        self._off_chip_devices = [self.platform.uart, self.disk]
-
-    def _setup_io_devices(self) -> None:
-        """Connect the I/O devices to the I/O bus"""
-        for device in self._off_chip_devices:
-            device.pio = self.iobus.mem_side_ports
-        for device in self._on_chip_devices:
-            device.pio = self.get_cache_hierarchy().get_mem_side_port()
-
-        self.bridge = Bridge(delay="10ns")
-        self.bridge.mem_side_port = self.iobus.cpu_side_ports
-        self.bridge.cpu_side_port = (
-            self.get_cache_hierarchy().get_mem_side_port()
-        )
-        self.bridge.ranges = [
-            AddrRange(dev.pio_addr, size=dev.pio_size)
-            for dev in self._off_chip_devices
-        ]
-
-    def _setup_pma(self) -> None:
-        """Set the PMA devices on each core"""
-
-        uncacheable_range = [
-            AddrRange(dev.pio_addr, size=dev.pio_size)
-            for dev in self._on_chip_devices + self._off_chip_devices
-        ]
-
-        # TODO: Not sure if this should be done per-core like in the example
-        for cpu in self.get_processor().get_cores():
-            cpu.get_mmu().pma_checker = PMAChecker(
-                uncacheable=uncacheable_range
-            )
-
-    @overrides(AbstractBoard)
-    def has_io_bus(self) -> bool:
-        return True
-
-    @overrides(AbstractBoard)
-    def get_io_bus(self) -> IOXBar:
-        return self.iobus
-
-    def has_coherent_io(self) -> bool:
-        return True
-
-    def get_mem_side_coherent_io_port(self) -> Port:
-        return self.iobus.mem_side_ports
-
-    @overrides(AbstractBoard)
-    def setup_memory_ranges(self):
-        memory = self.get_memory()
-        mem_size = memory.get_size()
-        self.mem_ranges = [AddrRange(start=0x80000000, size=mem_size)]
-        memory.set_memory_range(self.mem_ranges)
-
-    def set_workload(
-        self, bootloader: str, disk_image: str, command: Optional[str] = None
-    ):
-        """Setup the full system files
-
-        See http://resources.gem5.org/resources/riscv-fs for the currently
-        tested kernels and OSes.
-
-        The command is an optional string to execute once the OS is fully
-        booted, assuming the disk image is setup to run `m5 readfile` after
-        booting.
-
-        After the workload is set up, this functino will generate the device
-        tree file and output it to the output directory.
-
-        **Limitations**
-        * Only supports a Linux kernel
-        * Disk must be configured correctly to use the command option
-        * This board doesn't support the command option
-
-        :param bootloader: The compiled bootloader with the kernel as a payload
-        :param disk_image: A disk image containing the OS data. The first
-            partition should be the root partition.
-        :param command: The command(s) to run with bash once the OS is booted
-        """
-
-        self.workload.object_file = bootloader
-
-        image = CowDiskImage(
-            child=RawDiskImage(read_only=True), read_only=False
-        )
-        image.child.image_file = disk_image
-        self.disk.vio.image = image
-
-        self.workload.command_line = "console=ttyS0 root=/dev/vda ro"
-
-        # Note: This must be called after set_workload because it looks for an
-        # attribute named "disk" and connects
-        self._setup_io_devices()
-
-        self._setup_pma()
-
-        # Default DTB address if bbl is built with --with-dts option
-        self.workload.dtb_addr = 0x87E00000
-
-        # We need to wait to generate the device tree until after the disk is
-        # set up. Now that the disk and workload are set, we can generate the
-        # device tree file.
-        self.generate_device_tree(m5.options.outdir)
-        self.workload.dtb_filename = os.path.join(
-            m5.options.outdir, "device.dtb"
-        )
-
-    def generate_device_tree(self, outdir: str) -> None:
-        """Creates the dtb and dts files.
-
-        Creates two files in the outdir: 'device.dtb' and 'device.dts'
-
-        :param outdir: Directory to output the files
-        """
-
-        state = FdtState(addr_cells=2, size_cells=2, cpu_cells=1)
-        root = FdtNode("/")
-        root.append(state.addrCellsProperty())
-        root.append(state.sizeCellsProperty())
-        root.appendCompatible(["riscv-virtio"])
-
-        for mem_range in self.mem_ranges:
-            node = FdtNode("memory@%x" % int(mem_range.start))
-            node.append(FdtPropertyStrings("device_type", ["memory"]))
-            node.append(
-                FdtPropertyWords(
-                    "reg",
-                    state.addrCells(mem_range.start)
-                    + state.sizeCells(mem_range.size()),
-                )
-            )
-            root.append(node)
-
-        # See Documentation/devicetree/bindings/riscv/cpus.txt for details.
-        cpus_node = FdtNode("cpus")
-        cpus_state = FdtState(addr_cells=1, size_cells=0)
-        cpus_node.append(cpus_state.addrCellsProperty())
-        cpus_node.append(cpus_state.sizeCellsProperty())
-        # Used by the CLINT driver to set the timer frequency. Value taken from
-        # RISC-V kernel docs (Note: freedom-u540 is actually 1MHz)
-        cpus_node.append(FdtPropertyWords("timebase-frequency", [10000000]))
-
-        for i, core in enumerate(self.get_processor().get_cores()):
-            node = FdtNode(f"cpu@{i}")
-            node.append(FdtPropertyStrings("device_type", "cpu"))
-            node.append(FdtPropertyWords("reg", state.CPUAddrCells(i)))
-            node.append(FdtPropertyStrings("mmu-type", "riscv,sv48"))
-            node.append(FdtPropertyStrings("status", "okay"))
-            node.append(FdtPropertyStrings("riscv,isa", "rv64imafdc"))
-            # TODO: Should probably get this from the core.
-            freq = self.clk_domain.clock[0].frequency
-            node.append(FdtPropertyWords("clock-frequency", freq))
-            node.appendCompatible(["riscv"])
-            int_phandle = state.phandle(f"cpu@{i}.int_state")
-            node.appendPhandle(f"cpu@{i}")
-
-            int_node = FdtNode("interrupt-controller")
-            int_state = FdtState(interrupt_cells=1)
-            int_phandle = int_state.phandle(f"cpu@{i}.int_state")
-            int_node.append(int_state.interruptCellsProperty())
-            int_node.append(FdtProperty("interrupt-controller"))
-            int_node.appendCompatible("riscv,cpu-intc")
-            int_node.append(FdtPropertyWords("phandle", [int_phandle]))
-
-            node.append(int_node)
-            cpus_node.append(node)
-
-        root.append(cpus_node)
-
-        soc_node = FdtNode("soc")
-        soc_state = FdtState(addr_cells=2, size_cells=2)
-        soc_node.append(soc_state.addrCellsProperty())
-        soc_node.append(soc_state.sizeCellsProperty())
-        soc_node.append(FdtProperty("ranges"))
-        soc_node.appendCompatible(["simple-bus"])
-
-        # CLINT node
-        clint = self.platform.clint
-        clint_node = clint.generateBasicPioDeviceNode(
-            soc_state, "clint", clint.pio_addr, clint.pio_size
-        )
-        int_extended = list()
-        for i, core in enumerate(self.get_processor().get_cores()):
-            phandle = soc_state.phandle(f"cpu@{i}.int_state")
-            int_extended.append(phandle)
-            int_extended.append(0x3)
-            int_extended.append(phandle)
-            int_extended.append(0x7)
-        clint_node.append(
-            FdtPropertyWords("interrupts-extended", int_extended)
-        )
-        clint_node.appendCompatible(["riscv,clint0"])
-        soc_node.append(clint_node)
-
-        # PLIC node
-        plic = self.platform.plic
-        plic_node = plic.generateBasicPioDeviceNode(
-            soc_state, "plic", plic.pio_addr, plic.pio_size
-        )
-
-        int_state = FdtState(addr_cells=0, interrupt_cells=1)
-        plic_node.append(int_state.addrCellsProperty())
-        plic_node.append(int_state.interruptCellsProperty())
-
-        phandle = int_state.phandle(plic)
-        plic_node.append(FdtPropertyWords("phandle", [phandle]))
-        plic_node.append(FdtPropertyWords("riscv,ndev", [plic.n_src - 1]))
-
-        int_extended = list()
-        for i, core in enumerate(self.get_processor().get_cores()):
-            phandle = state.phandle(f"cpu@{i}.int_state")
-            int_extended.append(phandle)
-            int_extended.append(0xB)
-            int_extended.append(phandle)
-            int_extended.append(0x9)
-
-        plic_node.append(FdtPropertyWords("interrupts-extended", int_extended))
-        plic_node.append(FdtProperty("interrupt-controller"))
-        plic_node.appendCompatible(["riscv,plic0"])
-
-        soc_node.append(plic_node)
-
-        # UART node
-        uart = self.platform.uart
-        uart_node = uart.generateBasicPioDeviceNode(
-            soc_state, "uart", uart.pio_addr, uart.pio_size
-        )
-        uart_node.append(
-            FdtPropertyWords("interrupts", [self.platform.uart_int_id])
-        )
-        uart_node.append(FdtPropertyWords("clock-frequency", [0x384000]))
-        uart_node.append(
-            FdtPropertyWords("interrupt-parent", soc_state.phandle(plic))
-        )
-        uart_node.appendCompatible(["ns8250"])
-        soc_node.append(uart_node)
-
-        # VirtIO MMIO disk node
-        disk = self.disk
-        disk_node = disk.generateBasicPioDeviceNode(
-            soc_state, "virtio_mmio", disk.pio_addr, disk.pio_size
-        )
-        disk_node.append(FdtPropertyWords("interrupts", [disk.interrupt_id]))
-        disk_node.append(
-            FdtPropertyWords("interrupt-parent", soc_state.phandle(plic))
-        )
-        disk_node.appendCompatible(["virtio,mmio"])
-        soc_node.append(disk_node)
-
-        root.append(soc_node)
-
-        fdt = Fdt()
-        fdt.add_rootnode(root)
-        fdt.writeDtsFile(os.path.join(outdir, "device.dts"))
-        fdt.writeDtbFile(os.path.join(outdir, "device.dtb"))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/boards/simple_board.py gem5-SALAM/components_library/boards/simple_board.py
--- gem5/components_library/boards/simple_board.py	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/components_library/boards/simple_board.py	2024-02-22 18:17:14.848943159 -0600
@@ -24,9 +24,7 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from components_library.resources.resource import AbstractResource
 from m5.objects import (
-    AddrRange,
     SrcClockDomain,
     VoltageDomain,
     Process,
@@ -76,6 +74,8 @@
         self.clk_domain.clock = clk_freq
         self.clk_domain.voltage_domain = VoltageDomain()
 
+        self.mem_ranges = memory.get_memory_ranges()
+
         self.exit_on_work_items = exit_on_work_items
 
     @overrides(AbstractBoard)
@@ -92,9 +92,6 @@
 
     @overrides(AbstractBoard)
     def connect_things(self) -> None:
-        # Before incorporating the memory, set up the memory ranges
-        self.setup_memory_ranges()
-
         # Incorporate the cache hierarchy for the motherboard.
         self.get_cache_hierarchy().incorporate_cache(self)
 
@@ -126,27 +123,7 @@
             "Use `has_dma_ports()` to check this."
         )
 
-    @overrides(AbstractBoard)
-    def has_coherent_io(self) -> bool:
-        return False
-
-    @overrides(AbstractBoard)
-    def get_mem_side_coherent_io_port(self) -> Port:
-        raise NotImplementedError(
-            "SimpleBoard does not have any I/O ports. Use has_coherent_io to "
-            "check this."
-        )
-
-    @overrides(AbstractBoard)
-    def setup_memory_ranges(self) -> None:
-        memory = self.get_memory()
-
-        # The simple board just has one memory range that is the size of the
-        # memory.
-        self.mem_ranges = [AddrRange(memory.get_size())]
-        memory.set_memory_range(self.mem_ranges)
-
-    def set_workload(self, binary: AbstractResource) -> None:
+    def set_workload(self, binary: str) -> None:
         """Set up the system to run a specific binary.
 
         **Limitations**
@@ -154,11 +131,11 @@
         * Dynamically linked executables are partially supported when the host
           ISA and the simulated ISA are the same.
 
-        :param binary: The resource encapsulating the binary to be run.
+        :param binary: The path on the *host* to the binary to run in gem5.
         """
 
-        self.workload = SEWorkload.init_compatible(binary.get_local_path())
+        self.workload = SEWorkload.init_compatible(binary)
 
         process = Process()
-        process.cmd = [binary.get_local_path()]
+        process.cmd = [binary]
         self.get_processor().get_cores()[0].set_workload(process)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/boards/test_board.py gem5-SALAM/components_library/boards/test_board.py
--- gem5/components_library/boards/test_board.py	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/components_library/boards/test_board.py	2024-02-22 18:17:14.848943159 -0600
@@ -24,14 +24,7 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from m5.objects import (
-    SrcClockDomain,
-    ClockDomain,
-    VoltageDomain,
-    Port,
-    IOXBar,
-    AddrRange,
-)
+from m5.objects import SrcClockDomain, ClockDomain, VoltageDomain, Port, IOXBar
 
 from .mem_mode import MemMode, mem_mode_to_string
 from ..utils.override import overrides
@@ -68,12 +61,12 @@
             clock=clk_freq, voltage_domain=VoltageDomain()
         )
 
+        self.mem_ranges = memory.get_memory_ranges()
+
     def connect_system_port(self, port: Port) -> None:
         self.system_port = port
 
     def connect_things(self) -> None:
-        self.setup_memory_ranges()
-
         self.get_cache_hierarchy().incorporate_cache(self)
 
         self.get_processor().incorporate_processor(self)
@@ -106,25 +99,5 @@
         )
 
     @overrides(AbstractBoard)
-    def has_coherent_io(self) -> bool:
-        return False
-
-    @overrides(AbstractBoard)
-    def get_mem_side_coherent_io_port(self):
-        raise NotImplementedError(
-            "SimpleBoard does not have any I/O ports. Use has_coherent_io to "
-            "check this."
-        )
-
-    @overrides(AbstractBoard)
     def set_mem_mode(self, mem_mode: MemMode) -> None:
         self.mem_mode = mem_mode_to_string(mem_mode=mem_mode)
-
-    @overrides(AbstractBoard)
-    def setup_memory_ranges(self) -> None:
-        memory = self.get_memory()
-
-        # The simple board just has one memory range that is the size of the
-        # memory.
-        self.mem_ranges = [AddrRange(memory.get_size())]
-        memory.set_memory_range(self.mem_ranges)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/boards/x86_board.py gem5-SALAM/components_library/boards/x86_board.py
--- gem5/components_library/boards/x86_board.py	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/components_library/boards/x86_board.py	2024-02-22 18:17:14.848943159 -0600
@@ -25,7 +25,6 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 
-from components_library.resources.resource import AbstractResource
 from components_library.utils.override import overrides
 from components_library.boards.abstract_board import AbstractBoard
 from components_library.isas import ISA
@@ -50,20 +49,19 @@
     CowDiskImage,
     RawDiskImage,
     BaseXBar,
-    Port,
 )
 
-from m5.util.convert import toMemorySize
+from m5.params import Port
 
 
 from .simple_board import SimpleBoard
 from ..processors.abstract_processor import AbstractProcessor
 from ..memory.abstract_memory_system import AbstractMemorySystem
 from ..cachehierarchies.abstract_cache_hierarchy import AbstractCacheHierarchy
-from ..utils.requires import requires
+from ..runtime import get_runtime_isa
 
 import os
-from typing import List, Optional, Sequence
+from typing import Optional, Sequence
 
 
 class X86Board(SimpleBoard):
@@ -91,28 +89,31 @@
             exit_on_work_items=exit_on_work_items,
         )
 
-        requires(isa_required=ISA.X86)
+        if get_runtime_isa() != ISA.X86:
+            raise EnvironmentError(
+                "X86Motherboard will only work with the X86 ISA."
+            )
+
+        # Add the address range for the IO
+        # TODO: This should definitely NOT be hardcoded to 3GB
+        self.mem_ranges = [
+            AddrRange(Addr("3GB")),  # All data
+            AddrRange(0xC0000000, size=0x100000),  # For I/0
+        ]
 
         self.pc = Pc()
 
         self.workload = X86FsLinux()
 
-        # North Bridge
-        self.iobus = IOXBar()
-
-    def _setup_io_devices(self):
-        """ Sets up the x86 IO devices.
-
-        Note: This is mostly copy-paste from prior X86 FS setups. Some of it
-        may not be documented and there may be bugs.
-        """
-
         # Constants similar to x86_traits.hh
         IO_address_space_base = 0x8000000000000000
         pci_config_address_space_base = 0xC000000000000000
         interrupts_address_space_base = 0xA000000000000000
         APIC_range_size = 1 << 12
 
+        # North Bridge
+        self.iobus = IOXBar()
+
         # Setup memory system specific settings.
         if self.get_cache_hierarchy().is_ruby():
             self.pc.attachIO(self.get_io_bus(), [self.pc.south_bridge.ide.dma])
@@ -152,6 +153,22 @@
             ]
             self.pc.attachIO(self.get_io_bus())
 
+            self.iocache = Cache(
+                assoc=8,
+                tag_latency=50,
+                data_latency=50,
+                response_latency=50,
+                mshrs=20,
+                size="1kB",
+                tgts_per_mshr=12,
+                addr_ranges=self.mem_ranges,
+            )
+
+            self.iocache.cpu_side = self.get_io_bus().mem_side_ports
+            self.iocache.mem_side = (
+                self.get_cache_hierarchy().get_cpu_side_port()
+            )
+
         # Add in a Bios information structure.
         self.workload.smbios_table.structures = [X86SMBiosBiosInformation()]
 
@@ -250,32 +267,10 @@
         self.workload.e820_table.entries = entries
 
     def connect_things(self) -> None:
-        # This board is a bit particular about the order that things are
-        # connected together.
-
-        # Before incorporating the memory or creating the I/O devices figure
-        # out the memory ranges.
-        self.setup_memory_ranges()
-
-        # Set up all of the I/O before we incorporate anything else.
-        self._setup_io_devices()
-
-        # Incorporate the cache hierarchy for the motherboard.
-        self.get_cache_hierarchy().incorporate_cache(self)
-
-        # Incorporate the processor into the motherboard.
-        self.get_processor().incorporate_processor(self)
-
-        # Incorporate the memory into the motherboard.
-        self.get_memory().incorporate_memory(self)
-
+        super().connect_things()
 
     def set_workload(
-        self,
-        kernel: AbstractResource,
-        disk_image: AbstractResource,
-        command: Optional[str] = None,
-        kernel_args: Optional[List[str]] = [],
+        self, kernel: str, disk_image: str, command: Optional[str] = None
     ):
         """Setup the full system files
 
@@ -289,17 +284,14 @@
         * Only supports a Linux kernel
         * Disk must be configured correctly to use the command option
 
-        :param kernel: The compiled kernel binary resource
-        :param disk_image: A disk image resource containing the OS data. The
-            first partition should be the root partition.
+        :param kernel: The compiled kernel binary
+        :param disk_image: A disk image containing the OS data. The first
+            partition should be the root partition.
         :param command: The command(s) to run with bash once the OS is booted
-        :param kernel_args: Additional arguments to be passed to the kernel.
-        `earlyprintk=ttyS0 console=ttyS0 lpj=7999923 root=/dev/hda1` are
-        already passed. This parameter is used to pass additional arguments.
         """
 
         # Set the Linux kernel to use.
-        self.workload.object_file = kernel.get_local_path()
+        self.workload.object_file = kernel
 
         # Options specified on the kernel command line.
         self.workload.command_line = " ".join(
@@ -308,7 +300,7 @@
                 "console=ttyS0",
                 "lpj=7999923",
                 "root=/dev/hda1",
-            ] + kernel_args
+            ]
         )
 
         # Create the Disk image SimObject.
@@ -317,7 +309,7 @@
         ide_disk.image = CowDiskImage(
             child=RawDiskImage(read_only=True), read_only=False
         )
-        ide_disk.image.child.image_file = disk_image.get_local_path()
+        ide_disk.image.child.image_file = disk_image
 
         # Attach the SimObject to the system.
         self.pc.south_bridge.ide.disks = [ide_disk]
@@ -348,29 +340,3 @@
     @overrides(AbstractBoard)
     def get_dma_ports(self) -> Sequence[Port]:
         return [self.pc.south_bridge.ide.dma, self.iobus.mem_side_ports]
-
-    @overrides(AbstractBoard)
-    def has_coherent_io(self) -> bool:
-        return True
-
-    @overrides(AbstractBoard)
-    def get_mem_side_coherent_io_port(self) -> Port:
-        return self.iobus.mem_side_ports
-
-    @overrides(AbstractBoard)
-    def setup_memory_ranges(self):
-        memory = self.get_memory()
-
-        if memory.get_size() > toMemorySize("3GB"):
-            raise Exception(
-                "X86Board currently only supports memory sizes up "
-                "to 3GB because of the I/O hole."
-            )
-        data_range = AddrRange(memory.get_size())
-        memory.set_memory_range([data_range])
-
-        # Add the address range for the IO
-        self.mem_ranges = [
-            data_range,  # All data
-            AddrRange(0xC0000000, size=0x100000),  # For I/0
-        ]
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/caches/l1dcache.py gem5-SALAM/components_library/cachehierarchies/classic/caches/l1dcache.py
--- gem5/components_library/cachehierarchies/classic/caches/l1dcache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/caches/l1dcache.py	2024-02-22 18:17:14.848943159 -0600
@@ -28,7 +28,7 @@
 
 from m5.objects import Cache, BasePrefetcher, StridePrefetcher
 
-from typing import Optional, Type
+from typing import Optional
 
 
 class L1DCache(Cache):
@@ -46,7 +46,7 @@
         mshrs: Optional[int] = 16,
         tgts_per_mshr: Optional[int] = 20,
         writeback_clean: Optional[bool] = True,
-        PrefetcherCls: Type[BasePrefetcher] = StridePrefetcher,
+        prefetcher: BasePrefetcher = StridePrefetcher(),
     ):
         super(L1DCache, self).__init__()
         self.size = size
@@ -57,4 +57,4 @@
         self.mshrs = mshrs
         self.tgts_per_mshr = tgts_per_mshr
         self.writeback_clean = writeback_clean
-        self.prefetcher = PrefetcherCls()
+        self.prefetcher = prefetcher
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/caches/l1icache.py gem5-SALAM/components_library/cachehierarchies/classic/caches/l1icache.py
--- gem5/components_library/cachehierarchies/classic/caches/l1icache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/caches/l1icache.py	2024-02-22 18:17:14.848943159 -0600
@@ -24,7 +24,7 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from typing import Optional, Type
+from typing import Optional
 
 from m5.objects import Cache, BasePrefetcher, StridePrefetcher
 
@@ -46,7 +46,7 @@
         mshrs: Optional[int] = 16,
         tgts_per_mshr: Optional[int] = 20,
         writeback_clean: Optional[bool] = True,
-        PrefetcherCls: Type[BasePrefetcher] = StridePrefetcher,
+        prefetcher: BasePrefetcher = StridePrefetcher(),
     ):
         super(L1ICache, self).__init__()
         self.size = size
@@ -57,4 +57,4 @@
         self.mshrs = mshrs
         self.tgts_per_mshr = tgts_per_mshr
         self.writeback_clean = writeback_clean
-        self.prefetcher = PrefetcherCls()
+        self.prefetcher = prefetcher
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/caches/l2cache.py gem5-SALAM/components_library/cachehierarchies/classic/caches/l2cache.py
--- gem5/components_library/cachehierarchies/classic/caches/l2cache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/caches/l2cache.py	2024-02-22 18:17:14.848943159 -0600
@@ -28,7 +28,7 @@
 
 from m5.objects import Cache, BasePrefetcher, StridePrefetcher
 
-from typing import Optional, Type
+from typing import Optional
 
 
 class L2Cache(Cache):
@@ -46,7 +46,7 @@
         mshrs: Optional[int] = 20,
         tgts_per_mshr: Optional[int] = 12,
         writeback_clean: Optional[bool] = True,
-        PrefetcherCls: Type[BasePrefetcher] = StridePrefetcher,
+        prefetcher: BasePrefetcher = StridePrefetcher(),
     ):
         super(L2Cache, self).__init__()
         self.size = size
@@ -57,4 +57,4 @@
         self.mshrs = mshrs
         self.tgts_per_mshr = tgts_per_mshr
         self.writeback_clean = writeback_clean
-        self.prefetcher = PrefetcherCls()
+        self.prefetcher = prefetcher
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/caches/mmu_cache.py gem5-SALAM/components_library/cachehierarchies/classic/caches/mmu_cache.py
--- gem5/components_library/cachehierarchies/classic/caches/mmu_cache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/caches/mmu_cache.py	2024-02-22 18:17:14.848943159 -0600
@@ -46,6 +46,7 @@
         mshrs: Optional[int] = 20,
         tgts_per_mshr: Optional[int] = 12,
         writeback_clean: Optional[bool] = True,
+        prefetcher: BasePrefetcher = StridePrefetcher(),
     ):
         super(MMUCache, self).__init__()
         self.size = size
@@ -56,3 +57,4 @@
         self.mshrs = mshrs
         self.tgts_per_mshr = tgts_per_mshr
         self.writeback_clean = writeback_clean
+        self.prefetcher = prefetcher
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/no_cache.py gem5-SALAM/components_library/cachehierarchies/classic/no_cache.py
--- gem5/components_library/cachehierarchies/classic/no_cache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/no_cache.py	2024-02-22 18:17:14.848943159 -0600
@@ -33,7 +33,7 @@
 from ...isas import ISA
 from ...runtime import get_runtime_isa
 
-from m5.objects import Bridge, BaseXBar, SystemXBar, BadAddr, Port
+from m5.objects import BaseXBar, SystemXBar, BadAddr, Port
 
 from typing import Optional
 
@@ -101,9 +101,6 @@
     @overrides(AbstractCacheHierarchy)
     def incorporate_cache(self, board: AbstractBoard) -> None:
 
-        if board.has_coherent_io():
-            self._setup_coherent_io_bridge(board)
-
         for core in board.get_processor().get_cores():
 
             core.connect_icache(self.membus.cpu_side_ports)
@@ -116,17 +113,9 @@
                 int_req_port = self.membus.mem_side_ports
                 int_resp_port = self.membus.cpu_side_ports
                 core.connect_interrupt(int_req_port, int_resp_port)
-            else:
-                core.connect_interrupt()
 
         # Set up the system port for functional access from the simulator.
         board.connect_system_port(self.membus.cpu_side_ports)
 
         for cntr in board.get_memory().get_memory_controllers():
             cntr.port = self.membus.mem_side_ports
-
-    def _setup_coherent_io_bridge(self, board: AbstractBoard) -> None:
-        """Create a bridge from I/O back to membus"""
-        self.iobridge = Bridge(delay="10ns", ranges=board.mem_ranges)
-        self.iobridge.mem_side_port = self.membus.cpu_side_ports
-        self.iobridge.cpu_side_port = board.get_mem_side_coherent_io_port()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/private_l1_cache_hierarchy.py gem5-SALAM/components_library/cachehierarchies/classic/private_l1_cache_hierarchy.py
--- gem5/components_library/cachehierarchies/classic/private_l1_cache_hierarchy.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/private_l1_cache_hierarchy.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,155 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from ..abstract_cache_hierarchy import AbstractCacheHierarchy
-from .abstract_classic_cache_hierarchy import AbstractClassicCacheHierarchy
-from .caches.l1dcache import L1DCache
-from .caches.l1icache import L1ICache
-from .caches.mmu_cache import MMUCache
-from ...boards.abstract_board import AbstractBoard
-from ...isas import ISA
-from ...runtime import get_runtime_isa
-
-from m5.objects import Cache, BaseXBar, SystemXBar, BadAddr, Port
-
-from ...utils.override import *
-
-from typing import Optional
-
-
-class PrivateL1CacheHierarchy(AbstractClassicCacheHierarchy):
-    """
-    A cache setup where each core has a private L1 data and instruction Cache.
-    """
-
-    @staticmethod
-    def _get_default_membus() -> SystemXBar:
-        """
-        A method used to obtain the default memory bus of 64 bit in width for
-        the PrivateL1CacheHierarchy.
-
-        :returns: The default memory bus for the PrivateL1PrivateL2
-        CacheHierarchy.
-        """
-        membus = SystemXBar(width=64)
-        membus.badaddr_responder = BadAddr()
-        membus.default = membus.badaddr_responder.pio
-        return membus
-
-    def __init__(
-        self,
-        l1d_size: str,
-        l1i_size: str,
-        membus: Optional[BaseXBar] = _get_default_membus.__func__(),
-    ) -> None:
-        """
-        :param l1d_size: The size of the L1 Data Cache (e.g., "32kB").
-
-        :param  l1i_size: The size of the L1 Instruction Cache (e.g., "32kB").
-
-        :param membus: The memory bus. This parameter is optional parameter and
-        will default to a 64 bit width SystemXBar is not specified.
-        """
-
-        AbstractClassicCacheHierarchy.__init__(self=self)
-        self.membus = membus
-        self._l1d_size = l1d_size
-        self._l1i_size = l1i_size
-
-    @overrides(AbstractClassicCacheHierarchy)
-    def get_mem_side_port(self) -> Port:
-        return self.membus.mem_side_ports
-
-    @overrides(AbstractClassicCacheHierarchy)
-    def get_cpu_side_port(self) -> Port:
-        return self.membus.cpu_side_ports
-
-    @overrides(AbstractCacheHierarchy)
-    def incorporate_cache(self, board: AbstractBoard) -> None:
-
-        # Set up the system port for functional access from the simulator.
-        board.connect_system_port(self.membus.cpu_side_ports)
-
-        for cntr in board.get_memory().get_memory_controllers():
-            cntr.port = self.membus.mem_side_ports
-
-        self.l1icaches = [
-            L1ICache(size=self._l1i_size)
-            for i in range(board.get_processor().get_num_cores())
-        ]
-
-        self.l1dcaches = [
-            L1DCache(size=self._l1i_size)
-            for i in range(board.get_processor().get_num_cores())
-        ]
-        # ITLB Page walk caches
-        self.iptw_caches = [
-            MMUCache(size="8KiB") for _ in range(board.get_processor().get_num_cores())
-        ]
-        # DTLB Page walk caches
-        self.dptw_caches = [
-            MMUCache(size="8KiB") for _ in range(board.get_processor().get_num_cores())
-        ]
-
-        if board.has_coherent_io():
-            self._setup_io_cache(board)
-
-        for i, cpu in enumerate(board.get_processor().get_cores()):
-
-            cpu.connect_icache(self.l1icaches[i].cpu_side)
-            cpu.connect_dcache(self.l1dcaches[i].cpu_side)
-
-            self.l1icaches[i].mem_side = self.membus.cpu_side_ports
-            self.l1dcaches[i].mem_side = self.membus.cpu_side_ports
-
-            self.iptw_caches[i].mem_side = self.membus.cpu_side_ports
-            self.dptw_caches[i].mem_side = self.membus.cpu_side_ports
-
-            cpu.connect_walker_ports(
-                self.iptw_caches[i].cpu_side, self.dptw_caches[i].cpu_side
-            )
-
-            if get_runtime_isa() == ISA.X86:
-                int_req_port = self.membus.mem_side_ports
-                int_resp_port = self.membus.cpu_side_ports
-                cpu.connect_interrupt(int_req_port, int_resp_port)
-            else:
-                cpu.connect_interrupt()
-
-    def _setup_io_cache(self, board: AbstractBoard) -> None:
-        """Create a cache for coherent I/O connections"""
-        self.iocache = Cache(
-            assoc=8,
-            tag_latency=50,
-            data_latency=50,
-            response_latency=50,
-            mshrs=20,
-            size="1kB",
-            tgts_per_mshr=12,
-            addr_ranges=board.mem_ranges,
-        )
-        self.iocache.mem_side = self.membus.cpu_side_ports
-        self.iocache.cpu_side = board.get_mem_side_coherent_io_port()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/classic/private_l1_private_l2_cache_hierarchy.py gem5-SALAM/components_library/cachehierarchies/classic/private_l1_private_l2_cache_hierarchy.py
--- gem5/components_library/cachehierarchies/classic/private_l1_private_l2_cache_hierarchy.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/classic/private_l1_private_l2_cache_hierarchy.py	2024-02-22 18:17:14.848943159 -0600
@@ -30,12 +30,11 @@
 from .caches.l1dcache import L1DCache
 from .caches.l1icache import L1ICache
 from .caches.l2cache import L2Cache
-from .caches.mmu_cache import MMUCache
 from ...boards.abstract_board import AbstractBoard
 from ...isas import ISA
 from ...runtime import get_runtime_isa
 
-from m5.objects import Cache, L2XBar, BaseXBar, SystemXBar, BadAddr, Port
+from m5.objects import L2XBar, BaseXBar, SystemXBar, BadAddr, Port
 
 from ...utils.override import *
 
@@ -137,19 +136,6 @@
             L2Cache(size=self._l2_size)
             for i in range(board.get_processor().get_num_cores())
         ]
-        # ITLB Page walk caches
-        self.iptw_caches = [
-            MMUCache(size='8KiB')
-            for _ in range(board.get_processor().get_num_cores())
-        ]
-        # DTLB Page walk caches
-        self.dptw_caches = [
-            MMUCache(size='8KiB')
-            for _ in range(board.get_processor().get_num_cores())
-        ]
-
-        if board.has_coherent_io():
-            self._setup_io_cache(board)
 
         for i, cpu in enumerate(board.get_processor().get_cores()):
 
@@ -158,35 +144,16 @@
 
             self.l1icaches[i].mem_side = self.l2buses[i].cpu_side_ports
             self.l1dcaches[i].mem_side = self.l2buses[i].cpu_side_ports
-            self.iptw_caches[i].mem_side = self.l2buses[i].cpu_side_ports
-            self.dptw_caches[i].mem_side = self.l2buses[i].cpu_side_ports
 
             self.l2buses[i].mem_side_ports = self.l2caches[i].cpu_side
 
             self.membus.cpu_side_ports = self.l2caches[i].mem_side
 
             cpu.connect_walker_ports(
-                self.iptw_caches[i].cpu_side, self.dptw_caches[i].cpu_side
+                self.membus.cpu_side_ports, self.membus.cpu_side_ports
             )
 
             if get_runtime_isa() == ISA.X86:
                 int_req_port = self.membus.mem_side_ports
                 int_resp_port = self.membus.cpu_side_ports
                 cpu.connect_interrupt(int_req_port, int_resp_port)
-            else:
-                cpu.connect_interrupt()
-
-    def _setup_io_cache(self, board: AbstractBoard) -> None:
-        """Create a cache for coherent I/O connections"""
-        self.iocache = Cache(
-            assoc=8,
-            tag_latency=50,
-            data_latency=50,
-            response_latency=50,
-            mshrs=20,
-            size="1kB",
-            tgts_per_mshr=12,
-            addr_ranges=board.mem_ranges,
-        )
-        self.iocache.mem_side = self.membus.cpu_side_ports
-        self.iocache.cpu_side = board.get_mem_side_coherent_io_port()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/ruby/caches/mi_example/directory.py gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/directory.py
--- gem5/components_library/cachehierarchies/ruby/caches/mi_example/directory.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/directory.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,64 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All Rights Reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from ..abstract_directory import AbstractDirectory
-from .....utils.override import overrides
-
-
-from m5.objects import (
-    MessageBuffer,
-    RubyDirectoryMemory,
-)
-
-
-class Directory(AbstractDirectory):
-    """
-    The directory controller for the MI_Example cache hierarchy.
-    """
-
-    def __init__(self, network, cache_line_size, mem_range, port):
-
-        super(Directory, self).__init__(network, cache_line_size)
-        self.addr_ranges = [mem_range]
-        self.directory = RubyDirectoryMemory()
-        # Connect this directory to the memory side.
-        self.memory_out_port = port
-
-    @overrides(AbstractDirectory)
-    def connectQueues(self, network):
-        self.requestToDir = MessageBuffer(ordered=True)
-        self.requestToDir.in_port = network.out_port
-        self.dmaRequestToDir = MessageBuffer(ordered=True)
-        self.dmaRequestToDir.in_port = network.out_port
-
-        self.responseFromDir = MessageBuffer()
-        self.responseFromDir.out_port = network.in_port
-        self.dmaResponseFromDir = MessageBuffer(ordered=True)
-        self.dmaResponseFromDir.out_port = network.in_port
-        self.forwardFromDir = MessageBuffer()
-        self.forwardFromDir.out_port = network.in_port
-        self.requestToMemory = MessageBuffer()
-        self.responseFromMemory = MessageBuffer()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/ruby/caches/mi_example/dma_controller.py gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/dma_controller.py
--- gem5/components_library/cachehierarchies/ruby/caches/mi_example/dma_controller.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/dma_controller.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,48 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All Rights Reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from ..abstract_dma_controller import AbstractDMAController
-from .....utils.override import overrides
-
-from m5.objects import MessageBuffer
-
-
-class DMAController(AbstractDMAController):
-    """
-    A DMA Controller for use in the MI_Example cache hierarchy setup.
-    """
-
-    class DMAController(AbstractDMAController):
-        def __init__(self, network, cache_line_size):
-            super(DMAController, self).__init__(network, cache_line_size)
-
-    @overrides(AbstractDMAController)
-    def connectQueues(self, network):
-        self.mandatoryQueue = MessageBuffer()
-        self.requestToDir = MessageBuffer()
-        self.requestToDir.out_port = network.in_port
-        self.responseFromDir = MessageBuffer(ordered=True)
-        self.responseFromDir.in_port = network.out_port
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/ruby/caches/mi_example/l1_cache.py gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/l1_cache.py
--- gem5/components_library/cachehierarchies/ruby/caches/mi_example/l1_cache.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/ruby/caches/mi_example/l1_cache.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,69 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All Rights Reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from .....utils.override import overrides
-from .....processors.abstract_core import AbstractCore
-from .....isas import ISA
-from ..abstract_l1_cache import AbstractL1Cache
-
-from m5.objects import (
-    MessageBuffer,
-    RubyCache,
-    ClockDomain,
-)
-
-
-class L1Cache(AbstractL1Cache):
-    def __init__(
-        self,
-        size: str,
-        assoc: int,
-        network,
-        core: AbstractCore,
-        cache_line_size,
-        target_isa: ISA,
-        clk_domain: ClockDomain,
-    ):
-        super(L1Cache, self).__init__(network, cache_line_size)
-
-        self.cacheMemory = RubyCache(
-            size=size, assoc=assoc, start_index_bit=self.getBlockSizeBits()
-        )
-
-        self.clk_domain = clk_domain
-        self.send_evictions = self.sendEvicts(core=core, target_isa=target_isa)
-
-    @overrides(AbstractL1Cache)
-    def connectQueues(self, network):
-        self.mandatoryQueue = MessageBuffer()
-        self.requestFromCache = MessageBuffer(ordered=True)
-        self.requestFromCache.out_port = network.in_port
-        self.responseFromCache = MessageBuffer(ordered=True)
-        self.responseFromCache.out_port = network.in_port
-        self.forwardToCache = MessageBuffer(ordered=True)
-        self.forwardToCache.in_port = network.out_port
-        self.responseToCache = MessageBuffer(ordered=True)
-        self.responseToCache.in_port = network.out_port
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/ruby/mesi_two_level_cache_hierarchy.py gem5-SALAM/components_library/cachehierarchies/ruby/mesi_two_level_cache_hierarchy.py
--- gem5/components_library/cachehierarchies/ruby/mesi_two_level_cache_hierarchy.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/ruby/mesi_two_level_cache_hierarchy.py	2024-02-22 18:17:14.848943159 -0600
@@ -30,8 +30,7 @@
 from ...coherence_protocol import CoherenceProtocol
 from ...isas import ISA
 from ...boards.abstract_board import AbstractBoard
-from ...runtime import get_runtime_isa
-from components_library.utils.requires import requires
+from ...runtime import get_runtime_coherence_protocol, get_runtime_isa
 
 from .topologies.simple_pt2pt import SimplePt2Pt
 from .caches.mesi_two_level.l1_cache import L1Cache
@@ -82,8 +81,14 @@
         self._num_l2_banks = num_l2_banks
 
     def incorporate_cache(self, board: AbstractBoard) -> None:
-
-        requires(coherence_protocol_required=CoherenceProtocol.MESI_TWO_LEVEL)
+        if (
+            get_runtime_coherence_protocol()
+            != CoherenceProtocol.MESI_TWO_LEVEL
+        ):
+            raise EnvironmentError(
+                "The MESITwoLevelCacheHierarchy must be used with with the "
+                "MESI_Two_Level coherence protocol."
+            )
 
         cache_line_size = board.get_cache_line_size()
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/cachehierarchies/ruby/mi_example_cache_hierarchy.py gem5-SALAM/components_library/cachehierarchies/ruby/mi_example_cache_hierarchy.py
--- gem5/components_library/cachehierarchies/ruby/mi_example_cache_hierarchy.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/cachehierarchies/ruby/mi_example_cache_hierarchy.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,184 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from .caches.mi_example.l1_cache import L1Cache
-from .caches.mi_example.dma_controller import DMAController
-from .caches.mi_example.directory import Directory
-from .topologies.simple_pt2pt import SimplePt2Pt
-from .abstract_ruby_cache_hierarhcy import AbstractRubyCacheHierarchy
-from ..abstract_cache_hierarchy import AbstractCacheHierarchy
-from ...boards.abstract_board import AbstractBoard
-from ...coherence_protocol import CoherenceProtocol
-from ...isas import ISA
-from ...utils.override import overrides
-from ...runtime import get_runtime_isa
-from components_library.utils.requires import requires
-
-
-from m5.objects import (
-    RubySystem,
-    RubySequencer,
-    DMASequencer,
-    RubyPortProxy,
-)
-
-
-class MIExampleCacheHierarchy(AbstractRubyCacheHierarchy):
-    """
-    The MI_Example cache hierarchy creates a Ruby cache for each code in a
-    simple point-to-point topology.
-    """
-
-    def __init__(
-        self,
-        size: str,
-        assoc: str,
-    ):
-        """
-        :param size: The size of each cache in the heirarchy.
-        :param assoc: The associativity of each cache.
-        """
-        super().__init__()
-
-        self._size = size
-        self._assoc = assoc
-
-    @overrides(AbstractCacheHierarchy)
-    def incorporate_cache(self, board: AbstractBoard) -> None:
-
-        requires(coherence_protocol_required=CoherenceProtocol.MI_EXAMPLE)
-
-        self.ruby_system = RubySystem()
-
-        # Ruby's global network.
-        self.ruby_system.network = SimplePt2Pt(self.ruby_system)
-
-        # MI Example users 5 virtual networks.
-        self.ruby_system.number_of_virtual_networks = 5
-        self.ruby_system.network.number_of_virtual_networks = 5
-
-        # There is a single global list of all of the controllers to make it
-        # easier to connect everything to the global network. This can be
-        # customized depending on the topology/network requirements.
-        # Create one controller for each L1 cache (and the cache mem obj.)
-        # Create a single directory controller (Really the memory cntrl).
-        self._controllers = []
-        for i, core in enumerate(board.get_processor().get_cores()):
-            cache = L1Cache(
-                size=self._size,
-                assoc=self._assoc,
-                network=self.ruby_system.network,
-                core=core,
-                cache_line_size=board.get_cache_line_size(),
-                target_isa=get_runtime_isa(),
-                clk_domain=board.get_clock_domain(),
-            )
-
-            if board.has_io_bus():
-                cache.sequencer = RubySequencer(
-                    version=i,
-                    dcache=cache.cacheMemory,
-                    clk_domain=cache.clk_domain,
-                    pio_request_port=board.get_io_bus().cpu_side_ports,
-                    mem_request_port=board.get_io_bus().cpu_side_ports,
-                    pio_response_port=board.get_io_bus().mem_side_ports,
-                )
-            else:
-                cache.sequencer = RubySequencer(
-                    version=i,
-                    dcache=cache.L1Dcache,
-                    clk_domain=cache.clk_domain,
-                )
-
-            cache.ruby_system = self.ruby_system
-
-            core.connect_icache(cache.sequencer.in_ports)
-            core.connect_dcache(cache.sequencer.in_ports)
-
-            core.connect_walker_ports(
-                cache.sequencer.in_ports, cache.sequencer.in_ports
-            )
-
-            # Connect the interrupt ports
-            if get_runtime_isa() == ISA.X86:
-                int_req_port = cache.sequencer.interrupt_out_port
-                int_resp_port = cache.sequencer.in_ports
-                core.connect_interrupt(int_req_port, int_resp_port)
-            else:
-                core.connect_interrupt()
-
-            cache.ruby_system = self.ruby_system
-            self._controllers.append(cache)
-
-        # Create the directory controllers
-        self._directory_controllers = []
-        for range, port in board.get_memory().get_mem_ports():
-            dir = Directory(
-                self.ruby_system.network,
-                board.get_cache_line_size(),
-                range,
-                port,
-            )
-            dir.ruby_system = self.ruby_system
-            self._directory_controllers.append(dir)
-
-        # Create the DMA Controllers, if required.
-        self._dma_controllers = []
-        if board.has_dma_ports():
-            dma_ports = board.get_dma_ports()
-            for i, port in enumerate(dma_ports):
-                ctrl = DMAController(
-                    self.ruby_system.network, board.get_cache_line_size()
-                )
-                ctrl.dma_sequencer = DMASequencer(version=i, in_ports=port)
-
-                ctrl.ruby_system = self.ruby_system
-                ctrl.dma_sequencer.ruby_system = self.ruby_system
-
-                self._dma_controllers.append(ctrl)
-
-        self.ruby_system.num_of_sequencers = len(self._controllers) + len(
-            self._dma_controllers
-        )
-
-        # Connect the controllers.
-        self.ruby_system.controllers = self._controllers
-        self.ruby_system.directory_controllers = self._directory_controllers
-
-        if len(self._dma_controllers) != 0:
-            self.ruby_system.dma_controllers = self._dma_controllers
-
-        self.ruby_system.network.connectControllers(
-            self._controllers
-            + self._directory_controllers
-            + self._dma_controllers
-        )
-        self.ruby_system.network.setup_buffers()
-
-        # Set up a proxy port for the system_port. Used for load binaries and
-        # other functional-only things.
-        self.ruby_system.sys_port_proxy = RubyPortProxy()
-        board.connect_system_port(self.ruby_system.sys_port_proxy.in_ports)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/memory/abstract_memory_system.py gem5-SALAM/components_library/memory/abstract_memory_system.py
--- gem5/components_library/memory/abstract_memory_system.py	2024-02-22 18:25:43.391603460 -0600
+++ gem5-SALAM/components_library/memory/abstract_memory_system.py	2024-02-22 18:17:14.848943159 -0600
@@ -41,33 +41,17 @@
 
     @abstractmethod
     def incorporate_memory(self, board: AbstractBoard) -> None:
-        """This function completes all of the necessary steps to add this
-        memory system to the board."""
         raise NotImplementedError
 
     @abstractmethod
     def get_mem_ports(self) -> Sequence[Tuple[AddrRange, Port]]:
-        """Get the ports to connect this memory system to the cache"""
         raise NotImplementedError
 
     @abstractmethod
     def get_memory_controllers(self) -> List[MemCtrl]:
-        """Get all of the memory controllers in this memory system"""
         raise NotImplementedError
 
     @abstractmethod
-    def get_size(self) -> int:
-        """Returns the total size of the memory system"""
-        raise NotImplementedError
-
-    @abstractmethod
-    def set_memory_range(self, ranges: List[AddrRange]) -> None:
-        """Set the total range for this memory system
-
-        May pass multiple non-overlapping ranges. The total size of the ranges
-        should match the size of the memory.
-
-        If this memory system is incompatible with the ranges, an exception
-        will be raised.
-        """
+    def get_memory_ranges(self) -> List[AddrRange]:
+        """All of the memory ranges that this memory system responds to."""
         raise NotImplementedError
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/memory/ddr3_1600_8x8.py gem5-SALAM/components_library/memory/ddr3_1600_8x8.py
--- gem5/components_library/memory/ddr3_1600_8x8.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/components_library/memory/ddr3_1600_8x8.py	2024-02-22 18:17:14.848943159 -0600
@@ -0,0 +1,66 @@
+# Copyright (c) 2021 The Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+from abc import abstractmethod
+from typing import Optional
+
+from m5.objects import DDR3_1600_8x8 as DIMM
+from m5.objects import MemCtrl
+from m5.params import Port, AddrRange
+
+from .abstract_memory_system import AbstractMemorySystem
+from ..boards.abstract_board import AbstractBoard
+
+from ..utils.override import *
+
+from typing import Tuple, Sequence, List
+
+
+class DDR3_1600_8x8(AbstractMemorySystem):
+    def __init__(self, size: Optional[str] = "512MiB") -> None:
+        super(DDR3_1600_8x8, self).__init__()
+
+        # The DDR3_1600_8x8 has a lot of variables with sensible defaults that
+        # make sense for a DDR3_1600_8x8 device. Only the size has been
+        # exposed.
+        self._dram = DIMM(range=size)
+        self.mem_cntrls = [MemCtrl(dram=self._dram)]
+
+    @overrides(AbstractMemorySystem)
+    def incorporate_memory(self, board: AbstractBoard) -> None:
+        pass
+
+    @overrides(AbstractMemorySystem)
+    def get_mem_ports(self) -> Tuple[Sequence[AddrRange], Port]:
+        return [(self._dram.range, ctrl.port) for ctrl in self.mem_cntrls]
+
+    @overrides(AbstractMemorySystem)
+    def get_memory_controllers(self) -> List[MemCtrl]:
+        return self.mem_cntrls
+
+    @overrides(AbstractMemorySystem)
+    def get_memory_ranges(self):
+        return [self._dram.range]
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/memory/dramsim_3.py gem5-SALAM/components_library/memory/dramsim_3.py
--- gem5/components_library/memory/dramsim_3.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/memory/dramsim_3.py	2024-02-22 18:17:14.852943180 -0600
@@ -3,7 +3,6 @@
 import configparser
 
 from m5.objects import DRAMsim3, AddrRange, Port, MemCtrl
-from m5.util.convert import toMemorySize
 
 from ..utils.override import overrides
 from ..boards.abstract_board import AbstractBoard
@@ -96,8 +95,9 @@
         """
         super(SingleChannel, self).__init__()
         self.mem_ctrl = DRAMSim3MemCtrl(mem_type, 1)
-        self._size = toMemorySize(size)
-        if not size:
+        if size:
+            self.mem_ctrl.range = AddrRange(size)
+        else:
             raise NotImplementedError(
                 "DRAMSim3 memory controller requires a size parameter."
             )
@@ -115,17 +115,8 @@
         return [self.mem_ctrl]
 
     @overrides(AbstractMemorySystem)
-    def get_size(self) -> int:
-        return self._size
-
-    @overrides(AbstractMemorySystem)
-    def set_memory_range(self, ranges: List[AddrRange]) -> None:
-        if len(ranges != 1) or ranges[0].size != self._size:
-            raise Exception(
-                "Single channel DRAMSim memory controller requires a single "
-                "range which matches the memory's size."
-            )
-        self.mem_ctrl.range = ranges[0]
+    def get_memory_ranges(self):
+        return [self.mem_ctrl.range]
 
 
 def SingleChannelDDR3_1600(
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/memory/single_channel.py gem5-SALAM/components_library/memory/single_channel.py
--- gem5/components_library/memory/single_channel.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/memory/single_channel.py	2024-02-22 18:17:14.852943180 -0600
@@ -32,7 +32,6 @@
 from ..utils.override import overrides
 
 from m5.objects import AddrRange, DRAMInterface, MemCtrl, Port
-from m5.util.convert import toMemorySize
 
 from typing import List, Sequence, Tuple, Type, Optional
 
@@ -60,12 +59,12 @@
 
         self._dram = dram_interface_class()
         if size:
-            self._size = toMemorySize(size)
+            self._dram.range = size
         else:
-            self._size = self._get_dram_size(self._dram)
+            self._dram.range = AddrRange(self.get_size(self._dram))
         self.mem_ctrl = MemCtrl(dram=self._dram)
 
-    def _get_dram_size(self, dram: DRAMInterface) -> int:
+    def get_size(self, dram: DRAMInterface) -> int:
         return (
             dram.device_size.value
             * dram.devices_per_rank.value
@@ -85,18 +84,8 @@
         return [self.mem_ctrl]
 
     @overrides(AbstractMemorySystem)
-    def get_size(self) -> int:
-        return self._size
-
-    @overrides(AbstractMemorySystem)
-    def set_memory_range(self, ranges: List[AddrRange]) -> None:
-        if len(ranges) != 1 or ranges[0].size() != self._size:
-            print(ranges[0].size())
-            raise Exception(
-                "Single channel memory controller requires a single range "
-                "which matches the memory's size."
-            )
-        self.mem_ctrl.dram.range = ranges[0]
+    def get_memory_ranges(self):
+        return [self._dram.range]
 
 
 from .dram_interfaces.ddr3 import DDR3_1600_8x8, DDR3_2133_8x8
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/abstract_core.py gem5-SALAM/components_library/processors/abstract_core.py
--- gem5/components_library/processors/abstract_core.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/abstract_core.py	2024-02-22 18:17:14.852943180 -0600
@@ -25,11 +25,9 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 from abc import ABCMeta, abstractmethod
-from typing import Optional
 from .cpu_types import CPUTypes
-from ..utils.requires import requires
 
-from m5.objects import BaseMMU, Port, SubSystem
+from m5.objects import Port, SubSystem
 
 
 class AbstractCore(SubSystem):
@@ -37,8 +35,6 @@
 
     def __init__(self, cpu_type: CPUTypes):
         super(AbstractCore, self).__init__()
-        if cpu_type == CPUTypes.KVM:
-            requires(kvm_required=True)
         self._cpu_type = cpu_type
 
     def get_type(self) -> CPUTypes:
@@ -85,20 +81,6 @@
 
     @abstractmethod
     def connect_interrupt(
-        self, interrupt_requestor: Optional[Port] = None,
-        interrupt_responce: Optional[Port] = None
+        self, interrupt_requestor: Port, interrupt_responce: Port
     ) -> None:
-        """ Connect the core interrupts to the interrupt controller
-
-        This function is usually called from the cache hierarchy since the
-        optional ports can be implemented as cache ports.
-        """
-        raise NotImplementedError
-
-    @abstractmethod
-    def get_mmu(self) -> BaseMMU:
-        """ Return the MMU for this core.
-
-        This is used in the board to setup system-specific MMU settings.
-        """
         raise NotImplementedError
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/abstract_generator_core.py gem5-SALAM/components_library/processors/abstract_generator_core.py
--- gem5/components_library/processors/abstract_generator_core.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/abstract_generator_core.py	2024-02-22 18:17:14.852943180 -0600
@@ -31,8 +31,6 @@
 from .cpu_types import CPUTypes
 from .abstract_core import AbstractCore
 
-from typing import Optional
-
 
 class AbstractGeneratorCore(AbstractCore):
     """The abstract generator core
@@ -84,9 +82,7 @@
 
     @overrides(AbstractCore)
     def connect_interrupt(
-        self,
-        interrupt_requestor: Optional[Port] = None,
-        interrupt_responce: Optional[Port] = None,
+        self, interrupt_requestor: Port, interrupt_responce: Port
     ) -> None:
         """
         Since generator cores are not used in full system mode, no need to
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/simple_core.py gem5-SALAM/components_library/processors/simple_core.py
--- gem5/components_library/processors/simple_core.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/simple_core.py	2024-02-22 18:17:14.852943180 -0600
@@ -24,7 +24,6 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from typing import Optional
 from components_library.runtime import get_runtime_isa
 from components_library.processors.abstract_core import AbstractCore
 
@@ -33,11 +32,11 @@
 from ..utils.override import overrides
 
 from m5.objects import (
-    BaseMMU,
     Port,
     AtomicSimpleCPU,
     DerivO3CPU,
     TimingSimpleCPU,
+    X86KvmCPU,
     BaseCPU,
     Process,
 )
@@ -54,7 +53,6 @@
         elif cpu_type == CPUTypes.TIMING:
             self.core = TimingSimpleCPU(cpu_id=core_id)
         elif cpu_type == CPUTypes.KVM:
-            from m5.objects import X86KvmCPU
             self.core = X86KvmCPU(cpu_id=core_id)
         else:
             raise NotImplementedError
@@ -86,8 +84,7 @@
 
     @overrides(AbstractCore)
     def connect_interrupt(
-        self, interrupt_requestor: Optional[Port] = None,
-        interrupt_responce: Optional[Port] = None
+        self, interrupt_requestor: Port, interrupt_responce: Port
     ) -> None:
 
         # TODO: This model assumes that we will only create an interrupt
@@ -95,12 +92,6 @@
         self.core.createInterruptController()
 
         if get_runtime_isa() == ISA.X86:
-            if interrupt_requestor != None:
-                self.core.interrupts[0].pio = interrupt_requestor
-                self.core.interrupts[0].int_responder = interrupt_requestor
-            if interrupt_responce != None:
-                self.core.interrupts[0].int_requestor = interrupt_responce
-
-    @overrides(AbstractCore)
-    def get_mmu(self) -> BaseMMU:
-        return self.core.mmu
+            self.core.interrupts[0].pio = interrupt_requestor
+            self.core.interrupts[0].int_requestor = interrupt_responce
+            self.core.interrupts[0].int_responder = interrupt_requestor
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/simple_processor.py gem5-SALAM/components_library/processors/simple_processor.py
--- gem5/components_library/processors/simple_processor.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/simple_processor.py	2024-02-22 18:17:14.852943180 -0600
@@ -28,12 +28,15 @@
 from components_library.utils.override import overrides
 from components_library.boards.mem_mode import MemMode
 from components_library.processors.simple_core import SimpleCore
+from m5.objects import KvmVM
 
 from m5.util import warn
 
 from .abstract_processor import AbstractProcessor
 from .cpu_types import CPUTypes
 from ..boards.abstract_board import AbstractBoard
+from ..coherence_protocol import is_ruby
+from ..runtime import get_runtime_coherence_protocol
 
 from typing import List
 
@@ -53,9 +56,13 @@
 
         self._cpu_type = cpu_type
         if self._cpu_type == CPUTypes.KVM:
-            from m5.objects import KvmVM
-
             self.kvm_vm = KvmVM()
+            # To get the KVM CPUs to run on different host CPUs
+            # Specify a different event queue for each CPU
+            for i, core in enumerate(self.cores):
+                for obj in core.get_simobject().descendants():
+                    obj.eventq_index = 0
+                core.get_simobject().eventq_index = i + 1
 
     def _create_cores(self, cpu_type: CPUTypes, num_cores: int):
         return [
@@ -73,7 +80,7 @@
         elif self._cpu_type == CPUTypes.KVM:
             board.set_mem_mode(MemMode.ATOMIC_NONCACHING)
         elif self._cpu_type == CPUTypes.ATOMIC:
-            if board.get_cache_hierarchy().is_ruby():
+            if is_ruby(get_runtime_coherence_protocol()):
                 warn(
                     "Using an atomic core with Ruby will result in "
                     "'atomic_noncaching' memory mode. This will skip caching "
@@ -83,11 +90,3 @@
                 board.set_mem_mode(MemMode.ATOMIC)
         else:
             raise NotImplementedError
-
-        if self._cpu_type == CPUTypes.KVM:
-            # To get the KVM CPUs to run on different host CPUs
-            # Specify a different event queue for each CPU
-            for i, core in enumerate(self.cores):
-                for obj in core.get_simobject().descendants():
-                    obj.eventq_index = 0
-                core.get_simobject().eventq_index = i + 1
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/simple_switchable_processor.py gem5-SALAM/components_library/processors/simple_switchable_processor.py
--- gem5/components_library/processors/simple_switchable_processor.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/simple_switchable_processor.py	2024-02-22 18:17:14.852943180 -0600
@@ -56,6 +56,10 @@
         self._start_key = "start"
         self._switch_key = "switch"
         self._current_is_start = True
+        self._prepare_kvm = CPUTypes.KVM in (
+            starting_core_type,
+            switch_core_type,
+        )
 
         if starting_core_type in (CPUTypes.TIMING, CPUTypes.O3):
             self._mem_mode = MemMode.TIMING
@@ -86,6 +90,9 @@
     def incorporate_processor(self, board: AbstractBoard) -> None:
         super().incorporate_processor(board=board)
 
+        if self._prepare_kvm:
+            board.kvm_vm = KvmVM()
+
         board.set_mem_mode(self._mem_mode)
 
     def switch(self):
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/processors/switchable_processor.py gem5-SALAM/components_library/processors/switchable_processor.py
--- gem5/components_library/processors/switchable_processor.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/processors/switchable_processor.py	2024-02-22 18:17:14.852943180 -0600
@@ -26,9 +26,6 @@
 
 from components_library.processors.simple_core import SimpleCore
 from components_library.processors.abstract_core import AbstractCore
-
-from .cpu_types import CPUTypes
-
 import m5
 
 from typing import Dict, Any, List
@@ -68,20 +65,6 @@
                 core.set_switched_out(core not in self._current_cores)
                 all_cores.append(core)
 
-        self._prepare_kvm = CPUTypes.KVM in [
-            core.get_type() for core in all_cores
-        ]
-
-        if self._prepare_kvm:
-            if all_cores[0].get_type() != CPUTypes.KVM:
-                raise Exception(
-                    "When using KVM, the switchable processor must start "
-                    "with the KVM cores."
-                )
-            from m5.objects import KvmVM
-
-            self.kvm_vm = KvmVM()
-
         super(SwitchableProcessor, self).__init__(cores=all_cores)
 
     @overrides(AbstractProcessor)
@@ -93,19 +76,6 @@
         # procsesor
         self._board = board
 
-        if self._prepare_kvm:
-            board.kvm_vm = self.kvm_vm
-
-            # To get the KVM CPUs to run on different host CPUs
-            # Specify a different event queue for each CPU
-            kvm_cores = [
-                core for core in self.cores if core.get_type() == CPUTypes.KVM
-            ]
-            for i, core in enumerate(kvm_cores):
-                for obj in core.get_simobject().descendants():
-                    obj.eventq_index = 0
-                core.get_simobject().eventq_index = i + 1
-
     @overrides(AbstractProcessor)
     def get_num_cores(self) -> int:
         # Note: This is a special case where the total number of cores in the
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/resources/downloader.py gem5-SALAM/components_library/resources/downloader.py
--- gem5/components_library/resources/downloader.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/resources/downloader.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,255 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import json
-import urllib.request
-import hashlib
-import os
-import shutil
-import gzip
-import hashlib
-import base64
-from typing import List, Dict, Optional
-
-from ..utils.filelock import FileLock
-
-"""
-This Python module contains functions used to download, list, and obtain
-information about resources from resources.gem5.org.
-"""
-
-
-def _get_resources_json_uri() -> str:
-    # TODO: This is hardcoded to develop. This will need updated for each
-    # release to the stable branch.
-    uri = (
-        "https://gem5.googlesource.com/public/gem5-resources/"
-        + "+/refs/heads/develop/resources.json?format=TEXT"
-    )
-
-    return uri
-
-
-def _get_resources_json() -> Dict:
-    """
-    Gets the Resources JSON.
-
-    :returns: The Resources JSON (as a Python Dictionary).
-    """
-
-    # Note: Google Source does not properly support obtaining files as raw
-    # text. Therefore when we open the URL we receive the JSON in base64
-    # format. Conversion is needed before it can be loaded.
-    with urllib.request.urlopen(_get_resources_json_uri()) as url:
-        return json.loads(base64.b64decode(url.read()).decode("utf-8"))
-
-
-def _get_resources(resources_group: Dict) -> Dict[str, Dict]:
-    """
-    A recursive function to get all the resources.
-
-    :returns: A dictionary of resource names to the resource JSON objects.
-    """
-
-    to_return = {}
-    for resource in resources_group:
-        if resource["type"] == "artifact":
-            # If the type is "artifact" then we add it directly to the map
-            # after a check that the name is unique.
-            if resource["name"] in to_return.keys():
-                raise Exception(
-                    "Error: Duplicate artifact with name '{}'.".format(
-                        resource["name"]
-                    )
-                )
-            to_return[resource["name"]] = resource
-        elif resource["type"] == "group":
-            # If it's a group we get recursive. We then check to see if there
-            # are any duplication of keys.
-            new_map = _get_resources(resource["contents"])
-            intersection = set(new_map.keys()).intersection(to_return.keys())
-            if len(intersection) > 0:
-                # Note: if this error is received it's likely an error with
-                # the resources.json file. The resources names need to be
-                # unique keyes.
-                raise Exception(
-                    "Error: Duplicate artifacts with names: {}.".format(
-                        str(intersection)
-                    )
-                )
-            to_return.update(new_map)
-        else:
-            raise Exception(
-                "Error: Unknown type '{}'.".format(resource["type"])
-            )
-
-    return to_return
-
-
-def _get_md5(file: str) -> str:
-    """
-    Gets the md5 of a file.
-
-    :param file: The file needing an md5 value.
-
-    :returns: The md5 of the input file.
-    """
-
-    # Note: This code is slightly more complex than you might expect as
-    # `hashlib.md5(<file>)` returns malloc errors for large files (such as
-    # disk images).
-    md5_object = hashlib.md5()
-    block_size = 128 * md5_object.block_size
-    a_file = open(file, "rb")
-    chunk = a_file.read(block_size)
-
-    while chunk:
-        md5_object.update(chunk)
-        chunk = a_file.read(block_size)
-
-    return md5_object.hexdigest()
-
-
-def _download(url: str, download_to: str) -> None:
-    """
-    Downloads a file.
-
-    :param url: The URL of the file to download.
-
-    :param download_to: The location the downloaded file is to be stored.
-    """
-
-    # TODO: This whole setup will only work for single files we can get via
-    # wget. We also need to support git clones going forward.
-    urllib.request.urlretrieve(url, download_to)
-
-
-def list_resources() -> List[str]:
-    """
-    Lists all available resources by name.
-
-    :returns: A list of resources by name.
-    """
-    return _get_resources(_get_resources_json()["resources"]).keys()
-
-
-def get_resources_json_obj(resource_name: str) -> Dict:
-    """
-    Get a JSON object of a specified resource.
-
-    :param resource_name: The name of the resource.
-
-    :returns: The JSON object (in the form of a dictionary).
-
-    :raises Exception: An exception is raised if the specified resources does
-    not exist.
-    """
-    artifact_map = _get_resources(_get_resources_json()["resources"])
-
-    if resource_name not in artifact_map:
-        raise Exception(
-            "Error: Resource with name '{}' does not exist".format(
-                resource_name
-            )
-        )
-
-    return artifact_map[resource_name]
-
-
-def get_resource(
-    resource_name: str,
-    to_path: str,
-    unzip: Optional[bool] = True,
-    override: Optional[bool] = False,
-) -> None:
-    """
-    Obtains a gem5 resource and stored it to a specified location. If the
-    specified resource is already at the location, no action is taken.
-
-    :param resource_name: The resource to be obtained.
-
-    :param to_path: The location in the file system the resource is to be
-    stored. The filename should be included.
-
-    :param unzip: If true, gzipped resources will be unzipped prior to saving
-    to `to_path`. True by default.
-
-    :param override: If a resource is present with an incorrect hash (e.g.,
-    an outdated version of the resource is present), `get_resource` will delete
-    this local resource and re-download it if this parameter is True. False by
-    default.
-
-    :raises Exception: An exception is thrown if a file is already present at
-    `to_path` but it does not have the correct md5 sum. An exception will also
-    be thrown is a directory is present at `to_path`
-    """
-
-    # We apply a lock for a specific resource. This is to avoid circumstances
-    # where multiple instances of gem5 are running and trying to obtain the
-    # same resources at once. The timeout here is somewhat arbitarily put at 15
-    # minutes.Most resources should be downloaded and decompressed in this
-    # timeframe, even on the most constrained of systems.
-    with FileLock("{}.lock".format(to_path), timeout=900):
-
-        resource_json = get_resources_json_obj(resource_name)
-
-        if os.path.exists(to_path):
-
-            if not os.path.isfile(to_path):
-                raise Exception(
-                    "There is a directory at '{}'.".format(to_path)
-                )
-
-            if _get_md5(to_path) == resource_json["md5sum"]:
-                # In this case, the file has already been download, no need to
-                # do so again.
-                return
-            elif override:
-                os.remove(to_path)
-            else:
-                raise Exception(
-                    "There already a file present at '{}' but "
-                    "its md5 value is invalid.".format(to_path)
-                )
-
-        download_dest = to_path
-        run_unzip = unzip and resource_json["is_zipped"].lower() == "true"
-        if run_unzip:
-            download_dest += ".gz"
-
-        # TODO: Might be nice to have some kind of download status bar here.
-        # TODO: There might be a case where this should be silenced.
-        print("'{}' not found locally. Downloading...".format(resource_name))
-        _download(url=resource_json["url"], download_to=download_dest)
-        print("Finished downloading '{}'.".format(resource_name))
-
-        if run_unzip:
-            print("Decompressing '{}'...".format(resource_name))
-            with gzip.open(download_dest, "rb") as f:
-                with open(to_path, "wb") as o:
-                    shutil.copyfileobj(f, o)
-            os.remove(download_dest)
-            print("Finished decompressing '{}.".format(resource_name))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/resources/resource.py gem5-SALAM/components_library/resources/resource.py
--- gem5/components_library/resources/resource.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/resources/resource.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,109 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from abc import ABCMeta
-import os
-
-from .downloader import get_resource
-
-from typing import Optional
-
-"""
-A Resource object encapsulates a gem5 resource. Resources are items needed to
-run a simulation, such as a disk image, kernel, or binary. The gem5 project
-provides pre-built resources, with sources, at <resources.gem5.org>.
-
-The purpose of this encapsulation is two fold:
-
-1. It allows automatic retrieval of gem5 resources. E.g., specifying a resource
-   which is not local will initiate a download.
-2. It provides a location where code may be added to record the resources used
-   within a simulation. At present this is a TODO work-item.
-"""
-
-
-class AbstractResource:
-
-    __metaclass__ = ABCMeta
-
-    def __init__(self, local_path: str):
-        self._local_path = local_path
-
-    def get_local_path(self) -> str:
-        return self._local_path
-
-
-class CustomResource(AbstractResource):
-    """
-    A custom gem5 resource. This can be used to encapsulate a resource provided
-    by a gem5 user as opposed to one available within the gem5 resources
-    repository.
-    """
-
-    def __init__(self, local_path: str):
-        """
-        :param local_path: The path of the resource on the host system.
-        """
-        super().__init__(local_path=local_path)
-
-
-class Resource(AbstractResource):
-    """
-    An official gem5 resources as hosted within our gem5 resources repository
-    (<resources.gem5.org>).
-
-    A user need only specify the name of the resource during construction. The
-    resource will be downloaded if needed. A list of available resources can
-    be obtained via `downloader.list_resources()`.
-    """
-
-    def __init__(
-        self,
-        resource_name: str,
-        resource_directory: Optional[str] = None,
-        override: Optional[bool] = False,
-    ):
-        """
-        :param resource_name: The name of the gem5 resource.
-        :param resource_directory: The location of the directory in which the
-        resource is to be stored.
-        :param override: If the resource is present, but does not have the
-        correct md5 value, the resoruce will be deleted and re-downloaded if
-        this value is True. Otherwise an exception will be thrown. False by
-        default.
-        """
-
-        if resource_directory != None:
-            if not os.path.exists(resource_directory):
-                os.makedirs(resource_directory)
-            to_path = os.path.join(resource_directory, resource_name)
-        else:
-            to_path = resource_name
-
-        super(Resource, self).__init__(local_path=to_path)
-        get_resource(
-            resource_name=resource_name, to_path=to_path, override=override
-        )
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/utils/filelock.py gem5-SALAM/components_library/utils/filelock.py
--- gem5/components_library/utils/filelock.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/utils/filelock.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,111 +0,0 @@
-# Copyright (c) 2009, Evan Fosmark
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are met:
-#    * Redistributions of source code must retain the above copyright
-#      notice, this list of conditions and the following disclaimer.
-#    * Redistributions in binary form must reproduce the above copyright
-#      notice, this list of conditions and the following disclaimer in the
-#      documentation and/or other materials provided with the distribution.
-#    * Neither the name of the <organization> nor the
-#      names of its contributors may be used to endorse or promote products
-#      derived from this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-# ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
-# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
-# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os
-import time
-import errno
-
-
-class FileLockException(Exception):
-    pass
-
-
-class FileLock(object):
-    """A file locking mechanism that has context-manager support so
-    you can use it in a with statement. This should be relatively cross
-    compatible as it doesn't rely on msvcrt or fcntl for the locking.
-    """
-
-    def __init__(self, file_name, timeout=10, delay=0.05):
-        """Prepare the file locker. Specify the file to lock and optionally
-        the maximum timeout and the delay between each attempt to lock.
-        """
-        if timeout is not None and delay is None:
-            raise ValueError(
-                "If timeout is not None, then delay must not be None."
-            )
-        self.is_locked = False
-        self.lockfile = os.path.join(os.getcwd(), "%s.lock" % file_name)
-        self.file_name = file_name
-        self.timeout = timeout
-        self.delay = delay
-
-    def acquire(self):
-        """Acquire the lock, if possible. If the lock is in use, it check again
-        every `wait` seconds. It does this until it either gets the lock or
-        exceeds `timeout` number of seconds, in which case it throws
-        an exception.
-        """
-        start_time = time.time()
-        while True:
-            try:
-                self.fd = os.open(
-                    self.lockfile, os.O_CREAT | os.O_EXCL | os.O_RDWR
-                )
-                self.is_locked = True  # moved to ensure tag only when locked
-                break
-            except OSError as e:
-                if e.errno != errno.EEXIST:
-                    raise
-                if self.timeout is None:
-                    raise FileLockException(
-                        "Could not acquire lock on {}".format(self.file_name)
-                    )
-                if (time.time() - start_time) >= self.timeout:
-                    raise FileLockException("Timeout occured.")
-                time.sleep(self.delay)
-
-    #        self.is_locked = True
-
-    def release(self):
-        """Get rid of the lock by deleting the lockfile.
-        When working in a `with` statement, this gets automatically
-        called at the end.
-        """
-        if self.is_locked:
-            os.close(self.fd)
-            os.unlink(self.lockfile)
-            self.is_locked = False
-
-    def __enter__(self):
-        """Activated when used in the with statement.
-        Should automatically acquire a lock to be used in the with block.
-        """
-        if not self.is_locked:
-            self.acquire()
-        return self
-
-    def __exit__(self, type, value, traceback):
-        """Activated at the end of the with statement.
-        It automatically releases the lock if it isn't locked.
-        """
-        if self.is_locked:
-            self.release()
-
-    def __del__(self):
-        """Make sure that the FileLock instance doesn't leave a lockfile
-        lying around.
-        """
-        self.release()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/components_library/utils/requires.py gem5-SALAM/components_library/utils/requires.py
--- gem5/components_library/utils/requires.py	2024-02-22 18:25:43.395603481 -0600
+++ gem5-SALAM/components_library/utils/requires.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,103 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from ..runtime import get_runtime_coherence_protocol, get_runtime_isa
-from ..isas import ISA
-from ..coherence_protocol import CoherenceProtocol
-from typing import Optional
-import os
-import inspect
-
-
-def _get_exception_str(msg: str):
-    # The inspect module allows us to get information about live objects,
-    # modules, classes, etc. Here was use it to generate an exception string
-    # that incorporates information on what file or class this requirement was
-    # stated. `inspect.stack()[1]` is the `requires` caller method. One above
-    # this on the stack, `inspect.stack()[2]` should be where `requires` is
-    # called.
-    if inspect.stack()[2].function  == '<module>':
-        # If the caller is a Python module, we use the filename. This is for
-        # the case where the `requires` function is called outside of a class.
-        name = inspect.stack()[2].filename
-    else:
-        # Otherwise we assume the `requires` is being called by a class, in
-        # which case we label the exception message with the class name.
-        name = inspect.stack()[2].frame.f_locals['self'].__class__.__name__
-    return "[{}] {}".format(name, msg)
-
-
-def requires(
-    isa_required: Optional[ISA] = None,
-    coherence_protocol_required: Optional[CoherenceProtocol] = None,
-    kvm_required: Optional[bool] = False,
-) -> None:
-    """
-    Ensures the ISA/Coherence protocol/KVM requirements are met. An exception
-    will be raise if they are not.
-
-    :param isa_required: The ISA gem5 must be compiled to.
-    :param coherence_protocol_required: The coherence protocol gem5 must be
-        compiled to.
-    :param kvm_required: The host system must have the Kernel-based Virtual
-        Machine available.
-    :raises Exception: Raises an exception if the required ISA or coherence
-        protocol do not match that of the current gem5 binary.
-    """
-
-    runtime_isa = get_runtime_isa()
-    runtime_coherence_protocol = get_runtime_coherence_protocol()
-    kvm_available = os.access("/dev/kvm", mode=os.R_OK | os.W_OK)
-
-    if isa_required != None and isa_required != runtime_isa:
-        raise Exception(
-            _get_exception_str(
-                msg="The current ISA is '{}'. Required: '{}'".format(
-                    runtime_isa.name, isa_required.name
-                )
-            )
-        )
-
-    if (
-        coherence_protocol_required != None
-        and coherence_protocol_required != runtime_coherence_protocol
-    ):
-        raise Exception(
-            _get_exception_str(
-                msg="The current coherence protocol is "
-                    "'{}'. Required: '{}'".format(
-                        runtime_coherence_protocol.name,
-                        coherence_protocol_required.name,
-                )
-            )
-        )
-
-    if kvm_required and not kvm_available:
-        raise Exception(
-            _get_exception_str(
-                msg="KVM is required but is unavaiable on this system"
-            )
-        )
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/common/cores/arm/HPI.py gem5-SALAM/configs/common/cores/arm/HPI.py
--- gem5/configs/common/cores/arm/HPI.py	2024-02-22 18:25:43.403603523 -0600
+++ gem5-SALAM/configs/common/cores/arm/HPI.py	2024-02-22 18:17:14.856943201 -0600
@@ -1328,9 +1328,15 @@
         HPI_MiscFU() # 6
         ]
 
+class HPI_DTB(ArmDTB):
+    size = 256
+
+class HPI_ITB(ArmITB):
+    size = 256
+
 class HPI_MMU(ArmMMU):
-    itb = ArmTLB(entry_type="instruction", size=256)
-    dtb = ArmTLB(entry_type="data", size=256)
+    itb = HPI_ITB()
+    dtb = HPI_DTB()
 
 class HPI_WalkCache(Cache):
     data_latency = 4
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/common/ObjectList.py gem5-SALAM/configs/common/ObjectList.py
--- gem5/configs/common/ObjectList.py	2024-02-22 18:25:43.399603502 -0600
+++ gem5-SALAM/configs/common/ObjectList.py	2024-02-22 18:17:14.852943180 -0600
@@ -35,7 +35,6 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 import m5.objects
-import m5.internal.params
 import inspect
 import sys
 from textwrap import TextWrapper
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/common/Options.py gem5-SALAM/configs/common/Options.py
--- gem5/configs/common/Options.py	2024-02-22 18:25:43.399603502 -0600
+++ gem5-SALAM/configs/common/Options.py	2024-02-22 18:17:14.852943180 -0600
@@ -533,7 +533,3 @@
     parser.add_argument(
         "--command-line-file", action="store", default=None, type=str,
         help="File with a template for the kernel command line")
-
-    # Debug option
-    parser.add_argument("--wait-gdb", default=False, action='store_true',
-                        help="Wait for remote GDB to connect.")
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/boot_exit_disk_run.py gem5-SALAM/configs/example/components-library/boot_exit_disk_run.py
--- gem5/configs/example/components-library/boot_exit_disk_run.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/example/components-library/boot_exit_disk_run.py	2024-02-22 18:17:14.856943201 -0600
@@ -0,0 +1,155 @@
+# Copyright (c) 2021 The Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""
+This example runs a simple boot exit test.
+
+Characteristics
+---------------
+
+* Runs exclusively on the X86 ISA with the MESI_TWO_LEVEL coherence protocol.
+"""
+
+import m5
+from m5.objects import Root
+
+import sys
+import os
+
+# This is a lame hack to get the imports working correctly.
+# TODO: This needs fixed.
+sys.path.append(
+    os.path.join(
+        os.path.dirname(os.path.abspath(__file__)),
+        os.pardir,
+        os.pardir,
+        os.pardir,
+    )
+)
+
+from components_library.runtime import (
+    get_runtime_coherence_protocol,
+    get_runtime_isa,
+)
+from components_library.boards.x86_board import X86Board
+from components_library.memory.ddr3_1600_8x8 import DDR3_1600_8x8
+from components_library.processors.simple_processor import SimpleProcessor
+from components_library.processors.cpu_types import CPUTypes
+from components_library.isas import ISA
+from components_library.coherence_protocol import CoherenceProtocol
+
+import os
+import subprocess
+import gzip
+import shutil
+
+# Run a check to ensure the right version of gem5 is being used.
+if (
+    get_runtime_coherence_protocol() != CoherenceProtocol.MESI_TWO_LEVEL
+    or get_runtime_isa() != ISA.X86
+):
+    raise EnvironmentError(
+        "The boot-exit-disk_run.py should be run with X86_MESI_Two_Level."
+    )
+
+from components_library.cachehierarchies.\
+    ruby.mesi_two_level_cache_hierarchy import (
+    MESITwoLevelCacheHierarchy,
+)
+
+# Setup the cache heirarchy to be MESI_Two_Level.
+cache_hierarchy = MESITwoLevelCacheHierarchy(
+    l1d_size="32kB",
+    l1d_assoc=8,
+    l1i_size="32kB",
+    l1i_assoc=8,
+    l2_size="256kB",
+    l2_assoc=16,
+    num_l2_banks=1,
+)
+
+# Setup the system memory.
+# Warning: This must be kept at 3GB for now. X86Motherboard does not support
+# anything else right now!
+memory = DDR3_1600_8x8(size="3GB")
+
+# Setup a single core Timing Processor.
+processor = SimpleProcessor(cpu_type=CPUTypes.TIMING, num_cores=1)
+
+# Setup the motherboard.
+motherboard = X86Board(
+    clk_freq="3GHz",
+    processor=processor,
+    memory=memory,
+    cache_hierarchy=cache_hierarchy,
+    exit_on_work_items=True,
+)
+
+motherboard.connect_things()
+
+# Download the resources as necessary.
+thispath = os.path.dirname(os.path.realpath(__file__))
+
+kernel_url = (
+    "http://dist.gem5.org/dist/v21-0/kernels/x86/static/vmlinux-5.4.49"
+)
+kernel_path = os.path.join(thispath, "vmlinux-5.4.49")
+if not os.path.exists(kernel_path):
+    subprocess.run(["wget", "-P", thispath, kernel_url])
+
+boot_img_url = (
+    "http://dist.gem5.org/dist/v21-0/images/x86/ubuntu-18-04/boot-exit.img.gz"
+)
+boot_img_path_gz = os.path.join(thispath, "boot-exit.img.gz")
+boot_img_path = os.path.join(thispath, "boot-exit.img")
+
+if not os.path.exists(boot_img_path):
+    subprocess.run(["wget", "-P", thispath, boot_img_url])
+    with gzip.open(boot_img_path_gz, "rb") as f:
+        with open(boot_img_path, "wb") as o:
+            shutil.copyfileobj(f, o)
+
+# Set the Full System workload.
+motherboard.set_workload(
+    kernel=kernel_path, disk_image=boot_img_path, command="m5 exit \n"
+)
+
+
+# Begin running of the simulation. This will exit once the Linux system boot
+# is complete.
+print("Running with ISA: " + get_runtime_isa().name)
+print("Running with protocol: " + get_runtime_coherence_protocol().name)
+print()
+
+root = Root(full_system=True, system=motherboard)
+
+m5.instantiate()
+
+print("Beginning simulation!")
+exit_event = m5.simulate()
+print(
+    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
+)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/.gitignore gem5-SALAM/configs/example/components-library/.gitignore
--- gem5/configs/example/components-library/.gitignore	2024-02-22 18:25:43.407603544 -0600
+++ gem5-SALAM/configs/example/components-library/.gitignore	1969-12-31 18:00:00.000000000 -0600
@@ -1,4 +0,0 @@
-bootloader-vmlinux-*
-riscv-disk.img*
-vmlinux-*
-boot-exit.img*
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/parsec_disk_run.py gem5-SALAM/configs/example/components-library/parsec_disk_run.py
--- gem5/configs/example/components-library/parsec_disk_run.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/example/components-library/parsec_disk_run.py	2024-02-22 18:17:14.856943201 -0600
@@ -0,0 +1,243 @@
+# Copyright (c) 2021 The Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""
+A run script for running the parsec benchmark suite in gem5.
+
+On the first run of this script it will download the disk image for parsec
+and Linux kernel version 5.4.
+
+The disk image is about 8 GB so this can take 10-15 minutes on a fast
+connection.
+"""
+
+import m5
+import m5.ticks
+from m5.objects import Root
+
+import sys
+import os
+
+# This is a lame hack to get the imports working correctly.
+# TODO: This needs fixed.
+sys.path.append(
+    os.path.join(
+        os.path.dirname(os.path.abspath(__file__)),
+        os.pardir,
+        os.pardir,
+        os.pardir,
+    )
+)
+
+from components_library.boards.x86_board import X86Board
+from components_library.cachehierarchies.classic.\
+    private_l1_private_l2_cache_hierarchy import (
+    PrivateL1PrivateL2CacheHierarchy,
+)
+from components_library.memory.ddr3_1600_8x8 import DDR3_1600_8x8
+from components_library.processors.simple_switchable_processor import (
+    SimpleSwitchableProcessor,
+)
+from components_library.processors.cpu_types import CPUTypes
+from components_library.runtime import (
+    get_runtime_isa,
+    get_runtime_coherence_protocol,
+)
+
+import subprocess
+import gzip
+import time
+import shutil
+import time
+
+
+# Setup the cachie hierarchy.
+cache_hierarchy = PrivateL1PrivateL2CacheHierarchy(
+    l1d_size="32kB",
+    l1i_size="32kB",
+    l2_size="256kB",
+)
+
+# Setup the memory system.
+# Warning!!! This must be kept at 3GB for now. X86Motherboard does not support
+# anything else right now!
+memory = DDR3_1600_8x8(size="3GB")
+
+
+# The processor. In this case we use the special "SwitchableProcessor" which
+# allows us to switch between different SimpleProcessors.
+#
+# WARNING: This is known buggy. While it works starting with Atomic and
+# switching to Timing. The reverse is not true. KVM is not yet functional.
+
+processor = SimpleSwitchableProcessor(
+    starting_core_type=CPUTypes.ATOMIC,
+    switch_core_type=CPUTypes.TIMING,
+    num_cores=4,
+)
+
+# Setup the board.
+motherboard = X86Board(
+    clk_freq="3GHz",
+    processor=processor,
+    memory=memory,
+    cache_hierarchy=cache_hierarchy,
+    exit_on_work_items=True,
+)
+
+motherboard.connect_things()
+
+
+# Download the linux kernel and parsec disk image needed to run the
+# simuluation.
+thispath = os.path.dirname(os.path.realpath(__file__))
+
+kernel_url = (
+    "http://dist.gem5.org/dist/v21-0/kernels/x86/static/vmlinux-5.4.49"
+)
+kernel_path = os.path.join(thispath, "vmlinux-5.4.49")
+if not os.path.exists(kernel_path):
+    subprocess.run(["wget", "-P", thispath, kernel_url])
+
+parsec_img_url = (
+    "http://dist.gem5.org/dist/v21-0/images/x86/ubuntu-18-04/parsec.img.gz"
+)
+parsec_img_path_gz = os.path.join(thispath, "parsec.img.gz")
+parsec_img_path = os.path.join(thispath, "parsec.img")
+
+if not os.path.exists(parsec_img_path):
+    subprocess.run(["wget", "-P", thispath, parsec_img_url])
+    with gzip.open(parsec_img_path_gz, "rb") as f:
+        with open(parsec_img_path, "wb") as o:
+            shutil.copyfileobj(f, o)
+
+
+# The command to run. In this case the blackscholes app with the simsmall
+# workload.
+command = "cd /home/gem5/parsec-benchmark\n"
+command += "source env.sh\n"
+command += "parsecmgmt -a run -p blackscholes "
+command += "-c gcc-hooks -i simsmall -n {}\n".format(processor.get_num_cores())
+command += "sleep 5 \n"
+command += "m5 exit \n"
+
+motherboard.set_workload(
+    kernel=kernel_path, disk_image=parsec_img_path, command=command
+)
+
+print("Running with ISA: " + get_runtime_isa().name)
+print("Running with protocol: " + get_runtime_coherence_protocol().name)
+print()
+
+root = Root(full_system=True, system=motherboard)
+
+m5.instantiate()
+
+globalStart = time.time()
+print("Beginning the simulation")
+
+start_tick = m5.curTick()
+end_tick = m5.curTick()
+
+m5.stats.reset()
+
+exit_event = m5.simulate()
+
+if exit_event.getCause() == "workbegin":
+    print("Done booting Linux")
+    # Reached the start of ROI.
+    # The start of the ROI is marked by an m5_work_begin() call.
+    print("Resetting stats at the start of ROI!")
+    m5.stats.reset()
+    start_tick = m5.curTick()
+
+    # Switch to the Timing Processor.
+    motherboard.get_processor().switch()
+else:
+    print("Unexpected termination of simulation!")
+    print()
+
+    m5.stats.dump()
+    end_tick = m5.curTick()
+
+    m5.stats.reset()
+    print("Performance statistics:")
+    print("Simulated time: {}s".format((end_tick - start_tick) / 1e12))
+    print("Ran a total of", m5.curTick() / 1e12, "simulated seconds")
+    print(
+        "Total wallclock time: {}s, {} min".format(
+            (time.time() - globalStart, (time.time() - globalStart) / 60)
+        )
+    )
+    exit()
+
+# Simulate the ROI.
+exit_event = m5.simulate()
+
+if exit_event.getCause() == "workend":
+    # Reached the end of ROI
+    # The end of the ROI is marked by an m5_work_end() call.
+    print("Dumping stats at the end of the ROI!")
+    m5.stats.dump()
+    end_tick = m5.curTick()
+
+    m5.stats.reset()
+
+    # Switch back to the Atomic Processor
+    motherboard.get_processor().switch()
+else:
+    print("Unexpected termination of simulation!")
+    print()
+    m5.stats.dump()
+    end_tick = m5.curTick()
+
+    m5.stats.reset()
+    print("Performance statistics:")
+    print("Simulated time: {}s".format((end_tick - start_tick) / 1e12))
+    print("Ran a total of", m5.curTick() / 1e12, "simulated seconds")
+    print(
+        "Total wallclock time: {}s, {} min".format(
+            time.time() - globalStart, (time.time() - globalStart) / 60
+        )
+    )
+    exit()
+
+# Simulate the remaning part of the benchmark
+# Run the rest of the workload until m5 exit
+
+exit_event = m5.simulate()
+
+print("Done running the simulation")
+print()
+print("Performance statistics:")
+
+print("Simulated time in ROI: {}s".format((end_tick - start_tick) / 1e12))
+print("Ran a total of {} simulated seconds".format(m5.curTick() / 1e12))
+print(
+    "Total wallclock time: {}s, {} min".format(
+        time.time() - globalStart, (time.time() - globalStart) / 60
+    )
+)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/riscv_fs.py gem5-SALAM/configs/example/components-library/riscv_fs.py
--- gem5/configs/example/components-library/riscv_fs.py	2024-02-22 18:25:43.407603544 -0600
+++ gem5-SALAM/configs/example/components-library/riscv_fs.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,138 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-This example runs a simple linux boot.
-
-Characteristics
----------------
-
-* Runs exclusively on the RISC-V ISA with the classic caches
-* Assumes that the kernel is compiled into the bootloader
-* Automatically generates the DTB file
-"""
-
-import m5
-from m5.objects import Root
-
-import sys
-import os
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.runtime import get_runtime_isa
-from components_library.boards.riscv_board import RiscvBoard
-from components_library.memory.single_channel import SingleChannelDDR3_1600
-from components_library.processors.simple_processor import SimpleProcessor
-from components_library.processors.cpu_types import CPUTypes
-from components_library.isas import ISA
-
-import os
-import subprocess
-import gzip
-import shutil
-
-# Run a check to ensure the right version of gem5 is being used.
-if get_runtime_isa() != ISA.RISCV:
-    raise EnvironmentError("The riscv_fs.py should be run with RISCV ISA.")
-
-from components_library.cachehierarchies.classic.\
-    private_l1_private_l2_cache_hierarchy import (
-    PrivateL1PrivateL2CacheHierarchy,
-)
-from components_library.boards.riscv_board import RiscvBoard
-
-# Setup the cache hierarchy. PrivateL1PrivateL2 and NoCache have been tested.
-cache_hierarchy = PrivateL1PrivateL2CacheHierarchy(
-    l1d_size="32KiB", l1i_size="32KiB", l2_size="512KiB"
-)
-
-# Setup the system memory.
-memory = SingleChannelDDR3_1600()
-
-# Setup a single core Processor.
-processor = SimpleProcessor(cpu_type=CPUTypes.TIMING, num_cores=1)
-
-# Setup the board.
-board = RiscvBoard(
-    clk_freq="1GHz",
-    processor=processor,
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-)
-
-board.connect_things()
-
-# Download the resources as necessary.
-thispath = os.path.dirname(os.path.realpath(__file__))
-
-bootloader_url = (
-    "http://dist.gem5.org/dist/develop/kernels/"
-    "riscv/static/bootloader-vmlinux-5.10"
-)
-bootloader_path = os.path.join(thispath, "bootloader-vmlinux-5.10")
-if not os.path.exists(bootloader_path):
-    subprocess.run(["wget", "-P", thispath, bootloader_url])
-
-boot_img_url = (
-    "http://dist.gem5.org/dist/develop/images/riscv/busybox/riscv-disk.img.gz"
-)
-boot_img_path_gz = os.path.join(thispath, "riscv-disk.img.gz")
-boot_img_path = os.path.join(thispath, "riscv-disk.img")
-
-if not os.path.exists(boot_img_path):
-    subprocess.run(["wget", "-P", thispath, boot_img_url])
-    with gzip.open(boot_img_path_gz, "rb") as f:
-        with open(boot_img_path, "wb") as o:
-            shutil.copyfileobj(f, o)
-
-# Set the Full System workload.
-board.set_workload(disk_image=boot_img_path, bootloader=bootloader_path)
-
-
-# Begin running of the simulation. This will exit once the Linux system boot
-# is complete.
-print("Running with ISA: " + get_runtime_isa().name)
-print()
-
-root = Root(full_system=True, system=board)
-
-m5.instantiate()
-
-print("Beginning simulation!")
-exit_event = m5.simulate()
-print(
-    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/simple_binary_run.py gem5-SALAM/configs/example/components-library/simple_binary_run.py
--- gem5/configs/example/components-library/simple_binary_run.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/example/components-library/simple_binary_run.py	2024-02-22 18:17:14.856943201 -0600
@@ -0,0 +1,99 @@
+# Copyright (c) 2021 The Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""
+A run script for a very simple Syscall-Execution running a hello world program.
+The system has no cache heirarchy.
+
+This is as simple a setup as gem5 will allow.
+"""
+
+import m5
+from m5.objects import Root
+
+import os
+import sys
+
+# This is a lame hack to get the imports working correctly.
+# TODO: This needs fixed.
+sys.path.append(
+    os.path.join(
+        os.path.dirname(os.path.abspath(__file__)),
+        os.pardir,
+        os.pardir,
+        os.pardir,
+    )
+)
+
+from components_library.boards.simple_board import SimpleBoard
+from components_library.cachehierarchies.classic.no_cache import NoCache
+from components_library.memory.single_channel import SingleChannelDDR3_1600
+from components_library.processors.simple_processor import SimpleProcessor
+from components_library.processors.cpu_types import CPUTypes
+from components_library.runtime import (
+    get_runtime_coherence_protocol,
+    get_runtime_isa,
+)
+
+# Setup the system.
+cache_hierarchy = NoCache()
+
+memory = SingleChannelDDR3_1600()
+
+processor = SimpleProcessor(cpu_type=CPUTypes.ATOMIC, num_cores=1)
+
+motherboard = SimpleBoard(
+    clk_freq="3GHz",
+    processor=processor,
+    memory=memory,
+    cache_hierarchy=cache_hierarchy,
+)
+
+motherboard.connect_things()
+
+# Set the workload
+thispath = os.path.dirname(os.path.realpath(__file__))
+binary = os.path.join(
+    thispath, "../../../tests/test-progs/hello/bin/x86/linux/hello"
+)
+motherboard.set_workload(binary)
+
+
+# Run the simulation.
+print("Running with ISA: {}.".format(get_runtime_isa().name))
+print(
+    "Running with protocol: {}.".format(get_runtime_coherence_protocol().name)
+)
+print()
+
+root = Root(full_system=False, system=motherboard)
+
+m5.instantiate()
+
+exit_event = m5.simulate()
+print(
+    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
+)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/components-library/simple_traffic_run.py gem5-SALAM/configs/example/components-library/simple_traffic_run.py
--- gem5/configs/example/components-library/simple_traffic_run.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/example/components-library/simple_traffic_run.py	2024-02-22 18:17:14.856943201 -0600
@@ -0,0 +1,94 @@
+# Copyright (c) 2021 The Regents of the University of California
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+"""
+This script creates a simple traffic generator.
+
+The simulator starts with a linear traffic generator, and ends with a random
+traffic generator.
+"""
+
+import m5
+
+from m5.objects import Root
+
+import sys
+import os
+
+# This is a lame hack to get the imports working correctly.
+# TODO: This needs fixed.
+sys.path.append(
+    os.path.join(
+        os.path.dirname(os.path.abspath(__file__)),
+        os.pardir,
+        os.pardir,
+        os.pardir,
+    )
+)
+
+from components_library.boards.test_board import TestBoard
+from components_library.cachehierarchies.classic.no_cache import NoCache
+from components_library.memory.single_channel import SingleChannelDDR3_1600
+from components_library.processors.complex_generator import ComplexGenerator
+
+# This setup does not require a cache heirarchy. We therefore use the `NoCache`
+# setup.
+cache_hierarchy = NoCache()
+
+# We test a Single Channel DDR3_1600.
+memory = SingleChannelDDR3_1600(size="512MiB")
+
+cmxgen = ComplexGenerator(num_cores=1)
+cmxgen.add_linear(rate="100GB/s")
+cmxgen.add_random(block_size=32, rate="50MB/s")
+
+# We use the Test Board. This is a special board to run traffic generation
+# tasks
+motherboard = TestBoard(
+    clk_freq="3GHz",
+    processor=cmxgen,  # We pass the traffic generator as the processor.
+    memory=memory,
+    cache_hierarchy=cache_hierarchy,
+)
+
+motherboard.connect_things()
+
+root = Root(full_system=False, system=motherboard)
+
+m5.instantiate()
+
+cmxgen.start_traffic()
+print("Beginning simulation!")
+exit_event = m5.simulate()
+print(
+    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
+)
+cmxgen.start_traffic()
+print("The Linear taffic has finished. Swiching to random traffic!")
+exit_event = m5.simulate()
+print(
+    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
+)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/fs.py gem5-SALAM/configs/example/fs.py
--- gem5/configs/example/fs.py	2024-02-22 18:25:43.407603544 -0600
+++ gem5-SALAM/configs/example/fs.py	2024-02-22 18:17:14.856943201 -0600
@@ -383,8 +383,5 @@
                 os.path.join(m5.options.outdir, '%s.dtb' % sysname)
             sys.generateDtb(sys.workload.dtb_filename)
 
-if args.wait_gdb:
-    test_sys.workload.wait_for_remote_gdb = True
-
 Simulation.setWorkCountOptions(test_sys, args)
 Simulation.run(args, root, test_sys, FutureClass)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/example/riscv/fs_linux.py gem5-SALAM/configs/example/riscv/fs_linux.py
--- gem5/configs/example/riscv/fs_linux.py	2024-02-22 18:25:43.407603544 -0600
+++ gem5-SALAM/configs/example/riscv/fs_linux.py	2024-02-22 18:17:14.860943222 -0600
@@ -185,7 +185,6 @@
 system.platform.attachOnChipIO(system.membus)
 system.platform.attachOffChipIO(system.iobus)
 system.platform.attachPlic()
-system.platform.setNumCores(np)
 
 # ---------------------------- Default Setup --------------------------- #
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/SALAM/.gitignore gem5-SALAM/configs/SALAM/.gitignore
--- gem5/configs/SALAM/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/SALAM/.gitignore	2024-02-22 18:17:14.852943180 -0600
@@ -0,0 +1 @@
+*.py
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/SALAM/HWAccConfig.py gem5-SALAM/configs/SALAM/HWAccConfig.py
--- gem5/configs/SALAM/HWAccConfig.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/SALAM/HWAccConfig.py	2024-02-22 18:17:14.852943180 -0600
@@ -0,0 +1,161 @@
+import m5
+from m5.objects import *
+from m5.util import *
+from configparser import ConfigParser
+from pathlib import Path
+import yaml
+import os
+
+
+def AccConfig(acc, bench_file, config_file):
+    # Initialize LLVMInterface Objects
+    acc.llvm_interface = LLVMInterface()
+
+    # Benchmark path
+    acc.llvm_interface.in_file = bench_file
+    M5_Path = os.getenv('M5_PATH')
+    benchname = os.path.splitext(os.path.basename(bench_file))[0]
+
+    # lenet config launcher custom stuff
+    benchPath = Path(bench_file).parts
+    m5PathLen = len(Path(M5_Path).parts)
+
+    # Set scheduling constraints
+    # acc.llvm_interface.sched_threshold = ConfigSectionMap("Scheduler")['sched_threshold']
+    # acc.llvm_interface.clock_period = ConfigSectionMap("AccConfig")['clock_period']
+    # acc.llvm_interface.lockstep_mode = Config.getboolean("Scheduler", 'lockstep_mode')
+
+    # TODO: Auto generate the functional unit list
+
+    # Initialize HWInterface Objects
+    acc.hw_interface = HWInterface()
+    # Define HW Counts
+    acc.hw_interface.cycle_counts = CycleCounts()
+    # acc.hw_interface.cycle_counts
+
+    if benchPath[m5PathLen+1] == 'mobilenetv2':
+        fu_yaml = open(config_file, 'r')
+        for yaml_inst_list in yaml.safe_load_all(fu_yaml):
+            document = yaml_inst_list['hw_config']
+            current_acc = yaml_inst_list['hw_config']['name'] + '_' + benchname
+            if (benchPath[9] == current_acc):
+                print(current_acc + " Profile Loaded")
+                # print(yaml_inst_list['hw_config'][benchname])
+                inst_list = yaml_inst_list['hw_config'][current_acc]['instructions'].keys(
+                )
+                for instruction in inst_list:
+                    setattr(acc.hw_interface.cycle_counts, instruction,
+                            yaml_inst_list['hw_config'][current_acc]['instructions'][instruction]['runtime_cycles'])
+        fu_yaml.close()
+
+    else:
+        fu_yaml = open(config_file, 'r')
+        yaml_inst_list = yaml.safe_load(fu_yaml)
+        if yaml_inst_list['hw_config'][benchname] is not None:
+            inst_list = yaml_inst_list['hw_config'][benchname]['instructions'].keys(
+            )
+            for instruction in inst_list:
+                setattr(acc.hw_interface.cycle_counts, instruction,
+                        yaml_inst_list['hw_config'][benchname]['instructions'][instruction]['runtime_cycles'])
+        fu_yaml.close()
+
+    # TODO Automate the generation of the list below
+    # Functional Units
+    acc.hw_interface.functional_units = FunctionalUnits()
+    acc.hw_interface.functional_units.double_multiplier = DoubleMultiplier()
+    acc.hw_interface.functional_units.bit_register = BitRegister()
+    acc.hw_interface.functional_units.bitwise_operations = BitwiseOperations()
+    acc.hw_interface.functional_units.double_adder = DoubleAdder()
+    acc.hw_interface.functional_units.float_divider = FloatDivider()
+    acc.hw_interface.functional_units.bit_shifter = BitShifter()
+    acc.hw_interface.functional_units.integer_multiplier = IntegerMultiplier()
+    acc.hw_interface.functional_units.integer_adder = IntegerAdder()
+    acc.hw_interface.functional_units.double_divider = DoubleDivider()
+    acc.hw_interface.functional_units.float_adder = FloatAdder()
+    acc.hw_interface.functional_units.float_multiplier = FloatMultiplier()
+
+    # TODO Automate the generation of the list below
+    # Instructions
+    acc.hw_interface.inst_config = InstConfig()
+    acc.hw_interface.inst_config.add = Add()
+    acc.hw_interface.inst_config.addrspacecast = Addrspacecast()
+    acc.hw_interface.inst_config.alloca = Alloca()
+    acc.hw_interface.inst_config.and_inst = AndInst()
+    acc.hw_interface.inst_config.ashr = Ashr()
+    acc.hw_interface.inst_config.bitcast = Bitcast()
+    acc.hw_interface.inst_config.br = Br()
+    acc.hw_interface.inst_config.call = Call()
+    acc.hw_interface.inst_config.fadd = Fadd()
+    acc.hw_interface.inst_config.fcmp = Fcmp()
+    acc.hw_interface.inst_config.fdiv = Fdiv()
+    acc.hw_interface.inst_config.fence = Fence()
+    acc.hw_interface.inst_config.fmul = Fmul()
+    acc.hw_interface.inst_config.fpext = Fpext()
+    acc.hw_interface.inst_config.fptosi = Fptosi()
+    acc.hw_interface.inst_config.fptoui = Fptoui()
+    acc.hw_interface.inst_config.fptrunc = Fptrunc()
+    acc.hw_interface.inst_config.frem = Frem()
+    acc.hw_interface.inst_config.fsub = Fsub()
+    acc.hw_interface.inst_config.gep = Gep()
+    acc.hw_interface.inst_config.icmp = Icmp()
+    acc.hw_interface.inst_config.indirectbr = Indirectbr()
+    acc.hw_interface.inst_config.inttoptr = Inttoptr()
+    acc.hw_interface.inst_config.invoke = Invoke()
+    acc.hw_interface.inst_config.landingpad = Landingpad()
+    acc.hw_interface.inst_config.load = Load()
+    acc.hw_interface.inst_config.lshr = Lshr()
+    acc.hw_interface.inst_config.mul = Mul()
+    acc.hw_interface.inst_config.or_inst = OrInst()
+    acc.hw_interface.inst_config.phi = Phi()
+    acc.hw_interface.inst_config.ptrtoint = Ptrtoint()
+    acc.hw_interface.inst_config.resume = Resume()
+    acc.hw_interface.inst_config.ret = Ret()
+    acc.hw_interface.inst_config.sdiv = Sdiv()
+    acc.hw_interface.inst_config.select = Select()
+    acc.hw_interface.inst_config.sext = Sext()
+    acc.hw_interface.inst_config.shl = Shl()
+    acc.hw_interface.inst_config.srem = Srem()
+    acc.hw_interface.inst_config.store = Store()
+    acc.hw_interface.inst_config.sub = Sub()
+    acc.hw_interface.inst_config.switch_inst = SwitchInst()
+    acc.hw_interface.inst_config.trunc = Trunc()
+    acc.hw_interface.inst_config.udiv = Udiv()
+    acc.hw_interface.inst_config.uitofp = Uitofp()
+    acc.hw_interface.inst_config.unreachable = Unreachable()
+    acc.hw_interface.inst_config.urem = Urem()
+    acc.hw_interface.inst_config.vaarg = Vaarg()
+    acc.hw_interface.inst_config.xor_inst = XorInst()
+    acc.hw_interface.inst_config.zext = Zext()
+
+    acc.hw_interface.salam_power_model = SALAMPowerModel()
+    acc.hw_interface.hw_statistics = HWStatistics()
+    acc.hw_interface.simulator_config = SimulatorConfig()
+    acc.hw_interface.opcodes = InstOpCodes()
+
+# def AccSPMConfig(acc, spm, config_file):
+    # Setup config file parser
+    # Config = ConfigParser.ConfigParser()
+    # Config.read((config_file))
+    # Config.sections()
+    # def ConfigSectionMap(section):
+    #    dict1 = {}
+    #    options = Config.options(section)
+    #    for option in options:
+    #        try:
+    #            dict1[option] = Config.get(section, option)
+    #            if dict1[option] == -1:
+    #                DebugPrint("skip: %s" % option)
+    #        except:
+    #            print("exception on %s!" % option)
+    #            dict1[option] = None
+    #    return dict1
+
+    # spm.range = AddrRange(ConfigSectionMap("Memory")['addr_range'], \
+    #                      size=ConfigSectionMap("Memory")['size'])
+    # spm.latency = ConfigSectionMap("Memory")['latency']
+    # spm.conf_table_reported = False
+    # spm.ready_mode = Config.getboolean("Memory", 'ready_mode')
+    # spm.reset_on_scratchpad_read = Config.getboolean("Memory", 'reset_on_private_read')
+    # num_ports = ConfigSectionMap("Memory")['ports']
+    # for i in range(int(num_ports)):
+    #    acc.spm[i] = spm.spm_ports[i]
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/configs/SALAM/HWAcc.py gem5-SALAM/configs/SALAM/HWAcc.py
--- gem5/configs/SALAM/HWAcc.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/configs/SALAM/HWAcc.py	2024-02-22 18:17:14.852943180 -0600
@@ -0,0 +1,79 @@
+import m5
+from m5.objects import *
+from m5.util import *
+import ConfigParser
+from HWAccConfig import *
+
+
+def makeHWAcc(options, system):
+    # Specify the path to the benchmark file for an accelerator
+    # acc_bench = <Absolute path to benchmark LLVM file>
+    acc_bench = options.accpath + "/" + options.accbench + \
+        "/bench/" + options.accbench + ".ll"
+
+    # Specify the path to the config file for an accelerator
+    # acc_config = <Absolute path to the config file>
+    # acc_config = options.accpath + "/" + options.accbench + "/config.ini"
+
+    ############################# Creating the Accelerator Cluster #################################
+    # Create a new Accelerator Cluster
+    system.acctest = AccCluster()
+    local_low = 0x2F000000
+    local_high = 0x2FFFFFFF
+    local_range = AddrRange(local_low, local_high)
+    external_range = [AddrRange(0x00000000, local_low-1),
+                      AddrRange(local_high+1, 0xFFFFFFFF)]
+    system.acctest._attach_bridges(system, local_range, external_range)
+    system.acctest._connect_caches(system, options, l2coherent=True)
+
+    ############################# Adding Accelerators to Cluster ##################################
+    # Add an accelerator to the cluster
+    system.acctest.acc = CommInterface(devicename=options.accbench)
+    AccConfig(system.acctest.acc, acc_config, acc_bench)
+
+    # Add an SPM for the accelerator
+    system.acctest.acc_spm = ScratchpadMemory()
+    # AccSPMConfig(system.acctest.acc, system.acctest.acc_spm, acc_config)
+    system.acctest._connect_spm(system.acctest.acc_spm)
+    system.acctest.acc_spm.reset_on_scratchpad_read = False
+
+    # Connect the accelerator to the system's interrupt controller
+    system.acctest.acc.gic = system.realview.gic
+
+    # Connect HWAcc to cluster buses
+    system.acctest._connect_hwacc(system.acctest.acc)
+    system.acctest.acc.local = system.acctest.local_bus.slave
+    system.acctest.acc.acp = system.acctest.coherency_bus.slave
+
+    # Enable display of debug messages for the accelerator
+    system.acctest.acc.enable_debug_msgs = False
+
+    ################################## Adding DMAs to Cluster #####################################
+    # Add DMA devices to the cluster and connect them
+    system.acctest.dma = NoncoherentDma(
+        pio_addr=0x2ff00000, pio_size=24, gic=system.realview.gic, max_pending=32, int_num=95)
+    system.acctest._connect_cluster_dma(system, system.acctest.dma)
+    # system.acctest.dma.dma = system.membus.slave
+    # system.acctest.dma.pio = system.acctest.local_bus.master
+
+    system.acctest.stream_dma_0 = StreamDma(
+        pio_addr=0x2ff10000, pio_size=32, gic=system.realview.gic, max_pending=32)
+    system.acctest.stream_dma_0.stream_in = system.acctest.acc.stream
+    system.acctest.stream_dma_0.stream_out = system.acctest.acc.stream
+    system.acctest.stream_dma_0.stream_addr = 0x2ff10020
+    system.acctest.stream_dma_0.stream_size = 8
+    system.acctest.stream_dma_0.pio_delay = '1ns'
+    system.acctest.stream_dma_0.rd_int = 210
+    system.acctest.stream_dma_0.wr_int = 211
+    system.acctest._connect_dma(system, system.acctest.stream_dma_0)
+
+    system.acctest.stream_dma_1 = StreamDma(
+        pio_addr=0x2ff20000, pio_size=32, gic=system.realview.gic, max_pending=32)
+    system.acctest.stream_dma_1.stream_in = system.acctest.acc.stream
+    system.acctest.stream_dma_1.stream_out = system.acctest.acc.stream
+    system.acctest.stream_dma_1.stream_addr = 0x2ff20020
+    system.acctest.stream_dma_1.stream_size = 8
+    system.acctest.stream_dma_1.pio_delay = '1ns'
+    system.acctest.stream_dma_1.rd_int = 212
+    system.acctest.stream_dma_1.wr_int = 213
+    system.acctest._connect_dma(system, system.acctest.stream_dma_1)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/CONTRIBUTING.md gem5-SALAM/CONTRIBUTING.md
--- gem5/CONTRIBUTING.md	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/CONTRIBUTING.md	1969-12-31 18:00:00.000000000 -0600
@@ -1,562 +0,0 @@
-If you've made changes to gem5 that might benefit others, we strongly encourage
-you to contribute those changes to the public gem5 repository. There are
-several reasons to do this:
- * Share your work with others, so that they can benefit from new functionality.
- * Support the scientific principle by enabling others to evaluate your
-   suggestions without having to guess what you did.
- * Once your changes are part of the main repo, you no longer have to merge
-   them back in every time you update your local repo. This can be a huge time
-   saving!
- * Once your code is in the main repo, other people have to make their changes
-   work with your code, and not the other way around.
- * Others may build on your contributions to make them even better, or extend
-   them in ways you did not have time to do.
- * You will have the satisfaction of contributing back to the community.
-
-The main method for contributing code to gem5 is via our code review website:
-https://gem5-review.googlesource.com/. This documents describes the details of
-how to create code changes, upload your changes, have your changes
-reviewed, and finally push your changes to gem5. More information can be found
-from the following sources:
- * http://gem5.org/contributing
- * https://gerrit-review.googlesource.com/Documentation/index.html
- * https://git-scm.com/book
-
-
-High-level flow for submitting changes
-======================================
-
-    +-------------+
-    | Make change |
-    +------+------+
-           |
-           |
-           v
-    +-------------+
-    |  Run tests  |<--------------+
-    +------+------+               |
-           |                      |
-           |                      |
-           v                      |
-    +------+------+               |
-    | Post review |               |
-    +------+------+               |
-           |                      |
-           v                      |
-    +--------+---------+          |
-    | Wait for reviews |          |
-    +--------+---------+          |
-           |                      |
-           |                      |
-           v                      |
-      +----+----+   No     +------+------+
-      |Reviewers+--------->+ Update code |
-      |happy?   |          +------+------+
-      +----+----+                 ^
-           |                      |
-           | Yes                  |
-           v                      |
-      +----+-----+   No           |
-      |Maintainer+----------------+
-      |happy?    |
-      +----+-----+
-           |
-           | Yes
-           v
-    +------+------+
-    | Submit code |
-    +-------------+
-
-After creating your change to gem5, you can post a review on our Gerrit
-code-review site: https://gem5-review.googlesource.com. Before being able to
-submit your code to the mainline of gem5, the code is reviewed by others in the
-community. Additionally, the maintainer for that part of the code must sign off
-on it.
-
-Cloning the gem5 repo to contribute
-===================================
-
-If you plan on contributing, it is strongly encouraged for you to clone the
-repository directly, and checkout the `develop` branch from our gerrit instance
-at https://gem5.googlesource.com/.
-
-To clone the gem5 repository:
-
-```
- git clone https://gem5.googlesource.com/public/gem5
-```
-
-By default, the stable branch is checked out. The stable branch contains the
-latest released version of gem5. To obtain code still under-development (and
-which contributions can be made):
-
-```
-cd gem5
-git checkout --track origin/develop
-```
-
-Changes should be made to this develop branch. Changes to the stable branch
-will be blocked. Once a change on the develop branch is properly incorporated
-into the gem5 repo it will be merged into the stable branch upon the next
-release of gem5. New releases of gem5 occur three times a year. Ergo, changes
-made to the develop branch should appear on the stable branch within three to
-four months as part of a stable release.
-
-Other gem5 repositories
------------------------
-
-There are a few repositories other than the main gem5 development repository.
-
- * public/m5threads: The code for a pthreads implementation that works with
-   gem5's syscall emulation mode.
- * public/gem5-resources: Resources to enable computer architecture research
-   with gem5. See the README.md file in the gem5-resources repository for more
-   information.
- * public/gem5-website: The gem5.org website source. See the README.md file in
-   the gem5-website repository for more information.
-
-Making changes to gem5
-======================
-
-It is strongly encouraged to use git branches when making changes to gem5.
-Additionally, keeping changes small and concise and only have a single logical
-change per commit.
-
-Unlike our previous flow with Mercurial and patch queues, when using git, you
-will be committing changes to your local branch. By using separate branches in
-git, you will be able to pull in and merge changes from mainline and simply
-keep up with upstream changes.
-
-We use a rebase-always model for contributions to the develop branch of gem5.
-In this model, the changes are rebased on top of the tip of develop instead of
-merged. This means that to contribute, you will have to frequently rebase any
-feature branches on top of develop. If you see a "merge conflict" in gerrit, it
-can often be solved with a simple rebase. To find out more information about
-rebasing and git, see the [git book].
-
-[git book]: https://git-scm.com/book/en/v2/Git-Branching-Rebasing
-
-Requirements for change descriptions
-------------------------------------
-To help reviewers and future contributors more easily understand and track
-changes, we require all change descriptions be strictly formatted.
-
-A canonical commit message consists of three parts:
- * A short summary line describing the change. This line starts with one or
-   more keywords (found in the MAINTAINERS file) separated by commas followed
-   by a colon and a description of the change. This line should be no more than
-   65 characters long since version control systems usually add a prefix that
-   causes line-wrapping for longer lines.
- * (Optional, but highly recommended) A detailed description. This describes
-   what you have done and why. If the change isn't obvious, you might want to
-   motivate why it is needed. Lines need to be wrapped to 72 characters or
-   less.
- * Tags describing patch metadata. You are highly recommended to use
-   tags to acknowledge reviewers for their work. Gerrit will automatically add
-   most tags.
-
-Tags are an optional mechanism to store additional metadata about a patch and
-acknowledge people who reported a bug or reviewed that patch. Tags are
-generally appended to the end of the commit message in the order they happen.
-We currently use the following tags:
- * Signed-off-by: Added by the author and the submitter (if different).
-   This tag is a statement saying that you believe the patch to be correct and
-   have the right to submit the patch according to the license in the affected
-   files. Similarly, if you commit someone else's patch, this tells the rest
-   of the world that you have have the right to forward it to the main
-   repository. If you need to make any changes at all to submit the change,
-   these should be described within hard brackets just before your
-   Signed-off-by tag. By adding this line, the contributor certifies the
-   contribution is made under the terms of the Developer Certificate of Origin
-   (DCO) [https://developercertificate.org/].
- * Reviewed-by: Used to acknowledge patch reviewers. It's generally considered
-   good form to add these. Added automatically.
- * Reported-by: Used to acknowledge someone for finding and reporting a bug.
- * Reviewed-on: Link to the review request corresponding to this patch. Added
-   automatically.
- * Change-Id: Used by Gerrit to track changes across rebases. Added
-   automatically with a commit hook by git.
- * Tested-by: Used to acknowledge people who tested a patch. Sometimes added
-   automatically by review systems that integrate with CI systems.
- * Issue-On: Used to link a commit to an issue in gem5's [issue tracker]. The
-   format should be https://gem5.atlassian.net/browse/GEM5-<NUMBER>
-
-[issue tracker]: https://gem5.atlassian.net/
-
-Other than the "Signed-off-by", "Issue-On", "Reported-by", and "Tested-by"
-tags, you generally don't need to add these manually as they are added
-automatically by Gerrit.
-
-It is encouraged for the author of the patch and the submitter to add a
-Signed-off-by tag to the commit message. By adding this line, the contributor
-certifies the contribution is made under the terms of the Developer Certificate
-of Origin (DCO) [https://developercertificate.org/].
-
-If your change relates to a [Jira Issue](https://gem5.atlassian.net), it is
-advised that you provide a link to the issue in the commit message (or messages
-if the Jira Issue relates to multiple commits). Though optional, doing this
-can help reviewers understand the context of a change.
-
-It is imperative that you use your real name and your real email address in
-both tags and in the author field of the changeset.
-
-For significant changes, authors are encouraged to add copyright information
-and their names at the beginning of the file. The main purpose of the author
-names on the file is to track who is most knowledgeable about the file (e.g.,
-who has contributed a significant amount of code to the file). The
-`util/update-copyright.py` helper script can help to keep your copyright dates
-up-to-date when you make further changes to files which already have your
-copyright but with older dates.
-
-Note: If you do not follow these guidelines, the gerrit review site will
-automatically reject your patch.
-If this happens, update your changeset descriptions to match the required style
-and resubmit. The following is a useful git command to update the most recent
-commit (HEAD).
-
-```
- git commit --amend
-```
-
-Running tests
-=============
-
-Before posting a change to the code review site, you should always run the
-quick tests!
-See TESTING.md for more information.
-
-Posting a review
-================
-
-If you have not signed up for an account on the Gerrit review site
-(https://gem5-review.googlesource.com), you first have to create an account.
-
-Setting up an account
----------------------
- 1. Go to https://gem5.googlesource.com/
- 2. Click "Sign In" in the upper right corner. Note: You will need a Google
- account to contribute.
- 3. After signing in, click "Generate Password" and follow the instructions.
-
-Submitting a change
--------------------
-
-In gerrit, to submit a review request, you can simply push your git commits to
-a special named branch. For more information on git push see
-https://git-scm.com/docs/git-push.
-
-There are three ways to push your changes to gerrit.
-
-Push change to gerrit review
-----------------------------
-
-```
- git push origin HEAD:refs/for/develop
-```
-
-Assuming origin is https://gem5.googlesource.com/public/gem5 and you want to
-push the changeset at HEAD, this will create a new review request on top of the
-develop branch. More generally,
-
-```
- git push <gem5 gerrit instance> <changeset>:refs/for/<branch>
-```
-
-See https://gerrit-review.googlesource.com/Documentation/user-upload.html for
-more information.
-
-Pushing your first change
---------------------------
-The first time you push a change you may get the following error:
-
-```
- remote: ERROR: [fb1366b] missing Change-Id in commit message footer
- ...
-```
-
-Within the error message, there is a command line you should run. For every new
-clone of the git repo, you need to run the following command to automatically
-insert the change id in the the commit (all on one line).
-
-```
- curl -Lo `git rev-parse --git-dir`/hooks/commit-msg \
-	https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; \
- chmod +x `git rev-parse --git-dir`/hooks/commit-msg
-```
-
-If you receive the above error, simply run this command and then amend your
-changeset.
-
-```
- git commit --amend
-```
-
-Push change to gerrit as a Work In Progress
--------------------------------------------
-
-It is acceptable to push commits as "Work In Progress" (WIP) changes within
-gerrit. WIP changes are publicly visible though no one will be able to review
-the changes or be directly notified they have been submitted. WIP changes can
-be useful for backing up code currently under-development or for sharing
-incomplete code with the wider community (i.e., the link to the gerrit change
-may be shared, and others may download the change, comment on it, and track
-alterations over time).
-
-See https://gerrit-review.googlesource.com/Documentation/intro-user.html#wip
-for details on WIP gerrit changes.
-
-To push a change as a WIP:
-
-```
- git push origin HEAD:refs/for/develop%wip
-```
-
-Once you have pushed your change as a WIP, you can log onto [gerrit](
-https://gem5-review.googlesource.com) and view it. Once you're happy with the
-change you can add reviewers which shall move your change from WIP status
-to be considered for submission by the wider gem5 community. Switching from a
-WIP to a regular change does not notify the gem5 community, via the gem5-dev
-mailing-list, that a change has been submitted (as would occur if a change were
-submitted directly for review). It is therefore important to include reviewers
-and CC those who you wish to view the change (they will be notified
-automatically via email).
-
-Push change bypassing gerrit
------------------------------
-
-Only maintainers can bypass gerrit review. This should very rarely be used.
-
-```
- git push origin HEAD:refs/heads/develop
-```
-
-Other gerrit push options
--------------------------
-
-There are a number of options you can specify when uploading your changes to
-gerrit (e.g., reviewers, labels). The gerrit documentation has more
-information.
-https://gerrit-review.googlesource.com/Documentation/user-upload.html
-
-Branches
-========
-
-By default, contributions to gem5 should be made on the develop branch. The
-stable branch is maintained as a stable release branch (i.e., it can be pulled
-to obtain the latest official release of gem5). Creation of additional branches
-is generally discouraged due to their tendency to bloat git repositories with
-abandoned code. However, the creation of new branches is permitted for
-development of a specific feature or improvement if one or more of the
-following criteria are met:
-
-1. The feature/improvement is likely to be of a large size, consisting of many
-commits, with little logic in these commits being contributed separately.
-2. The feature/improvement will be developed over a long period of time.
-3. There is sufficient reason that a feature/improvement should not be part
-of the next gem5 release (e.g., the change should be held within a feature
-branch until ready for the next release, at which point it will be merged
-into the develop branch).
-
-If a branch is required it can only be created by a project maintainer.
-Therefore, if a gem5 contributor desires a separate branch for their work, they
-should request one from the maintainer of the component the work relates to
-(see MAINTAINERS for the list of maintainers and the components they are
-responsible for). **The maintainer shall use their discretion to determine
-whether the creation of a branch is necessary**. If approved, the maintainer
-shall create the branch which the contributor may then use.
-
-Development on a branch within Gerrit functions in exactly the same way as
-contributing to the develop branch. When contributors to a branch are
-satisfied, they should create a merge commit into the develop branch. The
-maintainer should then be notified that the branch they created can now be
-deleted.
-
-**Abandonment of changes within branches may result in these branches being
-removed from the repository. All branches within a repo should be under active
-development.**
-
-Reviewing patches
-=================
-
-Reviewing patches is done on our gerrit instance at
-https://gem5-review.googlesource.com/.
-
-After logging in with your Google account, you will be able to comment, review,
-and push your own patches as well as review others' patches. All gem5 users are
-encouraged to review patches. The only requirement to review patches is to be
-polite and respectful of others.
-
-There are multiple labels in Gerrit that can be applied to each review detailed
-below.
- * Code-review: This is used by any gem5 user to review patches. When reviewing
-   a patch you can give it a score of -2 to +2 with the following semantics.
-   * -2: This blocks the patch. You believe that this patch should never be
-     committed. This label should be very rarely used.
-   * -1: You would prefer this is not merged as is
-   * 0: No score
-   * +1: This patch seems good, but you aren't 100% confident that it should be
-     pushed.
-   * +2: This is a good patch and should be pushed as is.
- * Maintainer: Currently only PMC members are maintainers. At least one
-   maintainer must review your patch and give it a +1 before it can be merged.
- * Verified: This is automatically generated from the continuous integrated
-   (CI) tests. Each patch must receive at least a +1 from the CI tests before
-   the patch can be merged. The patch will receive a +1 if gem5 builds and
-   runs, and it will receive a +2 if the stats match.
- * Style-Check: This is automatically generated and tests the patch against the
-   gem5 code style
-   (http://www.gem5.org/documentation/general_docs/development/coding_style/).
-   The patch must receive a +1 from the style checker to be pushed.
-
-Note: Whenever the patch creator updates the patch all reviewers must re-review
-the patch. There is no longer a "Fix it, then Ship It" option.
-
-Once you have received reviews for your patch, you will likely need to make
-changes. To do this, you should update the original git changeset. Then, you
-can simply push the changeset again to the same Gerrit branch to update the
-review request.
-
-```
- git push origin HEAD:refs/for/develop
-```
-
-Committing changes
-==================
-
-Each patch must meet the following criteria to be merged:
- * At least one review with +2
- * At least one maintainer with +1
- * At least +1 from the CI tests (gem5 must build and run)
- * At least +1 from the style checker
-
-Once a patch meets the above criteria, the submitter of the patch will be able
-to merge the patch by pressing the "Submit" button on Gerrit. When the patch is
-submitted, it is merged into the public gem5 branch.
-
-Review moderation and guidelines
---------------------------------
-
-Once a change is submitted, reviewers shall review the change. This may require
-several iterations before a merge. Comments from reviewers may include
-questions, and requests for alterations to the change prior to merging. The
-overarching philosophy in managing this process is that there should be
-politeness and clear communication between all parties at all times, and,
-whenever possible, permission should be asked before doing anything that may
-inconvenience another party. Included below are some guidelines we expect
-contributors and reviewers to follow.
-
- * In all forms of communication, contributors and reviewers must be polite.
-   Comments seen as being needlessly hostile or dismissive will not be
-   tolerated.
- * Change contributors should respond to, or act upon, each item of feedback
-   given by reviewers. If there is disagreement with a piece of
-   feedback, a sufficiently detailed reason for this disagreement should
-   be given. Polite discussion, and sharing of information and expertise
-   is strongly encouraged.
- * Contributors are advised to assign reviewers when submitting a change.
-   Anyone who contributes to gem5 can be assigned as a reviewer. However,
-   all changes must be accepted by at least one maintainer prior to a
-   merge, ergo assigning of at least one maintainer as a reviewer is
-   strongly recommended. Please see MAINTAINERS for a breakdown of
-   gem5 maintainers and which components they claim responsibility for.
-   Maintainers should be chosen based on which components the change is
-   targeting. Assigning of reviewers is not strictly enforced, though not
-   assigning reviewers may slow the time in which a change is reviewed.
- * If a contributor posts a change and does not receive any reviews after two
-   working days (excluding regional holidays), it is acceptable to "prod"
-   reviewers. This can be done by adding a reply to the changeset review
-   (e.g., "Would it be possible for someone to review my change?"). If the
-   contributor has yet to assign reviewers, they are strongly advised to do so.
-   Reviewers will get notified when assigned to referee a change.
- * By default, the original contributor is assumed to own a change. I.e.,
-   they are assumed to be the sole party to submit patchsets. If someone
-   other than the original contributor wishes to submit patchsets to a
-   change on the original contributor's behalf, they should first ask
-   permission. If two working days pass without a response, a patchset may be
-   submitted without permission. Permission does not need to be asked to submit
-   a patchset consisting of minor, inoffensive, changes such a typo and format
-   fixes.
- * Once a change is ready to merge, it enters a "Ready to Submit" state. The
-   original contributor should  merge their change at this point, assuming they
-   are content with the commit in its present form. After two working days, a
-   reviewer may message a contributor to remind them of the change being in a
-   "Ready to Submit" state and ask if they can merge the change on the
-   contributors behalf. If a further two working days elapse without a
-   response, the reviewer may merge without permission. A contributor may keep
-   a change open for whatever reason though this should be communicated to the
-   reviewer when asked.
- * After a month of inactivity from a contributor on an active change, a
-   reviewer may post a message on the change reminding the submitter, and
-   anyone else watching the change, of its active status and ask if they are
-   still interested in eventually merging the change. After two weeks of no
-   response the reviewer reserves the right to abandon the change under the
-   assumption there is no longer interest.
- * The final arbiter in any dispute between reviewers and/or contributors
-   is the PMC (PMC members are highlighted in MAINTAINERS). Disputes requiring
-   intervention by the PMC are undesirable. Attempts should be made to resolve
-   disagreements via respectful and polite discourse before being escalated to
-   this level.
-
-Releases
-========
-
-gem5 releases occur 3 times per year. The procedure for releasing gem5 is as
-follows:
-
-1. Developers will be notified, via the gem5-dev mailing list, that a new
-release of gem5 will occur. This should be no sooner than 2 weeks prior to the
-creation of the staging branch (the first step in releasing a new version of
-gem5). This gives time for developers to ensure their changes for the next
-release are submitted to the develop branch.
-2. When a release is ready, a new staging branch shall be created by a project
-maintainer, from develop, with the name "release-staging-{VERSION}". The
-gem5-dev mailing list will be notified that the staging branch will be merged
-into the stable branch after two weeks, thus marking the new release.
-3. The staging branch will have the full suite of gem5 tests run on it to
-ensure all tests pass and the to-be-released code is in a decent state.
-4. If a user submits a changeset to the staging branch, it will be considered
-and undergo the standard Gerrit review process. However, only alterations that
-cannot wait until the following release will be accepted for submission into
-the branch (i.e., submissions to the staging branch for "last minute"
-inclusions to the release should be of a high priority, such as a critical bug
-fix). The project maintainers will use their discretion in deciding whether a
-change may be submitted directly to the staging branch. All other submissions
-to gem5 will continue to be made to the develop branch. Patches submitted
-into the staging branch do not need to be re-added to the develop branch.
-5. Once signed off by members of the PMC the staging branch shall be merged
-into the stable and develop branch. The staging branch will then be deleted.
-6. The stable branch shall be tagged with the correct version number for that
-release. gem5 conforms to a "v{YY}.{MAJOR}.{MINOR}.{HOTFIX}" versioning system.
-E.g., the first major release of 2022 will be "v22.0.0.0", followed by
-"v22.1.0.0". All the releases (with the exception of hotfixes) are considered
-major releases. For the meantime, there are no minor releases though we keep
-the minor release numbers in case this policy changes in the future.
-7. The gem5-dev and gem5-user mailing lists shall be notified of the new gem5
-release.
-
-Hotfixes
---------
-
-There may be circumstances in which a change to gem5 is deemed critical and
-cannot wait for an official release (e.g., a high-priority bug fix). In these
-circumstances a hotfix shall be made.
-
-First, if a developer suspects a hotfix may be necessary then the issue
-should be discussed on the gem5-dev mailing list. The community will decide
-whether the issue is worthy of a hotfix, and the final decision should be
-made by members of the PMC if there is no consensus. Assuming the hotfix is
-permitted, the following steps will be taken:
-
-1. A new branch with the prefix "hotfix-" will be created from the stable
-branch. Only gem5 maintainers can create branches. If a non-maintainer requires
-the creation of a hotfix branch then they should contact a gem5 maintainer.
-2. The change shall be submitted to the hotfix branch via gerrit. Full review,
-as with any other change, will be required.
-3. Once fully submitted, the hotfix branch shall be merged into both the
-develop and the stable branch by a gem5 maintainer.
-4. The stable branch will be tagged with the new version number; the same as
-the last but with an incremented hotfix number (e.g., "v20.2.0.0" would
-transition to "v20.2.0.1").
-4. The hotfix branch will then be deleted.
-5. The gem5-dev and the gem5-user mailing lists shall be notified of this
-hotfix.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/docker/Dockerfile gem5-SALAM/docker/Dockerfile
--- gem5/docker/Dockerfile	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/docker/Dockerfile	2024-02-22 18:17:14.860943222 -0600
@@ -0,0 +1,39 @@
+# Sample invocation:
+#    docker build . --file docker/Dockerfile --build-arg BUILD_TYPE="opt"
+
+FROM ubuntu:20.04
+
+SHELL ["/bin/bash", "-c"]
+
+ARG BUILD_TYPE
+
+# Install required packages.
+RUN export DEBIAN_FRONTEND=noninteractive && export TZ=America/New_York && \
+    apt-get update && \
+    apt-get install -yqq \
+        apt-utils sudo\
+        build-essential cmake git \
+        libssl-dev pkg-config python3 python3-pip\
+        zlib1g zlib1g-dev m4 \
+        scons libprotobuf-dev protobuf-compiler \ 
+        libprotoc-dev libgoogle-perftools-dev \
+        gcc-multilib g++-multilib \
+        python3-dev python-is-python3 python3-yaml\
+        libboost-all-dev gcc-arm-none-eabi \
+        llvm-9 clang-9
+
+WORKDIR /gem5-SALAM
+COPY . /gem5-SALAM
+ENV M5_PATH=/gem5-SALAM
+RUN docs/update-alternatives.sh
+
+# Build gem5-SALAM.
+RUN scons build/ARM/gem5."$BUILD_TYPE" -j`nproc`
+
+# Build a benchmark.
+WORKDIR  $M5_PATH/benchmarks/sys_validation/bfs
+RUN make
+
+# Run a benchmark.
+WORKDIR /gem5-SALAM
+RUN ./systemValidation.sh -b bfs
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/docs/Building_and_Integrating_Accelerators.md gem5-SALAM/docs/Building_and_Integrating_Accelerators.md
--- gem5/docs/Building_and_Integrating_Accelerators.md	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/docs/Building_and_Integrating_Accelerators.md	2024-02-22 18:17:14.860943222 -0600
@@ -0,0 +1,333 @@
+# Building and Integrating Accelerators in gem5-SALAM
+
+## Writing the Accelerator Code
+
+In this example we want to design an accelerator for a Generic Matrix Multiply operation (GEMM). This example has already been created in **benchmarks/sys_validation/gemm** and will be referenced throughout this guide. It contains a folder for accelerator code (hw) and a folder for the host code (sw). 
+
+When creating your accelerator there are a many considerations to be made. 
+
+These include:
+
+- Parallelism Desired
+- Desired power consumption
+- Target area 
+- How to integrate it into the system 
+- How to receive data
+- Is it going to be coupled in main memory
+- Does the accelerator need DMAs
+- How to control the accelerator
+
+We are going to design a highly parallel accelerator that is loosely coupled in memory and control. It will also utilize a DMA for memory transfers between the accelerator's scratch-pad memory, and main memory.
+
+Our accelerator code has two main files. **top.c** manages the GEMM accelerator and DMAs. While **gemm.c** includes our algorithm with any compiler optimizations that we want. 
+
+### gemm.c 
+
+We will first start with creating the code for our accelerator. 
+
+In gemm.c there is a GEMM loop application written. To expose parallelism for computation and memory access we fully unroll the innermost loop of the application. gem5-SALAM will natively pipeline the other loop instances for us. To accomplish the loop unrolling we can utilize clang compiler pragmas such as those on line 18 of gemm.c: 
+
+```c
+#pragma clang loop unroll(full)
+```
+
+Since the GEMM accelerator is going to pull from a static set of memory accesses that are hard coded, the memory addresses associated with each of the matrices for the GEMM operation will be used again in our system design.
+
+The complete code for the GEMM accelerator can be found under **gemm/hw/gemm.c**
+
+### top.c
+
+Now that the accelerator is written, we will write our control mechanism for the accelerator and DMAs. In this instance we want to have the DMAs and accelerator controlled by an additional device to reduce overhead on the CPU. 
+
+In the top.c we begin with a declaration having 3 addresses passed to our Top accelerator. These addresses correspond to locations in the accelerator's Memory Mapped Register (MMR) that will be filled by the host CPU later.
+
+Additionally, we setup a series of static addresses (Lines 8-12) associated with the MMRs of the GEMM accelerator so that the Top accelerator can invoke and control those. 
+
+```c
+volatile uint8_t  * GEMMFlags  = (uint8_t *)GEMM;
+volatile uint8_t  * DmaFlags   = (uint8_t  *)(DMA);
+volatile uint64_t * DmaRdAddr  = (uint64_t *)(DMA+1);
+volatile uint64_t * DmaWrAddr  = (uint64_t *)(DMA+9);
+volatile uint32_t * DmaCopyLen = (uint32_t *)(DMA+17)
+```
+
+We then set the MMRs of the DMA to perform the memory copy between DRAM and the scratchpad memory (Lines 16-28). 
+
+```c
+//Transfer Input Matrices
+//Transfer M1
+*DmaRdAddr  = m1_addr;
+*DmaWrAddr  = M1ADDR;
+*DmaCopyLen = mat_size;
+*DmaFlags   = DEV_INIT;
+//Poll DMA for finish
+while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+//Transfer M2
+*DmaRdAddr  = m2_addr;
+*DmaWrAddr  = M2ADDR;
+*DmaCopyLen = mat_size;
+*DmaFlags   = DEV_INIT;
+//Poll DMA for finish
+while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+```
+
+After copying our two input matrices we invoke the GEMM accelerator and wait for it to finish computation (Lines 31-33). 
+
+```c 
+//Start the accelerated function
+*GEMMFlags = DEV_INIT;
+//Poll function for finish
+while ((*GEMMFlags & DEV_INTR) != DEV_INTR);
+```
+
+After the computation has completed, we write back the resulting matrix from the scratchpad memory to system memory (Lines 36-41).
+
+```c
+//Transfer M3
+*DmaRdAddr  = M3ADDR;
+*DmaWrAddr  = m3_addr;
+*DmaCopyLen = mat_size;
+*DmaFlags   = DEV_INIT;
+//Poll DMA for finish
+while ((*DmaFlags & DEV_INTR) != DEV_INTR);
+```
+
+The complete code for the Top accelerator can be found in **gemm/hw/top.c**
+
+### INI files
+
+For each of our accelerators we also need to generate an INI file. In each INI file we can define the number of cycles for each IR instruction and provide any limitations on the number of Functional Units (FUs) associated with IR instructions. 
+
+Additionally, there are options for setting the FU clock periods and controls for pipelining of the accelerator. Below is an example with a few IR instructions and their respective cycle counts:
+
+```ini
+[CycleCounts]
+counter = 1
+gep = 0
+phi = 0
+select = 1
+ret = 1
+br = 0
+switch = 1
+indirectbr = 1
+invoke = 1
+```
+
+Importantly, under the AccConfig section, we set MMR specific details such as the size of the flags register, memory address, interrupt line number, and the accelerator's clock. 
+
+```ini
+[AccConfig]
+flags_size = 1
+config_size = 0
+int_num = -1
+clock_period = 10
+premap_data = 0
+data_bases = 0
+```
+
+In the Memory section, you can define the scratchpad's memory address, size, response latency and number of ports. Also, if you want the accelerator to verify that memory exists in the scratchpad prior to accessing the scratchpad we can set ready mode to true. 
+
+```ini
+[Memory]
+addr_range = 0x2f100000
+size = 98304
+latency = 2ns
+ports = 4
+ready_mode = True
+reset_on_private_read = False
+```
+
+Lastly, we need to set the memory address under CommInterface of our MMR for the accelerator as well as the overall size of the MMR that account for all variables that need to be passed, 8 bytes per variable, and flags.
+
+```ini
+[CommInterface]
+pio_addr = 0x2f000019
+pio_size = 1
+```
+
+## Constructing the System
+
+We are now going to leverage and modify the example scripts for gem5's full system simulation. In **configs/SALAM/sysValidation.py** we have a modified version of the script located in **configs/examples/fs.py** that is provided with the default gem5. The main difference in our configuration is we invoke our own function that has been added on line 240. This adds **configs/SALAM/validate_acc.py** to the overall system configuration.
+
+### validate_acc.py
+
+#### Configuring the Accelerator Cluster
+
+In order to simplify the organization of accelerator-related resources, we define a accelerator cluster. This accelerator cluster will contain any shared resources between the accelerators as well as the accelerators themselves. It has several functions associated with it that help with attaching accelerators to it and for hooking cluster into the system. 
+
+The *_attach_bridges* function (line 19) connects the accelerator cluster into the larger system, and connects the memory bus to the cluster. This gives devices outside the cluster master access to cluster resources. 
+
+```python
+system.acctest._attach_bridges(system, local_range, external_range)
+```
+
+We then invoke the *_connect_caches* function (line 20) in order to connect any cache hierarchy that exists in-between the cluster, the memory bus, or l2xbar of the CPU depending on design.  This gives the accelerator cluster master access to resources outside of itself. It also establishes coherency between cluster and other resources via caches. If no caches are needed this will merely attach the cluster to the memory bus without a cache.
+
+```python
+system.acctest._connect_caches(system, options, l2coherent=False)
+```
+
+These functions are defined in **src/hwacc/AccCluster.py**
+
+### Adding Accelerators to the Cluster
+
+#### Top
+
+First, we are going to create a CommInterface (Line 30) which is the communications portion of our Top accelerator. We will then configure Top and generate its LLVM interface by passing CommInterface, a config file, and an IR file, to AccConfig (Line 31). This will generate the LLVM interface, configure any hardware limitations, and will establish the static Control and Dataflow Graph (CDFG).
+
+We then connect the accelerator to the cluster (Line 32). This will attach the PIO port of the accelerator to the cluster's local bus that is associated with MMRs. 
+
+#### Bench
+
+For our benchmark, we follow the same steps. 
+
+- Create a CommInterface 
+- Configure it using AccConfig
+- Attach it to the accelerator cluster
+
+This can be seen on lines 35-39.
+
+```bash
+# Add the benchmark function
+acc = options.accbench
+config = hw_path + acc + ".ini"
+ir = hw_path + acc + ".ll"
+system.acctest.bench = CommInterface(devicename=acc, gic=gic, reset_spm=False)
+AccConfig(system.acctest.bench, config, ir)
+```
+
+Because we want our Bench accelerator to be managed by the Top accelerator, we connect the PIO directly to the local ports of the Top accelerator. This creates a direct connection, with no additional buses or ports (Line 40). 
+
+We then define a scratchpad memory and configure it using AccSPMConfig, which points to our accelerator's config file (Line 42). 
+
+Lastly we connect scratchpad memory to the cluster (Line 43), this allows for all accelerators in the cluster to access it. 
+
+Lines 46-63 configure different buffer sizes for the DMA. These are optional, but are presented to demonstrate how you can impose additional limitations on the DMA to control how data is transferred.
+
+#### DMA
+
+Finally, we create a NoncoherentDma and attach it to our cluster on lines 66-71. 
+
+```bash
+# Add the cluster DMA
+system.acctest.dma = NoncoherentDma(pio_addr=0x2FF00000, pio_size=21, gic=gic, int_num=98)
+system.acctest.dma.cluster_dma = system.acctest.local_bus.slave
+system.acctest.dma.dma = system.acctest.coherency_bus.slave
+system.acctest.dma.pio = system.acctest.top.local
+system.acctest.dma.max_req_size = max_req_size
+system.acctest.dma.buffer_size = buffer_size
+```
+
+Please note that NoncoherentDma, by name, does not have any coherency. If coherency is desired in an application, you can simply connect it to a cache in the gem5 system.
+
+The ports attached on lines 67-69 are described below:
+
+- cluster_dma: This port allows for master access within cluster. This connects it to the cluster local_bus which gives it access to the scratchpad memory  
+- dma: This port provides master access to the overall system. This is achieved by connecting the port to the coherency bus.
+- pio: This port is associated with the MMR and gives other devices control of the DMA. In this example, the PIO port is connected to the Top accelerator since it is the only device interacting with the DMA.
+
+This configuration code for the System Validation benchmarks is located in **configs/SALAM/validate_acc.py**  
+
+## Writing the Host Code
+
+For this application, we are using a bare metal kernel. This means that we will have a load file, assembly file,  and must generate ELF files for execution.
+
+In our boot code, we setup an Interrupt Service Routine (ISR) in isr.c to interact with our Top accelerator.
+
+### main.cpp
+
+In our main software file we start by creating and filling out our matrices for the GEMM operation. This is accomplished with the genData function defined in bench.h. We then pass the addresses of those matrices to the accelerator via its MMRs and invoke the accelerator (Lines 36-40). 
+
+```c
+*val_a = (uint32_t)(void *)m1;
+*val_b = (uint32_t)(void *)m2;
+*val_c = (uint32_t)(void *)m3;
+// printf("%d\n", *top);
+*top = 0x01;
+```
+
+Since this is an interrupting system it would be possible to perform other operations while the device is not finished, however; in this example there is nothing to do until our task is completed. 
+
+Once the accelerator is done, we will read back the results for evaluation. The verification for the results can be seen in lines 44-75. We will also utilize the m5_dump_stats function to tell gem5 to output statistics it has been tracking, and m5_exit to close out the simulation. The statistics associated with the accelerator will automatically dump to stdout when the it finishes executing.
+
+Please note that a run script is provided for all of the System Validation benchmarks. It is located at **gem5-SALAM/systemValidation.sh**. Usage instructions for this script are provided in the README.
+
+## Compiling the Benchmark
+
+Once the two accelerators have been written, you will want to invoke the clang compiler to generate the LLVM Intermediate Representation  (IR).
+
+An example Makefile has also been provided with the GEMM benchmark. In the  Makefile we compile our accelerators to IR, then we pass that through the LLVM optimizer with Level 1 optimizations, and disable the subsequent object file to get the human readable IR.
+
+```bash
+KERN=gemm
+TARGET=$(KERN).ll
+%.o : %.c
+	clang -emit-llvm -c -o $@ $<
+%.bc : %.o
+	opt -O1 -mem2reg -simplifycfg -loops -loop-unroll -o $@ $<
+%.ll : %.bc
+	llvm-dis -o $@ $<
+build : $(TARGET)
+```
+
+Finally, to compile your host code a similar Makefile is provided. This Makefile also generates the ELF file that is necessary to run the benchmark. 
+
+```bash
+include ../../../common/Makefile
+
+OBJS = boot.o ../../../common/syscalls.o main.o isr.o
+
+main.elf: $(OBJS) $(LNK_SCRIPT) Makefile
+        $(CC) $(LNK_FILE_OPT) -o $@ $(OBJS) $(LNK_OPT)
+
+boot.o: Makefile
+        $(CPP) boot.s $(CFLAGS) | $(AS) $(ASFLAGS) -o boot.o
+```
+
+ Simply run both Makefiles and the benchmark will be ready to run.
+
+## Benchmark Output
+
+This section concerns the output of a benchmark after is has already been run. The system validation script will be used. You can refer to [here](https://github.com/TeCSAR-UNCC/gem5-SALAM#system-validation-examples) in the README for a usage guide. 
+
+In gem5-SALAM when a benchmark is run there are a few items that are of interest. 
+
+- The system's terminal output
+- Statistics
+- System Configuration Diagram
+
+Once the GEMM benchmark is run the system validation script places the system's output in **BM_ARM_OUT/sys_validation/gemm**
+
+In **stats.txt** you are able to see various gem5 stats such as memory usage, time the simulation ran, etc. This is useful for performing any analysis on the system you are working with. 
+
+```bash
+---------- Begin Simulation Statistics ----------
+host_inst_rate                     106061 # Simulator instruction rate (inst/s)
+host_mem_usage                     5712112 # Number of bytes of host memory used
+host_op_rate                       119835 # Simulator op (including micro ops) rate (op/s)
+host_seconds                       273.03 # Real time elapsed on the host
+host_tick_rate                     840130224 # Simulator tick rate (ticks/s)
+```
+
+If you have installed the [optional graphviz dependencies](https://github.com/TeCSAR-UNCC/gem5-SALAM#visualization) gem5-SALAM will generate a system configuration diagram when run. In our case the GEMM accelerator's diagram is stored in **config.dot** and should look like below: 
+
+<p align="center"> 
+    <img width="359" height="390" src="https://github.com/TeCSAR-UNCC/gem5-SALAM/blob/master/docs/GEMM_ACC.png"
+</p>
+
+
+
+**system.terminal** contains the simulated system's terminal output. This can be useful for viewing any issues or outputs that the actual simulation might have. An example from the GEMM benchmark is shown below:
+
+```bash
+Generating data
+Data generated
+Interrupt
+Interrupt finished
+Job complete
+Checking result
+Running bench on CPU
+Comparing CPU run to accelerated run
+Check Passed
+```
+
Binary files gem5/docs/GEMM_ACC.png and gem5-SALAM/docs/GEMM_ACC.png differ
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/docs/SALAM_Object_Overview.md gem5-SALAM/docs/SALAM_Object_Overview.md
--- gem5/docs/SALAM_Object_Overview.md	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/docs/SALAM_Object_Overview.md	2024-02-22 18:17:14.860943222 -0600
@@ -0,0 +1,47 @@
+# SALAM Object Overview
+
+All source code for these objects are stored in **src/hwacc**
+
+## CommInterface
+
+The communications interface is the base gem5 component of an accelerator in gem5-SALAM. It provides programmability as well as system memory access to the accelerator. It also provides mechanisms for synchronization, including memory interrupt lines. 
+
+The memory map for the CommInterface object is broken into three sections:
+
+- Flags: Provides runtime status information and switches for invoking the interface
+- Config: Currently has no function, but is reserved for a future version 
+- Variables: Addresses for runtime variables or values that will be pulled upon invocation. 
+
+### Ports: 
+
+- PIO: Connects to MMRs and provides external devices the ability to program the CommInterface.
+- Local Ports: Provides access to other devices within an accelerator's local cluster .
+- ACP Ports: Provides access to devices outside of the accelerator's local cluster.
+
+- Stream Ports: Implements an AXI-stream like paradigm that limits read and write to data availability. It can be used in producer-consumer schemes with other devices using StreamBuffers or StreamDMAs. 
+- SPM Ports: Provides access to scratchpads using the additional synchronization controls provided by the scratchpad memory.
+
+## LLVMInterface
+
+The LLVM Interface represents the data path of the accelerator. It is what parses the LLVM IR file to generate the hardware data path and then generates and executes the LLVM Control and Data Flow Graph (CDFG) using runtime data provided by the CommInterface. 
+
+## AccCluster
+
+This is an optional simulation object useful for organizing accelerators and resources shared between accelerators. AccCluster provides utilities for connecting accelerators and other shared resources into the larger system. 
+
+## ScratchpadMemory
+
+ScratchpadMemory is a custom fast-access memory for accelerators. It includes access synchronization mechanisms such as ready mode. When access synchronization is activated accelerators will not be able to access data that. Furthermore, additional controls will be placed on reads and writes to the scratchpad in order to implement various sync mechanisms.
+
+## NoncoherentDma
+
+NoncohherentDma provides a memory-to-memory transfer. This is useful for copying data to and from system memory and scratchpads. The MMR layout of the NoncoherentDma is described in noncoherent_dma.hh.
+
+## StreamDma
+
+The StreamDma provides DMA access between traditional memory objects, scratchpads, an AXI-stream like interface. It also supports auto-play features commonly found in video DMAs. The memory map is defined in stream_dma.hh 
+
+## StreamBuffer
+
+StreamBuffer is a small FIFO buffer that enables AXI-Stream like communication between devices. 
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/docs/update-alternatives.sh gem5-SALAM/docs/update-alternatives.sh
--- gem5/docs/update-alternatives.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/docs/update-alternatives.sh	2024-02-22 18:17:14.860943222 -0600
@@ -0,0 +1,37 @@
+#!/bin/sh
+sudo update-alternatives --install "/usr/bin/clang" "clang" "/usr/bin/clang-12" 100 \
+	--slave "/usr/bin/bugpoint"                        "bugpoint"                         "/usr/bin/bugpoint-12" \
+	--slave "/usr/bin/clang++"                         "clang++"                          "/usr/bin/clang++-12" \
+	--slave "/usr/bin/llc"                             "llc"                              "/usr/bin/llc-12" \
+	--slave "/usr/bin/lli"                             "lli"                              "/usr/bin/lli-12" \
+	--slave "/usr/bin/llvm-ar"                         "llvm-ar"                          "/usr/bin/llvm-ar-12" \
+	--slave "/usr/bin/llvm-as"                         "llvm-as"                          "/usr/bin/llvm-as-12" \
+	--slave "/usr/bin/llvm-bcanalyzer"                 "llvm-bcanalyzer"                  "/usr/bin/llvm-bcanalyzer-12" \
+	--slave "/usr/bin/llvm-config"                     "llvm-config"                      "/usr/bin/llvm-config-12" \
+	--slave "/usr/bin/llvm-cov"                        "llvm-cov"                         "/usr/bin/llvm-cov-12" \
+	--slave "/usr/bin/llvm-c-test"                     "llvm-c-test"                      "/usr/bin/llvm-c-test-12" \
+	--slave "/usr/bin/llvm-cxxdump"                    "llvm-cxxdump"                     "/usr/bin/llvm-cxxdump-12" \
+	--slave "/usr/bin/llvm-diff"                       "llvm-diff"                        "/usr/bin/llvm-diff-12" \
+	--slave "/usr/bin/llvm-dis"                        "llvm-dis"                         "/usr/bin/llvm-dis-12" \
+	--slave "/usr/bin/llvm-dwarfdump"                  "llvm-dwarfdump"                   "/usr/bin/llvm-dwarfdump-12" \
+	--slave "/usr/bin/llvm-dwp"                        "llvm-dwp"                         "/usr/bin/llvm-dwp-12" \
+	--slave "/usr/bin/llvm-extract"                    "llvm-extract"                     "/usr/bin/llvm-extract-12" \
+	--slave "/usr/bin/llvm-lib"                        "llvm-lib"                         "/usr/bin/llvm-lib-12" \
+	--slave "/usr/bin/llvm-link"                       "llvm-link"                        "/usr/bin/llvm-link-12" \
+	--slave "/usr/bin/llvm-lto"                        "llvm-lto"                         "/usr/bin/llvm-lto-12" \
+	--slave "/usr/bin/llvm-mc"                         "llvm-mc"                          "/usr/bin/llvm-mc-12" \
+	--slave "/usr/bin/llvm-nm"                         "llvm-nm"                          "/usr/bin/llvm-nm-12" \
+	--slave "/usr/bin/llvm-objdump"                    "llvm-objdump"                     "/usr/bin/llvm-objdump-12" \
+	--slave "/usr/bin/llvm-profdata"                   "llvm-profdata"                    "/usr/bin/llvm-profdata-12" \
+	--slave "/usr/bin/llvm-ranlib"                     "llvm-ranlib"                      "/usr/bin/llvm-ranlib-12" \
+	--slave "/usr/bin/llvm-readobj"                    "llvm-readobj"                     "/usr/bin/llvm-readobj-12" \
+	--slave "/usr/bin/llvm-rtdyld"                     "llvm-rtdyld"                      "/usr/bin/llvm-rtdyld-12" \
+	--slave "/usr/bin/llvm-size"                       "llvm-size"                        "/usr/bin/llvm-size-12" \
+	--slave "/usr/bin/llvm-split"                      "llvm-split"                       "/usr/bin/llvm-split-12" \
+	--slave "/usr/bin/llvm-stress"                     "llvm-stress"                      "/usr/bin/llvm-stress-12" \
+	--slave "/usr/bin/llvm-symbolizer"                 "llvm-symbolizer"                  "/usr/bin/llvm-symbolizer-12" \
+	--slave "/usr/bin/llvm-tblgen"                     "llvm-tblgen"                      "/usr/bin/llvm-tblgen-12" \
+	--slave "/usr/bin/obj2yaml"                        "obj2yaml"                         "/usr/bin/obj2yaml-12" \
+	--slave "/usr/bin/opt"                             "opt"                              "/usr/bin/opt-12" \
+	--slave "/usr/bin/verify-uselistorder"             "verify-uselistorder"              "/usr/bin/verify-uselistorder-12" \
+	--slave "/usr/bin/yaml2obj"                        "yaml2obj"                         "/usr/bin/yaml2obj-12"
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/aarch64-core.xml gem5-SALAM/ext/gdb-xml/aarch64-core.xml
--- gem5/ext/gdb-xml/aarch64-core.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/aarch64-core.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,67 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.aarch64.core">
+  <reg name="x0" bitsize="64"/>
+  <reg name="x1" bitsize="64"/>
+  <reg name="x2" bitsize="64"/>
+  <reg name="x3" bitsize="64"/>
+  <reg name="x4" bitsize="64"/>
+  <reg name="x5" bitsize="64"/>
+  <reg name="x6" bitsize="64"/>
+  <reg name="x7" bitsize="64"/>
+  <reg name="x8" bitsize="64"/>
+  <reg name="x9" bitsize="64"/>
+  <reg name="x10" bitsize="64"/>
+  <reg name="x11" bitsize="64"/>
+  <reg name="x12" bitsize="64"/>
+  <reg name="x13" bitsize="64"/>
+  <reg name="x14" bitsize="64"/>
+  <reg name="x15" bitsize="64"/>
+  <reg name="x16" bitsize="64"/>
+  <reg name="x17" bitsize="64"/>
+  <reg name="x18" bitsize="64"/>
+  <reg name="x19" bitsize="64"/>
+  <reg name="x20" bitsize="64"/>
+  <reg name="x21" bitsize="64"/>
+  <reg name="x22" bitsize="64"/>
+  <reg name="x23" bitsize="64"/>
+  <reg name="x24" bitsize="64"/>
+  <reg name="x25" bitsize="64"/>
+  <reg name="x26" bitsize="64"/>
+  <reg name="x27" bitsize="64"/>
+  <reg name="x28" bitsize="64"/>
+  <reg name="x29" bitsize="64"/>
+  <reg name="x30" bitsize="64"/>
+  <reg name="sp" bitsize="64" type="data_ptr"/>
+
+  <reg name="pc" bitsize="64" type="code_ptr"/>
+
+  <flags id="cpsr_flags" size="4">
+    <field name="SP" start="0" end="0"/>
+    <field name="" start="1" end="1"/>
+    <field name="EL" start="2" end="3"/>
+    <field name="nRW" start="4" end="4"/>
+    <field name="" start="5" end="5"/>
+    <field name="F" start="6" end="6"/>
+    <field name="I" start="7" end="7"/>
+    <field name="A" start="8" end="8"/>
+    <field name="D" start="9" end="9"/>
+
+    <field name="IL" start="20" end="20"/>
+    <field name="SS" start="21" end="21"/>
+
+    <field name="V" start="28" end="28"/>
+    <field name="C" start="29" end="29"/>
+    <field name="Z" start="30" end="30"/>
+    <field name="N" start="31" end="31"/>
+  </flags>
+  <reg name="cpsr" bitsize="32" type="cpsr_flags"/>
+
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/aarch64-fpu.xml gem5-SALAM/ext/gdb-xml/aarch64-fpu.xml
--- gem5/ext/gdb-xml/aarch64-fpu.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/aarch64-fpu.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,86 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.aarch64.fpu">
+  <vector id="v2d" type="ieee_double" count="2"/>
+  <vector id="v2u" type="uint64" count="2"/>
+  <vector id="v2i" type="int64" count="2"/>
+  <vector id="v4f" type="ieee_single" count="4"/>
+  <vector id="v4u" type="uint32" count="4"/>
+  <vector id="v4i" type="int32" count="4"/>
+  <vector id="v8u" type="uint16" count="8"/>
+  <vector id="v8i" type="int16" count="8"/>
+  <vector id="v16u" type="uint8" count="16"/>
+  <vector id="v16i" type="int8" count="16"/>
+  <vector id="v1u" type="uint128" count="1"/>
+  <vector id="v1i" type="int128" count="1"/>
+  <union id="vnd">
+    <field name="f" type="v2d"/>
+    <field name="u" type="v2u"/>
+    <field name="s" type="v2i"/>
+  </union>
+  <union id="vns">
+    <field name="f" type="v4f"/>
+    <field name="u" type="v4u"/>
+    <field name="s" type="v4i"/>
+  </union>
+  <union id="vnh">
+    <field name="u" type="v8u"/>
+    <field name="s" type="v8i"/>
+  </union>
+  <union id="vnb">
+    <field name="u" type="v16u"/>
+    <field name="s" type="v16i"/>
+  </union>
+  <union id="vnq">
+    <field name="u" type="v1u"/>
+    <field name="s" type="v1i"/>
+  </union>
+  <union id="aarch64v">
+    <field name="d" type="vnd"/>
+    <field name="s" type="vns"/>
+    <field name="h" type="vnh"/>
+    <field name="b" type="vnb"/>
+    <field name="q" type="vnq"/>
+  </union>
+  <reg name="v0" bitsize="128" type="aarch64v" regnum="34"/>
+  <reg name="v1" bitsize="128" type="aarch64v" />
+  <reg name="v2" bitsize="128" type="aarch64v" />
+  <reg name="v3" bitsize="128" type="aarch64v" />
+  <reg name="v4" bitsize="128" type="aarch64v" />
+  <reg name="v5" bitsize="128" type="aarch64v" />
+  <reg name="v6" bitsize="128" type="aarch64v" />
+  <reg name="v7" bitsize="128" type="aarch64v" />
+  <reg name="v8" bitsize="128" type="aarch64v" />
+  <reg name="v9" bitsize="128" type="aarch64v" />
+  <reg name="v10" bitsize="128" type="aarch64v"/>
+  <reg name="v11" bitsize="128" type="aarch64v"/>
+  <reg name="v12" bitsize="128" type="aarch64v"/>
+  <reg name="v13" bitsize="128" type="aarch64v"/>
+  <reg name="v14" bitsize="128" type="aarch64v"/>
+  <reg name="v15" bitsize="128" type="aarch64v"/>
+  <reg name="v16" bitsize="128" type="aarch64v"/>
+  <reg name="v17" bitsize="128" type="aarch64v"/>
+  <reg name="v18" bitsize="128" type="aarch64v"/>
+  <reg name="v19" bitsize="128" type="aarch64v"/>
+  <reg name="v20" bitsize="128" type="aarch64v"/>
+  <reg name="v21" bitsize="128" type="aarch64v"/>
+  <reg name="v22" bitsize="128" type="aarch64v"/>
+  <reg name="v23" bitsize="128" type="aarch64v"/>
+  <reg name="v24" bitsize="128" type="aarch64v"/>
+  <reg name="v25" bitsize="128" type="aarch64v"/>
+  <reg name="v26" bitsize="128" type="aarch64v"/>
+  <reg name="v27" bitsize="128" type="aarch64v"/>
+  <reg name="v28" bitsize="128" type="aarch64v"/>
+  <reg name="v29" bitsize="128" type="aarch64v"/>
+  <reg name="v30" bitsize="128" type="aarch64v"/>
+  <reg name="v31" bitsize="128" type="aarch64v"/>
+  <reg name="fpsr" bitsize="32"/>
+  <reg name="fpcr" bitsize="32"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/aarch64.xml gem5-SALAM/ext/gdb-xml/aarch64.xml
--- gem5/ext/gdb-xml/aarch64.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/aarch64.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
+     Contributed by ARM Ltd.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>aarch64</architecture>
+  <xi:include href="aarch64-core.xml"/>
+  <xi:include href="aarch64-fpu.xml"/>
+</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/arm/arm-core.xml gem5-SALAM/ext/gdb-xml/arm/arm-core.xml
--- gem5/ext/gdb-xml/arm/arm-core.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/arm/arm-core.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,31 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.arm.core">
+  <reg name="r0" bitsize="32" type="uint32"/>
+  <reg name="r1" bitsize="32" type="uint32"/>
+  <reg name="r2" bitsize="32" type="uint32"/>
+  <reg name="r3" bitsize="32" type="uint32"/>
+  <reg name="r4" bitsize="32" type="uint32"/>
+  <reg name="r5" bitsize="32" type="uint32"/>
+  <reg name="r6" bitsize="32" type="uint32"/>
+  <reg name="r7" bitsize="32" type="uint32"/>
+  <reg name="r8" bitsize="32" type="uint32"/>
+  <reg name="r9" bitsize="32" type="uint32"/>
+  <reg name="r10" bitsize="32" type="uint32"/>
+  <reg name="r11" bitsize="32" type="uint32"/>
+  <reg name="r12" bitsize="32" type="uint32"/>
+  <reg name="sp" bitsize="32" type="data_ptr"/>
+  <reg name="lr" bitsize="32"/>
+  <reg name="pc" bitsize="32" type="code_ptr"/>
+
+  <!-- The CPSR is register 25, rather than register 16, because
+       the FPA registers historically were placed between the PC
+       and the CPSR in the "g" packet.  -->
+  <reg name="cpsr" bitsize="32" regnum="25"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/arm/arm-vfpv3.xml gem5-SALAM/ext/gdb-xml/arm/arm-vfpv3.xml
--- gem5/ext/gdb-xml/arm/arm-vfpv3.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/arm/arm-vfpv3.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,44 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.arm.vfp">
+  <reg name="d0" bitsize="64" type="ieee_double"/>
+  <reg name="d1" bitsize="64" type="ieee_double"/>
+  <reg name="d2" bitsize="64" type="ieee_double"/>
+  <reg name="d3" bitsize="64" type="ieee_double"/>
+  <reg name="d4" bitsize="64" type="ieee_double"/>
+  <reg name="d5" bitsize="64" type="ieee_double"/>
+  <reg name="d6" bitsize="64" type="ieee_double"/>
+  <reg name="d7" bitsize="64" type="ieee_double"/>
+  <reg name="d8" bitsize="64" type="ieee_double"/>
+  <reg name="d9" bitsize="64" type="ieee_double"/>
+  <reg name="d10" bitsize="64" type="ieee_double"/>
+  <reg name="d11" bitsize="64" type="ieee_double"/>
+  <reg name="d12" bitsize="64" type="ieee_double"/>
+  <reg name="d13" bitsize="64" type="ieee_double"/>
+  <reg name="d14" bitsize="64" type="ieee_double"/>
+  <reg name="d15" bitsize="64" type="ieee_double"/>
+  <reg name="d16" bitsize="64" type="ieee_double"/>
+  <reg name="d17" bitsize="64" type="ieee_double"/>
+  <reg name="d18" bitsize="64" type="ieee_double"/>
+  <reg name="d19" bitsize="64" type="ieee_double"/>
+  <reg name="d20" bitsize="64" type="ieee_double"/>
+  <reg name="d21" bitsize="64" type="ieee_double"/>
+  <reg name="d22" bitsize="64" type="ieee_double"/>
+  <reg name="d23" bitsize="64" type="ieee_double"/>
+  <reg name="d24" bitsize="64" type="ieee_double"/>
+  <reg name="d25" bitsize="64" type="ieee_double"/>
+  <reg name="d26" bitsize="64" type="ieee_double"/>
+  <reg name="d27" bitsize="64" type="ieee_double"/>
+  <reg name="d28" bitsize="64" type="ieee_double"/>
+  <reg name="d29" bitsize="64" type="ieee_double"/>
+  <reg name="d30" bitsize="64" type="ieee_double"/>
+  <reg name="d31" bitsize="64" type="ieee_double"/>
+
+  <reg name="fpscr" bitsize="32" type="int" group="float"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/arm/arm-with-neon.xml gem5-SALAM/ext/gdb-xml/arm/arm-with-neon.xml
--- gem5/ext/gdb-xml/arm/arm-with-neon.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/arm/arm-with-neon.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>arm</architecture>
+  <xi:include href="arm-core.xml"/>
+  <xi:include href="arm-vfpv3.xml"/>
+  <feature name="org.gnu.gdb.arm.neon"/>
+</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/mips.xml gem5-SALAM/ext/gdb-xml/mips.xml
--- gem5/ext/gdb-xml/mips.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/mips.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,94 @@
+<?xml version="1.0"?>
+<!--
+GDB feature descriptor defining the structure of the G packet,
+i.e., the representation of register contents on the wire.
+This file does not model any real variant of 32-bit MIPS in particular;
+it simply reflects BaseGdbRegCache's fields in mips/remote_gdb.hh.
+
+As such, this description is something of an oversimplification
+relative to the XML files in the GDB source, in that it does not
+take into account possible variations in features resulting in
+non-sequential numbering of registers.
+-->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<target>
+ <architecture>mips</architecture>
+ <feature name="org.gem5.mips">
+  <reg name="r0" bitsize="32" regnum="0"/>
+  <reg name="r1" bitsize="32"/>
+  <reg name="r2" bitsize="32"/>
+  <reg name="r3" bitsize="32"/>
+  <reg name="r4" bitsize="32"/>
+  <reg name="r5" bitsize="32"/>
+  <reg name="r6" bitsize="32"/>
+  <reg name="r7" bitsize="32"/>
+  <reg name="r8" bitsize="32"/>
+  <reg name="r9" bitsize="32"/>
+  <reg name="r10" bitsize="32"/>
+  <reg name="r11" bitsize="32"/>
+  <reg name="r12" bitsize="32"/>
+  <reg name="r13" bitsize="32"/>
+  <reg name="r14" bitsize="32"/>
+  <reg name="r15" bitsize="32"/>
+  <reg name="r16" bitsize="32"/>
+  <reg name="r17" bitsize="32"/>
+  <reg name="r18" bitsize="32"/>
+  <reg name="r19" bitsize="32"/>
+  <reg name="r20" bitsize="32"/>
+  <reg name="r21" bitsize="32"/>
+  <reg name="r22" bitsize="32"/>
+  <reg name="r23" bitsize="32"/>
+  <reg name="r24" bitsize="32"/>
+  <reg name="r25" bitsize="32"/>
+  <reg name="r26" bitsize="32"/>
+  <reg name="r27" bitsize="32"/>
+  <reg name="r28" bitsize="32"/>
+  <reg name="r29" bitsize="32"/>
+  <reg name="r30" bitsize="32"/>
+  <reg name="r31" bitsize="32"/>
+
+  <reg name="sr" bitsize="32"/>
+  <reg name="lo" bitsize="32"/>
+  <reg name="hi" bitsize="32"/>
+  <reg name="badvaddr" bitsize="32"/>
+  <reg name="cause" bitsize="32"/>
+  <reg name="pc" bitsize="32"/>
+
+  <reg name="f0" bitsize="32"/>
+  <reg name="f1" bitsize="32"/>
+  <reg name="f2" bitsize="32"/>
+  <reg name="f3" bitsize="32"/>
+  <reg name="f4" bitsize="32"/>
+  <reg name="f5" bitsize="32"/>
+  <reg name="f6" bitsize="32"/>
+  <reg name="f7" bitsize="32"/>
+  <reg name="f8" bitsize="32"/>
+  <reg name="f9" bitsize="32"/>
+  <reg name="f10" bitsize="32"/>
+  <reg name="f11" bitsize="32"/>
+  <reg name="f12" bitsize="32"/>
+  <reg name="f13" bitsize="32"/>
+  <reg name="f14" bitsize="32"/>
+  <reg name="f15" bitsize="32"/>
+  <reg name="f16" bitsize="32"/>
+  <reg name="f17" bitsize="32"/>
+  <reg name="f18" bitsize="32"/>
+  <reg name="f19" bitsize="32"/>
+  <reg name="f20" bitsize="32"/>
+  <reg name="f21" bitsize="32"/>
+  <reg name="f22" bitsize="32"/>
+  <reg name="f23" bitsize="32"/>
+  <reg name="f24" bitsize="32"/>
+  <reg name="f25" bitsize="32"/>
+  <reg name="f26" bitsize="32"/>
+  <reg name="f27" bitsize="32"/>
+  <reg name="f28" bitsize="32"/>
+  <reg name="f29" bitsize="32"/>
+  <reg name="f30" bitsize="32"/>
+  <reg name="f31" bitsize="32"/>
+
+  <reg name="fsr" bitsize="32"/>
+  <reg name="fir" bitsize="32"/>
+ </feature>
+</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/power64-core.xml gem5-SALAM/ext/gdb-xml/power64-core.xml
--- gem5/ext/gdb-xml/power64-core.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/power64-core.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,49 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.power.core">
+  <reg name="r0" bitsize="64" type="uint64"/>
+  <reg name="r1" bitsize="64" type="uint64"/>
+  <reg name="r2" bitsize="64" type="uint64"/>
+  <reg name="r3" bitsize="64" type="uint64"/>
+  <reg name="r4" bitsize="64" type="uint64"/>
+  <reg name="r5" bitsize="64" type="uint64"/>
+  <reg name="r6" bitsize="64" type="uint64"/>
+  <reg name="r7" bitsize="64" type="uint64"/>
+  <reg name="r8" bitsize="64" type="uint64"/>
+  <reg name="r9" bitsize="64" type="uint64"/>
+  <reg name="r10" bitsize="64" type="uint64"/>
+  <reg name="r11" bitsize="64" type="uint64"/>
+  <reg name="r12" bitsize="64" type="uint64"/>
+  <reg name="r13" bitsize="64" type="uint64"/>
+  <reg name="r14" bitsize="64" type="uint64"/>
+  <reg name="r15" bitsize="64" type="uint64"/>
+  <reg name="r16" bitsize="64" type="uint64"/>
+  <reg name="r17" bitsize="64" type="uint64"/>
+  <reg name="r18" bitsize="64" type="uint64"/>
+  <reg name="r19" bitsize="64" type="uint64"/>
+  <reg name="r20" bitsize="64" type="uint64"/>
+  <reg name="r21" bitsize="64" type="uint64"/>
+  <reg name="r22" bitsize="64" type="uint64"/>
+  <reg name="r23" bitsize="64" type="uint64"/>
+  <reg name="r24" bitsize="64" type="uint64"/>
+  <reg name="r25" bitsize="64" type="uint64"/>
+  <reg name="r26" bitsize="64" type="uint64"/>
+  <reg name="r27" bitsize="64" type="uint64"/>
+  <reg name="r28" bitsize="64" type="uint64"/>
+  <reg name="r29" bitsize="64" type="uint64"/>
+  <reg name="r30" bitsize="64" type="uint64"/>
+  <reg name="r31" bitsize="64" type="uint64"/>
+
+  <reg name="pc" bitsize="64" type="code_ptr" regnum="64"/>
+  <reg name="msr" bitsize="64" type="uint64"/>
+  <reg name="cr" bitsize="32" type="uint32"/>
+  <reg name="lr" bitsize="64" type="code_ptr"/>
+  <reg name="ctr" bitsize="64" type="uint64"/>
+  <reg name="xer" bitsize="32" type="uint32"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/power-core.xml gem5-SALAM/ext/gdb-xml/power-core.xml
--- gem5/ext/gdb-xml/power-core.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/power-core.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,49 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.power.core">
+  <reg name="r0" bitsize="32" type="uint32"/>
+  <reg name="r1" bitsize="32" type="uint32"/>
+  <reg name="r2" bitsize="32" type="uint32"/>
+  <reg name="r3" bitsize="32" type="uint32"/>
+  <reg name="r4" bitsize="32" type="uint32"/>
+  <reg name="r5" bitsize="32" type="uint32"/>
+  <reg name="r6" bitsize="32" type="uint32"/>
+  <reg name="r7" bitsize="32" type="uint32"/>
+  <reg name="r8" bitsize="32" type="uint32"/>
+  <reg name="r9" bitsize="32" type="uint32"/>
+  <reg name="r10" bitsize="32" type="uint32"/>
+  <reg name="r11" bitsize="32" type="uint32"/>
+  <reg name="r12" bitsize="32" type="uint32"/>
+  <reg name="r13" bitsize="32" type="uint32"/>
+  <reg name="r14" bitsize="32" type="uint32"/>
+  <reg name="r15" bitsize="32" type="uint32"/>
+  <reg name="r16" bitsize="32" type="uint32"/>
+  <reg name="r17" bitsize="32" type="uint32"/>
+  <reg name="r18" bitsize="32" type="uint32"/>
+  <reg name="r19" bitsize="32" type="uint32"/>
+  <reg name="r20" bitsize="32" type="uint32"/>
+  <reg name="r21" bitsize="32" type="uint32"/>
+  <reg name="r22" bitsize="32" type="uint32"/>
+  <reg name="r23" bitsize="32" type="uint32"/>
+  <reg name="r24" bitsize="32" type="uint32"/>
+  <reg name="r25" bitsize="32" type="uint32"/>
+  <reg name="r26" bitsize="32" type="uint32"/>
+  <reg name="r27" bitsize="32" type="uint32"/>
+  <reg name="r28" bitsize="32" type="uint32"/>
+  <reg name="r29" bitsize="32" type="uint32"/>
+  <reg name="r30" bitsize="32" type="uint32"/>
+  <reg name="r31" bitsize="32" type="uint32"/>
+
+  <reg name="pc" bitsize="32" type="code_ptr" regnum="64"/>
+  <reg name="msr" bitsize="32" type="uint32"/>
+  <reg name="cr" bitsize="32" type="uint32"/>
+  <reg name="lr" bitsize="32" type="code_ptr"/>
+  <reg name="ctr" bitsize="32" type="uint32"/>
+  <reg name="xer" bitsize="32" type="uint32"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/power-fpu.xml gem5-SALAM/ext/gdb-xml/power-fpu.xml
--- gem5/ext/gdb-xml/power-fpu.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/power-fpu.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,44 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.power.fpu">
+  <reg name="f0" bitsize="64" type="ieee_double" regnum="32"/>
+  <reg name="f1" bitsize="64" type="ieee_double"/>
+  <reg name="f2" bitsize="64" type="ieee_double"/>
+  <reg name="f3" bitsize="64" type="ieee_double"/>
+  <reg name="f4" bitsize="64" type="ieee_double"/>
+  <reg name="f5" bitsize="64" type="ieee_double"/>
+  <reg name="f6" bitsize="64" type="ieee_double"/>
+  <reg name="f7" bitsize="64" type="ieee_double"/>
+  <reg name="f8" bitsize="64" type="ieee_double"/>
+  <reg name="f9" bitsize="64" type="ieee_double"/>
+  <reg name="f10" bitsize="64" type="ieee_double"/>
+  <reg name="f11" bitsize="64" type="ieee_double"/>
+  <reg name="f12" bitsize="64" type="ieee_double"/>
+  <reg name="f13" bitsize="64" type="ieee_double"/>
+  <reg name="f14" bitsize="64" type="ieee_double"/>
+  <reg name="f15" bitsize="64" type="ieee_double"/>
+  <reg name="f16" bitsize="64" type="ieee_double"/>
+  <reg name="f17" bitsize="64" type="ieee_double"/>
+  <reg name="f18" bitsize="64" type="ieee_double"/>
+  <reg name="f19" bitsize="64" type="ieee_double"/>
+  <reg name="f20" bitsize="64" type="ieee_double"/>
+  <reg name="f21" bitsize="64" type="ieee_double"/>
+  <reg name="f22" bitsize="64" type="ieee_double"/>
+  <reg name="f23" bitsize="64" type="ieee_double"/>
+  <reg name="f24" bitsize="64" type="ieee_double"/>
+  <reg name="f25" bitsize="64" type="ieee_double"/>
+  <reg name="f26" bitsize="64" type="ieee_double"/>
+  <reg name="f27" bitsize="64" type="ieee_double"/>
+  <reg name="f28" bitsize="64" type="ieee_double"/>
+  <reg name="f29" bitsize="64" type="ieee_double"/>
+  <reg name="f30" bitsize="64" type="ieee_double"/>
+  <reg name="f31" bitsize="64" type="ieee_double"/>
+
+  <reg name="fpscr" bitsize="32" group="float" regnum="70"/>
+</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/powerpc-32.xml gem5-SALAM/ext/gdb-xml/powerpc-32.xml
--- gem5/ext/gdb-xml/powerpc-32.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/powerpc-32.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!-- PowerPC UISA - a PPC processor as viewed by user-level code.  A UISA-only
+     view of the PowerPC.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>powerpc:common</architecture>
+  <xi:include href="power-core.xml"/>
+  <xi:include href="power-fpu.xml"/>
+</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/powerpc-64.xml gem5-SALAM/ext/gdb-xml/powerpc-64.xml
--- gem5/ext/gdb-xml/powerpc-64.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/powerpc-64.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!-- PowerPC UISA - a PPC processor as viewed by user-level code.  A UISA-only
+     view of the PowerPC.  -->
+
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>powerpc:common64</architecture>
+  <xi:include href="power64-core.xml"/>
+  <xi:include href="power-fpu.xml"/>
+</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/riscv-64bit-cpu.xml gem5-SALAM/ext/gdb-xml/riscv-64bit-cpu.xml
--- gem5/ext/gdb-xml/riscv-64bit-cpu.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/riscv-64bit-cpu.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,48 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
+     Contributed by Huawei International
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!-- Register numbers are hard-coded in order to maintain backward
+     compatibility with older versions of tools that didn't use xml
+     register descriptions.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.riscv.cpu">
+  <reg name="zero" bitsize="64" type="int" regnum="0"/>
+  <reg name="ra" bitsize="64" type="code_ptr"/>
+  <reg name="sp" bitsize="64" type="data_ptr"/>
+  <reg name="gp" bitsize="64" type="data_ptr"/>
+  <reg name="tp" bitsize="64" type="data_ptr"/>
+  <reg name="t0" bitsize="64" type="int"/>
+  <reg name="t1" bitsize="64" type="int"/>
+  <reg name="t2" bitsize="64" type="int"/>
+  <reg name="fp" bitsize="64" type="data_ptr"/>
+  <reg name="s1" bitsize="64" type="int"/>
+  <reg name="a0" bitsize="64" type="int"/>
+  <reg name="a1" bitsize="64" type="int"/>
+  <reg name="a2" bitsize="64" type="int"/>
+  <reg name="a3" bitsize="64" type="int"/>
+  <reg name="a4" bitsize="64" type="int"/>
+  <reg name="a5" bitsize="64" type="int"/>
+  <reg name="a6" bitsize="64" type="int"/>
+  <reg name="a7" bitsize="64" type="int"/>
+  <reg name="s2" bitsize="64" type="int"/>
+  <reg name="s3" bitsize="64" type="int"/>
+  <reg name="s4" bitsize="64" type="int"/>
+  <reg name="s5" bitsize="64" type="int"/>
+  <reg name="s6" bitsize="64" type="int"/>
+  <reg name="s7" bitsize="64" type="int"/>
+  <reg name="s8" bitsize="64" type="int"/>
+  <reg name="s9" bitsize="64" type="int"/>
+  <reg name="s10" bitsize="64" type="int"/>
+  <reg name="s11" bitsize="64" type="int"/>
+  <reg name="t3" bitsize="64" type="int"/>
+  <reg name="t4" bitsize="64" type="int"/>
+  <reg name="t5" bitsize="64" type="int"/>
+  <reg name="t6" bitsize="64" type="int"/>
+  <reg name="pc" bitsize="64" type="code_ptr"/>
+</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/riscv-64bit-csr.xml gem5-SALAM/ext/gdb-xml/riscv-64bit-csr.xml
--- gem5/ext/gdb-xml/riscv-64bit-csr.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/riscv-64bit-csr.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,248 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
+     Contributed by Huawei International
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.riscv.csr">
+  <reg name="cycle" bitsize="64"/>
+  <reg name="time" bitsize="64"/>
+  <reg name="ustatus" bitsize="64"/>
+  <reg name="uie" bitsize="64"/>
+  <reg name="utvec" bitsize="64"/>
+  <reg name="uscratch" bitsize="64"/>
+  <reg name="uepc" bitsize="64"/>
+  <reg name="ucause" bitsize="64"/>
+  <reg name="utval" bitsize="64"/>
+  <reg name="uip" bitsize="64"/>
+  <reg name="sstatus" bitsize="64"/>
+  <reg name="sedeleg" bitsize="64"/>
+  <reg name="sideleg" bitsize="64"/>
+  <reg name="sie" bitsize="64"/>
+  <reg name="stvec" bitsize="64"/>
+  <reg name="scounteren" bitsize="64"/>
+  <reg name="sscratch" bitsize="64"/>
+  <reg name="sepc" bitsize="64"/>
+  <reg name="scause" bitsize="64"/>
+  <reg name="stval" bitsize="64"/>
+  <reg name="sip" bitsize="64"/>
+  <reg name="satp" bitsize="64"/>
+  <reg name="mvendorid" bitsize="64"/>
+  <reg name="marchid" bitsize="64"/>
+  <reg name="mimpid" bitsize="64"/>
+  <reg name="mhartid" bitsize="64"/>
+  <reg name="mstatus" bitsize="64"/>
+  <reg name="misa" bitsize="64"/>
+  <reg name="medeleg" bitsize="64"/>
+  <reg name="mideleg" bitsize="64"/>
+  <reg name="mie" bitsize="64"/>
+  <reg name="mtvec" bitsize="64"/>
+  <reg name="mcounteren" bitsize="64"/>
+  <reg name="mscratch" bitsize="64"/>
+  <reg name="mepc" bitsize="64"/>
+  <reg name="mcause" bitsize="64"/>
+  <reg name="mtval" bitsize="64"/>
+  <reg name="mip" bitsize="64"/>
+  <reg name="hstatus" bitsize="64"/>
+  <reg name="hedeleg" bitsize="64"/>
+  <reg name="hideleg" bitsize="64"/>
+  <reg name="hie" bitsize="64"/>
+  <reg name="htvec" bitsize="64"/>
+  <reg name="hscratch" bitsize="64"/>
+  <reg name="hepc" bitsize="64"/>
+  <reg name="hcause" bitsize="64"/>
+  <reg name="hbadaddr" bitsize="64"/>
+  <reg name="hip" bitsize="64"/>
+  <!-- <reg name="instret" bitsize="64"/>
+  <reg name="hpmcounter3" bitsize="64"/>
+  <reg name="hpmcounter4" bitsize="64"/>
+  <reg name="hpmcounter5" bitsize="64"/>
+  <reg name="hpmcounter6" bitsize="64"/>
+  <reg name="hpmcounter7" bitsize="64"/>
+  <reg name="hpmcounter8" bitsize="64"/>
+  <reg name="hpmcounter9" bitsize="64"/>
+  <reg name="hpmcounter10" bitsize="64"/>
+  <reg name="hpmcounter11" bitsize="64"/>
+  <reg name="hpmcounter12" bitsize="64"/>
+  <reg name="hpmcounter13" bitsize="64"/>
+  <reg name="hpmcounter14" bitsize="64"/>
+  <reg name="hpmcounter15" bitsize="64"/>
+  <reg name="hpmcounter16" bitsize="64"/>
+  <reg name="hpmcounter17" bitsize="64"/>
+  <reg name="hpmcounter18" bitsize="64"/>
+  <reg name="hpmcounter19" bitsize="64"/>
+  <reg name="hpmcounter20" bitsize="64"/>
+  <reg name="hpmcounter21" bitsize="64"/>
+  <reg name="hpmcounter22" bitsize="64"/>
+  <reg name="hpmcounter23" bitsize="64"/>
+  <reg name="hpmcounter24" bitsize="64"/>
+  <reg name="hpmcounter25" bitsize="64"/>
+  <reg name="hpmcounter26" bitsize="64"/>
+  <reg name="hpmcounter27" bitsize="64"/>
+  <reg name="hpmcounter28" bitsize="64"/>
+  <reg name="hpmcounter29" bitsize="64"/>
+  <reg name="hpmcounter30" bitsize="64"/>
+  <reg name="hpmcounter31" bitsize="64"/>
+  <reg name="cycleh" bitsize="64"/>
+  <reg name="timeh" bitsize="64"/>
+  <reg name="instreth" bitsize="64"/>
+  <reg name="hpmcounter3h" bitsize="64"/>
+  <reg name="hpmcounter4h" bitsize="64"/>
+  <reg name="hpmcounter5h" bitsize="64"/>
+  <reg name="hpmcounter6h" bitsize="64"/>
+  <reg name="hpmcounter7h" bitsize="64"/>
+  <reg name="hpmcounter8h" bitsize="64"/>
+  <reg name="hpmcounter9h" bitsize="64"/>
+  <reg name="hpmcounter10h" bitsize="64"/>
+  <reg name="hpmcounter11h" bitsize="64"/>
+  <reg name="hpmcounter12h" bitsize="64"/>
+  <reg name="hpmcounter13h" bitsize="64"/>
+  <reg name="hpmcounter14h" bitsize="64"/>
+  <reg name="hpmcounter15h" bitsize="64"/>
+  <reg name="hpmcounter16h" bitsize="64"/>
+  <reg name="hpmcounter17h" bitsize="64"/>
+  <reg name="hpmcounter18h" bitsize="64"/>
+  <reg name="hpmcounter19h" bitsize="64"/>
+  <reg name="hpmcounter20h" bitsize="64"/>
+  <reg name="hpmcounter21h" bitsize="64"/>
+  <reg name="hpmcounter22h" bitsize="64"/>
+  <reg name="hpmcounter23h" bitsize="64"/>
+  <reg name="hpmcounter24h" bitsize="64"/>
+  <reg name="hpmcounter25h" bitsize="64"/>
+  <reg name="hpmcounter26h" bitsize="64"/>
+  <reg name="hpmcounter27h" bitsize="64"/>
+  <reg name="hpmcounter28h" bitsize="64"/>
+  <reg name="hpmcounter29h" bitsize="64"/>
+  <reg name="hpmcounter30h" bitsize="64"/>
+  <reg name="hpmcounter31h" bitsize="64"/>
+  <reg name="pmpcfg0" bitsize="64"/>
+  <reg name="pmpcfg1" bitsize="64"/>
+  <reg name="pmpcfg2" bitsize="64"/>
+  <reg name="pmpcfg3" bitsize="64"/>
+  <reg name="pmpaddr0" bitsize="64"/>
+  <reg name="pmpaddr1" bitsize="64"/>
+  <reg name="pmpaddr2" bitsize="64"/>
+  <reg name="pmpaddr3" bitsize="64"/>
+  <reg name="pmpaddr4" bitsize="64"/>
+  <reg name="pmpaddr5" bitsize="64"/>
+  <reg name="pmpaddr6" bitsize="64"/>
+  <reg name="pmpaddr7" bitsize="64"/>
+  <reg name="pmpaddr8" bitsize="64"/>
+  <reg name="pmpaddr9" bitsize="64"/>
+  <reg name="pmpaddr10" bitsize="64"/>
+  <reg name="pmpaddr11" bitsize="64"/>
+  <reg name="pmpaddr12" bitsize="64"/>
+  <reg name="pmpaddr13" bitsize="64"/>
+  <reg name="pmpaddr14" bitsize="64"/>
+  <reg name="pmpaddr15" bitsize="64"/>
+  <reg name="mcycle" bitsize="64"/>
+  <reg name="minstret" bitsize="64"/>
+  <reg name="mhpmcounter3" bitsize="64"/>
+  <reg name="mhpmcounter4" bitsize="64"/>
+  <reg name="mhpmcounter5" bitsize="64"/>
+  <reg name="mhpmcounter6" bitsize="64"/>
+  <reg name="mhpmcounter7" bitsize="64"/>
+  <reg name="mhpmcounter8" bitsize="64"/>
+  <reg name="mhpmcounter9" bitsize="64"/>
+  <reg name="mhpmcounter10" bitsize="64"/>
+  <reg name="mhpmcounter11" bitsize="64"/>
+  <reg name="mhpmcounter12" bitsize="64"/>
+  <reg name="mhpmcounter13" bitsize="64"/>
+  <reg name="mhpmcounter14" bitsize="64"/>
+  <reg name="mhpmcounter15" bitsize="64"/>
+  <reg name="mhpmcounter16" bitsize="64"/>
+  <reg name="mhpmcounter17" bitsize="64"/>
+  <reg name="mhpmcounter18" bitsize="64"/>
+  <reg name="mhpmcounter19" bitsize="64"/>
+  <reg name="mhpmcounter20" bitsize="64"/>
+  <reg name="mhpmcounter21" bitsize="64"/>
+  <reg name="mhpmcounter22" bitsize="64"/>
+  <reg name="mhpmcounter23" bitsize="64"/>
+  <reg name="mhpmcounter24" bitsize="64"/>
+  <reg name="mhpmcounter25" bitsize="64"/>
+  <reg name="mhpmcounter26" bitsize="64"/>
+  <reg name="mhpmcounter27" bitsize="64"/>
+  <reg name="mhpmcounter28" bitsize="64"/>
+  <reg name="mhpmcounter29" bitsize="64"/>
+  <reg name="mhpmcounter30" bitsize="64"/>
+  <reg name="mhpmcounter31" bitsize="64"/>
+  <reg name="mcycleh" bitsize="64"/>
+  <reg name="minstreth" bitsize="64"/>
+  <reg name="mhpmcounter3h" bitsize="64"/>
+  <reg name="mhpmcounter4h" bitsize="64"/>
+  <reg name="mhpmcounter5h" bitsize="64"/>
+  <reg name="mhpmcounter6h" bitsize="64"/>
+  <reg name="mhpmcounter7h" bitsize="64"/>
+  <reg name="mhpmcounter8h" bitsize="64"/>
+  <reg name="mhpmcounter9h" bitsize="64"/>
+  <reg name="mhpmcounter10h" bitsize="64"/>
+  <reg name="mhpmcounter11h" bitsize="64"/>
+  <reg name="mhpmcounter12h" bitsize="64"/>
+  <reg name="mhpmcounter13h" bitsize="64"/>
+  <reg name="mhpmcounter14h" bitsize="64"/>
+  <reg name="mhpmcounter15h" bitsize="64"/>
+  <reg name="mhpmcounter16h" bitsize="64"/>
+  <reg name="mhpmcounter17h" bitsize="64"/>
+  <reg name="mhpmcounter18h" bitsize="64"/>
+  <reg name="mhpmcounter19h" bitsize="64"/>
+  <reg name="mhpmcounter20h" bitsize="64"/>
+  <reg name="mhpmcounter21h" bitsize="64"/>
+  <reg name="mhpmcounter22h" bitsize="64"/>
+  <reg name="mhpmcounter23h" bitsize="64"/>
+  <reg name="mhpmcounter24h" bitsize="64"/>
+  <reg name="mhpmcounter25h" bitsize="64"/>
+  <reg name="mhpmcounter26h" bitsize="64"/>
+  <reg name="mhpmcounter27h" bitsize="64"/>
+  <reg name="mhpmcounter28h" bitsize="64"/>
+  <reg name="mhpmcounter29h" bitsize="64"/>
+  <reg name="mhpmcounter30h" bitsize="64"/>
+  <reg name="mhpmcounter31h" bitsize="64"/>
+  <reg name="mhpmevent3" bitsize="64"/>
+  <reg name="mhpmevent4" bitsize="64"/>
+  <reg name="mhpmevent5" bitsize="64"/>
+  <reg name="mhpmevent6" bitsize="64"/>
+  <reg name="mhpmevent7" bitsize="64"/>
+  <reg name="mhpmevent8" bitsize="64"/>
+  <reg name="mhpmevent9" bitsize="64"/>
+  <reg name="mhpmevent10" bitsize="64"/>
+  <reg name="mhpmevent11" bitsize="64"/>
+  <reg name="mhpmevent12" bitsize="64"/>
+  <reg name="mhpmevent13" bitsize="64"/>
+  <reg name="mhpmevent14" bitsize="64"/>
+  <reg name="mhpmevent15" bitsize="64"/>
+  <reg name="mhpmevent16" bitsize="64"/>
+  <reg name="mhpmevent17" bitsize="64"/>
+  <reg name="mhpmevent18" bitsize="64"/>
+  <reg name="mhpmevent19" bitsize="64"/>
+  <reg name="mhpmevent20" bitsize="64"/>
+  <reg name="mhpmevent21" bitsize="64"/>
+  <reg name="mhpmevent22" bitsize="64"/>
+  <reg name="mhpmevent23" bitsize="64"/>
+  <reg name="mhpmevent24" bitsize="64"/>
+  <reg name="mhpmevent25" bitsize="64"/>
+  <reg name="mhpmevent26" bitsize="64"/>
+  <reg name="mhpmevent27" bitsize="64"/>
+  <reg name="mhpmevent28" bitsize="64"/>
+  <reg name="mhpmevent29" bitsize="64"/>
+  <reg name="mhpmevent30" bitsize="64"/>
+  <reg name="mhpmevent31" bitsize="64"/>
+  <reg name="tselect" bitsize="64"/>
+  <reg name="tdata1" bitsize="64"/>
+  <reg name="tdata2" bitsize="64"/>
+  <reg name="tdata3" bitsize="64"/>
+  <reg name="dcsr" bitsize="64"/>
+  <reg name="dpc" bitsize="64"/>
+  <reg name="dscratch" bitsize="64"/>
+  <reg name="mbase" bitsize="64"/>
+  <reg name="mbound" bitsize="64"/>
+  <reg name="mibase" bitsize="64"/>
+  <reg name="mibound" bitsize="64"/>
+  <reg name="mdbase" bitsize="64"/>
+  <reg name="mdbound" bitsize="64"/>
+  <reg name="mucounteren" bitsize="64"/>
+  <reg name="mscounteren" bitsize="64"/>
+  <reg name="mhcounteren" bitsize="64"/> -->
+</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/riscv-64bit-fpu.xml gem5-SALAM/ext/gdb-xml/riscv-64bit-fpu.xml
--- gem5/ext/gdb-xml/riscv-64bit-fpu.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/riscv-64bit-fpu.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,58 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
+     Contributed by Huawei International
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!-- Register numbers are hard-coded in order to maintain backward
+     compatibility with older versions of tools that didn't use xml
+     register descriptions.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.riscv.fpu">
+
+  <union id="riscv_double">
+    <field name="float" type="ieee_single"/>
+    <field name="double" type="ieee_double"/>
+  </union>
+
+  <reg name="ft0" bitsize="64" type="riscv_double" regnum="33"/>
+  <reg name="ft1" bitsize="64" type="riscv_double"/>
+  <reg name="ft2" bitsize="64" type="riscv_double"/>
+  <reg name="ft3" bitsize="64" type="riscv_double"/>
+  <reg name="ft4" bitsize="64" type="riscv_double"/>
+  <reg name="ft5" bitsize="64" type="riscv_double"/>
+  <reg name="ft6" bitsize="64" type="riscv_double"/>
+  <reg name="ft7" bitsize="64" type="riscv_double"/>
+  <reg name="fs0" bitsize="64" type="riscv_double"/>
+  <reg name="fs1" bitsize="64" type="riscv_double"/>
+  <reg name="fa0" bitsize="64" type="riscv_double"/>
+  <reg name="fa1" bitsize="64" type="riscv_double"/>
+  <reg name="fa2" bitsize="64" type="riscv_double"/>
+  <reg name="fa3" bitsize="64" type="riscv_double"/>
+  <reg name="fa4" bitsize="64" type="riscv_double"/>
+  <reg name="fa5" bitsize="64" type="riscv_double"/>
+  <reg name="fa6" bitsize="64" type="riscv_double"/>
+  <reg name="fa7" bitsize="64" type="riscv_double"/>
+  <reg name="fs2" bitsize="64" type="riscv_double"/>
+  <reg name="fs3" bitsize="64" type="riscv_double"/>
+  <reg name="fs4" bitsize="64" type="riscv_double"/>
+  <reg name="fs5" bitsize="64" type="riscv_double"/>
+  <reg name="fs6" bitsize="64" type="riscv_double"/>
+  <reg name="fs7" bitsize="64" type="riscv_double"/>
+  <reg name="fs8" bitsize="64" type="riscv_double"/>
+  <reg name="fs9" bitsize="64" type="riscv_double"/>
+  <reg name="fs10" bitsize="64" type="riscv_double"/>
+  <reg name="fs11" bitsize="64" type="riscv_double"/>
+  <reg name="ft8" bitsize="64" type="riscv_double"/>
+  <reg name="ft9" bitsize="64" type="riscv_double"/>
+  <reg name="ft10" bitsize="64" type="riscv_double"/>
+  <reg name="ft11" bitsize="64" type="riscv_double"/>
+
+  <reg name="fflags" bitsize="32" type="int" regnum="66"/>
+  <reg name="frm" bitsize="32" type="int" regnum="67"/>
+  <reg name="fcsr" bitsize="32" type="int" regnum="68"/>
+  <reg name="placeholder" bitsize="32" type="int" regnum="69"/>
+</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/gdb-xml/riscv.xml gem5-SALAM/ext/gdb-xml/riscv.xml
--- gem5/ext/gdb-xml/riscv.xml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/gdb-xml/riscv.xml	2024-02-22 18:17:14.876943305 -0600
@@ -0,0 +1,13 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2009-2013 Free Software Foundation, Inc.
+     Contributed by Huawei International
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+<!DOCTYPE target SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>riscv</architecture>
+  <xi:include href="riscv-64bit-cpu.xml"/>
+  <xi:include href="riscv-64bit-fpu.xml"/>
+  <xi:include href="riscv-64bit-csr.xml"/>
+</target>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/googletest/SConscript gem5-SALAM/ext/googletest/SConscript
--- gem5/ext/googletest/SConscript	2024-02-22 18:25:43.423603628 -0600
+++ gem5-SALAM/ext/googletest/SConscript	2024-02-22 18:17:14.876943305 -0600
@@ -43,8 +43,9 @@
 main.Append(CPPPATH=[gtest_include, gmock_include])
 main.Append(LIBPATH=[build])
 
-env = main.Clone(CCFLAGS=['-g', '-pthread', '-Wno-undef', '-isystem',
-                          str(gtest_include), '-isystem', str(gmock_include)])
+env = main.Clone(CPPFLAGS=['-g', '-Wall', '-Wextra', '-pthread',
+                           '-Wno-undef', '-isystem', str(gtest_include),
+                           '-isystem', str(gmock_include)])
 env.Append(CPPPATH=[gtest_base, gmock_base])
 
 gtest_all = env.Object(gtest_src.File('gtest-all.cc'))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/libelf/SConscript gem5-SALAM/ext/libelf/SConscript
--- gem5/ext/libelf/SConscript	2024-02-22 18:25:43.487603962 -0600
+++ gem5-SALAM/ext/libelf/SConscript	2024-02-22 18:17:14.896943410 -0600
@@ -116,9 +116,6 @@
          "Please install M4 and try again.")
    Exit(1)
 
-# Setup m4 tool
-m4env.Tool('m4')
-
 m4env.Append(M4FLAGS=['-DSRCDIR=%s' % Dir('.').path])
 m4env['M4COM'] = '$M4 $M4FLAGS $SOURCES > $TARGET'
 m4env.M4(target=File('libelf_convert.c'),
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/llvm/SConscript gem5-SALAM/ext/llvm/SConscript
--- gem5/ext/llvm/SConscript	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/llvm/SConscript	2024-02-22 18:17:14.900943431 -0600
@@ -0,0 +1,22 @@
+import os
+import subprocess
+
+Import('main')
+
+# Use llvm-config to find includes and libraries needed for the build
+llvm_include = subprocess.check_output(['llvm-config', '--includedir']).decode()
+llvm_include = Dir(llvm_include.replace("\n", ""))
+llvm_libdir = subprocess.check_output(['llvm-config', '--libdir']).decode()
+llvm_libdir = Dir(llvm_libdir.replace("\n", ""))
+llvm_libs = subprocess.check_output(['llvm-config', '--libs']).decode()
+llvm_libs = llvm_libs.replace("-l", "")
+llvm_libs = llvm_libs.replace("\n", "")
+llvm_libs = llvm_libs.split(' ')
+
+main.Append(CPPPATH=[llvm_include])
+main.Append(LIBPATH=[llvm_libdir])
+# main.Append(LIBS=['LLVM'])
+for lib in llvm_libs:
+	main.Append(LIBS=[lib])
+# -ltinfo needed for llvm
+# main.Append(LIBS=['tinfo'])
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/mcpat/cacti/cache.cfg gem5-SALAM/ext/mcpat/cacti/cache.cfg
--- gem5/ext/mcpat/cacti/cache.cfg	2024-02-22 18:16:36.320741733 -0600
+++ gem5-SALAM/ext/mcpat/cacti/cache.cfg	2024-02-22 18:17:14.904943452 -0600
@@ -21,8 +21,10 @@
 //-associativity 0
 //-associativity 2
 //-associativity 4
--associativity 8
+//-associativity 8
 //-associativity 16
+-associativity 1
+
 
 -read-write port 1
 -exclusive read port 0
@@ -31,8 +33,8 @@
 
 # Multiple banks connected using a bus
 -UCA bank count 1
--technology (u) 0.022
-//-technology (u) 0.040
+//-technology (u) 0.022
+-technology (u) 0.040
 //-technology (u) 0.032
 //-technology (u) 0.090
 
@@ -71,8 +73,8 @@
 
 # Type of memory - cache (with a tag array) or ram (scratch ram similar to a register file) 
 # or main memory (no tag array and every access will happen at a page granularity Ref: CACTI 5.3 report)
--cache type "cache"
-//-cache type "ram"
+//cache type "cache"
+-cache type "ram"
 //-cache type "main memory"
 
 # to model special structure like branch target buffers, directory, etc. 
@@ -86,8 +88,8 @@
 # normal - data array lookup and tag access happen in parallel
 #          final data block is broadcasted in data array h-tree 
 #          after getting the signal from the tag array
-//-access mode (normal, sequential, fast) - "fast"
--access mode (normal, sequential, fast) - "normal"
+-access mode (normal, sequential, fast) - "fast"
+//access mode (normal, sequential, fast) - "normal"
 //-access mode (normal, sequential, fast) - "sequential"
 
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/mcpat/cacti/.gitignore gem5-SALAM/ext/mcpat/cacti/.gitignore
--- gem5/ext/mcpat/cacti/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/ext/mcpat/cacti/.gitignore	2024-02-22 18:17:14.904943452 -0600
@@ -0,0 +1,4 @@
+obj_opt/*
+out.csv
+cacti
+cache.cfg
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/pybind11/tests/requirements.txt gem5-SALAM/ext/pybind11/tests/requirements.txt
--- gem5/ext/pybind11/tests/requirements.txt	2024-02-22 18:25:43.531604193 -0600
+++ gem5-SALAM/ext/pybind11/tests/requirements.txt	2024-02-22 18:17:14.924943556 -0600
@@ -1,6 +1,6 @@
 --extra-index-url https://antocuni.github.io/pypy-wheels/manylinux2010/
 numpy==1.16.6; python_version<"3.6" and sys_platform!="win32"
-numpy==1.18.0; platform_python_implementation=="PyPy" and sys_platform=="darwin" and python_version>="3.6"
+numpy==1.22.0; platform_python_implementation=="PyPy" and sys_platform=="darwin" and python_version>="3.6"
 numpy==1.19.3; (platform_python_implementation!="PyPy" or sys_platform=="linux") and python_version>="3.6" and python_version<"3.10"
 pytest==4.6.9; python_version<"3.5"
 pytest==6.1.2; python_version=="3.5"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/ext/testlib/configuration.py gem5-SALAM/ext/testlib/configuration.py
--- gem5/ext/testlib/configuration.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/ext/testlib/configuration.py	2024-02-22 18:17:14.968943786 -0600
@@ -213,7 +213,7 @@
                                                       os.pardir,
                                                       os.pardir))
     defaults.result_path = os.path.join(os.getcwd(), 'testing-results')
-    defaults.resource_url = 'http://dist.gem5.org/dist/develop'
+    defaults.resource_url = 'http://dist.gem5.org/dist/v21-1'
     defaults.resource_path = os.path.abspath(os.path.join(defaults.base_dir,
                                             'tests',
                                             'gem5',
@@ -248,7 +248,6 @@
     constants.length_tag_type = 'length'
     constants.quick_tag = 'quick'
     constants.long_tag = 'long'
-    constants.very_long_tag = 'very-long'
 
     constants.host_isa_tag_type = 'host'
     constants.host_x86_64_tag = 'x86_64'
@@ -273,7 +272,6 @@
         constants.length_tag_type: (
             constants.quick_tag,
             constants.long_tag,
-            constants.very_long_tag,
         ),
         constants.host_isa_tag_type: (
             constants.host_x86_64_tag,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/.git-blame-ignore-revs gem5-SALAM/.git-blame-ignore-revs
--- gem5/.git-blame-ignore-revs	2024-02-22 18:25:43.383603419 -0600
+++ gem5-SALAM/.git-blame-ignore-revs	1969-12-31 18:00:00.000000000 -0600
@@ -1,24 +0,0 @@
-b2c0b191e1af24d308b3e33502606dc3d08d2e41
-7f1de4e686eba3734a5188587c242b6e8efc2e0b
-7ac67eaf1b01ae8d0d8ebfc83e9fd4e15a7ffaf5
-2922f763e11d2cfb60d4d403ba649d631829f4c8
-469f0671d1e23ce82172cb2aff96771e1bfac308
-122ff006c3c23ca48af84555e622fc1c8cfd257d
-c8836142807e512beff11e16fbe4cc734c27d66d
-88a2a18c1c41a12ac5d6b16d554e7301f9d2e27b
-5a23207ee90033df176c4efcc1491db91ce01970
-086cc6c89352a80ca300c2325f5c7bdc5caa6300
-ee0fdc948a4d985c345e6b9c107f4ca27b4f5539
-bfff0c40df3a198aeef4fd5b0ca5e0b49904e208
-e5c8f03b21a906c3413d0236f9154690d48741a4
-be7043f079c9dceb4e8d64fd95daca95ae305937
-cc0d4a8fd633467952ca7e2c1adcd4ffe508770f
-a607c250d961b45363b3f3a7c25f37a00c863d17
-8fceff60c415748f20fe513dfff97fe3a4118d5b
-fff5b8e7451177322edfe2683313b199a0bdc4da
-32020236cf9e3c296ebb694f09a765d3b3c2639d
-c0f4489220ce2f477e17f8552119f56060d42cd0
-ecd1e05f5725832c2d5dfdc53f4c4100bf763284
-c3bd8eb1214cbebbc92c7958b80aa06913bce3ba
-488ded0c8d9e43deef531ad174937982b41f8e4b
-26e888965d08486aeed7ebb3ef934ceb1a38cd6f
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/.gitignore gem5-SALAM/.gitignore
--- gem5/.gitignore	2024-02-22 18:25:43.383603419 -0600
+++ gem5-SALAM/.gitignore	2024-02-22 18:17:14.816942992 -0600
@@ -1,4 +1,5 @@
 build
+build-
 parser.out
 parsetab.py
 cscope.files
@@ -8,7 +9,9 @@
 .*.swp
 .*.swo
 m5out
-/src/doxygen/html
+/src/doxygen
+/src/hwacc/llvm
+/src/hwacc/llvm-c
 /ext/dramsim2/DRAMSim2
 /ext/mcpat/regression/*/*.out
 /util/m5/*.o
@@ -21,13 +24,17 @@
 /util/term/m5term
 /system/arm/dt/*.dtb
 /system/arm/dt/.gen
-/system/arm/bootloader/arm/*.o
-/system/arm/bootloader/arm/boot.arm
-/system/arm/bootloader/arm/boot_emm.arm
-/system/arm/bootloader/arm64/*.o
-/system/arm/bootloader/arm64/boot.arm64
-/system/arm/bootloader/arm64/boot_emm.arm64
-/system/arm/bootloader/arm64/boot_v2.arm64
-configs/example/memcheck.cfg
-configs/dram/lowp_sweep.cfg
-.pyenv
+/system/arm/simple_bootloader/*.o
+/system/arm/simple_bootloader/boot.arm
+/system/arm/simple_bootloader/boot_emm.arm
+/system/arm/aarch64_bootloader/*.o
+/system/arm/aarch64_bootloader/boot_emm.arm64
+/system/arm/aarch64_bootloader/boot_emm_v2.arm64
+old-code
+llvm
+llvm-9
+llvm-c
+BM_ARM_OUT
+.gdb_history
+.vscode
+build.sh
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/.hgignore gem5-SALAM/.hgignore
--- gem5/.hgignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/.hgignore	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,17 @@
+syntax: glob
+build
+parser.out
+parsetab.py
+cscope.files
+cscope.out
+*.pyc
+*~
+.*.swp
+m5out
+src/doxygen
+ext/dramsim2/DRAMSim2
+ext/mcpat/regression/*/*.out
+util/m5/*.o
+util/m5/*.a
+util/m5/m5
+system/arm/dt/*.dtb
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/.hgtags gem5-SALAM/.hgtags
--- gem5/.hgtags	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/.hgtags	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,30 @@
+6b99127531fd692ff0f202e327d0826ed2bfcf5f m5_1.0_beta1
+1a40e60270c11ec24f11c783e70367e2740cdc56 m5_1.0_beta1
+069849384988e553b6edae71ecaf1fb6e918d738 m5_1.0_beta2
+4cfa92eca35d532b339507f1c631e1986d87b258 m5_1.0_tutorial
+ffe1942d845c67fb3fd04692420c9433638eba13 m5_1.0_web
+af8bf5e4e85ba1a773183cc3f6c43bcdf0ce146a m5_1.1
+1c0eeb0dae9b6a2a5479faf3ab52fb1ed0ce703f m5_1.1
+c486924ed90eb6805e8cf44ddee5ad5435c79051 m5_1.1
+01e679b66ca9474f10f8f96d391693adf76fc73a m5_1.1
+2608cd7def85c9fdc84251295c8023fab990d530 m5_1.1
+cdd48642d9bf584bd445b40abec9e7f934a5900b m5_1.1
+8d690c7c2efced99f7991b7ace56d769bae7cfdd m5_2.0_beta1
+d83885ad2b41777c97b94882aa8f07e761e55ac1 m5_2.0_beta1_patch1
+1906dcace7c27b2153bfb95ca1218660e1cc1f70 m5_2.0_beta2
+b174ae14f007ba0c341f8df77d36f57f48369cc8 m5_2.0_beta2
+91a9ac67662aa3a79315ade29b17a85961fecd88 m5_2.0_beta3
+dce5a8655829b7d2e24ce40cafc9c8873a71671f m5_2.0_beta5
+1ac44b6c87ec71a8410c9a9c219269eca71f8077 m5_2.0_beta4
+60a931b03fb165807f02bcccc4f7d0fd705a67a9 copyright_update
+d8b246a665c160a31751b4091f097022cde16dd7 m5_2.0_beta6
+5de565c4b7bdf46670611858b709c1eb50ad7c5c Calvin_Submission
+549b72de8f725bd411a9c73ee0d15ccbdf47bb0f stable_2012_02_02
+f75ee4849c404a0c7d93413f443cec640b721f2f stable_2012_06_28
+07352f119e489452b3c0bbf6d4f70e21e80e17e3 stable_2013_06_16
+6a043adb1e8d67fbb03ac5cee58dd26f75663714 stable_2013_10_14
+459491344fcf7f9e29250e71f33a7c7150f54d64 stable_2014_02_15
+cb2e6950956d475da97b04c41f19769ce2e8541a stable_2014_08_26
+bdb307e8be54a5808a9af2537e9261d88de6ed1b stable_2014_12_14
+e1794974515011f81f8d0fda7543ba3360a12c9b stable_2015_04_15
+60eb3fef9c2d51cf98cdb5501ee0c4ac0efe6eae stable_2015_09_03
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/LICENSE gem5-SALAM/LICENSE
--- gem5/LICENSE	2024-02-22 18:16:36.244741335 -0600
+++ gem5-SALAM/LICENSE	2024-02-22 18:17:14.816942992 -0600
@@ -22,4 +22,4 @@
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/.mailmap gem5-SALAM/.mailmap
--- gem5/.mailmap	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/.mailmap	1969-12-31 18:00:00.000000000 -0600
@@ -1,334 +0,0 @@
-ARM gem5 Developers <none@none>
-Abdul Mutaal Ahmad <abdul.mutaal@gmail.com>
-Adrian Herrera <adrian.herrera@arm.com>
-Adrien Pesle <adrien.pesle@arm.com>
-Adrià Armejach <adria.armejach@bsc.es> Adrià Armejach <adria.armejach@gmail.com>
-Akash Bagdia <akash.bagdia@ARM.com> Akash Bagdia <akash.bagdia@arm.com>
-Alec Roelke <alec.roelke@gmail.com> Alec Roelke <ar4jc@virginia.edu>
-Alexandru Dutu <alexandru.dutu@amd.com> Alexandru <alexandru.dutu@amd.com>
-Ali Jafri <ali.jafri@arm.com>
-Ali Saidi <Ali.Saidi@arm.com> Ali Saidi <Ali.Saidi@ARM.com>
-Ali Saidi <Ali.Saidi@arm.com> Ali Saidi <ali.saidi@arm.com>
-Ali Saidi <Ali.Saidi@arm.com> Ali Saidi <saidi@eecs.umich.edu>
-Amin Farmahini <aminfar@gmail.com>
-Anders Handler <s052838@student.dtu.dk>
-Andrea Mondelli <andrea.mondelli@ucf.edu> Andrea Mondelli <Andrea.Mondelli@ucf.edu>
-Andrea Pellegrini <andrea.pellegrini@gmail.com>
-Andreas Hansson <andreas.hanson@arm.com> Andreas Hansson <Andreas.Hansson@ARM.com>
-Andreas Hansson <andreas.hanson@arm.com> Andreas Hansson <andreas.hansson>
-Andreas Hansson <andreas.hanson@arm.com> Andreas Hansson <andreas.hansson@arm.com>
-Andreas Hansson <andreas.hanson@arm.com> Andreas Hansson <andreas.hansson@armm.com>
-Andreas Sandberg <Andreas.Sandberg@arm.com> Andreas Sandberg <Andreas.Sandberg@ARM.com>
-Andreas Sandberg <Andreas.Sandberg@arm.com> Andreas Sandberg <andreas.sandberg@arm.com>
-Andreas Sandberg <Andreas.Sandberg@arm.com> Andreas Sandberg <andreas@sandberg.pp.se>
-Andrew Bardsley <Andrew.Bardsley@arm.com> Andrew Bardsley <Andreas.Bardsley@arm.com>
-Andrew Lukefahr <lukefahr@umich.edu>
-Andrew Schultz <alschult@umich.edu>
-Andriani Mappoura <andriani.mappoura@arm.com>
-Ani Udipi <ani.udipi@arm.com>
-Anis Peysieux <anis.peysieux@inria.fr>
-Anouk Van Laer <anouk.vanlaer@arm.com>
-Arthur Perais <arthur.perais@inria.fr>
-Ashkan Tousi <ashkan.tousimojarad@arm.com>
-Austin Harris <austinharris@utexas.edu>
-Richard D. Strong <r.d.strong@gmail.com>
-Avishai Tvila <avishai.tvila@gmail.com>
-Ayaz Akram <yazakram@ucdavis.edu>
-Bagus Hanindhito <hanindhito@bagus.my.id>
-Benjamin Nash <benash@umich.edu>
-Bertrand Marquis <bertrand.marquis@arm.com>
-Binh Pham <binhpham@cs.rutgers.edu>
-Bjoern A. Zeeb <baz21@cam.ac.uk>
-Blake Hechtman <bah13@duke.edu> Blake Hechtman <blake.hechtman@amd.com>
-Blake Hechtman <bah13@duke.edu> Blake Hechtman ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <bah13@duke.edu>
-Bobby R. Bruce <bbruce@ucdavis.edu>
-Boris Shingarov <shingarov@gmail.com> Boris Shingarov <shingarov@labware.com>
-Brad Beckmann <brad.beckmann@amd.com> Brad Beckmann <Brad.Beckmann@amd.com>
-Brad Beckmann <brad.beckmann@amd.com> Brad Beckmann ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <Brad.Beckmann@amd.com>
-Brad Danofsky <bradley.danofsky@amd.com>
-Bradley Wang <radwang@ucdavis.edu> Bradley <animalvgamer@gmail.com>
-Brandon Potter <brandon.potter@amd.com> bpotter <brandon.potter@amd.com>
-Brandon Potter <brandon.potter@amd.com> Brandon Potter <Brandon.Potter@amd.com>
-Brandon Potter <brandon.potter@amd.com> BKP <brandon.potter@amd.com>
-Brian Grayson <b.grayson@samsung.com>
-Cagdas Dirik <cdirik@micron.com> cdirik <cdirik@micron.com>
-Chander Sudanthi <chander.sudanthi@arm.com> Chander Sudanthi <Chander.Sudanthi@arm.com>
-Chander Sudanthi <chander.sudanthi@arm.com> Chander Sudanthi <Chander.Sudanthi@ARM.com>
-Chen Zou <chenzou@uchicago.edu>
-Chris Adeniyi-Jones <Chris.Adeniyi-Jones@arm.com>
-Chris Emmons <chris.emmons@arm.com> Chris Emmons <Chris.Emmons@ARM.com>
-Chris Emmons <chris.emmons@arm.com> Chris Emmons <Chris.Emmons@arm.com>
-Christian Menard <christian.menard@tu-dresden.de> Christian Menard <Christian.Menard@tu-dresden.de>
-Christoph Pfister <pfistchr@student.ethz.ch>
-Christopher Torng <clt67@cornell.edu>
-Chuan Zhu <chuan.zhu@arm.com>
-Chun-Chen Hsu <chunchenhsu@google.com> Chun-Chen TK Hsu <chunchenhsu@google.com>
-Ciro Santilli <ciro.santilli@arm.com>
-Clint Smullen <cws3k@cs.virginia.edu>
-Curtis Dunham <Curtis.Dunham@arm.com>
-Dam Sunwoo <dam.sunwoo@arm.com>
-Dan Gibson <gibson@cs.wisc.edu>
-Daniel Carvalho <odanrc@yahoo.com.br> Daniel <odanrc@yahoo.com.br>
-Daniel Carvalho <odanrc@yahoo.com.br> Daniel R. Carvalho <odanrc@yahoo.com.br>
-Daniel Johnson <daniel.johnson@arm.com>
-Daniel Sanchez <sanchezd@stanford.edu>
-David Guillen-Fandos <david.guillen@arm.com> David Guillen <david.guillen@arm.com>
-David Guillen-Fandos <david.guillen@arm.com> David Guillen Fandos <david.guillen@arm.com>
-David Hashe <david.hashe@amd.com> David Hashe <david.j.hashe@gmail.com>
-David Oehmke <doehmke@umich.edu>
-Derek Hower <drh5@cs.wisc.edu>
-Deyaun Guo <guodeyuan@tsinghua.org.cn> Deyuan Guo <guodeyuan@tsinghua.org.cn>
-Deyaun Guo <guodeyuan@tsinghua.org.cn> Deyuan Guo ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <guodeyuan@tsinghua.org.cn>
-Dibakar Gope <gope@wisc.edu> Dibakar Gope ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <gope@wisc.edu>
-Djordje Kovacevic <djordje.kovacevic@arm.com> Djordje Kovacevic <Djordje.Kovacevic@arm.com>
-Dongxue Zhang <elta.era@gmail.com>
-Doğukan Korkmaztürk <d.korkmazturk@gmail.com>
-Dylan Johnson <Dylan.Johnson@ARM.com>
-Earl Ou <shunhsingou@google.com>
-Edmund Grimley Evans <Edmund.Grimley-Evans@arm.com>
-Emilio Castillo <castilloe@unican.es> Emilio Castillo <ecastill@bsc.es>
-Emilio Castillo <castilloe@unican.es> Emilio Castillo ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <castilloe@unican.es>
-Erfan Azarkhish <erfan.azarkhish@unibo.it>
-Eric Van Hensbergen <eric.vanhensbergen@arm.com> Eric Van Hensbergen <Eric.VanHensbergen@ARM.com>
-Erik Hallnor <ehallnor@umich.edu>
-Erik Tomusk <E.Tomusk@sms.ed.ac.uk>
-Faissal Sleiman <Faissal.Sleiman@arm.com> Faissal Sleiman <sleimanf@umich.edu>
-Fernando Endo <fernando.endo2@gmail.com>
-Gabe Black <gabe.black@gmail.com> Gabe Black <gabeblack@google.com>
-Gabe Black <gabe.black@gmail.com> Gabe Black <gblack@eecs.umich.edu>
-Gabor Dozsa <gabor.dozsa@arm.com>
-Gedare Bloom <gedare@rtems.org> Gedare Bloom <gedare@gwmail.gwu.edu>
-Gene Wu <gene.wu@arm.com> Gene WU <gene.wu@arm.com>
-Gene WU <gene.wu@arm.com> Gene Wu <Gene.Wu@arm.com>
-Geoffrey Blake <geoffrey.blake@arm.com> Geoffrey Blake <Geoffrey.Blake@arm.com>
-Geoffrey Blake <geoffrey.blake@arm.com> Geoffrey Blake <blakeg@umich.edu>
-Georg Kotheimer <georg.kotheimer@mailbox.tu-dresden.de>
-Giacomo Gabrielli <giacomo.gabrielli@arm.com> Giacomo Gabrielli <Giacomo.Gabrielli@arm.com>
-Giacomo Travaglini <giacomo.travaglini@arm.com>
-Glenn Bergmans <glenn.bergmans@arm.com>
-Hamid Reza Khaleghzadeh <khaleghzadeh@gmail.com> Hamid Reza Khaleghzadeh ext:(%2C%20Lluc%20Alvarez%20%3Clluc.alvarez%40bsc.es%3E%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <khaleghzadeh@gmail.com>
-Hanhwi Jang <jang.hanhwi@gmail.com>
-Hoa Nguyen <hoanguyen@ucdavis.edu>
-Hongil Yoon <ongal@cs.wisc.edu>
-Hsuan Hsu <hsuan.hsu@mediatek.com>
-Hussein Elnawawy <hussein.elnawawy@gmail.com>
-Ian Jiang <ianjiang.ict@gmail.com>
-IanJiangICT <ianjiang.ict@gmail.com>
-Ilias Vougioukas <Ilias.Vougioukas@ARM.com>
-Isaac Richter <isaac.richter@rochester.edu>
-Isaac Sánchez Barrera <isaac.sanchez@bsc.es>
-Ivan Pizarro <ivan.pizarro@metempsy.com>
-Jack Whitham <jack-m5ml2@cs.york.ac.uk> Jack Whitman <jack-m5ml2@cs.york.ac.uk>
-Jairo Balart <jairo.balart@metempsy.com>
-Jakub Jermar <jakub@jermar.eu>
-James Clarkson <james.clarkson@arm.com>
-Jan-Peter Larsson <jan-peter.larsson@arm.com>
-Jason Lowe-Power <jason@lowepower.com> Jason Lowe-Power <power.jg@gmail.com>
-Jason Lowe-Power <jason@lowepower.com> Jason Lowe-Power <powerjg@cs.wisc.edu>
-Jason Lowe-Power <jason@lowepower.com> Jason Power <power.jg@gmail.com>
-Jason Lowe-Power <jason@lowepower.com> Jason Power <powerjg@cs.wisc.edu>
-Jason Lowe-Power <jason@lowepower.com> Jason Power ext:(%2C%20Joel%20Hestness%20%3Chestness%40cs.wisc.edu%3E) <power.jg@gmail.com>
-Javier Bueno Hedo <javier.bueno@metempsy.com> Javier Bueno <javier.bueno@metempsy.com>
-Javier Cano-Cano <javier.cano555@gmail.com>
-Javier Setoain <javier.setoain@arm.com>
-Jayneel Gandhi <jayneel@cs.wisc.edu>
-Jennifer Treichler <jtreichl@umich.edu>
-Jieming Yin <jieming.yin@amd.com>
-Jing Qu <jqu32@wisc.edu> JingQuJQ <jqu32@wisc.edu>
-Jiuyue Ma <majiuyue@ncic.ac.cn>
-Joe Gross <joe.gross@amd.com> Joe Gross <joseph.gross@amd.com>
-Joel Hestness <jthestness@gmail.com> Joel Hestness <hestness@cs.utexas.edu>
-Joel Hestness <jthestness@gmail.com> Joel Hestness <hestness@cs.wisc.edu>
-Joel Hestness <jthestness@gmail.com> Joel Hestness ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E) <jthestness@gmail.com>
-John Alsop <johnathan.alsop@amd.com>
-John Kalamatianos <john.kalamatianos@amd.com> jkalamat <john.kalamatianos@amd.com>
-Jordi Vaquero <jordi.vaquero@metempsy.com>
-Jose Marinho <jose.marinho@arm.com>
-Jui-min Lee <fcrh@google.com>
-Kanishk Sugand <kanishk.sugand@arm.com>
-Karthik Sangaiah <karthik.sangaiah@arm.com>
-Ke Meng <mengke97@hotmail.com>
-Kevin Brodsky <kevin.brodsky@arm.com>
-Kevin Lim <ktlim@umich.edu>
-Khalique <khalique913@gmail.com>
-Koan-Sin Tan <koansin.tan@gmail.com>
-Korey Sewell <ksewell@umich.edu>
-Krishnendra Nathella <Krishnendra.Nathella@arm.com> Krishnendra Nathella <krinat01@arm.com>
-Lena Olson <leolson@google.com> Lena Olson <lena@cs.wisc,edu>
-Lena Olson <leolson@google.com> Lena Olson <lena@cs.wisc.edu>
-Lisa Hsu <Lisa.Hsu@amd.com> Lisa Hsu <hsul@eecs.umich.edu>
-Lluc Alvarez <lluc.alvarez@bsc.es>
-Lluís Vilanova <vilanova@ac.upc.edu> Lluis Vilanova <vilanova@ac.upc.edu>
-Mahyar Samani <msamani@ucdavis.edu>
-Malek Musleh <malek.musleh@gmail.com> Nilay Vaish ext:(%2C%20Malek%20Musleh%20%3Cmalek.musleh%40gmail.com%3E) <nilay@cs.wisc.edu>
-Marc Mari Barcelo <marc.maribarcelo@arm.com>
-Marc Orr <marc.orr@gmail.com> Marc Orr <morr@cs.wisc.edu>
-Marco Balboni <Marco.Balboni@ARM.com>
-Marco Elver <Marco.Elver@ARM.com> Marco Elver <marco.elver@ed.ac.uk>
-Matt DeVuyst <mdevuyst@gmail.com>
-Matt Evans <matt.evans@arm.com> Matt Evans <Matt.Evans@arm.com>
-Matt Horsnell <matt.horsnell@arm.com>Matt Horsnell <Matt.Horsnell@ARM.com>
-Matt Horsnell <matt.horsnell@arm.com> Matt Horsnell <Matt.Horsnell@arm.com>
-Matt Horsnell <matt.horsnell@arm.com> Matt Horsnell <matt.horsnell@ARM.com>
-Matt Poremba <matthew.poremba@amd.com> Matt Poremba <Matthew.Poremba@amd.com>
-Matteo Andreozzi <matteo.andreozzi@arm.com> Matteo Andreozzi <Matteo.Andreozzi@arm.com>
-Matteo M. Fusi <matteo.fusi@bsc.es>
-Matthew Poremba <matthew.poremba@amd.com> Matthew Poremba <Matthew.Poremba@amd.com>
-Matt Sinclair <mattdsinclair@gmail.com> Matthew Sinclair <matthew.sinclair@amd.com>
-Matthias Hille <matthiashille8@gmail.com>
-Matthias Jung <jungma@eit.uni-kl.de>
-Maurice Becker <madnaurice@googlemail.com>
-Maxime Martinasso <maxime.cscs@gmail.com>
-Maximilian Stein <maximilian.stein@tu-dresden.de>
-Maximilien Breughe <maximilien.breughe@elis.ugent.be> Maximilien Breughe <Maximilien.Breughe@elis.ugent.be>
-Michael Adler <Michael.Adler@intel.com>
-Michael LeBeane <michael.lebeane@amd.com> Michael LeBeane <Michael.Lebeane@amd.com>
-Michael LeBeane <michael.lebeane@amd.com> mlebeane <michael.lebeane@amd.com>
-Michael Levenhagen <mjleven@sandia.gov>
-Michiel Van Tol <michiel.vantol@arm.com> Michiel W. van Tol <Michiel.VanTol@arm.com>
-Michiel Van Tol <michiel.vantol@arm.com> Michiel van Tol <Michiel.VanTol@arm.com>
-Miguel Serrano <mserrano@umich.edu>
-Miles Kaufmann <milesck@eecs.umich.edu>
-Min Kyu Jeong <minkyu.jeong@arm.com> Min Kyu Jeong <MinKyu.Jeong@arm.com>
-Mingyuan <xiang_my@outlook.com>
-Mitch Hayenga <mitch.hayenga@arm.com> Mitch Hayenga <Mitch.Hayenga@ARM.com>
-Mitch Hayenga <mitch.hayenga@arm.com> Mitch Hayenga <Mitch.Hayenga@arm.com>
-Mitch Hayenga <mitch.hayenga@arm.com> Mitch Hayenga <mitch.hayenga+gem5@gmail.com>
-Mitch Hayenga <mitch.hayenga@arm.com> Mitch Hayenga ext:(%2C%20Amin%20Farmahini%20%3Caminfar%40gmail.com%3E) <mitch.hayenga+gem5@gmail.com>
-Mitch Hayenga <mitch.hayenga@arm.com> Mitchell Hayenga <Mitchell.Hayenga@ARM.com>
-Mohammad Alian <m.alian1369@gmail.com>
-Monir Mozumder <monir.mozumder@amd.com>
-Moyang Wang <mw828@cornell.edu>
-Mrinmoy Ghosh <mrinmoy.ghosh@arm.com> Mrinmoy Ghosh <Mrinmoy.Ghosh@arm.com>
-Nathan Binkert <nate@binkert.org> Nathan Binkert <binkertn@umich.edu>
-Nathanael Premillieu <nathanael.premillieu@arm.com> Nathanael Premillieu <Nathanael.Premillieu@arm.com>
-Nathanael Premillieu <nathanael.premillieu@arm.com> Nathanael Premillieu <nathanael.premillieu@irisa.fr>
-Nathanael Premillieu <nathanael.premillieu@arm.com> Nathanael Premillieu <nathananel.premillieu@arm.com>
-Nathanael Premillieu <nathanael.premillieu@arm.com> Nathanael Premillieu <npremill@irisa.fr>
-Nayan Deshmukh <nayan26deshmukh@gmail.com>
-Neha Agarwal <neha.agarwal@arm.com>
-Nicholas Lindsay <nicholas.lindsay@arm.com>
-Nicolas Derumigny <nderumigny@gmail.com>
-Nicolas Zea <nicolas.zea@gmail.com>
-Nikos Nikoleris <nikos.nikoleris@arm.com> Nikos Nikoleris <nikos.nikoleris@gmail.com>
-Nils Asmussen <nils.asmussen@barkhauseninstitut.org> Nils Asmussen <nilsasmussen7@gmail.com>
-Nuwan Jayasena <Nuwan.Jayasena@amd.com>
-Ola Jeppsson <ola.jeppsson@gmail.com>
-Omar Naji <Omar.Naji@arm.com>
-Pablo Prieto <pablo.prieto@unican.es>
-Palle Lyckegaard <palle@lyckegaard.dk>
-Pau Cabre <pau.cabre@metempsy.com>
-Paul Rosenfeld <prosenfeld@micron.com> Paul Rosenfeld <dramninjas@gmail.com>
-Paul Rosenfeld <prosenfeld@micron.com> Paul Rosenfeld <prosenfeld@micon.com>
-Peter Enns <Peter.Enns@arm.com> Pierre-Yves Péneau <pierre-yves.peneau@lirmm.fr>
-Pin-Yen Lin <treapking@google.com>
-Po-Hao Su <supohaosu@gmail.com>
-Polina Dudnik <pdudnik@cs.wisc.edu> Polina Dudnik <pdudnik@gmail.com>
-Polydoros Petrakis <ppetrak@ics.forth.gr>
-Pouya Fotouhi <pfotouhi@ucdavis.edu> Pouya Fotouhi <Pouya.Fotouhi@amd.com>
-Prakash Ramrakhyani <prakash.ramrakhyani@arm.com> Prakash Ramrakhani <Prakash.Ramrakhani@arm.com>
-Prakash Ramrakhyani <prakash.ramrakhyani@arm.com> Prakash Ramrakhyani <Prakash.Ramrakhyani@arm.com>
-Pritha Ghoshal <pritha9987@tamu.edu>
-Radhika Jagtap <radhika.jagtap@arm.com> Radhika Jagtap <radhika.jagtap@ARM.com>
-Rahul Thakur <rjthakur@google.com>
-Reiley Jeapaul <Reiley.Jeyapaul@arm.com>
-Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com> Rekai <Rekai.GonzalezAlberquilla@arm.com>
-Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com> Rekai Gonzalez Alberquilla <Rekai.GonzalezAlberquilla@arm.com>
-Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com> Rekai Gonzalez Alberquilla <rekai.gonzalezalberquilla@arm.com>
-Rekai Gonzalez-Alberquilla <rekai.gonzalezalberquilla@arm.com> Rekai Gonzalez-Alberquilla <Rekai.GonzalezAlberquilla@arm.com>
-Rene de Jong <rene.dejong@arm.com>
-Ricardo Alves <ricardo.alves@arm.com>
-Richard Strong <rstrong@hp.com> Richard Strong <r.d.strong@gmail.com>
-Richard Strong <rstrong@hp.com> Richard Strong <rstrong@cs.ucsd.edu>
-Richard Strong <rstrong@hp.com> Rick Strong <rstrong@cs.ucsd.edu>
-Rico Amslinger <rico.amslinger@informatik.uni-augsburg.de>
-Riken Gohil <Riken.Gohil@arm.com>
-Rizwana Begum <rb639@drexel.edu>
-Robert Scheffel <robert.scheffel1@tu-dresden.de> Robert <robert.scheffel1@tu-dresden.de>
-Robert Kovacsics <rmk35@cl.cam.ac.uk>
-Rohit Kurup <rohit.kurup@arm.com>
-Ron Dreslinski <rdreslin@umich.edu> Ronald Dreslinski <rdreslin@umich.edu>
-Ruben Ayrapetyan <ruben.ayrapetyan@arm.com>
-Rune Holm <rune.holm@arm.com>
-Ruslan Bukin <br@bsdpad.com> Ruslan Bukin ext:(%2C%20Zhang%20Guoye) <br@bsdpad.com>
-Rutuja Oza <roza@ucdavis.edu>
-Ryan Gambord <gambordr@oregonstate.edu>
-Samuel Grayson <sam@samgrayson.me>
-Sandipan Das <sandipan@linux.ibm.com>
-Santi Galan <santi.galan@metempsy.com>
-Sascha Bischoff <sascha.bischoff@arm.com> Sascha Bischoff <Sascha.Bischoff@ARM.com>
-Sascha Bischoff <sascha.bischoff@arm.com> Sascha Bischoff <sascha.bischoff@ARM.com>
-Sean McGoogan <Sean.McGoogan@arm.com>
-Sean Wilson <spwilson2@wisc.edu>
-Sergei Trofimov <sergei.trofimov@arm.com>
-Severin Wischmann <wiseveri@student.ethz.ch> Severin Wischmann ext:(%2C%20Ioannis%20Ilkos%20%3Cioannis.ilkos09%40imperial.ac.uk%3E) <wiseveri@student.ethz.ch>
-Shawn Rosti <shawn.rosti@gmail.com>
-Sherif Elhabbal <elhabbalsherif@gmail.com>
-Siddhesh Poyarekar <siddhesh.poyarekar@gmail.com>
-Somayeh Sardashti <somayeh@cs.wisc.edu>
-Sooraj Puthoor <puthoorsooraj@gmail.com>
-Sophiane Senni <sophiane.senni@gmail.com>
-Soumyaroop Roy <sroy@cse.usf.edu>
-Srikant Bharadwaj <srikant.bharadwaj@amd.com>
-Stan Czerniawski <stan.czerniawski@arm.com>
-Stanislaw Czerniawski <stacze01@arm.com>
-Stephan Diestelhorst <stephan.diestelhorst@arm.com> Stephan Diestelhorst <stephan.diestelhorst@ARM.com>
-Stephen Hines <hines@cs.fsu.edu>
-Steve Raasch <sraasch@umich.edu>
-Steve Reinhardt <stever@gmail.com> Steve Reinhardt <Steve.Reinhardt@amd.com>
-Steve Reinhardt <stever@gmail.com> Steve Reinhardt <steve.reinhardt@amd.com>
-Steve Reinhardt <stever@gmail.com> Steve Reinhardt <stever@eecs.umich.edu>
-Steve Reinhardt <stever@gmail.com> Steve Reinhardt ext:(%2C%20Nilay%20Vaish%20%3Cnilay%40cs.wisc.edu%3E%2C%20Ali%20Saidi%20%3CAli.Saidi%40ARM.com%3E) <stever@gmail.com>
-Stian Hvatum <stian@dream-web.no>
-Sudhanshu Jha <sudhanshu.jha@arm.com>
-Sujay Phadke <electronicsguy123@gmail.com>
-Swapnil Haria <swapnilster@gmail.com> Swapnil Haria <swapnilh@cs.wisc.edu>
-Taeho Kgil <tkgil@umich.edu>
-Tao Zhang <tao.zhang.0924@gmail.com>
-Thomas Grass <Thomas.Grass@ARM.com>
-Tiago Mück <tiago.muck@arm.com> Tiago Muck <tiago.muck@arm.com>
-Tim Harris <tharris@microsoft.com>
-Timothy Hayes <timothy.hayes@arm.com>
-Timothy M. Jones <timothy.jones@arm.com> Timothy Jones <timothy.jones@cl.cam.ac.uk>
-Timothy M. Jones <timothy.jones@arm.com> Nilay Vaish ext:(%2C%20Timothy%20Jones%20%3Ctimothy.jones%40cl.cam.ac.uk%3E) <nilay@cs.wisc.edu>
-Timothy M. Jones <timothy.jones@arm.com> Timothy M. Jones <timothy.jones@cl.cam.ac.uk>
-Timothy M. Jones <timothy.jones@arm.com> Timothy M. Jones <tjones1@inf.ed.ac.uk>
-Tom Jablin <tjablin@gmail.com>
-Tommaso Marinelli <tommarin@ucm.es>
-Tony Gutierrez <anthony.gutierrez@amd.com> Anthony Gutierrez <atgutier@umich.edu>
-Tuan Ta <qtt2@cornell.edu> Tuan Ta <taquangtuan1992@gmail.com>
-Tushar Krishna <tushar@ece.gatech.edu> Tushar Krishna <Tushar.Krishna@amd.com>
-Tushar Krishna <tushar@ece.gatech.edu> Tushar Krishna <tushar@csail.mit.edu>
-Umesh Bhaskar <umesh.b2006@gmail.com>
-Uri Wiener <uri.wiener@arm.com>
-Victor Garcia <victor.garcia@arm.com>
-Vilas Sridharan <vilas.sridharan@gmail.com>
-Vince Weaver <vince@csl.cornell.edu>
-Vincentius Robby <acolyte@umich.edu>
-Wade Walker <wade.walker@arm.com>
-Weiping Liao <weipingliao@google.com>
-Wendy Elsasser <wendy.elsasser@arm.com>
-William Wang <william.wang@arm.com> William Wang <William.Wang@ARM.com>
-William Wang <william.wang@arm.com> William Wang <William.Wang@arm.com>
-Willy Wolff <willy.mh.wolff.ml@gmail.com>
-Xiangyu Dong <rioshering@gmail.com>
-Xianwei Zhang <xianwei.zhang@amd.com>
-Xiaoyu Ma <xiaoyuma@google.com>
-Xin Ouyang <xin.ouyang@streamcomputing.com>
-Yasuko Eckert <yasuko.eckert@amd.com>
-Yi Xiang <yix@colostate.edu>
-Yifei Liu <liu.ad2039@gmail.com>
-Yu-hsin Wang <yuhsingw@google.com>
-Yuan Yao <yuanyao@seas.harvard.edu>
-Yuetsu Kodama <yuetsu.kodama@riken.jp> yuetsu.kodama <yuetsu.kodama@riken.jp>
-Zhang Zheng <perise@gmail.com>
-Zicong Wang <wangzicong@nudt.edu.cn>
-Éder F. Zulian <zulian@eit.uni-kl.de>
-Gabe Loh <gabriel.loh@amd.com> gloh <none@none>
-jiegec <noc@jiegec.ac.cn>
-m5test <m5test@zizzer>
-Marjan Fariborz <mfariborz@ucdavis.edu> marjanfariborz <mfariborz@ucdavis.edu>
-Mike Upton <michaelupton@gmail.com>
-seanzw <seanyukigeek@gmail.com>
-Trivikram Reddy <tvreddy@ucdavis.edu> tv-reddy <tvreddy@ucdavis.edu>
-
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/MAINTAINERS.yaml gem5-SALAM/MAINTAINERS.yaml
--- gem5/MAINTAINERS.yaml	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/MAINTAINERS.yaml	1969-12-31 18:00:00.000000000 -0600
@@ -1,329 +0,0 @@
-# See CONTRIBUTING.md for details of gem5's contribution process.
-#
-# This file contains a list of gem5's subsystems and their
-# maintainers. The key used to identifity a subsystem should be used
-# as a tag in commit messages targetting that subsystem. At least one
-# (not all) of these maintainers must review the patch before it can
-# be pushed. These people will automatically be emailed when you
-# upload the patch to Gerrit (https://gem5-review.googlesource.com).
-# These subsystem keys mostly follow the directory structure.
-#
-# Maintainers have the following responsibilities:
-# 1. That at least one maintainer of each subsystem reviews all
-#    changes to that subsystem (they will be automatically tagged and
-#    emailed on each new change).
-# 2. They will complete your reviews in a timely manner (within a few
-#    business days).
-# 3. They pledge to uphold gem5's community standards and its code of
-#    conduct by being polite and professional in their code
-#    reviews. See CODE-OF-CONDUCT.md.
-#
-#
-# Entries in this file have the following format:
-#   key:
-#     desc: >-
-#       Optional description of the subsystem.
-#     status: maintained
-#     maintainers:
-#       - John Doe <john.doe@gem5.org>
-#       - Jane Doe <jane.doe@gem5.org>
-#
-#
-# The status field should have one of the following values:
-#   - maintained: The component has an active maintainer.
-#   - orphaned: The component is looking for a new owner.
-
-
-pmc:
-  desc: >-
-    PMC Members (general maintainers):
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-    - Brad Beckmann <bradford.beckmann@gmail.com>
-    - David Wood <david@cs.wisc.edu>
-    - Gabe Black <gabe.black@gmail.com>
-    - Giacomo Travaglini <giacomo.travaglini@arm.com>
-    - Jason Lowe-Power <jason@lowepower.com> (chair)
-    - Matt Sinclair <sinclair@cs.wisc.edu>
-    - Tony Gutierrez <anthony.gutierrez@amd.com>
-    - Steve Reinhardt <stever@gmail.com>
-
-arch:
-  desc: >-
-    General architecture-specific components
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-arch-arm:
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-    - Giacomo Travaglini <giacomo.travaglini@arm.com>
-
-arch-gcn3:
-  status: maintained
-  maintainers:
-    - Matt Poremba <matthew.poremba@amd.com>
-    - Matt Sinclair <sinclair@cs.wisc.edu>
-
-arch-vega:
-  status: maintained
-  maintainers:
-    - Matt Poremba <matthew.poremba@amd.com>
-    - Matt Sinclair <sinclair@cs.wisc.edu>
-
-arch-mips:
-  status: orphaned
-
-arch-power:
-  status: maintained
-  maintainers:
-    - Boris Shingarov <shingarov@labware.com>
-
-arch-riscv:
-  status: orphaned
-
-arch-sparc:
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-arch-x86:
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-base:
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Daniel Carvalho <odanrc@yahoo.com.br>
-
-base-stats:
-  status: orphaned
-
-configs:
-  status: maintained
-  maintainers:
-    - Jason Lowe-Power <jason@lowepower.com>
-
-cpu:
-  desc: >-
-    General changes to all CPU models (e.g., BaseCPU)
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-cpu-kvm:
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-
-cpu-minor:
-  status: maintained
-  maintainers:
-    - Zhengrong Wang <seanyukigeek@gmail.com>
-
-cpu-o3:
-  status: orphaned
-
-cpu-simple:
-  status: maintained
-  maintainers:
-    - Jason Lowe-Power <jason@lowepower.com>
-    - Gabe Black <gabe.black@gmail.com>
-
-dev:
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-dev-hsa:
-  status: maintained
-  maintainers:
-    - Matt Poremba <matthew.poremba@amd.com>
-
-dev-amdgpu:
-  status: maintained
-  maintainers:
-    - Matt Poremba <matthew.poremba@amd.com>
-
-dev-virtio:
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-
-dev-arm:
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-    - Giacomo Travaglini <giacomo.travaglini@arm.com>
-
-doc:
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-
-ext:
-  desc: >-
-    Components external to gem5
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-ext-testlib:
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Hoa Nguyen <hoanguyen@ucdavis.edu>
-
-fastmodel:
-  desc: >-
-    Changes relating to ARM Fast Models
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-gpu-compute:
-  status: maintained
-  maintainers:
-    - Matt Poremba <matthew.poremba@amd.com>
-    - Matt Sinclair <sinclair@cs.wisc.edu>
-
-learning-gem5:
-  desc: >-
-    The code and configs for the Learning gem5 book
-  status: maintained
-  maintainers:
-    - Jason Lowe-Power <jason@lowepower.com>
-
-mem:
-  desc: >-
-    General memory system (e.g., XBar, Packet)
-  status: maintained
-  maintainers:
-    - Nikos Nikoleris <nikos.nikoleris@arm.com>
-
-mem-cache:
-  desc: >-
-    Classic caches and coherence
-  status: maintained
-  maintainers:
-    - Nikos Nikoleris <nikos.nikoleris@arm.com>
-    - Daniel Carvalho <odanrc@yahoo.com.br>
-
-mem-dram:
-  status: maintained
-  maintainers:
-    - Nikos Nikoleris <nikos.nikoleris@arm.com>
-
-mem-garnet:
-  desc: >-
-    Garnet subcomponent of Ruby
-  status: maintained
-  maintainers:
-    - Srikant Bharadwaj <srikant.bharadwaj@amd.com>
-
-mem-ruby:
-  desc: >-
-    Ruby structures and protocols
-  status: maintained
-  maintainers:
-    - Jason Lowe-Power <jason@lowepower.com>
-    - Matt Sinclair <sinclair@cs.wisc.edu>
-
-misc:
-  desc: >-
-    Anything outside of the other categories
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-python:
-  desc: >-
-    Python SimObject wrapping and infrastructure
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-resources:
-  desc: >-
-    The gem5-resources repo with auxiliary resources for simulation
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-scons:
-  desc: >-
-    Build system
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-sim:
-  desc: >-
-    General simulation components
-  status: maintained
-  maintainers:
-    - Jason Lowe-Power <jason@lowepower.com>
-
-sim-se:
-  desc: >-
-    Syscall emulation
-  status: orphaned
-
-system-arm:
-  status: maintained
-  maintainers:
-    - Andreas Sandberg <andreas.sandberg@arm.com>
-    - Giacomo Travaglini <giacomo.travaglini@arm.com>
-
-systemc:
-  desc: >-
-    Code for the gem5 SystemC implementation and interface
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-tests:
-  desc: >-
-    testing changes
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-
-util:
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-util-docker:
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-
-util-m5:
-  status: maintained
-  maintainers:
-    - Gabe Black <gabe.black@gmail.com>
-
-util-gem5art:
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Jason Lowe-Power <jason@lowepower.com>
-
-website:
-  desc: >-
-    The gem5-website repo which contains the gem5.org site
-  status: maintained
-  maintainers:
-    - Bobby Bruce <bbruce@ucdavis.edu>
-    - Hoa Nguyen <hoanguyen@ucdavis.edu>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/README gem5-SALAM/README
--- gem5/README	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/README	2024-02-22 18:17:14.816942992 -0600
@@ -34,4 +34,4 @@
 
 If you have questions, please send mail to gem5-users@gem5.org
 
-Enjoy using gem5 and please share your modifications and extensions.
+Enjoy using gem5 and please share your modifications and extensions.
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/README.md gem5-SALAM/README.md
--- gem5/README.md	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/README.md	2024-02-22 18:17:14.816942992 -0600
@@ -0,0 +1,125 @@
+# gem5-SALAM #
+
+gem5-SALAM (System Architecture for LLVM-based Accelerator Modeling), is a novel system architecture designed to enable LLVM-based modeling and simulation of custom hardware accelerators.
+
+# Requirements
+
+- gem5 dependencies
+- LLVM-9 or newer
+- Frontend LLVM compiler for preferred development language (eg. clang for C)
+
+# gem5-SALAM Setup
+
+## All Required Dependencies for gem5-SALAM (Ubuntu 20.04)
+
+```bash
+sudo apt install build-essential git m4 scons zlib1g zlib1g-dev \
+    libprotobuf-dev protobuf-compiler libprotoc-dev libgoogle-perftools-dev \
+    python3-dev python-is-python3 libboost-all-dev pkg-config
+```
+
+## LLVM/Clang Setup
+
+For a quick start, one can simply run the following to install LLVM and Clang on Ubuntu 20.04.
+```bash
+sudo apt install llvm-12 llvm-12-tools clang-12
+```
+After installing these specific libraries, simply run the [update alternatives](https://github.com/TeCSAR-UNCC/gem5-SALAM/blob/main/docs/update-alternatives.sh) script in docs/.
+
+Alternatively, you can install the latest version of LLVM via your system package manager or build from source found at https://github.com/llvm/llvm-project.
+
+# Building gem5-SALAM
+
+Once you have successfully installed all of the necessary dependencies, you can go ahead and clone the gem5-SALAM repository to begin working with it.
+
+```bash
+git clone https://github.com/TeCSAR-UNCC/gem5-SALAM
+```
+
+When building gem5-SALAM, there are multiple different binary types that can be created. Just like in gem5 the options are debug, opt, fast, prof, and perf. We recommend that users either use the opt or debug builds, as these are the build types we develop and test on.
+
+Below are the bash commands you would use to build the opt or debug binary.
+
+```bash
+scons build/ARM/gem5.opt -j`nproc`
+```
+
+```bash
+scons build/ARM/gem5.debug -j`nproc`
+```
+
+For more information regarding the binary types, and other build information refer to the gem5 build documentation [here](http://learning.gem5.org/book/part1/building.html).
+
+# Building with docker
+You can use the Dockerfile given in the `docker/` directory to build the project and run the benchmarks. To build the project use the following command:
+```bash
+docker build . --file docker/Dockerfile --build-arg BUILD_TYPE="opt"
+```
+
+The `BUILD_TYPE` argument sets the the building option for the project and can be `opt` or `debug`.
+
+# Using gem5-SALAM
+
+To use gem5-SALAM you need to define the computation model of you accelerator in your language of choice,and compile it to LLVM IR. Any control and dataflow graph optimization (eg. loop unrolling) should be handled by the compiler. You can construct accelerators by associating their LLVM IR with an LLVMInterface and connecting it to the desired CommInterface in the gem5 memory map.
+
+Below are some resources in the gem5-SALAM directory that can be used when getting started:
+
+- Examples for system-level configuration can be found in **configs/common/HWAcc.py**.
+- Accelerator benchmarks and examples can be found in the **benchmarks** directory.
+- The **benchmarks/common** directory contains basic drivers and syscalls for baremetal simulation.
+- **benchmarks/sys_validation** contains examples for configuring and using gem5-SALAM with different algorithms.
+
+## System Validation Examples
+
+The system validation examples under **benchmarks/sys_validation** are good examples for how you interface with the gem5-SALAM simulation objects.
+
+In order to use the system validation benchmarks, it is required to have the ARM GCC cross-compiler installed. If you didn't already install it when you setup the dependencies, you can install it in Ubuntu by running the below command:
+
+```bash
+sudo apt-get install gcc-multilib gcc-arm-none-eabi
+```
+
+**run_system.sh** requires an environment variable named **M5_PATH** to be set. You will want to point it to your gem5-SALAM path as shown below.
+
+```bash
+export M5_PATH=/path/to/gem5-SALAM
+```
+
+Next, compile your desired example.
+
+```bash
+cd $M5_PATH/benchmarks/sys_validation/[benchmark]
+make
+```
+
+Finally, you can run any of the benchmarks you have compiled by running the run system script.
+
+```bash
+$M5_PATH/tools/run_system.sh --bench bfs --bench-path benchmarks/sys_validation/bfs
+```
+
+If you would like to see the gem5-SALAM command created by the shell file you would just need to inspect the **RUN_SCRIPT** variable in the shell file.
+
+# Resources
+
+## gem5 Documentation
+
+https://www.gem5.org/documentation/
+
+## gem5 Tutorial
+
+The gem5 documentation has a [tutorial for working with gem5](http://learning.gem5.org/book/index.html#) that will help get you started with the basics of creating your own sim objects.
+
+## Building and Integrating Accelerators in gem5-SALAM
+
+We have written a guide on how to create the GEMM system validation example. This will help you get started with creating your own benchmarks and systems. It can be viewed [here](https://github.com/TeCSAR-UNCC/gem5-SALAM/blob/master/docs/Building_and_Integrating_Accelerators.md).
+
+## SALAM Object Overview
+
+The [SALAM Object Overview](https://github.com/TeCSAR-UNCC/gem5-SALAM/blob/master/docs/SALAM_Object_Overview.md) covers what various Sim Objects in gem5-SALAM are and their purpose.
+
+## Full-system OS Simulation ##
+
+Please download the latest version of the Linux Kernel for ARM from the [gem5 ARM kernel page](http://gem5.org/ARM_Kernel).
+You will also need the [ARM disk images](http://www.gem5.org/dist/current/arm/) for full system simulation.
+Devices operate in the physical memory address space.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/RELEASE-NOTES.md gem5-SALAM/RELEASE-NOTES.md
--- gem5/RELEASE-NOTES.md	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/RELEASE-NOTES.md	1969-12-31 18:00:00.000000000 -0600
@@ -1,493 +0,0 @@
-# Version 21.1.0.1
-
-**[HOTFIX]** [A "'deprecated' attribute directive ignored" warning was being thrown frequently when trying to build v21.1.0.0](https://gem5.atlassian.net/browse/GEM5-1063). While this issue did not break the build, it made reading the build output difficult and caused confused. As such a patch has been applied to fix this issue.
-
-# Version 21.1.0.0
-
-Since v21.0 we have received 780 commits with 48 unique contributors, closing 64 issues on our [Jira Issue Tracker](https://gem5.atlassian.net/).
-In addition to our [first gem5 minor release](#version-21.0.1.0), we have included a range of new features, and API changes which we outline below.
-
-## Added the Components Library [Alpha Release]
-
-The purpose of the gem5 components library is to provide gem5 users a standard set of common and useful gem5 components, pre-built, to add to their experiments.
-The gem5 components library adopts a modular architecture design so components may be easily added, removed, and extended, as needed.
-
-Examples of using the gem5 components library can be found in [`configs/example/components-library`](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.1.0.0/configs/example/components-library).
-
-**Important Disclaimer:**
-This is a pre-alpha release.
-The purpose of this release is to get community feedback.
-Though some testing has been done, we expect regular fixes and improvements until the library reaches a stable state.
-A Jira Ticket outlining TODOs and known bugs can be found at <https://gem5.atlassian.net/browse/GEM5-648>.
-
-## Improvements to GPU simulation
-
-### ROCm 4.0 support
-
-ROCm 4.0 is now officially supported.
-
-### gfx801 (Carrizo) and gfx803 (Fiji) support
-
-gfx801 (Carrizo) and gfx803 (Fiji) are both supported and tested with the gem5-resources applications.
-
-### Better scoreboarding support
-
-Better scoreboarding support has been added.
-This reduces stalls by up to 42%.
-
-## Accuracy and coverage stat added to prefetcher caches
-
-Accuracy and coverage stats have been added for prefetcher caches.
-Accuracy is defined as the ratio of the number of prefetch requests counted as useful over the total number of prefetch requests issued.
-Coverage is defined as the ratio of the number of prefetch requests counted as useful over the number of useful prefetch request plus the remaining demand misses.
-
-## POWER 64-bit SE mode
-
-The POWER 64-bit ISA is now supported in Syscall Execution mode.
-
-## RISC-V PMP now supported
-
-gem5 now supports simulation of RISC-V Physical Memory Protection (PMP).
-Simulations can boot and run Keystone and Eyrie.
-
-## Improvements to the replacement policies
-
-The gem5 replacement policies framework now supports more complex algorithms.
-It now allows using addresses, PC, and other information within a policy.
-
-**Note:**
-Assuming this information is promptly available at the cache may be unrealistic.
-
-### Set Dueling
-
-Classes that handle set dueling have been created ([Dueler and DuelingMonitor](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.1.0.0/src/mem/cache/tags/dueling.hh)).
-They can be used in conjunction with different cache policies.
-A [replacement policy that uses it](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.1.0.0/src/mem/cache/replacement_policies/dueling_rp.hh) has been added for guidance.
-
-## RISC-V is now supported as a host machine.
-
-gem5 is now compilable and runnable on a RISC-V host system.
-
-## New Deprecation MARCOs added
-
-Deprecation MACROS have been added for deprecating namespaces (`GEM5_DEPRECATED_NAMESPACE`), and deprecating other MACROs (`GEM5_DEPRECATED_MACRO`).
-
-**Note:**
-For technical reasons, using old macros won't produce any deprecation warnings.
-## Refactoring of the gem5 Namespaces
-
-Snake case has been adopted as the new convention for name spaces.
-As a consequence, multiple namespaces have been renamed:
-
-* `Minor` -> `minor`
-* `Loader` -> `loader`
-* `Stats` -> `statistics`
-* `Enums` -> `enums`
-* `Net` -> `networking`
-* `ProbePoints` -> `probing`
-* `ContextSwitchTaskId` -> `context_switch_task_id`
-* `Prefetcher` -> `prefetch`
-* `Encoder` -> `encoder`
-* `Compressor` -> `compression`
-* `QoS` -> `qos`
-* `ReplacementPolicy` -> `replacement_policy`
-* `Mouse` -> `mouse`
-* `Keyboard` -> `keyboard`
-* `Int` -> `as_int`
-* `Float` -> `as_float`
-* `FastModel` -> `fastmodel`
-* `GuestABI` -> `guest_abi`
-* `LockedMem` -> `locked_mem`
-* `DeliveryMode` -> `delivery_mode`
-* `PseudoInst` -> `pseudo_inst`
-* `DecodeCache` -> `decode_cache`
-* `BitfieldBackend` -> `bitfield_backend`
-* `FreeBSD` -> `free_bsd`
-* `Linux` -> `linux`
-* `Units` -> `units`
-* `SimClock` -> `sim_clock`
-* `BloomFilter` -> `bloom_filter`
-* `X86Macroop` -> `x86_macroop`
-* `ConditionTests` -> `condition_tests`
-* `IntelMP` -> `intelmp`
-* `SMBios` -> `smbios`
-* `RomLables` -> `rom_labels`
-* `SCMI` -> `scmi`
-* `iGbReg` -> `igbreg`
-* `Ps2` -> `ps2`
-* `CopyEngineReg` -> `copy_engine_reg`
-* `TxdOp` -> `txd_op`
-* `Sinic` -> `sinic`
-* `Debug` -> `debug`
-
-In addition some other namespaces were added:
-
-* `gem5::ruby`, for Ruby-related files
-* `gem5::ruby::garnet`, for garnet-related files
-* `gem5::o3`, for the O3-cpu's related files
-* `gem5::memory`, for files related to memories
-
-Finally, the `m5` namespace has been renamed `gem5`.
-
-## MACROs in `base/compiler.hh`
-
-The MACROs in base/compiler.hh of the form `M5_*` have been deprecated and replaced with macros of the form `GEM5_*`, with some other minor name adjustments.
-
-## MemObject Removed
-
-MemObject simobject had been marked for deprecation and has now been officially removed from the gem5 codebase.
-
-## Minimum GCC version increased to 7; minimum Clang version increased to 6; Clang 10 and 11 supported; C++17 supported
-
-GCC version 5 and 6 are no longer supported.
-GCC 7 is now the minimum GCC compiler version supported.
-This changes allows has allowed us to move to the C++17 standard for development.
-
-In addition, the minimum Clang version has increased to 6, and Clang 10 and 11 are now officially supported.
-
-# Version 21.0.1.0
-
-Version 21.0.1 is a minor gem5 release consisting of bug fixes. The 21.0.1 release:
-
-* Fixes the [GCN-GPU Dockerfile](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/util/dockerfiles/gcn-gpu/Dockerfile) to pull from the v21-0 bucket.
-* Fixes the tests to download from the v21-0 bucket instead of the develop bucket.
-* Fixes the Temperature class:
-    * Fixes [fs_power.py](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/configs/example/arm/fs_power.py), which was producing a ["Temperature is not JSON serializable" error](https://gem5.atlassian.net/browse/GEM5-951).
-    * Fixes temperature printing in `config.ini`.
-    * Fixes the pybind export for the `from_kelvin` function.
-* Eliminates a duplicated name warning in [ClockTick](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/src/systemc/channel/sc_clock.cc).
-* Fixes the [Ubuntu 18.04 Dockerfile](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/util/dockerfiles/ubuntu-20.04_all-dependencies/Dockerfile) to use Python3 instead of Python2.
-* Makes [verify.py](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/src/systemc/tests/verify.py) compatible with Python3.
-* Fixes GCN3_X86 builds for aarch64 hosts.
-* Fixes building with `SLICC_HTML=True`.
-* Fixes the [cpt_upgrader.py](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/util/cpt_upgrader.py) string formatter.
-* Fixes typo in [cpy_upgrader.py](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/util/cpt_upgrader.py) where module `errno` was incorrectly put as `ennro`.
-* Sets the `--restore-simpoint-checkpoint` flag default to "False" instead of the ambiguous "None".
-* Fixes a nonsensical check in [MOESI_CMP_token-L1cache](https://gem5.googlesource.com/public/gem5/+/refs/tags/v21.0.1.0/src/mem/ruby/protocol/MOESI_CMP_token-L1cache.sm) which caused compilation bugs in Clang-11.
-* Fixes the `scx_get_parameter_list` for ARM fast models.
-* Fixes [bloated object binaries, known to cause issues during linking](https://gem5.atlassian.net/browse/GEM5-1003).
-* Due to LTO causing unacceptably long link times for some users, and stripping debug symbols in some setups, it is no longer enabled by default. It may be enabled with the `--with-lto` flag. The `--no-lto` flag has been removed.
-
-# Version 21.0.0.0
-
-Version 21.0 marks *one full year* of gem5 releases, and on this anniversary, I think we have some of the biggest new features yet!
-This has been a very productive release with [100 issues](https://gem5.atlassian.net/), over 813  commits, and 49 unique contributors.
-
-## 21.0 New features
-
-### AMBA CHI protocol implemented in SLICC: Contributed by *Tiago Mück*
-
-This new protocol provides a single cache controller that can be reused at multiple levels of the cache hierarchy and configured to model multiple instances of MESI and MOESI cache coherency protocols.
-This implementation is based of Arm’s [AMBA 5 CHI specification](https://static.docs.arm.com/ihi0050/d/IHI0050D_amba_5_chi_architecture_spec.pdf) and provides a scalable framework for the design space exploration of large SoC designs.
-
-See [the gem5 documentation](http://www.gem5.org/documentation/general_docs/ruby/CHI/) for more details.
-There is also a [gem5 blog post](http://www.gem5.org/2020/05/29/flexible-cache.html) on this new protocol as well.
-
-### Full support for AMD's GCN3 GPU model
-
-In previous releases, this model was only partially supported.
-As of gem5 21.0, this model has been fully integrated and is tested nightly.
-This model currently only works in syscall emulation mode and requires using the gcn docker container to get the correct version of the ROCm stack.
-More information can be found in [this blog post](http://www.gem5.org/2020/05/27/modern-gpu-applications.html).
-
-With this full support, we are also providing many applications as well.
-See [gem5-resources](http://resources.gem5.org/) for more information.
-
-### RISC-V Full system Linux boot support: Contributed by *Peter Yuen*
-
-The RISC-V model in gem5 can now boot unmodified Linux!
-Additionally, we have implemented DTB generation and support the Berkeley Boot Loader as the stage 1 boot loader.
-We have also released a set of resources for you to get started: <https://gem5.googlesource.com/public/gem5-resources/+/refs/heads/develop/src/riscv-fs/>
-
-### New/Changed APIs
-
-There are multiple places where the developers have reduced boilerplate.
-
-* **[API CHANGE]**: No more `create()` functions! Previously, every `SimObject` required a `<SimObjectParams>::create()` function to be manually defined. Forgetting to do this resulted in confusing errors. Now, this function is created for you automatically. You can still override it if you need to handle any special cases.
-* **[API CHANGE]**: `params()`: Rather than defining a typedef and the `params()` function for every `SimObject`, you can now use the `PARAMS` macro.
-
-See <http://doxygen.gem5.org/release/current/classSimObject.html#details> for more details on these two API changes.
-
-* **[API CHANGE]**: All stats are now using *new style* groups instead of the older manual stat interface.
-  * The previous API (creating stats that are not part of a `Group`) is still supported, but it is now deprecated.
-  * If a stat is not created with the new `Group` API, it may not be automatically dumped using new stat APIs (e.g., the Python API).
-  * Next release, there will be a warning for all old-style stats.
-
-### Platforms no longer support
-
-* **[USER-FACING CHANGE]**: Python 2.7 is *no longer supported*. You must use Python 3.6+.
-* CLANG minimum version is now 3.9
-* Bump minimum C++ to C++14
-
-### Other improvements and new features
-
-* Extra options to build m5ops
-* m5term improvements
-* There is a new python-based library for handling statistics. This library *works*, but hasn't been thoroughly tested yet. Stay tuned for more on this next release.
-* Many improvements and additions to unit tests
-* Cleaning up the `StaticInst` type
-* Workload API changes
-* Many updates and changes to the m5 guest utility
-* [Support for running arm64 Linux kernel v5.8](https://gem5.atlassian.net/browse/GEM5-787)
-* [Arm SCMI implemented](https://gem5.atlassian.net/browse/GEM5-768)
-
-# Version 20.1.0.5
-
-**[HOTFIX]** This hotfix release fixes three known bugs:
-
-* `src/python/m5/util/convert.py` incorrectly stated kibibytes as 'kiB' instead of 'KiB'. This has been fixed.
-* Atomic accesses were not checking the access permission bits in the page table descriptors. They were incorrectly using the nature of the request itself. This is now fixed.
-* `num_l2chaches_per_cluster` and `num_cpus_per_cluster` were cast to floats in `configs/ruby/MESI_Three_Level_HTM.py`, which caused errors. This has been fixed so they are correctly cast to integers.
-
-# Version 20.1.0.4
-
-**[HOTFIX]** [gem5 was failing to build with SCons 4.0.1 and 4.1.0](https://gem5.atlassian.net/browse/GEM5-916).
-This hotfix makes the necessary changes to `site_scons/site_tools/default.py` for gem5 to compile successfully on these versions of SCons.
-
-# Version 20.1.0.3
-
-**[HOTFIX]** A patch was apply to fix an [error where booting Linux stalled when using the ARM ISA](https://gem5.atlassian.net/browse/GEM5-901).
-This fix adds the parameter `have_vhe` to enable FEAT_VHE on demand, and is disabled by default to resolve this issue.
-
-# Version 20.1.0.2
-
-**[HOTFIX]** This hotfix release fixes known two bugs:
-
-* A "ValueError: invalid literal for int() with base..." error was being thrown in certain circumstances due to a non-integer being passed to "MemorySize" via a division operation. This has been rectified.
-* An assertion in Stats could be triggered due to a name collision between two ThreadStateStats objects, due to both erroneously sharing the same ThreadID. This has been fixed.
-
-# Version 20.1.0.1
-
-**[HOTFIX]** A patch was applied to fix the Garnet network interface stats.
-Previously, the flit source delay was computed using both tick and cycles.
-This bug affected the overall behavior of the Garnet Network Model.
-
-# Version 20.1.0.0
-
-Thank you to everyone that made this release possible!
-This has been a very productive release with [150 issues](https://gem5.atlassian.net/), over 650  commits (a 25% increase from the 20.0 release), and 58 unique contributors (a 100% increase!).
-
-## Process changes
-
-We are no longer using the "master" branch.
-Instead, we will have two branches:
-
-* "stable": This will point to the latest stable release (gem5-20.1 as of today)
-* "develop": This is the latest development code that will be merged in to the "stable" branch at each release.
-
-We suggest all *users* use the stable (default) branch.
-However, to contribute your fixes and new changes to gem5, it should be contributed to the develop branch.
-See CONTRIBUTING.md for more details.
-
-gem5 has also implemented a project code of conduct.
-See the CODE-OF-CONDUCT.md file for details.
-In the code of conduct "we pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."
-
-## New features in 20.1
-
-### New DRAM interface: Contributed by *Wendy Elsasser*
-
-You can find details about this on the [gem5 blog](http://www.gem5.org/2020/05/27/memory-controller.html) or Wendy's talks on YouTube: [Talk on new interface and NVM](https://www.youtube.com/watch?v=t2PRoZPwwpk) and the [talk on LPDDR5](https://www.youtube.com/watch?v=ttJ9_I_Avyc)
-
-* **[PYTHON API CHANGE]**: The DRAM models are now *DRAM interfaces* which is a child of the *memory controller*. Example change shown [in the blog post](http://www.gem5.org/project/2020/07/18/gem5-20-1.html).
-  * The DRAM is split into a memory controller and a DRAM interface
-  * `SimpleMemory` is no longer a drop-in replacement for a DRAM-based memory controller.
-* LPDDR5 model added
-* NVM model added
-* New memory controller model that can use both NVM and DRAM
-
-### Improved on-chip interconnect model, HeteroGarnet: Contributed by *Srikant Bharadwaj*
-
-You can find details about this on the [gem5 blog](http://www.gem5.org/2020/05/27/heterogarnet.html) and [Srikant's talk on YouTube](https://www.youtube.com/watch?v=AH9r44r2lHA).
-
-* **[USER-FACING CHANGE]**: The network type options are now "simple" and "garnet" instead of "garnet2.0". (If "garnet2.0" is used, you will get a warning until gem5-20.2)
-* Added models for clock domain crossings and serialization/deserialization (SERDES)
-
-### Transactional memory support: Contributed by *Timothy Hayes*
-
-You can find details on the [Jira issue](https://gem5.atlassian.net/browse/GEM5-587)
-
-* gem5 now supports Arm TME (transactional memory extensions)
-* Transactional memory is only implemented in the `MESI_Three_Level_HTM` Ruby protocol, and it is only implemented in Ruby.
-* This implements a checkpointing mechanism for the architectural state and buffering of speculative memory updates.
-* IBM POWER and x86 HTM extensions have *not* been implemented.
-
-### Other new features
-
-* External simulator integrations
-  * Added support for DRAMSim3
-  * Added back support for DRAMSim2
-* Armv8-A Self Hosted Debug extension added
-* KVM support for Armv8-A  hosts without GICv2 hardware
-* Implemented Secure EL2 for Armv8-A
-
-## Removed features
-
-* Dropped support for mercurial version control
-
-## New supported platforms
-
-* GCC up to 10.2 is now supported. Minimum GCC is now 5.0.
-* Clang up to version 9. Minimum Clang is now 3.9.
-
-## Platforms no longer support
-
-* **[USER-FACING CHANGE]**: Python 2 is officially deprecated. We will drop support for Python 2 in the next release. In this release you will get a warning if you're using Python 2.
-* **[USER-FACING CHANGE]**: We have dropped support for GCC 4.X
-* **[USER-FACING CHANGE]**: We have dropped support for Scons 2.x (Note: this is the default in Ubuntu 16.04. Use pip to install a newer scons.)
-
-See <http://www.gem5.org/documentation/general_docs/building> for gem5's current dependencies.
-
-## Other changes
-
-### Deprecating "master" and "slave"
-
-* **[API CHANGE]**: The names "master" and "slave" have been deprecated
-  * Special thanks to Lakin Smith, Shivani Parekh, Eden Avivi, and Emily Brickey.
-  * Below is a guide to most of the name changes.
-  * The goal was to replace problematic language with more descriptive and precise terms.
-* There may be some bugs introduced with this change as there were many places in the Python configurations which relied on "duck typing".
-* This change is mostly backwards compatible and warning will be issued until at least gem5-20.2.
-
-```
-MasterPort -> RequestorPort
-SlavePort -> ResponsePort
-
-xbar.slave -> xbar.cpu_side
-xbar.master -> xbar.mem_side
-
-MasterId -> RequestorId
-```
-
-### Testing improvements
-
-* We now have Jenkins server (<http://jenkins.gem5.org/>) running nightly and other large tests. Special thanks to Mike Upton for setting this up!
-  * Nightly tests run the "long" regression tests (many tests added).
-  * Compiler tests run gem5 build for many targets and all compilers once a week.
-* Updated CI tester (kokoro) to use a more up-to-date environment.
-* Improved the testing infrastructure.
-  * Almost all testing resources now available in [gem5-resources repository](https://gem5.googlesource.com/public/gem5-resources/).
-  * Generally cleaned up the `tests/` directory in mainline gem5.
-  * Many general testlib improvements.
-
-### More changes
-
-* **[PYTHON API CHANGE]**: m5.stats.dump() root argument renamed to roots to reflect the fact that it now takes a list of SimObjects
-* **[USER-FACING CHANGE]**: Checkpoint compatibility may be broken by the following changes
-  * <https://gem5-review.googlesource.com/c/public/gem5/+/25145>
-  * <https://gem5-review.googlesource.com/c/public/gem5/+/31874>
-* **[API CHANGE]** Changed `setCPU` to `setThreadContext` in Interrupts
-* Added a `Compressor` namespace.
-* **[API CHANGE]** The `Callback` class was removed and replaced with C++ lambdas.
-* Many objects' stats have been updated to the "new" stats style.
-* Many more objects have had their APIs formalized. See <http://www.gem5.org/documentation/general_docs/gem5-apis>
-
-----------------------------------------------------------------------------------------------------
-
-# Version 20.0.0.3
-
-**[HOTFIX]** When using the ARM ISA, gem5 could crash when a guest tried to call m5ops. This was due to `m5ops_base` being incorrectly declared in `src/arch/arm/ArmSystem.py`. A fix was applied to remove this declaration.
-
-# Version 20.0.0.2
-
-**[HOTFIX]** A patch was applied to fix the RubyPrefetcher with MESI_Three_Level. Prior to this fix a segfault occurred.
-
-# Version 20.0.0.1
-
-**[HOTFIX]** A fix was applied to stop incorrect clock frequences being reported due to rounding errors.
-
-# Version 20.0.0.0
-
-Welcome to our first "official" gem5 release!
-gem5 v19.0.0.0 was a "test" release, but this one has release notes, so it must be official!
-
-Thank you to everyone that made this release possible!
-This has been a very productive release with over [70 issues closed](https://gem5.atlassian.net/), over 500 commits, and 31 unique contributors.
-Below are some of the highlights, though I'm sure I've missed some important changes.
-
-## New features
-
-* [gem5-resources repository](https://gem5.googlesource.com/public/gem5-resources/)
-  * This new repository will store all of the *sources* (e.g., code) used to create testing and research resources. This includes disk images, testing binaries, kernel binaries, etc.
-  * Binaries created with the sources are hosted on dist.gem5.org.
-  * Details on the new page for resources: <http://www.gem5.org/documentation/general_docs/gem5_resources>.
-* Memory SimObjects can now be initialized using an image file using the image_file parameter.
-* **[USER-FACING CHANGE]** The m5 utility has been revamped with a new build system based on scons, tests, and updated and more consistent feature support.
-  * To build, now use `scons build/<arch>/out/m5`, not `make`.
-  * [Documentation](http://www.gem5.org/documentation/general_docs/m5ops/) coming soon.
-* Robust support for marshalling data from a function call inside the simulation to a function within gem5 using a predefined set of rules.
-  * Developers can specify an ABI for guest<->simulator calls and then "just call functions".
-  * Unifies pseudo-inst, syscall, and other support.
-  * Code within gem5 has been updated. However, users which added new pseudo-ops may have to update their code.
-* **[PYTHON API CHANGE]** Workload configuration pulled out into its own object, simplifying the System object and making workload configuration more modular and flexible.
-  * All full system config/run scripts must be updated (e.g., anything that used the `LinuxX86System` or similar SimObject).
-  * Many of the parameters of `System` are now parameters of the `Workload` (see `src/sim/Workload.py`).
-    * For instance, many parameters of `LinuxX86System` are now part of `X86FsLinux` which is now the `workload` parameter of the `System` SimObject.
-  * See https://gem5-review.googlesource.com/c/public/gem5/+/24283/ and https://gem5-review.googlesource.com/c/public/gem5/+/26466 for more details.
-* Sv39 paging has been added to the RISC-V ISA, bringing gem5 close to running Linux on RISC-V.
-  * (Some) Baremetal OSes are now supported.
-* Improvements to DRAM model:
-  * Added support for verifying available command bandwidth.
-  * Added support for multi-cycle commands.
-  * Added new timing parameters.
-  * Added ability to interleave bursts.
-  * Added LPDDR5 configurations.
-* **[Developer change]** We are beginning to document gem5 APIs.
-  * Currently, only SimObjects and the APIs they depend on have been documented.
-  * We are using doxygen to mark "stable APIs" and will use manual code review to make sure the APIs stay stable.
-  * More information will be coming during gem5-20.1 development.
-
-## Removed features
-
-* Support for the ALPHA ISA has been dropped.
-  * All ALPHA ISA code has been removed
-  * Old "rcS" scripts for ALPHA have been removed
-
-## New supported platforms
-
-* Compiling and running gem5 with Python 3 is now fully supported.
-  * Lots of code changes required for this.
-  * There may still be some python code that's not up to date. Please open a [Jira ticket](https://gem5.atlassian.net/) if you find any code that doesn't work with python3.
-* gem5 now supports Ubuntu 20.04.
-* Compiling gem5 with GCC 8 and 9 is now supported.
-* Compiling with clang up to version 9 is now supported.
-
-## Testing improvements
-
-* Scons-based tests have been migrated to the testlib framework.
-  * Tests can now be run with `tests/main.py`, except for the unittests.
-  * Please consult TESTING.md for more information on how these may be run.
-* We are continuing to work on CI tests. Most of the plumbing is there for Google Cloud Build integration. See [the Jira issue](https://gem5.atlassian.net/browse/GEM5-237) for details.
-
-## Other API changes
-
-* **[API CHANGE]** Ruby's prefetcher renamed to RubyPrefetcher.
-  * Any SLICC protocols with prefetchers need to be updated.
-  * Some config scripts for Ruby protocols with prefetchers may need to be updated.
-* **[API CHANGE]** SE mode improvements.
-  * Better support for the mmap and related syscalls.
-  * A new virtual memory area API for tracking SE mode allocations.
-  * When implementing syscalls, the way that guest memory is allocated changes. All code in gem5 is updated, but if there are any external syscalls, they may need be updated.
-* **[COMMAND LINE CHANGE]** The `--disk-image` argument to `fs.py` is now optional.
-  * However, the disk image names *are no longer implied*.
-  * The script still implicitly searches `M5_PATH`, but the name of the disk image must be specified.
-* **[API CHANGE]** SLICC `queueMemory` is now `enqueue`.
-  * All protocol configs must be updated with another message buffer in the memory controllers (directories).
-  * All protocol SLICC files must replace `queueMemoryRead` and `queueMemoryWrite` with `enqueue` to another "special" message buffer named `memQueue`.
-  * This allows finite buffering between the cache controllers and DRAMCtrl.
-* **[API CHANGE]** Added Prefetcher namespace
-  * All prefetchers' names have changed from `*Prefetcher` to `Prefetcher::*`
-  * If you have any prefetchers that are not in the gem5 mainline, your code will likely need to be updated.
-
-## Other changes
-
-* Implemented ARMv8.3-CompNum, SIMD complex number extension.
-* Support for Arm Trusted Firmware + u-boot with the new VExpress_GEM5_Foundation platform
-* Removed author list from source files.
-  * This was originally so future people would know who to contact.
-  * However, it was difficult to maintain and quickly out of date.
-  * Copyright is unchanged.
-* Improvements to gem5's power model.
-* MESI_Three_Level Ruby protocol bugfixes.
-* Ruby functional reads now work in more cases.
-* Indirect branch stats work correctly now.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/SConstruct gem5-SALAM/SConstruct
--- gem5/SConstruct	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/SConstruct	2024-02-22 18:17:14.816942992 -0600
@@ -107,6 +107,8 @@
 AddOption('--ignore-style', action='store_true',
           help='Disable style checking hooks')
 AddOption('--gold-linker', action='store_true', help='Use the gold linker')
+AddOption('--lld-linker', action='store_true', help='Use the lld linker')
+AddOption('--mold-linker', action='store_true', help='Use the mold linker')
 AddOption('--no-compress-debug', action='store_true',
           help="Don't compress debug info in build files")
 AddOption('--with-lto', action='store_true',
@@ -130,17 +132,8 @@
 from gem5_scons import TempFileSpawn, EnvDefaults, MakeAction, MakeActionTool
 import gem5_scons
 from gem5_scons.builders import ConfigFile, AddLocalRPATH, SwitchingHeaders
-from gem5_scons.builders import Blob
-from gem5_scons.sources import TagImpliesTool
 from gem5_scons.util import compareVersions, readCommand
 
-# Disable warnings when targets can be built with multiple environments but
-# with the same actions. This can happen intentionally if, for instance, a
-# generated source file is used to build object files in different ways in
-# different environments, but generating the source file itself is exactly the
-# same. This can be re-enabled from the command line if desired.
-SetOption('warn', 'no-duplicate-environment')
-
 Export('MakeAction')
 
 ########################################################################
@@ -151,11 +144,11 @@
 
 main = Environment(tools=[
         'default', 'git', TempFileSpawn, EnvDefaults, MakeActionTool,
-        ConfigFile, AddLocalRPATH, SwitchingHeaders, TagImpliesTool, Blob
+        ConfigFile, AddLocalRPATH, SwitchingHeaders
     ])
 
-main.Tool(SCons.Tool.FindTool(['gcc', 'clang'], main))
-main.Tool(SCons.Tool.FindTool(['g++', 'clang++'], main))
+main.Tool(SCons.Tool.FindTool(['clang', 'gcc'], main))
+main.Tool(SCons.Tool.FindTool(['clang++', 'g++'], main))
 
 Export('main')
 
@@ -338,13 +331,10 @@
         conf.CheckLinkFlag('-Wl,--as-needed')
     if GetOption('gold_linker'):
         main.Append(LINKFLAGS='-fuse-ld=gold')
-
-    # Treat warnings as errors but white list some warnings that we
-    # want to allow (e.g., deprecation warnings).
-    main.Append(CCFLAGS=['-Werror',
-                         '-Wno-error=deprecated-declarations',
-                         '-Wno-error=deprecated',
-                        ])
+    elif GetOption('lld_linker'):
+        main.Append(LINKFLAGS='-fuse-ld=lld')
+    elif GetOption('mold_linker'):
+        main.Append(LINKFLAGS='-fuse-ld=mold')
 else:
     error('\n'.join((
           "Don't know what compiler options to use for your compiler.",
@@ -360,14 +350,10 @@
           "src/SConscript to support that compiler.")))
 
 if main['GCC']:
-    if compareVersions(main['CXXVERSION'], "7") < 0:
-        error('gcc version 7 or newer required.\n'
+    if compareVersions(main['CXXVERSION'], "5") < 0:
+        error('gcc version 5 or newer required.\n'
               'Installed version:', main['CXXVERSION'])
 
-    with gem5_scons.Configure(main) as conf:
-        # This warning has a false positive in the systemc code in g++ 11.1.
-        conf.CheckCxxFlag('-Wno-free-nonheap-object')
-
     # Add the appropriate Link-Time Optimization (LTO) flags if `--with-lto` is
     # set.
     if GetOption('with_lto'):
@@ -421,13 +407,13 @@
     sanitizers.append('address')
     suppressions_file = Dir('util').File('lsan-suppressions').get_abspath()
     suppressions_opt = 'suppressions=%s' % suppressions_file
-    suppressions_opts = ':'.join([suppressions_opt, 'print_suppressions=0'])
-    main['ENV']['LSAN_OPTIONS'] = suppressions_opts
+    main['ENV']['LSAN_OPTIONS'] = ':'.join([suppressions_opt,
+                                            'print_suppressions=0'])
     print()
     warning('To suppress false positive leaks, set the LSAN_OPTIONS '
             'environment variable to "%s" when running gem5' %
-            suppressions_opts)
-    warning('LSAN_OPTIONS=%s' % suppressions_opts)
+            suppressions_opt)
+    warning('LSAN_OPTIONS=suppressions=%s' % suppressions_opt)
     print()
 if sanitizers:
     sanitizers = ','.join(sanitizers)
@@ -518,6 +504,12 @@
         if not py_version:
             error("Can't find a working Python installation")
 
+    marshal_env = main.Clone()
+
+    # Bare minimum environment that only includes python
+    marshal_env.Append(CCFLAGS='$MARSHAL_CCFLAGS_EXTRA')
+    marshal_env.Append(LINKFLAGS='$MARSHAL_LDFLAGS_EXTRA')
+
     # Found a working Python installation. Check if it meets minimum
     # requirements.
     ver_string = '.'.join(map(str, py_version))
@@ -528,12 +520,6 @@
         warning('Embedded python library too new. '
                 'Python 3 expected, found %s.' % ver_string)
 
-marshal_env = main.Clone()
-
-# Bare minimum environment that only includes python
-marshal_env.Append(CCFLAGS='$MARSHAL_CCFLAGS_EXTRA')
-marshal_env.Append(LINKFLAGS='$MARSHAL_LDFLAGS_EXTRA')
-
 main['HAVE_PKG_CONFIG'] = main.Detect('pkg-config')
 
 with gem5_scons.Configure(main) as conf:
@@ -621,6 +607,9 @@
         main.SConscript(os.path.join(root, 'SConscript'),
                         variant_dir=os.path.join(build_root, build_dir))
 
+gdb_xml_dir = os.path.join(ext_dir, 'gdb-xml')
+Export('gdb_xml_dir')
+
 
 ########################################################################
 #
@@ -706,7 +695,9 @@
     env.Append(CCFLAGS='$CCFLAGS_EXTRA')
     env.Append(LINKFLAGS='$LDFLAGS_EXTRA')
 
-    exports=['env', 'marshal_env']
+    exports=['env']
+    if main['USE_PYTHON']:
+        exports.append('marshal_env')
 
     # The src/SConscript file sets up the build rules in 'env' according
     # to the configured variables.  It returns a list of environments,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders/add_local_rpath.py gem5-SALAM/site_scons/gem5_scons/builders/add_local_rpath.py
--- gem5/site_scons/gem5_scons/builders/add_local_rpath.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders/add_local_rpath.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,68 +0,0 @@
-# Copyright (c) 2013, 2015-2020 ARM Limited
-# All rights reserved.
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2011 Advanced Micro Devices, Inc.
-# Copyright (c) 2009 The Hewlett-Packard Development Company
-# Copyright (c) 2004-2005 The Regents of The University of Michigan
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os.path
-import sys
-
-import SCons.Node.FS
-
-def AddLocalRPATH(env):
-    def add_local_rpath(env, *targets):
-        '''Set up an RPATH for a library which lives in the build directory.
-
-        The construction environment variable BIN_RPATH_PREFIX should be set
-        to the relative path of the build directory starting from the location
-        of the binary.'''
-        for target in targets:
-            target = env.Entry(target)
-            if not isinstance(target, SCons.Node.FS.Dir):
-                target = target.dir
-            relpath = os.path.relpath(target.abspath, env['BUILDDIR'])
-            components = [
-                '\\$$ORIGIN',
-                '${BIN_RPATH_PREFIX}',
-                relpath
-            ]
-            env.Append(RPATH=[env.Literal(os.path.join(*components))])
-
-    if sys.platform != "darwin":
-        env.Append(LINKFLAGS=env.Split('-z origin'))
-
-    env.AddMethod(add_local_rpath, 'AddLocalRPATH')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders/blob.py gem5-SALAM/site_scons/gem5_scons/builders/blob.py
--- gem5/site_scons/gem5_scons/builders/blob.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders/blob.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,108 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2018, 2020 ARM Limited
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2004-2005 The Regents of The University of Michigan
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os.path
-
-from gem5_scons import Transform, MakeAction
-from gem5_scons.util import bytesToCppArray
-
-from m5.util import code_formatter
-
-import SCons.Node.Python
-
-def build_blob(target, source, env):
-    '''
-    Embed an arbitrary blob into the gem5 executable,
-    and make it accessible to C++ as a byte array.
-    '''
-
-    with open(str(source[0]), 'rb') as f:
-        data = f.read()
-    symbol = str(source[1])
-    cc, hh = target
-
-    hh_code = code_formatter()
-    hh_code('''\
-#include <cstddef>
-#include <cstdint>
-
-namespace gem5
-{
-namespace Blobs
-{
-
-extern const std::size_t ${symbol}_len;
-extern const std::uint8_t ${symbol}[];
-
-} // namespace Blobs
-} // namespace gem5
-''')
-    hh_code.write(str(hh))
-
-    include_path = os.path.relpath(hh.abspath, env['BUILDDIR'])
-
-    cc_code = code_formatter()
-    cc_code('''\
-#include "${include_path}"
-
-namespace gem5
-{
-namespace Blobs
-{
-
-const std::size_t ${symbol}_len = ${{len(data)}};
-''')
-    bytesToCppArray(cc_code, symbol, data)
-    cc_code('''
-} // namespace Blobs
-} // namespace gem5
-''')
-    cc_code.write(str(cc))
-
-blob_action = MakeAction(build_blob, Transform("EMBED BLOB"))
-
-def blob_emitter(target, source, env):
-    symbol = str(target[0])
-    cc_file = env.File(symbol + '.cc')
-    hh_file = env.File(symbol + '.hh')
-    return [cc_file, hh_file], [source, SCons.Node.Python.Value(symbol)]
-
-def Blob(env):
-    blob_builder = env.Builder(action=blob_action, emitter=blob_emitter)
-    env.Append(BUILDERS={'Blob': blob_builder})
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders/config_file.py gem5-SALAM/site_scons/gem5_scons/builders/config_file.py
--- gem5/site_scons/gem5_scons/builders/config_file.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders/config_file.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,82 +0,0 @@
-# Copyright (c) 2013, 2015-2020 ARM Limited
-# All rights reserved.
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2011 Advanced Micro Devices, Inc.
-# Copyright (c) 2009 The Hewlett-Packard Development Company
-# Copyright (c) 2004-2005 The Regents of The University of Michigan
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-from gem5_scons import Transform, MakeAction
-
-###################################################
-#
-# Define a SCons builder for configuration flag headers.
-#
-###################################################
-
-def ConfigFile(env):
-    # This function generates a config header file that #defines the
-    # variable symbol to the current variable setting (0 or 1).  The source
-    # operands are the name of the variable and a Value node containing the
-    # value of the variable.
-    def build_config_file(target, source, env):
-        (variable, value) = [s.get_contents().decode('utf-8') for s in source]
-        with open(str(target[0].abspath), 'w') as f:
-            print('#define', variable, value, file=f)
-        return None
-
-    # Combine the two functions into a scons Action object.
-    config_action = MakeAction(build_config_file, Transform("CONFIG H", 2))
-
-    # The emitter munges the source & target node lists to reflect what
-    # we're really doing.
-    def config_emitter(target, source, env):
-        # extract variable name from Builder arg
-        variable = str(target[0])
-        # True target is config header file
-        target = env.Dir('config').File(variable.lower() + '.hh')
-        val = env[variable]
-        if isinstance(val, bool):
-            # Force value to 0/1
-            val = int(val)
-        elif isinstance(val, str):
-            val = '"' + val + '"'
-
-        # Sources are variable name & value (packaged in SCons Value nodes)
-        return [target], [env.Value(variable), env.Value(val)]
-
-    config_builder = env.Builder(emitter=config_emitter, action=config_action)
-
-    env.Append(BUILDERS = { 'ConfigFile' : config_builder })
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders/__init__.py gem5-SALAM/site_scons/gem5_scons/builders/__init__.py
--- gem5/site_scons/gem5_scons/builders/__init__.py	2024-02-22 18:16:36.412742214 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders/__init__.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,30 +0,0 @@
-# Copyright Google, Inc.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-
-from .add_local_rpath import AddLocalRPATH
-from .blob import Blob
-from .config_file import ConfigFile
-from .switching_headers import SwitchingHeaders
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders/switching_headers.py gem5-SALAM/site_scons/gem5_scons/builders/switching_headers.py
--- gem5/site_scons/gem5_scons/builders/switching_headers.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders/switching_headers.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,77 +0,0 @@
-# Copyright (c) 2013, 2015-2020 ARM Limited
-# All rights reserved.
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2011 Advanced Micro Devices, Inc.
-# Copyright (c) 2009 The Hewlett-Packard Development Company
-# Copyright (c) 2004-2005 The Regents of The University of Michigan
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os.path
-
-from gem5_scons import Transform, MakeAction
-
-###################################################
-#
-# This builder and wrapper method are used to set up a directory with
-# switching headers. Those are headers which are in a generic location and
-# that include more specific headers from a directory chosen at build time
-# based on the current build settings.
-#
-###################################################
-
-def SwitchingHeaders(env):
-    def build_switching_header(target, source, env):
-        path = str(target[0])
-        subdir = str(source[0])
-        dp, fp = os.path.split(path)
-        dp = os.path.relpath(os.path.realpath(dp),
-                             os.path.realpath(env['BUILDDIR']))
-        with open(path, 'w') as hdr:
-            print('#include "%s/%s/%s"' % (dp, subdir, fp), file=hdr)
-
-    switching_header_action = MakeAction(build_switching_header,
-                                         Transform('GENERATE'))
-
-    switching_header_builder = env.Builder(action=switching_header_action,
-                                           source_factory=env.Value,
-                                           single_source=True)
-
-    env.Append(BUILDERS = { 'SwitchingHeader': switching_header_builder })
-
-    def switching_headers(self, headers, source):
-        for header in headers:
-            self.SwitchingHeader(header, source)
-
-    env.AddMethod(switching_headers, 'SwitchingHeaders')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/builders.py gem5-SALAM/site_scons/gem5_scons/builders.py
--- gem5/site_scons/gem5_scons/builders.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/site_scons/gem5_scons/builders.py	2024-02-22 18:17:14.968943786 -0600
@@ -0,0 +1,151 @@
+# Copyright (c) 2013, 2015-2020 ARM Limited
+# All rights reserved.
+#
+# The license below extends only to copyright in the software and shall
+# not be construed as granting a license to any other intellectual
+# property including but not limited to intellectual property relating
+# to a hardware implementation of the functionality of the software
+# licensed hereunder.  You may use the software subject to the license
+# terms below provided that you ensure that this notice is replicated
+# unmodified and in its entirety in all distributions of the software,
+# modified or unmodified, in source code or in binary form.
+#
+# Copyright (c) 2011 Advanced Micro Devices, Inc.
+# Copyright (c) 2009 The Hewlett-Packard Development Company
+# Copyright (c) 2004-2005 The Regents of The University of Michigan
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import os
+import sys
+
+from os.path import join, split
+
+# SCons includes
+import SCons
+import SCons.Node
+import SCons.Node.FS
+import SCons.Script
+
+from gem5_scons import Transform, MakeAction
+
+###################################################
+#
+# Define a SCons builder for configuration flag headers.
+#
+###################################################
+
+def ConfigFile(env):
+    # This function generates a config header file that #defines the
+    # variable symbol to the current variable setting (0 or 1).  The source
+    # operands are the name of the variable and a Value node containing the
+    # value of the variable.
+    def build_config_file(target, source, env):
+        (variable, value) = [s.get_contents().decode('utf-8') for s in source]
+        with open(str(target[0].abspath), 'w') as f:
+            print('#define', variable, value, file=f)
+        return None
+
+    # Combine the two functions into a scons Action object.
+    config_action = MakeAction(build_config_file, Transform("CONFIG H", 2))
+
+    # The emitter munges the source & target node lists to reflect what
+    # we're really doing.
+    def config_emitter(target, source, env):
+        # extract variable name from Builder arg
+        variable = str(target[0])
+        # True target is config header file
+        target = env.Dir('config').File(variable.lower() + '.hh')
+        val = env[variable]
+        if isinstance(val, bool):
+            # Force value to 0/1
+            val = int(val)
+        elif isinstance(val, str):
+            val = '"' + val + '"'
+
+        # Sources are variable name & value (packaged in SCons Value nodes)
+        return [target], [env.Value(variable), env.Value(val)]
+
+    config_builder = env.Builder(emitter=config_emitter, action=config_action)
+
+    env.Append(BUILDERS = { 'ConfigFile' : config_builder })
+
+def AddLocalRPATH(env):
+    def add_local_rpath(env, *targets):
+        '''Set up an RPATH for a library which lives in the build directory.
+
+        The construction environment variable BIN_RPATH_PREFIX should be set
+        to the relative path of the build directory starting from the location
+        of the binary.'''
+        for target in targets:
+            target = env.Entry(target)
+            if not isinstance(target, SCons.Node.FS.Dir):
+                target = target.dir
+            relpath = os.path.relpath(target.abspath, env['BUILDDIR'])
+            components = [
+                '\\$$ORIGIN',
+                '${BIN_RPATH_PREFIX}',
+                relpath
+            ]
+            env.Append(RPATH=[env.Literal(os.path.join(*components))])
+
+    if sys.platform != "darwin":
+        env.Append(LINKFLAGS=env.Split('-z origin'))
+
+    env.AddMethod(add_local_rpath, 'AddLocalRPATH')
+
+###################################################
+#
+# This builder and wrapper method are used to set up a directory with
+# switching headers. Those are headers which are in a generic location and
+# that include more specific headers from a directory chosen at build time
+# based on the current build settings.
+#
+###################################################
+
+def SwitchingHeaders(env):
+    def build_switching_header(target, source, env):
+        path = str(target[0])
+        subdir = str(source[0])
+        dp, fp = os.path.split(path)
+        dp = os.path.relpath(os.path.realpath(dp),
+                             os.path.realpath(env['BUILDDIR']))
+        with open(path, 'w') as hdr:
+            print('#include "%s/%s/%s"' % (dp, subdir, fp), file=hdr)
+
+    switching_header_action = MakeAction(build_switching_header,
+                                         Transform('GENERATE'))
+
+    switching_header_builder = env.Builder(action=switching_header_action,
+                                           source_factory=env.Value,
+                                           single_source=True)
+
+    env.Append(BUILDERS = { 'SwitchingHeader': switching_header_builder })
+
+    def switching_headers(self, headers, source):
+        for header in headers:
+            self.SwitchingHeader(header, source)
+
+    env.AddMethod(switching_headers, 'SwitchingHeaders')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/__init__.py gem5-SALAM/site_scons/gem5_scons/__init__.py
--- gem5/site_scons/gem5_scons/__init__.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/__init__.py	2024-02-22 18:17:14.968943786 -0600
@@ -39,7 +39,6 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 import os
-import pickle
 import sys
 import tempfile
 import textwrap
@@ -47,7 +46,6 @@
 from gem5_scons.util import get_termcap
 from gem5_scons.configure import Configure
 from gem5_scons.defaults import EnvDefaults
-import SCons.Node.Python
 import SCons.Script
 
 termcap = get_termcap()
@@ -262,11 +260,5 @@
         env['SHCCCOMSTR']      = Transform("SHCC")
         env['SHCXXCOMSTR']     = Transform("SHCXX")
 
-def ToValue(obj):
-    return SCons.Node.Python.Value(pickle.dumps(obj))
-
-def FromValue(node):
-    return pickle.loads(node.read())
-
 __all__ = ['Configure', 'EnvDefaults', 'Transform', 'warning', 'error',
-           'MakeAction', 'MakeActionTool', 'ToValue', 'FromValue']
+           'MakeAction', 'MakeActionTool']
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/sources.py gem5-SALAM/site_scons/gem5_scons/sources.py
--- gem5/site_scons/gem5_scons/sources.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/sources.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,239 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2018, 2020 ARM Limited
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2004-2005 The Regents of The University of Michigan
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import functools
-
-import SCons.Script
-
-########################################################################
-# Code for adding source files of various types
-#
-# When specifying a source file of some type, a set of tags can be
-# specified for that file.
-
-def tag_implies(env, tag, tag_list):
-    '''
-    Associates a tag X to a list of tags which are implied by X.
-
-    For example, assume:
-    - Each file <X>.cc is tagged with the tag "Tag <X>".
-    - B.cc refers to symbols from A.cc
-    - C.cc refers to symbols from B.cc
-    - D.cc refers to symbols from A.cc and C.cc
-
-    Then:
-    - "Tag A" is implied by "Tag B"
-    - "Tag B" is implied by "Tag C"
-    - "Tag A" is transitively implied by "Tag C" (from "Tag B")
-    - "Tag A" and "Tag C" are implied by "Tag D"
-    - "Tag B" is transitively implied by "Tag D" (from "Tag C")
-    - "Tag A" is transitively implied by "Tag D" (from transitive "Tag B")
-
-    All of these implications are simply declared as:
-        env.TagImplies("Tag B", "Tag A")
-        env.TagImplies("Tag C", "Tag B")
-        env.TagImplies("Tag D", ["Tag A", "Tag C"])
-
-    So that any use of a tag will automatically include its transitive tags
-    after being resolved.
-    '''
-
-    env.SetDefault(_tag_implies={})
-    implications = env['_tag_implies']
-
-    if isinstance(tag_list, str):
-        tag_list = frozenset([tag_list])
-    if not isinstance(tag_list, frozenset):
-        tag_list = frozenset(tag_list)
-    if tag in implications:
-        implications[tag] |= tag_list
-    else:
-        implications[tag] = tag_list
-
-    # Check if any of the tags on which the new tag depends on already
-    # has a list of implications. If so, add the list to the new tag's
-    # implications
-    for t in tag_list:
-        if t in implications:
-            implications[tag] |= implications[t]
-
-    # Check if another tag depends on this tag. If so, add this tag's
-    # implications to that tag.
-    for t,implied in implications.items():
-        if tag in implied:
-            implications[t] |= implications[tag]
-
-def TagImpliesTool(env):
-    env.AddMethod(tag_implies, 'TagImplies')
-
-def resolve_tags(env, tags):
-    '''
-    Returns the complete set of tags implied (dependencies) by the
-    supplied tags.
-    '''
-
-    implications = env.SetDefault(_tag_implies={})
-    implications = env['_tag_implies']
-
-    if isinstance(tags, str):
-        tags = frozenset([tags])
-    if not isinstance(tags, frozenset):
-        tags = frozenset(tags)
-
-    tags = tags.copy()
-    for tag in tags:
-        if tag in implications:
-            tags |= implications[tag]
-    return tags
-
-class SourceFilter(object):
-    factories = {}
-    def __init__(self, predicate):
-        self.predicate = predicate
-
-    def __or__(self, other):
-        return SourceFilter(lambda env, tags: self.predicate(env, tags) or
-                                              other.predicate(env, tags))
-
-    def __and__(self, other):
-        return SourceFilter(lambda env, tags: self.predicate(env, tags) and
-                                              other.predicate(env, tags))
-
-def with_any_tags(*tags):
-    '''Return a list of sources with any of the supplied tags.'''
-    return SourceFilter(lambda env, stags: \
-        len(resolve_tags(env, tags) & stags) > 0)
-
-def with_all_tags(*tags):
-    '''Return a list of sources with all of the supplied tags.'''
-    return SourceFilter(lambda env, stags: resolve_tags(env, tags) <= stags)
-
-def with_tag(tag):
-    '''Return a list of sources with the supplied tag.'''
-    return with_any_tags(*[tag])
-
-def without_tags(*tags):
-    '''Return a list of sources without any of the supplied tags.'''
-    return SourceFilter(lambda env, stags: \
-        len(resolve_tags(env, tags) & stags) == 0)
-
-def without_tag(tag):
-    '''Return a list of sources without the supplied tag.'''
-    return without_tags(*[tag])
-
-SourceFilter.factories.update({
-    'with_any_tags': with_any_tags,
-    'with_all_tags': with_all_tags,
-    'with_tag': with_tag,
-    'without_tags': without_tags,
-    'without_tag': without_tag,
-})
-
-class SourceList(list):
-    def apply_filter(self, env, f):
-        def match(source):
-            return f.predicate(env, source.tags)
-        return SourceList(filter(match, self))
-
-    def __getattr__(self, name):
-        func = SourceFilter.factories.get(name, None)
-        if not func:
-            raise AttributeError
-
-        @functools.wraps(func)
-        def wrapper(env, *args, **kwargs):
-            return self.apply_filter(env, func(*args, **kwargs))
-        return wrapper
-
-class SourceMeta(type):
-    '''Meta class for source files that keeps track of all files of a
-    particular type.'''
-    def __init__(cls, name, bases, dict):
-        super(SourceMeta, cls).__init__(name, bases, dict)
-        cls.all = SourceList()
-
-class SourceFile(object, metaclass=SourceMeta):
-    '''Base object that encapsulates the notion of a source file.
-    This includes, the source node, target node, various manipulations
-    of those.  A source file also specifies a set of tags which
-    describing arbitrary properties of the source file.'''
-
-    def __init__(self, source, tags=None, add_tags=None, append=None):
-        if tags is None:
-            tags='gem5 lib'
-        if isinstance(tags, str):
-            tags = { tags }
-        if not isinstance(tags, set):
-            tags = set(tags)
-        self.tags = tags
-
-        if add_tags:
-            if isinstance(add_tags, str):
-                add_tags = { add_tags }
-            if not isinstance(add_tags, set):
-                add_tags = set(add_tags)
-            self.tags |= add_tags
-
-        self.append = append
-
-        tnode = SCons.Script.File(source)
-
-        self.tnode = tnode
-        self.filename = str(self.tnode)
-        self.snode = tnode.srcnode()
-
-        for base in type(self).__mro__:
-            if issubclass(base, SourceFile):
-                base.all.append(self)
-
-    def static(self, env):
-        if self.append:
-            env = env.Clone()
-            env.Append(**self.append)
-        return env.StaticObject(self.tnode)
-
-    def shared(self, env):
-        if self.append:
-            env = env.Clone()
-            env.Append(**self.append)
-        return env.SharedObject(self.tnode)
-
-__all__ = ['TagImpliesTool', 'SourceFilter', 'SourceList', 'SourceFile',
-           'with_any_tags', 'with_all_tags', 'with_tag', 'without_tags',
-           'without_tag']
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/gem5_scons/util.py gem5-SALAM/site_scons/gem5_scons/util.py
--- gem5/site_scons/gem5_scons/util.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/gem5_scons/util.py	2024-02-22 18:17:14.968943786 -0600
@@ -38,8 +38,6 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-import array
-import functools
 import itertools
 import re
 import sys
@@ -111,17 +109,3 @@
         if n1 > n2: return  1
 
     return 0
-
-def bytesToCppArray(code, symbol, data):
-    '''
-    Output an array of bytes to a code formatter as a c++ array declaration.
-    '''
-    code('const std::uint8_t ${symbol}[] = {')
-    code.indent()
-    step = 16
-    for i in range(0, len(data), step):
-        x = array.array('B', data[i:i+step])
-        strs = map(lambda i: f'{i},', x)
-        code(functools.reduce(lambda x, y: x + y, strs))
-    code.dedent()
-    code('};')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/site_scons/site_init.py gem5-SALAM/site_scons/site_init.py
--- gem5/site_scons/site_init.py	2024-02-22 18:25:43.567604381 -0600
+++ gem5-SALAM/site_scons/site_init.py	2024-02-22 18:17:14.968943786 -0600
@@ -53,7 +53,7 @@
 
 # Check for the python version. Python 2 is no longer supported.
 try:
-    EnsurePythonVersion(3, 6)
+    EnsurePythonVersion(3, 0)
 except SystemExit as e:
     print("""\033[93m
 Python 3 is now required.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/gcn3/gpu_isa.hh gem5-SALAM/src/arch/amdgpu/gcn3/gpu_isa.hh
--- gem5/src/arch/amdgpu/gcn3/gpu_isa.hh	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/arch/amdgpu/gcn3/gpu_isa.hh	2024-02-22 18:17:14.972943807 -0600
@@ -57,7 +57,7 @@
         template<typename T> T
         readConstVal(int opIdx) const
         {
-            panic_if(!std::is_integral_v<T>, "Constant values must "
+            panic_if(!std::is_integral<T>::value, "Constant values must "
                      "be an integer.\n");
             T val(0);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/gcn3/insts/inst_util.hh gem5-SALAM/src/arch/amdgpu/gcn3/insts/inst_util.hh
--- gem5/src/arch/amdgpu/gcn3/insts/inst_util.hh	2024-02-22 18:25:43.575604423 -0600
+++ gem5-SALAM/src/arch/amdgpu/gcn3/insts/inst_util.hh	2024-02-22 18:17:14.972943807 -0600
@@ -247,7 +247,7 @@
     inline T
     median(T val_0, T val_1, T val_2)
     {
-        if (std::is_floating_point_v<T>) {
+        if (std::is_floating_point<T>::value) {
             return std::fmax(std::fmin(val_0, val_1),
                 std::fmin(std::fmax(val_0, val_1), val_2));
         } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/gcn3/insts/op_encodings.hh gem5-SALAM/src/arch/amdgpu/gcn3/insts/op_encodings.hh
--- gem5/src/arch/amdgpu/gcn3/insts/op_encodings.hh	2024-02-22 18:25:43.583604465 -0600
+++ gem5-SALAM/src/arch/amdgpu/gcn3/insts/op_encodings.hh	2024-02-22 18:17:14.980943849 -0600
@@ -886,12 +886,12 @@
                 for (int lane = 0; lane < NumVecElemPerVecReg; ++lane) {
                     if (gpuDynInst->exec_mask[lane]) {
                         Addr vaddr = gpuDynInst->addr[lane];
-                        auto amo_op =
+                        AtomicOpFunctor* amo_op =
                             gpuDynInst->makeAtomicOpFunctor<T>(
                                 &(reinterpret_cast<T*>(
                                     gpuDynInst->a_data))[lane],
                                 &(reinterpret_cast<T*>(
-                                    gpuDynInst->x_data))[lane]);
+                                    gpuDynInst->x_data))[lane]).get();
 
                         T tmp = wf->ldsChunk->read<T>(vaddr);
                         (*amo_op)(reinterpret_cast<uint8_t *>(&tmp));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/gcn3/operand.hh gem5-SALAM/src/arch/amdgpu/gcn3/operand.hh
--- gem5/src/arch/amdgpu/gcn3/operand.hh	2024-02-22 18:25:43.583604465 -0600
+++ gem5-SALAM/src/arch/amdgpu/gcn3/operand.hh	2024-02-22 18:17:14.980943849 -0600
@@ -274,12 +274,12 @@
                 DataType ret_val = scRegData.rawData();
 
                 if (absMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = std::fabs(ret_val);
                 }
 
                 if (negMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = -ret_val;
                 }
 
@@ -289,12 +289,12 @@
                 DataType ret_val = vgpr[idx];
 
                 if (absMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = std::fabs(ret_val);
                 }
 
                 if (negMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = -ret_val;
                 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/gcn3/SConsopts gem5-SALAM/src/arch/amdgpu/gcn3/SConsopts
--- gem5/src/arch/amdgpu/gcn3/SConsopts	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/arch/amdgpu/gcn3/SConsopts	2024-02-22 18:17:14.972943807 -0600
@@ -33,4 +33,4 @@
 
 Import('*')
 
-main.Append(ALL_GPU_ISAS=['gcn3'])
+all_gpu_isa_list.append('gcn3')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/vega/decoder.cc gem5-SALAM/src/arch/amdgpu/vega/decoder.cc
--- gem5/src/arch/amdgpu/vega/decoder.cc	2024-02-22 18:25:43.583604465 -0600
+++ gem5-SALAM/src/arch/amdgpu/vega/decoder.cc	2024-02-22 18:17:14.980943849 -0600
@@ -4440,7 +4440,6 @@
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_MUL_HI_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -4453,49 +4452,42 @@
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_LSHL1_ADD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_LSHL2_ADD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_LSHL3_ADD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_LSHL4_ADD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_PACK_LL_B32_B16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_PACK_LH_B32_B16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP2__S_HH_B32_B16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -4622,7 +4614,6 @@
     GPUStaticInst*
     Decoder::decode_OP_SOPK__S_CALL_B64(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -6843,126 +6834,108 @@
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MAD_U32_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MAD_I32_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_XAD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MIN3_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MIN3_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MIN3_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MAX3_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MAX3_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MAX3_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MED3_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MED3_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_MED3_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_LSHL_ADD_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_ADD_LSHL_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_ADD3_U32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_LSHL_OR_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_AND_OR_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_OR3_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -7029,7 +7002,6 @@
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_INTERP_P2_LEGACY_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -7186,49 +7158,42 @@
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_PKNORM_I16_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_PKNORM_U16_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_ADD_I32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_SUB_I32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_ADD_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_SUB_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OPU_VOP3__V_PACK_B32_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -7367,7 +7332,6 @@
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_WRITE_ADDTID_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -7698,56 +7662,48 @@
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_WRITE_B8_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_WRITE_B16_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_U8_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_U8_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_I8_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_I8_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_U16_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_U16_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -8030,7 +7986,6 @@
     GPUStaticInst*
     Decoder::decode_OP_DS__DS_READ_ADDTID_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -8223,7 +8178,6 @@
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_STORE_BYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -8236,7 +8190,6 @@
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_STORE_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -8267,42 +8220,36 @@
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_UBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_UBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_SBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_SBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_SHORT_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_FLAT__FLAT_LOAD_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -8465,336 +8412,288 @@
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_UBYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SBYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_USHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SSHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_DWORDX3(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_BYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_BYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_SHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_DWORDX3(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_STORE_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_UBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_UBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SHORT_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_LOAD_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_CMPSWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_ADD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SUB(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_UMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_UMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_AND(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_OR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_XOR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_INC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_DEC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_CMPSWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_ADD_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SUB_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_UMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_SMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_UMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_AND_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_OR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_XOR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_INC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_GLOBAL__GLOBAL_ATOMIC_DEC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -9149,7 +9048,6 @@
     GPUStaticInst*
     Decoder::decode_OP_MIMG__IMAGE_GATHER4H(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -9192,14 +9090,12 @@
     GPUStaticInst*
     Decoder::decode_OP_MIMG__IMAGE_GATHER4H_PCK(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_MIMG__IMAGE_GATHER8H_PCK(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -9603,7 +9499,6 @@
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_STORE_BYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -9616,7 +9511,6 @@
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_STORE_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -9821,154 +9715,132 @@
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_UBYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SBYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_USHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SSHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_DWORDX3(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_BYTE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_BYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_SHORT(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_DWORDX3(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_STORE_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_UBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_UBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SHORT_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SCRATCH__SCRATCH_LOAD_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -10005,21 +9877,18 @@
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_LOAD_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_LOAD_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_LOAD_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -10074,21 +9943,18 @@
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_STORE_DWORD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_STORE_DWORDX2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_SCRATCH_STORE_DWORDX4(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -10113,49 +9979,41 @@
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_UBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_UBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_SBYTE_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_SBYTE_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_SHORT_D16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_SHORT_D16_HI(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_LOAD_FORMAT_D16_HI_X(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
     GPUStaticInst*
     Decoder::decode_OP_MUBUF__BUFFER_STORE_FORMAT_D16_HI_X(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -10210,378 +10068,324 @@
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_DCACHE_DISCARD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_DCACHE_DISCARD_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_CMPSWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_ADD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SUB(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_UMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_UMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_AND(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_OR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_XOR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_INC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_DEC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_CMPSWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_ADD_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SUB_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_UMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_SMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_UMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_AND_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_OR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_XOR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_INC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_BUFFER_ATOMIC_DEC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_CMPSWAP(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_ADD(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SUB(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_UMIN(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_UMAX(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_AND(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_OR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_XOR(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_INC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_DEC(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_CMPSWAP_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_ADD_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SUB_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_UMIN_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_SMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_UMAX_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_AND_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_OR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_XOR_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_INC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SMEM__S_ATOMIC_DEC_X2(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -10882,35 +10686,30 @@
     GPUStaticInst*
     Decoder::decode_OP_SOP1__S_ANDN1_SAVEEXEC_B64(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP1__S_ORN1_SAVEEXEC_B64(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP1__S_ANDN1_WREXEC_B64(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP1__S_ANDN2_WREXEC_B64(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_SOP1__S_BITREPLICATE_B64_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -11217,7 +11016,6 @@
     GPUStaticInst*
     Decoder::decode_OP_SOPP__S_ENDPGM_ORDERED_PS_DONE(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -11560,7 +11358,6 @@
     GPUStaticInst*
     Decoder::decode_OP_VOP1__V_SCREEN_PARTITION_4SE_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -11687,28 +11484,24 @@
     GPUStaticInst*
     Decoder::decode_OP_VOP1__V_CVT_NORM_I16_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP1__V_CVT_NORM_U16_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP1__V_SAT_PK_U8_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP1__V_SWAP_B32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
@@ -12903,154 +12696,132 @@
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MAD_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MUL_LO_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_ADD_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_SUB_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_LSHLREV_B16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_LSHRREV_B16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_ASHRREV_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MAX_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MIN_I16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MAD_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_ADD_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_SUB_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MAX_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MIN_U16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_FMA_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_ADD_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MUL_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MIN_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_PK_MAX_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_MAD_MIX_F32(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_MAD_MIXLO_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
     GPUStaticInst*
     Decoder::decode_OP_VOP3P__V_MAD_MIXHI_F16(MachInst iFmt)
     {
-        fatal("Trying to decode instruction without a class\n");
         return nullptr;
     }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/vega/gpu_isa.hh gem5-SALAM/src/arch/amdgpu/vega/gpu_isa.hh
--- gem5/src/arch/amdgpu/vega/gpu_isa.hh	2024-02-22 18:25:43.583604465 -0600
+++ gem5-SALAM/src/arch/amdgpu/vega/gpu_isa.hh	2024-02-22 18:17:14.980943849 -0600
@@ -57,8 +57,8 @@
         template<typename T> T
         readConstVal(int opIdx) const
         {
-            panic_if(!std::is_integral_v<T>,
-                    "Constant values must be an integer.");
+            panic_if(!std::is_integral<T>::value, "Constant values must "
+                     "be an integer.\n");
             T val(0);
 
             if (isPosConstVal(opIdx)) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/vega/insts/inst_util.hh gem5-SALAM/src/arch/amdgpu/vega/insts/inst_util.hh
--- gem5/src/arch/amdgpu/vega/insts/inst_util.hh	2024-02-22 18:25:43.587604486 -0600
+++ gem5-SALAM/src/arch/amdgpu/vega/insts/inst_util.hh	2024-02-22 18:17:14.980943849 -0600
@@ -247,7 +247,7 @@
     inline T
     median(T val_0, T val_1, T val_2)
     {
-        if (std::is_floating_point_v<T>) {
+        if (std::is_floating_point<T>::value) {
             return std::fmax(std::fmin(val_0, val_1),
                 std::fmin(std::fmax(val_0, val_1), val_2));
         } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/vega/operand.hh gem5-SALAM/src/arch/amdgpu/vega/operand.hh
--- gem5/src/arch/amdgpu/vega/operand.hh	2024-02-22 18:25:43.595604528 -0600
+++ gem5-SALAM/src/arch/amdgpu/vega/operand.hh	2024-02-22 18:17:14.984943870 -0600
@@ -274,12 +274,12 @@
                 DataType ret_val = scRegData.rawData();
 
                 if (absMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = std::fabs(ret_val);
                 }
 
                 if (negMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = -ret_val;
                 }
 
@@ -289,12 +289,12 @@
                 DataType ret_val = vgpr[idx];
 
                 if (absMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = std::fabs(ret_val);
                 }
 
                 if (negMod) {
-                    assert(std::is_floating_point_v<DataType>);
+                    assert(std::is_floating_point<DataType>::value);
                     ret_val = -ret_val;
                 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/amdgpu/vega/SConsopts gem5-SALAM/src/arch/amdgpu/vega/SConsopts
--- gem5/src/arch/amdgpu/vega/SConsopts	2024-02-22 18:25:43.583604465 -0600
+++ gem5-SALAM/src/arch/amdgpu/vega/SConsopts	2024-02-22 18:17:14.980943849 -0600
@@ -33,4 +33,4 @@
 
 Import('*')
 
-main.Append(ALL_GPU_ISAS=['vega'])
+all_gpu_isa_list.append('vega')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/aapcs32.hh gem5-SALAM/src/arch/arm/aapcs32.hh
--- gem5/src/arch/arm/aapcs32.hh	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/aapcs32.hh	2024-02-22 18:17:14.984943870 -0600
@@ -38,9 +38,6 @@
 #include "base/intmath.hh"
 #include "cpu/thread_context.hh"
 #include "mem/port_proxy.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
-#include "sim/full_system.hh"
 #include "sim/guest_abi.hh"
 #include "sim/proxy_ptr.hh"
 
@@ -82,15 +79,14 @@
 
 template <typename T>
 struct IsAapcs32Composite<T, typename std::enable_if_t<
-    (std::is_array_v<T> || std::is_class_v<T> || std::is_union_v<T>) &&
+    (std::is_array<T>::value ||
+     std::is_class<T>::value ||
+     std::is_union<T>::value) &&
     // VarArgs is technically a composite type, but it's not a normal argument.
-    !IsVarArgsV<T>
+    !IsVarArgs<T>::value
     >> : public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs32CompositeV = IsAapcs32Composite<T>::value;
-
 // Homogeneous Aggregates
 // These *should* be any aggregate type which has only one type of member, but
 // we can't actually detect that or manipulate that with templates. Instead,
@@ -105,10 +101,6 @@
 template <typename E, size_t N>
 struct IsAapcs32HomogeneousAggregate<E[N]> : public std::true_type {};
 
-template <typename T>
-constexpr bool IsAapcs32HomogeneousAggregateV =
-    IsAapcs32HomogeneousAggregate<T>::value;
-
 struct Aapcs32ArgumentBase
 {
     template <typename T>
@@ -143,12 +135,12 @@
 
 template <typename Integer>
 struct Result<Aapcs32, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) < sizeof(uint32_t))>>
+    std::is_integral<Integer>::value && (sizeof(Integer) < sizeof(uint32_t))>>
 {
     static void
     store(ThreadContext *tc, const Integer &i)
     {
-        uint32_t val = std::is_signed_v<Integer> ?
+        uint32_t val = std::is_signed<Integer>::value ?
                 sext<sizeof(Integer) * 8>(i) : i;
         tc->setIntReg(ArmISA::INTREG_R0, val);
     }
@@ -156,7 +148,7 @@
 
 template <typename Integer>
 struct Result<Aapcs32, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) == sizeof(uint32_t))>>
+    std::is_integral<Integer>::value && (sizeof(Integer) == sizeof(uint32_t))>>
 {
     static void
     store(ThreadContext *tc, const Integer &i)
@@ -167,7 +159,7 @@
 
 template <typename Integer>
 struct Result<Aapcs32, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) == sizeof(uint64_t))>>
+    std::is_integral<Integer>::value && (sizeof(Integer) == sizeof(uint64_t))>>
 {
     static void
     store(ThreadContext *tc, const Integer &i)
@@ -184,7 +176,7 @@
 
 template <typename Integer>
 struct Argument<Aapcs32, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) <= sizeof(uint32_t))
+    std::is_integral<Integer>::value && (sizeof(Integer) <= sizeof(uint32_t))
     >> : public Aapcs32ArgumentBase
 {
     static Integer
@@ -203,7 +195,7 @@
 
 template <typename Integer>
 struct Argument<Aapcs32, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) > sizeof(uint32_t))
+    std::is_integral<Integer>::value && (sizeof(Integer) > sizeof(uint32_t))
     >> : public Aapcs32ArgumentBase
 {
     static Integer
@@ -239,7 +231,7 @@
 
 template <typename Float>
 struct Result<Aapcs32, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float>>>
+    std::is_floating_point<Float>::value>>
 {
     static void
     store(ThreadContext *tc, const Float &f, Aapcs32::State &state)
@@ -251,7 +243,7 @@
 
 template <typename Float>
 struct Argument<Aapcs32, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float>>> : public Aapcs32ArgumentBase
+    std::is_floating_point<Float>::value>> : public Aapcs32ArgumentBase
 {
     static Float
     get(ThreadContext *tc, Aapcs32::State &state)
@@ -273,7 +265,7 @@
 
 template <typename Composite>
 struct Result<Aapcs32, Composite, typename std::enable_if_t<
-    IsAapcs32CompositeV<Composite>>>
+    IsAapcs32Composite<Composite>::value>>
 {
     static void
     store(ThreadContext *tc, const Composite &composite,
@@ -301,7 +293,7 @@
 
 template <typename Composite>
 struct Argument<Aapcs32, Composite, typename std::enable_if_t<
-    IsAapcs32CompositeV<Composite>>> :
+    IsAapcs32Composite<Composite>::value>> :
     public Aapcs32ArgumentBase
 {
     static Composite
@@ -351,9 +343,7 @@
             }
 
             if (bytes) {
-                (FullSystem ? TranslatingPortProxy(tc) :
-                    SETranslatingPortProxy(tc)).readBlob(
-                    state.nsaa, buf, bytes);
+                tc->getVirtProxy().readBlob(state.nsaa, buf, bytes);
 
                 state.stackUsed = true;
                 state.nsaa += roundUp(bytes, 4);
@@ -450,12 +440,13 @@
 
 template <typename Integer>
 struct Result<Aapcs32Vfp, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer>>> : public Result<Aapcs32, Integer>
+    std::is_integral<Integer>::value>> : public Result<Aapcs32, Integer>
 {};
 
 template <typename Integer>
 struct Argument<Aapcs32Vfp, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer>>> : public Argument<Aapcs32, Integer>
+    std::is_integral<Integer>::value>> :
+    public Argument<Aapcs32, Integer>
 {};
 
 
@@ -465,7 +456,7 @@
 
 template <typename Float>
 struct Result<Aapcs32Vfp, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float>>>
+    std::is_floating_point<Float>::value>>
 {
     static void
     store(ThreadContext *tc, const Float &f, Aapcs32Vfp::State &state)
@@ -484,7 +475,7 @@
 
 template <typename Float>
 struct Argument<Aapcs32Vfp, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float>>> : public Aapcs32ArgumentBase
+    std::is_floating_point<Float>::value>> : public Aapcs32ArgumentBase
 {
     static Float
     get(ThreadContext *tc, Aapcs32Vfp::State &state)
@@ -515,15 +506,15 @@
 
 template <typename Composite>
 struct Result<Aapcs32Vfp, Composite, typename std::enable_if_t<
-    IsAapcs32CompositeV<Composite> &&
-    !IsAapcs32HomogeneousAggregateV<Composite>>> :
+    IsAapcs32Composite<Composite>::value &&
+    !IsAapcs32HomogeneousAggregate<Composite>::value>> :
     public Result<Aapcs32, Composite>
 {};
 
 template <typename Composite>
 struct Argument<Aapcs32Vfp, Composite, typename std::enable_if_t<
-    IsAapcs32CompositeV<Composite> &&
-    !IsAapcs32HomogeneousAggregateV<Composite>>> :
+    IsAapcs32Composite<Composite>::value &&
+    !IsAapcs32HomogeneousAggregate<Composite>::value>> :
     public Argument<Aapcs32, Composite>
 {};
 
@@ -540,7 +531,7 @@
 
 template <typename HA>
 struct Argument<Aapcs32Vfp, HA, typename std::enable_if_t<
-    IsAapcs32HomogeneousAggregateV<HA>>> :
+    IsAapcs32HomogeneousAggregate<HA>::value>> :
     public Aapcs32ArgumentBase
 {
     static bool
@@ -548,7 +539,7 @@
     {
         using Elem = typename Aapcs32ArrayType<HA>::Type;
         constexpr size_t Count = sizeof(HA) / sizeof(Elem);
-        return state.variadic || !std::is_floating_point_v<Elem> ||
+        return state.variadic || !std::is_floating_point<Elem>::value ||
             Count > 4;
     }
 
@@ -590,14 +581,14 @@
 
 template <typename HA>
 struct Result<Aapcs32Vfp, HA,
-    typename std::enable_if_t<IsAapcs32HomogeneousAggregateV<HA>>>
+    typename std::enable_if_t<IsAapcs32HomogeneousAggregate<HA>::value>>
 {
     static bool
     useBaseABI(Aapcs32Vfp::State &state)
     {
         using Elem = typename Aapcs32ArrayType<HA>::Type;
         constexpr size_t Count = sizeof(HA) / sizeof(Elem);
-        return state.variadic || !std::is_floating_point_v<Elem> ||
+        return state.variadic || !std::is_floating_point<Elem>::value ||
             Count > 4;
     }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/aapcs64.hh gem5-SALAM/src/arch/arm/aapcs64.hh
--- gem5/src/arch/arm/aapcs64.hh	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/aapcs64.hh	2024-02-22 18:17:14.984943870 -0600
@@ -84,14 +84,11 @@
 template <typename E, size_t N>
 struct IsAapcs64ShortVector<E[N],
     typename std::enable_if_t<
-        (std::is_integral_v<E> || std::is_floating_point_v<E>) &&
+        (std::is_integral<E>::value || std::is_floating_point<E>::value) &&
         (sizeof(E) * N == 8 || sizeof(E) * N == 16)>> :
         public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs64ShortVectorV = IsAapcs64ShortVector<T>::value;
-
 /*
  * Composite Types
  */
@@ -101,17 +98,16 @@
 
 template <typename T>
 struct IsAapcs64Composite<T, typename std::enable_if_t<
-    (std::is_array_v<T> || std::is_class_v<T> || std::is_union_v<T>) &&
+    (std::is_array<T>::value ||
+     std::is_class<T>::value ||
+     std::is_union<T>::value) &&
     // VarArgs is technically a composite type, but it's not a normal argument.
-    !IsVarArgsV<T> &&
+    !IsVarArgs<T>::value &&
     // Short vectors are also composite types, but don't treat them as one.
-    !IsAapcs64ShortVectorV<T>
+    !IsAapcs64ShortVector<T>::value
     >> : public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs64CompositeV = IsAapcs64Composite<T>::value;
-
 // Homogeneous Aggregates
 // These *should* be any aggregate type which has only one type of member, but
 // we can't actually detect that or manipulate that with templates. Instead,
@@ -126,13 +122,10 @@
 
 template <typename E, size_t N>
 struct IsAapcs64Hfa<E[N],
-    typename std::enable_if_t<std::is_floating_point_v<E> && N <= 4>> :
+    typename std::enable_if_t<std::is_floating_point<E>::value && N <= 4>> :
     public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs64HfaV = IsAapcs64Hfa<T>::value;
-
 // An Homogeneous Short-Vector Aggregate (HVA) is an Homogeneous Aggregate with
 // a Fundamental Data Type that is a Short-Vector type and at most four
 // uniquely addressable members.
@@ -142,26 +135,20 @@
 
 template <typename E, size_t N>
 struct IsAapcs64Hva<E[N],
-    typename std::enable_if_t<IsAapcs64ShortVectorV<E> && N <= 4>> :
+    typename std::enable_if_t<IsAapcs64ShortVector<E>::value && N <= 4>> :
     public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs64HvaV = IsAapcs64Hva<T>::value;
-
 // A shorthand to test if a type is an HVA or an HFA.
 template <typename T, typename Enabled=void>
 struct IsAapcs64Hxa : public std::false_type {};
 
 template <typename T>
 struct IsAapcs64Hxa<T, typename std::enable_if_t<
-    IsAapcs64HfaV<T> || IsAapcs64HvaV<T>>> :
+    IsAapcs64Hfa<T>::value || IsAapcs64Hva<T>::value>> :
     public std::true_type
 {};
 
-template <typename T>
-constexpr bool IsAapcs64HxaV = IsAapcs64Hxa<T>::value;
-
 struct Aapcs64ArgumentBase
 {
     template <typename T>
@@ -194,7 +181,8 @@
 
 template <typename Float>
 struct Argument<Aapcs64, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float> || IsAapcs64ShortVectorV<Float>>> :
+    std::is_floating_point<Float>::value ||
+    IsAapcs64ShortVector<Float>::value>> :
     public Aapcs64ArgumentBase
 {
     static Float
@@ -211,7 +199,8 @@
 
 template <typename Float>
 struct Result<Aapcs64, Float, typename std::enable_if_t<
-    std::is_floating_point_v<Float> || IsAapcs64ShortVectorV<Float>>>
+    std::is_floating_point<Float>::value ||
+    IsAapcs64ShortVector<Float>::value>>
 {
     static void
     store(ThreadContext *tc, const Float &f)
@@ -231,7 +220,7 @@
 // This will pick up Addr as well, which should be used for guest pointers.
 template <typename Integer>
 struct Argument<Aapcs64, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) <= 8)>> :
+    std::is_integral<Integer>::value && (sizeof(Integer) <= 8)>> :
     public Aapcs64ArgumentBase
 {
     static Integer
@@ -249,7 +238,7 @@
 
 template <typename Integer>
 struct Argument<Aapcs64, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) > 8)>> :
+    std::is_integral<Integer>::value && (sizeof(Integer) > 8)>> :
     public Aapcs64ArgumentBase
 {
     static Integer
@@ -274,7 +263,7 @@
 
 template <typename Integer>
 struct Result<Aapcs64, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) <= 8)>>
+    std::is_integral<Integer>::value && (sizeof(Integer) <= 8)>>
 {
     static void
     store(ThreadContext *tc, const Integer &i)
@@ -285,7 +274,7 @@
 
 template <typename Integer>
 struct Result<Aapcs64, Integer, typename std::enable_if_t<
-    std::is_integral_v<Integer> && (sizeof(Integer) > 8)>>
+    std::is_integral<Integer>::value && (sizeof(Integer) > 8)>>
 {
     static void
     store(ThreadContext *tc, const Integer &i)
@@ -309,7 +298,7 @@
 
 template <typename HA>
 struct Argument<Aapcs64, HA, typename std::enable_if_t<
-    IsAapcs64HxaV<HA>>> : public Aapcs64ArgumentBase
+    IsAapcs64Hxa<HA>::value>> : public Aapcs64ArgumentBase
 {
     static HA
     get(ThreadContext *tc, Aapcs64::State &state)
@@ -332,7 +321,8 @@
 };
 
 template <typename HA>
-struct Result<Aapcs64, HA, typename std::enable_if_t<IsAapcs64HxaV<HA>>>
+struct Result<Aapcs64, HA,
+    typename std::enable_if_t<IsAapcs64Hxa<HA>::value>>
 {
     static HA
     store(ThreadContext *tc, const HA &ha)
@@ -352,7 +342,7 @@
 
 template <typename Composite>
 struct Argument<Aapcs64, Composite, typename std::enable_if_t<
-    IsAapcs64CompositeV<Composite> && !IsAapcs64HxaV<Composite>>> :
+    IsAapcs64Composite<Composite>::value && !IsAapcs64Hxa<Composite>::value>> :
     public Aapcs64ArgumentBase
 {
     static Composite
@@ -397,7 +387,7 @@
 
 template <typename Composite>
 struct Result<Aapcs64, Composite, typename std::enable_if_t<
-    IsAapcs64CompositeV<Composite> && !IsAapcs64HxaV<Composite>>>
+    IsAapcs64Composite<Composite>::value && !IsAapcs64Hxa<Composite>::value>>
 {
     static void
     store(ThreadContext *tc, const Composite &c)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/aapcs64.test.cc gem5-SALAM/src/arch/arm/aapcs64.test.cc
--- gem5/src/arch/arm/aapcs64.test.cc	2024-02-22 18:16:36.432742318 -0600
+++ gem5-SALAM/src/arch/arm/aapcs64.test.cc	2024-02-22 18:17:14.984943870 -0600
@@ -42,41 +42,41 @@
     using EightLongFloat = float[2];
     using SixteenLongFloat = double[2];
 
-    EXPECT_FALSE(guest_abi::IsAapcs64ShortVectorV<Scalar>);
-    EXPECT_FALSE(guest_abi::IsAapcs64ShortVectorV<TooShort>);
-    EXPECT_FALSE(guest_abi::IsAapcs64ShortVectorV<TooLong>);
-    EXPECT_FALSE(guest_abi::IsAapcs64ShortVectorV<TooLongFloat>);
-    EXPECT_FALSE(guest_abi::IsAapcs64ShortVectorV<void>);
-
-    EXPECT_TRUE(guest_abi::IsAapcs64ShortVectorV<EightLong>);
-    EXPECT_TRUE(guest_abi::IsAapcs64ShortVectorV<SixteenLong>);
-    EXPECT_TRUE(guest_abi::IsAapcs64ShortVectorV<EightLongFloat>);
-    EXPECT_TRUE(guest_abi::IsAapcs64ShortVectorV<SixteenLongFloat>);
+    EXPECT_FALSE(guest_abi::IsAapcs64ShortVector<Scalar>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64ShortVector<TooShort>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64ShortVector<TooLong>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64ShortVector<TooLongFloat>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64ShortVector<void>::value);
+
+    EXPECT_TRUE(guest_abi::IsAapcs64ShortVector<EightLong>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64ShortVector<SixteenLong>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64ShortVector<EightLongFloat>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64ShortVector<SixteenLongFloat>::value);
 }
 
 TEST(Aapcs64, IsAapcs64Hfa)
 {
     // Accept floating point arrays with up to 4 members.
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<float[1]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<float[2]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<float[3]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<float[4]>);
-
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<double[1]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<double[2]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<double[3]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HfaV<double[4]>);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<float[1]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<float[2]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<float[3]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<float[4]>::value);
+
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<double[1]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<double[2]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<double[3]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hfa<double[4]>::value);
 
     // Too many members.
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<float[5]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<double[5]>);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<float[5]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<double[5]>::value);
 
     // Wrong type of members, or not arrays.
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<int32_t[3]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<float>);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<int32_t[3]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<float>::value);
     struct Struct {};
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<Struct>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HfaV<void>);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<Struct>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hfa<void>::value);
 }
 
 TEST(Aapcs64, IsAapcs64Hva)
@@ -85,36 +85,36 @@
     using SvaTiny = uint8_t[16];
     using SvaFloat = float[2];
 
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaInt[3]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaInt[4]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<SvaInt[5]>);
-
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaFloat[3]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaFloat[4]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<SvaFloat[5]>);
-
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaTiny[3]>);
-    EXPECT_TRUE(guest_abi::IsAapcs64HvaV<SvaTiny[4]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<SvaTiny[5]>);
-
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<uint64_t>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<uint64_t[1]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<SvaTiny>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<void>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HvaV<float>);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaInt[3]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaInt[4]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<SvaInt[5]>::value);
+
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaFloat[3]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaFloat[4]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<SvaFloat[5]>::value);
+
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaTiny[3]>::value);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hva<SvaTiny[4]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<SvaTiny[5]>::value);
+
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<uint64_t>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<uint64_t[1]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<SvaTiny>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<void>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hva<float>::value);
 }
 
 TEST(Aapcs64, IsAapcs64Hxa)
 {
     using SvaInt = uint32_t[2];
 
-    EXPECT_TRUE(guest_abi::IsAapcs64HxaV<SvaInt[4]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HxaV<SvaInt[5]>);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hxa<SvaInt[4]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hxa<SvaInt[5]>::value);
 
-    EXPECT_TRUE(guest_abi::IsAapcs64HxaV<float[4]>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HxaV<float[5]>);
+    EXPECT_TRUE(guest_abi::IsAapcs64Hxa<float[4]>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hxa<float[5]>::value);
 
-    EXPECT_FALSE(guest_abi::IsAapcs64HxaV<SvaInt>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HxaV<uint64_t>);
-    EXPECT_FALSE(guest_abi::IsAapcs64HxaV<void>);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hxa<SvaInt>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hxa<uint64_t>::value);
+    EXPECT_FALSE(guest_abi::IsAapcs64Hxa<void>::value);
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/ArmMMU.py gem5-SALAM/src/arch/arm/ArmMMU.py
--- gem5/src/arch/arm/ArmMMU.py	2024-02-22 18:25:43.595604528 -0600
+++ gem5-SALAM/src/arch/arm/ArmMMU.py	2024-02-22 18:17:14.984943870 -0600
@@ -1,6 +1,6 @@
 # -*- mode:python -*-
 
-# Copyright (c) 2020-2021 Arm Limited
+# Copyright (c) 2020 ARM Limited
 # All rights reserved.
 #
 # The license below extends only to copyright in the software and shall
@@ -35,7 +35,7 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from m5.objects.ArmTLB import ArmTLB, ArmStage2TLB
+from m5.objects.ArmTLB import ArmITB, ArmDTB, ArmStage2TLB
 from m5.objects.BaseMMU import BaseMMU
 from m5.objects.ClockedObject import ClockedObject
 from m5.params import *
@@ -62,22 +62,13 @@
     type = 'ArmMMU'
     cxx_class = 'gem5::ArmISA::MMU'
     cxx_header = 'arch/arm/mmu.hh'
-
-    # L2 TLBs
-    l2_shared = ArmTLB(entry_type="unified", size=1280)
-
-    # L1 TLBs
-    itb = ArmTLB(entry_type="instruction", next_level=Parent.l2_shared)
-    dtb = ArmTLB(entry_type="data", next_level=Parent.l2_shared)
+    itb = ArmITB()
+    dtb = ArmDTB()
 
     sys = Param.System(Parent.any, "system object parameter")
 
-    stage2_itb = Param.ArmTLB(
-        ArmStage2TLB(entry_type="instruction"),
-        "Stage 2 Instruction TLB")
-    stage2_dtb = Param.ArmTLB(
-        ArmStage2TLB(entry_type="data"),
-        "Stage 2 Data TLB")
+    stage2_itb = Param.ArmTLB(ArmStage2TLB(), "Stage 2 Instruction TLB")
+    stage2_dtb = Param.ArmTLB(ArmStage2TLB(), "Stage 2 Data TLB")
 
     itb_walker = Param.ArmTableWalker(
         ArmTableWalker(), "HW Table walker")
@@ -89,15 +80,10 @@
     stage2_dtb_walker = Param.ArmTableWalker(
         ArmStage2TableWalker(), "HW Table walker")
 
-    sys = Param.System(Parent.any, "system object parameter")
-
     @classmethod
     def walkerPorts(cls):
-        return ["mmu.itb_walker.port", "mmu.dtb_walker.port",
-                "mmu.stage2_itb_walker.port", "mmu.stage2_dtb_walker.port"]
+        return ["mmu.itb_walker.port", "mmu.dtb_walker.port"]
 
     def connectWalkerPorts(self, iport, dport):
         self.itb_walker.port = iport
         self.dtb_walker.port = dport
-        self.stage2_itb_walker.port = iport
-        self.stage2_dtb_walker.port = dport
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/ArmTLB.py gem5-SALAM/src/arch/arm/ArmTLB.py
--- gem5/src/arch/arm/ArmTLB.py	2024-02-22 18:25:43.595604528 -0600
+++ gem5-SALAM/src/arch/arm/ArmTLB.py	2024-02-22 18:17:14.984943870 -0600
@@ -51,3 +51,9 @@
 class ArmStage2TLB(ArmTLB):
     size = 32
     is_stage2 = True
+
+class ArmITB(ArmTLB):
+    pass
+
+class ArmDTB(ArmTLB):
+    pass
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/common/signal_sender.hh gem5-SALAM/src/arch/arm/fastmodel/common/signal_sender.hh
--- gem5/src/arch/arm/fastmodel/common/signal_sender.hh	2024-02-22 18:25:43.603604569 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/common/signal_sender.hh	1969-12-31 18:00:00.000000000 -0600
@@ -1,58 +0,0 @@
-/*
- * Copyright 2021 Google, Inc.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met: redistributions of source code must retain the above copyright
- * notice, this list of conditions and the following disclaimer;
- * redistributions in binary form must reproduce the above copyright
- * notice, this list of conditions and the following disclaimer in the
- * documentation and/or other materials provided with the distribution;
- * neither the name of the copyright holders nor the names of its
- * contributors may be used to endorse or promote products derived from
- * this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef __ARCH_ARM_FASTMODEL_COMMON_SIGNAL_SENDER_HH__
-#define __ARCH_ARM_FASTMODEL_COMMON_SIGNAL_SENDER_HH__
-
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Woverloaded-virtual"
-#include <amba_pv.h>
-#pragma GCC diagnostic pop
-
-#include "dev/intpin.hh"
-
-namespace FastModel
-{
-
-class SignalSender : public IntSinkPinBase
-{
-  public:
-    amba_pv::signal_master_port<bool> signal_out;
-
-    SignalSender(const std::string &_name, PortID _id) :
-        IntSinkPinBase(_name, _id, 0),
-        signal_out((_name + ".sig").c_str())
-    {}
-
-  private:
-    void raiseOnDevice() override { signal_out.set_state(id, true); }
-    void lowerOnDevice() override { signal_out.set_state(id, false); }
-};
-
-} // namespace FastModel
-
-#endif  // __ARCH_ARM_FASTMODEL_COMMON_SIGNAL_SENDER_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexA76/FastModelCortexA76.py gem5-SALAM/src/arch/arm/fastmodel/CortexA76/FastModelCortexA76.py
--- gem5/src/arch/arm/fastmodel/CortexA76/FastModelCortexA76.py	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexA76/FastModelCortexA76.py	2024-02-22 18:17:14.984943870 -0600
@@ -366,8 +366,8 @@
 
 class FastModelScxEvsCortexA76x1(SystemC_ScModule):
     type = 'FastModelScxEvsCortexA76x1'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexA76<' \
-                    'gem5::fastmodel::ScxEvsCortexA76x1Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexA76<fastmodel::ScxEvsCortexA76x1Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexA76/evs.hh'
 
@@ -378,8 +378,8 @@
 
 class FastModelScxEvsCortexA76x2(SystemC_ScModule):
     type = 'FastModelScxEvsCortexA76x2'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexA76<' \
-                    'gem5::fastmodel::ScxEvsCortexA76x2Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexA76<fastmodel::ScxEvsCortexA76x2Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexA76/evs.hh'
 
@@ -391,8 +391,8 @@
 
 class FastModelScxEvsCortexA76x3(SystemC_ScModule):
     type = 'FastModelScxEvsCortexA76x3'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexA76<' \
-                    'gem5::fastmodel::ScxEvsCortexA76x3Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexA76<fastmodel::ScxEvsCortexA76x3Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexA76/evs.hh'
 
@@ -405,8 +405,8 @@
 
 class FastModelScxEvsCortexA76x4(SystemC_ScModule):
     type = 'FastModelScxEvsCortexA76x4'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexA76<' \
-                    'gem5::fastmodel::ScxEvsCortexA76x4Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexA76<fastmodel::ScxEvsCortexA76x4Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexA76/evs.hh'
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexA76/thread_context.cc gem5-SALAM/src/arch/arm/fastmodel/CortexA76/thread_context.cc
--- gem5/src/arch/arm/fastmodel/CortexA76/thread_context.cc	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexA76/thread_context.cc	2024-02-22 18:17:14.984943870 -0600
@@ -67,8 +67,15 @@
         Iris::PhysicalMemorySecureMsn : Iris::PhysicalMemoryNonSecureMsn;
 
     // Figure out what memory spaces match the canonical numbers we need.
-    iris::MemorySpaceId in = getMemorySpaceId(in_msn);
-    iris::MemorySpaceId out = getMemorySpaceId(out_msn);
+    iris::MemorySpaceId in = iris::IRIS_UINT64_MAX;
+    iris::MemorySpaceId out = iris::IRIS_UINT64_MAX;
+
+    for (auto &space: memorySpaces) {
+        if (space.canonicalMsn == in_msn)
+            in = space.spaceId;
+        else if (space.canonicalMsn == out_msn)
+            out = space.spaceId;
+    }
 
     panic_if(in == iris::IRIS_UINT64_MAX || out == iris::IRIS_UINT64_MAX,
             "Canonical IRIS memory space numbers not found.");
@@ -181,13 +188,14 @@
 CortexA76TC::getBpSpaceIds() const
 {
     if (bpSpaceIds.empty()) {
-        std::vector<Iris::CanonicalMsn> msns{
-            Iris::SecureMonitorMsn, Iris::GuestMsn, Iris::NsHypMsn,
-            Iris::HypAppMsn};
-        for (auto &msn : msns) {
-            auto id = getMemorySpaceId(msn);
-            if (id != iris::IRIS_UINT64_MAX)
-                bpSpaceIds.push_back(id);
+        for (auto &space: memorySpaces) {
+            auto cmsn = space.canonicalMsn;
+            if (cmsn == Iris::SecureMonitorMsn ||
+                    cmsn == Iris::GuestMsn ||
+                    cmsn == Iris::NsHypMsn ||
+                    cmsn == Iris::HypAppMsn) {
+                bpSpaceIds.push_back(space.spaceId);
+            }
         }
         panic_if(bpSpaceIds.empty(),
                 "Unable to find address space(s) for breakpoints.");
@@ -522,7 +530,7 @@
         { ArmISA::MISCREG_CNTV_CVAL, "CNTV_CVAL" },
         { ArmISA::MISCREG_CNTVOFF, "CNTVOFF" },
         { ArmISA::MISCREG_CNTHP_CVAL, "CNTHP_CVAL" },
-        // ArmISA::MISCREG_CPUMERRSR?
+        { ArmISA::MISCREG_CPUMERRSR, "CPUMERRSR" },
         { ArmISA::MISCREG_L2MERRSR, "L2MERRSR" },
 
         // AArch64 registers (Op0=2)
@@ -806,7 +814,7 @@
         // ArmISA::MISCREG_L2ACTLR_EL1?
         { ArmISA::MISCREG_CPUACTLR_EL1, "CPUACTLR_EL1" },
         { ArmISA::MISCREG_CPUECTLR_EL1, "CPUECTLR_EL1" },
-        // ArmISA::MISCREG_CPUMERRSR_EL1?
+        { ArmISA::MISCREG_CPUMERRSR_EL1, "CPUMERRSR_EL1" },
         { ArmISA::MISCREG_L2MERRSR_EL1, "L2MERRSR_EL1" },
         // ArmISA::MISCREG_CBAR_EL1?
         { ArmISA::MISCREG_CONTEXTIDR_EL2, "CONTEXTIDR_EL2" },
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/cortex_r52.cc gem5-SALAM/src/arch/arm/fastmodel/CortexR52/cortex_r52.cc
--- gem5/src/arch/arm/fastmodel/CortexR52/cortex_r52.cc	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/cortex_r52.cc	2024-02-22 18:17:14.984943870 -0600
@@ -86,9 +86,7 @@
         // Since PPIs are indexed both by core and by number, modify the name
         // to hold the core number.
         return evs->gem5_getPort(csprintf("%s_%d", if_name, num), idx);
-    } else if (if_name == "amba" || if_name == "llpp" || if_name == "flash" ||
-               if_name == "core_reset" || if_name == "poweron_reset" ||
-               if_name == "halt") {
+    } else if (if_name == "amba" || if_name == "llpp" || if_name == "flash") {
         // Since these ports are scalar per core, use the core number as the
         // index. Also verify that that index is not being used.
         assert(idx == InvalidPortID);
@@ -152,9 +150,6 @@
 {
     if (if_name == "spi") {
         return evs->gem5_getPort(if_name, idx);
-    } else if (if_name == "ext_slave" || if_name == "top_reset") {
-        assert(idx == InvalidPortID);
-        return evs->gem5_getPort(if_name, idx);
     } else {
         return SimObject::getPort(if_name, idx);
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/evs.cc gem5-SALAM/src/arch/arm/fastmodel/CortexR52/evs.cc
--- gem5/src/arch/arm/fastmodel/CortexR52/evs.cc	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/evs.cc	2024-02-22 18:17:14.984943870 -0600
@@ -68,18 +68,12 @@
     evs(_evs), cpu(_cpu),
     llpp(evs->llpp[cpu], name + ".llpp", -1),
     flash(evs->flash[cpu], name + ".flash", -1),
-    amba(evs->amba[cpu], name + ".amba", -1),
-    core_reset(name + ".core_reset", 0),
-    poweron_reset(name + ".poweron_reset", 0),
-    halt(name + ".halt", 0)
+    amba(evs->amba[cpu], name + ".amba", -1)
 {
     for (int i = 0; i < Evs::PpiCount; i++) {
         ppis.emplace_back(
                 new CoreInt(csprintf("%s.ppi[%d]", name, i), i, this));
     }
-    core_reset.signal_out.bind(evs->core_reset[cpu]);
-    poweron_reset.signal_out.bind(evs->poweron_reset[cpu]);
-    halt.signal_out.bind(evs->halt[cpu]);
 }
 
 
@@ -87,9 +81,7 @@
 ScxEvsCortexR52<Types>::ScxEvsCortexR52(
         const sc_core::sc_module_name &mod_name, const Params &p) :
     Base(mod_name),
-    params(p),
-    ext_slave(Base::ext_slave, p.name + ".ext_slave", -1),
-    top_reset(p.name + ".top_reset", 0)
+    params(p)
 {
     for (int i = 0; i < CoreCount; i++)
         corePins.emplace_back(new CorePins(this, i));
@@ -99,8 +91,6 @@
                 new ClstrInt(csprintf("%s.spi[%d]", name(), i), i, this));
     }
 
-    top_reset.signal_out.bind(Base::top_reset);
-
     clockRateControl.bind(this->clock_rate_s);
     signalInterrupt.bind(this->signal_interrupt);
 }
@@ -125,16 +115,6 @@
         return this->corePins.at(idx)->flash;
     } else if (if_name == "amba") {
         return this->corePins.at(idx)->amba;
-    } else if (if_name == "core_reset") {
-        return this->corePins.at(idx)->core_reset;
-    } else if (if_name == "poweron_reset") {
-        return this->corePins.at(idx)->poweron_reset;
-    } else if (if_name == "halt") {
-        return this->corePins.at(idx)->halt;
-    } else if (if_name == "ext_slave") {
-        return this->ext_slave;
-    } else if (if_name == "top_reset") {
-        return this->top_reset;
     } else if (if_name == "spi") {
         return *this->spis.at(idx);
     } else if (if_name.substr(0, 3) == "ppi") {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/evs.hh gem5-SALAM/src/arch/arm/fastmodel/CortexR52/evs.hh
--- gem5/src/arch/arm/fastmodel/CortexR52/evs.hh	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/evs.hh	2024-02-22 18:17:14.984943870 -0600
@@ -32,7 +32,6 @@
 
 #include "arch/arm/fastmodel/amba_ports.hh"
 #include "arch/arm/fastmodel/common/signal_receiver.hh"
-#include "arch/arm/fastmodel/common/signal_sender.hh"
 #include "arch/arm/fastmodel/iris/cpu.hh"
 #include "arch/arm/fastmodel/protocol/exported_clock_rate_control.hh"
 #include "arch/arm/fastmodel/protocol/signal_interrupt.hh"
@@ -103,10 +102,6 @@
         AmbaInitiator llpp;
         AmbaInitiator flash;
         AmbaInitiator amba;
-
-        SignalSender core_reset;
-        SignalSender poweron_reset;
-        SignalSender halt;
     };
 
     std::vector<std::unique_ptr<CorePins>> corePins;
@@ -119,10 +114,6 @@
 
     const Params &params;
 
-    AmbaTarget ext_slave;
-
-    SignalSender top_reset;
-
   public:
     ScxEvsCortexR52(const Params &p) : ScxEvsCortexR52(p.name.c_str(), p) {}
     ScxEvsCortexR52(const sc_core::sc_module_name &mod_name, const Params &p);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/FastModelCortexR52.py gem5-SALAM/src/arch/arm/fastmodel/CortexR52/FastModelCortexR52.py
--- gem5/src/arch/arm/fastmodel/CortexR52/FastModelCortexR52.py	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/FastModelCortexR52.py	2024-02-22 18:17:14.984943870 -0600
@@ -29,8 +29,8 @@
 
 from m5.objects.ArmInterrupts import ArmInterrupts
 from m5.objects.ArmISA import ArmISA
-from m5.objects.FastModel import AmbaInitiatorSocket, AmbaTargetSocket
-from m5.objects.IntPin import IntSinkPin, VectorIntSinkPin
+from m5.objects.FastModel import AmbaInitiatorSocket
+from m5.objects.IntPin import VectorIntSinkPin
 from m5.objects.Iris import IrisBaseCPU
 from m5.objects.SystemC import SystemC_ScModule
 
@@ -46,11 +46,6 @@
     llpp = AmbaInitiatorSocket(64, 'Low Latency Peripheral Port')
     flash = AmbaInitiatorSocket(64, 'Flash')
     amba = AmbaInitiatorSocket(64, 'AMBA initiator socket')
-    core_reset = IntSinkPin('Raising this signal will put the core into ' \
-                            'reset mode.')
-    poweron_reset = IntSinkPin('Power on reset. Initializes all the ' \
-                               'processor logic, including debug logic.')
-    halt = IntSinkPin('Raising this signal will put the core into halt mode.')
 
     CFGEND = Param.Bool(False, "Endianness configuration at reset.  0, " \
             "little endian. 1, big endian.")
@@ -112,9 +107,6 @@
 
     spi = VectorIntSinkPin('SPI inputs (0-959)')
 
-    ext_slave = AmbaTargetSocket(64, 'AMBA target socket')
-    top_reset = IntSinkPin('This signal resets timer and interrupt controller.')
-
     CLUSTER_ID = Param.UInt16(0, "CLUSTER_ID[15:8] equivalent to " \
             "CFGMPIDRAFF2, CLUSTER_ID[7:0] equivalent to CFGMPIDRAFF1")
     DBGROMADDR = Param.UInt32(0, "Equivalent to CFGDBGROMADDR")
@@ -179,8 +171,8 @@
 
 class FastModelScxEvsCortexR52x1(SystemC_ScModule):
     type = 'FastModelScxEvsCortexR52x1'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexR52<' \
-                    'gem5::fastmodel::ScxEvsCortexR52x1Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexR52<fastmodel::ScxEvsCortexR52x1Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexR52/evs.hh'
 
@@ -191,8 +183,8 @@
 
 class FastModelScxEvsCortexR52x2(SystemC_ScModule):
     type = 'FastModelScxEvsCortexR52x2'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexR52<' \
-                    'gem5::fastmodel::ScxEvsCortexR52x2Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexR52<fastmodel::ScxEvsCortexR52x2Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexR52/evs.hh'
 
@@ -204,8 +196,8 @@
 
 class FastModelScxEvsCortexR52x3(SystemC_ScModule):
     type = 'FastModelScxEvsCortexR52x3'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexR52<' \
-                    'gem5::fastmodel::ScxEvsCortexR52x3Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexR52<fastmodel::ScxEvsCortexR52x3Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexR52/evs.hh'
 
@@ -218,8 +210,8 @@
 
 class FastModelScxEvsCortexR52x4(SystemC_ScModule):
     type = 'FastModelScxEvsCortexR52x4'
-    cxx_class = 'gem5::fastmodel::ScxEvsCortexR52<' \
-                    'gem5::fastmodel::ScxEvsCortexR52x4Types>'
+    cxx_class = \
+        'gem5::fastmodel::ScxEvsCortexR52<fastmodel::ScxEvsCortexR52x4Types>'
     cxx_template_params = [ 'class Types' ]
     cxx_header = 'arch/arm/fastmodel/CortexR52/evs.hh'
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/thread_context.cc gem5-SALAM/src/arch/arm/fastmodel/CortexR52/thread_context.cc
--- gem5/src/arch/arm/fastmodel/CortexR52/thread_context.cc	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/thread_context.cc	2024-02-22 18:17:14.984943870 -0600
@@ -67,8 +67,15 @@
         Iris::PhysicalMemorySecureMsn : Iris::PhysicalMemoryNonSecureMsn;
 
     // Figure out what memory spaces match the canonical numbers we need.
-    iris::MemorySpaceId in = getMemorySpaceId(in_msn);
-    iris::MemorySpaceId out = getMemorySpaceId(out_msn);
+    iris::MemorySpaceId in = iris::IRIS_UINT64_MAX;
+    iris::MemorySpaceId out = iris::IRIS_UINT64_MAX;
+
+    for (auto &space: memorySpaces) {
+        if (space.canonicalMsn == in_msn)
+            in = space.spaceId;
+        else if (space.canonicalMsn == out_msn)
+            out = space.spaceId;
+    }
 
     panic_if(in == iris::IRIS_UINT64_MAX || out == iris::IRIS_UINT64_MAX,
             "Canonical IRIS memory space numbers not found.");
@@ -83,8 +90,6 @@
 
     pcRscId = extractResourceId(resources, "R15");
 
-    extractResourceMap(miscRegIds, resources, miscRegIdxNameMap);
-
     extractResourceMap(intReg32Ids, resources, intReg32IdxNameMap);
     extractResourceMap(ccRegIds, resources, ccRegIdxNameMap);
 }
@@ -148,13 +153,14 @@
 CortexR52TC::getBpSpaceIds() const
 {
     if (bpSpaceIds.empty()) {
-        std::vector<Iris::CanonicalMsn> msns{
-            Iris::SecureMonitorMsn, Iris::GuestMsn, Iris::NsHypMsn,
-            Iris::HypAppMsn};
-        for (auto &msn : msns) {
-            auto id = getMemorySpaceId(msn);
-            if (id != iris::IRIS_UINT64_MAX)
-                bpSpaceIds.push_back(id);
+        for (auto &space: memorySpaces) {
+            auto cmsn = space.canonicalMsn;
+            if (cmsn == Iris::SecureMonitorMsn ||
+                    cmsn == Iris::GuestMsn ||
+                    cmsn == Iris::NsHypMsn ||
+                    cmsn == Iris::HypAppMsn) {
+                bpSpaceIds.push_back(space.spaceId);
+            }
         }
         panic_if(bpSpaceIds.empty(),
                 "Unable to find address space(s) for breakpoints.");
@@ -162,642 +168,6 @@
     return bpSpaceIds;
 }
 
-Iris::ThreadContext::IdxNameMap CortexR52TC::miscRegIdxNameMap({
-        { ArmISA::MISCREG_CPSR, "CPSR" },
-        { ArmISA::MISCREG_SPSR, "SPSR" },
-        // ArmISA::MISCREG_SPSR_FIQ?
-        // ArmISA::MISCREG_SPSR_IRQ?
-        // ArmISA::MISCREG_SPSR_SVC?
-        // ArmISA::MISCREG_SPSR_MON?
-        // ArmISA::MISCREG_SPSR_ABT?
-        // ArmISA::MISCREG_SPSR_HYP?
-        // ArmISA::MISCREG_SPSR_UND?
-        // ArmISA::MISCREG_ELR_HYP?
-        // ArmISA::MISCREG_FPSID?
-        // ArmISA::MISCREG_FPSCR?
-        // ArmISA::MISCREG_MVFR1?
-        // ArmISA::MISCREG_MVFR0?
-        // ArmISA::MISCREG_FPEXC?
-
-        // Helper registers
-        // ArmISA::MISCREG_CPSR_MODE?
-        // ArmISA::MISCREG_CPSR_Q?
-        // ArmISA::MISCREG_FPSCR_EXC?
-        // ArmISA::MISCREG_FPSCR_QC?
-        // ArmISA::MISCREG_LOCKADDR?
-        // ArmISA::MISCREG_LOCKFLAG?
-        // ArmISA::MISCREG_PRRR_MAIR0?
-        // ArmISA::MISCREG_PRRR_MAIR0_NS?
-        // ArmISA::MISCREG_PRRR_MAIR0_S?
-        // ArmISA::MISCREG_NMRR_MAIR1?
-        // ArmISA::MISCREG_NMRR_MAIR1_NS?
-        // ArmISA::MISCREG_NMRR_MAIR1_S?
-        // ArmISA::MISCREG_PMXEVTYPER_PMCCFILTR?
-        // ArmISA::MISCREG_SCTLR_RST?
-        // ArmISA::MISCREG_SEV_MAILBOX?
-
-        // AArch32 CP14 registers (debug/trace/ThumbEE/Jazelle control)
-        // ArmISA::MISCREG_DBGDIDR?
-        // ArmISA::MISCREG_DBGDSCRint?
-        // ArmISA::MISCREG_DBGDCCINT?
-        // ArmISA::MISCREG_DBGDTRTXint?
-        // ArmISA::MISCREG_DBGDTRRXint?
-        // ArmISA::MISCREG_DBGWFAR?
-        // ArmISA::MISCREG_DBGVCR?
-        // ArmISA::MISCREG_DBGDTRRXext?
-        // ArmISA::MISCREG_DBGDSCRext?
-        // ArmISA::MISCREG_DBGDTRTXext?
-        // ArmISA::MISCREG_DBGOSECCR?
-        // ArmISA::MISCREG_DBGBVR0?
-        // ArmISA::MISCREG_DBGBVR1?
-        // ArmISA::MISCREG_DBGBVR2?
-        // ArmISA::MISCREG_DBGBVR3?
-        // ArmISA::MISCREG_DBGBVR4?
-        // ArmISA::MISCREG_DBGBVR5?
-        // ArmISA::MISCREG_DBGBCR0?
-        // ArmISA::MISCREG_DBGBCR1?
-        // ArmISA::MISCREG_DBGBCR2?
-        // ArmISA::MISCREG_DBGBCR3?
-        // ArmISA::MISCREG_DBGBCR4?
-        // ArmISA::MISCREG_DBGBCR5?
-        // ArmISA::MISCREG_DBGWVR0?
-        // ArmISA::MISCREG_DBGWVR1?
-        // ArmISA::MISCREG_DBGWVR2?
-        // ArmISA::MISCREG_DBGWVR3?
-        // ArmISA::MISCREG_DBGWCR0?
-        // ArmISA::MISCREG_DBGWCR1?
-        // ArmISA::MISCREG_DBGWCR2?
-        // ArmISA::MISCREG_DBGWCR3?
-        // ArmISA::MISCREG_DBGDRAR?
-        // ArmISA::MISCREG_DBGBXVR4?
-        // ArmISA::MISCREG_DBGBXVR5?
-        // ArmISA::MISCREG_DBGOSLAR?
-        // ArmISA::MISCREG_DBGOSLSR?
-        // ArmISA::MISCREG_DBGOSDLR?
-        // ArmISA::MISCREG_DBGPRCR?
-        // ArmISA::MISCREG_DBGDSAR?
-        // ArmISA::MISCREG_DBGCLAIMSET?
-        // ArmISA::MISCREG_DBGCLAIMCLR?
-        // ArmISA::MISCREG_DBGAUTHSTATUS?
-        // ArmISA::MISCREG_DBGDEVID2?
-        // ArmISA::MISCREG_DBGDEVID1?
-        // ArmISA::MISCREG_DBGDEVID0?
-        // ArmISA::MISCREG_TEECR? not in ARM DDI 0487A.b+
-        // ArmISA::MISCREG_JIDR?
-        // ArmISA::MISCREG_TEEHBR? not in ARM DDI 0487A.b+
-        // ArmISA::MISCREG_JOSCR?
-        // ArmISA::MISCREG_JMCR?
-
-        // AArch32 CP15 registers (system control)
-        // ArmISA::MISCREG_MIDR?
-        // ArmISA::MISCREG_CTR?
-        // ArmISA::MISCREG_TCMTR?
-        // ArmISA::MISCREG_TLBTR?
-        // ArmISA::MISCREG_MPIDR?
-        // ArmISA::MISCREG_REVIDR?
-        // ArmISA::MISCREG_ID_PFR0?
-        // ArmISA::MISCREG_ID_PFR1?
-        // ArmISA::MISCREG_ID_DFR0?
-        // ArmISA::MISCREG_ID_AFR0?
-        // ArmISA::MISCREG_ID_MMFR0?
-        // ArmISA::MISCREG_ID_MMFR1?
-        // ArmISA::MISCREG_ID_MMFR2?
-        // ArmISA::MISCREG_ID_MMFR3?
-        // ArmISA::MISCREG_ID_MMFR4?
-        // ArmISA::MISCREG_ID_ISAR0?
-        // ArmISA::MISCREG_ID_ISAR1?
-        // ArmISA::MISCREG_ID_ISAR2?
-        // ArmISA::MISCREG_ID_ISAR3?
-        // ArmISA::MISCREG_ID_ISAR4?
-        // ArmISA::MISCREG_ID_ISAR5?
-        // ArmISA::MISCREG_ID_ISAR6?
-        // ArmISA::MISCREG_CCSIDR?
-        // ArmISA::MISCREG_CLIDR?
-        // ArmISA::MISCREG_AIDR?
-        // ArmISA::MISCREG_CSSELR?
-        // ArmISA::MISCREG_CSSELR_NS?
-        // ArmISA::MISCREG_CSSELR_S?
-        // ArmISA::MISCREG_VPIDR?
-        // ArmISA::MISCREG_VMPIDR?
-        // ArmISA::MISCREG_SCTLR?
-        // ArmISA::MISCREG_SCTLR_NS?
-        // ArmISA::MISCREG_SCTLR_S?
-        // ArmISA::MISCREG_ACTLR?
-        // ArmISA::MISCREG_ACTLR_NS?
-        // ArmISA::MISCREG_ACTLR_S?
-        // ArmISA::MISCREG_CPACR?
-        // ArmISA::MISCREG_SCR?
-        // ArmISA::MISCREG_SDER?
-        // ArmISA::MISCREG_NSACR?
-        // ArmISA::MISCREG_HSCTLR?
-        // ArmISA::MISCREG_HACTLR?
-        // ArmISA::MISCREG_HCR?
-        // ArmISA::MISCREG_HDCR?
-        // ArmISA::MISCREG_HCPTR?
-        // ArmISA::MISCREG_HSTR?
-        // ArmISA::MISCREG_HACR?
-        // ArmISA::MISCREG_TTBR0?
-        // ArmISA::MISCREG_TTBR0_NS?
-        // ArmISA::MISCREG_TTBR0_S?
-        // ArmISA::MISCREG_TTBR1?
-        // ArmISA::MISCREG_TTBR1_NS?
-        // ArmISA::MISCREG_TTBR1_S?
-        // ArmISA::MISCREG_TTBCR?
-        // ArmISA::MISCREG_TTBCR_NS?
-        // ArmISA::MISCREG_TTBCR_S?
-        // ArmISA::MISCREG_HTCR?
-        // ArmISA::MISCREG_VTCR?
-        // ArmISA::MISCREG_DACR?
-        // ArmISA::MISCREG_DACR_NS?
-        // ArmISA::MISCREG_DACR_S?
-        // ArmISA::MISCREG_DFSR?
-        // ArmISA::MISCREG_DFSR_NS?
-        // ArmISA::MISCREG_DFSR_S?
-        // ArmISA::MISCREG_IFSR?
-        // ArmISA::MISCREG_IFSR_NS?
-        // ArmISA::MISCREG_IFSR_S?
-        // ArmISA::MISCREG_ADFSR?
-        // ArmISA::MISCREG_ADFSR_NS?
-        // ArmISA::MISCREG_ADFSR_S?
-        // ArmISA::MISCREG_AIFSR?
-        // ArmISA::MISCREG_AIFSR_NS?
-        // ArmISA::MISCREG_AIFSR_S?
-        // ArmISA::MISCREG_HADFSR?
-        // ArmISA::MISCREG_HAIFSR?
-        // ArmISA::MISCREG_HSR?
-        // ArmISA::MISCREG_DFAR?
-        // ArmISA::MISCREG_DFAR_NS?
-        // ArmISA::MISCREG_DFAR_S?
-        // ArmISA::MISCREG_IFAR?
-        // ArmISA::MISCREG_IFAR_NS?
-        // ArmISA::MISCREG_IFAR_S?
-        // ArmISA::MISCREG_HDFAR?
-        // ArmISA::MISCREG_HIFAR?
-        // ArmISA::MISCREG_HPFAR?
-        // ArmISA::MISCREG_ICIALLUIS?
-        // ArmISA::MISCREG_BPIALLIS?
-        // ArmISA::MISCREG_PAR?
-        // ArmISA::MISCREG_PAR_NS?
-        // ArmISA::MISCREG_PAR_S?
-        // ArmISA::MISCREG_ICIALLU?
-        // ArmISA::MISCREG_ICIMVAU?
-        // ArmISA::MISCREG_CP15ISB?
-        // ArmISA::MISCREG_BPIALL?
-        // ArmISA::MISCREG_BPIMVA?
-        // ArmISA::MISCREG_DCIMVAC?
-        // ArmISA::MISCREG_DCISW?
-        // ArmISA::MISCREG_ATS1CPR?
-        // ArmISA::MISCREG_ATS1CPW?
-        // ArmISA::MISCREG_ATS1CUR?
-        // ArmISA::MISCREG_ATS1CUW?
-        // ArmISA::MISCREG_ATS12NSOPR?
-        // ArmISA::MISCREG_ATS12NSOPW?
-        // ArmISA::MISCREG_ATS12NSOUR?
-        // ArmISA::MISCREG_ATS12NSOUW?
-        // ArmISA::MISCREG_DCCMVAC?
-        // ArmISA::MISCREG_DCCSW?
-        // ArmISA::MISCREG_CP15DSB?
-        // ArmISA::MISCREG_CP15DMB?
-        // ArmISA::MISCREG_DCCMVAU?
-        // ArmISA::MISCREG_DCCIMVAC?
-        // ArmISA::MISCREG_DCCISW?
-        // ArmISA::MISCREG_ATS1HR?
-        // ArmISA::MISCREG_ATS1HW?
-        // ArmISA::MISCREG_TLBIALLIS?
-        // ArmISA::MISCREG_TLBIMVAIS?
-        // ArmISA::MISCREG_TLBIASIDIS?
-        // ArmISA::MISCREG_TLBIMVAAIS?
-        // ArmISA::MISCREG_TLBIMVALIS?
-        // ArmISA::MISCREG_TLBIMVAALIS?
-        // ArmISA::MISCREG_ITLBIALL?
-        // ArmISA::MISCREG_ITLBIMVA?
-        // ArmISA::MISCREG_ITLBIASID?
-        // ArmISA::MISCREG_DTLBIALL?
-        // ArmISA::MISCREG_DTLBIMVA?
-        // ArmISA::MISCREG_DTLBIASID?
-        // ArmISA::MISCREG_TLBIALL?
-        // ArmISA::MISCREG_TLBIMVA?
-        // ArmISA::MISCREG_TLBIASID?
-        // ArmISA::MISCREG_TLBIMVAA?
-        // ArmISA::MISCREG_TLBIMVAL?
-        // ArmISA::MISCREG_TLBIMVAAL?
-        // ArmISA::MISCREG_TLBIIPAS2IS?
-        // ArmISA::MISCREG_TLBIIPAS2LIS?
-        // ArmISA::MISCREG_TLBIALLHIS?
-        // ArmISA::MISCREG_TLBIMVAHIS?
-        // ArmISA::MISCREG_TLBIALLNSNHIS?
-        // ArmISA::MISCREG_TLBIMVALHIS?
-        // ArmISA::MISCREG_TLBIIPAS2?
-        // ArmISA::MISCREG_TLBIIPAS2L?
-        // ArmISA::MISCREG_TLBIALLH?
-        // ArmISA::MISCREG_TLBIMVAH?
-        // ArmISA::MISCREG_TLBIALLNSNH?
-        // ArmISA::MISCREG_TLBIMVALH?
-        // ArmISA::MISCREG_PMCR?
-        // ArmISA::MISCREG_PMCNTENSET?
-        // ArmISA::MISCREG_PMCNTENCLR?
-        // ArmISA::MISCREG_PMOVSR?
-        // ArmISA::MISCREG_PMSWINC?
-        // ArmISA::MISCREG_PMSELR?
-        // ArmISA::MISCREG_PMCEID0?
-        // ArmISA::MISCREG_PMCEID1?
-        // ArmISA::MISCREG_PMCCNTR?
-        // ArmISA::MISCREG_PMXEVTYPER?
-        // ArmISA::MISCREG_PMCCFILTR?
-        // ArmISA::MISCREG_PMXEVCNTR?
-        // ArmISA::MISCREG_PMUSERENR?
-        // ArmISA::MISCREG_PMINTENSET?
-        // ArmISA::MISCREG_PMINTENCLR?
-        // ArmISA::MISCREG_PMOVSSET?
-        // ArmISA::MISCREG_L2CTLR?
-        // ArmISA::MISCREG_L2ECTLR?
-        // ArmISA::MISCREG_PRRR?
-        // ArmISA::MISCREG_PRRR_NS?
-        // ArmISA::MISCREG_PRRR_S?
-        // ArmISA::MISCREG_MAIR0?
-        // ArmISA::MISCREG_MAIR0_NS?
-        // ArmISA::MISCREG_MAIR0_S?
-        // ArmISA::MISCREG_NMRR?
-        // ArmISA::MISCREG_NMRR_NS?
-        // ArmISA::MISCREG_NMRR_S?
-        // ArmISA::MISCREG_MAIR1?
-        // ArmISA::MISCREG_MAIR1_NS?
-        // ArmISA::MISCREG_MAIR1_S?
-        // ArmISA::MISCREG_AMAIR0?
-        // ArmISA::MISCREG_AMAIR0_NS?
-        // ArmISA::MISCREG_AMAIR0_S?
-        // ArmISA::MISCREG_AMAIR1?
-        // ArmISA::MISCREG_AMAIR1_NS?
-        // ArmISA::MISCREG_AMAIR1_S?
-        // ArmISA::MISCREG_HMAIR0?
-        // ArmISA::MISCREG_HMAIR1?
-        // ArmISA::MISCREG_HAMAIR0?
-        // ArmISA::MISCREG_HAMAIR1?
-        // ArmISA::MISCREG_VBAR?
-        // ArmISA::MISCREG_VBAR_NS?
-        // ArmISA::MISCREG_VBAR_S?
-        // ArmISA::MISCREG_MVBAR?
-        // ArmISA::MISCREG_RMR?
-        // ArmISA::MISCREG_ISR?
-        // ArmISA::MISCREG_HVBAR?
-        // ArmISA::MISCREG_FCSEIDR?
-        // ArmISA::MISCREG_CONTEXTIDR?
-        // ArmISA::MISCREG_CONTEXTIDR_NS?
-        // ArmISA::MISCREG_CONTEXTIDR_S?
-        // ArmISA::MISCREG_TPIDRURW?
-        // ArmISA::MISCREG_TPIDRURW_NS?
-        // ArmISA::MISCREG_TPIDRURW_S?
-        // ArmISA::MISCREG_TPIDRURO?
-        // ArmISA::MISCREG_TPIDRURO_NS?
-        // ArmISA::MISCREG_TPIDRURO_S?
-        // ArmISA::MISCREG_TPIDRPRW?
-        // ArmISA::MISCREG_TPIDRPRW_NS?
-        /// ArmISA::MISCREG_TPIDRPRW_S?
-        // ArmISA::MISCREG_HTPIDR?
-        // ArmISA::MISCREG_CNTFRQ?
-        // ArmISA::MISCREG_CNTKCTL?
-        // ArmISA::MISCREG_CNTP_TVAL?
-        // ArmISA::MISCREG_CNTP_TVAL_NS?
-        // ArmISA::MISCREG_CNTP_TVAL_S?
-        // ArmISA::MISCREG_CNTP_CTL?
-        // ArmISA::MISCREG_CNTP_CTL_NS?
-        // ArmISA::MISCREG_CNTP_CTL_S?
-        // ArmISA::MISCREG_CNTV_TVAL?
-        // ArmISA::MISCREG_CNTV_CTL?
-        // ArmISA::MISCREG_CNTHCTL?
-        // ArmISA::MISCREG_CNTHP_TVAL?
-        // ArmISA::MISCREG_CNTHP_CTL?
-        // ArmISA::MISCREG_IL1DATA0?
-        // ArmISA::MISCREG_IL1DATA1?
-        // ArmISA::MISCREG_IL1DATA2?
-        // ArmISA::MISCREG_IL1DATA3?
-        // ArmISA::MISCREG_DL1DATA0?
-        // ArmISA::MISCREG_DL1DATA1?
-        // ArmISA::MISCREG_DL1DATA2?
-        // ArmISA::MISCREG_DL1DATA3?
-        // ArmISA::MISCREG_DL1DATA4?
-        // ArmISA::MISCREG_RAMINDEX?
-        // ArmISA::MISCREG_L2ACTLR?
-        // ArmISA::MISCREG_CBAR?
-        // ArmISA::MISCREG_HTTBR?
-        // ArmISA::MISCREG_VTTBR?
-        // ArmISA::MISCREG_CNTPCT?
-        // ArmISA::MISCREG_CNTVCT?
-        // ArmISA::MISCREG_CNTP_CVAL?
-        // ArmISA::MISCREG_CNTP_CVAL_NS?
-        // ArmISA::MISCREG_CNTP_CVAL_S?
-        // ArmISA::MISCREG_CNTV_CVAL?
-        // ArmISA::MISCREG_CNTVOFF?
-        // ArmISA::MISCREG_CNTHP_CVAL?
-        // ArmISA::MISCREG_CPUMERRSR?
-        // ArmISA::MISCREG_L2MERRSR?
-
-        // AArch64 registers (Op0=2)
-        // ArmISA::MISCREG_MDCCINT_EL1?
-        // ArmISA::MISCREG_OSDTRRX_EL1?
-        // ArmISA::MISCREG_MDSCR_EL1?
-        // ArmISA::MISCREG_OSDTRTX_EL1?
-        // ArmISA::MISCREG_OSECCR_EL1?
-        // ArmISA::MISCREG_DBGBVR0_EL1?
-        // ArmISA::MISCREG_DBGBVR1_EL1?
-        // ArmISA::MISCREG_DBGBVR2_EL1?
-        // ArmISA::MISCREG_DBGBVR3_EL1?
-        // ArmISA::MISCREG_DBGBVR4_EL1?
-        // ArmISA::MISCREG_DBGBVR5_EL1?
-        // ArmISA::MISCREG_DBGBCR0_EL1?
-        // ArmISA::MISCREG_DBGBCR1_EL1?
-        // ArmISA::MISCREG_DBGBCR2_EL1?
-        // ArmISA::MISCREG_DBGBCR3_EL1?
-        // ArmISA::MISCREG_DBGBCR4_EL1?
-        // ArmISA::MISCREG_DBGBCR5_EL1?
-        // ArmISA::MISCREG_DBGWVR0_EL1?
-        // ArmISA::MISCREG_DBGWVR1_EL1?
-        // ArmISA::MISCREG_DBGWVR2_EL1?
-        // ArmISA::MISCREG_DBGWVR3_EL1?
-        // ArmISA::MISCREG_DBGWCR0_EL1?
-        // ArmISA::MISCREG_DBGWCR1_EL1?
-        // ArmISA::MISCREG_DBGWCR2_EL1?
-        // ArmISA::MISCREG_DBGWCR3_EL1?
-        // ArmISA::MISCREG_MDCCSR_EL0?
-        // ArmISA::MISCREG_MDDTR_EL0?
-        // ArmISA::MISCREG_MDDTRTX_EL0?
-        // ArmISA::MISCREG_MDDTRRX_EL0?
-        // ArmISA::MISCREG_DBGVCR32_EL2?
-        // ArmISA::MISCREG_MDRAR_EL1?
-        // ArmISA::MISCREG_OSLAR_EL1?
-        // ArmISA::MISCREG_OSLSR_EL1?
-        // ArmISA::MISCREG_OSDLR_EL1?
-        // ArmISA::MISCREG_DBGPRCR_EL1?
-        // ArmISA::MISCREG_DBGCLAIMSET_EL1?
-        // ArmISA::MISCREG_DBGCLAIMCLR_EL1?
-        // ArmISA::MISCREG_DBGAUTHSTATUS_EL1?
-        // ArmISA::MISCREG_TEECR32_EL1? not in ARM DDI 0487A.b+
-        // ArmISA::MISCREG_TEEHBR32_EL1? not in ARM DDI 0487A.b+
-
-        // AArch64 registers (Op0=1)
-        // ArmISA::MISCREG_MIDR_EL1?
-        // ArmISA::MISCREG_MPIDR_EL1?
-        // ArmISA::MISCREG_REVIDR_EL1?
-        // ArmISA::MISCREG_ID_PFR0_EL1?
-        // ArmISA::MISCREG_ID_PFR1_EL1?
-        // ArmISA::MISCREG_ID_DFR0_EL1?
-        // ArmISA::MISCREG_ID_AFR0_EL1?
-        // ArmISA::MISCREG_ID_MMFR0_EL1?
-        // ArmISA::MISCREG_ID_MMFR1_EL1?
-        // ArmISA::MISCREG_ID_MMFR2_EL1?
-        // ArmISA::MISCREG_ID_MMFR3_EL1?
-        // ArmISA::MISCREG_ID_MMFR4_EL1?
-        // ArmISA::MISCREG_ID_ISAR0_EL1?
-        // ArmISA::MISCREG_ID_ISAR1_EL1?
-        // ArmISA::MISCREG_ID_ISAR2_EL1?
-        // ArmISA::MISCREG_ID_ISAR3_EL1?
-        // ArmISA::MISCREG_ID_ISAR4_EL1?
-        // ArmISA::MISCREG_ID_ISAR5_EL1?
-        // ArmISA::MISCREG_ID_ISAR6_EL1?
-        // ArmISA::MISCREG_MVFR0_EL1?
-        // ArmISA::MISCREG_MVFR1_EL1?
-        // ArmISA::MISCREG_MVFR2_EL1?
-        // ArmISA::MISCREG_ID_AA64PFR0_EL1?
-        // ArmISA::MISCREG_ID_AA64PFR1_EL1?
-        // ArmISA::MISCREG_ID_AA64DFR0_EL1?
-        // ArmISA::MISCREG_ID_AA64DFR1_EL1?
-        // ArmISA::MISCREG_ID_AA64AFR0_EL1?
-        // ArmISA::MISCREG_ID_AA64AFR1_EL1?
-        // ArmISA::MISCREG_ID_AA64ISAR0_EL1?
-        // ArmISA::MISCREG_ID_AA64ISAR1_EL1?
-        // ArmISA::MISCREG_ID_AA64MMFR0_EL1?
-        // ArmISA::MISCREG_ID_AA64MMFR1_EL1?
-        // ArmISA::MISCREG_CCSIDR_EL1?
-        // ArmISA::MISCREG_CLIDR_EL1?
-        // ArmISA::MISCREG_AIDR_EL1?
-        // ArmISA::MISCREG_CSSELR_EL1?
-        // ArmISA::MISCREG_CTR_EL0?
-        // ArmISA::MISCREG_DCZID_EL0?
-        // ArmISA::MISCREG_VPIDR_EL2?
-        // ArmISA::MISCREG_VMPIDR_EL2?
-        // ArmISA::MISCREG_SCTLR_EL1?
-        // ArmISA::MISCREG_ACTLR_EL1?
-        // ArmISA::MISCREG_CPACR_EL1?
-        // ArmISA::MISCREG_SCTLR_EL2?
-        // ArmISA::MISCREG_ACTLR_EL2?
-        // ArmISA::MISCREG_HCR_EL2?
-        // ArmISA::MISCREG_MDCR_EL2?
-        // ArmISA::MISCREG_CPTR_EL2?
-        // ArmISA::MISCREG_HSTR_EL2?
-        // ArmISA::MISCREG_HACR_EL2?
-        // ArmISA::MISCREG_SCTLR_EL3?
-        // ArmISA::MISCREG_ACTLR_EL3?
-        // ArmISA::MISCREG_SCR_EL3?
-        // ArmISA::MISCREG_SDER32_EL3?
-        // ArmISA::MISCREG_CPTR_EL3?
-        // ArmISA::MISCREG_MDCR_EL3?
-        // ArmISA::MISCREG_TTBR0_EL1?
-        // ArmISA::MISCREG_TTBR1_EL1?
-        // ArmISA::MISCREG_TCR_EL1?
-        // ArmISA::MISCREG_TTBR0_EL2?
-        // ArmISA::MISCREG_TCR_EL2?
-        // ArmISA::MISCREG_VTTBR_EL2?
-        // ArmISA::MISCREG_VTCR_EL2?
-        // ArmISA::MISCREG_TTBR0_EL3?
-        // ArmISA::MISCREG_TCR_EL3?
-        // ArmISA::MISCREG_DACR32_EL2?
-        // ArmISA::MISCREG_SPSR_EL1?
-        // ArmISA::MISCREG_ELR_EL1?
-        // ArmISA::MISCREG_SP_EL0?
-        // ArmISA::MISCREG_SPSEL?
-        // ArmISA::MISCREG_CURRENTEL?
-        // ArmISA::MISCREG_NZCV?
-        // ArmISA::MISCREG_DAIF?
-        // ArmISA::MISCREG_FPCR?
-        // ArmISA::MISCREG_FPSR?
-        // ArmISA::MISCREG_DSPSR_EL0?
-        // ArmISA::MISCREG_DLR_EL0?
-        // ArmISA::MISCREG_SPSR_EL2?
-        // ArmISA::MISCREG_ELR_EL2?
-        // ArmISA::MISCREG_SP_EL1?
-        // ArmISA::MISCREG_SPSR_IRQ_AA64?
-        // ArmISA::MISCREG_SPSR_ABT_AA64?
-        // ArmISA::MISCREG_SPSR_UND_AA64?
-        // ArmISA::MISCREG_SPSR_FIQ_AA64?
-        // ArmISA::MISCREG_SPSR_EL3?
-        // ArmISA::MISCREG_ELR_EL3?
-        // ArmISA::MISCREG_SP_EL2?
-        // ArmISA::MISCREG_AFSR0_EL1?
-        // ArmISA::MISCREG_AFSR1_EL1?
-        // ArmISA::MISCREG_ESR_EL1?
-        // ArmISA::MISCREG_IFSR32_EL2?
-        // ArmISA::MISCREG_AFSR0_EL2?
-        // ArmISA::MISCREG_AFSR1_EL2?
-        // ArmISA::MISCREG_ESR_EL2?
-        // ArmISA::MISCREG_FPEXC32_EL2?
-        // ArmISA::MISCREG_AFSR0_EL3?
-        // ArmISA::MISCREG_AFSR1_EL3?
-        // ArmISA::MISCREG_ESR_EL3?
-        // ArmISA::MISCREG_FAR_EL1?
-        // ArmISA::MISCREG_FAR_EL2?
-        // ArmISA::MISCREG_HPFAR_EL2?
-        // ArmISA::MISCREG_FAR_EL3?
-        // ArmISA::MISCREG_IC_IALLUIS?
-        // ArmISA::MISCREG_PAR_EL1?
-        // ArmISA::MISCREG_IC_IALLU?
-        // ArmISA::MISCREG_DC_IVAC_Xt?
-        // ArmISA::MISCREG_DC_ISW_Xt?
-        // ArmISA::MISCREG_AT_S1E1R_Xt?
-        // ArmISA::MISCREG_AT_S1E1W_Xt?
-        // ArmISA::MISCREG_AT_S1E0R_Xt?
-        // ArmISA::MISCREG_AT_S1E0W_Xt?
-        // ArmISA::MISCREG_DC_CSW_Xt?
-        // ArmISA::MISCREG_DC_CISW_Xt?
-        // ArmISA::MISCREG_DC_ZVA_Xt?
-        // ArmISA::MISCREG_IC_IVAU_Xt?
-        // ArmISA::MISCREG_DC_CVAC_Xt?
-        // ArmISA::MISCREG_DC_CVAU_Xt?
-        // ArmISA::MISCREG_DC_CIVAC_Xt?
-        // ArmISA::MISCREG_AT_S1E2R_Xt?
-        // ArmISA::MISCREG_AT_S1E2W_Xt?
-        // ArmISA::MISCREG_AT_S12E1R_Xt?
-        // ArmISA::MISCREG_AT_S12E1W_Xt?
-        // ArmISA::MISCREG_AT_S12E0R_Xt?
-        // ArmISA::MISCREG_AT_S12E0W_Xt?
-        // ArmISA::MISCREG_AT_S1E3R_Xt?
-        // ArmISA::MISCREG_AT_S1E3W_Xt?
-        // ArmISA::MISCREG_TLBI_VMALLE1IS?
-        // ArmISA::MISCREG_TLBI_VAE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_ASIDE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_VAAE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_VALE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_VAALE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_VMALLE1?
-        // ArmISA::MISCREG_TLBI_VAE1_Xt?
-        // ArmISA::MISCREG_TLBI_ASIDE1_Xt?
-        // ArmISA::MISCREG_TLBI_VAAE1_Xt?
-        // ArmISA::MISCREG_TLBI_VALE1_Xt?
-        // ArmISA::MISCREG_TLBI_VAALE1_Xt?
-        // ArmISA::MISCREG_TLBI_IPAS2E1IS_Xt?
-        // ArmISA::MISCREG_TLBI_IPAS2LE1IS_Xt?
-        // ArmISA::MISCREG_TLBI_ALLE2IS?
-        // ArmISA::MISCREG_TLBI_VAE2IS_Xt?
-        // ArmISA::MISCREG_TLBI_ALLE1IS?
-        // ArmISA::MISCREG_TLBI_VALE2IS_Xt?
-        // ArmISA::MISCREG_TLBI_VMALLS12E1IS?
-        // ArmISA::MISCREG_TLBI_IPAS2E1_Xt?
-        // ArmISA::MISCREG_TLBI_IPAS2LE1_Xt?
-        // ArmISA::MISCREG_TLBI_ALLE2?
-        // ArmISA::MISCREG_TLBI_VAE2_Xt?
-        // ArmISA::MISCREG_TLBI_ALLE1?
-        // ArmISA::MISCREG_TLBI_VALE2_Xt?
-        // ArmISA::MISCREG_TLBI_VMALLS12E1?
-        // ArmISA::MISCREG_TLBI_ALLE3IS?
-        // ArmISA::MISCREG_TLBI_VAE3IS_Xt?
-        // ArmISA::MISCREG_TLBI_VALE3IS_Xt?
-        // ArmISA::MISCREG_TLBI_ALLE3?
-        // ArmISA::MISCREG_TLBI_VAE3_Xt?
-        // ArmISA::MISCREG_TLBI_VALE3_Xt?
-        // ArmISA::MISCREG_PMINTENSET_EL1?
-        // ArmISA::MISCREG_PMINTENCLR_EL1?
-        // ArmISA::MISCREG_PMCR_EL0?
-        // ArmISA::MISCREG_PMCNTENSET_EL0?
-        // ArmISA::MISCREG_PMCNTENCLR_EL0?
-        // ArmISA::MISCREG_PMOVSCLR_EL0?
-        // ArmISA::MISCREG_PMSWINC_EL0?
-        // ArmISA::MISCREG_PMSELR_EL0?
-        // ArmISA::MISCREG_PMCEID0_EL0?
-        // ArmISA::MISCREG_PMCEID1_EL0?
-        // ArmISA::MISCREG_PMCCNTR_EL0?
-        // ArmISA::MISCREG_PMXEVTYPER_EL0?
-        // ArmISA::MISCREG_PMCCFILTR_EL0?
-        // ArmISA::MISCREG_PMXEVCNTR_EL0?
-        // ArmISA::MISCREG_PMUSERENR_EL0?
-        // ArmISA::MISCREG_PMOVSSET_EL0?
-        // ArmISA::MISCREG_MAIR_EL1?
-        // ArmISA::MISCREG_AMAIR_EL1?
-        // ArmISA::MISCREG_MAIR_EL2?
-        // ArmISA::MISCREG_AMAIR_EL2?
-        // ArmISA::MISCREG_MAIR_EL3?
-        // ArmISA::MISCREG_AMAIR_EL3?
-        // ArmISA::MISCREG_L2CTLR_EL1?
-        // ArmISA::MISCREG_L2ECTLR_EL1?
-        // ArmISA::MISCREG_VBAR_EL1?
-        // ArmISA::MISCREG_RVBAR_EL1?
-        // ArmISA::MISCREG_ISR_EL1?
-        // ArmISA::MISCREG_VBAR_EL2?
-        // ArmISA::MISCREG_RVBAR_EL2?
-        // ArmISA::MISCREG_VBAR_EL3?
-        // ArmISA::MISCREG_RVBAR_EL3?
-        // ArmISA::MISCREG_RMR_EL3?
-        // ArmISA::MISCREG_CONTEXTIDR_EL1?
-        // ArmISA::MISCREG_TPIDR_EL1?
-        // ArmISA::MISCREG_TPIDR_EL0?
-        // ArmISA::MISCREG_TPIDRRO_EL0?
-        // ArmISA::MISCREG_TPIDR_EL2?
-        // ArmISA::MISCREG_TPIDR_EL3?
-        // ArmISA::MISCREG_CNTKCTL_EL1?
-        // ArmISA::MISCREG_CNTFRQ_EL0?
-        // ArmISA::MISCREG_CNTPCT_EL0?
-        // ArmISA::MISCREG_CNTVCT_EL0?
-        // ArmISA::MISCREG_CNTP_TVAL_EL0?
-        // ArmISA::MISCREG_CNTP_CTL_EL0?
-        // ArmISA::MISCREG_CNTP_CVAL_EL0?
-        // ArmISA::MISCREG_CNTV_TVAL_EL0?
-        // ArmISA::MISCREG_CNTV_CTL_EL0?
-        // ArmISA::MISCREG_CNTV_CVAL_EL0?
-        // ArmISA::MISCREG_PMEVCNTR0_EL0?
-        // ArmISA::MISCREG_PMEVCNTR1_EL0?
-        // ArmISA::MISCREG_PMEVCNTR2_EL0?
-        // ArmISA::MISCREG_PMEVCNTR3_EL0?
-        // ArmISA::MISCREG_PMEVCNTR4_EL0?
-        // ArmISA::MISCREG_PMEVCNTR5_EL0?
-        // ArmISA::MISCREG_PMEVTYPER0_EL0?
-        // ArmISA::MISCREG_PMEVTYPER1_EL0?
-        // ArmISA::MISCREG_PMEVTYPER2_EL0?
-        // ArmISA::MISCREG_PMEVTYPER3_EL0?
-        // ArmISA::MISCREG_PMEVTYPER4_EL0?
-        // ArmISA::MISCREG_PMEVTYPER5_EL0?
-        // ArmISA::MISCREG_CNTVOFF_EL2?
-        // ArmISA::MISCREG_CNTHCTL_EL2?
-        // ArmISA::MISCREG_CNTHP_TVAL_EL2?
-        // ArmISA::MISCREG_CNTHP_CTL_EL2?
-        // ArmISA::MISCREG_CNTHP_CVAL_EL2?
-        // ArmISA::MISCREG_CNTPS_TVAL_EL1?
-        // ArmISA::MISCREG_CNTPS_CTL_EL1?
-        // ArmISA::MISCREG_CNTPS_CVAL_EL1?
-        // ArmISA::MISCREG_IL1DATA0_EL1?
-        // ArmISA::MISCREG_IL1DATA1_EL1?
-        // ArmISA::MISCREG_IL1DATA2_EL1?
-        // ArmISA::MISCREG_IL1DATA3_EL1?
-        // ArmISA::MISCREG_DL1DATA0_EL1?
-        // ArmISA::MISCREG_DL1DATA1_EL1?
-        // ArmISA::MISCREG_DL1DATA2_EL1?
-        // ArmISA::MISCREG_DL1DATA3_EL1?
-        // ArmISA::MISCREG_DL1DATA4_EL1?
-        // ArmISA::MISCREG_L2ACTLR_EL1?
-        // ArmISA::MISCREG_CPUACTLR_EL1?
-        // ArmISA::MISCREG_CPUECTLR_EL1?
-        // ArmISA::MISCREG_CPUMERRSR_EL1?
-        // ArmISA::MISCREG_L2MERRSR_EL1?
-        // ArmISA::MISCREG_CBAR_EL1?
-        // ArmISA::MISCREG_CONTEXTIDR_EL2?
-
-        // Introduced in ARMv8.1
-        // ArmISA::MISCREG_TTBR1_EL2?
-        // ArmISA::MISCREG_CNTHV_CTL_EL2?
-        // ArmISA::MISCREG_CNTHV_CVAL_EL2?
-        // ArmISA::MISCREG_CNTHV_TVAL_EL2?
-
-        // RAS extension (unimplemented)
-        // ArmISA::MISCREG_ERRIDR_EL1?
-        // ArmISA::MISCREG_ERRSELR_EL1?
-        // ArmISA::MISCREG_ERXFR_EL1?
-        // ArmISA::MISCREG_ERXCTLR_EL1?
-        // ArmISA::MISCREG_ERXSTATUS_EL1?
-        // ArmISA::MISCREG_ERXADDR_EL1?
-        // ArmISA::MISCREG_ERXMISC0_EL1?
-        // ArmISA::MISCREG_ERXMISC1_EL1?
-        // ArmISA::MISCREG_DISR_EL1?
-        // ArmISA::MISCREG_VSESR_EL2?
-        // ArmISA::MISCREG_VDISR_EL2?
-});
-
 Iris::ThreadContext::IdxNameMap CortexR52TC::intReg32IdxNameMap({
         { ArmISA::INTREG_R0, "R0" },
         { ArmISA::INTREG_R1, "R1" },
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/thread_context.hh gem5-SALAM/src/arch/arm/fastmodel/CortexR52/thread_context.hh
--- gem5/src/arch/arm/fastmodel/CortexR52/thread_context.hh	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/thread_context.hh	2024-02-22 18:17:14.984943870 -0600
@@ -42,7 +42,6 @@
 class CortexR52TC : public Iris::ThreadContext
 {
   protected:
-    static IdxNameMap miscRegIdxNameMap;
     static IdxNameMap intReg32IdxNameMap;
     static IdxNameMap ccRegIdxNameMap;
     static std::vector<iris::MemorySpaceId> bpSpaceIds;
@@ -75,19 +74,15 @@
     // just return dummy values on reads and throw away writes, throw an
     // error, or some combination of the two.
     RegVal
-    readMiscRegNoEffect(RegIndex idx) const override
+    readMiscRegNoEffect(RegIndex) const override
     {
-        panic_if(miscRegIdxNameMap.find(idx) == miscRegIdxNameMap.end(),
-                "No mapping for index %#x.", idx);
-        return Iris::ThreadContext::readMiscRegNoEffect(idx);
+        panic("%s not implemented.", __FUNCTION__);
     }
 
     void
-    setMiscRegNoEffect(RegIndex idx, const RegVal val) override
+    setMiscRegNoEffect(RegIndex, const RegVal) override
     {
-        panic_if(miscRegIdxNameMap.find(idx) == miscRegIdxNameMap.end(),
-                "No mapping for index %#x.", idx);
-        Iris::ThreadContext::setMiscRegNoEffect(idx, val);
+        panic("%s not implemented.", __FUNCTION__);
     }
 
     // Like the Misc regs, not currently supported and a little complicated.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/x1/x1.lisa gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x1/x1.lisa
--- gem5/src/arch/arm/fastmodel/CortexR52/x1/x1.lisa	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x1/x1.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -44,11 +44,6 @@
         core.llpp_m => self.llpp;
         core.flash_m => self.flash;
         core.pvbus_core_m => self.amba;
-        self.ext_slave => core.ext_slave_s;
-        self.core_reset => core.reset;
-        self.poweron_reset => core.cpuporeset;
-        self.top_reset => core.topreset;
-        self.halt => core.cpuhalt;
 
         // Clocks.
         clock1Hz.clk_out => clockDiv.clk_in;
@@ -69,11 +64,6 @@
     master port<PVBus> llpp[1];
     master port<PVBus> flash[1];
     master port<PVBus> amba[1];
-    slave port<PVBus> ext_slave;
-    slave port<Signal> core_reset[1];
-    slave port<Signal> poweron_reset[1];
-    slave port<Signal> halt[1];
-    slave port<Signal> top_reset;
 
     slave port<ExportedClockRateControl> clock_rate_s
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/x2/x2.lisa gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x2/x2.lisa
--- gem5/src/arch/arm/fastmodel/CortexR52/x2/x2.lisa	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x2/x2.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -44,11 +44,6 @@
         core.llpp_m => self.llpp;
         core.flash_m => self.flash;
         core.pvbus_core_m => self.amba;
-        self.ext_slave => core.ext_slave_s;
-        self.core_reset => core.reset;
-        self.poweron_reset => core.cpuporeset;
-        self.top_reset => core.topreset;
-        self.halt => core.cpuhalt;
 
         // Clocks.
         clock1Hz.clk_out => clockDiv.clk_in;
@@ -70,11 +65,6 @@
     master port<PVBus> llpp[2];
     master port<PVBus> flash[2];
     master port<PVBus> amba[2];
-    slave port<PVBus> ext_slave;
-    slave port<Signal> core_reset[2];
-    slave port<Signal> poweron_reset[2];
-    slave port<Signal> halt[2];
-    slave port<Signal> top_reset;
 
     slave port<ExportedClockRateControl> clock_rate_s
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/x3/x3.lisa gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x3/x3.lisa
--- gem5/src/arch/arm/fastmodel/CortexR52/x3/x3.lisa	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x3/x3.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -44,11 +44,6 @@
         core.llpp_m => self.llpp;
         core.flash_m => self.flash;
         core.pvbus_core_m => self.amba;
-        self.ext_slave => core.ext_slave_s;
-        self.core_reset => core.reset;
-        self.poweron_reset => core.cpuporeset;
-        self.top_reset => core.topreset;
-        self.halt => core.cpuhalt;
 
         // Clocks.
         clock1Hz.clk_out => clockDiv.clk_in;
@@ -71,11 +66,6 @@
     master port<PVBus> llpp[3];
     master port<PVBus> flash[3];
     master port<PVBus> amba[3];
-    slave port<PVBus> ext_slave;
-    slave port<Signal> core_reset[3];
-    slave port<Signal> poweron_reset[3];
-    slave port<Signal> halt[3];
-    slave port<Signal> top_reset;
 
     slave port<ExportedClockRateControl> clock_rate_s
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/CortexR52/x4/x4.lisa gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x4/x4.lisa
--- gem5/src/arch/arm/fastmodel/CortexR52/x4/x4.lisa	2024-02-22 18:25:43.603604569 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/CortexR52/x4/x4.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -44,11 +44,6 @@
         core.llpp_m => self.llpp;
         core.flash_m => self.flash;
         core.pvbus_core_m => self.amba;
-        self.ext_slave => core.ext_slave_s;
-        self.core_reset => core.reset;
-        self.poweron_reset => core.cpuporeset;
-        self.top_reset => core.topreset;
-        self.halt => core.cpuhalt;
 
         // Clocks.
         clock1Hz.clk_out => clockDiv.clk_in;
@@ -72,11 +67,6 @@
     master port<PVBus> llpp[4];
     master port<PVBus> flash[4];
     master port<PVBus> amba[4];
-    slave port<PVBus> ext_slave;
-    slave port<Signal> core_reset[4];
-    slave port<Signal> poweron_reset[4];
-    slave port<Signal> halt[4];
-    slave port<Signal> top_reset;
 
     slave port<ExportedClockRateControl> clock_rate_s
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/iris/cpu.cc gem5-SALAM/src/arch/arm/fastmodel/iris/cpu.cc
--- gem5/src/arch/arm/fastmodel/iris/cpu.cc	2024-02-22 18:16:36.436742339 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/iris/cpu.cc	2024-02-22 18:17:14.988943891 -0600
@@ -67,6 +67,14 @@
 }
 
 void
+BaseCPU::init()
+{
+    gem5::BaseCPU::init();
+    for (auto *tc: threadContexts)
+        tc->initMemProxies(tc);
+}
+
+void
 BaseCPU::serializeThread(CheckpointOut &cp, ThreadID tid) const
 {
     gem5::serialize(*threadContexts[tid], cp);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/iris/cpu.hh gem5-SALAM/src/arch/arm/fastmodel/iris/cpu.hh
--- gem5/src/arch/arm/fastmodel/iris/cpu.hh	2024-02-22 18:25:43.603604569 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/iris/cpu.hh	2024-02-22 18:17:14.988943891 -0600
@@ -100,6 +100,8 @@
         evs_base_cpu->setClkPeriod(clockPeriod());
     }
 
+    void init() override;
+
     void serializeThread(CheckpointOut &cp, ThreadID tid) const override;
 };
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/iris/Iris.py gem5-SALAM/src/arch/arm/fastmodel/iris/Iris.py
--- gem5/src/arch/arm/fastmodel/iris/Iris.py	2024-02-22 18:25:43.603604569 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/iris/Iris.py	2024-02-22 18:17:14.988943891 -0600
@@ -53,8 +53,8 @@
     type = 'IrisMMU'
     cxx_class = 'gem5::Iris::MMU'
     cxx_header = 'arch/arm/fastmodel/iris/mmu.hh'
-    itb = IrisTLB(entry_type="instruction")
-    dtb = IrisTLB(entry_type="data")
+    itb = IrisTLB()
+    dtb = IrisTLB()
 
 class IrisInterrupts(BaseInterrupts):
     type = 'IrisInterrupts'
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/iris/thread_context.cc gem5-SALAM/src/arch/arm/fastmodel/iris/thread_context.cc
--- gem5/src/arch/arm/fastmodel/iris/thread_context.cc	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/iris/thread_context.cc	2024-02-22 18:17:14.988943891 -0600
@@ -39,16 +39,11 @@
 
 #include "arch/arm/fastmodel/iris/thread_context.hh"
 
-#include <cstdint>
-#include <cstring>
 #include <utility>
-#include <vector>
 
 #include "arch/arm/fastmodel/iris/cpu.hh"
-#include "arch/arm/fastmodel/iris/memory_spaces.hh"
 #include "arch/arm/system.hh"
 #include "arch/arm/utility.hh"
-#include "base/logging.hh"
 #include "iris/detail/IrisCppAdapter.h"
 #include "iris/detail/IrisObjects.h"
 #include "mem/se_translating_port_proxy.hh"
@@ -71,10 +66,6 @@
     suspend();
 
     call().memory_getMemorySpaces(_instId, memorySpaces);
-    for (const auto &space: memorySpaces) {
-        memorySpaceIds.emplace(
-            Iris::CanonicalMsn(space.canonicalMsn), space.spaceId);
-    }
     call().memory_getUsefulAddressTranslations(_instId, translations);
 
     typedef ThreadContext Self;
@@ -125,13 +116,6 @@
     }
 }
 
-iris::MemorySpaceId
-ThreadContext::getMemorySpaceId(const Iris::CanonicalMsn& msn) const
-{
-    auto it = memorySpaceIds.find(msn);
-    return it == memorySpaceIds.end() ? iris::IRIS_UINT64_MAX : it->second;
-}
-
 void
 ThreadContext::maintainStepping()
 {
@@ -436,27 +420,6 @@
     return true;
 }
 
-void
-ThreadContext::readMem(
-    iris::MemorySpaceId space, Addr addr, void *p, size_t size)
-{
-    iris::r0master::MemoryReadResult r;
-    auto err = call().memory_read(_instId, r, space, addr, 1, size);
-    panic_if(err != iris::r0master::E_ok, "readMem failed.");
-    std::memcpy(p, r.data.data(), size);
-}
-
-void
-ThreadContext::writeMem(
-    iris::MemorySpaceId space, Addr addr, const void *p, size_t size)
-{
-    std::vector<uint64_t> data((size + 7) / 8);
-    std::memcpy(data.data(), p, size);
-    iris::MemoryWriteResult r;
-    auto err = call().memory_write(_instId, r, space, addr, 1, size, data);
-    panic_if(err != iris::r0master::E_ok, "writeMem failed.");
-}
-
 bool
 ThreadContext::translateAddress(Addr &paddr, iris::MemorySpaceId p_space,
                                 Addr vaddr, iris::MemorySpaceId v_space)
@@ -515,21 +478,23 @@
 }
 
 void
+ThreadContext::initMemProxies(gem5::ThreadContext *tc)
+{
+    assert(!virtProxy);
+    if (FullSystem) {
+        virtProxy.reset(new TranslatingPortProxy(tc));
+    } else {
+        virtProxy.reset(new SETranslatingPortProxy(this,
+                        SETranslatingPortProxy::NextPage));
+    }
+}
+
+void
 ThreadContext::sendFunctional(PacketPtr pkt)
 {
-    auto msn = ArmISA::isSecure(this) ?
-        Iris::PhysicalMemorySecureMsn : Iris::PhysicalMemoryNonSecureMsn;
-    auto id = getMemorySpaceId(msn);
-
-    auto addr = pkt->getAddr();
-    auto size = pkt->getSize();
-    auto data = pkt->getPtr<uint8_t>();
-
-    pkt->makeResponse();
-    if (pkt->isRead())
-        readMem(id, addr, data, size);
-    else
-        writeMem(id, addr, data, size);
+    auto *iris_cpu = dynamic_cast<Iris::BaseCPU *>(getCpuPtr());
+    assert(iris_cpu);
+    iris_cpu->evs_base_cpu->sendFunc(pkt);
 }
 
 ThreadContext::Status
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/iris/thread_context.hh gem5-SALAM/src/arch/arm/fastmodel/iris/thread_context.hh
--- gem5/src/arch/arm/fastmodel/iris/thread_context.hh	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/iris/thread_context.hh	2024-02-22 18:17:14.988943891 -0600
@@ -31,9 +31,7 @@
 #include <list>
 #include <map>
 #include <memory>
-#include <unordered_map>
 
-#include "arch/arm/fastmodel/iris/memory_spaces.hh"
 #include "arch/arm/regs/vec.hh"
 #include "cpu/base.hh"
 #include "cpu/thread_context.hh"
@@ -58,9 +56,6 @@
     typedef std::vector<iris::ResourceId> ResourceIds;
     typedef std::map<int, std::string> IdxNameMap;
 
-    typedef std::unordered_map<Iris::CanonicalMsn, iris::MemorySpaceId>
-        MemorySpaceMap;
-
   protected:
     gem5::BaseCPU *_cpu;
     int _threadId;
@@ -86,7 +81,6 @@
             const ResourceMap &resources, const std::string &name);
     void extractResourceMap(ResourceIds &ids,
             const ResourceMap &resources, const IdxNameMap &idx_names);
-    iris::MemorySpaceId getMemorySpaceId(const Iris::CanonicalMsn& msn) const;
 
 
     ResourceIds miscRegIds;
@@ -103,7 +97,9 @@
 
     std::vector<iris::MemorySpaceInfo> memorySpaces;
     std::vector<iris::MemorySupportedAddressTranslationResult> translations;
-    MemorySpaceMap memorySpaceIds;
+
+    std::unique_ptr<PortProxy> virtProxy = nullptr;
+
 
     // A queue to keep track of instruction count based events.
     EventQueue comInstEventQueue;
@@ -169,10 +165,6 @@
     iris::IrisCppAdapter &call() const { return client.irisCall(); }
     iris::IrisCppAdapter &noThrow() const { return client.irisCallNoThrow(); }
 
-    void readMem(iris::MemorySpaceId space,
-                 Addr addr, void *p, size_t size);
-    void writeMem(iris::MemorySpaceId space,
-                  Addr addr, const void *p, size_t size);
     bool translateAddress(Addr &paddr, iris::MemorySpaceId p_space,
                           Addr vaddr, iris::MemorySpaceId v_space);
 
@@ -223,6 +215,9 @@
         return _isa;
     }
 
+    PortProxy &getVirtProxy() override { return *virtProxy; }
+    void initMemProxies(gem5::ThreadContext *tc) override;
+
     void sendFunctional(PacketPtr pkt) override;
 
     Process *
@@ -292,7 +287,7 @@
         panic("%s not implemented.", __FUNCTION__);
     }
 
-    RegVal
+    const ArmISA::VecElem &
     readVecElem(const RegId &reg) const override
     {
         panic("%s not implemented.", __FUNCTION__);
@@ -327,7 +322,7 @@
     }
 
     void
-    setVecElem(const RegId& reg, RegVal val) override
+    setVecElem(const RegId& reg, const ArmISA::VecElem& val) override
     {
         panic("%s not implemented.", __FUNCTION__);
     }
@@ -425,13 +420,14 @@
         panic("%s not implemented.", __FUNCTION__);
     }
 
-    RegVal
+    const ArmISA::VecElem&
     readVecElemFlat(RegIndex idx, const ElemIndex& elemIdx) const override
     {
         panic("%s not implemented.", __FUNCTION__);
     }
     void
-    setVecElemFlat(RegIndex idx, const ElemIndex &elemIdx, RegVal val) override
+    setVecElemFlat(RegIndex idx, const ElemIndex &elemIdx,
+                   const ArmISA::VecElem &val) override
     {
         panic("%s not implemented.", __FUNCTION__);
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/PL330_DMAC/pl330.cc gem5-SALAM/src/arch/arm/fastmodel/PL330_DMAC/pl330.cc
--- gem5/src/arch/arm/fastmodel/PL330_DMAC/pl330.cc	2024-02-22 18:25:43.603604569 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/PL330_DMAC/pl330.cc	2024-02-22 18:17:14.988943891 -0600
@@ -223,7 +223,7 @@
     }
 }
 
-gem5::Port &
+::Port &
 PL330::gem5_getPort(const std::string &if_name, int idx)
 {
     if (if_name == "dma") {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/protocol/ExportedClockRateControlProtocol.lisa gem5-SALAM/src/arch/arm/fastmodel/protocol/ExportedClockRateControlProtocol.lisa
--- gem5/src/arch/arm/fastmodel/protocol/ExportedClockRateControlProtocol.lisa	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/protocol/ExportedClockRateControlProtocol.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -36,8 +36,8 @@
         description = "Exportable version of the clock rate control protocol.";
         version = "1.0";
         dso_safe = 0;
-        sc_slave_base_class_name = "gem5::ClockRateControlSlaveBase";
-        sc_slave_socket_class_name = "gem5::ClockRateControlTargetSocket";
+        sc_slave_base_class_name = "ClockRateControlSlaveBase";
+        sc_slave_socket_class_name = "ClockRateControlTargetSocket";
     }
 
     slave behavior set_mul_div(uint64_t mul, uint64_t div);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/fastmodel/protocol/SignalInterruptProtocol.lisa gem5-SALAM/src/arch/arm/fastmodel/protocol/SignalInterruptProtocol.lisa
--- gem5/src/arch/arm/fastmodel/protocol/SignalInterruptProtocol.lisa	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/fastmodel/protocol/SignalInterruptProtocol.lisa	2024-02-22 18:17:14.988943891 -0600
@@ -36,8 +36,8 @@
         description = "Signal an interrupt from gem5.";
         version = "1.0";
         dso_safe = 0;
-        sc_slave_base_class_name = "gem5::SignalInterruptSlaveBase";
-        sc_slave_socket_class_name = "gem5::SignalInterruptTargetSocket";
+        sc_slave_base_class_name = "SignalInterruptSlaveBase";
+        sc_slave_socket_class_name = "SignalInterruptTargetSocket";
     }
 
     slave behavior ppi(uint8_t cpu, uint32_t num, bool state);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/faults.cc gem5-SALAM/src/arch/arm/faults.cc
--- gem5/src/arch/arm/faults.cc	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/faults.cc	2024-02-22 18:17:14.988943891 -0600
@@ -520,7 +520,7 @@
     saved_cpsr.v = tc->readCCReg(CCREG_V);
     saved_cpsr.ge = tc->readCCReg(CCREG_GE);
 
-    [[maybe_unused]] Addr curPc = tc->pcState().pc();
+    GEM5_VAR_USED Addr curPc = tc->pcState().pc();
     ITSTATE it = tc->pcState().itstate();
     saved_cpsr.it2 = it.top6;
     saved_cpsr.it1 = it.bottom2;
@@ -528,7 +528,7 @@
     // if we have a valid instruction then use it to annotate this fault with
     // extra information. This is used to generate the correct fault syndrome
     // information
-    [[maybe_unused]] ArmStaticInst *arm_inst = instrAnnotate(inst);
+    GEM5_VAR_USED ArmStaticInst *arm_inst = instrAnnotate(inst);
 
     // Ensure Secure state if initially in Monitor mode
     if (have_security && saved_cpsr.mode == MODE_MON) {
@@ -706,7 +706,7 @@
     // If we have a valid instruction then use it to annotate this fault with
     // extra information. This is used to generate the correct fault syndrome
     // information
-    [[maybe_unused]] ArmStaticInst *arm_inst = instrAnnotate(inst);
+    GEM5_VAR_USED ArmStaticInst *arm_inst = instrAnnotate(inst);
 
     // Set PC to start of exception handler
     Addr new_pc = purifyTaggedAddr(vec_address, tc, toEL, true);
@@ -758,7 +758,7 @@
     Addr base;
 
     // Check for invalid modes
-    [[maybe_unused]] CPSR cpsr = tc->readMiscRegNoEffect(MISCREG_CPSR);
+    GEM5_VAR_USED CPSR cpsr = tc->readMiscRegNoEffect(MISCREG_CPSR);
     assert(ArmSystem::haveSecurity(tc) || cpsr.mode != MODE_MON);
     assert(ArmSystem::haveVirtualization(tc) || cpsr.mode != MODE_HYP);
 
@@ -1072,8 +1072,7 @@
             // See ARM ARM B3-1416
             bool override_LPAE = false;
             TTBCR ttbcr_s = tc->readMiscReg(MISCREG_TTBCR_S);
-            [[maybe_unused]] TTBCR ttbcr_ns =
-                tc->readMiscReg(MISCREG_TTBCR_NS);
+            GEM5_VAR_USED TTBCR ttbcr_ns = tc->readMiscReg(MISCREG_TTBCR_NS);
             if (ttbcr_s.eae) {
                 override_LPAE = true;
             } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/freebsd/se_workload.cc gem5-SALAM/src/arch/arm/freebsd/se_workload.cc
--- gem5/src/arch/arm/freebsd/se_workload.cc	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/freebsd/se_workload.cc	2024-02-22 18:17:14.992943912 -0600
@@ -42,7 +42,6 @@
 #include "base/loader/object_file.hh"
 #include "base/trace.hh"
 #include "cpu/thread_context.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/syscall_emul.hh"
 
 namespace gem5
@@ -95,20 +94,18 @@
 {
     uint64_t ret;
 
-    SETranslatingPortProxy proxy(tc);
-
     BufferArg buf(namep, sizeof(size_t));
     BufferArg buf2(oldp, sizeof(size_t));
     BufferArg buf3(oldlenp, sizeof(size_t));
     BufferArg buf4(newp, sizeof(size_t));
 
-    buf.copyIn(proxy);
-    buf2.copyIn(proxy);
-    buf3.copyIn(proxy);
+    buf.copyIn(tc->getVirtProxy());
+    buf2.copyIn(tc->getVirtProxy());
+    buf3.copyIn(tc->getVirtProxy());
 
     void *hnewp = NULL;
     if (newp) {
-        buf4.copyIn(proxy);
+        buf4.copyIn(tc->getVirtProxy());
         hnewp = (void *)buf4.bufferPtr();
     }
 
@@ -118,11 +115,11 @@
 
     ret = sysctl((int *)hnamep, nameLen, holdp, holdlenp, hnewp, newlen);
 
-    buf.copyOut(proxy);
-    buf2.copyOut(proxy);
-    buf3.copyOut(proxy);
+    buf.copyOut(tc->getVirtProxy());
+    buf2.copyOut(tc->getVirtProxy());
+    buf3.copyOut(tc->getVirtProxy());
     if (newp)
-        buf4.copyOut(proxy);
+        buf4.copyOut(tc->getVirtProxy());
 
     return (ret);
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/freebsd/se_workload.hh gem5-SALAM/src/arch/arm/freebsd/se_workload.hh
--- gem5/src/arch/arm/freebsd/se_workload.hh	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/freebsd/se_workload.hh	2024-02-22 18:17:14.992943912 -0600
@@ -73,8 +73,8 @@
 
 template <typename ABI>
 struct Result<ABI, SyscallReturn,
-    typename std::enable_if_t<std::is_base_of_v<
-        ArmISA::EmuFreebsd::BaseSyscallABI, ABI>>>
+    typename std::enable_if_t<std::is_base_of<
+        ArmISA::EmuFreebsd::BaseSyscallABI, ABI>::value>>
 {
     static void
     store(ThreadContext *tc, const SyscallReturn &ret)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/aarch64-core.xml gem5-SALAM/src/arch/arm/gdb-xml/aarch64-core.xml
--- gem5/src/arch/arm/gdb-xml/aarch64-core.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/aarch64-core.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,67 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
-     Contributed by ARM Ltd.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.aarch64.core">
-  <reg name="x0" bitsize="64"/>
-  <reg name="x1" bitsize="64"/>
-  <reg name="x2" bitsize="64"/>
-  <reg name="x3" bitsize="64"/>
-  <reg name="x4" bitsize="64"/>
-  <reg name="x5" bitsize="64"/>
-  <reg name="x6" bitsize="64"/>
-  <reg name="x7" bitsize="64"/>
-  <reg name="x8" bitsize="64"/>
-  <reg name="x9" bitsize="64"/>
-  <reg name="x10" bitsize="64"/>
-  <reg name="x11" bitsize="64"/>
-  <reg name="x12" bitsize="64"/>
-  <reg name="x13" bitsize="64"/>
-  <reg name="x14" bitsize="64"/>
-  <reg name="x15" bitsize="64"/>
-  <reg name="x16" bitsize="64"/>
-  <reg name="x17" bitsize="64"/>
-  <reg name="x18" bitsize="64"/>
-  <reg name="x19" bitsize="64"/>
-  <reg name="x20" bitsize="64"/>
-  <reg name="x21" bitsize="64"/>
-  <reg name="x22" bitsize="64"/>
-  <reg name="x23" bitsize="64"/>
-  <reg name="x24" bitsize="64"/>
-  <reg name="x25" bitsize="64"/>
-  <reg name="x26" bitsize="64"/>
-  <reg name="x27" bitsize="64"/>
-  <reg name="x28" bitsize="64"/>
-  <reg name="x29" bitsize="64"/>
-  <reg name="x30" bitsize="64"/>
-  <reg name="sp" bitsize="64" type="data_ptr"/>
-
-  <reg name="pc" bitsize="64" type="code_ptr"/>
-
-  <flags id="cpsr_flags" size="4">
-    <field name="SP" start="0" end="0"/>
-    <field name="" start="1" end="1"/>
-    <field name="EL" start="2" end="3"/>
-    <field name="nRW" start="4" end="4"/>
-    <field name="" start="5" end="5"/>
-    <field name="F" start="6" end="6"/>
-    <field name="I" start="7" end="7"/>
-    <field name="A" start="8" end="8"/>
-    <field name="D" start="9" end="9"/>
-
-    <field name="IL" start="20" end="20"/>
-    <field name="SS" start="21" end="21"/>
-
-    <field name="V" start="28" end="28"/>
-    <field name="C" start="29" end="29"/>
-    <field name="Z" start="30" end="30"/>
-    <field name="N" start="31" end="31"/>
-  </flags>
-  <reg name="cpsr" bitsize="32" type="cpsr_flags"/>
-
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/aarch64-fpu.xml gem5-SALAM/src/arch/arm/gdb-xml/aarch64-fpu.xml
--- gem5/src/arch/arm/gdb-xml/aarch64-fpu.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/aarch64-fpu.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,86 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
-     Contributed by ARM Ltd.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.aarch64.fpu">
-  <vector id="v2d" type="ieee_double" count="2"/>
-  <vector id="v2u" type="uint64" count="2"/>
-  <vector id="v2i" type="int64" count="2"/>
-  <vector id="v4f" type="ieee_single" count="4"/>
-  <vector id="v4u" type="uint32" count="4"/>
-  <vector id="v4i" type="int32" count="4"/>
-  <vector id="v8u" type="uint16" count="8"/>
-  <vector id="v8i" type="int16" count="8"/>
-  <vector id="v16u" type="uint8" count="16"/>
-  <vector id="v16i" type="int8" count="16"/>
-  <vector id="v1u" type="uint128" count="1"/>
-  <vector id="v1i" type="int128" count="1"/>
-  <union id="vnd">
-    <field name="f" type="v2d"/>
-    <field name="u" type="v2u"/>
-    <field name="s" type="v2i"/>
-  </union>
-  <union id="vns">
-    <field name="f" type="v4f"/>
-    <field name="u" type="v4u"/>
-    <field name="s" type="v4i"/>
-  </union>
-  <union id="vnh">
-    <field name="u" type="v8u"/>
-    <field name="s" type="v8i"/>
-  </union>
-  <union id="vnb">
-    <field name="u" type="v16u"/>
-    <field name="s" type="v16i"/>
-  </union>
-  <union id="vnq">
-    <field name="u" type="v1u"/>
-    <field name="s" type="v1i"/>
-  </union>
-  <union id="aarch64v">
-    <field name="d" type="vnd"/>
-    <field name="s" type="vns"/>
-    <field name="h" type="vnh"/>
-    <field name="b" type="vnb"/>
-    <field name="q" type="vnq"/>
-  </union>
-  <reg name="v0" bitsize="128" type="aarch64v" regnum="34"/>
-  <reg name="v1" bitsize="128" type="aarch64v" />
-  <reg name="v2" bitsize="128" type="aarch64v" />
-  <reg name="v3" bitsize="128" type="aarch64v" />
-  <reg name="v4" bitsize="128" type="aarch64v" />
-  <reg name="v5" bitsize="128" type="aarch64v" />
-  <reg name="v6" bitsize="128" type="aarch64v" />
-  <reg name="v7" bitsize="128" type="aarch64v" />
-  <reg name="v8" bitsize="128" type="aarch64v" />
-  <reg name="v9" bitsize="128" type="aarch64v" />
-  <reg name="v10" bitsize="128" type="aarch64v"/>
-  <reg name="v11" bitsize="128" type="aarch64v"/>
-  <reg name="v12" bitsize="128" type="aarch64v"/>
-  <reg name="v13" bitsize="128" type="aarch64v"/>
-  <reg name="v14" bitsize="128" type="aarch64v"/>
-  <reg name="v15" bitsize="128" type="aarch64v"/>
-  <reg name="v16" bitsize="128" type="aarch64v"/>
-  <reg name="v17" bitsize="128" type="aarch64v"/>
-  <reg name="v18" bitsize="128" type="aarch64v"/>
-  <reg name="v19" bitsize="128" type="aarch64v"/>
-  <reg name="v20" bitsize="128" type="aarch64v"/>
-  <reg name="v21" bitsize="128" type="aarch64v"/>
-  <reg name="v22" bitsize="128" type="aarch64v"/>
-  <reg name="v23" bitsize="128" type="aarch64v"/>
-  <reg name="v24" bitsize="128" type="aarch64v"/>
-  <reg name="v25" bitsize="128" type="aarch64v"/>
-  <reg name="v26" bitsize="128" type="aarch64v"/>
-  <reg name="v27" bitsize="128" type="aarch64v"/>
-  <reg name="v28" bitsize="128" type="aarch64v"/>
-  <reg name="v29" bitsize="128" type="aarch64v"/>
-  <reg name="v30" bitsize="128" type="aarch64v"/>
-  <reg name="v31" bitsize="128" type="aarch64v"/>
-  <reg name="fpsr" bitsize="32"/>
-  <reg name="fpcr" bitsize="32"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/aarch64.xml gem5-SALAM/src/arch/arm/gdb-xml/aarch64.xml
--- gem5/src/arch/arm/gdb-xml/aarch64.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/aarch64.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,14 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
-     Contributed by ARM Ltd.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE target SYSTEM "gdb-target.dtd">
-<target>
-  <architecture>aarch64</architecture>
-  <xi:include href="aarch64-core.xml"/>
-  <xi:include href="aarch64-fpu.xml"/>
-</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/arm-core.xml gem5-SALAM/src/arch/arm/gdb-xml/arm-core.xml
--- gem5/src/arch/arm/gdb-xml/arm-core.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/arm-core.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,31 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.arm.core">
-  <reg name="r0" bitsize="32" type="uint32"/>
-  <reg name="r1" bitsize="32" type="uint32"/>
-  <reg name="r2" bitsize="32" type="uint32"/>
-  <reg name="r3" bitsize="32" type="uint32"/>
-  <reg name="r4" bitsize="32" type="uint32"/>
-  <reg name="r5" bitsize="32" type="uint32"/>
-  <reg name="r6" bitsize="32" type="uint32"/>
-  <reg name="r7" bitsize="32" type="uint32"/>
-  <reg name="r8" bitsize="32" type="uint32"/>
-  <reg name="r9" bitsize="32" type="uint32"/>
-  <reg name="r10" bitsize="32" type="uint32"/>
-  <reg name="r11" bitsize="32" type="uint32"/>
-  <reg name="r12" bitsize="32" type="uint32"/>
-  <reg name="sp" bitsize="32" type="data_ptr"/>
-  <reg name="lr" bitsize="32"/>
-  <reg name="pc" bitsize="32" type="code_ptr"/>
-
-  <!-- The CPSR is register 25, rather than register 16, because
-       the FPA registers historically were placed between the PC
-       and the CPSR in the "g" packet.  -->
-  <reg name="cpsr" bitsize="32" regnum="25"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/arm-vfpv3.xml gem5-SALAM/src/arch/arm/gdb-xml/arm-vfpv3.xml
--- gem5/src/arch/arm/gdb-xml/arm-vfpv3.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/arm-vfpv3.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,44 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.arm.vfp">
-  <reg name="d0" bitsize="64" type="ieee_double"/>
-  <reg name="d1" bitsize="64" type="ieee_double"/>
-  <reg name="d2" bitsize="64" type="ieee_double"/>
-  <reg name="d3" bitsize="64" type="ieee_double"/>
-  <reg name="d4" bitsize="64" type="ieee_double"/>
-  <reg name="d5" bitsize="64" type="ieee_double"/>
-  <reg name="d6" bitsize="64" type="ieee_double"/>
-  <reg name="d7" bitsize="64" type="ieee_double"/>
-  <reg name="d8" bitsize="64" type="ieee_double"/>
-  <reg name="d9" bitsize="64" type="ieee_double"/>
-  <reg name="d10" bitsize="64" type="ieee_double"/>
-  <reg name="d11" bitsize="64" type="ieee_double"/>
-  <reg name="d12" bitsize="64" type="ieee_double"/>
-  <reg name="d13" bitsize="64" type="ieee_double"/>
-  <reg name="d14" bitsize="64" type="ieee_double"/>
-  <reg name="d15" bitsize="64" type="ieee_double"/>
-  <reg name="d16" bitsize="64" type="ieee_double"/>
-  <reg name="d17" bitsize="64" type="ieee_double"/>
-  <reg name="d18" bitsize="64" type="ieee_double"/>
-  <reg name="d19" bitsize="64" type="ieee_double"/>
-  <reg name="d20" bitsize="64" type="ieee_double"/>
-  <reg name="d21" bitsize="64" type="ieee_double"/>
-  <reg name="d22" bitsize="64" type="ieee_double"/>
-  <reg name="d23" bitsize="64" type="ieee_double"/>
-  <reg name="d24" bitsize="64" type="ieee_double"/>
-  <reg name="d25" bitsize="64" type="ieee_double"/>
-  <reg name="d26" bitsize="64" type="ieee_double"/>
-  <reg name="d27" bitsize="64" type="ieee_double"/>
-  <reg name="d28" bitsize="64" type="ieee_double"/>
-  <reg name="d29" bitsize="64" type="ieee_double"/>
-  <reg name="d30" bitsize="64" type="ieee_double"/>
-  <reg name="d31" bitsize="64" type="ieee_double"/>
-
-  <reg name="fpscr" bitsize="32" type="int" group="float"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/arm-with-neon.xml gem5-SALAM/src/arch/arm/gdb-xml/arm-with-neon.xml
--- gem5/src/arch/arm/gdb-xml/arm-with-neon.xml	2024-02-22 18:16:36.440742360 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/arm-with-neon.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,14 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2018 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE target SYSTEM "gdb-target.dtd">
-<target>
-  <architecture>arm</architecture>
-  <xi:include href="arm-core.xml"/>
-  <xi:include href="arm-vfpv3.xml"/>
-  <feature name="org.gnu.gdb.arm.neon"/>
-</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/gdb-xml/SConscript gem5-SALAM/src/arch/arm/gdb-xml/SConscript
--- gem5/src/arch/arm/gdb-xml/SConscript	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/gdb-xml/SConscript	1969-12-31 18:00:00.000000000 -0600
@@ -1,49 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2009, 2012-2013, 2017-2018, 2020 ARM Limited
-# All rights reserved.
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2007-2008 The Florida State University
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-Import('*')
-
-if env['TARGET_ISA'] == 'arm':
-    GdbXml('arm-with-neon.xml', 'gdb_xml_arm_target')
-    GdbXml('arm-core.xml', 'gdb_xml_arm_core')
-    GdbXml('arm-vfpv3.xml', 'gdb_xml_arm_vfpv3')
-    GdbXml('aarch64.xml', 'gdb_xml_aarch64_target')
-    GdbXml('aarch64-core.xml', 'gdb_xml_aarch64_core')
-    GdbXml('aarch64-fpu.xml', 'gdb_xml_aarch64_fpu')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/branch64.hh gem5-SALAM/src/arch/arm/insts/branch64.hh
--- gem5/src/arch/arm/insts/branch64.hh	2024-02-22 18:25:43.607604590 -0600
+++ gem5-SALAM/src/arch/arm/insts/branch64.hh	2024-02-22 18:17:14.992943912 -0600
@@ -134,7 +134,8 @@
 {
   public:
     BranchRetA64(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :
-        BranchRegReg64(mnem, _machInst, __opClass, INTREG_X30, INTREG_SPX)
+        BranchRegReg64(mnem, _machInst, __opClass, INTREG_X30,
+                       makeSP(INTREG_SPX))
     {}
 
     std::string generateDisassembly(
@@ -161,7 +162,7 @@
 
   public:
     BranchEretA64(const char *mnem, ExtMachInst _machInst, OpClass __opClass) :
-        ArmStaticInst(mnem, _machInst, __opClass), op1(INTREG_SPX)
+        ArmStaticInst(mnem, _machInst, __opClass), op1(makeSP(INTREG_SPX))
     {}
 
     std::string generateDisassembly(
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/macromem.cc gem5-SALAM/src/arch/arm/insts/macromem.cc
--- gem5/src/arch/arm/insts/macromem.cc	2024-02-22 18:25:43.611604611 -0600
+++ gem5-SALAM/src/arch/arm/insts/macromem.cc	2024-02-22 18:17:14.992943912 -0600
@@ -564,7 +564,7 @@
 
     unsigned eBytes = (1 << size);
     unsigned loadSize = eBytes * elems;
-    [[maybe_unused]] unsigned loadRegs =
+    GEM5_VAR_USED unsigned loadRegs =
         (loadSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 
     assert(loadRegs > 0 && loadRegs <= 4);
@@ -928,7 +928,7 @@
 
     unsigned eBytes = (1 << size);
     unsigned storeSize = eBytes * elems;
-    [[maybe_unused]] unsigned storeRegs =
+    GEM5_VAR_USED unsigned storeRegs =
         (storeSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 
     assert(storeRegs > 0 && storeRegs <= 4);
@@ -1146,7 +1146,7 @@
 
     microOps = new StaticInstPtr[numMicroops];
     unsigned uopIdx = 0;
-    uint32_t memaccessFlags = (MMU::ArmFlags)eSize | MMU::AllowUnaligned;
+    uint32_t memaccessFlags = (TLB::ArmFlags)eSize | TLB::AllowUnaligned;
 
     int i = 0;
     for (; i < numMemMicroops - 1; ++i) {
@@ -1254,7 +1254,7 @@
         }
     }
 
-    uint32_t memaccessFlags = (MMU::ArmFlags)eSize | MMU::AllowUnaligned;
+    uint32_t memaccessFlags = (TLB::ArmFlags)eSize | TLB::AllowUnaligned;
 
     int i = 0;
     for (; i < numMemMicroops - 1; ++i) {
@@ -1322,7 +1322,7 @@
     microOps = new StaticInstPtr[numMicroops];
     unsigned uopIdx = 0;
 
-    uint32_t memaccessFlags = (MMU::ArmFlags)eSize | MMU::AllowUnaligned;
+    uint32_t memaccessFlags = (TLB::ArmFlags)eSize | TLB::AllowUnaligned;
 
     int i = 0;
     for (; i < numMemMicroops - 1; ++i) {
@@ -1401,7 +1401,7 @@
             numStructElems, index, i /* step */, replicate);
     }
 
-    uint32_t memaccessFlags = (MMU::ArmFlags)eSize | MMU::AllowUnaligned;
+    uint32_t memaccessFlags = (TLB::ArmFlags)eSize | TLB::AllowUnaligned;
 
     int i = 0;
     for (; i < numMemMicroops - 1; ++i) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/macromem.hh gem5-SALAM/src/arch/arm/insts/macromem.hh
--- gem5/src/arch/arm/insts/macromem.hh	2024-02-22 18:25:43.611604611 -0600
+++ gem5-SALAM/src/arch/arm/insts/macromem.hh	2024-02-22 18:17:14.992943912 -0600
@@ -395,7 +395,7 @@
     MicroMemOp(const char *mnem, ExtMachInst machInst, OpClass __opClass,
                RegIndex _ura, RegIndex _urb, bool _up, uint8_t _imm)
             : MicroIntImmOp(mnem, machInst, __opClass, _ura, _urb, _imm),
-              up(_up), memAccessFlags(MMU::AlignWord)
+              up(_up), memAccessFlags(TLB::AlignWord)
     {
     }
 
@@ -416,7 +416,7 @@
             bool _up, uint8_t _imm)
         : MicroOp(mnem, machInst, __opClass),
         dest(_dreg1), dest2(_dreg2), urb(_base), up(_up), imm(_imm),
-        memAccessFlags(MMU::AlignWord)
+        memAccessFlags(TLB::AlignWord)
     {
     }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/mem64.cc gem5-SALAM/src/arch/arm/insts/mem64.cc
--- gem5/src/arch/arm/insts/mem64.cc	2024-02-22 18:25:43.611604611 -0600
+++ gem5-SALAM/src/arch/arm/insts/mem64.cc	2024-02-22 18:17:14.992943912 -0600
@@ -78,7 +78,7 @@
     if (exclusive)
         memAccessFlags |= Request::LLSC;
     else
-        memAccessFlags |= ArmISA::MMU::AllowUnaligned;
+        memAccessFlags |= ArmISA::TLB::AllowUnaligned;
     if (acrel) {
         flags[IsWriteBarrier] = true;
         flags[IsReadBarrier] = true;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/pred_inst.hh gem5-SALAM/src/arch/arm/insts/pred_inst.hh
--- gem5/src/arch/arm/insts/pred_inst.hh	2024-02-22 18:25:43.611604611 -0600
+++ gem5-SALAM/src/arch/arm/insts/pred_inst.hh	2024-02-22 18:17:14.992943912 -0600
@@ -154,7 +154,7 @@
                 break;
             }
         }
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       default:
         immValid = false;
         break;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/static_inst.cc gem5-SALAM/src/arch/arm/insts/static_inst.cc
--- gem5/src/arch/arm/insts/static_inst.cc	2024-02-22 18:25:43.611604611 -0600
+++ gem5-SALAM/src/arch/arm/insts/static_inst.cc	2024-02-22 18:17:14.992943912 -0600
@@ -1129,7 +1129,8 @@
         return true;
 
     bool spsr_mode_is_aarch32 = (spsr.width == 1);
-    auto [known, target_el_is_aarch32] = ELUsingAArch32K(tc, target_el);
+    bool known, target_el_is_aarch32;
+    std::tie(known, target_el_is_aarch32) = ELUsingAArch32K(tc, target_el);
     assert(known || (target_el == EL0 && ELIs64(tc, EL1)));
 
     if (known && (spsr_mode_is_aarch32 != target_el_is_aarch32))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/insts/sve_mem.hh gem5-SALAM/src/arch/arm/insts/sve_mem.hh
--- gem5/src/arch/arm/insts/sve_mem.hh	2024-02-22 18:25:43.615604632 -0600
+++ gem5-SALAM/src/arch/arm/insts/sve_mem.hh	2024-02-22 18:17:14.992943912 -0600
@@ -64,7 +64,7 @@
                        IntRegIndex _base, uint64_t _imm)
         : ArmStaticInst(mnem, _machInst, __opClass),
           dest(_dest), base(_base), imm(_imm),
-          memAccessFlags(ArmISA::MMU::AllowUnaligned)
+          memAccessFlags(ArmISA::TLB::AllowUnaligned)
     {
         baseIsSP = isSP(_base);
     }
@@ -90,7 +90,7 @@
                         IntRegIndex _base, uint64_t _imm)
         : ArmStaticInst(mnem, _machInst, __opClass),
           dest(_dest), base(_base), imm(_imm),
-          memAccessFlags(ArmISA::MMU::AllowUnaligned)
+          memAccessFlags(ArmISA::TLB::AllowUnaligned)
     {
         baseIsSP = isSP(_base);
     }
@@ -117,7 +117,7 @@
                    IntRegIndex _offset)
         : ArmStaticInst(mnem, _machInst, __opClass),
           dest(_dest), gp(_gp), base(_base), offset(_offset),
-          memAccessFlags(ArmISA::MMU::AllowUnaligned)
+          memAccessFlags(ArmISA::TLB::AllowUnaligned)
     {
         baseIsSP = isSP(_base);
     }
@@ -144,7 +144,7 @@
                    uint64_t _imm)
         : ArmStaticInst(mnem, _machInst, __opClass),
           dest(_dest), gp(_gp), base(_base), imm(_imm),
-          memAccessFlags(ArmISA::MMU::AllowUnaligned)
+          memAccessFlags(ArmISA::TLB::AllowUnaligned)
     {
         baseIsSP = isSP(_base);
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/formats/aarch64.isa gem5-SALAM/src/arch/arm/isa/formats/aarch64.isa
--- gem5/src/arch/arm/isa/formats/aarch64.isa	2024-02-22 18:25:43.619604653 -0600
+++ gem5-SALAM/src/arch/arm/isa/formats/aarch64.isa	2024-02-22 18:17:14.996943933 -0600
@@ -362,28 +362,28 @@
                             switch (op2) {
                               case 0x0:
                                 return new Paciaz(machInst,
-                                         INTREG_X30, INTREG_ZERO);
+                                         INTREG_X30, makeZero(INTREG_X31));
                               case 0x1:
                                 return new Paciasp(machInst,
-                                         INTREG_X30, INTREG_SPX);
+                                         INTREG_X30, makeSP(INTREG_SPX));
                               case 0x2:
                                 return new Pacibz(machInst,
-                                         INTREG_X30, INTREG_ZERO);
+                                         INTREG_X30, makeZero(INTREG_X31));
                               case 0x3:
                                 return new Pacibsp(machInst,
-                                         INTREG_X30, INTREG_SPX);
+                                         INTREG_X30, makeSP(INTREG_SPX));
                               case 0x4:
                                 return new Autiaz(machInst,
-                                         INTREG_X30, INTREG_ZERO);
+                                         INTREG_X30, makeZero(INTREG_X31));
                               case 0x5:
                                 return new Autiasp(machInst,
-                                         INTREG_X30, INTREG_SPX);
+                                         INTREG_X30, makeSP(INTREG_SPX));
                               case 0x6:
                                 return new Autibz(machInst,
-                                         INTREG_X30, INTREG_ZERO);
+                                         INTREG_X30, makeZero(INTREG_X31));
                               case 0x7:
                                 return new Autibsp(machInst,
-                                         INTREG_X30, INTREG_SPX);
+                                         INTREG_X30, makeSP(INTREG_SPX));
                             }
                             break;
                           case 0x4:
@@ -595,7 +595,7 @@
                     return new Unknown64(machInst);
                 }
             }
-          [[fallthrough]];
+          GEM5_FALLTHROUGH;
           default:
             return new Unknown64(machInst);
         }
@@ -2159,49 +2159,49 @@
                             case 0x8:
                                 if (rn == 0x1f)
                                     return new Paciza(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0x9:
                                 if (rn == 0x1f)
                                     return new Pacizb(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xa:
                                 if (rn == 0x1f)
                                     return new Pacdza(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xb:
                                 if (rn == 0x1f)
                                     return new Pacdzb(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xc:
                                 if (rn == 0x1f)
                                     return new Autiza(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xd:
                                 if (rn == 0x1f)
                                     return new Autizb(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xe:
                                 if (rn == 0x1f)
                                     return new Autdza(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             case 0xf:
                                 if (rn == 0x1f)
                                     return new Autdzb(machInst, rd,
-                                                      INTREG_ZERO);
+                                                      makeZero(INTREG_X31));
                                 else
                                     return new Unknown64(machInst);
                             default:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/formats/data.isa gem5-SALAM/src/arch/arm/isa/formats/data.isa
--- gem5/src/arch/arm/isa/formats/data.isa	2024-02-22 18:25:43.619604653 -0600
+++ gem5-SALAM/src/arch/arm/isa/formats/data.isa	2024-02-22 18:17:14.996943933 -0600
@@ -1440,7 +1440,7 @@
                 const uint32_t satImm = bits(machInst, 4, 0);
                 return new Ssat16(machInst, rd, satImm + 1, rn);
             }
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 0x10:
             {
                 const uint32_t satImm = bits(machInst, 4, 0);
@@ -1473,7 +1473,7 @@
                 const uint32_t satImm = bits(machInst, 4, 0);
                 return new Usat16(machInst, rd, satImm, rn);
             }
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 0x18:
             {
                 const uint32_t satImm = bits(machInst, 4, 0);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/formats/fp.isa gem5-SALAM/src/arch/arm/isa/formats/fp.isa
--- gem5/src/arch/arm/isa/formats/fp.isa	2024-02-22 18:25:43.619604653 -0600
+++ gem5-SALAM/src/arch/arm/isa/formats/fp.isa	2024-02-22 18:17:14.996943933 -0600
@@ -131,7 +131,7 @@
                     width = 1;
                     break;
                 }
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
               default:
                 return new Unknown(machInst);
             }
@@ -152,7 +152,7 @@
             if (singleAll) {
                 size = bits(machInst, 7, 6);
                 bool t = bits(machInst, 5);
-                align = size | MMU::AllowUnaligned;
+                align = size | TLB::AllowUnaligned;
                 if (width == 1) {
                     regs = t ? 2 : 1;
                     inc = 1;
@@ -185,7 +185,7 @@
                 }
             } else {
                 size = bits(machInst, 11, 10);
-                align = size | MMU::AllowUnaligned;
+                align = size | TLB::AllowUnaligned;
                 regs = width;
                 unsigned indexAlign = bits(machInst, 7, 4);
                 // If width is 1, inc is always 1. That's overridden later.
@@ -251,7 +251,7 @@
             align = bits(machInst, 5, 4);
             if (align == 0) {
                 // @align wasn't specified, so alignment can be turned off.
-                align = size | MMU::AllowUnaligned;
+                align = size | TLB::AllowUnaligned;
             } else {
                 align = align + 2;
             }
@@ -2113,7 +2113,7 @@
                                        false, true, true, offset);
                 }
             }
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 0x3:
             const bool up = (bits(machInst, 23) == 1);
             const uint32_t imm = bits(machInst, 7, 0) << 2;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/formats/neon64.isa gem5-SALAM/src/arch/arm/isa/formats/neon64.isa
--- gem5/src/arch/arm/isa/formats/neon64.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/formats/neon64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -1205,9 +1205,6 @@
             if (!q || (imm4 & mask(imm5_pos)))
                 return new Unknown64(machInst);
 
-            if (imm5_pos > 3)
-                return new Unknown64(machInst);
-
             index1 = bits(imm5, 4, imm5_pos + 1);  // dst
             index2 = bits(imm4, 3, imm5_pos);  // src
 
@@ -1227,9 +1224,6 @@
 
         switch (imm4) {
           case 0x0:
-            if (imm5_pos > 3)
-                return new Unknown64(machInst);
-
             index1 = bits(imm5, 4, imm5_pos + 1);
             switch (imm5_pos) {
               case 0:
@@ -1295,9 +1289,6 @@
                 return new Unknown64(machInst);
             }
           case 0x5:
-            if (imm5_pos > 3)
-                return new Unknown64(machInst);
-
             index1 = bits(imm5, 4, imm5_pos + 1);
             switch (imm5_pos) {
               case 0:
@@ -2440,9 +2431,6 @@
         IntRegIndex vn = (IntRegIndex) (uint8_t) bits(machInst, 9, 5);
 
         uint8_t size = findLsbSet(imm5);
-        if (size > 3)
-            return new Unknown64(machInst);
-
         uint8_t index = bits(imm5, 4, size + 1);
 
         return decodeNeonUTwoShiftUReg<DupElemScX>(
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/formats/sve_top_level.isa gem5-SALAM/src/arch/arm/isa/formats/sve_top_level.isa
--- gem5/src/arch/arm/isa/formats/sve_top_level.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/formats/sve_top_level.isa	2024-02-22 18:17:15.000943953 -0600
@@ -248,7 +248,7 @@
               case 4:
                 if (!bits(machInst, 10))
                     return decodeSveFpMulIndexed(machInst);
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
               default:
                 return new Unknown64(machInst);
             }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/amo64.isa gem5-SALAM/src/arch/arm/isa/insts/amo64.isa
--- gem5/src/arch/arm/isa/insts/amo64.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/amo64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -83,7 +83,7 @@
 
             # Add memory request flags where necessary
             if self.user:
-                self.memFlags.append("ArmISA::MMU::UserMode")
+                self.memFlags.append("ArmISA::TLB::UserMode")
 
             sz = self.size*2 if paired else self.size
             self.memFlags.append("%d" % int(math.log(sz, 2)))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/branch.isa gem5-SALAM/src/arch/arm/isa/insts/branch.isa
--- gem5/src/arch/arm/isa/insts/branch.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/branch.isa	2024-02-22 18:17:15.000943953 -0600
@@ -186,16 +186,16 @@
     for isTbh in (0, 1):
         if isTbh:
             eaCode = '''
-            unsigned memAccessFlags = ArmISA::MMU::AllowUnaligned |
-                                      ArmISA::MMU::AlignHalfWord;
+            unsigned memAccessFlags = ArmISA::TLB::AllowUnaligned |
+                                      ArmISA::TLB::AlignHalfWord;
             EA = Op1 + Op2 * 2
             '''
             accCode = 'NPC = PC + 2 * (Mem_uh);\n'
             mnem = "tbh"
         else:
             eaCode = '''
-            unsigned memAccessFlags = ArmISA::MMU::AllowUnaligned |
-                                      ArmISA::MMU::AlignByte;
+            unsigned memAccessFlags = ArmISA::TLB::AllowUnaligned |
+                                      ArmISA::TLB::AlignByte;
             EA = Op1 + Op2
             '''
             accCode = 'NPC = PC + 2 * (Mem_ub)'
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/data64.isa gem5-SALAM/src/arch/arm/isa/insts/data64.isa
--- gem5/src/arch/arm/isa/insts/data64.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/data64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -83,16 +83,16 @@
         "logic": '0'
     }
 
-    immOp2 = "[[maybe_unused]] uint64_t secOp = imm;"
-    sRegOp2 = "[[maybe_unused]] uint64_t secOp = " + \
+    immOp2 = "GEM5_VAR_USED uint64_t secOp = imm;"
+    sRegOp2 = "GEM5_VAR_USED uint64_t secOp = " + \
               "shiftReg64(Op264, shiftAmt, shiftType, intWidth);"
-    eRegOp2 = "[[maybe_unused]] uint64_t secOp = " + \
+    eRegOp2 = "GEM5_VAR_USED uint64_t secOp = " + \
               "extendReg64(Op264, extendType, shiftAmt, intWidth);"
 
     def buildDataWork(mnem, code, flagType, suffix, buildCc, buildNonCc,
                       base, templateBase):
         code = '''
-        [[maybe_unused]] uint64_t resTemp = 0;
+        GEM5_VAR_USED uint64_t resTemp = 0;
         ''' + code
         ccCode = createCcCode64(carryCode64[flagType], overflowCode64[flagType])
         Name = mnem.capitalize() + suffix
@@ -577,9 +577,9 @@
 
     def condCompCode(flagType, op, imm):
         ccCode = createCcCode64(carryCode64[flagType], overflowCode64[flagType])
-        opDecl = "[[maybe_unused]] uint64_t secOp = imm;"
+        opDecl = "GEM5_VAR_USED uint64_t secOp = imm;"
         if not imm:
-            opDecl = "[[maybe_unused]] uint64_t secOp = Op264;"
+            opDecl = "GEM5_VAR_USED uint64_t secOp = Op264;"
         return opDecl + '''
             if (testPredicate(CondCodesNZ, CondCodesC, CondCodesV, condCode)) {
                 uint64_t resTemp = Op164 ''' + op + ''' secOp;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/fp.isa gem5-SALAM/src/arch/arm/isa/insts/fp.isa
--- gem5/src/arch/arm/isa/insts/fp.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/fp.isa	2024-02-22 18:17:15.000943953 -0600
@@ -467,7 +467,7 @@
     exec_output = ""
 
     singleSimpleCode = vfpEnabledCheckCode + '''
-        [[maybe_unused]] FPSCR fpscr = (FPSCR) FpscrExc;
+        GEM5_VAR_USED FPSCR fpscr = (FPSCR) FpscrExc;
         FpDest = %(op)s;
     '''
     singleCode = singleSimpleCode + '''
@@ -488,7 +488,7 @@
                 "%(func)s, fpscr.fz, fpscr.dn, fpscr.rMode)"
     singleUnaryOp = "unaryOp(fpscr, FpOp1, %(func)s, fpscr.fz, fpscr.rMode)"
     doubleCode = vfpEnabledCheckCode + '''
-        [[maybe_unused]] FPSCR fpscr = (FPSCR) FpscrExc;
+        GEM5_VAR_USED FPSCR fpscr = (FPSCR) FpscrExc;
         double dest = %(op)s;
         FpDestP0_uw = dblLow(dest);
         FpDestP1_uw = dblHi(dest);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/ldr64.isa gem5-SALAM/src/arch/arm/isa/insts/ldr64.isa
--- gem5/src/arch/arm/isa/insts/ldr64.isa	2024-02-22 18:25:43.627604696 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/ldr64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -88,7 +88,7 @@
 
             if self.flavor not in ("acquire", "acex", "exclusive",
                                    "acexp", "exp"):
-                self.memFlags.append("ArmISA::MMU::AllowUnaligned")
+                self.memFlags.append("ArmISA::TLB::AllowUnaligned")
 
             if self.flavor in ("acquire", "acex", "acexp"):
                 self.instFlags.extend(["IsWriteBarrier", "IsReadBarrier"])
@@ -136,7 +136,7 @@
             if self.user:
                 eaCode += " uint8_t userFlag = 0;\n"\
                           "  if(isUnpriviledgeAccess(xc->tcBase()))\n"\
-                          "     userFlag = ArmISA::MMU::UserMode;"
+                          "     userFlag = ArmISA::TLB::UserMode;"
 
             self.codeBlobs["ea_code"] = eaCode
 
@@ -201,7 +201,7 @@
             accEpilogCode = None
             # Code that actually handles the access
             if self.flavor in ("dprefetch", "iprefetch", "mprefetch"):
-                accCode = '[[maybe_unused]] uint64_t temp = Mem%s;'
+                accCode = 'GEM5_VAR_USED uint64_t temp = Mem%s;'
             elif self.flavor == "fp":
                 accEpilogCode = '''
                     ArmISA::ISA::zeroSveVecRegUpperPart(AA64FpDest,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/ldr.isa gem5-SALAM/src/arch/arm/isa/insts/ldr.isa
--- gem5/src/arch/arm/isa/insts/ldr.isa	2024-02-22 18:25:43.623604675 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/ldr.isa	2024-02-22 18:17:15.000943953 -0600
@@ -92,7 +92,7 @@
             super(RfeInst, self).__init__(mnem, post, add, writeback)
             self.Name = "RFE_" + loadImmClassName(post, add, writeback, 8)
 
-            self.memFlags.append("ArmISA::MMU::AlignWord")
+            self.memFlags.append("ArmISA::TLB::AlignWord")
 
         def emit(self):
             offset = 0
@@ -163,7 +163,7 @@
             # Add memory request flags where necessary
             self.memFlags.append("%d" % int(math.log(self.size, 2)))
             if self.user:
-                self.memFlags.append("ArmISA::MMU::UserMode")
+                self.memFlags.append("ArmISA::TLB::UserMode")
 
             self.instFlags = []
             if self.flavor == "dprefetch":
@@ -173,7 +173,7 @@
                 self.memFlags.append("Request::PREFETCH")
                 self.instFlags = ['IsInstPrefetch']
             elif self.flavor == "normal":
-                self.memFlags.append("ArmISA::MMU::AllowUnaligned")
+                self.memFlags.append("ArmISA::TLB::AllowUnaligned")
 
             if self.flavor in ("exclusive", "acex"):
                 self.memFlags.append("Request::LLSC")
@@ -249,9 +249,9 @@
             # Add memory request flags where necessary
             if self.flavor in ("exclusive", "acex"):
                 self.memFlags.append("Request::LLSC")
-                self.memFlags.append("ArmISA::MMU::AlignDoubleWord")
+                self.memFlags.append("ArmISA::TLB::AlignDoubleWord")
             else:
-                self.memFlags.append("ArmISA::MMU::AlignWord")
+                self.memFlags.append("ArmISA::TLB::AlignWord")
 
             # Disambiguate the class name for different flavors of loads
             if self.flavor != "normal":
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/misc64.isa gem5-SALAM/src/arch/arm/isa/insts/misc64.isa
--- gem5/src/arch/arm/isa/insts/misc64.isa	2024-02-22 18:25:43.627604696 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/misc64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -128,7 +128,7 @@
         bitMask = (bitMask >> imm1) | (bitMask << (intWidth - imm1));
         diff += intWidth;
     }
-    [[maybe_unused]] uint64_t topBits = ~mask(diff+1);
+    GEM5_VAR_USED uint64_t topBits = ~mask(diff+1);
     uint64_t result = imm1 == 0 ? Op164 :
                       (Op164 >> imm1) | (Op164 << (intWidth - imm1));
     result &= bitMask;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/misc.isa gem5-SALAM/src/arch/arm/isa/insts/misc.isa
--- gem5/src/arch/arm/isa/insts/misc.isa	2024-02-22 18:25:43.627604696 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/misc.isa	2024-02-22 18:17:15.000943953 -0600
@@ -290,7 +290,7 @@
                 // you look at the generated C code you'll find that they are.
                 // However this is safe as DecodedBankedIntReg (which is used
                 // in operands.isa to get the index of DecodedBankedIntReg)
-                // will return INTREG_ZERO if its not a valid integer
+                // will return INTREG_DUMMY if its not a valid integer
                 // register, so redirecting the write to somewhere we don't
                 // care about.
                 DecodedBankedIntReg = Op1;
@@ -891,8 +891,9 @@
     mrc14code = '''
     MiscRegIndex miscReg = (MiscRegIndex) xc->tcBase()->flattenRegId(
                                RegId(MiscRegClass, op1)).index();
-    auto [can_read, undefined] = canReadCoprocReg(miscReg, Scr, Cpsr,
-                                                  xc->tcBase());
+    bool can_read, undefined;
+    std::tie(can_read, undefined) = canReadCoprocReg(miscReg, Scr, Cpsr,
+                                                     xc->tcBase());
     if (!can_read || undefined) {
         return std::make_shared<UndefinedInstruction>(machInst, false,
                                                       mnemonic);
@@ -916,8 +917,9 @@
     mcr14code = '''
     MiscRegIndex miscReg = (MiscRegIndex) xc->tcBase()->flattenRegId(
                                RegId(MiscRegClass, dest)).index();
-    auto [can_write, undefined] = canWriteCoprocReg(miscReg, Scr, Cpsr,
-                                                    xc->tcBase());
+    bool can_write, undefined;
+    std::tie(can_write, undefined) = canWriteCoprocReg(miscReg, Scr, Cpsr,
+                                                       xc->tcBase());
     if (undefined || !can_write) {
         return std::make_shared<UndefinedInstruction>(machInst, false,
                                                       mnemonic);
@@ -945,8 +947,9 @@
 
     Fault fault = mcrMrc15Trap(miscReg, machInst, xc->tcBase(), imm);
 
-    auto [can_read, undefined] = canReadCoprocReg(miscReg, Scr, Cpsr,
-                                                  xc->tcBase());
+    bool can_read, undefined;
+    std::tie(can_read, undefined) = canReadCoprocReg(miscReg, Scr, Cpsr,
+                                                     xc->tcBase());
     // if we're in non secure PL1 mode then we can trap regargless of whether
     // the register is accessable, in other modes we trap if only if the register
     // IS accessable.
@@ -977,8 +980,9 @@
 
     Fault fault = mcrMrc15Trap(miscReg, machInst, xc->tcBase(), imm);
 
-    auto [can_write, undefined] = canWriteCoprocReg(miscReg, Scr, Cpsr,
-                                                    xc->tcBase());
+    bool can_write, undefined;
+    std::tie(can_write, undefined) = canWriteCoprocReg(miscReg, Scr, Cpsr,
+                                                       xc->tcBase());
 
     // if we're in non secure PL1 mode then we can trap regargless of whether
     // the register is accessable, in other modes we trap if only if the register
@@ -1010,8 +1014,9 @@
 
     Fault fault = mcrrMrrc15Trap(miscReg, machInst, xc->tcBase(), imm);
 
-    auto [can_read, undefined] = canReadCoprocReg(miscReg, Scr, Cpsr,
-                                                  xc->tcBase());
+    bool can_read, undefined;
+    std::tie(can_read, undefined) = canReadCoprocReg(miscReg, Scr, Cpsr,
+                                                     xc->tcBase());
     // if we're in non secure PL1 mode then we can trap regargless of whether
     // the register is accessable, in other modes we trap if only if the register
     // IS accessable.
@@ -1042,8 +1047,9 @@
 
     Fault fault = mcrrMrrc15Trap(miscReg, machInst, xc->tcBase(), imm);
 
-    auto [can_write, undefined] = canWriteCoprocReg(miscReg, Scr, Cpsr,
-                                                    xc->tcBase());
+    bool can_write, undefined;
+    std::tie(can_write, undefined) = canWriteCoprocReg(miscReg, Scr, Cpsr,
+                                                       xc->tcBase());
 
     // if we're in non secure PL1 mode then we can trap regargless of whether
     // the register is accessable, in other modes we trap if only if the register
@@ -1119,8 +1125,9 @@
 
         bool hypTrap = mcrMrc15TrapToHyp(miscReg, xc->tcBase(), imm);
 
-        auto [can_write, undefined] = canWriteCoprocReg(miscReg, Scr, Cpsr,
-                                                        xc->tcBase());
+        bool can_write, undefined;
+        std::tie(can_write, undefined) = canWriteCoprocReg(miscReg, Scr, Cpsr,
+                                                           xc->tcBase());
 
         // if we're in non secure PL1 mode then we can trap regardless
         // of whether the register is accessible, in other modes we
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/str64.isa gem5-SALAM/src/arch/arm/isa/insts/str64.isa
--- gem5/src/arch/arm/isa/insts/str64.isa	2024-02-22 18:25:43.627604696 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/str64.isa	2024-02-22 18:17:15.000943953 -0600
@@ -73,7 +73,7 @@
 
             if self.flavor not in ("release", "relex", "exclusive",
                                    "relexp", "exp"):
-                self.memFlags.append("ArmISA::MMU::AllowUnaligned")
+                self.memFlags.append("ArmISA::TLB::AllowUnaligned")
 
             if self.micro:
                 self.instFlags.append("IsMicroop")
@@ -137,7 +137,7 @@
             if self.user:
                 eaCode += " uint8_t userFlag = 0;\n"\
                           "  if(isUnpriviledgeAccess(xc->tcBase()))\n"\
-                          "     userFlag = ArmISA::MMU::UserMode;"
+                          "     userFlag = ArmISA::TLB::UserMode;"
             self.codeBlobs["ea_code"] = eaCode
 
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/str.isa gem5-SALAM/src/arch/arm/isa/insts/str.isa
--- gem5/src/arch/arm/isa/insts/str.isa	2024-02-22 18:25:43.627604696 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/str.isa	2024-02-22 18:17:15.000943953 -0600
@@ -137,7 +137,7 @@
             (newHeader,
              newDecoder,
              newExec) = self.fillTemplates(self.name, self.Name, codeBlobs,
-                 ["ArmISA::MMU::AlignWord"], [], 'SrsOp', wbDecl)
+                 ["ArmISA::TLB::AlignWord"], [], 'SrsOp', wbDecl)
 
             header_output += newHeader
             decoder_output += newDecoder
@@ -178,13 +178,13 @@
             # Add memory request flags where necessary
             self.memFlags.append("%d" % int(math.log(self.size, 2)))
             if self.user:
-                self.memFlags.append("ArmISA::MMU::UserMode")
+                self.memFlags.append("ArmISA::TLB::UserMode")
 
             if self.flavor in ("exclusive", "relex"):
                 self.instFlags.append("IsStoreConditional")
                 self.memFlags.append("Request::LLSC")
             elif self.flavor != "fp":
-                self.memFlags.append("ArmISA::MMU::AllowUnaligned")
+                self.memFlags.append("ArmISA::TLB::AllowUnaligned")
 
             if self.flavor in ("release", "relex"):
                 self.instFlags.extend(["IsWriteBarrier",
@@ -263,9 +263,9 @@
             if self.flavor in ("exclusive", "relex"):
                 self.instFlags.append("IsStoreConditional")
                 self.memFlags.append("Request::LLSC")
-                self.memFlags.append("ArmISA::MMU::AlignDoubleWord")
+                self.memFlags.append("ArmISA::TLB::AlignDoubleWord")
             else:
-                self.memFlags.append("ArmISA::MMU::AlignWord")
+                self.memFlags.append("ArmISA::TLB::AlignWord")
 
             if self.flavor in ("release", "relex"):
                 self.instFlags.extend(["IsWriteBarrier",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/insts/sve.isa gem5-SALAM/src/arch/arm/isa/insts/sve.isa
--- gem5/src/arch/arm/isa/insts/sve.isa	2024-02-22 18:25:43.631604717 -0600
+++ gem5-SALAM/src/arch/arm/isa/insts/sve.isa	2024-02-22 18:17:15.000943953 -0600
@@ -2007,7 +2007,7 @@
         destPred.reset();
         for (unsigned i = 0; i < eCount; i++) {
             const Element& srcElem1 = AA64FpOp1_x[i];
-            [[maybe_unused]] %(src_elem_2_ty)s srcElem2 = %(src_elem_2)s;
+            GEM5_VAR_USED %(src_elem_2_ty)s srcElem2 = %(src_elem_2)s;
             bool destElem = false;
             if (tmpPred[i]) {
                 %(op)s
@@ -2703,7 +2703,7 @@
         CondCodesC = !destPred.lastActive(GpOp, eCount);
         CondCodesV = 0;'''
         extraPrologCode = '''
-        [[maybe_unused]] auto& destPred = PDest;'''
+        GEM5_VAR_USED auto& destPred = PDest;'''
         baseClass = ('SvePredUnaryWImplicitSrcOp' if predType == PredType.NONE
                      else 'SvePredUnaryWImplicitSrcPredOp')
         iop = ArmInstObjParams(name, 'Sve' + Name, baseClass,
@@ -2722,7 +2722,7 @@
         global header_output, exec_output, decoders
         code = sveEnabledCheckCode + op
         extraPrologCode = '''
-        [[maybe_unused]] auto& destPred = Ffr;'''
+        GEM5_VAR_USED auto& destPred = Ffr;'''
         baseClass = ('SveWImplicitSrcDstOp' if isSetFfr
                      else 'SvePredUnaryWImplicitDstOp')
         iop = ArmInstObjParams(name, 'Sve' + Name, baseClass,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/templates/mem.isa gem5-SALAM/src/arch/arm/isa/templates/mem.isa
--- gem5/src/arch/arm/isa/templates/mem.isa	2024-02-22 18:25:43.631604717 -0600
+++ gem5-SALAM/src/arch/arm/isa/templates/mem.isa	2024-02-22 18:17:15.004943974 -0600
@@ -1164,7 +1164,7 @@
     {
         %(set_reg_idx_arr)s;
         %(constructor)s;
-        [[maybe_unused]] bool conditional = false;
+        GEM5_VAR_USED bool conditional = false;
         if (!(condCode == COND_AL || condCode == COND_UC)) {
             conditional = true;
             for (int x = 0; x < _numDestRegs; x++) {
@@ -1231,7 +1231,7 @@
     {
         %(set_reg_idx_arr)s;
         %(constructor)s;
-        [[maybe_unused]] bool conditional = false;
+        GEM5_VAR_USED bool conditional = false;
         if (!(condCode == COND_AL || condCode == COND_UC)) {
             conditional = true;
             for (int x = 0; x < _numDestRegs; x++) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa/templates/sve_mem.isa gem5-SALAM/src/arch/arm/isa/templates/sve_mem.isa
--- gem5/src/arch/arm/isa/templates/sve_mem.isa	2024-02-22 18:25:43.631604717 -0600
+++ gem5-SALAM/src/arch/arm/isa/templates/sve_mem.isa	2024-02-22 18:17:15.004943974 -0600
@@ -157,7 +157,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -192,7 +192,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -217,7 +217,7 @@
     %(class_name)s%(tpl_args)s::completeAcc(PacketPtr pkt,
             ExecContext *xc, Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -247,7 +247,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -285,7 +285,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -329,7 +329,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -361,7 +361,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_src_decl)s;
         %(op_rd)s;
@@ -386,7 +386,7 @@
             ExecContext *xc, Trace::InstRecord *traceData) const
     {
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<RegElemType>(xc->tcBase());
 
@@ -438,7 +438,7 @@
             dest(_dest), gp(_gp), base(_base), imm(_imm),
             elemIndex(_elemIndex), numElems(_numElems),
             firstFault(_firstFault),
-            memAccessFlags(ArmISA::MMU::AllowUnaligned)
+            memAccessFlags(ArmISA::TLB::AllowUnaligned)
         {
             %(set_reg_idx_arr)s;
             %(constructor)s;
@@ -526,7 +526,7 @@
             offsetIs32(_offsetIs32), offsetIsSigned(_offsetIsSigned),
             offsetIsScaled(_offsetIsScaled), elemIndex(_elemIndex),
             numElems(_numElems), firstFault(_firstFault),
-            memAccessFlags(ArmISA::MMU::AllowUnaligned)
+            memAccessFlags(ArmISA::TLB::AllowUnaligned)
         {
             %(set_reg_idx_arr)s;
             %(constructor)s;
@@ -585,7 +585,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_decl)s;
         %(op_rd)s;
@@ -634,7 +634,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_src_decl)s;
         %(op_rd)s;
@@ -675,7 +675,7 @@
     %(class_name)s%(tpl_args)s::completeAcc(PacketPtr pkt,
             ExecContext *xc, Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_decl)s;
         %(op_rd)s;
@@ -702,7 +702,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_decl)s;
         %(op_rd)s;
@@ -733,7 +733,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_decl)s;
         %(op_rd)s;
@@ -806,7 +806,7 @@
     %(class_name)s%(tpl_args)s::execute(ExecContext *xc,
             Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
 
         %(op_decl)s;
         %(op_rd)s;
@@ -890,7 +890,7 @@
         typedef _Element Element;
         typedef _Element TPElem;
 
-        RegIndex dest;
+        IntRegIndex dest;
         IntRegIndex gp;
         IntRegIndex base;
         int64_t imm;
@@ -904,12 +904,12 @@
 
       public:
         %(class_name)s(const char* mnem, ExtMachInst machInst,
-                RegIndex _dest, IntRegIndex _gp, IntRegIndex _base,
+                IntRegIndex _dest, IntRegIndex _gp, IntRegIndex _base,
                 int64_t _imm, uint8_t _numRegs, int _regIndex) :
             %(base_class)s(mnem, machInst, %(op_class)s),
             dest(_dest), gp(_gp), base(_base), imm(_imm),
             numRegs(_numRegs), regIndex(_regIndex),
-            memAccessFlags(ArmISA::MMU::AllowUnaligned)
+            memAccessFlags(ArmISA::TLB::AllowUnaligned)
         {
             %(set_reg_idx_arr)s;
             %(constructor)s;
@@ -989,7 +989,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<Element>(xc->tcBase());
 
@@ -1023,7 +1023,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<Element>(xc->tcBase());
 
@@ -1049,7 +1049,7 @@
             ExecContext *xc, Trace::InstRecord *traceData) const
     {
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<Element>(xc->tcBase());
 
@@ -1082,7 +1082,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<Element>(xc->tcBase());
 
@@ -1120,7 +1120,7 @@
     {
         Addr EA;
         Fault fault = NoFault;
-        [[maybe_unused]] bool aarch64 = true;
+        GEM5_VAR_USED bool aarch64 = true;
         unsigned eCount =
             ArmStaticInst::getCurSveVecLen<Element>(xc->tcBase());
 
@@ -1167,7 +1167,7 @@
         typedef _Element Element;
         typedef _Element TPElem;
 
-        RegIndex dest;
+        IntRegIndex dest;
         IntRegIndex gp;
         IntRegIndex base;
         IntRegIndex offset;
@@ -1181,12 +1181,12 @@
 
       public:
         %(class_name)s(const char* mnem, ExtMachInst machInst,
-                RegIndex _dest, IntRegIndex _gp, IntRegIndex _base,
+                IntRegIndex _dest, IntRegIndex _gp, IntRegIndex _base,
                 IntRegIndex _offset, uint8_t _numRegs, int _regIndex) :
             %(base_class)s(mnem, machInst, %(op_class)s),
             dest(_dest), gp(_gp), base(_base), offset(_offset),
             numRegs(_numRegs), regIndex(_regIndex),
-            memAccessFlags(ArmISA::MMU::AllowUnaligned)
+            memAccessFlags(ArmISA::TLB::AllowUnaligned)
         {
             %(set_reg_idx_arr)s;
             %(constructor)s;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa.cc gem5-SALAM/src/arch/arm/isa.cc
--- gem5/src/arch/arm/isa.cc	2024-02-22 18:25:43.615604632 -0600
+++ gem5-SALAM/src/arch/arm/isa.cc	2024-02-22 18:17:14.996943933 -0600
@@ -45,7 +45,6 @@
 #include "arch/arm/self_debug.hh"
 #include "arch/arm/system.hh"
 #include "arch/arm/tlbi_op.hh"
-#include "base/cprintf.hh"
 #include "cpu/base.hh"
 #include "cpu/checker/cpu.hh"
 #include "cpu/reg_class.hh"
@@ -65,16 +64,6 @@
 namespace ArmISA
 {
 
-class MiscRegClassOps : public RegClassOps
-{
-  public:
-    std::string
-    regName(const RegId &id) const override
-    {
-        return miscRegName[id.index()];
-    }
-} miscRegClassOps;
-
 ISA::ISA(const Params &p) : BaseISA(p), system(NULL),
     _decoderFlavor(p.decoderFlavor), pmu(p.pmu), impdefAsNop(p.impdef_nop),
     afterStartup(false)
@@ -85,7 +74,7 @@
     _regClasses.emplace_back(NumVecRegs * TheISA::NumVecElemPerVecReg);
     _regClasses.emplace_back(NumVecPredRegs);
     _regClasses.emplace_back(NUM_CCREGS);
-    _regClasses.emplace_back(NUM_MISCREGS, miscRegClassOps);
+    _regClasses.emplace_back(NUM_MISCREGS);
 
     miscRegs[MISCREG_SCTLR_RST] = 0;
 
@@ -2087,46 +2076,46 @@
             misc_reg = MISCREG_IFAR_S;
             break;
           case MISCREG_ATS1CPR:
-            addressTranslation(MMU::S1CTran, BaseMMU::Read, 0, val);
+            addressTranslation(TLB::S1CTran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_ATS1CPW:
-            addressTranslation(MMU::S1CTran, BaseMMU::Write, 0, val);
+            addressTranslation(TLB::S1CTran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_ATS1CUR:
-            addressTranslation(MMU::S1CTran, BaseMMU::Read,
-                MMU::UserMode, val);
+            addressTranslation(TLB::S1CTran, BaseMMU::Read,
+                TLB::UserMode, val);
             return;
           case MISCREG_ATS1CUW:
-            addressTranslation(MMU::S1CTran, BaseMMU::Write,
-                MMU::UserMode, val);
+            addressTranslation(TLB::S1CTran, BaseMMU::Write,
+                TLB::UserMode, val);
             return;
           case MISCREG_ATS12NSOPR:
             if (!haveSecurity)
                 panic("Security Extensions required for ATS12NSOPR");
-            addressTranslation(MMU::S1S2NsTran, BaseMMU::Read, 0, val);
+            addressTranslation(TLB::S1S2NsTran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_ATS12NSOPW:
             if (!haveSecurity)
                 panic("Security Extensions required for ATS12NSOPW");
-            addressTranslation(MMU::S1S2NsTran, BaseMMU::Write, 0, val);
+            addressTranslation(TLB::S1S2NsTran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_ATS12NSOUR:
             if (!haveSecurity)
                 panic("Security Extensions required for ATS12NSOUR");
-            addressTranslation(MMU::S1S2NsTran, BaseMMU::Read,
-                MMU::UserMode, val);
+            addressTranslation(TLB::S1S2NsTran, BaseMMU::Read,
+                TLB::UserMode, val);
             return;
           case MISCREG_ATS12NSOUW:
             if (!haveSecurity)
                 panic("Security Extensions required for ATS12NSOUW");
-            addressTranslation(MMU::S1S2NsTran, BaseMMU::Write,
-                MMU::UserMode, val);
+            addressTranslation(TLB::S1S2NsTran, BaseMMU::Write,
+                TLB::UserMode, val);
             return;
           case MISCREG_ATS1HR:
-            addressTranslation(MMU::HypMode, BaseMMU::Read, 0, val);
+            addressTranslation(TLB::HypMode, BaseMMU::Read, 0, val);
             return;
           case MISCREG_ATS1HW:
-            addressTranslation(MMU::HypMode, BaseMMU::Write, 0, val);
+            addressTranslation(TLB::HypMode, BaseMMU::Write, 0, val);
             return;
           case MISCREG_TTBCR:
             {
@@ -2263,44 +2252,44 @@
             }
             break;
           case MISCREG_AT_S1E1R_Xt:
-            addressTranslation64(MMU::S1E1Tran, BaseMMU::Read, 0, val);
+            addressTranslation64(TLB::S1E1Tran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_AT_S1E1W_Xt:
-            addressTranslation64(MMU::S1E1Tran, BaseMMU::Write, 0, val);
+            addressTranslation64(TLB::S1E1Tran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_AT_S1E0R_Xt:
-            addressTranslation64(MMU::S1E0Tran, BaseMMU::Read,
-                MMU::UserMode, val);
+            addressTranslation64(TLB::S1E0Tran, BaseMMU::Read,
+                TLB::UserMode, val);
             return;
           case MISCREG_AT_S1E0W_Xt:
-            addressTranslation64(MMU::S1E0Tran, BaseMMU::Write,
-                MMU::UserMode, val);
+            addressTranslation64(TLB::S1E0Tran, BaseMMU::Write,
+                TLB::UserMode, val);
             return;
           case MISCREG_AT_S1E2R_Xt:
-            addressTranslation64(MMU::S1E2Tran, BaseMMU::Read, 0, val);
+            addressTranslation64(TLB::S1E2Tran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_AT_S1E2W_Xt:
-            addressTranslation64(MMU::S1E2Tran, BaseMMU::Write, 0, val);
+            addressTranslation64(TLB::S1E2Tran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_AT_S12E1R_Xt:
-            addressTranslation64(MMU::S12E1Tran, BaseMMU::Read, 0, val);
+            addressTranslation64(TLB::S12E1Tran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_AT_S12E1W_Xt:
-            addressTranslation64(MMU::S12E1Tran, BaseMMU::Write, 0, val);
+            addressTranslation64(TLB::S12E1Tran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_AT_S12E0R_Xt:
-            addressTranslation64(MMU::S12E0Tran, BaseMMU::Read,
-                MMU::UserMode, val);
+            addressTranslation64(TLB::S12E0Tran, BaseMMU::Read,
+                TLB::UserMode, val);
             return;
           case MISCREG_AT_S12E0W_Xt:
-            addressTranslation64(MMU::S12E0Tran, BaseMMU::Write,
-                MMU::UserMode, val);
+            addressTranslation64(TLB::S12E0Tran, BaseMMU::Write,
+                TLB::UserMode, val);
             return;
           case MISCREG_AT_S1E3R_Xt:
-            addressTranslation64(MMU::S1E3Tran, BaseMMU::Read, 0, val);
+            addressTranslation64(TLB::S1E3Tran, BaseMMU::Read, 0, val);
             return;
           case MISCREG_AT_S1E3W_Xt:
-            addressTranslation64(MMU::S1E3Tran, BaseMMU::Write, 0, val);
+            addressTranslation64(TLB::S1E3Tran, BaseMMU::Write, 0, val);
             return;
           case MISCREG_SPSR_EL3:
           case MISCREG_SPSR_EL2:
@@ -2426,7 +2415,7 @@
 }
 
 void
-ISA::addressTranslation64(MMU::ArmTranslationType tran_type,
+ISA::addressTranslation64(TLB::ArmTranslationType tran_type,
     BaseMMU::Mode mode, Request::Flags flags, RegVal val)
 {
     // If we're in timing mode then doing the translation in
@@ -2477,7 +2466,7 @@
 }
 
 void
-ISA::addressTranslation(MMU::ArmTranslationType tran_type,
+ISA::addressTranslation(TLB::ArmTranslationType tran_type,
     BaseMMU::Mode mode, Request::Flags flags, RegVal val)
 {
     // If we're in timing mode then doing the translation in
@@ -2502,8 +2491,8 @@
         HCR hcr = readMiscRegNoEffect(MISCREG_HCR);
 
         uint8_t max_paddr_bit = 0;
-        if (haveLPAE && (ttbcr.eae || tran_type & MMU::HypMode ||
-            ((tran_type & MMU::S1S2NsTran) && hcr.vm) )) {
+        if (haveLPAE && (ttbcr.eae || tran_type & TLB::HypMode ||
+            ((tran_type & TLB::S1S2NsTran) && hcr.vm) )) {
 
             max_paddr_bit = 39;
         } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/isa.hh gem5-SALAM/src/arch/arm/isa.hh
--- gem5/src/arch/arm/isa.hh	2024-02-22 18:25:43.615604632 -0600
+++ gem5-SALAM/src/arch/arm/isa.hh	2024-02-22 18:17:14.996943933 -0600
@@ -42,11 +42,11 @@
 #define __ARCH_ARM_ISA_HH__
 
 #include "arch/arm/isa_device.hh"
-#include "arch/arm/mmu.hh"
 #include "arch/arm/regs/int.hh"
 #include "arch/arm/regs/misc.hh"
 #include "arch/arm/self_debug.hh"
 #include "arch/arm/system.hh"
+#include "arch/arm/tlb.hh"
 #include "arch/arm/types.hh"
 #include "arch/arm/utility.hh"
 #include "arch/generic/isa.hh"
@@ -514,9 +514,9 @@
         void initID32(const ArmISAParams &p);
         void initID64(const ArmISAParams &p);
 
-        void addressTranslation(MMU::ArmTranslationType tran_type,
+        void addressTranslation(TLB::ArmTranslationType tran_type,
             BaseMMU::Mode mode, Request::Flags flags, RegVal val);
-        void addressTranslation64(MMU::ArmTranslationType tran_type,
+        void addressTranslation64(TLB::ArmTranslationType tran_type,
             BaseMMU::Mode mode, Request::Flags flags, RegVal val);
 
       public:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/linux/process.cc gem5-SALAM/src/arch/arm/linux/process.cc
--- gem5/src/arch/arm/linux/process.cc	2024-02-22 18:16:36.460742465 -0600
+++ gem5-SALAM/src/arch/arm/linux/process.cc	2024-02-22 18:17:15.004943974 -0600
@@ -49,7 +49,6 @@
 #include "base/trace.hh"
 #include "cpu/thread_context.hh"
 #include "kern/linux/linux.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/process.hh"
 #include "sim/syscall_desc.hh"
 #include "sim/syscall_emul.hh"
@@ -73,10 +72,10 @@
         0xff, 0xff, 0xff, 0xef  // swi -1
     };
 
-    SETranslatingPortProxy proxy(tc);
     // Fill this page with swi -1 so we'll no if we land in it somewhere.
     for (Addr addr = 0; addr < PageBytes; addr += sizeof(swiNeg1)) {
-        proxy.writeBlob(commPage + addr, swiNeg1, sizeof(swiNeg1));
+        tc->getVirtProxy().writeBlob(commPage + addr,
+                                     swiNeg1, sizeof(swiNeg1));
     }
 
     uint8_t memory_barrier[] =
@@ -84,7 +83,8 @@
         0x5f, 0xf0, 0x7f, 0xf5, // dmb
         0x0e, 0xf0, 0xa0, 0xe1  // return
     };
-    proxy.writeBlob(commPage + 0x0fa0, memory_barrier, sizeof(memory_barrier));
+    tc->getVirtProxy().writeBlob(commPage + 0x0fa0, memory_barrier,
+                                 sizeof(memory_barrier));
 
     uint8_t cmpxchg[] =
     {
@@ -97,7 +97,7 @@
         0x5f, 0xf0, 0x7f, 0xf5,  // dmb
         0x0e, 0xf0, 0xa0, 0xe1   // return
     };
-    proxy.writeBlob(commPage + 0x0fc0, cmpxchg, sizeof(cmpxchg));
+    tc->getVirtProxy().writeBlob(commPage + 0x0fc0, cmpxchg, sizeof(cmpxchg));
 
     uint8_t get_tls[] =
     {
@@ -105,7 +105,7 @@
         0x70, 0x0f, 0x1d, 0xee, // mrc p15, 0, r0, c13, c0, 3
         0x0e, 0xf0, 0xa0, 0xe1  // return
     };
-    proxy.writeBlob(commPage + 0x0fe0, get_tls, sizeof(get_tls));
+    tc->getVirtProxy().writeBlob(commPage + 0x0fe0, get_tls, sizeof(get_tls));
 }
 
 void
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/linux/se_workload.cc gem5-SALAM/src/arch/arm/linux/se_workload.cc
--- gem5/src/arch/arm/linux/se_workload.cc	2024-02-22 18:25:43.635604738 -0600
+++ gem5-SALAM/src/arch/arm/linux/se_workload.cc	2024-02-22 18:17:15.004943974 -0600
@@ -46,7 +46,6 @@
 #include "base/loader/object_file.hh"
 #include "base/trace.hh"
 #include "cpu/thread_context.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/syscall_emul.hh"
 
 namespace gem5
@@ -130,8 +129,8 @@
 static SyscallReturn
 setTLSFunc32(SyscallDesc *desc, ThreadContext *tc, uint32_t tlsPtr)
 {
-    SETranslatingPortProxy(tc).writeBlob(
-            ArmLinuxProcess32::commPage + 0x0ff0, &tlsPtr, sizeof(tlsPtr));
+    tc->getVirtProxy().writeBlob(ArmLinuxProcess32::commPage + 0x0ff0,
+                                &tlsPtr, sizeof(tlsPtr));
     tc->setMiscReg(MISCREG_TPIDRURO, tlsPtr);
     return 0;
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/linux/se_workload.hh gem5-SALAM/src/arch/arm/linux/se_workload.hh
--- gem5/src/arch/arm/linux/se_workload.hh	2024-02-22 18:25:43.635604738 -0600
+++ gem5-SALAM/src/arch/arm/linux/se_workload.hh	2024-02-22 18:17:15.004943974 -0600
@@ -66,8 +66,8 @@
 
 template <typename ABI>
 struct Result<ABI, SyscallReturn,
-    typename std::enable_if_t<std::is_base_of_v<
-        ArmISA::EmuLinux::BaseSyscallABI, ABI>>>
+    typename std::enable_if_t<std::is_base_of<
+        ArmISA::EmuLinux::BaseSyscallABI, ABI>::value>>
 {
     static void
     store(ThreadContext *tc, const SyscallReturn &ret)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/mmu.cc gem5-SALAM/src/arch/arm/mmu.cc
--- gem5/src/arch/arm/mmu.cc	2024-02-22 18:25:43.635604738 -0600
+++ gem5-SALAM/src/arch/arm/mmu.cc	2024-02-22 18:17:15.004943974 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2013, 2016-2021 Arm Limited
+ * Copyright (c) 2020 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -11,9 +11,6 @@
  * unmodified and in its entirety in all distributions of the software,
  * modified or unmodified, in source code or in binary form.
  *
- * Copyright (c) 2001-2005 The Regents of The University of Michigan
- * All rights reserved.
- *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met: redistributions of source code must retain the above copyright
@@ -39,17 +36,8 @@
  */
 
 #include "arch/arm/mmu.hh"
-
-#include "arch/arm/isa.hh"
-#include "arch/arm/reg_abi.hh"
-#include "arch/arm/stage2_lookup.hh"
 #include "arch/arm/table_walker.hh"
 #include "arch/arm/tlbi_op.hh"
-#include "debug/TLB.hh"
-#include "debug/TLBVerbose.hh"
-#include "mem/packet_access.hh"
-#include "sim/pseudo_inst.hh"
-#include "sim/process.hh"
 
 namespace gem5
 {
@@ -59,31 +47,16 @@
 MMU::MMU(const ArmMMUParams &p)
   : BaseMMU(p),
     itbStage2(p.stage2_itb), dtbStage2(p.stage2_dtb),
+    iport(p.itb_walker, p.sys->getRequestorId(p.itb_walker)),
+    dport(p.dtb_walker, p.sys->getRequestorId(p.dtb_walker)),
     itbWalker(p.itb_walker), dtbWalker(p.dtb_walker),
     itbStage2Walker(p.stage2_itb_walker),
-    dtbStage2Walker(p.stage2_dtb_walker),
-    test(nullptr),
-    miscRegContext(0),
-    s1State(this, false), s2State(this, true),
-    _attr(0),
-    stats(this)
+    dtbStage2Walker(p.stage2_dtb_walker)
 {
-    // Cache system-level properties
-    if (FullSystem) {
-        ArmSystem *arm_sys = dynamic_cast<ArmSystem *>(p.sys);
-        assert(arm_sys);
-        haveLPAE = arm_sys->haveLPAE();
-        haveVirtualization = arm_sys->haveVirtualization();
-        haveLargeAsid64 = arm_sys->haveLargeAsid64();
-        physAddrRange = arm_sys->physAddrRange();
-    } else {
-        haveLPAE = false;
-        haveVirtualization = false;
-        haveLargeAsid64 = false;
-        physAddrRange = 48;
-    }
-
-    m5opRange = p.sys->m5opRange();
+    itbWalker->setPort(&iport);
+    dtbWalker->setPort(&dport);
+    itbStage2Walker->setPort(&iport);
+    dtbStage2Walker->setPort(&dport);
 }
 
 void
@@ -97,17 +70,10 @@
     itbStage2->setTableWalker(itbStage2Walker);
     dtbStage2->setTableWalker(dtbStage2Walker);
 
+    getITBPtr()->setStage2Tlb(itbStage2);
     getITBPtr()->setTableWalker(itbWalker);
+    getDTBPtr()->setStage2Tlb(dtbStage2);
     getDTBPtr()->setTableWalker(dtbWalker);
-
-    BaseMMU::init();
-}
-
-void
-MMU::drainResume()
-{
-    s1State.miscRegValid = false;
-    s2State.miscRegValid = false;
 }
 
 TLB *
@@ -126,1411 +92,51 @@
     }
 }
 
-TableWalker *
-MMU::getTableWalker(BaseMMU::Mode mode, bool stage2) const
-{
-    if (mode == BaseMMU::Execute) {
-        if (stage2)
-            return itbStage2Walker;
-        else
-            return itbWalker;
-    } else {
-        if (stage2)
-            return dtbStage2Walker;
-        else
-            return dtbWalker;
-    }
-}
-
-bool
-MMU::translateFunctional(ThreadContext *tc, Addr va, Addr &pa)
-{
-    CachedState& state = updateMiscReg(tc, NormalTran, false);
-
-    auto tlb = getTlb(BaseMMU::Read, state.directToStage2);
-
-    TlbEntry *e = tlb->lookup(
-        va, state.asid, state.vmid, state.isHyp, state.isSecure, true, false,
-        state.aarch64 ? state.aarch64EL : EL1, false, BaseMMU::Read);
-
-    if (!e)
-        return false;
-    pa = e->pAddr(va);
-    return true;
-}
-
-void
-MMU::invalidateMiscReg(TLBType type)
-{
-    s1State.miscRegValid = false;
-}
-
-Fault
-MMU::finalizePhysical(const RequestPtr &req,
-                      ThreadContext *tc, Mode mode) const
-{
-    const Addr paddr = req->getPaddr();
-
-    if (m5opRange.contains(paddr)) {
-        uint8_t func;
-        pseudo_inst::decodeAddrOffset(paddr - m5opRange.start(), func);
-        req->setLocalAccessor(
-            [func, mode](ThreadContext *tc, PacketPtr pkt) -> Cycles
-            {
-                uint64_t ret;
-                if (inAArch64(tc))
-                    pseudo_inst::pseudoInst<RegABI64>(tc, func, ret);
-                else
-                    pseudo_inst::pseudoInst<RegABI32>(tc, func, ret);
-
-                if (mode == Read)
-                    pkt->setLE(ret);
-
-                return Cycles(1);
-            }
-        );
-    }
-
-    return NoFault;
-}
-
-
-Fault
-MMU::translateSe(const RequestPtr &req, ThreadContext *tc, Mode mode,
-                 Translation *translation, bool &delay, bool timing,
-                 CachedState &state)
-{
-    updateMiscReg(tc, NormalTran, state.isStage2);
-    Addr vaddr_tainted = req->getVaddr();
-    Addr vaddr = 0;
-    if (state.aarch64)
-        vaddr = purifyTaggedAddr(vaddr_tainted, tc, state.aarch64EL,
-                                 (TCR)state.ttbcr, mode==Execute);
-    else
-        vaddr = vaddr_tainted;
-    Request::Flags flags = req->getFlags();
-
-    bool is_fetch = (mode == Execute);
-    bool is_write = (mode == Write);
-
-    if (!is_fetch) {
-        if (state.sctlr.a || !(flags & AllowUnaligned)) {
-            if (vaddr & mask(flags & AlignmentMask)) {
-                // LPAE is always disabled in SE mode
-                return std::make_shared<DataAbort>(
-                    vaddr_tainted,
-                    TlbEntry::DomainType::NoAccess, is_write,
-                    ArmFault::AlignmentFault, state.isStage2,
-                    ArmFault::VmsaTran);
-            }
-        }
-    }
-
-    Addr paddr;
-    Process *p = tc->getProcessPtr();
-
-    if (!p->pTable->translate(vaddr, paddr))
-        return std::make_shared<GenericPageTableFault>(vaddr_tainted);
-    req->setPaddr(paddr);
-
-    return finalizePhysical(req, tc, mode);
-}
-
-Fault
-MMU::checkPermissions(TlbEntry *te, const RequestPtr &req, Mode mode,
-                      bool stage2)
-{
-    return checkPermissions(te, req, mode, stage2 ? s2State : s1State);
-}
-
-Fault
-MMU::checkPermissions(TlbEntry *te, const RequestPtr &req, Mode mode,
-                      CachedState &state)
-{
-    // a data cache maintenance instruction that operates by MVA does
-    // not generate a Data Abort exeception due to a Permission fault
-    if (req->isCacheMaintenance()) {
-        return NoFault;
-    }
-
-    Addr vaddr = req->getVaddr(); // 32-bit don't have to purify
-    Request::Flags flags = req->getFlags();
-    bool is_fetch  = (mode == Execute);
-    bool is_write  = (mode == Write);
-    bool is_priv   = state.isPriv && !(flags & UserMode);
-
-    // Get the translation type from the actuall table entry
-    ArmFault::TranMethod tranMethod = te->longDescFormat ? ArmFault::LpaeTran
-                                                         : ArmFault::VmsaTran;
-
-    // If this is the second stage of translation and the request is for a
-    // stage 1 page table walk then we need to check the HCR.PTW bit. This
-    // allows us to generate a fault if the request targets an area marked
-    // as a device or strongly ordered.
-    if (state.isStage2 && req->isPTWalk() && state.hcr.ptw &&
-        (te->mtype != TlbEntry::MemoryType::Normal)) {
-        return std::make_shared<DataAbort>(
-            vaddr, te->domain, is_write,
-            ArmFault::PermissionLL + te->lookupLevel,
-            state.isStage2, tranMethod);
-    }
-
-    // Generate an alignment fault for unaligned data accesses to device or
-    // strongly ordered memory
-    if (!is_fetch) {
-        if (te->mtype != TlbEntry::MemoryType::Normal) {
-            if (vaddr & mask(flags & AlignmentMask)) {
-                stats.alignFaults++;
-                return std::make_shared<DataAbort>(
-                    vaddr, TlbEntry::DomainType::NoAccess, is_write,
-                    ArmFault::AlignmentFault, state.isStage2,
-                    tranMethod);
-            }
-        }
-    }
-
-    if (te->nonCacheable) {
-        // Prevent prefetching from I/O devices.
-        if (req->isPrefetch()) {
-            // Here we can safely use the fault status for the short
-            // desc. format in all cases
-            return std::make_shared<PrefetchAbort>(
-                vaddr, ArmFault::PrefetchUncacheable,
-                state.isStage2, tranMethod);
-        }
-    }
-
-    if (!te->longDescFormat) {
-        switch ((state.dacr >> (static_cast<uint8_t>(te->domain) * 2)) & 0x3) {
-          case 0:
-            stats.domainFaults++;
-            DPRINTF(TLB, "TLB Fault: Data abort on domain. DACR: %#x"
-                    " domain: %#x write:%d\n", state.dacr,
-                    static_cast<uint8_t>(te->domain), is_write);
-            if (is_fetch) {
-                // Use PC value instead of vaddr because vaddr might
-                // be aligned to cache line and should not be the
-                // address reported in FAR
-                return std::make_shared<PrefetchAbort>(
-                    req->getPC(),
-                    ArmFault::DomainLL + te->lookupLevel,
-                    state.isStage2, tranMethod);
-            } else
-                return std::make_shared<DataAbort>(
-                    vaddr, te->domain, is_write,
-                    ArmFault::DomainLL + te->lookupLevel,
-                    state.isStage2, tranMethod);
-          case 1:
-            // Continue with permissions check
-            break;
-          case 2:
-            panic("UNPRED domain\n");
-          case 3:
-            return NoFault;
-        }
-    }
-
-    // The 'ap' variable is AP[2:0] or {AP[2,1],1b'0}, i.e. always three bits
-    uint8_t ap  = te->longDescFormat ? te->ap << 1 : te->ap;
-    uint8_t hap = te->hap;
-
-    if (state.sctlr.afe == 1 || te->longDescFormat)
-        ap |= 1;
-
-    bool abt;
-    bool isWritable = true;
-    // If this is a stage 2 access (eg for reading stage 1 page table entries)
-    // then don't perform the AP permissions check, we stil do the HAP check
-    // below.
-    if (state.isStage2) {
-        abt = false;
-    } else {
-        switch (ap) {
-          case 0:
-            DPRINTF(TLB, "Access permissions 0, checking rs:%#x\n",
-                    (int)state.sctlr.rs);
-            if (!state.sctlr.xp) {
-                switch ((int)state.sctlr.rs) {
-                  case 2:
-                    abt = is_write;
-                    break;
-                  case 1:
-                    abt = is_write || !is_priv;
-                    break;
-                  case 0:
-                  case 3:
-                  default:
-                    abt = true;
-                    break;
-                }
-            } else {
-                abt = true;
-            }
-            break;
-          case 1:
-            abt = !is_priv;
-            break;
-          case 2:
-            abt = !is_priv && is_write;
-            isWritable = is_priv;
-            break;
-          case 3:
-            abt = false;
-            break;
-          case 4:
-            panic("UNPRED premissions\n");
-          case 5:
-            abt = !is_priv || is_write;
-            isWritable = false;
-            break;
-          case 6:
-          case 7:
-            abt        = is_write;
-            isWritable = false;
-            break;
-          default:
-            panic("Unknown permissions %#x\n", ap);
-        }
-    }
-
-    bool hapAbt = is_write ? !(hap & 2) : !(hap & 1);
-    bool xn     = te->xn || (isWritable && state.sctlr.wxn) ||
-                            (ap == 3    && state.sctlr.uwxn && is_priv);
-    if (is_fetch && (abt || xn ||
-                     (te->longDescFormat && te->pxn && is_priv) ||
-                     (state.isSecure && te->ns && state.scr.sif))) {
-        stats.permsFaults++;
-        DPRINTF(TLB, "TLB Fault: Prefetch abort on permission check. AP:%d "
-                     "priv:%d write:%d ns:%d sif:%d sctlr.afe: %d \n",
-                     ap, is_priv, is_write, te->ns,
-                     state.scr.sif, state.sctlr.afe);
-        // Use PC value instead of vaddr because vaddr might be aligned to
-        // cache line and should not be the address reported in FAR
-        return std::make_shared<PrefetchAbort>(
-            req->getPC(),
-            ArmFault::PermissionLL + te->lookupLevel,
-            state.isStage2, tranMethod);
-    } else if (abt | hapAbt) {
-        stats.permsFaults++;
-        DPRINTF(TLB, "TLB Fault: Data abort on permission check. AP:%d priv:%d"
-               " write:%d\n", ap, is_priv, is_write);
-        return std::make_shared<DataAbort>(
-            vaddr, te->domain, is_write,
-            ArmFault::PermissionLL + te->lookupLevel,
-            state.isStage2 | !abt, tranMethod);
-    }
-    return NoFault;
-}
-
-Fault
-MMU::checkPermissions64(TlbEntry *te, const RequestPtr &req, Mode mode,
-                        ThreadContext *tc, bool stage2)
-{
-    return checkPermissions64(te, req, mode, tc, stage2 ? s2State : s1State);
-}
-
-Fault
-MMU::checkPermissions64(TlbEntry *te, const RequestPtr &req, Mode mode,
-                        ThreadContext *tc, CachedState &state)
-{
-    assert(state.aarch64);
-
-    // A data cache maintenance instruction that operates by VA does
-    // not generate a Permission fault unless:
-    // * It is a data cache invalidate (dc ivac) which requires write
-    //   permissions to the VA, or
-    // * It is executed from EL0
-    if (req->isCacheClean() && state.aarch64EL != EL0 && !state.isStage2) {
-        return NoFault;
-    }
-
-    Addr vaddr_tainted = req->getVaddr();
-    Addr vaddr = purifyTaggedAddr(vaddr_tainted, tc, state.aarch64EL,
-        (TCR)state.ttbcr, mode==Execute);
-
-    Request::Flags flags = req->getFlags();
-    bool is_fetch  = (mode == Execute);
-    // Cache clean operations require read permissions to the specified VA
-    bool is_write = !req->isCacheClean() && mode == Write;
-    bool is_atomic = req->isAtomic();
-    [[maybe_unused]] bool is_priv = state.isPriv && !(flags & UserMode);
-
-    updateMiscReg(tc, state.curTranType, state.isStage2);
-
-    // If this is the second stage of translation and the request is for a
-    // stage 1 page table walk then we need to check the HCR.PTW bit. This
-    // allows us to generate a fault if the request targets an area marked
-    // as a device or strongly ordered.
-    if (state.isStage2 && req->isPTWalk() && state.hcr.ptw &&
-        (te->mtype != TlbEntry::MemoryType::Normal)) {
-        return std::make_shared<DataAbort>(
-            vaddr_tainted, te->domain, is_write,
-            ArmFault::PermissionLL + te->lookupLevel,
-            state.isStage2, ArmFault::LpaeTran);
-    }
-
-    // Generate an alignment fault for unaligned accesses to device or
-    // strongly ordered memory
-    if (!is_fetch) {
-        if (te->mtype != TlbEntry::MemoryType::Normal) {
-            if (vaddr & mask(flags & AlignmentMask)) {
-                stats.alignFaults++;
-                return std::make_shared<DataAbort>(
-                    vaddr_tainted,
-                    TlbEntry::DomainType::NoAccess,
-                    is_atomic ? false : is_write,
-                    ArmFault::AlignmentFault, state.isStage2,
-                    ArmFault::LpaeTran);
-            }
-        }
-    }
-
-    if (te->nonCacheable) {
-        // Prevent prefetching from I/O devices.
-        if (req->isPrefetch()) {
-            // Here we can safely use the fault status for the short
-            // desc. format in all cases
-            return std::make_shared<PrefetchAbort>(
-                vaddr_tainted,
-                ArmFault::PrefetchUncacheable,
-                state.isStage2, ArmFault::LpaeTran);
-        }
-    }
-
-    uint8_t ap  = 0x3 & (te->ap);  // 2-bit access protection field
-    bool grant = false;
-
-    bool wxn = state.sctlr.wxn;
-    uint8_t xn =  te->xn;
-    uint8_t pxn = te->pxn;
-    bool r = (!is_write && !is_fetch);
-    bool w = is_write;
-    bool x = is_fetch;
-
-    if (ArmSystem::haveEL(tc, EL3) && state.isSecure &&
-        te->ns && state.scr.sif) {
-        xn = true;
-    }
-
-    // grant_read is used for faults from an atomic instruction that
-    // both reads and writes from a memory location. From a ISS point
-    // of view they count as read if a read to that address would have
-    // generated the fault; they count as writes otherwise
-    bool grant_read = true;
-    DPRINTF(TLBVerbose, "Checking permissions: ap:%d, xn:%d, pxn:%d, r:%d, "
-                        "w:%d, x:%d, is_priv: %d, wxn: %d\n", ap, xn,
-                        pxn, r, w, x, is_priv, wxn);
-
-    if (state.isStage2) {
-        assert(ArmSystem::haveVirtualization(tc) && state.aarch64EL != EL2);
-        // In stage 2 we use the hypervisor access permission bits.
-        // The following permissions are described in ARM DDI 0487A.f
-        // D4-1802
-        uint8_t hap = 0x3 & te->hap;
-        grant_read = hap & 0x1;
-        if (is_fetch) {
-            // sctlr.wxn overrides the xn bit
-            grant = !wxn && !xn;
-        } else if (is_atomic) {
-            grant = hap;
-        } else if (is_write) {
-            grant = hap & 0x2;
-        } else { // is_read
-            grant = grant_read;
-        }
-    } else {
-        switch (state.aarch64EL) {
-          case EL0:
-            {
-                grant_read = ap & 0x1;
-                uint8_t perm = (ap << 2)  | (xn << 1) | pxn;
-                switch (perm) {
-                  case 0:
-                  case 1:
-                  case 8:
-                  case 9:
-                    grant = x;
-                    break;
-                  case 4:
-                  case 5:
-                    grant = r || w || (x && !wxn);
-                    break;
-                  case 6:
-                  case 7:
-                    grant = r || w;
-                    break;
-                  case 12:
-                  case 13:
-                    grant = r || x;
-                    break;
-                  case 14:
-                  case 15:
-                    grant = r;
-                    break;
-                  default:
-                    grant = false;
-                }
-            }
-            break;
-          case EL1:
-            {
-                if (checkPAN(tc, ap, req, mode, is_priv, state)) {
-                    grant = false;
-                    grant_read = false;
-                    break;
-                }
-
-                uint8_t perm = (ap << 2)  | (xn << 1) | pxn;
-                switch (perm) {
-                  case 0:
-                  case 2:
-                    grant = r || w || (x && !wxn);
-                    break;
-                  case 1:
-                  case 3:
-                  case 4:
-                  case 5:
-                  case 6:
-                  case 7:
-                    // regions that are writeable at EL0 should not be
-                    // executable at EL1
-                    grant = r || w;
-                    break;
-                  case 8:
-                  case 10:
-                  case 12:
-                  case 14:
-                    grant = r || x;
-                    break;
-                  case 9:
-                  case 11:
-                  case 13:
-                  case 15:
-                    grant = r;
-                    break;
-                  default:
-                    grant = false;
-                }
-            }
-            break;
-          case EL2:
-            if (state.hcr.e2h && checkPAN(tc, ap, req, mode, is_priv, state)) {
-                grant = false;
-                grant_read = false;
-                break;
-            }
-            [[fallthrough]];
-          case EL3:
-            {
-                uint8_t perm = (ap & 0x2) | xn;
-                switch (perm) {
-                  case 0:
-                    grant = r || w || (x && !wxn);
-                    break;
-                  case 1:
-                    grant = r || w;
-                    break;
-                  case 2:
-                    grant = r || x;
-                    break;
-                  case 3:
-                    grant = r;
-                    break;
-                  default:
-                    grant = false;
-                }
-            }
-            break;
-        }
-    }
-
-    if (!grant) {
-        if (is_fetch) {
-            stats.permsFaults++;
-            DPRINTF(TLB, "TLB Fault: Prefetch abort on permission check. "
-                    "AP:%d priv:%d write:%d ns:%d sif:%d "
-                    "sctlr.afe: %d\n",
-                    ap, is_priv, is_write, te->ns,
-                    state.scr.sif, state.sctlr.afe);
-            // Use PC value instead of vaddr because vaddr might be aligned to
-            // cache line and should not be the address reported in FAR
-            return std::make_shared<PrefetchAbort>(
-                req->getPC(),
-                ArmFault::PermissionLL + te->lookupLevel,
-                state.isStage2, ArmFault::LpaeTran);
-        } else {
-            stats.permsFaults++;
-            DPRINTF(TLB, "TLB Fault: Data abort on permission check. AP:%d "
-                    "priv:%d write:%d\n", ap, is_priv, is_write);
-            return std::make_shared<DataAbort>(
-                vaddr_tainted, te->domain,
-                (is_atomic && !grant_read) ? false : is_write,
-                ArmFault::PermissionLL + te->lookupLevel,
-                state.isStage2, ArmFault::LpaeTran);
-        }
-    }
-
-    return NoFault;
-}
-
 bool
-MMU::checkPAN(ThreadContext *tc, uint8_t ap, const RequestPtr &req, Mode mode,
-              const bool is_priv, CachedState &state)
-{
-    // The PAN bit has no effect on:
-    // 1) Instruction accesses.
-    // 2) Data Cache instructions other than DC ZVA
-    // 3) Address translation instructions, other than ATS1E1RP and
-    // ATS1E1WP when ARMv8.2-ATS1E1 is implemented. (Unimplemented in
-    // gem5)
-    // 4) Instructions to be treated as unprivileged, unless
-    // HCR_EL2.{E2H, TGE} == {1, 0}
-    const AA64MMFR1 mmfr1 = tc->readMiscReg(MISCREG_ID_AA64MMFR1_EL1);
-    if (mmfr1.pan && state.cpsr.pan && (ap & 0x1) &&
-        mode != BaseMMU::Execute) {
-
-        if (req->isCacheMaintenance() &&
-            !(req->getFlags() & Request::CACHE_BLOCK_ZERO)) {
-            // Cache maintenance other than DC ZVA
-            return false;
-        } else if (!is_priv && !(state.hcr.e2h && !state.hcr.tge)) {
-            // Treated as unprivileged unless HCR_EL2.{E2H, TGE} == {1, 0}
-            return false;
-        }
-        return true;
-    }
-
-    return false;
-}
-
-Fault
-MMU::translateMmuOff(ThreadContext *tc, const RequestPtr &req, Mode mode,
-        ArmTranslationType tran_type, Addr vaddr, bool long_desc_format,
-        CachedState &state)
-{
-    bool is_fetch  = (mode == Execute);
-    bool is_atomic = req->isAtomic();
-    req->setPaddr(vaddr);
-    // When the MMU is off the security attribute corresponds to the
-    // security state of the processor
-    if (state.isSecure)
-        req->setFlags(Request::SECURE);
-
-    if (state.aarch64) {
-        bool selbit = bits(vaddr, 55);
-        TCR tcr1 = tc->readMiscReg(MISCREG_TCR_EL1);
-        int topbit = computeAddrTop(tc, selbit, is_fetch, tcr1, currEL(tc));
-        int addr_sz = bits(vaddr, topbit, physAddrRange);
-        if (addr_sz != 0){
-            Fault f;
-            if (is_fetch)
-                f = std::make_shared<PrefetchAbort>(vaddr,
-                    ArmFault::AddressSizeLL, state.isStage2,
-                    ArmFault::LpaeTran);
-            else
-                f = std::make_shared<DataAbort>( vaddr,
-                    TlbEntry::DomainType::NoAccess,
-                    is_atomic ? false : mode==Write,
-                    ArmFault::AddressSizeLL, state.isStage2,
-                    ArmFault::LpaeTran);
-            return f;
-        }
-    }
-
-    // @todo: double check this (ARM ARM issue C B3.2.1)
-    if (long_desc_format || state.sctlr.tre == 0 || state.nmrr.ir0 == 0 ||
-        state.nmrr.or0 == 0 || state.prrr.tr0 != 0x2) {
-        if (!req->isCacheMaintenance()) {
-            req->setFlags(Request::UNCACHEABLE);
-        }
-        req->setFlags(Request::STRICT_ORDER);
-    }
-
-    // Set memory attributes
-    TlbEntry temp_te;
-    temp_te.ns = !state.isSecure;
-    bool dc = (HaveVirtHostExt(tc)
-               && state.hcr.e2h == 1 && state.hcr.tge == 1) ? 0: state.hcr.dc;
-    bool i_cacheability = state.sctlr.i && !state.sctlr.m;
-    if (state.isStage2 || !dc || state.isSecure ||
-       (state.isHyp && !(tran_type & S1CTran))) {
-
-        temp_te.mtype      = is_fetch ? TlbEntry::MemoryType::Normal
-                                      : TlbEntry::MemoryType::StronglyOrdered;
-        temp_te.innerAttrs = i_cacheability? 0x2: 0x0;
-        temp_te.outerAttrs = i_cacheability? 0x2: 0x0;
-        temp_te.shareable  = true;
-        temp_te.outerShareable = true;
-    } else {
-        temp_te.mtype      = TlbEntry::MemoryType::Normal;
-        temp_te.innerAttrs = 0x3;
-        temp_te.outerAttrs = 0x3;
-        temp_te.shareable  = false;
-        temp_te.outerShareable = false;
-    }
-    temp_te.setAttributes(long_desc_format);
-    DPRINTF(TLBVerbose, "(No MMU) setting memory attributes: shareable: "
-            "%d, innerAttrs: %d, outerAttrs: %d, stage2: %d\n",
-            temp_te.shareable, temp_te.innerAttrs, temp_te.outerAttrs,
-            state.isStage2);
-    setAttr(temp_te.attributes);
-
-    return testTranslation(req, mode, TlbEntry::DomainType::NoAccess, state);
-}
-
-Fault
-MMU::translateMmuOn(ThreadContext* tc, const RequestPtr &req, Mode mode,
-                    Translation *translation, bool &delay, bool timing,
-                    bool functional, Addr vaddr,
-                    ArmFault::TranMethod tranMethod, CachedState &state)
+MMU::translateFunctional(ThreadContext *tc, Addr vaddr, Addr &paddr)
 {
-    TlbEntry *te = NULL;
-    bool is_fetch  = (mode == Execute);
-    TlbEntry mergeTe;
-
-    Request::Flags flags = req->getFlags();
-    Addr vaddr_tainted = req->getVaddr();
-
-    Fault fault = getResultTe(&te, req, tc, mode, translation, timing,
-                              functional, &mergeTe, state);
-    // only proceed if we have a valid table entry
-    if ((te == NULL) && (fault == NoFault)) delay = true;
-
-    // If we have the table entry transfer some of the attributes to the
-    // request that triggered the translation
-    if (te != NULL) {
-        // Set memory attributes
-        DPRINTF(TLBVerbose,
-                "Setting memory attributes: shareable: %d, innerAttrs: %d, "
-                "outerAttrs: %d, mtype: %d, stage2: %d\n",
-                te->shareable, te->innerAttrs, te->outerAttrs,
-                static_cast<uint8_t>(te->mtype), state.isStage2);
-        setAttr(te->attributes);
-
-        if (te->nonCacheable && !req->isCacheMaintenance())
-            req->setFlags(Request::UNCACHEABLE);
-
-        // Require requests to be ordered if the request goes to
-        // strongly ordered or device memory (i.e., anything other
-        // than normal memory requires strict order).
-        if (te->mtype != TlbEntry::MemoryType::Normal)
-            req->setFlags(Request::STRICT_ORDER);
-
-        Addr pa = te->pAddr(vaddr);
-        req->setPaddr(pa);
-
-        if (state.isSecure && !te->ns) {
-            req->setFlags(Request::SECURE);
-        }
-        if (!is_fetch && fault == NoFault &&
-            (vaddr & mask(flags & AlignmentMask)) &&
-            (te->mtype != TlbEntry::MemoryType::Normal)) {
-                // Unaligned accesses to Device memory should always cause an
-                // abort regardless of sctlr.a
-                stats.alignFaults++;
-                bool is_write  = (mode == Write);
-                return std::make_shared<DataAbort>(
-                    vaddr_tainted,
-                    TlbEntry::DomainType::NoAccess, is_write,
-                    ArmFault::AlignmentFault, state.isStage2,
-                    tranMethod);
-        }
-
-        // Check for a trickbox generated address fault
-        if (fault == NoFault)
-            fault = testTranslation(req, mode, te->domain, state);
-    }
-
-    if (fault == NoFault) {
-        // Don't try to finalize a physical address unless the
-        // translation has completed (i.e., there is a table entry).
-        return te ? finalizePhysical(req, tc, mode) : NoFault;
-    } else {
-        return fault;
-    }
+    return getDTBPtr()->translateFunctional(tc, vaddr, paddr);
 }
 
 Fault
-MMU::translateFs(const RequestPtr &req, ThreadContext *tc, Mode mode,
-        Translation *translation, bool &delay, bool timing,
-        ArmTranslationType tran_type, bool functional,
-        CachedState &state)
-{
-    // No such thing as a functional timing access
-    assert(!(timing && functional));
-
-    Addr vaddr_tainted = req->getVaddr();
-    Addr vaddr = 0;
-    if (state.aarch64)
-        vaddr = purifyTaggedAddr(vaddr_tainted, tc, state.aarch64EL,
-            (TCR)state.ttbcr, mode==Execute);
-    else
-        vaddr = vaddr_tainted;
-    Request::Flags flags = req->getFlags();
-
-    bool is_fetch  = (mode == Execute);
-    bool is_write  = (mode == Write);
-    bool long_desc_format = state.aarch64 || longDescFormatInUse(tc);
-    ArmFault::TranMethod tranMethod = long_desc_format ? ArmFault::LpaeTran
-                                                       : ArmFault::VmsaTran;
-
-    DPRINTF(TLBVerbose,
-            "CPSR is priv:%d UserMode:%d secure:%d S1S2NsTran:%d\n",
-            state.isPriv, flags & UserMode, state.isSecure,
-            tran_type & S1S2NsTran);
-
-    DPRINTF(TLB, "translateFs addr %#x, mode %d, st2 %d, scr %#x sctlr %#x "
-                 "flags %#lx tranType 0x%x\n", vaddr_tainted, mode,
-                 state.isStage2, state.scr, state.sctlr, flags, tran_type);
-
-    if (!state.isStage2) {
-        if ((req->isInstFetch() && (!state.sctlr.i)) ||
-            ((!req->isInstFetch()) && (!state.sctlr.c))){
-            if (!req->isCacheMaintenance()) {
-                req->setFlags(Request::UNCACHEABLE);
-            }
-            req->setFlags(Request::STRICT_ORDER);
-        }
-    }
-    if (!is_fetch) {
-        if (state.sctlr.a || !(flags & AllowUnaligned)) {
-            if (vaddr & mask(flags & AlignmentMask)) {
-                stats.alignFaults++;
-                return std::make_shared<DataAbort>(
-                    vaddr_tainted,
-                    TlbEntry::DomainType::NoAccess, is_write,
-                    ArmFault::AlignmentFault, state.isStage2,
-                    tranMethod);
-            }
-        }
-    }
-
-    bool vm = state.hcr.vm;
-    if (HaveVirtHostExt(tc) && state.hcr.e2h == 1 && state.hcr.tge ==1)
-        vm = 0;
-    else if (state.hcr.dc == 1)
-        vm = 1;
-
-    Fault fault = NoFault;
-    // If guest MMU is off or hcr.vm=0 go straight to stage2
-    if ((state.isStage2 && !vm) || (!state.isStage2 && !state.sctlr.m)) {
-        fault = translateMmuOff(tc, req, mode, tran_type, vaddr,
-                                long_desc_format, state);
-    } else {
-        DPRINTF(TLBVerbose, "Translating %s=%#x context=%d\n",
-                state.isStage2 ? "IPA" : "VA", vaddr_tainted, state.asid);
-        // Translation enabled
-        fault = translateMmuOn(tc, req, mode, translation, delay, timing,
-                               functional, vaddr, tranMethod, state);
-    }
-
-    // Check for Debug Exceptions
-    SelfDebug *sd = ArmISA::ISA::getSelfDebug(tc);
-
-    if (sd->enabled() && fault == NoFault) {
-        fault = sd->testDebug(tc, req, mode);
-    }
-
-    return fault;
-}
-
-Fault
-MMU::translateAtomic(const RequestPtr &req, ThreadContext *tc, Mode mode,
-    ArmTranslationType tran_type)
-{
-    return translateAtomic(req, tc, mode, tran_type, false);
-}
-
-Fault
-MMU::translateAtomic(const RequestPtr &req, ThreadContext *tc, Mode mode,
-    ArmTranslationType tran_type, bool stage2)
-{
-    auto& state = updateMiscReg(tc, tran_type, stage2);
-
-    bool delay = false;
-    Fault fault;
-    if (FullSystem)
-        fault = translateFs(req, tc, mode, NULL, delay, false,
-            tran_type, false, state);
-    else
-        fault = translateSe(req, tc, mode, NULL, delay, false, state);
-    assert(!delay);
-    return fault;
-}
-
-Fault
-MMU::translateFunctional(const RequestPtr &req, ThreadContext *tc, Mode mode)
-{
-    return translateFunctional(req, tc, mode, NormalTran, false);
-}
-
-Fault
-MMU::translateFunctional(const RequestPtr &req, ThreadContext *tc, Mode mode,
-    ArmTranslationType tran_type)
+MMU::translateFunctional(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, TLB::ArmTranslationType tran_type)
 {
     return translateFunctional(req, tc, mode, tran_type, false);
 }
 
 Fault
-MMU::translateFunctional(const RequestPtr &req, ThreadContext *tc, Mode mode,
-    ArmTranslationType tran_type, bool stage2)
-{
-    auto& state = updateMiscReg(tc, tran_type, stage2);
-
-    bool delay = false;
-    Fault fault;
-    if (FullSystem)
-        fault = translateFs(req, tc, mode, NULL, delay, false,
-            tran_type, true, state);
-   else
-        fault = translateSe(req, tc, mode, NULL, delay, false, state);
-    assert(!delay);
-    return fault;
-}
-
-void
-MMU::translateTiming(const RequestPtr &req, ThreadContext *tc,
-    Translation *translation, Mode mode, ArmTranslationType tran_type,
+MMU::translateFunctional(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, TLB::ArmTranslationType tran_type,
     bool stage2)
 {
-    auto& state = updateMiscReg(tc, tran_type, stage2);
-
-    assert(translation);
-
-    translateComplete(req, tc, translation, mode, tran_type,
-        stage2, state);
-}
-
-Fault
-MMU::translateComplete(const RequestPtr &req, ThreadContext *tc,
-        Translation *translation, Mode mode, ArmTranslationType tran_type,
-        bool call_from_s2)
-{
-    return translateComplete(req, tc, translation, mode, tran_type,
-        call_from_s2, s1State);
+    return getTlb(mode, stage2)->translateFunctional(
+        req, tc, mode, tran_type);
 }
 
 Fault
-MMU::translateComplete(const RequestPtr &req, ThreadContext *tc,
-        Translation *translation, Mode mode, ArmTranslationType tran_type,
-        bool call_from_s2, CachedState &state)
-{
-    bool delay = false;
-    Fault fault;
-    if (FullSystem)
-        fault = translateFs(req, tc, mode, translation, delay, true, tran_type,
-            false, state);
-    else
-        fault = translateSe(req, tc, mode, translation, delay, true, state);
-
-    DPRINTF(TLBVerbose, "Translation returning delay=%d fault=%d\n", delay,
-            fault != NoFault);
-    // If we have a translation, and we're not in the middle of doing a stage
-    // 2 translation tell the translation that we've either finished or its
-    // going to take a while. By not doing this when we're in the middle of a
-    // stage 2 translation we prevent marking the translation as delayed twice,
-    // one when the translation starts and again when the stage 1 translation
-    // completes.
-
-    if (translation && (call_from_s2 || !state.stage2Req || req->hasPaddr() ||
-        fault != NoFault)) {
-        if (!delay)
-            translation->finish(fault, req, tc, mode);
-        else
-            translation->markDelayed();
-    }
-    return fault;
-}
-
-vmid_t
-MMU::CachedState::getVMID(ThreadContext *tc) const
-{
-    AA64MMFR1 mmfr1 = tc->readMiscReg(MISCREG_ID_AA64MMFR1_EL1);
-    VTCR_t vtcr = tc->readMiscReg(MISCREG_VTCR_EL2);
-    vmid_t vmid = 0;
-
-    switch (mmfr1.vmidbits) {
-      case 0b0000:
-        // 8 bits
-        vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 55, 48);
-        break;
-      case 0b0010:
-        if (vtcr.vs && ELIs64(tc, EL2)) {
-            // 16 bits
-            vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 63, 48);
-        } else {
-            // 8 bits
-            vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 55, 48);
-        }
-        break;
-      default:
-        panic("Reserved ID_AA64MMFR1_EL1.VMIDBits value: %#x",
-              mmfr1.vmidbits);
-    }
-
-    return vmid;
-}
-
-MMU::CachedState&
-MMU::updateMiscReg(ThreadContext *tc,
-    ArmTranslationType tran_type, bool stage2)
+MMU::translateAtomic(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, bool stage2)
 {
-    // check if the regs have changed, or the translation mode is different.
-    // NOTE: the tran type doesn't affect stage 2 TLB's as they only handle
-    // one type of translation anyway
-
-    auto& state = stage2 ? s2State : s1State;
-    if (state.miscRegValid && miscRegContext == tc->contextId() &&
-        ((tran_type == state.curTranType) || stage2)) {
-
-    } else {
-        DPRINTF(TLBVerbose, "TLB variables changed!\n");
-        state.updateMiscReg(tc, tran_type);
-
-        itbStage2->setVMID(state.vmid);
-        dtbStage2->setVMID(state.vmid);
-
-        for (auto tlb : instruction) {
-            static_cast<TLB*>(tlb)->setVMID(state.vmid);
-        }
-        for (auto tlb : data) {
-            static_cast<TLB*>(tlb)->setVMID(state.vmid);
-        }
-        for (auto tlb : unified) {
-            static_cast<TLB*>(tlb)->setVMID(state.vmid);
-        }
-
-        miscRegContext = tc->contextId();
-    }
-
-    if (state.directToStage2) {
-        s2State.updateMiscReg(tc, tran_type);
-        return s2State;
-    } else {
-        return state;
-    }
+    return getTlb(mode, stage2)->translateAtomic(req, tc, mode);
 }
 
 void
-MMU::CachedState::updateMiscReg(ThreadContext *tc,
-    ArmTranslationType tran_type)
-{
-    cpsr = tc->readMiscReg(MISCREG_CPSR);
-
-    // Dependencies: SCR/SCR_EL3, CPSR
-    isSecure = ArmISA::isSecure(tc) &&
-        !(tran_type & HypMode) && !(tran_type & S1S2NsTran);
-
-    aarch64EL = tranTypeEL(cpsr, tran_type);
-    aarch64 = isStage2 ?
-        ELIs64(tc, EL2) :
-        ELIs64(tc, aarch64EL == EL0 ? EL1 : aarch64EL);
-
-    hcr = tc->readMiscReg(MISCREG_HCR_EL2);
-    if (aarch64) {  // AArch64
-        // determine EL we need to translate in
-        switch (aarch64EL) {
-          case EL0:
-            if (HaveVirtHostExt(tc) && hcr.tge == 1 && hcr.e2h == 1) {
-                // VHE code for EL2&0 regime
-                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL2);
-                ttbcr = tc->readMiscReg(MISCREG_TCR_EL2);
-                uint64_t ttbr_asid = ttbcr.a1 ?
-                    tc->readMiscReg(MISCREG_TTBR1_EL2) :
-                    tc->readMiscReg(MISCREG_TTBR0_EL2);
-                asid = bits(ttbr_asid,
-                            (mmu->haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
-
-            } else {
-                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL1);
-                ttbcr = tc->readMiscReg(MISCREG_TCR_EL1);
-                uint64_t ttbr_asid = ttbcr.a1 ?
-                    tc->readMiscReg(MISCREG_TTBR1_EL1) :
-                    tc->readMiscReg(MISCREG_TTBR0_EL1);
-                asid = bits(ttbr_asid,
-                            (mmu->haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
-
-            }
-            break;
-          case EL1:
-            {
-                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL1);
-                ttbcr = tc->readMiscReg(MISCREG_TCR_EL1);
-                uint64_t ttbr_asid = ttbcr.a1 ?
-                    tc->readMiscReg(MISCREG_TTBR1_EL1) :
-                    tc->readMiscReg(MISCREG_TTBR0_EL1);
-                asid = bits(ttbr_asid,
-                            (mmu->haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
-            }
-            break;
-          case EL2:
-            sctlr = tc->readMiscReg(MISCREG_SCTLR_EL2);
-            ttbcr = tc->readMiscReg(MISCREG_TCR_EL2);
-            if (hcr.e2h == 1) {
-                // VHE code for EL2&0 regime
-                uint64_t ttbr_asid = ttbcr.a1 ?
-                    tc->readMiscReg(MISCREG_TTBR1_EL2) :
-                    tc->readMiscReg(MISCREG_TTBR0_EL2);
-                asid = bits(ttbr_asid,
-                            (mmu->haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
-            } else {
-                asid = -1;
-            }
-            break;
-          case EL3:
-            sctlr = tc->readMiscReg(MISCREG_SCTLR_EL3);
-            ttbcr = tc->readMiscReg(MISCREG_TCR_EL3);
-            asid = -1;
-            break;
-        }
-
-        scr = tc->readMiscReg(MISCREG_SCR_EL3);
-        isPriv = aarch64EL != EL0;
-        if (mmu->haveVirtualization) {
-            vmid = getVMID(tc);
-            isHyp = aarch64EL == EL2;
-            isHyp |= tran_type & HypMode;
-            isHyp &= (tran_type & S1S2NsTran) == 0;
-            isHyp &= (tran_type & S1CTran)    == 0;
-            bool vm = hcr.vm;
-            if (HaveVirtHostExt(tc) && hcr.e2h == 1 && hcr.tge ==1) {
-                vm = 0;
-            }
-
-            if (hcr.e2h == 1 && (aarch64EL == EL2
-                                  || (hcr.tge ==1 && aarch64EL == EL0))) {
-                isHyp = true;
-                directToStage2 = false;
-                stage2Req      = false;
-                stage2DescReq  = false;
-            } else {
-            // Work out if we should skip the first stage of translation and go
-            // directly to stage 2. This value is cached so we don't have to
-            // compute it for every translation.
-                bool sec = !isSecure || (isSecure && IsSecureEL2Enabled(tc));
-                stage2Req = isStage2 ||
-                            (vm && !isHyp && sec &&
-                             !(tran_type & S1CTran) && (aarch64EL < EL2) &&
-                             !(tran_type & S1E1Tran)); // <--- FIX THIS HACK
-                stage2DescReq = isStage2 ||  (vm && !isHyp && sec &&
-                                (aarch64EL < EL2));
-                directToStage2 = !isStage2 && stage2Req && !sctlr.m;
-            }
-        } else {
-            vmid           = 0;
-            isHyp          = false;
-            directToStage2 = false;
-            stage2Req      = false;
-            stage2DescReq  = false;
-        }
-    } else {  // AArch32
-        sctlr  = tc->readMiscReg(snsBankedIndex(MISCREG_SCTLR, tc,
-                                 !isSecure));
-        ttbcr  = tc->readMiscReg(snsBankedIndex(MISCREG_TTBCR, tc,
-                                 !isSecure));
-        scr    = tc->readMiscReg(MISCREG_SCR);
-        isPriv = cpsr.mode != MODE_USER;
-        if (longDescFormatInUse(tc)) {
-            uint64_t ttbr_asid = tc->readMiscReg(
-                snsBankedIndex(ttbcr.a1 ? MISCREG_TTBR1 :
-                                          MISCREG_TTBR0,
-                                       tc, !isSecure));
-            asid = bits(ttbr_asid, 55, 48);
-        } else { // Short-descriptor translation table format in use
-            CONTEXTIDR context_id = tc->readMiscReg(snsBankedIndex(
-                MISCREG_CONTEXTIDR, tc,!isSecure));
-            asid = context_id.asid;
-        }
-        prrr = tc->readMiscReg(snsBankedIndex(MISCREG_PRRR, tc,
-                               !isSecure));
-        nmrr = tc->readMiscReg(snsBankedIndex(MISCREG_NMRR, tc,
-                               !isSecure));
-        dacr = tc->readMiscReg(snsBankedIndex(MISCREG_DACR, tc,
-                               !isSecure));
-        hcr  = tc->readMiscReg(MISCREG_HCR);
-
-        if (mmu->haveVirtualization) {
-            vmid   = bits(tc->readMiscReg(MISCREG_VTTBR), 55, 48);
-            isHyp  = cpsr.mode == MODE_HYP;
-            isHyp |=  tran_type & HypMode;
-            isHyp &= (tran_type & S1S2NsTran) == 0;
-            isHyp &= (tran_type & S1CTran)    == 0;
-            if (isHyp) {
-                sctlr = tc->readMiscReg(MISCREG_HSCTLR);
-            }
-            // Work out if we should skip the first stage of translation and go
-            // directly to stage 2. This value is cached so we don't have to
-            // compute it for every translation.
-            bool sec = !isSecure || (isSecure && IsSecureEL2Enabled(tc));
-            stage2Req      = hcr.vm && !isStage2 && !isHyp && sec &&
-                             !(tran_type & S1CTran);
-            stage2DescReq  = hcr.vm && !isStage2 && !isHyp && sec;
-            directToStage2 = stage2Req && !sctlr.m;
-        } else {
-            vmid           = 0;
-            stage2Req      = false;
-            isHyp          = false;
-            directToStage2 = false;
-            stage2DescReq  = false;
-        }
-    }
-    miscRegValid = true;
-    curTranType  = tran_type;
-}
-
-ExceptionLevel
-MMU::tranTypeEL(CPSR cpsr, ArmTranslationType type)
-{
-    switch (type) {
-      case S1E0Tran:
-      case S12E0Tran:
-        return EL0;
-
-      case S1E1Tran:
-      case S12E1Tran:
-        return EL1;
-
-      case S1E2Tran:
-        return EL2;
-
-      case S1E3Tran:
-        return EL3;
-
-      case NormalTran:
-      case S1CTran:
-      case S1S2NsTran:
-      case HypMode:
-        return currEL(cpsr);
-
-      default:
-        panic("Unknown translation mode!\n");
-    }
-}
-
-Fault
-MMU::getTE(TlbEntry **te, const RequestPtr &req, ThreadContext *tc, Mode mode,
-        Translation *translation, bool timing, bool functional,
-        bool is_secure, ArmTranslationType tran_type,
-        bool stage2)
-{
-    return getTE(te, req, tc, mode, translation, timing, functional,
-        is_secure, tran_type, stage2 ? s2State : s1State);
-}
-
-TlbEntry*
-MMU::lookup(Addr va, uint16_t asid, vmid_t vmid, bool hyp, bool secure,
-            bool functional, bool ignore_asn, ExceptionLevel target_el,
-            bool in_host, bool stage2, BaseMMU::Mode mode)
-{
-    TLB *tlb = getTlb(mode, stage2);
-    return tlb->multiLookup(va, asid, vmid, hyp, secure, functional,
-                            ignore_asn, target_el, in_host, mode);
-}
-
-Fault
-MMU::getTE(TlbEntry **te, const RequestPtr &req, ThreadContext *tc, Mode mode,
-        Translation *translation, bool timing, bool functional,
-        bool is_secure, ArmTranslationType tran_type,
-        CachedState& state)
-{
-    // In a 2-stage system, the IPA->PA translation can be started via this
-    // call so make sure the miscRegs are correct.
-    if (state.isStage2) {
-        updateMiscReg(tc, tran_type, true);
-    }
-
-    Addr vaddr_tainted = req->getVaddr();
-    Addr vaddr = 0;
-    ExceptionLevel target_el = state.aarch64 ? state.aarch64EL : EL1;
-    if (state.aarch64) {
-        vaddr = purifyTaggedAddr(vaddr_tainted, tc, target_el,
-            (TCR)state.ttbcr, mode==Execute);
-    } else {
-        vaddr = vaddr_tainted;
-    }
-
-    *te = lookup(vaddr, state.asid, state.vmid, state.isHyp, is_secure, false,
-                 false, target_el, false, state.isStage2, mode);
-
-    if (*te == NULL) {
-        if (req->isPrefetch()) {
-            // if the request is a prefetch don't attempt to fill the TLB or go
-            // any further with the memory access (here we can safely use the
-            // fault status for the short desc. format in all cases)
-           stats.prefetchFaults++;
-           return std::make_shared<PrefetchAbort>(
-               vaddr_tainted, ArmFault::PrefetchTLBMiss, state.isStage2);
-        }
-
-        // start translation table walk, pass variables rather than
-        // re-retreaving in table walker for speed
-        DPRINTF(TLB,
-                "TLB Miss: Starting hardware table walker for %#x(%d:%d)\n",
-                vaddr_tainted, state.asid, state.vmid);
-
-        Fault fault;
-        fault = getTableWalker(mode, state.isStage2)->walk(
-            req, tc, state.asid, state.vmid, state.isHyp, mode,
-            translation, timing, functional, is_secure,
-            tran_type, state.stage2DescReq);
-
-        // for timing mode, return and wait for table walk,
-        if (timing || fault != NoFault) {
-            return fault;
-        }
-
-        *te = lookup(vaddr, state.asid, state.vmid, state.isHyp, is_secure,
-                     true, false, target_el, false, state.isStage2, mode);
-        assert(*te);
-    }
-    return NoFault;
-}
-
-Fault
-MMU::getResultTe(TlbEntry **te, const RequestPtr &req,
-        ThreadContext *tc, Mode mode,
-        Translation *translation, bool timing, bool functional,
-        TlbEntry *mergeTe, CachedState &state)
-{
-    Fault fault;
-
-    if (state.isStage2) {
-        // We are already in the stage 2 TLB. Grab the table entry for stage
-        // 2 only. We are here because stage 1 translation is disabled.
-        TlbEntry *s2_te = NULL;
-        // Get the stage 2 table entry
-        fault = getTE(&s2_te, req, tc, mode, translation, timing, functional,
-                      state.isSecure, state.curTranType, state);
-        // Check permissions of stage 2
-        if ((s2_te != NULL) && (fault == NoFault)) {
-            if (state.aarch64)
-                fault = checkPermissions64(s2_te, req, mode, tc, state);
-            else
-                fault = checkPermissions(s2_te, req, mode, state);
-        }
-        *te = s2_te;
-        return fault;
-    }
-
-    TlbEntry *s1Te = NULL;
-
-    Addr vaddr_tainted = req->getVaddr();
-
-    // Get the stage 1 table entry
-    fault = getTE(&s1Te, req, tc, mode, translation, timing, functional,
-                  state.isSecure, state.curTranType, state);
-    // only proceed if we have a valid table entry
-    if ((s1Te != NULL) && (fault == NoFault)) {
-        // Check stage 1 permissions before checking stage 2
-        if (state.aarch64)
-            fault = checkPermissions64(s1Te, req, mode, tc, state);
-        else
-            fault = checkPermissions(s1Te, req, mode, state);
-        if (state.stage2Req & (fault == NoFault)) {
-            Stage2LookUp *s2_lookup = new Stage2LookUp(this, *s1Te,
-                req, translation, mode, timing, functional, state.isSecure,
-                state.curTranType);
-            fault = s2_lookup->getTe(tc, mergeTe);
-            if (s2_lookup->isComplete()) {
-                *te = mergeTe;
-                // We've finished with the lookup so delete it
-                delete s2_lookup;
-            } else {
-                // The lookup hasn't completed, so we can't delete it now. We
-                // get round this by asking the object to self delete when the
-                // translation is complete.
-                s2_lookup->setSelfDelete();
-            }
-        } else {
-            // This case deals with an S1 hit (or bypass), followed by
-            // an S2 hit-but-perms issue
-            if (state.isStage2) {
-                DPRINTF(TLBVerbose, "s2TLB: reqVa %#x, reqPa %#x, fault %p\n",
-                        vaddr_tainted, req->hasPaddr() ? req->getPaddr() : ~0,
-                        fault);
-                if (fault != NoFault) {
-                    auto arm_fault = reinterpret_cast<ArmFault*>(fault.get());
-                    arm_fault->annotate(ArmFault::S1PTW, false);
-                    arm_fault->annotate(ArmFault::OVA, vaddr_tainted);
-                }
-            }
-            *te = s1Te;
-        }
-    }
-    return fault;
-}
-
-void
-MMU::takeOverFrom(BaseMMU *old_mmu)
+MMU::translateTiming(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Translation *translation, BaseMMU::Mode mode, bool stage2)
 {
-    BaseMMU::takeOverFrom(old_mmu);
-
-    auto *ommu = dynamic_cast<MMU*>(old_mmu);
-    assert(ommu);
-
-    _attr = ommu->_attr;
-
-    s1State = ommu->s1State;
-    s2State = ommu->s2State;
+    return getTlb(mode, stage2)->translateTiming(req, tc, translation, mode);
 }
 
 void
-MMU::setTestInterface(SimObject *_ti)
-{
-    if (!_ti) {
-        test = nullptr;
-    } else {
-        TlbTestInterface *ti(dynamic_cast<TlbTestInterface *>(_ti));
-        fatal_if(!ti, "%s is not a valid ARM TLB tester\n", _ti->name());
-        test = ti;
-    }
-}
-
-Fault
-MMU::testTranslation(const RequestPtr &req, Mode mode,
-                     TlbEntry::DomainType domain, CachedState &state)
+MMU::invalidateMiscReg(TLBType type)
 {
-    if (!test || !req->hasSize() || req->getSize() == 0 ||
-        req->isCacheMaintenance()) {
-        return NoFault;
-    } else {
-        return test->translationCheck(req, state.isPriv, mode, domain);
+    if (type & TLBType::I_TLBS) {
+        getITBPtr()->invalidateMiscReg();
     }
-}
-
-Fault
-MMU::testWalk(Addr pa, Addr size, Addr va, bool is_secure, Mode mode,
-              TlbEntry::DomainType domain, LookupLevel lookup_level,
-              bool stage2)
-{
-    return testWalk(pa, size, va, is_secure, mode, domain, lookup_level,
-        stage2 ? s2State : s1State);
-}
-
-Fault
-MMU::testWalk(Addr pa, Addr size, Addr va, bool is_secure, Mode mode,
-              TlbEntry::DomainType domain, LookupLevel lookup_level,
-              CachedState &state)
-{
-    if (!test) {
-        return NoFault;
-    } else {
-        return test->walkCheck(pa, size, va, is_secure, state.isPriv, mode,
-                               domain, lookup_level);
+    if (type & TLBType::D_TLBS) {
+        getDTBPtr()->invalidateMiscReg();
     }
 }
 
-MMU::Stats::Stats(statistics::Group *parent)
-  : statistics::Group(parent),
-    ADD_STAT(alignFaults, statistics::units::Count::get(),
-             "Number of MMU faults due to alignment restrictions"),
-    ADD_STAT(prefetchFaults, statistics::units::Count::get(),
-             "Number of MMU faults due to prefetch"),
-    ADD_STAT(domainFaults, statistics::units::Count::get(),
-             "Number of MMU faults due to domain restrictions"),
-    ADD_STAT(permsFaults, statistics::units::Count::get(),
-             "Number of MMU faults due to permissions restrictions")
-{
-}
-
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/mmu.hh gem5-SALAM/src/arch/arm/mmu.hh
--- gem5/src/arch/arm/mmu.hh	2024-02-22 18:25:43.635604738 -0600
+++ gem5-SALAM/src/arch/arm/mmu.hh	2024-02-22 18:17:15.004943974 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2013, 2016, 2019-2021 Arm Limited
+ * Copyright (c) 2020 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -11,9 +11,6 @@
  * unmodified and in its entirety in all distributions of the software,
  * modified or unmodified, in source code or in binary form.
  *
- * Copyright (c) 2001-2005 The Regents of The University of Michigan
- * All rights reserved.
- *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met: redistributions of source code must retain the above copyright
@@ -41,6 +38,7 @@
 #ifndef __ARCH_ARM_MMU_HH__
 #define __ARCH_ARM_MMU_HH__
 
+#include "arch/arm/table_walker.hh"
 #include "arch/arm/tlb.hh"
 #include "arch/generic/mmu.hh"
 
@@ -51,8 +49,6 @@
 
 namespace ArmISA {
 
-class TableWalker;
-
 class MMU : public BaseMMU
 {
   protected:
@@ -69,54 +65,20 @@
     }
 
     TLB * getTlb(BaseMMU::Mode mode, bool stage2) const;
-    TableWalker * getTableWalker(BaseMMU::Mode mode, bool stage2) const;
 
   protected:
     TLB *itbStage2;
     TLB *dtbStage2;
 
+    TableWalker::Port iport;
+    TableWalker::Port dport;
+
     TableWalker *itbWalker;
     TableWalker *dtbWalker;
     TableWalker *itbStage2Walker;
     TableWalker *dtbStage2Walker;
 
   public:
-    enum ArmFlags
-    {
-        AlignmentMask = 0x7,
-
-        AlignByte = 0x0,
-        AlignHalfWord = 0x1,
-        AlignWord = 0x2,
-        AlignDoubleWord = 0x3,
-        AlignQuadWord = 0x4,
-        AlignOctWord = 0x5,
-
-        AllowUnaligned = 0x8,
-        // Priv code operating as if it wasn't
-        UserMode = 0x10
-    };
-
-    enum ArmTranslationType
-    {
-        NormalTran = 0,
-        S1CTran = 0x1,
-        HypMode = 0x2,
-        // Secure code operating as if it wasn't (required by some Address
-        // Translate operations)
-        S1S2NsTran = 0x4,
-        // Address translation instructions (eg AT S1E0R_Xt) need to be handled
-        // in special ways during translation because they could need to act
-        // like a different EL than the current EL. The following flags are
-        // for these instructions
-        S1E0Tran = 0x8,
-        S1E1Tran = 0x10,
-        S1E2Tran = 0x20,
-        S1E3Tran = 0x40,
-        S12E0Tran = 0x80,
-        S12E1Tran = 0x100
-    };
-
     enum TLBType
     {
         I_TLBS = 0x01,
@@ -124,131 +86,25 @@
         ALL_TLBS = 0x11
     };
 
-    struct CachedState {
-        explicit CachedState(MMU *_mmu, bool stage2)
-          : mmu(_mmu), isStage2(stage2)
-        {}
-
-        void updateMiscReg(ThreadContext *tc, ArmTranslationType tran_type);
-
-        /** Returns the current VMID
-         * (information stored in the VTTBR_EL2 register) */
-        vmid_t getVMID(ThreadContext *tc) const;
-
-        MMU *mmu;
-        bool isStage2 = false;
-        CPSR cpsr = 0;
-        bool aarch64 = false;
-        ExceptionLevel aarch64EL = EL0;
-        SCTLR sctlr = 0;
-        SCR scr = 0;
-        bool isPriv = false;
-        bool isSecure = false;
-        bool isHyp = false;
-        TTBCR ttbcr = 0;
-        uint16_t asid = 0;
-        vmid_t vmid = 0;
-        PRRR prrr = 0;
-        NMRR nmrr = 0;
-        HCR hcr = 0;
-        uint32_t dacr = 0;
-        bool miscRegValid = false;
-        ArmTranslationType curTranType = NormalTran;
-
-        // Indicates whether a stage 2 lookup is also required
-        bool stage2Req = false;
-
-        // Indicates whether a stage 2 lookup of the table descriptors is
-        // required.  Certain address translation instructions will
-        // intercept the IPA but the table descriptors still need to be
-        // translated by the stage2.
-        bool stage2DescReq = false;
-
-        // Indicates whether all translation requests should
-        // be routed directly to the stage 2 TLB
-        bool directToStage2 = false;
-    };
-
     MMU(const ArmMMUParams &p);
 
     void init() override;
 
-    /**
-     * Do a functional lookup on the TLB (for debugging)
-     * and don't modify any internal state
-     * @param tc thread context to get the context id from
-     * @param vaddr virtual address to translate
-     * @param pa returned physical address
-     * @return if the translation was successful
-     */
     bool translateFunctional(ThreadContext *tc, Addr vaddr, Addr &paddr);
 
     Fault translateFunctional(const RequestPtr &req, ThreadContext *tc,
-        BaseMMU::Mode mode) override;
+        BaseMMU::Mode mode, TLB::ArmTranslationType tran_type);
 
-    /**
-     * Do a functional lookup on the TLB (for checker cpu) that
-     * behaves like a normal lookup without modifying any page table state.
-     */
     Fault translateFunctional(const RequestPtr &req, ThreadContext *tc,
-        BaseMMU::Mode mode, ArmTranslationType tran_type);
-
-    Fault translateFunctional(const RequestPtr &req, ThreadContext *tc,
-        BaseMMU::Mode mode, ArmTranslationType tran_type, bool stage2);
+        BaseMMU::Mode mode, TLB::ArmTranslationType tran_type,
+        bool stage2);
 
-    Fault
-    translateAtomic(const RequestPtr &req,
-                    ThreadContext *tc, Mode mode) override
-    {
-        return translateAtomic(req, tc, mode, NormalTran);
-    }
+    using BaseMMU::translateAtomic;
     Fault translateAtomic(const RequestPtr &req, ThreadContext *tc,
-        BaseMMU::Mode mode, ArmTranslationType tran_type, bool stage2);
-    Fault translateAtomic(const RequestPtr &req, ThreadContext *tc, Mode mode,
-        ArmTranslationType tran_type);
+        BaseMMU::Mode mode, bool stage2);
 
-    void
-    translateTiming(const RequestPtr &req, ThreadContext *tc,
-                    Translation *translation, Mode mode) override
-    {
-        translateTiming(req, tc, translation, mode, NormalTran, false);
-    }
     void translateTiming(const RequestPtr &req, ThreadContext *tc,
         BaseMMU::Translation *translation, BaseMMU::Mode mode, bool stage2);
-    void translateTiming(
-            const RequestPtr &req, ThreadContext *tc,
-            Translation *translation, Mode mode,
-            ArmTranslationType tran_type, bool stage2);
-
-    Fault translateMmuOff(ThreadContext *tc, const RequestPtr &req, Mode mode,
-        ArmTranslationType tran_type, Addr vaddr, bool long_desc_format,
-        CachedState &state);
-    Fault translateMmuOn(ThreadContext *tc, const RequestPtr &req, Mode mode,
-        Translation *translation, bool &delay, bool timing, bool functional,
-        Addr vaddr, ArmFault::TranMethod tranMethod,
-        CachedState &state);
-
-    Fault translateFs(const RequestPtr &req, ThreadContext *tc, Mode mode,
-            Translation *translation, bool &delay,
-            bool timing, ArmTranslationType tran_type, bool functional,
-            CachedState &state);
-    Fault translateSe(const RequestPtr &req, ThreadContext *tc, Mode mode,
-            Translation *translation, bool &delay, bool timing,
-            CachedState &state);
-
-    Fault translateComplete(const RequestPtr &req, ThreadContext *tc,
-            Translation *translation, Mode mode, ArmTranslationType tran_type,
-            bool call_from_s2);
-    Fault translateComplete(const RequestPtr &req, ThreadContext *tc,
-            Translation *translation, Mode mode, ArmTranslationType tran_type,
-            bool call_from_s2, CachedState &state);
-    Fault finalizePhysical(
-            const RequestPtr &req,
-            ThreadContext *tc, Mode mode) const override;
-
-    void drainResume() override;
-
-    void takeOverFrom(BaseMMU *old_mmu) override;
 
     void invalidateMiscReg(TLBType type = ALL_TLBS);
 
@@ -269,15 +125,8 @@
     void
     flushStage1(const OP &tlbi_op)
     {
-        for (auto tlb : instruction) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
-        for (auto tlb : data) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
-        for (auto tlb : unified) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
+        iflush(tlbi_op);
+        dflush(tlbi_op);
     }
 
     template <typename OP>
@@ -292,24 +141,14 @@
     void
     iflush(const OP &tlbi_op)
     {
-        for (auto tlb : instruction) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
-        for (auto tlb : unified) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
+        getITBPtr()->flush(tlbi_op);
     }
 
     template <typename OP>
     void
     dflush(const OP &tlbi_op)
     {
-        for (auto tlb : data) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
-        for (auto tlb : unified) {
-            static_cast<TLB*>(tlb)->flush(tlbi_op);
-        }
+        getDTBPtr()->flush(tlbi_op);
     }
 
     void
@@ -323,116 +162,8 @@
     uint64_t
     getAttr() const
     {
-        return _attr;
-    }
-
-    /** Accessor functions for memory attributes for last accessed TLB entry
-     */
-    void
-    setAttr(uint64_t attr)
-    {
-        _attr = attr;
+        return getDTBPtr()->getAttr();
     }
-
-    /**
-     * Determine the EL to use for the purpose of a translation given
-     * a specific translation type. If the translation type doesn't
-     * specify an EL, we use the current EL.
-     */
-    static ExceptionLevel tranTypeEL(CPSR cpsr, ArmTranslationType type);
-
-  public:
-    /** Lookup an entry in the TLB
-     * @param vpn virtual address
-     * @param asn context id/address space id to use
-     * @param vmid The virtual machine ID used for stage 2 translation
-     * @param secure if the lookup is secure
-     * @param hyp if the lookup is done from hyp mode
-     * @param functional if the lookup should modify state
-     * @param ignore_asn if on lookup asn should be ignored
-     * @param target_el selecting the translation regime
-     * @param in_host if we are in host (EL2&0 regime)
-     * @param mode to differentiate between read/writes/fetches.
-     * @return pointer to TLB entry if it exists
-     */
-    TlbEntry *lookup(Addr vpn, uint16_t asn, vmid_t vmid, bool hyp,
-                     bool secure, bool functional,
-                     bool ignore_asn, ExceptionLevel target_el,
-                     bool in_host, bool stage2, BaseMMU::Mode mode);
-
-    Fault getTE(TlbEntry **te, const RequestPtr &req,
-                ThreadContext *tc, Mode mode,
-                Translation *translation, bool timing, bool functional,
-                bool is_secure, ArmTranslationType tran_type,
-                bool stage2);
-    Fault getTE(TlbEntry **te, const RequestPtr &req,
-                ThreadContext *tc, Mode mode,
-                Translation *translation, bool timing, bool functional,
-                bool is_secure, ArmTranslationType tran_type,
-                CachedState &state);
-
-    Fault getResultTe(TlbEntry **te, const RequestPtr &req,
-                      ThreadContext *tc, Mode mode,
-                      Translation *translation, bool timing,
-                      bool functional, TlbEntry *mergeTe,
-                      CachedState &state);
-
-    Fault checkPermissions(TlbEntry *te, const RequestPtr &req, Mode mode,
-                           bool stage2);
-    Fault checkPermissions(TlbEntry *te, const RequestPtr &req, Mode mode,
-                           CachedState &state);
-    Fault checkPermissions64(TlbEntry *te, const RequestPtr &req, Mode mode,
-                             ThreadContext *tc, bool stage2);
-    Fault checkPermissions64(TlbEntry *te, const RequestPtr &req, Mode mode,
-                             ThreadContext *tc, CachedState &state);
-    bool checkPAN(ThreadContext *tc, uint8_t ap, const RequestPtr &req,
-                  Mode mode, const bool is_priv, CachedState &state);
-
-  public: /* Testing */
-    TlbTestInterface *test;
-
-    void setTestInterface(SimObject *ti);
-
-    Fault testTranslation(const RequestPtr &req, Mode mode,
-                          TlbEntry::DomainType domain, CachedState &state);
-    Fault testWalk(Addr pa, Addr size, Addr va, bool is_secure, Mode mode,
-                   TlbEntry::DomainType domain,
-                   LookupLevel lookup_level, bool stage2);
-    Fault testWalk(Addr pa, Addr size, Addr va, bool is_secure, Mode mode,
-                   TlbEntry::DomainType domain,
-                   LookupLevel lookup_level, CachedState &state);
-
-  protected:
-    ContextID miscRegContext;
-
-  public:
-    CachedState s1State, s2State;
-
-  protected:
-    uint64_t _attr;      // Memory attributes for last accessed TLB entry
-
-    // Cached copies of system-level properties
-    bool haveLPAE;
-    bool haveVirtualization;
-    bool haveLargeAsid64;
-    uint8_t physAddrRange;
-
-    AddrRange m5opRange;
-
-    CachedState& updateMiscReg(
-        ThreadContext *tc, ArmTranslationType tran_type,
-        bool stage2);
-
-    struct Stats : public statistics::Group
-    {
-        Stats(statistics::Group *parent);
-        // Access Stats
-        mutable statistics::Scalar alignFaults;
-        mutable statistics::Scalar prefetchFaults;
-        mutable statistics::Scalar domainFaults;
-        mutable statistics::Scalar permsFaults;
-    } stats;
-
 };
 
 template<typename T>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/nativetrace.cc gem5-SALAM/src/arch/arm/nativetrace.cc
--- gem5/src/arch/arm/nativetrace.cc	2024-02-22 18:25:43.639604758 -0600
+++ gem5-SALAM/src/arch/arm/nativetrace.cc	2024-02-22 18:17:15.004943974 -0600
@@ -55,7 +55,7 @@
 
 namespace Trace {
 
-[[maybe_unused]] static const char *regNames[] = {
+GEM5_VAR_USED static const char *regNames[] = {
     "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
     "r8", "r9", "r10", "fp", "r12", "sp", "lr", "pc",
     "cpsr", "f0", "f1", "f2", "f3", "f4", "f5", "f6",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/pagetable.hh gem5-SALAM/src/arch/arm/pagetable.hh
--- gem5/src/arch/arm/pagetable.hh	2024-02-22 18:25:43.639604758 -0600
+++ gem5-SALAM/src/arch/arm/pagetable.hh	2024-02-22 18:17:15.004943974 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010, 2012-2013, 2021 Arm Limited
+ * Copyright (c) 2010, 2012-2013 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -46,7 +46,6 @@
 #include "arch/arm/page_size.hh"
 #include "arch/arm/types.hh"
 #include "arch/arm/utility.hh"
-#include "enums/TypeTLB.hh"
 #include "sim/serialize.hh"
 
 namespace gem5
@@ -137,9 +136,6 @@
     bool nstid;
     // Exception level on insert, AARCH64 EL0&1, AARCH32 -> el=1
     ExceptionLevel el;
-    // This is used to distinguish between instruction and data entries
-    // in unified TLBs
-    TypeTLB type;
 
     // Type of memory
     bool nonCacheable;     // Can we wrap this in mtype?
@@ -160,8 +156,7 @@
          innerAttrs(0), outerAttrs(0), ap(read_only ? 0x3 : 0), hap(0x3),
          domain(DomainType::Client),  mtype(MemoryType::StronglyOrdered),
          longDescFormat(false), isHyp(false), global(false), valid(true),
-         ns(true), nstid(true), el(EL0), type(TypeTLB::unified),
-         nonCacheable(uncacheable),
+         ns(true), nstid(true), el(EL0), nonCacheable(uncacheable),
          shareable(false), outerShareable(false), xn(0), pxn(0)
     {
         // no restrictions by default, hap = 0x3
@@ -176,8 +171,7 @@
          vmid(0), N(0), innerAttrs(0), outerAttrs(0), ap(0), hap(0x3),
          domain(DomainType::Client), mtype(MemoryType::StronglyOrdered),
          longDescFormat(false), isHyp(false), global(false), valid(false),
-         ns(true), nstid(true), el(EL0), type(TypeTLB::unified),
-         nonCacheable(false),
+         ns(true), nstid(true), el(EL0), nonCacheable(false),
          shareable(false), outerShareable(false), xn(0), pxn(0)
     {
         // no restrictions by default, hap = 0x3
@@ -323,7 +317,6 @@
         SERIALIZE_SCALAR(valid);
         SERIALIZE_SCALAR(ns);
         SERIALIZE_SCALAR(nstid);
-        SERIALIZE_ENUM(type);
         SERIALIZE_SCALAR(nonCacheable);
         SERIALIZE_ENUM(lookupLevel);
         SERIALIZE_ENUM(mtype);
@@ -354,7 +347,6 @@
         UNSERIALIZE_SCALAR(valid);
         UNSERIALIZE_SCALAR(ns);
         UNSERIALIZE_SCALAR(nstid);
-        UNSERIALIZE_ENUM(type);
         UNSERIALIZE_SCALAR(nonCacheable);
         UNSERIALIZE_ENUM(lookupLevel);
         UNSERIALIZE_ENUM(mtype);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/pcstate.hh gem5-SALAM/src/arch/arm/pcstate.hh
--- gem5/src/arch/arm/pcstate.hh	2024-02-22 18:25:43.639604758 -0600
+++ gem5-SALAM/src/arch/arm/pcstate.hh	2024-02-22 18:17:15.004943974 -0600
@@ -41,7 +41,7 @@
 #ifndef __ARCH_ARM_PCSTATE_HH__
 #define __ARCH_ARM_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 #include "base/bitunion.hh"
 #include "base/types.hh"
 #include "debug/Decoder.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/reg_abi.hh gem5-SALAM/src/arch/arm/reg_abi.hh
--- gem5/src/arch/arm/reg_abi.hh	2024-02-22 18:25:43.639604758 -0600
+++ gem5-SALAM/src/arch/arm/reg_abi.hh	2024-02-22 18:17:15.008943995 -0600
@@ -58,9 +58,9 @@
 template <typename ABI, typename Arg>
 struct Argument<ABI, Arg,
     typename std::enable_if_t<
-        std::is_base_of_v<ArmISA::RegABI32, ABI> &&
-        std::is_integral_v<Arg> &&
-        ABI::template IsWideV<Arg>>>
+        std::is_base_of<ArmISA::RegABI32, ABI>::value &&
+        std::is_integral<Arg>::value &&
+        ABI::template IsWide<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, typename ABI::State &state)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/regs/int.hh gem5-SALAM/src/arch/arm/regs/int.hh
--- gem5/src/arch/arm/regs/int.hh	2024-02-22 18:25:43.639604758 -0600
+++ gem5-SALAM/src/arch/arm/regs/int.hh	2024-02-22 18:17:15.008943995 -0600
@@ -127,6 +127,7 @@
     INTREG_UREG0,
     INTREG_UREG1,
     INTREG_UREG2,
+    INTREG_DUMMY, // Dummy reg used to throw away int reg results
 
     INTREG_SP0,
     INTREG_SP1,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/regs/misc.cc gem5-SALAM/src/arch/arm/regs/misc.cc
--- gem5/src/arch/arm/regs/misc.cc	2024-02-22 18:25:43.643604779 -0600
+++ gem5-SALAM/src/arch/arm/regs/misc.cc	2024-02-22 18:17:15.008943995 -0600
@@ -2868,7 +2868,7 @@
                     }
                     break;
                 }
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
               default:
                 // S3_<op1>_11_<Cm>_<op2>
                 return MISCREG_IMPDEF_UNIMPL;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/remote_gdb.cc gem5-SALAM/src/arch/arm/remote_gdb.cc
--- gem5/src/arch/arm/remote_gdb.cc	2024-02-22 18:25:43.643604779 -0600
+++ gem5-SALAM/src/arch/arm/remote_gdb.cc	2024-02-22 18:17:15.008943995 -0600
@@ -136,12 +136,6 @@
 #include <string>
 
 #include "arch/arm/decoder.hh"
-#include "arch/arm/gdb-xml/gdb_xml_aarch64_core.hh"
-#include "arch/arm/gdb-xml/gdb_xml_aarch64_fpu.hh"
-#include "arch/arm/gdb-xml/gdb_xml_aarch64_target.hh"
-#include "arch/arm/gdb-xml/gdb_xml_arm_core.hh"
-#include "arch/arm/gdb-xml/gdb_xml_arm_target.hh"
-#include "arch/arm/gdb-xml/gdb_xml_arm_vfpv3.hh"
 #include "arch/arm/pagetable.hh"
 #include "arch/arm/regs/vec.hh"
 #include "arch/arm/system.hh"
@@ -152,6 +146,12 @@
 #include "base/remote_gdb.hh"
 #include "base/socket.hh"
 #include "base/trace.hh"
+#include "blobs/gdb_xml_aarch64_core.hh"
+#include "blobs/gdb_xml_aarch64_fpu.hh"
+#include "blobs/gdb_xml_aarch64_target.hh"
+#include "blobs/gdb_xml_arm_core.hh"
+#include "blobs/gdb_xml_arm_target.hh"
+#include "blobs/gdb_xml_arm_vfpv3.hh"
 #include "cpu/static_inst.hh"
 #include "cpu/thread_context.hh"
 #include "cpu/thread_state.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/SConscript gem5-SALAM/src/arch/arm/SConscript
--- gem5/src/arch/arm/SConscript	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/SConscript	2024-02-22 18:17:14.984943870 -0600
@@ -118,3 +118,10 @@
 
     # Add files generated by the ISA description.
     ISADesc('isa/main.isa', decoder_splits=3, exec_splits=6)
+
+    GdbXml('arm/arm-with-neon.xml', 'gdb_xml_arm_target')
+    GdbXml('arm/arm-core.xml', 'gdb_xml_arm_core')
+    GdbXml('arm/arm-vfpv3.xml', 'gdb_xml_arm_vfpv3')
+    GdbXml('aarch64.xml', 'gdb_xml_aarch64_target')
+    GdbXml('aarch64-core.xml', 'gdb_xml_aarch64_core')
+    GdbXml('aarch64-fpu.xml', 'gdb_xml_aarch64_fpu')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/SConsopts gem5-SALAM/src/arch/arm/SConsopts
--- gem5/src/arch/arm/SConsopts	2024-02-22 18:25:43.599604549 -0600
+++ gem5-SALAM/src/arch/arm/SConsopts	2024-02-22 18:17:14.984943870 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['arm'])
+all_isa_list.append('arm')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/semihosting.cc gem5-SALAM/src/arch/arm/semihosting.cc
--- gem5/src/arch/arm/semihosting.cc	2024-02-22 18:25:43.643604779 -0600
+++ gem5-SALAM/src/arch/arm/semihosting.cc	2024-02-22 18:17:15.008943995 -0600
@@ -169,7 +169,7 @@
 bool
 ArmSemihosting::call64(ThreadContext *tc, bool gem5_ops)
 {
-    RegVal op = tc->readIntReg(ArmISA::INTREG_X0) & mask(32);
+    RegVal op = tc->readIntReg(ArmISA::INTREG_X0 & mask(32));
     if (op > MaxStandardOp && !gem5_ops) {
         unrecognizedCall<Abi64>(
                 tc, "Gem5 semihosting op (0x%x) disabled from here.", op);
@@ -249,7 +249,6 @@
 ArmSemihosting::portProxy(ThreadContext *tc)
 {
     static std::unique_ptr<PortProxy> port_proxy_s;
-    static std::unique_ptr<PortProxy> port_proxy_ns;
     static System *secure_sys = nullptr;
 
     if (ArmISA::isSecure(tc)) {
@@ -268,15 +267,7 @@
         secure_sys = sys;
         return *port_proxy_s;
     } else {
-        if (!port_proxy_ns) {
-            if (FullSystem) {
-                port_proxy_ns.reset(new TranslatingPortProxy(tc));
-            } else {
-                port_proxy_ns.reset(new SETranslatingPortProxy(tc));
-            }
-        }
-
-        return *port_proxy_ns;
+        return tc->getVirtProxy();
     }
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/semihosting.hh gem5-SALAM/src/arch/arm/semihosting.hh
--- gem5/src/arch/arm/semihosting.hh	2024-02-22 18:25:43.643604779 -0600
+++ gem5-SALAM/src/arch/arm/semihosting.hh	2024-02-22 18:17:15.008943995 -0600
@@ -605,7 +605,7 @@
 
 template <typename Arg>
 struct Argument<ArmSemihosting::Abi64, Arg,
-    typename std::enable_if_t<std::is_integral_v<Arg>>>
+    typename std::enable_if_t<std::is_integral<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, ArmSemihosting::Abi64::State &state)
@@ -616,12 +616,12 @@
 
 template <typename Arg>
 struct Argument<ArmSemihosting::Abi32, Arg,
-    typename std::enable_if_t<std::is_integral_v<Arg>>>
+    typename std::enable_if_t<std::is_integral<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, ArmSemihosting::Abi32::State &state)
     {
-        if (std::is_signed_v<Arg>)
+        if (std::is_signed<Arg>::value)
             return sext<32>(state.get(tc));
         else
             return state.get(tc);
@@ -630,7 +630,7 @@
 
 template <typename Abi>
 struct Argument<Abi, ArmSemihosting::InPlaceArg, typename std::enable_if_t<
-    std::is_base_of_v<ArmSemihosting::AbiBase, Abi>>>
+    std::is_base_of<ArmSemihosting::AbiBase, Abi>::value>>
 {
     static ArmSemihosting::InPlaceArg
     get(ThreadContext *tc, typename Abi::State &state)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/stage2_lookup.cc gem5-SALAM/src/arch/arm/stage2_lookup.cc
--- gem5/src/arch/arm/stage2_lookup.cc	2024-02-22 18:16:36.468742507 -0600
+++ gem5-SALAM/src/arch/arm/stage2_lookup.cc	2024-02-22 18:17:15.008943995 -0600
@@ -55,10 +55,10 @@
 
 Fault
 Stage2LookUp::getTe(ThreadContext *tc, TlbEntry *destTe)
-{
-    fault = mmu->getTE(&stage2Te, req, tc, mode, this, timing,
-        functional, secure, tranType, true);
 
+{
+    fault = stage2Tlb->getTE(&stage2Te, req, tc, mode, this, timing,
+                                   functional, secure, tranType);
     // Call finish if we're done already
     if ((fault != NoFault) || (stage2Te != NULL)) {
         // Since we directly requested the table entry (which we need later on
@@ -67,19 +67,19 @@
         // entry is now in the TLB this should always hit the cache.
         if (fault == NoFault) {
             if (ELIs64(tc, EL2))
-                fault = mmu->checkPermissions64(stage2Te, req, mode, tc, true);
+                fault = stage2Tlb->checkPermissions64(stage2Te, req, mode, tc);
             else
-                fault = mmu->checkPermissions(stage2Te, req, mode, true);
+                fault = stage2Tlb->checkPermissions(stage2Te, req, mode);
         }
 
-        mergeTe(mode);
+        mergeTe(req, mode);
         *destTe = stage1Te;
     }
     return fault;
 }
 
 void
-Stage2LookUp::mergeTe(BaseMMU::Mode mode)
+Stage2LookUp::mergeTe(const RequestPtr &req, BaseMMU::Mode mode)
 {
     // Check again that we haven't got a fault
     if (fault == NoFault) {
@@ -169,9 +169,8 @@
     if (fault != NoFault) {
         // If the second stage of translation generated a fault add the
         // details of the original stage 1 virtual address
-        if (auto arm_fault = reinterpret_cast<ArmFault *>(fault.get())) {
-            arm_fault->annotate(ArmFault::OVA, s1Req->getVaddr());
-        }
+        reinterpret_cast<ArmFault *>(fault.get())->annotate(ArmFault::OVA,
+            s1Req->getVaddr());
     }
     complete = true;
 }
@@ -183,14 +182,13 @@
     fault = _fault;
     // if we haven't got the table entry get it now
     if ((fault == NoFault) && (stage2Te == NULL)) {
-        // OLD_LOOK: stage2Tlb
-        fault = mmu->getTE(&stage2Te, req, tc, mode, this,
-            timing, functional, secure, tranType, true);
+        fault = stage2Tlb->getTE(&stage2Te, req, tc, mode, this,
+            timing, functional, secure, tranType);
     }
 
     // Now we have the stage 2 table entry we need to merge it with the stage
     // 1 entry we were given at the start
-    mergeTe(mode);
+    mergeTe(req, mode);
 
     if (fault != NoFault) {
         // Returning with a fault requires the original request
@@ -198,10 +196,7 @@
     } else if (timing) {
         // Now notify the original stage 1 translation that we finally have
         // a result
-        // tran_s1.callFromStage2 = true;
-        // OLD_LOOK: stage1Tlb
-        mmu->translateComplete(
-            s1Req, tc, transState, mode, tranType, true);
+        stage1Tlb->translateComplete(s1Req, tc, transState, mode, tranType, true);
     }
     // if we have been asked to delete ourselfs do it now
     if (selfDelete) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/stage2_lookup.hh gem5-SALAM/src/arch/arm/stage2_lookup.hh
--- gem5/src/arch/arm/stage2_lookup.hh	2024-02-22 18:16:36.468742507 -0600
+++ gem5-SALAM/src/arch/arm/stage2_lookup.hh	2024-02-22 18:17:15.008943995 -0600
@@ -59,14 +59,15 @@
 class Stage2LookUp : public BaseMMU::Translation
 {
   private:
-    MMU                     *mmu;
+    TLB                     *stage1Tlb;
+    TLB               *stage2Tlb;
     TlbEntry                stage1Te;
     RequestPtr              s1Req;
     BaseMMU::Translation    *transState;
     BaseMMU::Mode           mode;
     bool                    timing;
     bool                    functional;
-    MMU::ArmTranslationType tranType;
+    TLB::ArmTranslationType tranType;
     TlbEntry                *stage2Te;
     RequestPtr              req;
     Fault                   fault;
@@ -75,22 +76,22 @@
     bool                    secure;
 
   public:
-    Stage2LookUp(MMU *_mmu, TlbEntry s1_te, const RequestPtr &_req,
-        MMU::Translation *_transState, BaseMMU::Mode _mode, bool _timing,
-        bool _functional, bool _secure, MMU::ArmTranslationType _tranType) :
-        mmu(_mmu), stage1Te(s1_te), s1Req(_req),
+    Stage2LookUp(TLB *s1Tlb, TLB *s2Tlb, TlbEntry s1Te, const RequestPtr &_req,
+        BaseMMU::Translation *_transState, BaseMMU::Mode _mode, bool _timing,
+        bool _functional, bool _secure, TLB::ArmTranslationType _tranType) :
+        stage1Tlb(s1Tlb), stage2Tlb(s2Tlb), stage1Te(s1Te), s1Req(_req),
         transState(_transState), mode(_mode), timing(_timing),
         functional(_functional), tranType(_tranType), stage2Te(nullptr),
         fault(NoFault), complete(false), selfDelete(false), secure(_secure)
     {
         req = std::make_shared<Request>();
-        req->setVirt(s1_te.pAddr(s1Req->getVaddr()), s1Req->getSize(),
+        req->setVirt(s1Te.pAddr(s1Req->getVaddr()), s1Req->getSize(),
                      s1Req->getFlags(), s1Req->requestorId(), 0);
     }
 
     Fault getTe(ThreadContext *tc, TlbEntry *destTe);
 
-    void mergeTe(BaseMMU::Mode mode);
+    void mergeTe(const RequestPtr &req, BaseMMU::Mode mode);
 
     void setSelfDelete() { selfDelete = true; }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/table_walker.cc gem5-SALAM/src/arch/arm/table_walker.cc
--- gem5/src/arch/arm/table_walker.cc	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/table_walker.cc	2024-02-22 18:17:15.008943995 -0600
@@ -61,7 +61,7 @@
 TableWalker::TableWalker(const Params &p)
     : ClockedObject(p),
       requestorId(p.sys->getRequestorId(this)),
-      port(new Port(this, requestorId)),
+      port(nullptr),
       isStage2(p.is_stage2), tlb(NULL),
       currState(NULL), pending(false),
       numSquashable(p.num_squash_per_cycle),
@@ -128,7 +128,7 @@
     secureLookup(false), rwTable(false), userTable(false), xnTable(false),
     pxnTable(false), hpd(false), stage2Req(false),
     stage2Tran(nullptr), timing(false), functional(false),
-    mode(BaseMMU::Read), tranType(MMU::NormalTran), l2Desc(l1Desc),
+    mode(BaseMMU::Read), tranType(TLB::NormalTran), l2Desc(l1Desc),
     delayed(false), tableWalker(nullptr)
 {
 }
@@ -280,9 +280,9 @@
 
 Fault
 TableWalker::walk(const RequestPtr &_req, ThreadContext *_tc, uint16_t _asid,
-                  vmid_t _vmid, bool _isHyp, MMU::Mode _mode,
-                  MMU::Translation *_trans, bool _timing, bool _functional,
-                  bool secure, MMU::ArmTranslationType tranType,
+                  vmid_t _vmid, bool _isHyp, BaseMMU::Mode _mode,
+                  BaseMMU::Translation *_trans, bool _timing, bool _functional,
+                  bool secure, TLB::ArmTranslationType tranType,
                   bool _stage2Req)
 {
     assert(!(_functional && _timing));
@@ -331,7 +331,7 @@
         currState->aarch64 = ELIs64(_tc, EL2);
     } else {
         currState->el =
-            MMU::tranTypeEL(_tc->readMiscReg(MISCREG_CPSR), tranType);
+            TLB::tranTypeEL(_tc->readMiscReg(MISCREG_CPSR), tranType);
         currState->aarch64 =
             ELIs64(_tc, currState->el == EL0 ? EL1 : currState->el);
     }
@@ -478,9 +478,9 @@
 
     // Check if a previous walk filled this request already
     // @TODO Should this always be the TLB or should we look in the stage2 TLB?
-    TlbEntry* te = mmu->lookup(currState->vaddr, currState->asid,
-        currState->vmid, currState->isHyp, currState->isSecure, true, false,
-        currState->el, false, isStage2, currState->mode);
+    TlbEntry* te = tlb->lookup(currState->vaddr, currState->asid,
+            currState->vmid, currState->isHyp, currState->isSecure, true, false,
+            currState->el, false, BaseMMU::Read);
 
     // Check if we still need to have a walk for this request. If the requesting
     // instruction has been squashed, or a previous walk has filled the TLB with
@@ -533,9 +533,9 @@
         } else {
             // translate the request now that we know it will work
             stats.walkServiceTime.sample(curTick() - currState->startTime);
-            mmu->translateTiming(currState->req, currState->tc,
-                currState->transState, currState->mode,
-                currState->tranType, isStage2);
+            tlb->translateTiming(currState->req, currState->tc,
+                        currState->transState, currState->mode);
+
         }
 
         // delete the current request
@@ -544,9 +544,9 @@
         // peak at the next one
         if (pendingQueue.size()) {
             currState = pendingQueue.front();
-            te = mmu->lookup(currState->vaddr, currState->asid,
+            te = tlb->lookup(currState->vaddr, currState->asid,
                 currState->vmid, currState->isHyp, currState->isSecure, true,
-                false, currState->el, false, isStage2, currState->mode);
+                false, currState->el, false, BaseMMU::Read);
         } else {
             // Terminate the loop, nothing more to do
             currState = NULL;
@@ -634,7 +634,7 @@
     // Trickbox address check
     Fault f;
     f = testWalk(l1desc_addr, sizeof(uint32_t),
-                 TlbEntry::DomainType::NoAccess, L1, isStage2);
+                 TlbEntry::DomainType::NoAccess, L1);
     if (f) {
         DPRINTF(TLB, "Trickbox check caused fault on %#x\n", currState->vaddr_tainted);
         if (currState->timing) {
@@ -807,8 +807,7 @@
 
     // Trickbox address check
     Fault f = testWalk(desc_addr, sizeof(uint64_t),
-                       TlbEntry::DomainType::NoAccess, start_lookup_level,
-                       isStage2);
+                       TlbEntry::DomainType::NoAccess, start_lookup_level);
     if (f) {
         DPRINTF(TLB, "Trickbox check caused fault on %#x\n", currState->vaddr_tainted);
         if (currState->timing) {
@@ -1198,7 +1197,7 @@
 
     // Trickbox address check
     Fault f = testWalk(desc_addr, sizeof(uint64_t),
-                       TlbEntry::DomainType::NoAccess, start_lookup_level, isStage2);
+                       TlbEntry::DomainType::NoAccess, start_lookup_level);
     if (f) {
         DPRINTF(TLB, "Trickbox check caused fault on %#x\n", currState->vaddr_tainted);
         if (currState->timing) {
@@ -1449,16 +1448,16 @@
 
 void
 TableWalker::memAttrsLPAE(ThreadContext *tc, TlbEntry &te,
-    LongDescriptor &l_descriptor)
+    LongDescriptor &lDescriptor)
 {
     assert(_haveLPAE);
 
     uint8_t attr;
-    uint8_t sh = l_descriptor.sh();
+    uint8_t sh = lDescriptor.sh();
     // Different format and source of attributes if this is a stage 2
     // translation
     if (isStage2) {
-        attr = l_descriptor.memAttr();
+        attr = lDescriptor.memAttr();
         uint8_t attr_3_2 = (attr >> 2) & 0x3;
         uint8_t attr_1_0 =  attr       & 0x3;
 
@@ -1479,7 +1478,7 @@
             te.nonCacheable = (attr_3_2 == 1) || (attr_1_0 == 1);
         }
     } else {
-        uint8_t attrIndx = l_descriptor.attrIndx();
+        uint8_t attrIndx = lDescriptor.attrIndx();
 
         // LPAE always uses remapping of memory attributes, irrespective of the
         // value of SCTLR.TRE
@@ -1575,15 +1574,15 @@
 
 void
 TableWalker::memAttrsAArch64(ThreadContext *tc, TlbEntry &te,
-                             LongDescriptor &l_descriptor)
+                             LongDescriptor &lDescriptor)
 {
     uint8_t attr;
     uint8_t attr_hi;
     uint8_t attr_lo;
-    uint8_t sh = l_descriptor.sh();
+    uint8_t sh = lDescriptor.sh();
 
     if (isStage2) {
-        attr = l_descriptor.memAttr();
+        attr = lDescriptor.memAttr();
         uint8_t attr_hi = (attr >> 2) & 0x3;
         uint8_t attr_lo =  attr       & 0x3;
 
@@ -1607,7 +1606,7 @@
                 (attr_lo == 1) || (attr_lo == 2);
         }
     } else {
-        uint8_t attrIndx = l_descriptor.attrIndx();
+        uint8_t attrIndx = lDescriptor.attrIndx();
 
         DPRINTF(TLBVerbose, "memAttrsAArch64 AttrIndx:%#x sh:%#x\n", attrIndx, sh);
         ExceptionLevel regime =  s1TranslationRegime(tc, currState->el);
@@ -1655,7 +1654,7 @@
           case 0x1 ... 0x3: // Normal Memory, Inner Write-through transient
           case 0x9 ... 0xb: // Normal Memory, Inner Write-through non-transient
             warn_if(!attr_hi, "Unpredictable behavior");
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 0x4:         // Device-nGnRE memory or
                             // Normal memory, Inner Non-cacheable
           case 0x8:         // Device-nGRE memory or
@@ -1743,8 +1742,7 @@
 
             // Trickbox address check
             currState->fault = testWalk(l2desc_addr, sizeof(uint32_t),
-                                        currState->l1Desc.domain(), L2,
-                                        isStage2);
+                                        currState->l1Desc.domain(), L2);
 
             if (currState->fault) {
                 if (!currState->timing) {
@@ -1912,7 +1910,7 @@
             // Trickbox address check
             currState->fault = testWalk(
                 next_desc_addr, sizeof(uint64_t), TlbEntry::DomainType::Client,
-                toLookupLevel(currState->longDesc.lookupLevel +1), isStage2);
+                toLookupLevel(currState->longDesc.lookupLevel +1));
 
             if (currState->fault) {
                 if (!currState->timing) {
@@ -2056,11 +2054,8 @@
         // Don't finish the translation if a stage 2 look up is underway
         stats.walkServiceTime.sample(curTick() - currState->startTime);
         DPRINTF(PageTableWalker, "calling translateTiming again\n");
-
-        mmu->translateTiming(currState->req, currState->tc,
-            currState->transState, currState->mode,
-            currState->tranType, isStage2);
-
+        tlb->translateTiming(currState->req, currState->tc,
+                             currState->transState, currState->mode);
         stats.walksShortTerminatedAtLevel[0]++;
 
         pending = false;
@@ -2100,11 +2095,8 @@
     } else {
         stats.walkServiceTime.sample(curTick() - currState->startTime);
         DPRINTF(PageTableWalker, "calling translateTiming again\n");
-
-        mmu->translateTiming(currState->req, currState->tc,
-            currState->transState, currState->mode,
-            currState->tranType, isStage2);
-
+        tlb->translateTiming(currState->req, currState->tc,
+                             currState->transState, currState->mode);
         stats.walksShortTerminatedAtLevel[1]++;
     }
 
@@ -2180,11 +2172,8 @@
         // No additional lookups required
         DPRINTF(PageTableWalker, "calling translateTiming again\n");
         stats.walkServiceTime.sample(curTick() - currState->startTime);
-
-        mmu->translateTiming(currState->req, currState->tc,
-            currState->transState, currState->mode,
-            currState->tranType, isStage2);
-
+        tlb->translateTiming(currState->req, currState->tc,
+                             currState->transState, currState->mode);
         stats.walksLongTerminatedAtLevel[(unsigned) curr_lookup_level]++;
 
         pending = false;
@@ -2232,16 +2221,13 @@
 
         if (isTiming) {
             auto *tran = new
-                Stage2Walk(*this, data, event, currState->vaddr,
-                    currState->mode, currState->tranType);
+                Stage2Walk(*this, data, event, currState->vaddr);
             currState->stage2Tran = tran;
             readDataTimed(currState->tc, descAddr, tran, numBytes, flags);
             fault = tran->fault;
         } else {
             fault = readDataUntimed(currState->tc,
                 currState->vaddr, descAddr, data, numBytes, flags,
-                currState->mode,
-                currState->tranType,
                 currState->functional);
         }
 
@@ -2285,13 +2271,13 @@
 }
 
 void
-TableWalker::insertTableEntry(DescriptorBase &descriptor, bool long_descriptor)
+TableWalker::insertTableEntry(DescriptorBase &descriptor, bool longDescriptor)
 {
     TlbEntry te;
 
     // Create and fill a new page table entry
     te.valid          = true;
-    te.longDescFormat = long_descriptor;
+    te.longDescFormat = longDescriptor;
     te.isHyp          = currState->isHyp;
     te.asid           = currState->asid;
     te.vmid           = currState->vmid;
@@ -2304,9 +2290,6 @@
     te.ns             = !descriptor.secure(haveSecurity, currState) || isStage2;
     te.nstid          = !currState->isSecure;
     te.xn             = descriptor.xn();
-    te.type           = currState->mode == BaseMMU::Execute ?
-        TypeTLB::instruction : TypeTLB::data;
-
     if (currState->aarch64)
         te.el         = currState->el;
     else
@@ -2318,24 +2301,24 @@
     // ASID has no meaning for stage 2 TLB entries, so mark all stage 2 entries
     // as global
     te.global         = descriptor.global(currState) || isStage2;
-    if (long_descriptor) {
-        LongDescriptor l_descriptor =
+    if (longDescriptor) {
+        LongDescriptor lDescriptor =
             dynamic_cast<LongDescriptor &>(descriptor);
 
         te.xn |= currState->xnTable;
-        te.pxn = currState->pxnTable || l_descriptor.pxn();
+        te.pxn = currState->pxnTable || lDescriptor.pxn();
         if (isStage2) {
             // this is actually the HAP field, but its stored in the same bit
             // possitions as the AP field in a stage 1 translation.
-            te.hap = l_descriptor.ap();
+            te.hap = lDescriptor.ap();
         } else {
            te.ap = ((!currState->rwTable || descriptor.ap() >> 1) << 1) |
                (currState->userTable && (descriptor.ap() & 0x1));
         }
         if (currState->aarch64)
-            memAttrsAArch64(currState->tc, te, l_descriptor);
+            memAttrsAArch64(currState->tc, te, lDescriptor);
         else
-            memAttrsLPAE(currState->tc, te, l_descriptor);
+            memAttrsLPAE(currState->tc, te, lDescriptor);
     } else {
         te.ap = descriptor.ap();
         memAttrs(currState->tc, te, currState->sctlr, descriptor.texcb(),
@@ -2354,8 +2337,8 @@
             descriptor.lookupLevel, static_cast<uint8_t>(descriptor.domain()),
             descriptor.getRawData());
 
-    // Insert the entry into the TLBs
-    tlb->multiInsert(te);
+    // Insert the entry into the TLB
+    tlb->insert(currState->vaddr, te);
     if (!currState->timing) {
         currState->tc  = NULL;
         currState->req = NULL;
@@ -2397,10 +2380,10 @@
 
 Fault
 TableWalker::testWalk(Addr pa, Addr size, TlbEntry::DomainType domain,
-                      LookupLevel lookup_level, bool stage2)
+                      LookupLevel lookup_level)
 {
-    return mmu->testWalk(pa, size, currState->vaddr, currState->isSecure,
-                         currState->mode, domain, lookup_level, stage2);
+    return tlb->testWalk(pa, size, currState->vaddr, currState->isSecure,
+                         currState->mode, domain, lookup_level);
 }
 
 
@@ -2427,8 +2410,7 @@
 
 Fault
 TableWalker::readDataUntimed(ThreadContext *tc, Addr vaddr, Addr desc_addr,
-    uint8_t *data, int num_bytes, Request::Flags flags, BaseMMU::Mode mode,
-    MMU::ArmTranslationType tran_type, bool functional)
+    uint8_t *data, int num_bytes, Request::Flags flags, bool functional)
 {
     Fault fault;
 
@@ -2436,13 +2418,11 @@
     auto req = std::make_shared<Request>();
     req->setVirt(desc_addr, num_bytes, flags | Request::PT_WALK,
                 requestorId, 0);
-
     if (functional) {
         fault = mmu->translateFunctional(req, tc, BaseMMU::Read,
-            tran_type, true);
+            TLB::NormalTran, true);
     } else {
-        fault = mmu->translateAtomic(req, tc, BaseMMU::Read,
-            tran_type, true);
+        fault = mmu->translateAtomic(req, tc, BaseMMU::Read, true);
     }
 
     // Now do the access.
@@ -2479,10 +2459,9 @@
 }
 
 TableWalker::Stage2Walk::Stage2Walk(TableWalker &_parent,
-        uint8_t *_data, Event *_event, Addr vaddr, BaseMMU::Mode _mode,
-        MMU::ArmTranslationType tran_type)
+        uint8_t *_data, Event *_event, Addr vaddr)
     : data(_data), numBytes(0), event(_event), parent(_parent),
-      oVAddr(vaddr), mode(_mode), tranType(tran_type), fault(NoFault)
+      oVAddr(vaddr), fault(NoFault)
 {
     req = std::make_shared<Request>();
 }
@@ -2516,7 +2495,7 @@
 void
 TableWalker::Stage2Walk::translateTiming(ThreadContext *tc)
 {
-    parent.mmu->translateTiming(req, tc, this, mode, tranType, true);
+    parent.mmu->translateTiming(req, tc, this, BaseMMU::Read, true);
 }
 
 TableWalker::TableWalkerStats::TableWalkerStats(Stats::Group *parent)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/table_walker.hh gem5-SALAM/src/arch/arm/table_walker.hh
--- gem5/src/arch/arm/table_walker.hh	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/table_walker.hh	2024-02-22 18:17:15.008943995 -0600
@@ -41,7 +41,6 @@
 #include <list>
 
 #include "arch/arm/faults.hh"
-#include "arch/arm/mmu.hh"
 #include "arch/arm/regs/misc.hh"
 #include "arch/arm/system.hh"
 #include "arch/arm/tlb.hh"
@@ -62,6 +61,7 @@
 namespace ArmISA {
 class Translation;
 class TLB;
+class MMU;
 
 class TableWalker : public ClockedObject
 {
@@ -828,7 +828,7 @@
         BaseMMU::Mode mode;
 
         /** The translation type that has been requested */
-        MMU::ArmTranslationType tranType;
+        TLB::ArmTranslationType tranType;
 
         /** Short-format descriptors */
         L1Descriptor l1Desc;
@@ -912,15 +912,12 @@
         Event        *event;
         TableWalker  &parent;
         Addr         oVAddr;
-        BaseMMU::Mode mode;
-        MMU::ArmTranslationType tranType;
 
       public:
         Fault fault;
 
         Stage2Walk(TableWalker &_parent, uint8_t *_data, Event *_event,
-                   Addr vaddr, BaseMMU::Mode mode,
-                   MMU::ArmTranslationType tran_type);
+                   Addr vaddr);
 
         void markDelayed() {}
 
@@ -940,7 +937,6 @@
 
     Fault readDataUntimed(ThreadContext *tc, Addr vaddr, Addr desc_addr,
                           uint8_t *data, int num_bytes, Request::Flags flags,
-                          BaseMMU::Mode mode, MMU::ArmTranslationType tran_type,
                           bool functional);
     void readDataTimed(ThreadContext *tc, Addr desc_addr,
                        Stage2Walk *translation, int num_bytes,
@@ -1037,10 +1033,11 @@
                uint16_t asid, vmid_t _vmid,
                bool _isHyp, BaseMMU::Mode mode, BaseMMU::Translation *_trans,
                bool timing, bool functional, bool secure,
-               MMU::ArmTranslationType tranType, bool _stage2Req);
+               TLB::ArmTranslationType tranType, bool _stage2Req);
 
     void setMmu(MMU *_mmu) { mmu = _mmu; }
     void setTlb(TLB *_tlb) { tlb = _tlb; }
+    void setPort(Port *_port) { port = _port; }
     TLB* getTlb() { return tlb; }
     void memAttrs(ThreadContext *tc, TlbEntry &te, SCTLR sctlr,
                   uint8_t texcb, bool s);
@@ -1104,7 +1101,7 @@
     static uint8_t pageSizeNtoStatBin(uint8_t N);
 
     Fault testWalk(Addr pa, Addr size, TlbEntry::DomainType domain,
-                   LookupLevel lookup_level, bool stage2);
+                   LookupLevel lookup_level);
 };
 
 } // namespace ArmISA
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/tlb.cc gem5-SALAM/src/arch/arm/tlb.cc
--- gem5/src/arch/arm/tlb.cc	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/tlb.cc	2024-02-22 18:17:15.008943995 -0600
@@ -44,14 +44,32 @@
 #include <string>
 #include <vector>
 
+#include "arch/arm/faults.hh"
+#include "arch/arm/isa.hh"
+#include "arch/arm/pagetable.hh"
+#include "arch/arm/reg_abi.hh"
+#include "arch/arm/self_debug.hh"
+#include "arch/arm/stage2_lookup.hh"
+#include "arch/arm/system.hh"
 #include "arch/arm/table_walker.hh"
 #include "arch/arm/tlbi_op.hh"
 #include "arch/arm/utility.hh"
+#include "base/compiler.hh"
+#include "base/inifile.hh"
+#include "base/str.hh"
 #include "base/trace.hh"
+#include "cpu/base.hh"
 #include "cpu/thread_context.hh"
+#include "debug/Checkpoint.hh"
 #include "debug/TLB.hh"
 #include "debug/TLBVerbose.hh"
+#include "mem/packet_access.hh"
+#include "mem/page_table.hh"
+#include "mem/request.hh"
 #include "params/ArmTLB.hh"
+#include "sim/full_system.hh"
+#include "sim/process.hh"
+#include "sim/pseudo_inst.hh"
 
 namespace gem5
 {
@@ -60,10 +78,29 @@
 
 TLB::TLB(const ArmTLBParams &p)
     : BaseTLB(p), table(new TlbEntry[p.size]), size(p.size),
-      isStage2(p.is_stage2),
-      tableWalker(nullptr),
-      stats(this), rangeMRU(1), vmid(0)
-{
+      isStage2(p.is_stage2), stage2Req(false), stage2DescReq(false), _attr(0),
+      directToStage2(false), tableWalker(nullptr), stage2Tlb(nullptr),
+      test(nullptr), stats(this),  rangeMRU(1),
+      aarch64(false), aarch64EL(EL0), isPriv(false), isSecure(false),
+      isHyp(false), asid(0), vmid(0), hcr(0), dacr(0),
+      miscRegValid(false), miscRegContext(0), curTranType(NormalTran)
+{
+    // Cache system-level properties
+    if (FullSystem) {
+        ArmSystem *arm_sys = dynamic_cast<ArmSystem *>(p.sys);
+        assert(arm_sys);
+        haveLPAE = arm_sys->haveLPAE();
+        haveVirtualization = arm_sys->haveVirtualization();
+        haveLargeAsid64 = arm_sys->haveLargeAsid64();
+        physAddrRange = arm_sys->physAddrRange();
+    } else {
+        haveLPAE = false;
+        haveVirtualization = false;
+        haveLargeAsid64 = false;
+        physAddrRange = 48;
+    }
+
+    m5opRange = p.sys->m5opRange();
 }
 
 TLB::~TLB()
@@ -78,6 +115,53 @@
     tableWalker->setTlb(this);
 }
 
+bool
+TLB::translateFunctional(ThreadContext *tc, Addr va, Addr &pa)
+{
+    updateMiscReg(tc);
+
+    if (directToStage2) {
+        assert(stage2Tlb);
+        return stage2Tlb->translateFunctional(tc, va, pa);
+    }
+
+    TlbEntry *e = lookup(va, asid, vmid, isHyp, isSecure, true, false,
+                         aarch64 ? aarch64EL : EL1, false, BaseMMU::Read);
+    if (!e)
+        return false;
+    pa = e->pAddr(va);
+    return true;
+}
+
+Fault
+TLB::finalizePhysical(const RequestPtr &req,
+                      ThreadContext *tc, BaseMMU::Mode mode) const
+{
+    const Addr paddr = req->getPaddr();
+
+    if (m5opRange.contains(paddr)) {
+        uint8_t func;
+        pseudo_inst::decodeAddrOffset(paddr - m5opRange.start(), func);
+        req->setLocalAccessor(
+            [func, mode](ThreadContext *tc, PacketPtr pkt) -> Cycles
+            {
+                uint64_t ret;
+                if (inAArch64(tc))
+                    pseudo_inst::pseudoInst<RegABI64>(tc, func, ret);
+                else
+                    pseudo_inst::pseudoInst<RegABI32>(tc, func, ret);
+
+                if (mode == BaseMMU::Read)
+                    pkt->setLE(ret);
+
+                return Cycles(1);
+            }
+        );
+    }
+
+    return NoFault;
+}
+
 TlbEntry*
 TLB::lookup(Addr va, uint16_t asn, vmid_t vmid, bool hyp, bool secure,
             bool functional, bool ignore_asn, ExceptionLevel target_el,
@@ -141,44 +225,9 @@
     return retval;
 }
 
-TlbEntry*
-TLB::multiLookup(Addr va, uint16_t asid, vmid_t vmid, bool hyp, bool secure,
-                 bool functional, bool ignore_asn, ExceptionLevel target_el,
-                 bool in_host, BaseMMU::Mode mode)
-{
-    TlbEntry* te = lookup(va, asid, vmid, hyp, secure, functional,
-                          ignore_asn, target_el, in_host, mode);
-
-    if (te) {
-        checkPromotion(te, mode);
-    } else {
-        if (auto tlb = static_cast<TLB*>(nextLevel())) {
-            te = tlb->multiLookup(va, asid, vmid, hyp, secure, functional,
-                                  ignore_asn, target_el, in_host, mode);
-            if (te && !functional)
-                insert(*te);
-        }
-    }
-
-    return te;
-}
-
-void
-TLB::checkPromotion(TlbEntry *entry, BaseMMU::Mode mode)
-{
-    TypeTLB acc_type = (mode == BaseMMU::Execute) ?
-       TypeTLB::instruction : TypeTLB::data;
-
-    // Hitting an instruction TLB entry on a data access or
-    // a data TLB entry on an instruction access:
-    // promoting the entry to unified
-    if (!(entry->type & acc_type))
-       entry->type = TypeTLB::unified;
-}
-
 // insert a new TLB entry
 void
-TLB::insert(TlbEntry &entry)
+TLB::insert(Addr addr, TlbEntry &entry)
 {
     DPRINTF(TLB, "Inserting entry into TLB with pfn:%#x size:%#x vpn: %#x"
             " asid:%d vmid:%d N:%d global:%d valid:%d nc:%d xn:%d"
@@ -197,7 +246,8 @@
                 table[size-1].nstid, table[size-1].global, table[size-1].isHyp,
                 table[size-1].el);
 
-    // inserting to MRU position and evicting the LRU one
+    //inserting to MRU position and evicting the LRU one
+
     for (int i = size - 1; i > 0; --i)
         table[i] = table[i-1];
     table[0] = entry;
@@ -207,16 +257,6 @@
 }
 
 void
-TLB::multiInsert(TlbEntry &entry)
-{
-    insert(entry);
-
-    if (auto next_level = static_cast<TLB*>(nextLevel())) {
-        next_level->multiInsert(entry);
-    }
-}
-
-void
 TLB::printTlb() const
 {
     int x = 0;
@@ -273,56 +313,6 @@
 }
 
 void
-TLB::flush(const ITLBIALL& tlbi_op)
-{
-    DPRINTF(TLB, "Flushing all ITLB entries (%s lookup)\n",
-            (tlbi_op.secureLookup ? "secure" : "non-secure"));
-    int x = 0;
-    TlbEntry *te;
-    while (x < size) {
-        te = &table[x];
-        const bool el_match = te->checkELMatch(
-            tlbi_op.targetEL, tlbi_op.inHost);
-        if (te->type & TypeTLB::instruction && te->valid &&
-            tlbi_op.secureLookup == !te->nstid &&
-            (te->vmid == vmid || tlbi_op.el2Enabled) && el_match) {
-
-            DPRINTF(TLB, " -  %s\n", te->print());
-            te->valid = false;
-            stats.flushedEntries++;
-        }
-        ++x;
-    }
-
-    stats.flushTlb++;
-}
-
-void
-TLB::flush(const DTLBIALL& tlbi_op)
-{
-    DPRINTF(TLB, "Flushing all DTLB entries (%s lookup)\n",
-            (tlbi_op.secureLookup ? "secure" : "non-secure"));
-    int x = 0;
-    TlbEntry *te;
-    while (x < size) {
-        te = &table[x];
-        const bool el_match = te->checkELMatch(
-            tlbi_op.targetEL, tlbi_op.inHost);
-        if (te->type & TypeTLB::data && te->valid &&
-            tlbi_op.secureLookup == !te->nstid &&
-            (te->vmid == vmid || tlbi_op.el2Enabled) && el_match) {
-
-            DPRINTF(TLB, " -  %s\n", te->print());
-            te->valid = false;
-            stats.flushedEntries++;
-        }
-        ++x;
-    }
-
-    stats.flushTlb++;
-}
-
-void
 TLB::flush(const TLBIALLEL &tlbi_op)
 {
     DPRINTF(TLB, "Flushing all TLB entries (%s lookup)\n",
@@ -401,29 +391,7 @@
             "(%s lookup)\n", tlbi_op.addr, tlbi_op.asid,
             (tlbi_op.secureLookup ? "secure" : "non-secure"));
     _flushMva(tlbi_op.addr, tlbi_op.asid, tlbi_op.secureLookup, false,
-        tlbi_op.targetEL, tlbi_op.inHost, TypeTLB::unified);
-    stats.flushTlbMvaAsid++;
-}
-
-void
-TLB::flush(const ITLBIMVA &tlbi_op)
-{
-    DPRINTF(TLB, "Flushing ITLB entries with mva: %#x, asid: %#x "
-            "(%s lookup)\n", tlbi_op.addr, tlbi_op.asid,
-            (tlbi_op.secureLookup ? "secure" : "non-secure"));
-    _flushMva(tlbi_op.addr, tlbi_op.asid, tlbi_op.secureLookup, false,
-        tlbi_op.targetEL, tlbi_op.inHost, TypeTLB::instruction);
-    stats.flushTlbMvaAsid++;
-}
-
-void
-TLB::flush(const DTLBIMVA &tlbi_op)
-{
-    DPRINTF(TLB, "Flushing DTLB entries with mva: %#x, asid: %#x "
-            "(%s lookup)\n", tlbi_op.addr, tlbi_op.asid,
-            (tlbi_op.secureLookup ? "secure" : "non-secure"));
-    _flushMva(tlbi_op.addr, tlbi_op.asid, tlbi_op.secureLookup, false,
-        tlbi_op.targetEL, tlbi_op.inHost, TypeTLB::data);
+        tlbi_op.targetEL, tlbi_op.inHost);
     stats.flushTlbMvaAsid++;
 }
 
@@ -453,72 +421,19 @@
 }
 
 void
-TLB::flush(const ITLBIASID &tlbi_op)
-{
-    DPRINTF(TLB, "Flushing ITLB entries with asid: %#x (%s lookup)\n",
-            tlbi_op.asid, (tlbi_op.secureLookup ? "secure" : "non-secure"));
-
-    int x = 0 ;
-    TlbEntry *te;
-
-    while (x < size) {
-        te = &table[x];
-        if (te->type & TypeTLB::instruction &&
-            te->valid && te->asid == tlbi_op.asid &&
-            tlbi_op.secureLookup == !te->nstid &&
-            (te->vmid == vmid || tlbi_op.el2Enabled) &&
-            te->checkELMatch(tlbi_op.targetEL, tlbi_op.inHost)) {
-
-            te->valid = false;
-            DPRINTF(TLB, " -  %s\n", te->print());
-            stats.flushedEntries++;
-        }
-        ++x;
-    }
-    stats.flushTlbAsid++;
-}
-
-void
-TLB::flush(const DTLBIASID &tlbi_op)
-{
-    DPRINTF(TLB, "Flushing DTLB entries with asid: %#x (%s lookup)\n",
-            tlbi_op.asid, (tlbi_op.secureLookup ? "secure" : "non-secure"));
-
-    int x = 0 ;
-    TlbEntry *te;
-
-    while (x < size) {
-        te = &table[x];
-        if (te->type & TypeTLB::data &&
-            te->valid && te->asid == tlbi_op.asid &&
-            tlbi_op.secureLookup == !te->nstid &&
-            (te->vmid == vmid || tlbi_op.el2Enabled) &&
-            te->checkELMatch(tlbi_op.targetEL, tlbi_op.inHost)) {
-
-            te->valid = false;
-            DPRINTF(TLB, " -  %s\n", te->print());
-            stats.flushedEntries++;
-        }
-        ++x;
-    }
-    stats.flushTlbAsid++;
-}
-
-void
 TLB::flush(const TLBIMVAA &tlbi_op) {
 
     DPRINTF(TLB, "Flushing TLB entries with mva: %#x (%s lookup)\n",
             tlbi_op.addr,
             (tlbi_op.secureLookup ? "secure" : "non-secure"));
     _flushMva(tlbi_op.addr, 0xbeef, tlbi_op.secureLookup, true,
-        tlbi_op.targetEL, tlbi_op.inHost, TypeTLB::unified);
+        tlbi_op.targetEL, tlbi_op.inHost);
     stats.flushTlbMva++;
 }
 
 void
 TLB::_flushMva(Addr mva, uint64_t asn, bool secure_lookup,
-               bool ignore_asn, ExceptionLevel target_el, bool in_host,
-               TypeTLB entry_type)
+               bool ignore_asn, ExceptionLevel target_el, bool in_host)
 {
     TlbEntry *te;
     // D5.7.2: Sign-extend address to 64 bits
@@ -529,8 +444,7 @@
     te = lookup(mva, asn, vmid, hyp, secure_lookup, true, ignore_asn,
                 target_el, in_host, BaseMMU::Read);
     while (te != NULL) {
-        bool matching_type = (te->type & entry_type);
-        if (matching_type && secure_lookup == !te->nstid) {
+        if (secure_lookup == !te->nstid) {
             DPRINTF(TLB, " -  %s\n", te->print());
             te->valid = false;
             stats.flushedEntries++;
@@ -541,8 +455,34 @@
 }
 
 void
+TLB::drainResume()
+{
+    // We might have unserialized something or switched CPUs, so make
+    // sure to re-read the misc regs.
+    miscRegValid = false;
+}
+
+void
 TLB::takeOverFrom(BaseTLB *_otlb)
 {
+    TLB *otlb = dynamic_cast<TLB*>(_otlb);
+    /* Make sure we actually have a valid type */
+    if (otlb) {
+        _attr = otlb->_attr;
+        directToStage2 = otlb->directToStage2;
+        stage2Req = otlb->stage2Req;
+        stage2DescReq = otlb->stage2DescReq;
+
+        /* Sync the stage2 MMU if they exist in both
+         * the old CPU and the new
+         */
+        if (!isStage2 &&
+            stage2Tlb && otlb->stage2Tlb) {
+            stage2Tlb->takeOverFrom(otlb->stage2Tlb);
+        }
+    } else {
+        panic("Incompatible TLB type!");
+    }
 }
 
 TLB::TlbStats::TlbStats(statistics::Group *parent)
@@ -565,6 +505,14 @@
              "Number of times TLB was flushed by ASID"),
     ADD_STAT(flushedEntries, statistics::units::Count::get(),
              "Number of entries that have been flushed from TLB"),
+    ADD_STAT(alignFaults, statistics::units::Count::get(),
+             "Number of TLB faults due to alignment restrictions"),
+    ADD_STAT(prefetchFaults, statistics::units::Count::get(),
+             "Number of TLB faults due to prefetch"),
+    ADD_STAT(domainFaults, statistics::units::Count::get(),
+             "Number of TLB faults due to domain restrictions"),
+    ADD_STAT(permsFaults, statistics::units::Count::get(),
+             "Number of TLB faults due to permissions restrictions"),
     ADD_STAT(readAccesses, statistics::units::Count::get(), "DTB read accesses",
              readHits + readMisses),
     ADD_STAT(writeAccesses, statistics::units::Count::get(), "DTB write accesses",
@@ -589,10 +537,1212 @@
     ppRefills.reset(new probing::PMU(getProbeManager(), "Refills"));
 }
 
+Fault
+TLB::translateSe(const RequestPtr &req, ThreadContext *tc, BaseMMU::Mode mode,
+                 BaseMMU::Translation *translation, bool &delay, bool timing)
+{
+    updateMiscReg(tc);
+    Addr vaddr_tainted = req->getVaddr();
+    Addr vaddr = 0;
+    if (aarch64)
+        vaddr = purifyTaggedAddr(vaddr_tainted, tc, aarch64EL, (TCR)ttbcr,
+                                 mode==BaseMMU::Execute);
+    else
+        vaddr = vaddr_tainted;
+    Request::Flags flags = req->getFlags();
+
+    bool is_fetch = (mode == BaseMMU::Execute);
+    bool is_write = (mode == BaseMMU::Write);
+
+    if (!is_fetch) {
+        if (sctlr.a || !(flags & AllowUnaligned)) {
+            if (vaddr & mask(flags & AlignmentMask)) {
+                // LPAE is always disabled in SE mode
+                return std::make_shared<DataAbort>(
+                    vaddr_tainted,
+                    TlbEntry::DomainType::NoAccess, is_write,
+                    ArmFault::AlignmentFault, isStage2,
+                    ArmFault::VmsaTran);
+            }
+        }
+    }
+
+    Addr paddr;
+    Process *p = tc->getProcessPtr();
+
+    if (!p->pTable->translate(vaddr, paddr))
+        return std::make_shared<GenericPageTableFault>(vaddr_tainted);
+    req->setPaddr(paddr);
+
+    return finalizePhysical(req, tc, mode);
+}
+
+Fault
+TLB::checkPermissions(TlbEntry *te, const RequestPtr &req, BaseMMU::Mode mode)
+{
+    // a data cache maintenance instruction that operates by MVA does
+    // not generate a Data Abort exeception due to a Permission fault
+    if (req->isCacheMaintenance()) {
+        return NoFault;
+    }
+
+    Addr vaddr = req->getVaddr(); // 32-bit don't have to purify
+    Request::Flags flags = req->getFlags();
+    bool is_fetch  = (mode == BaseMMU::Execute);
+    bool is_write  = (mode == BaseMMU::Write);
+    bool is_priv   = isPriv && !(flags & UserMode);
+
+    // Get the translation type from the actuall table entry
+    ArmFault::TranMethod tranMethod = te->longDescFormat ? ArmFault::LpaeTran
+                                                         : ArmFault::VmsaTran;
+
+    // If this is the second stage of translation and the request is for a
+    // stage 1 page table walk then we need to check the HCR.PTW bit. This
+    // allows us to generate a fault if the request targets an area marked
+    // as a device or strongly ordered.
+    if (isStage2 && req->isPTWalk() && hcr.ptw &&
+        (te->mtype != TlbEntry::MemoryType::Normal)) {
+        return std::make_shared<DataAbort>(
+            vaddr, te->domain, is_write,
+            ArmFault::PermissionLL + te->lookupLevel,
+            isStage2, tranMethod);
+    }
+
+    // Generate an alignment fault for unaligned data accesses to device or
+    // strongly ordered memory
+    if (!is_fetch) {
+        if (te->mtype != TlbEntry::MemoryType::Normal) {
+            if (vaddr & mask(flags & AlignmentMask)) {
+                stats.alignFaults++;
+                return std::make_shared<DataAbort>(
+                    vaddr, TlbEntry::DomainType::NoAccess, is_write,
+                    ArmFault::AlignmentFault, isStage2,
+                    tranMethod);
+            }
+        }
+    }
+
+    if (te->nonCacheable) {
+        // Prevent prefetching from I/O devices.
+        if (req->isPrefetch()) {
+            // Here we can safely use the fault status for the short
+            // desc. format in all cases
+            return std::make_shared<PrefetchAbort>(
+                vaddr, ArmFault::PrefetchUncacheable,
+                isStage2, tranMethod);
+        }
+    }
+
+    if (!te->longDescFormat) {
+        switch ((dacr >> (static_cast<uint8_t>(te->domain) * 2)) & 0x3) {
+          case 0:
+            stats.domainFaults++;
+            DPRINTF(TLB, "TLB Fault: Data abort on domain. DACR: %#x"
+                    " domain: %#x write:%d\n", dacr,
+                    static_cast<uint8_t>(te->domain), is_write);
+            if (is_fetch) {
+                // Use PC value instead of vaddr because vaddr might
+                // be aligned to cache line and should not be the
+                // address reported in FAR
+                return std::make_shared<PrefetchAbort>(
+                    req->getPC(),
+                    ArmFault::DomainLL + te->lookupLevel,
+                    isStage2, tranMethod);
+            } else
+                return std::make_shared<DataAbort>(
+                    vaddr, te->domain, is_write,
+                    ArmFault::DomainLL + te->lookupLevel,
+                    isStage2, tranMethod);
+          case 1:
+            // Continue with permissions check
+            break;
+          case 2:
+            panic("UNPRED domain\n");
+          case 3:
+            return NoFault;
+        }
+    }
+
+    // The 'ap' variable is AP[2:0] or {AP[2,1],1b'0}, i.e. always three bits
+    uint8_t ap  = te->longDescFormat ? te->ap << 1 : te->ap;
+    uint8_t hap = te->hap;
+
+    if (sctlr.afe == 1 || te->longDescFormat)
+        ap |= 1;
+
+    bool abt;
+    bool isWritable = true;
+    // If this is a stage 2 access (eg for reading stage 1 page table entries)
+    // then don't perform the AP permissions check, we stil do the HAP check
+    // below.
+    if (isStage2) {
+        abt = false;
+    } else {
+        switch (ap) {
+          case 0:
+            DPRINTF(TLB, "Access permissions 0, checking rs:%#x\n",
+                    (int)sctlr.rs);
+            if (!sctlr.xp) {
+                switch ((int)sctlr.rs) {
+                  case 2:
+                    abt = is_write;
+                    break;
+                  case 1:
+                    abt = is_write || !is_priv;
+                    break;
+                  case 0:
+                  case 3:
+                  default:
+                    abt = true;
+                    break;
+                }
+            } else {
+                abt = true;
+            }
+            break;
+          case 1:
+            abt = !is_priv;
+            break;
+          case 2:
+            abt = !is_priv && is_write;
+            isWritable = is_priv;
+            break;
+          case 3:
+            abt = false;
+            break;
+          case 4:
+            panic("UNPRED premissions\n");
+          case 5:
+            abt = !is_priv || is_write;
+            isWritable = false;
+            break;
+          case 6:
+          case 7:
+            abt        = is_write;
+            isWritable = false;
+            break;
+          default:
+            panic("Unknown permissions %#x\n", ap);
+        }
+    }
+
+    bool hapAbt = is_write ? !(hap & 2) : !(hap & 1);
+    bool xn     = te->xn || (isWritable && sctlr.wxn) ||
+                            (ap == 3    && sctlr.uwxn && is_priv);
+    if (is_fetch && (abt || xn ||
+                     (te->longDescFormat && te->pxn && is_priv) ||
+                     (isSecure && te->ns && scr.sif))) {
+        stats.permsFaults++;
+        DPRINTF(TLB, "TLB Fault: Prefetch abort on permission check. AP:%d "
+                     "priv:%d write:%d ns:%d sif:%d sctlr.afe: %d \n",
+                     ap, is_priv, is_write, te->ns, scr.sif,sctlr.afe);
+        // Use PC value instead of vaddr because vaddr might be aligned to
+        // cache line and should not be the address reported in FAR
+        return std::make_shared<PrefetchAbort>(
+            req->getPC(),
+            ArmFault::PermissionLL + te->lookupLevel,
+            isStage2, tranMethod);
+    } else if (abt | hapAbt) {
+        stats.permsFaults++;
+        DPRINTF(TLB, "TLB Fault: Data abort on permission check. AP:%d priv:%d"
+               " write:%d\n", ap, is_priv, is_write);
+        return std::make_shared<DataAbort>(
+            vaddr, te->domain, is_write,
+            ArmFault::PermissionLL + te->lookupLevel,
+            isStage2 | !abt, tranMethod);
+    }
+    return NoFault;
+}
+
+
+Fault
+TLB::checkPermissions64(TlbEntry *te, const RequestPtr &req,
+                        BaseMMU::Mode mode, ThreadContext *tc)
+{
+    assert(aarch64);
+
+    // A data cache maintenance instruction that operates by VA does
+    // not generate a Permission fault unless:
+    // * It is a data cache invalidate (dc ivac) which requires write
+    //   permissions to the VA, or
+    // * It is executed from EL0
+    if (req->isCacheClean() && aarch64EL != EL0 && !isStage2) {
+        return NoFault;
+    }
+
+    Addr vaddr_tainted = req->getVaddr();
+    Addr vaddr = purifyTaggedAddr(vaddr_tainted, tc, aarch64EL, (TCR)ttbcr,
+                                  mode==BaseMMU::Execute);
+
+    Request::Flags flags = req->getFlags();
+    bool is_fetch  = (mode == BaseMMU::Execute);
+    // Cache clean operations require read permissions to the specified VA
+    bool is_write = !req->isCacheClean() && mode == BaseMMU::Write;
+    bool is_atomic = req->isAtomic();
+    GEM5_VAR_USED bool is_priv = isPriv && !(flags & UserMode);
+
+    updateMiscReg(tc, curTranType);
+
+    // If this is the second stage of translation and the request is for a
+    // stage 1 page table walk then we need to check the HCR.PTW bit. This
+    // allows us to generate a fault if the request targets an area marked
+    // as a device or strongly ordered.
+    if (isStage2 && req->isPTWalk() && hcr.ptw &&
+        (te->mtype != TlbEntry::MemoryType::Normal)) {
+        return std::make_shared<DataAbort>(
+            vaddr_tainted, te->domain, is_write,
+            ArmFault::PermissionLL + te->lookupLevel,
+            isStage2, ArmFault::LpaeTran);
+    }
+
+    // Generate an alignment fault for unaligned accesses to device or
+    // strongly ordered memory
+    if (!is_fetch) {
+        if (te->mtype != TlbEntry::MemoryType::Normal) {
+            if (vaddr & mask(flags & AlignmentMask)) {
+                stats.alignFaults++;
+                return std::make_shared<DataAbort>(
+                    vaddr_tainted,
+                    TlbEntry::DomainType::NoAccess,
+                    is_atomic ? false : is_write,
+                    ArmFault::AlignmentFault, isStage2,
+                    ArmFault::LpaeTran);
+            }
+        }
+    }
+
+    if (te->nonCacheable) {
+        // Prevent prefetching from I/O devices.
+        if (req->isPrefetch()) {
+            // Here we can safely use the fault status for the short
+            // desc. format in all cases
+            return std::make_shared<PrefetchAbort>(
+                vaddr_tainted,
+                ArmFault::PrefetchUncacheable,
+                isStage2, ArmFault::LpaeTran);
+        }
+    }
+
+    uint8_t ap  = 0x3 & (te->ap);  // 2-bit access protection field
+    bool grant = false;
+
+    bool wxn = sctlr.wxn;
+    uint8_t xn =  te->xn;
+    uint8_t pxn = te->pxn;
+    bool r = (!is_write && !is_fetch);
+    bool w = is_write;
+    bool x = is_fetch;
+
+    if (ArmSystem::haveEL(tc, EL3) && isSecure && te->ns && scr.sif)
+        xn = true;
+
+    // grant_read is used for faults from an atomic instruction that
+    // both reads and writes from a memory location. From a ISS point
+    // of view they count as read if a read to that address would have
+    // generated the fault; they count as writes otherwise
+    bool grant_read = true;
+    DPRINTF(TLBVerbose, "Checking permissions: ap:%d, xn:%d, pxn:%d, r:%d, "
+                        "w:%d, x:%d, is_priv: %d, wxn: %d\n", ap, xn,
+                        pxn, r, w, x, is_priv, wxn);
+
+    if (isStage2) {
+        assert(ArmSystem::haveVirtualization(tc) && aarch64EL != EL2);
+        // In stage 2 we use the hypervisor access permission bits.
+        // The following permissions are described in ARM DDI 0487A.f
+        // D4-1802
+        uint8_t hap = 0x3 & te->hap;
+        grant_read = hap & 0x1;
+        if (is_fetch) {
+            // sctlr.wxn overrides the xn bit
+            grant = !wxn && !xn;
+        } else if (is_atomic) {
+            grant = hap;
+        } else if (is_write) {
+            grant = hap & 0x2;
+        } else { // is_read
+            grant = grant_read;
+        }
+    } else {
+        switch (aarch64EL) {
+          case EL0:
+            {
+                grant_read = ap & 0x1;
+                uint8_t perm = (ap << 2)  | (xn << 1) | pxn;
+                switch (perm) {
+                  case 0:
+                  case 1:
+                  case 8:
+                  case 9:
+                    grant = x;
+                    break;
+                  case 4:
+                  case 5:
+                    grant = r || w || (x && !wxn);
+                    break;
+                  case 6:
+                  case 7:
+                    grant = r || w;
+                    break;
+                  case 12:
+                  case 13:
+                    grant = r || x;
+                    break;
+                  case 14:
+                  case 15:
+                    grant = r;
+                    break;
+                  default:
+                    grant = false;
+                }
+            }
+            break;
+          case EL1:
+            {
+                if (checkPAN(tc, ap, req, mode, is_priv)) {
+                    grant = false;
+                    grant_read = false;
+                    break;
+                }
+
+                uint8_t perm = (ap << 2)  | (xn << 1) | pxn;
+                switch (perm) {
+                  case 0:
+                  case 2:
+                    grant = r || w || (x && !wxn);
+                    break;
+                  case 1:
+                  case 3:
+                  case 4:
+                  case 5:
+                  case 6:
+                  case 7:
+                    // regions that are writeable at EL0 should not be
+                    // executable at EL1
+                    grant = r || w;
+                    break;
+                  case 8:
+                  case 10:
+                  case 12:
+                  case 14:
+                    grant = r || x;
+                    break;
+                  case 9:
+                  case 11:
+                  case 13:
+                  case 15:
+                    grant = r;
+                    break;
+                  default:
+                    grant = false;
+                }
+            }
+            break;
+          case EL2:
+            if (hcr.e2h && checkPAN(tc, ap, req, mode, is_priv)) {
+                grant = false;
+                grant_read = false;
+                break;
+            }
+            GEM5_FALLTHROUGH;
+          case EL3:
+            {
+                uint8_t perm = (ap & 0x2) | xn;
+                switch (perm) {
+                  case 0:
+                    grant = r || w || (x && !wxn);
+                    break;
+                  case 1:
+                    grant = r || w;
+                    break;
+                  case 2:
+                    grant = r || x;
+                    break;
+                  case 3:
+                    grant = r;
+                    break;
+                  default:
+                    grant = false;
+                }
+            }
+            break;
+        }
+    }
+
+    if (!grant) {
+        if (is_fetch) {
+            stats.permsFaults++;
+            DPRINTF(TLB, "TLB Fault: Prefetch abort on permission check. "
+                    "AP:%d priv:%d write:%d ns:%d sif:%d "
+                    "sctlr.afe: %d\n",
+                    ap, is_priv, is_write, te->ns, scr.sif, sctlr.afe);
+            // Use PC value instead of vaddr because vaddr might be aligned to
+            // cache line and should not be the address reported in FAR
+            return std::make_shared<PrefetchAbort>(
+                req->getPC(),
+                ArmFault::PermissionLL + te->lookupLevel,
+                isStage2, ArmFault::LpaeTran);
+        } else {
+            stats.permsFaults++;
+            DPRINTF(TLB, "TLB Fault: Data abort on permission check. AP:%d "
+                    "priv:%d write:%d\n", ap, is_priv, is_write);
+            return std::make_shared<DataAbort>(
+                vaddr_tainted, te->domain,
+                (is_atomic && !grant_read) ? false : is_write,
+                ArmFault::PermissionLL + te->lookupLevel,
+                isStage2, ArmFault::LpaeTran);
+        }
+    }
+
+    return NoFault;
+}
+
+bool
+TLB::checkPAN(ThreadContext *tc, uint8_t ap, const RequestPtr &req,
+              BaseMMU::Mode mode, const bool is_priv)
+{
+    // The PAN bit has no effect on:
+    // 1) Instruction accesses.
+    // 2) Data Cache instructions other than DC ZVA
+    // 3) Address translation instructions, other than ATS1E1RP and
+    // ATS1E1WP when ARMv8.2-ATS1E1 is implemented. (Unimplemented in
+    // gem5)
+    // 4) Instructions to be treated as unprivileged, unless
+    // HCR_EL2.{E2H, TGE} == {1, 0}
+    const AA64MMFR1 mmfr1 = tc->readMiscReg(MISCREG_ID_AA64MMFR1_EL1);
+    if (mmfr1.pan && cpsr.pan && (ap & 0x1) && mode != BaseMMU::Execute) {
+        if (req->isCacheMaintenance() &&
+            !(req->getFlags() & Request::CACHE_BLOCK_ZERO)) {
+            // Cache maintenance other than DC ZVA
+            return false;
+        } else if (!is_priv && !(hcr.e2h && !hcr.tge)) {
+            // Treated as unprivileged unless HCR_EL2.{E2H, TGE} == {1, 0}
+            return false;
+        }
+        return true;
+    }
+
+    return false;
+}
+
+Fault
+TLB::translateMmuOff(ThreadContext *tc, const RequestPtr &req,
+                     BaseMMU::Mode mode, TLB::ArmTranslationType tranType,
+                     Addr vaddr, bool long_desc_format)
+{
+    bool is_fetch  = (mode == BaseMMU::Execute);
+    bool is_atomic = req->isAtomic();
+    req->setPaddr(vaddr);
+    // When the MMU is off the security attribute corresponds to the
+    // security state of the processor
+    if (isSecure)
+        req->setFlags(Request::SECURE);
+
+    if (aarch64) {
+        bool selbit = bits(vaddr, 55);
+        TCR tcr1 = tc->readMiscReg(MISCREG_TCR_EL1);
+        int topbit = computeAddrTop(tc, selbit, is_fetch, tcr1, currEL(tc));
+        int addr_sz = bits(vaddr, topbit, physAddrRange);
+        if (addr_sz != 0){
+            Fault f;
+            if (is_fetch)
+                f = std::make_shared<PrefetchAbort>(vaddr,
+                    ArmFault::AddressSizeLL, isStage2, ArmFault::LpaeTran);
+            else
+                f = std::make_shared<DataAbort>( vaddr,
+                    TlbEntry::DomainType::NoAccess,
+                    is_atomic ? false : mode==BaseMMU::Write,
+                    ArmFault::AddressSizeLL, isStage2, ArmFault::LpaeTran);
+            return f;
+        }
+    }
+
+    // @todo: double check this (ARM ARM issue C B3.2.1)
+    if (long_desc_format || sctlr.tre == 0 || nmrr.ir0 == 0 ||
+        nmrr.or0 == 0 || prrr.tr0 != 0x2) {
+        if (!req->isCacheMaintenance()) {
+            req->setFlags(Request::UNCACHEABLE);
+        }
+        req->setFlags(Request::STRICT_ORDER);
+    }
+
+    // Set memory attributes
+    TlbEntry temp_te;
+    temp_te.ns = !isSecure;
+    bool dc = (HaveVirtHostExt(tc)
+               && hcr.e2h == 1 && hcr.tge == 1) ? 0: hcr.dc;
+    bool i_cacheability = sctlr.i && !sctlr.m;
+    if (isStage2 || !dc || isSecure ||
+       (isHyp && !(tranType & S1CTran))) {
+
+        temp_te.mtype      = is_fetch ? TlbEntry::MemoryType::Normal
+                                      : TlbEntry::MemoryType::StronglyOrdered;
+        temp_te.innerAttrs = i_cacheability? 0x2: 0x0;
+        temp_te.outerAttrs = i_cacheability? 0x2: 0x0;
+        temp_te.shareable  = true;
+        temp_te.outerShareable = true;
+    } else {
+        temp_te.mtype      = TlbEntry::MemoryType::Normal;
+        temp_te.innerAttrs = 0x3;
+        temp_te.outerAttrs = 0x3;
+        temp_te.shareable  = false;
+        temp_te.outerShareable = false;
+    }
+    temp_te.setAttributes(long_desc_format);
+    DPRINTF(TLBVerbose, "(No MMU) setting memory attributes: shareable: "
+            "%d, innerAttrs: %d, outerAttrs: %d, isStage2: %d\n",
+            temp_te.shareable, temp_te.innerAttrs, temp_te.outerAttrs,
+            isStage2);
+    setAttr(temp_te.attributes);
+
+    return testTranslation(req, mode, TlbEntry::DomainType::NoAccess);
+}
+
+Fault
+TLB::translateMmuOn(ThreadContext* tc, const RequestPtr &req,
+                    BaseMMU::Mode mode, BaseMMU::Translation *translation,
+                    bool &delay, bool timing,
+                    bool functional, Addr vaddr,
+                    ArmFault::TranMethod tranMethod)
+{
+    TlbEntry *te = NULL;
+    bool is_fetch  = (mode == BaseMMU::Execute);
+    TlbEntry mergeTe;
+
+    Request::Flags flags = req->getFlags();
+    Addr vaddr_tainted = req->getVaddr();
+
+    Fault fault = getResultTe(&te, req, tc, mode, translation, timing,
+                              functional, &mergeTe);
+    // only proceed if we have a valid table entry
+    if ((te == NULL) && (fault == NoFault)) delay = true;
+
+    // If we have the table entry transfer some of the attributes to the
+    // request that triggered the translation
+    if (te != NULL) {
+        // Set memory attributes
+        DPRINTF(TLBVerbose,
+                "Setting memory attributes: shareable: %d, innerAttrs: %d, "
+                "outerAttrs: %d, mtype: %d, isStage2: %d\n",
+                te->shareable, te->innerAttrs, te->outerAttrs,
+                static_cast<uint8_t>(te->mtype), isStage2);
+        setAttr(te->attributes);
+
+        if (te->nonCacheable && !req->isCacheMaintenance())
+            req->setFlags(Request::UNCACHEABLE);
+
+        // Require requests to be ordered if the request goes to
+        // strongly ordered or device memory (i.e., anything other
+        // than normal memory requires strict order).
+        if (te->mtype != TlbEntry::MemoryType::Normal)
+            req->setFlags(Request::STRICT_ORDER);
+
+        Addr pa = te->pAddr(vaddr);
+        req->setPaddr(pa);
+
+        if (isSecure && !te->ns) {
+            req->setFlags(Request::SECURE);
+        }
+        if (!is_fetch && fault == NoFault &&
+            (vaddr & mask(flags & AlignmentMask)) &&
+            (te->mtype != TlbEntry::MemoryType::Normal)) {
+                // Unaligned accesses to Device memory should always cause an
+                // abort regardless of sctlr.a
+                stats.alignFaults++;
+                bool is_write  = (mode == BaseMMU::Write);
+                return std::make_shared<DataAbort>(
+                    vaddr_tainted,
+                    TlbEntry::DomainType::NoAccess, is_write,
+                    ArmFault::AlignmentFault, isStage2,
+                    tranMethod);
+        }
+
+        // Check for a trickbox generated address fault
+        if (fault == NoFault)
+            fault = testTranslation(req, mode, te->domain);
+    }
+
+    if (fault == NoFault) {
+        // Don't try to finalize a physical address unless the
+        // translation has completed (i.e., there is a table entry).
+        return te ? finalizePhysical(req, tc, mode) : NoFault;
+    } else {
+        return fault;
+    }
+}
+
+Fault
+TLB::translateFs(const RequestPtr &req, ThreadContext *tc, BaseMMU::Mode mode,
+        BaseMMU::Translation *translation, bool &delay, bool timing,
+        TLB::ArmTranslationType tranType, bool functional)
+{
+    // No such thing as a functional timing access
+    assert(!(timing && functional));
+
+    updateMiscReg(tc, tranType);
+
+    Addr vaddr_tainted = req->getVaddr();
+    Addr vaddr = 0;
+    if (aarch64)
+        vaddr = purifyTaggedAddr(vaddr_tainted, tc, aarch64EL, (TCR)ttbcr,
+                                 mode==BaseMMU::Execute);
+    else
+        vaddr = vaddr_tainted;
+    Request::Flags flags = req->getFlags();
+
+    bool is_fetch  = (mode == BaseMMU::Execute);
+    bool is_write  = (mode == BaseMMU::Write);
+    bool long_desc_format = aarch64 || longDescFormatInUse(tc);
+    ArmFault::TranMethod tranMethod = long_desc_format ? ArmFault::LpaeTran
+                                                       : ArmFault::VmsaTran;
+
+    DPRINTF(TLBVerbose,
+            "CPSR is priv:%d UserMode:%d secure:%d S1S2NsTran:%d\n",
+            isPriv, flags & UserMode, isSecure, tranType & S1S2NsTran);
+
+    DPRINTF(TLB, "translateFs addr %#x, mode %d, st2 %d, scr %#x sctlr %#x "
+                 "flags %#lx tranType 0x%x\n", vaddr_tainted, mode, isStage2,
+                 scr, sctlr, flags, tranType);
+
+    if ((req->isInstFetch() && (!sctlr.i)) ||
+        ((!req->isInstFetch()) && (!sctlr.c))){
+        if (!req->isCacheMaintenance()) {
+            req->setFlags(Request::UNCACHEABLE);
+        }
+        req->setFlags(Request::STRICT_ORDER);
+    }
+    if (!is_fetch) {
+        if (sctlr.a || !(flags & AllowUnaligned)) {
+            if (vaddr & mask(flags & AlignmentMask)) {
+                stats.alignFaults++;
+                return std::make_shared<DataAbort>(
+                    vaddr_tainted,
+                    TlbEntry::DomainType::NoAccess, is_write,
+                    ArmFault::AlignmentFault, isStage2,
+                    tranMethod);
+            }
+        }
+    }
+
+    bool vm = hcr.vm;
+    if (HaveVirtHostExt(tc) && hcr.e2h == 1 && hcr.tge ==1)
+        vm = 0;
+    else if (hcr.dc == 1)
+        vm = 1;
+
+    Fault fault = NoFault;
+    // If guest MMU is off or hcr.vm=0 go straight to stage2
+    if ((isStage2 && !vm) || (!isStage2 && !sctlr.m)) {
+        fault = translateMmuOff(tc, req, mode, tranType, vaddr,
+                                long_desc_format);
+    } else {
+        DPRINTF(TLBVerbose, "Translating %s=%#x context=%d\n",
+                isStage2 ? "IPA" : "VA", vaddr_tainted, asid);
+        // Translation enabled
+        fault = translateMmuOn(tc, req, mode, translation, delay, timing,
+                               functional, vaddr, tranMethod);
+    }
+
+    // Check for Debug Exceptions
+    SelfDebug *sd = ArmISA::ISA::getSelfDebug(tc);
+
+    if (sd->enabled() && fault == NoFault) {
+        fault = sd->testDebug(tc, req, mode);
+    }
+
+    return fault;
+}
+
+Fault
+TLB::translateAtomic(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, TLB::ArmTranslationType tranType)
+{
+    updateMiscReg(tc, tranType);
+
+    if (directToStage2) {
+        assert(stage2Tlb);
+        return stage2Tlb->translateAtomic(req, tc, mode, tranType);
+    }
+
+    bool delay = false;
+    Fault fault;
+    if (FullSystem)
+        fault = translateFs(req, tc, mode, NULL, delay, false, tranType);
+    else
+        fault = translateSe(req, tc, mode, NULL, delay, false);
+    assert(!delay);
+    return fault;
+}
+
+Fault
+TLB::translateFunctional(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, TLB::ArmTranslationType tranType)
+{
+    updateMiscReg(tc, tranType);
+
+    if (directToStage2) {
+        assert(stage2Tlb);
+        return stage2Tlb->translateFunctional(req, tc, mode, tranType);
+    }
+
+    bool delay = false;
+    Fault fault;
+    if (FullSystem)
+        fault = translateFs(req, tc, mode, NULL, delay, false, tranType, true);
+   else
+        fault = translateSe(req, tc, mode, NULL, delay, false);
+    assert(!delay);
+    return fault;
+}
+
+void
+TLB::translateTiming(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Translation *translation, BaseMMU::Mode mode,
+    TLB::ArmTranslationType tranType)
+{
+    updateMiscReg(tc, tranType);
+
+    if (directToStage2) {
+        assert(stage2Tlb);
+        stage2Tlb->translateTiming(req, tc, translation, mode, tranType);
+        return;
+    }
+
+    assert(translation);
+
+    translateComplete(req, tc, translation, mode, tranType, isStage2);
+}
+
+Fault
+TLB::translateComplete(const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Translation *translation, BaseMMU::Mode mode,
+    TLB::ArmTranslationType tranType, bool callFromS2)
+{
+    bool delay = false;
+    Fault fault;
+    if (FullSystem)
+        fault = translateFs(req, tc, mode, translation, delay, true, tranType);
+    else
+        fault = translateSe(req, tc, mode, translation, delay, true);
+    DPRINTF(TLBVerbose, "Translation returning delay=%d fault=%d\n", delay, fault !=
+            NoFault);
+    // If we have a translation, and we're not in the middle of doing a stage
+    // 2 translation tell the translation that we've either finished or its
+    // going to take a while. By not doing this when we're in the middle of a
+    // stage 2 translation we prevent marking the translation as delayed twice,
+    // one when the translation starts and again when the stage 1 translation
+    // completes.
+
+    if (translation && (callFromS2 || !stage2Req || req->hasPaddr() ||
+        fault != NoFault)) {
+        if (!delay)
+            translation->finish(fault, req, tc, mode);
+        else
+            translation->markDelayed();
+    }
+    return fault;
+}
+
 Port *
 TLB::getTableWalkerPort()
 {
     return &tableWalker->getTableWalkerPort();
 }
 
+vmid_t
+TLB::getVMID(ThreadContext *tc) const
+{
+    AA64MMFR1 mmfr1 = tc->readMiscReg(MISCREG_ID_AA64MMFR1_EL1);
+    VTCR_t vtcr = tc->readMiscReg(MISCREG_VTCR_EL2);
+    vmid_t vmid = 0;
+
+    switch (mmfr1.vmidbits) {
+      case 0b0000:
+        // 8 bits
+        vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 55, 48);
+        break;
+      case 0b0010:
+        if (vtcr.vs && ELIs64(tc, EL2)) {
+            // 16 bits
+            vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 63, 48);
+        } else {
+            // 8 bits
+            vmid = bits(tc->readMiscReg(MISCREG_VTTBR_EL2), 55, 48);
+        }
+        break;
+      default:
+        panic("Reserved ID_AA64MMFR1_EL1.VMIDBits value: %#x",
+              mmfr1.vmidbits);
+    }
+
+    return vmid;
+}
+
+void
+TLB::updateMiscReg(ThreadContext *tc, ArmTranslationType tranType)
+{
+    // check if the regs have changed, or the translation mode is different.
+    // NOTE: the tran type doesn't affect stage 2 TLB's as they only handle
+    // one type of translation anyway
+    if (miscRegValid && miscRegContext == tc->contextId() &&
+            ((tranType == curTranType) || isStage2)) {
+        return;
+    }
+
+    DPRINTF(TLBVerbose, "TLB variables changed!\n");
+    cpsr = tc->readMiscReg(MISCREG_CPSR);
+
+    // Dependencies: SCR/SCR_EL3, CPSR
+    isSecure = ArmISA::isSecure(tc) &&
+        !(tranType & HypMode) && !(tranType & S1S2NsTran);
+
+    aarch64EL = tranTypeEL(cpsr, tranType);
+    aarch64 = isStage2 ?
+        ELIs64(tc, EL2) :
+        ELIs64(tc, aarch64EL == EL0 ? EL1 : aarch64EL);
+
+    hcr = tc->readMiscReg(MISCREG_HCR_EL2);
+    if (aarch64) {  // AArch64
+        // determine EL we need to translate in
+        switch (aarch64EL) {
+          case EL0:
+            if (HaveVirtHostExt(tc) && hcr.tge == 1 && hcr.e2h == 1) {
+                // VHE code for EL2&0 regime
+                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL2);
+                ttbcr = tc->readMiscReg(MISCREG_TCR_EL2);
+                uint64_t ttbr_asid = ttbcr.a1 ?
+                    tc->readMiscReg(MISCREG_TTBR1_EL2) :
+                    tc->readMiscReg(MISCREG_TTBR0_EL2);
+                asid = bits(ttbr_asid,
+                            (haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
+
+            } else {
+                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL1);
+                ttbcr = tc->readMiscReg(MISCREG_TCR_EL1);
+                uint64_t ttbr_asid = ttbcr.a1 ?
+                    tc->readMiscReg(MISCREG_TTBR1_EL1) :
+                    tc->readMiscReg(MISCREG_TTBR0_EL1);
+                asid = bits(ttbr_asid,
+                            (haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
+
+            }
+            break;
+          case EL1:
+            {
+                sctlr = tc->readMiscReg(MISCREG_SCTLR_EL1);
+                ttbcr = tc->readMiscReg(MISCREG_TCR_EL1);
+                uint64_t ttbr_asid = ttbcr.a1 ?
+                    tc->readMiscReg(MISCREG_TTBR1_EL1) :
+                    tc->readMiscReg(MISCREG_TTBR0_EL1);
+                asid = bits(ttbr_asid,
+                            (haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
+            }
+            break;
+          case EL2:
+            sctlr = tc->readMiscReg(MISCREG_SCTLR_EL2);
+            ttbcr = tc->readMiscReg(MISCREG_TCR_EL2);
+            if (hcr.e2h == 1) {
+                // VHE code for EL2&0 regime
+                uint64_t ttbr_asid = ttbcr.a1 ?
+                    tc->readMiscReg(MISCREG_TTBR1_EL2) :
+                    tc->readMiscReg(MISCREG_TTBR0_EL2);
+                asid = bits(ttbr_asid,
+                            (haveLargeAsid64 && ttbcr.as) ? 63 : 55, 48);
+            } else {
+                asid = -1;
+            }
+            break;
+          case EL3:
+            sctlr = tc->readMiscReg(MISCREG_SCTLR_EL3);
+            ttbcr = tc->readMiscReg(MISCREG_TCR_EL3);
+            asid = -1;
+            break;
+        }
+
+        scr = tc->readMiscReg(MISCREG_SCR_EL3);
+        isPriv = aarch64EL != EL0;
+        if (haveVirtualization) {
+            vmid = getVMID(tc);
+            isHyp = aarch64EL == EL2;
+            isHyp |= tranType & HypMode;
+            isHyp &= (tranType & S1S2NsTran) == 0;
+            isHyp &= (tranType & S1CTran)    == 0;
+            bool vm = hcr.vm;
+            if (HaveVirtHostExt(tc) && hcr.e2h == 1 && hcr.tge ==1) {
+                vm = 0;
+            }
+
+            if (hcr.e2h == 1 && (aarch64EL == EL2
+                                  || (hcr.tge ==1 && aarch64EL == EL0))) {
+                isHyp = true;
+                directToStage2 = false;
+                stage2Req      = false;
+                stage2DescReq  = false;
+            } else {
+            // Work out if we should skip the first stage of translation and go
+            // directly to stage 2. This value is cached so we don't have to
+            // compute it for every translation.
+                bool sec = !isSecure || (isSecure && IsSecureEL2Enabled(tc));
+                stage2Req = isStage2 ||
+                            (vm && !isHyp && sec &&
+                             !(tranType & S1CTran) && (aarch64EL < EL2) &&
+                             !(tranType & S1E1Tran)); // <--- FIX THIS HACK
+                stage2DescReq = isStage2 ||  (vm && !isHyp && sec &&
+                                (aarch64EL < EL2));
+                directToStage2 = !isStage2 && stage2Req && !sctlr.m;
+            }
+        } else {
+            vmid           = 0;
+            isHyp          = false;
+            directToStage2 = false;
+            stage2Req      = false;
+            stage2DescReq  = false;
+        }
+    } else {  // AArch32
+        sctlr  = tc->readMiscReg(snsBankedIndex(MISCREG_SCTLR, tc,
+                                 !isSecure));
+        ttbcr  = tc->readMiscReg(snsBankedIndex(MISCREG_TTBCR, tc,
+                                 !isSecure));
+        scr    = tc->readMiscReg(MISCREG_SCR);
+        isPriv = cpsr.mode != MODE_USER;
+        if (longDescFormatInUse(tc)) {
+            uint64_t ttbr_asid = tc->readMiscReg(
+                snsBankedIndex(ttbcr.a1 ? MISCREG_TTBR1 :
+                                          MISCREG_TTBR0,
+                                       tc, !isSecure));
+            asid = bits(ttbr_asid, 55, 48);
+        } else { // Short-descriptor translation table format in use
+            CONTEXTIDR context_id = tc->readMiscReg(snsBankedIndex(
+                MISCREG_CONTEXTIDR, tc,!isSecure));
+            asid = context_id.asid;
+        }
+        prrr = tc->readMiscReg(snsBankedIndex(MISCREG_PRRR, tc,
+                               !isSecure));
+        nmrr = tc->readMiscReg(snsBankedIndex(MISCREG_NMRR, tc,
+                               !isSecure));
+        dacr = tc->readMiscReg(snsBankedIndex(MISCREG_DACR, tc,
+                               !isSecure));
+        hcr  = tc->readMiscReg(MISCREG_HCR);
+
+        if (haveVirtualization) {
+            vmid   = bits(tc->readMiscReg(MISCREG_VTTBR), 55, 48);
+            isHyp  = cpsr.mode == MODE_HYP;
+            isHyp |=  tranType & HypMode;
+            isHyp &= (tranType & S1S2NsTran) == 0;
+            isHyp &= (tranType & S1CTran)    == 0;
+            if (isHyp) {
+                sctlr = tc->readMiscReg(MISCREG_HSCTLR);
+            }
+            // Work out if we should skip the first stage of translation and go
+            // directly to stage 2. This value is cached so we don't have to
+            // compute it for every translation.
+            bool sec = !isSecure || (isSecure && IsSecureEL2Enabled(tc));
+            stage2Req      = hcr.vm && !isStage2 && !isHyp && sec &&
+                             !(tranType & S1CTran);
+            stage2DescReq  = hcr.vm && !isStage2 && !isHyp && sec;
+            directToStage2 = stage2Req && !sctlr.m;
+        } else {
+            vmid           = 0;
+            stage2Req      = false;
+            isHyp          = false;
+            directToStage2 = false;
+            stage2DescReq  = false;
+        }
+    }
+    miscRegValid = true;
+    miscRegContext = tc->contextId();
+    curTranType  = tranType;
+}
+
+ExceptionLevel
+TLB::tranTypeEL(CPSR cpsr, ArmTranslationType type)
+{
+    switch (type) {
+      case S1E0Tran:
+      case S12E0Tran:
+        return EL0;
+
+      case S1E1Tran:
+      case S12E1Tran:
+        return EL1;
+
+      case S1E2Tran:
+        return EL2;
+
+      case S1E3Tran:
+        return EL3;
+
+      case NormalTran:
+      case S1CTran:
+      case S1S2NsTran:
+      case HypMode:
+        return currEL(cpsr);
+
+      default:
+        panic("Unknown translation mode!\n");
+    }
+}
+
+Fault
+TLB::getTE(TlbEntry **te, const RequestPtr &req, ThreadContext *tc,
+    BaseMMU::Mode mode, BaseMMU::Translation *translation, bool timing,
+    bool functional, bool is_secure, TLB::ArmTranslationType tranType)
+{
+    // In a 2-stage system, the IPA->PA translation can be started via this
+    // call so make sure the miscRegs are correct.
+    if (isStage2) {
+        updateMiscReg(tc, tranType);
+    }
+
+    Addr vaddr_tainted = req->getVaddr();
+    Addr vaddr = 0;
+    ExceptionLevel target_el = aarch64 ? aarch64EL : EL1;
+    if (aarch64) {
+        vaddr = purifyTaggedAddr(vaddr_tainted, tc, target_el, (TCR)ttbcr,
+                                 mode==BaseMMU::Execute);
+    } else {
+        vaddr = vaddr_tainted;
+    }
+    *te = lookup(vaddr, asid, vmid, isHyp, is_secure, false, false, target_el,
+                 false, mode);
+    if (*te == NULL) {
+        if (req->isPrefetch()) {
+            // if the request is a prefetch don't attempt to fill the TLB or go
+            // any further with the memory access (here we can safely use the
+            // fault status for the short desc. format in all cases)
+           stats.prefetchFaults++;
+           return std::make_shared<PrefetchAbort>(
+               vaddr_tainted, ArmFault::PrefetchTLBMiss, isStage2);
+        }
+
+        // start translation table walk, pass variables rather than
+        // re-retreaving in table walker for speed
+        DPRINTF(TLB, "TLB Miss: Starting hardware table walker for %#x(%d:%d)\n",
+                vaddr_tainted, asid, vmid);
+        Fault fault;
+        fault = tableWalker->walk(req, tc, asid, vmid, isHyp, mode,
+                                  translation, timing, functional, is_secure,
+                                  tranType, stage2DescReq);
+        // for timing mode, return and wait for table walk,
+        if (timing || fault != NoFault) {
+            return fault;
+        }
+
+        *te = lookup(vaddr, asid, vmid, isHyp, is_secure, true, false,
+                     target_el, false, mode);
+        if (!*te)
+            printTlb();
+        assert(*te);
+    }
+    return NoFault;
+}
+
+Fault
+TLB::getResultTe(TlbEntry **te, const RequestPtr &req,
+        ThreadContext *tc, BaseMMU::Mode mode,
+        BaseMMU::Translation *translation, bool timing, bool functional,
+        TlbEntry *mergeTe)
+{
+    Fault fault;
+
+    if (isStage2) {
+        // We are already in the stage 2 TLB. Grab the table entry for stage
+        // 2 only. We are here because stage 1 translation is disabled.
+        TlbEntry *s2Te = NULL;
+        // Get the stage 2 table entry
+        fault = getTE(&s2Te, req, tc, mode, translation, timing, functional,
+                      isSecure, curTranType);
+        // Check permissions of stage 2
+        if ((s2Te != NULL) && (fault == NoFault)) {
+            if (aarch64)
+                fault = checkPermissions64(s2Te, req, mode, tc);
+            else
+                fault = checkPermissions(s2Te, req, mode);
+        }
+        *te = s2Te;
+        return fault;
+    }
+
+    TlbEntry *s1Te = NULL;
+
+    Addr vaddr_tainted = req->getVaddr();
+
+    // Get the stage 1 table entry
+    fault = getTE(&s1Te, req, tc, mode, translation, timing, functional,
+                  isSecure, curTranType);
+    // only proceed if we have a valid table entry
+    if ((s1Te != NULL) && (fault == NoFault)) {
+        // Check stage 1 permissions before checking stage 2
+        if (aarch64)
+            fault = checkPermissions64(s1Te, req, mode, tc);
+        else
+            fault = checkPermissions(s1Te, req, mode);
+        if (stage2Req & (fault == NoFault)) {
+            Stage2LookUp *s2Lookup = new Stage2LookUp(this, stage2Tlb, *s1Te,
+                req, translation, mode, timing, functional, isSecure,
+                curTranType);
+            fault = s2Lookup->getTe(tc, mergeTe);
+            if (s2Lookup->isComplete()) {
+                *te = mergeTe;
+                // We've finished with the lookup so delete it
+                delete s2Lookup;
+            } else {
+                // The lookup hasn't completed, so we can't delete it now. We
+                // get round this by asking the object to self delete when the
+                // translation is complete.
+                s2Lookup->setSelfDelete();
+            }
+        } else {
+            // This case deals with an S1 hit (or bypass), followed by
+            // an S2 hit-but-perms issue
+            if (isStage2) {
+                DPRINTF(TLBVerbose, "s2TLB: reqVa %#x, reqPa %#x, fault %p\n",
+                        vaddr_tainted, req->hasPaddr() ? req->getPaddr() : ~0, fault);
+                if (fault != NoFault) {
+                    ArmFault *armFault = reinterpret_cast<ArmFault *>(fault.get());
+                    armFault->annotate(ArmFault::S1PTW, false);
+                    armFault->annotate(ArmFault::OVA, vaddr_tainted);
+                }
+            }
+            *te = s1Te;
+        }
+    }
+    return fault;
+}
+
+void
+TLB::setTestInterface(SimObject *_ti)
+{
+    if (!_ti) {
+        test = nullptr;
+    } else {
+        TlbTestInterface *ti(dynamic_cast<TlbTestInterface *>(_ti));
+        fatal_if(!ti, "%s is not a valid ARM TLB tester\n", _ti->name());
+        test = ti;
+    }
+}
+
+Fault
+TLB::testTranslation(const RequestPtr &req, BaseMMU::Mode mode,
+                     TlbEntry::DomainType domain)
+{
+    if (!test || !req->hasSize() || req->getSize() == 0 ||
+        req->isCacheMaintenance()) {
+        return NoFault;
+    } else {
+        return test->translationCheck(req, isPriv, mode, domain);
+    }
+}
+
+Fault
+TLB::testWalk(Addr pa, Addr size, Addr va, bool is_secure, BaseMMU::Mode mode,
+              TlbEntry::DomainType domain, LookupLevel lookup_level)
+{
+    if (!test) {
+        return NoFault;
+    } else {
+        return test->walkCheck(pa, size, va, is_secure, isPriv, mode,
+                               domain, lookup_level);
+    }
+}
+
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/tlb.hh gem5-SALAM/src/arch/arm/tlb.hh
--- gem5/src/arch/arm/tlb.hh	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/tlb.hh	2024-02-22 18:17:15.008943995 -0600
@@ -47,7 +47,6 @@
 #include "arch/arm/utility.hh"
 #include "arch/generic/tlb.hh"
 #include "base/statistics.hh"
-#include "enums/TypeTLB.hh"
 #include "mem/request.hh"
 #include "params/ArmTLB.hh"
 #include "sim/probe/pmu.hh"
@@ -60,20 +59,15 @@
 namespace ArmISA {
 
 class TableWalker;
+class Stage2LookUp;
 class TLB;
 
 class TLBIALL;
-class ITLBIALL;
-class DTLBIALL;
 class TLBIALLEL;
 class TLBIVMALL;
 class TLBIALLN;
 class TLBIMVA;
-class ITLBIMVA;
-class DTLBIMVA;
 class TLBIASID;
-class ITLBIASID;
-class DTLBIASID;
 class TLBIMVAA;
 
 class TlbTestInterface
@@ -114,12 +108,67 @@
 
 class TLB : public BaseTLB
 {
+  public:
+    enum ArmFlags
+    {
+        AlignmentMask = 0x7,
+
+        AlignByte = 0x0,
+        AlignHalfWord = 0x1,
+        AlignWord = 0x2,
+        AlignDoubleWord = 0x3,
+        AlignQuadWord = 0x4,
+        AlignOctWord = 0x5,
+
+        AllowUnaligned = 0x8,
+        // Priv code operating as if it wasn't
+        UserMode = 0x10
+    };
+
+    enum ArmTranslationType
+    {
+        NormalTran = 0,
+        S1CTran = 0x1,
+        HypMode = 0x2,
+        // Secure code operating as if it wasn't (required by some Address
+        // Translate operations)
+        S1S2NsTran = 0x4,
+        // Address translation instructions (eg AT S1E0R_Xt) need to be handled
+        // in special ways during translation because they could need to act
+        // like a different EL than the current EL. The following flags are
+        // for these instructions
+        S1E0Tran = 0x8,
+        S1E1Tran = 0x10,
+        S1E2Tran = 0x20,
+        S1E3Tran = 0x40,
+        S12E0Tran = 0x80,
+        S12E1Tran = 0x100
+    };
+
+    /**
+     * Determine the EL to use for the purpose of a translation given
+     * a specific translation type. If the translation type doesn't
+     * specify an EL, we use the current EL.
+     */
+    static ExceptionLevel tranTypeEL(CPSR cpsr, ArmTranslationType type);
+
   protected:
     TlbEntry* table;     // the Page Table
     int size;            // TLB Size
     bool isStage2;       // Indicates this TLB is part of the second stage MMU
+    bool stage2Req;      // Indicates whether a stage 2 lookup is also required
+    // Indicates whether a stage 2 lookup of the table descriptors is required.
+    // Certain address translation instructions will intercept the IPA but the
+    // table descriptors still need to be translated by the stage2.
+    bool stage2DescReq;
+    uint64_t _attr;      // Memory attributes for last accessed TLB entry
+    bool directToStage2; // Indicates whether all translation requests should
+                         // be routed directly to the stage 2 TLB
 
     TableWalker *tableWalker;
+    TLB *stage2Tlb;
+
+    TlbTestInterface *test;
 
     struct TlbStats : public statistics::Group
     {
@@ -137,6 +186,10 @@
         mutable statistics::Scalar flushTlbMvaAsid;
         mutable statistics::Scalar flushTlbAsid;
         mutable statistics::Scalar flushedEntries;
+        mutable statistics::Scalar alignFaults;
+        mutable statistics::Scalar prefetchFaults;
+        mutable statistics::Scalar domainFaults;
+        mutable statistics::Scalar permsFaults;
 
         statistics::Formula readAccesses;
         statistics::Formula writeAccesses;
@@ -150,7 +203,6 @@
     probing::PMUUPtr ppRefills;
 
     int rangeMRU; //On lookup, only move entries ahead when outside rangeMRU
-    vmid_t vmid;
 
   public:
     using Params = ArmTLBParams;
@@ -175,43 +227,39 @@
                      bool ignore_asn, ExceptionLevel target_el,
                      bool in_host, BaseMMU::Mode mode);
 
-    /** Lookup an entry in the TLB and in the next levels by
-     * following the nextLevel pointer
-     *
-     * @param vpn virtual address
-     * @param asn context id/address space id to use
-     * @param vmid The virtual machine ID used for stage 2 translation
-     * @param secure if the lookup is secure
-     * @param hyp if the lookup is done from hyp mode
-     * @param functional if the lookup should modify state
-     * @param ignore_asn if on lookup asn should be ignored
-     * @param target_el selecting the translation regime
-     * @param in_host if we are in host (EL2&0 regime)
-     * @param mode to differentiate between read/writes/fetches.
-     * @return pointer to TLB entry if it exists
-     */
-    TlbEntry *multiLookup(Addr vpn, uint16_t asn, vmid_t vmid, bool hyp,
-                          bool secure, bool functional,
-                          bool ignore_asn, ExceptionLevel target_el,
-                          bool in_host, BaseMMU::Mode mode);
-
     virtual ~TLB();
 
     void takeOverFrom(BaseTLB *otlb) override;
 
+    void setTestInterface(SimObject *ti);
+
+    void setStage2Tlb(TLB *stage2_tlb) { stage2Tlb = stage2_tlb; }
+
     void setTableWalker(TableWalker *table_walker);
 
     TableWalker *getTableWalker() { return tableWalker; }
 
     int getsize() const { return size; }
 
-    void setVMID(vmid_t _vmid) { vmid = _vmid; }
+    void insert(Addr vaddr, TlbEntry &pte);
 
-    /** Insert a PTE in the current TLB */
-    void insert(TlbEntry &pte);
-
-    /** Insert a PTE in the current TLB and in the higher levels */
-    void multiInsert(TlbEntry &pte);
+    Fault getTE(TlbEntry **te, const RequestPtr &req,
+                ThreadContext *tc, BaseMMU::Mode mode,
+                BaseMMU::Translation *translation,
+                bool timing, bool functional,
+                bool is_secure, ArmTranslationType tranType);
+
+    Fault getResultTe(TlbEntry **te, const RequestPtr &req,
+                      ThreadContext *tc, BaseMMU::Mode mode,
+                      BaseMMU::Translation *translation, bool timing,
+                      bool functional, TlbEntry *mergeTe);
+
+    Fault checkPermissions(TlbEntry *te, const RequestPtr &req,
+                           BaseMMU::Mode mode);
+    Fault checkPermissions64(TlbEntry *te, const RequestPtr &req,
+                             BaseMMU::Mode mode, ThreadContext *tc);
+    bool checkPAN(ThreadContext *tc, uint8_t ap, const RequestPtr &req,
+                  BaseMMU::Mode mode, const bool is_priv);
 
     /** Reset the entire TLB. Used for CPU switching to prevent stale
      * translations after multiple switches
@@ -222,8 +270,6 @@
     /** Reset the entire TLB
      */
     void flush(const TLBIALL &tlbi_op);
-    void flush(const ITLBIALL &tlbi_op);
-    void flush(const DTLBIALL &tlbi_op);
 
     /** Implementaton of AArch64 TLBI ALLE1(IS), ALLE2(IS), ALLE3(IS)
      * instructions
@@ -243,14 +289,10 @@
     /** Remove any entries that match both a va and asn
      */
     void flush(const TLBIMVA &tlbi_op);
-    void flush(const ITLBIMVA &tlbi_op);
-    void flush(const DTLBIMVA &tlbi_op);
 
     /** Remove any entries that match the asn
      */
     void flush(const TLBIASID &tlbi_op);
-    void flush(const ITLBIASID &tlbi_op);
-    void flush(const DTLBIASID &tlbi_op);
 
     /** Remove all entries that match the va regardless of asn
      */
@@ -272,27 +314,87 @@
         panic("demapPage() is not implemented.\n");
     }
 
+    /**
+     * Do a functional lookup on the TLB (for debugging)
+     * and don't modify any internal state
+     * @param tc thread context to get the context id from
+     * @param vaddr virtual address to translate
+     * @param pa returned physical address
+     * @return if the translation was successful
+     */
+    bool translateFunctional(ThreadContext *tc, Addr vaddr, Addr &paddr);
+
+    /**
+     * Do a functional lookup on the TLB (for checker cpu) that
+     * behaves like a normal lookup without modifying any page table state.
+     */
+    Fault translateFunctional(const RequestPtr &req, ThreadContext *tc,
+            BaseMMU::Mode mode, ArmTranslationType tranType);
     Fault
-    translateAtomic(const RequestPtr &req, ThreadContext *tc,
-                    BaseMMU::Mode mode) override
+    translateFunctional(const RequestPtr &req,
+                        ThreadContext *tc, BaseMMU::Mode mode) override
     {
-        panic("unimplemented");
+        return translateFunctional(req, tc, mode, NormalTran);
     }
 
+    /** Accessor functions for memory attributes for last accessed TLB entry
+     */
     void
-    translateTiming(const RequestPtr &req, ThreadContext *tc,
-                    BaseMMU::Translation *translation,
-                    BaseMMU::Mode mode) override
+    setAttr(uint64_t attr)
+    {
+        _attr = attr;
+    }
+
+    uint64_t
+    getAttr() const
     {
-        panic("unimplemented");
+        return _attr;
     }
 
+    Fault translateMmuOff(ThreadContext *tc, const RequestPtr &req,
+        BaseMMU::Mode mode, TLB::ArmTranslationType tranType,
+        Addr vaddr, bool long_desc_format);
+    Fault translateMmuOn(ThreadContext *tc, const RequestPtr &req,
+        BaseMMU::Mode mode, BaseMMU::Translation *translation, bool &delay,
+        bool timing, bool functional,
+        Addr vaddr, ArmFault::TranMethod tranMethod);
+
+    Fault translateFs(const RequestPtr &req, ThreadContext *tc,
+        BaseMMU::Mode mode, BaseMMU::Translation *translation,
+        bool &delay, bool timing, ArmTranslationType tranType,
+        bool functional = false);
+    Fault translateSe(const RequestPtr &req, ThreadContext *tc,
+        BaseMMU::Mode mode, BaseMMU::Translation *translation,
+        bool &delay, bool timing);
+
+    Fault translateAtomic(const RequestPtr &req, ThreadContext *tc,
+        BaseMMU::Mode mode, ArmTranslationType tranType);
+
     Fault
-    finalizePhysical(const RequestPtr &req, ThreadContext *tc,
-                     BaseMMU::Mode mode) const override
+    translateAtomic(const RequestPtr &req,
+                    ThreadContext *tc, BaseMMU::Mode mode) override
     {
-        panic("unimplemented");
+        return translateAtomic(req, tc, mode, NormalTran);
     }
+    void translateTiming(
+            const RequestPtr &req, ThreadContext *tc,
+            BaseMMU::Translation *translation, BaseMMU::Mode mode,
+            ArmTranslationType tranType);
+    void
+    translateTiming(const RequestPtr &req, ThreadContext *tc,
+                    BaseMMU::Translation *translation,
+                    BaseMMU::Mode mode) override
+    {
+        translateTiming(req, tc, translation, mode, NormalTran);
+    }
+    Fault translateComplete(const RequestPtr &req, ThreadContext *tc,
+        BaseMMU::Translation *translation, BaseMMU::Mode mode,
+        ArmTranslationType tranType, bool callFromS2);
+    Fault finalizePhysical(
+        const RequestPtr &req,
+        ThreadContext *tc, BaseMMU::Mode mode) const override;
+
+    void drainResume() override;
 
     void regProbePoints() override;
 
@@ -312,26 +414,63 @@
     // Writing to misc registers needs to invalidate them.
     // translateFunctional/translateSe/translateFs checks if they are
     // invalid and call updateMiscReg if necessary.
+protected:
+    CPSR cpsr;
+    bool aarch64;
+    ExceptionLevel aarch64EL;
+    SCTLR sctlr;
+    SCR scr;
+    bool isPriv;
+    bool isSecure;
+    bool isHyp;
+    TTBCR ttbcr;
+    uint16_t asid;
+    vmid_t vmid;
+    PRRR prrr;
+    NMRR nmrr;
+    HCR hcr;
+    uint32_t dacr;
+    bool miscRegValid;
+    ContextID miscRegContext;
+    ArmTranslationType curTranType;
+
+    // Cached copies of system-level properties
+    bool haveLPAE;
+    bool haveVirtualization;
+    bool haveLargeAsid64;
+    uint8_t physAddrRange;
+
+    AddrRange m5opRange;
+
+    void updateMiscReg(ThreadContext *tc,
+                       ArmTranslationType tranType = NormalTran);
+
+    /** Returns the current VMID
+     * (information stored in the VTTBR_EL2 register) */
+    vmid_t getVMID(ThreadContext *tc) const;
+
+public:
+    void invalidateMiscReg() { miscRegValid = false; }
 
-  private:
+private:
     /** Remove any entries that match both a va and asn
      * @param mva virtual address to flush
      * @param asn contextid/asn to flush on match
      * @param secure_lookup if the operation affects the secure world
      * @param ignore_asn if the flush should ignore the asn
      * @param in_host if hcr.e2h == 1 and hcr.tge == 1 for VHE.
-     * @param entry_type type of entry to flush (instruction/data/unified)
      */
     void _flushMva(Addr mva, uint64_t asn, bool secure_lookup,
                    bool ignore_asn, ExceptionLevel target_el,
-                   bool in_host, TypeTLB entry_type);
+                   bool in_host);
 
-    /** Check if the tlb entry passed as an argument needs to
-     * be "promoted" as a unified entry:
-     * this should happen if we are hitting an instruction TLB entry on a
-     * data access or a data TLB entry on an instruction access:
-     */
-    void checkPromotion(TlbEntry *entry, BaseMMU::Mode mode);
+  public: /* Testing */
+    Fault testTranslation(const RequestPtr &req, BaseMMU::Mode mode,
+        TlbEntry::DomainType domain);
+
+    Fault testWalk(Addr pa, Addr size, Addr va, bool is_secure,
+        BaseMMU::Mode mode, TlbEntry::DomainType domain,
+        LookupLevel lookup_level);
 };
 
 } // namespace ArmISA
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/tracers/tarmac_parser.cc gem5-SALAM/src/arch/arm/tracers/tarmac_parser.cc
--- gem5/src/arch/arm/tracers/tarmac_parser.cc	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/tracers/tarmac_parser.cc	2024-02-22 18:17:15.008943995 -0600
@@ -49,12 +49,8 @@
 #include "cpu/thread_context.hh"
 #include "mem/packet.hh"
 #include "mem/port_proxy.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
-#include "sim/core.hh"
 #include "sim/cur_tick.hh"
 #include "sim/faults.hh"
-#include "sim/full_system.hh"
 #include "sim/sim_exit.hh"
 
 namespace gem5
@@ -985,7 +981,7 @@
     std::ostream &outs = Trace::output();
 
     uint64_t written_data = 0;
-    unsigned mem_flags = 3 | ArmISA::MMU::AllowUnaligned;
+    unsigned mem_flags = 3 | ArmISA::TLB::AllowUnaligned;
 
     ISetState isetstate;
 
@@ -1314,8 +1310,7 @@
             return false;
         // the translating proxy will perform the virtual to physical
         // translation again
-        (FullSystem ? TranslatingPortProxy(thread) :
-         SETranslatingPortProxy(thread)).readBlob(addr, data, size);
+        thread->getVirtProxy().readBlob(addr, data, size);
     } else {
         return false;
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/tracers/tarmac_record.hh gem5-SALAM/src/arch/arm/tracers/tarmac_record.hh
--- gem5/src/arch/arm/tracers/tarmac_record.hh	2024-02-22 18:25:43.647604800 -0600
+++ gem5-SALAM/src/arch/arm/tracers/tarmac_record.hh	2024-02-22 18:17:15.008943995 -0600
@@ -162,7 +162,7 @@
         /** True if register entry is valid */
         bool regValid;
         /** Register class */
-        RegClassType regClass;
+        RegClass regClass;
         /** Register arch number */
         RegIndex regRel;
         /** Register name to be printed */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/utility.cc gem5-SALAM/src/arch/arm/utility.cc
--- gem5/src/arch/arm/utility.cc	2024-02-22 18:25:43.651604821 -0600
+++ gem5-SALAM/src/arch/arm/utility.cc	2024-02-22 18:17:15.012944016 -0600
@@ -45,7 +45,6 @@
 #include "arch/arm/page_size.hh"
 #include "arch/arm/regs/cc.hh"
 #include "arch/arm/regs/int.hh"
-#include "arch/arm/regs/vec.hh"
 #include "arch/arm/system.hh"
 #include "base/compiler.hh"
 #include "cpu/base.hh"
@@ -145,7 +144,7 @@
         // be part of the table even if MPIDR is not accessible in user
         // mode.
         warn_once("Trying to read MPIDR at EL0\n");
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case EL1:
         if (ArmSystem::haveEL(tc, EL2) && !is_secure)
             return tc->readMiscReg(MISCREG_VMPIDR_EL2);
@@ -288,7 +287,8 @@
 bool
 ELIs32(ThreadContext *tc, ExceptionLevel el)
 {
-    auto [known, aarch32] = ELUsingAArch32K(tc, el);
+    bool known, aarch32;
+    std::tie(known, aarch32) = ELUsingAArch32K(tc, el);
     panic_if(!known, "EL state is UNKNOWN");
     return aarch32;
 }
@@ -306,7 +306,7 @@
 std::pair<bool, bool>
 ELUsingAArch32K(ThreadContext *tc, ExceptionLevel el)
 {
-    bool secure = isSecureBelowEL3(tc);
+    bool secure  = isSecureBelowEL3(tc);
     return ELStateUsingAArch32K(tc, el, secure);
 }
 
@@ -367,18 +367,19 @@
             aarch32 = (cpsr.width == 1);
         } else {
             known = true;
-            aarch32 = (aarch32_below_el3 && el != EL3) ||
-                (aarch32_at_el1 && (el == EL0 || el == EL1) );
+            aarch32 = (aarch32_below_el3 && el != EL3)
+                      || (aarch32_at_el1 && (el == EL0 || el == EL1) );
         }
     }
 
     return std::make_pair(known, aarch32);
 }
 
-bool
-ELStateUsingAArch32(ThreadContext *tc, ExceptionLevel el, bool secure)
+bool ELStateUsingAArch32(ThreadContext *tc, ExceptionLevel el, bool secure)
 {
-    auto [known, aarch32] = ELStateUsingAArch32K(tc, el, secure);
+
+    bool known, aarch32;
+    std::tie(known, aarch32) = ELStateUsingAArch32K(tc, el, secure);
     panic_if(!known, "EL state is UNKNOWN");
     return aarch32;
 }
@@ -511,13 +512,13 @@
 mcrMrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc, uint32_t iss,
                   ExceptionClass *ec)
 {
-    bool isRead;
-    uint32_t crm;
+    bool        isRead;
+    uint32_t    crm;
     IntRegIndex rt;
-    uint32_t crn;
-    uint32_t opc1;
-    uint32_t opc2;
-    bool trapToHype = false;
+    uint32_t    crn;
+    uint32_t    opc1;
+    uint32_t    opc2;
+    bool        trapToHype = false;
 
     const CPSR cpsr = tc->readMiscReg(MISCREG_CPSR);
     const HCR hcr = tc->readMiscReg(MISCREG_HCR);
@@ -532,8 +533,8 @@
         trapToHype |= hdcr.tpm  && (crn == 9) && (crm >= 12);
         trapToHype |= hcr.tidcp && (
             ((crn ==  9) && ((crm <= 2) || ((crm >= 5) && (crm <= 8)))) ||
-            ((crn == 10) && ((crm <= 1) || (crm == 4) || (crm == 8))) ||
-            ((crn == 11) && ((crm <= 8) || (crm == 15))));
+            ((crn == 10) && ((crm <= 1) ||  (crm == 4) || (crm == 8)))  ||
+            ((crn == 11) && ((crm <= 8) ||  (crm == 15)))               );
 
         if (!trapToHype) {
             switch (unflattenMiscReg(miscReg)) {
@@ -668,13 +669,13 @@
 mcrMrc14TrapToHyp(const MiscRegIndex miscReg, HCR hcr, CPSR cpsr, SCR scr,
                   HDCR hdcr, HSTR hstr, HCPTR hcptr, uint32_t iss)
 {
-    bool isRead;
-    uint32_t crm;
+    bool        isRead;
+    uint32_t    crm;
     IntRegIndex rt;
-    uint32_t crn;
-    uint32_t opc1;
-    uint32_t opc2;
-    bool trapToHype = false;
+    uint32_t    crn;
+    uint32_t    opc1;
+    uint32_t    opc2;
+    bool        trapToHype = false;
 
     if (!inSecureState(scr, cpsr) && (cpsr.mode != MODE_HYP)) {
         mcrMrcIssExtract(iss, isRead, crm, rt, crn, opc1, opc2);
@@ -728,13 +729,13 @@
 mcrrMrrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc,
                     uint32_t iss, ExceptionClass *ec)
 {
-    uint32_t crm;
+    uint32_t    crm;
     IntRegIndex rt;
-    uint32_t crn;
-    uint32_t opc1;
-    uint32_t opc2;
-    bool isRead;
-    bool trapToHype = false;
+    uint32_t    crn;
+    uint32_t    opc1;
+    uint32_t    opc2;
+    bool        isRead;
+    bool        trapToHype = false;
 
     const CPSR cpsr = tc->readMiscReg(MISCREG_CPSR);
     const HCR hcr = tc->readMiscReg(MISCREG_HCR);
@@ -746,7 +747,7 @@
         // the moment because we only need one field, which overlaps with the
         // mcrmrc layout
         mcrMrcIssExtract(iss, isRead, crm, rt, crn, opc1, opc2);
-        trapToHype = ((uint32_t)hstr) & (1 << crm);
+        trapToHype = ((uint32_t) hstr) & (1 << crm);
 
         if (!trapToHype) {
             switch (unflattenMiscReg(miscReg)) {
@@ -772,9 +773,8 @@
                 // CNTFRQ may be trapped only on reads
                 // CNTPCT and CNTVCT are read-only
                 if (MISCREG_CNTFRQ <= miscReg && miscReg <= MISCREG_CNTVCT &&
-                    !isRead) {
+                    !isRead)
                     break;
-                }
                 trapToHype = isGenericTimerHypTrap(miscReg, tc, ec);
                 break;
               // No default action needed
@@ -991,8 +991,8 @@
 {
     const HCR hcr = tc->readMiscReg(MISCREG_HCR_EL2);
     bool trap_cond_0 = condGenericTimerPhysEL1SystemAccessTrapEL2(miscReg, tc);
-    bool trap_cond_1 = condGenericTimerCommonEL1SystemAccessTrapEL2(
-            miscReg, tc);
+    bool trap_cond_1 = condGenericTimerCommonEL1SystemAccessTrapEL2(miscReg,
+                                                                    tc);
     switch (miscReg) {
       case MISCREG_CNTPCT:
       case MISCREG_CNTPCT_EL0:
@@ -1136,34 +1136,35 @@
     isIntReg = !r;
     // Loosely based on ARM ARM issue C section B9.3.10
     if (r) {
-        switch (sysM) {
+        switch (sysM)
+        {
           case 0xE:
             regIdx = MISCREG_SPSR_FIQ;
-            mode = MODE_FIQ;
+            mode   = MODE_FIQ;
             break;
           case 0x10:
             regIdx = MISCREG_SPSR_IRQ;
-            mode = MODE_IRQ;
+            mode   = MODE_IRQ;
             break;
           case 0x12:
             regIdx = MISCREG_SPSR_SVC;
-            mode = MODE_SVC;
+            mode   = MODE_SVC;
             break;
           case 0x14:
             regIdx = MISCREG_SPSR_ABT;
-            mode = MODE_ABORT;
+            mode   = MODE_ABORT;
             break;
           case 0x16:
             regIdx = MISCREG_SPSR_UND;
-            mode = MODE_UNDEFINED;
+            mode   = MODE_UNDEFINED;
             break;
           case 0x1C:
             regIdx = MISCREG_SPSR_MON;
-            mode = MODE_MON;
+            mode   = MODE_MON;
             break;
           case 0x1E:
             regIdx = MISCREG_SPSR_HYP;
-            mode = MODE_HYP;
+            mode   = MODE_HYP;
             break;
           default:
             ok = false;
@@ -1188,18 +1189,18 @@
                     regIdx = intRegInMode(mode, 13); // R13 in HYP
                 } else {
                     isIntReg = false;
-                    regIdx = MISCREG_ELR_HYP;
+                    regIdx   = MISCREG_ELR_HYP;
                 }
             }
         } else { // Other Banked registers
             int sysM2 = bits(sysM, 2);
             int sysM1 = bits(sysM, 1);
 
-            mode  = (OperatingMode)(((sysM2 || sysM1) << 0) |
-                                    (1 << 1) |
-                                    ((sysM2 && !sysM1) << 2) |
-                                    ((sysM2 && sysM1) << 3) |
-                                    (1 << 4));
+            mode  = (OperatingMode) ( ((sysM2 ||  sysM1) << 0) |
+                                      (1                 << 1) |
+                                      ((sysM2 && !sysM1) << 2) |
+                                      ((sysM2 &&  sysM1) << 3) |
+                                      (1                 << 4) );
             regIdx = intRegInMode(mode, 14 - bits(sysM, 0));
             // Don't flatten the register here. This is going to go through
             // setIntReg() which will do the flattening
@@ -1209,16 +1210,17 @@
 
     // Check that the requested register is accessable from the current mode
     if (ok && checkSecurity && mode != cpsr.mode) {
-        switch (cpsr.mode) {
+        switch (cpsr.mode)
+        {
           case MODE_USER:
             ok = false;
             break;
           case MODE_FIQ:
-            ok &= mode != MODE_HYP;
+            ok &=  mode != MODE_HYP;
             ok &= (mode != MODE_MON) || !scr.ns;
             break;
           case MODE_HYP:
-            ok &= mode != MODE_MON;
+            ok &=  mode != MODE_MON;
             ok &= (mode != MODE_FIQ) || !nsacr.rfr;
             break;
           case MODE_IRQ:
@@ -1226,7 +1228,7 @@
           case MODE_ABORT:
           case MODE_UNDEFINED:
           case MODE_SYSTEM:
-            ok &= mode != MODE_HYP;
+            ok &=  mode != MODE_HYP;
             ok &= (mode != MODE_MON) || !scr.ns;
             ok &= (mode != MODE_FIQ) || !nsacr.rfr;
             break;
@@ -1238,11 +1240,11 @@
             break;
         }
     }
-    return ok;
+    return (ok);
 }
 
 bool
-isUnpriviledgeAccess(ThreadContext *tc)
+isUnpriviledgeAccess(ThreadContext * tc)
 {
     const HCR hcr = tc->readMiscReg(MISCREG_HCR_EL2);
     // NV Extension not implemented yet
@@ -1259,17 +1261,17 @@
 }
 
 bool
-SPAlignmentCheckEnabled(ThreadContext *tc)
+SPAlignmentCheckEnabled(ThreadContext* tc)
 {
     ExceptionLevel regime = s1TranslationRegime(tc, currEL(tc));
 
     switch (currEL(tc)) {
       case EL3:
-        return ((SCTLR)tc->readMiscReg(MISCREG_SCTLR_EL3)).sa;
+        return ((SCTLR) tc->readMiscReg(MISCREG_SCTLR_EL3)).sa;
       case EL2:
-        return ((SCTLR)tc->readMiscReg(MISCREG_SCTLR_EL2)).sa;
+        return ((SCTLR) tc->readMiscReg(MISCREG_SCTLR_EL2)).sa;
       case EL1:
-        return ((SCTLR)tc->readMiscReg(MISCREG_SCTLR_EL1)).sa;
+        return ((SCTLR) tc->readMiscReg(MISCREG_SCTLR_EL1)).sa;
       case EL0:
         {
           SCTLR sc = (regime == EL2) ? tc->readMiscReg(MISCREG_SCTLR_EL2):
@@ -1328,32 +1330,5 @@
     }
 }
 
-void
-syncVecRegsToElems(ThreadContext *tc)
-{
-    for (int ri = 0; ri < NumVecRegs; ri++) {
-        RegId reg_id(VecRegClass, ri);
-        const VecRegContainer &reg = tc->readVecReg(reg_id);
-        for (int ei = 0; ei < NumVecElemPerVecReg; ei++) {
-            RegId elem_id(VecElemClass, ri, ei);
-            tc->setVecElem(elem_id, reg.as<VecElem>()[ei]);
-        }
-    }
-}
-
-void
-syncVecElemsToRegs(ThreadContext *tc)
-{
-    for (int ri = 0; ri < NumVecRegs; ri++) {
-        VecRegContainer reg;
-        for (int ei = 0; ei < NumVecElemPerVecReg; ei++) {
-            RegId elem_id(VecElemClass, ri, ei);
-            reg.as<VecElem>()[ei] = tc->readVecElem(elem_id);
-        }
-        RegId reg_id(VecRegClass, ri);
-        tc->setVecReg(reg_id, reg);
-    }
-}
-
 } // namespace ArmISA
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/arm/utility.hh gem5-SALAM/src/arch/arm/utility.hh
--- gem5/src/arch/arm/utility.hh	2024-02-22 18:25:43.651604821 -0600
+++ gem5-SALAM/src/arch/arm/utility.hh	2024-02-22 18:17:15.012944016 -0600
@@ -57,8 +57,7 @@
 
 class ArmSystem;
 
-namespace ArmISA
-{
+namespace ArmISA {
 
 inline bool
 testPredicate(uint32_t nz, uint32_t c, uint32_t v, ConditionCode code)
@@ -66,25 +65,26 @@
     bool n = (nz & 0x2);
     bool z = (nz & 0x1);
 
-    switch (code) {
-      case COND_EQ: return  z;
-      case COND_NE: return !z;
-      case COND_CS: return  c;
-      case COND_CC: return !c;
-      case COND_MI: return  n;
-      case COND_PL: return !n;
-      case COND_VS: return  v;
-      case COND_VC: return !v;
-      case COND_HI: return  (c && !z);
-      case COND_LS: return !(c && !z);
-      case COND_GE: return !(n ^ v);
-      case COND_LT: return  (n ^ v);
-      case COND_GT: return !(n ^ v || z);
-      case COND_LE: return  (n ^ v || z);
-      case COND_AL: return true;
-      case COND_UC: return true;
-      default:
-        panic("Unhandled predicate condition: %d\n", code);
+    switch (code)
+    {
+        case COND_EQ: return  z;
+        case COND_NE: return !z;
+        case COND_CS: return  c;
+        case COND_CC: return !c;
+        case COND_MI: return  n;
+        case COND_PL: return !n;
+        case COND_VS: return  v;
+        case COND_VC: return !v;
+        case COND_HI: return  (c && !z);
+        case COND_LS: return !(c && !z);
+        case COND_GE: return !(n ^ v);
+        case COND_LT: return  (n ^ v);
+        case COND_GT: return !(n ^ v || z);
+        case COND_LE: return  (n ^ v || z);
+        case COND_AL: return true;
+        case COND_UC: return true;
+        default:
+            panic("Unhandled predicate condition: %d\n", code);
     }
 }
 
@@ -149,12 +149,14 @@
  * @retval aarch32 is TRUE if the specified Exception level is using AArch32;
  *                 FALSE otherwise.
  */
-std::pair<bool, bool> ELUsingAArch32K(ThreadContext *tc, ExceptionLevel el);
+std::pair<bool, bool>
+ELUsingAArch32K(ThreadContext *tc, ExceptionLevel el);
 
-std::pair<bool, bool> ELStateUsingAArch32K(ThreadContext *tc,
-        ExceptionLevel el, bool secure);
+std::pair<bool, bool>
+ELStateUsingAArch32K(ThreadContext *tc, ExceptionLevel el, bool secure);
 
-bool ELStateUsingAArch32(ThreadContext *tc, ExceptionLevel el, bool secure);
+bool
+ELStateUsingAArch32(ThreadContext *tc, ExceptionLevel el, bool secure);
 
 bool ELIs32(ThreadContext *tc, ExceptionLevel el);
 
@@ -201,7 +203,7 @@
     return (uint8_t)it;
 }
 
-ExceptionLevel s1TranslationRegime(ThreadContext *tc, ExceptionLevel el);
+ExceptionLevel s1TranslationRegime(ThreadContext* tc, ExceptionLevel el);
 
 /**
  * Removes the tag from tagged addresses if that mode is enabled.
@@ -215,7 +217,7 @@
 Addr purifyTaggedAddr(Addr addr, ThreadContext *tc, ExceptionLevel el,
                       bool isInstr);
 int computeAddrTop(ThreadContext *tc, bool selbit, bool isInstr,
-                   TCR tcr, ExceptionLevel el);
+               TCR tcr, ExceptionLevel el);
 
 static inline bool
 inSecureState(SCR scr, CPSR cpsr)
@@ -253,35 +255,35 @@
 mcrMrcIssBuild(bool isRead, uint32_t crm, IntRegIndex rt, uint32_t crn,
                uint32_t opc1, uint32_t opc2)
 {
-    return (isRead << 0) |
-           (crm << 1) |
-           (rt << 5) |
-           (crn << 10) |
-           (opc1 << 14) |
-           (opc2 << 17);
+    return (isRead <<  0) |
+           (crm    <<  1) |
+           (rt     <<  5) |
+           (crn    << 10) |
+           (opc1   << 14) |
+           (opc2   << 17);
 }
 
 static inline void
 mcrMrcIssExtract(uint32_t iss, bool &isRead, uint32_t &crm, IntRegIndex &rt,
                  uint32_t &crn, uint32_t &opc1, uint32_t &opc2)
 {
-    isRead = (iss >> 0) & 0x1;
-    crm = (iss >> 1) & 0xF;
-    rt = (IntRegIndex)((iss >> 5) & 0xF);
-    crn = (iss >> 10) & 0xF;
-    opc1 = (iss >> 14) & 0x7;
-    opc2 = (iss >> 17) & 0x7;
+    isRead = (iss >>  0) & 0x1;
+    crm    = (iss >>  1) & 0xF;
+    rt     = (IntRegIndex) ((iss >>  5) & 0xF);
+    crn    = (iss >> 10) & 0xF;
+    opc1   = (iss >> 14) & 0x7;
+    opc2   = (iss >> 17) & 0x7;
 }
 
 static inline uint32_t
 mcrrMrrcIssBuild(bool isRead, uint32_t crm, IntRegIndex rt, IntRegIndex rt2,
                  uint32_t opc1)
 {
-    return (isRead << 0) |
-           (crm << 1) |
-           (rt << 5) |
-           (rt2 << 10) |
-           (opc1 << 16);
+    return (isRead <<  0) |
+           (crm    <<  1) |
+           (rt     <<  5) |
+           (rt2    << 10) |
+           (opc1   << 16);
 }
 
 static inline uint32_t
@@ -297,69 +299,92 @@
         (op0 << 20);
 }
 
-Fault mcrMrc15Trap(const MiscRegIndex miscReg, ExtMachInst machInst,
-                   ThreadContext *tc, uint32_t imm);
-bool mcrMrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc,
-                       uint32_t iss, ExceptionClass *ec=nullptr);
-
-bool mcrMrc14TrapToHyp(const MiscRegIndex miscReg, HCR hcr, CPSR cpsr, SCR scr,
-                       HDCR hdcr, HSTR hstr, HCPTR hcptr, uint32_t iss);
-
-Fault mcrrMrrc15Trap(const MiscRegIndex miscReg, ExtMachInst machInst,
-                     ThreadContext *tc, uint32_t imm);
-bool mcrrMrrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc,
-                         uint32_t iss, ExceptionClass *ec=nullptr);
-
-Fault AArch64AArch32SystemAccessTrap(const MiscRegIndex miscReg,
-                                     ExtMachInst machInst, ThreadContext *tc,
-                                     uint32_t imm, ExceptionClass ec);
-bool isAArch64AArch32SystemAccessTrapEL1(const MiscRegIndex miscReg,
-                                         ThreadContext *tc);
-bool isAArch64AArch32SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                         ThreadContext *tc);
-bool isGenericTimerHypTrap(const MiscRegIndex miscReg, ThreadContext *tc,
-                           ExceptionClass *ec);
+Fault
+mcrMrc15Trap(const MiscRegIndex miscReg, ExtMachInst machInst,
+             ThreadContext *tc, uint32_t imm);
+bool
+mcrMrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc, uint32_t iss,
+                  ExceptionClass *ec = nullptr);
+
+bool
+mcrMrc14TrapToHyp(const MiscRegIndex miscReg, HCR hcr, CPSR cpsr, SCR scr,
+                  HDCR hdcr, HSTR hstr, HCPTR hcptr, uint32_t iss);
+
+Fault
+mcrrMrrc15Trap(const MiscRegIndex miscReg, ExtMachInst machInst,
+               ThreadContext *tc, uint32_t imm);
+bool
+mcrrMrrc15TrapToHyp(const MiscRegIndex miscReg, ThreadContext *tc,
+                    uint32_t iss, ExceptionClass *ec = nullptr);
+
+Fault
+AArch64AArch32SystemAccessTrap(const MiscRegIndex miscReg,
+                               ExtMachInst machInst, ThreadContext *tc,
+                               uint32_t imm, ExceptionClass ec);
+bool
+isAArch64AArch32SystemAccessTrapEL1(const MiscRegIndex miscReg,
+                                    ThreadContext *tc);
+bool
+isAArch64AArch32SystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                    ThreadContext *tc);
+bool
+isGenericTimerHypTrap(const MiscRegIndex miscReg, ThreadContext *tc,
+                      ExceptionClass *ec);
 bool condGenericTimerPhysHypTrap(const MiscRegIndex miscReg,
                                  ThreadContext *tc);
-bool isGenericTimerCommonEL0HypTrap(const MiscRegIndex miscReg,
-                                    ThreadContext *tc, ExceptionClass *ec);
-bool isGenericTimerPhysHypTrap(const MiscRegIndex miscReg, ThreadContext *tc,
+bool
+isGenericTimerCommonEL0HypTrap(const MiscRegIndex miscReg, ThreadContext *tc,
                                ExceptionClass *ec);
-bool condGenericTimerPhysHypTrap(const MiscRegIndex miscReg,
-                                 ThreadContext *tc);
-bool isGenericTimerSystemAccessTrapEL1(const MiscRegIndex miscReg,
-                                       ThreadContext *tc);
-bool condGenericTimerSystemAccessTrapEL1(const MiscRegIndex miscReg,
+bool
+isGenericTimerPhysHypTrap(const MiscRegIndex miscReg, ThreadContext *tc,
+                          ExceptionClass *ec);
+bool
+condGenericTimerPhysHypTrap(const MiscRegIndex miscReg, ThreadContext *tc);
+bool
+isGenericTimerSystemAccessTrapEL1(const MiscRegIndex miscReg,
+                                  ThreadContext *tc);
+bool
+condGenericTimerSystemAccessTrapEL1(const MiscRegIndex miscReg,
+                                    ThreadContext *tc);
+bool
+isGenericTimerSystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                  ThreadContext *tc);
+bool
+isGenericTimerCommonEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                           ThreadContext *tc);
+bool
+isGenericTimerPhysEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
                                          ThreadContext *tc);
-bool isGenericTimerSystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                       ThreadContext *tc);
-bool isGenericTimerCommonEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                                ThreadContext *tc);
-bool isGenericTimerPhysEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                              ThreadContext *tc);
-bool isGenericTimerPhysEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                              ThreadContext *tc);
-bool isGenericTimerVirtSystemAccessTrapEL2(const MiscRegIndex miscReg,
+bool
+isGenericTimerPhysEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                         ThreadContext *tc);
+bool
+isGenericTimerVirtSystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                      ThreadContext *tc);
+bool
+condGenericTimerCommonEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                             ThreadContext *tc);
+bool
+condGenericTimerCommonEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
+                                             ThreadContext *tc);
+bool
+condGenericTimerPhysEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
                                            ThreadContext *tc);
-bool condGenericTimerCommonEL0SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                                  ThreadContext *tc);
-bool condGenericTimerCommonEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                                  ThreadContext *tc);
-bool condGenericTimerPhysEL1SystemAccessTrapEL2(const MiscRegIndex miscReg,
-                                                ThreadContext *tc);
-bool isGenericTimerSystemAccessTrapEL3(const MiscRegIndex miscReg,
-                                       ThreadContext *tc);
+bool
+isGenericTimerSystemAccessTrapEL3(const MiscRegIndex miscReg,
+                                  ThreadContext *tc);
 
-bool SPAlignmentCheckEnabled(ThreadContext *tc);
+bool SPAlignmentCheckEnabled(ThreadContext* tc);
 
 Addr truncPage(Addr addr);
 Addr roundPage(Addr addr);
 
 // Decodes the register index to access based on the fields used in a MSR
 // or MRS instruction
-bool decodeMrsMsrBankedReg(uint8_t sysM, bool r, bool &isIntReg, int &regIdx,
-                           CPSR cpsr, SCR scr, NSACR nsacr,
-                           bool checkSecurity=true);
+bool
+decodeMrsMsrBankedReg(uint8_t sysM, bool r, bool &isIntReg, int &regIdx,
+                      CPSR cpsr, SCR scr, NSACR nsacr,
+                      bool checkSecurity = true);
 
 // This wrapper function is used to turn the register index into a source
 // parameter for the instruction. See Operands.isa
@@ -370,9 +395,8 @@
     bool isIntReg;
     bool validReg;
 
-    validReg = decodeMrsMsrBankedReg(
-            sysM, r, isIntReg, regIdx, 0, 0, 0, false);
-    return (validReg && isIntReg) ? regIdx : INTREG_ZERO;
+    validReg = decodeMrsMsrBankedReg(sysM, r, isIntReg, regIdx, 0, 0, 0, false);
+    return (validReg && isIntReg) ? regIdx : INTREG_DUMMY;
 }
 
 /**
@@ -385,16 +409,12 @@
  */
 uint8_t encodePhysAddrRange64(int pa_size);
 
-inline ByteOrder
-byteOrder(const ThreadContext *tc)
+inline ByteOrder byteOrder(const ThreadContext *tc)
 {
     return isBigEndian64(tc) ? ByteOrder::big : ByteOrder::little;
 };
 
-bool isUnpriviledgeAccess(ThreadContext *tc);
-
-void syncVecRegsToElems(ThreadContext *tc);
-void syncVecElemsToRegs(ThreadContext *tc);
+bool isUnpriviledgeAccess(ThreadContext * tc);
 
 } // namespace ArmISA
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/BaseTLB.py gem5-SALAM/src/arch/generic/BaseTLB.py
--- gem5/src/arch/generic/BaseTLB.py	2024-02-22 18:25:43.651604821 -0600
+++ gem5-SALAM/src/arch/generic/BaseTLB.py	2024-02-22 18:17:15.012944016 -0600
@@ -1,15 +1,3 @@
-# Copyright (c) 2021 Arm Limited
-# All rights reserved.
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
 # Copyright (c) 2008 The Hewlett-Packard Development Company
 # Copyright (c) 2018 Metempsy Technology Consulting
 # All rights reserved.
@@ -40,25 +28,6 @@
 from m5.params import *
 from m5.SimObject import SimObject
 
-class TypeTLB(ScopedEnum):
-    """
-    instruction: TLB contains instruction entries only
-    data: TLB contains data entries only
-    unified: TLB contains both instruction and data entries
-
-    The enum values have been selected in order to perform bitwise
-    operations on them. For example a unified TLB contains both
-    instruction and data entries so code trying to assess if the
-    TLB is storing (e.g.) data entries can do that with:
-
-    bool has_data = tlb->type() & TypeTLB::data;
-    """
-    map = {
-        'instruction' : 0x1,
-        'data' : 0x2,
-        'unified' : 0x3,
-    }
-
 class BaseTLB(SimObject):
     type = 'BaseTLB'
     abstract = True
@@ -72,7 +41,3 @@
     mem_side_port = RequestPort("Port closer to memory side")
     master   = DeprecatedParam(mem_side_port,
                     '`master` is now called `mem_side_port`')
-
-    entry_type = Param.TypeTLB("Instruction/Data/Unified TLB entries")
-
-    next_level = Param.BaseTLB(NULL, "next level")
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/isa.hh gem5-SALAM/src/arch/generic/isa.hh
--- gem5/src/arch/generic/isa.hh	2024-02-22 18:25:43.651604821 -0600
+++ gem5-SALAM/src/arch/generic/isa.hh	2024-02-22 18:17:15.012944016 -0600
@@ -54,7 +54,7 @@
 class BaseISA : public SimObject
 {
   public:
-    typedef std::vector<RegClass> RegClasses;
+    typedef std::vector<RegClassInfo> RegClasses;
 
   protected:
     using SimObject::SimObject;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/linux/threadinfo.hh gem5-SALAM/src/arch/generic/linux/threadinfo.hh
--- gem5/src/arch/generic/linux/threadinfo.hh	2024-02-22 18:25:43.651604821 -0600
+++ gem5-SALAM/src/arch/generic/linux/threadinfo.hh	2024-02-22 18:17:15.012944016 -0600
@@ -30,7 +30,6 @@
 #define __ARCH_GENERIC_LINUX_THREADINFO_HH__
 
 #include "cpu/thread_context.hh"
-#include "mem/translating_port_proxy.hh"
 #include "sim/system.hh"
 
 namespace gem5
@@ -61,7 +60,7 @@
             return false;
         }
 
-        data = TranslatingPortProxy(tc).read<T>(it->address, byteOrder);
+        data = tc->getVirtProxy().read<T>(it->address, byteOrder);
 
         return true;
     }
@@ -95,7 +94,7 @@
         if (!thread_info)
             thread_info = curThreadInfo();
 
-        return TranslatingPortProxy(tc).read<Addr>(thread_info + offset);
+        return tc->getVirtProxy().read<Addr>(thread_info + offset);
     }
 
     int32_t
@@ -105,7 +104,7 @@
         if (!get_data("task_struct_pid", offset))
             return -1;
 
-        return TranslatingPortProxy(tc).read<int32_t>(task_struct + offset);
+        return tc->getVirtProxy().read<int32_t>(task_struct + offset);
     }
 
     int32_t
@@ -121,7 +120,7 @@
         if (!get_data("task_struct_tgid", offset))
             return -1;
 
-        return TranslatingPortProxy(tc).read<int32_t>(task_struct + offset);
+        return tc->getVirtProxy().read<int32_t>(task_struct + offset);
     }
 
     int32_t
@@ -139,7 +138,7 @@
 
         // start_time is actually of type timespec, but if we just
         // grab the first long, we'll get the seconds out of it
-        return TranslatingPortProxy(tc).read<int64_t>(task_struct + offset);
+        return tc->getVirtProxy().read<int64_t>(task_struct + offset);
     }
 
     int64_t
@@ -161,8 +160,7 @@
             return "FailureIn_curTaskName";
 
         char buffer[size + 1];
-        TranslatingPortProxy(tc).readString(
-                buffer, task_struct + offset, size);
+        tc->getVirtProxy().readString(buffer, task_struct + offset, size);
 
         return buffer;
     }
@@ -180,7 +178,7 @@
         if (!get_data("task_struct_mm", offset))
             return -1;
 
-        return TranslatingPortProxy(tc).read<int32_t>(task_struct + offset);
+        return tc->getVirtProxy().read<int32_t>(task_struct + offset);
     }
 
     int32_t
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/mmu.cc gem5-SALAM/src/arch/generic/mmu.cc
--- gem5/src/arch/generic/mmu.cc	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/generic/mmu.cc	2024-02-22 18:17:15.012944016 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2012,2016-2017, 2019-2021 Arm Limited
+ * Copyright (c) 2011-2012,2016-2017, 2019-2020 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -48,47 +48,10 @@
 {
 
 void
-BaseMMU::init()
-{
-    auto traverse_hierarchy = [this](BaseTLB *starter) {
-        for (BaseTLB *tlb = starter; tlb; tlb = tlb->nextLevel()) {
-            switch (tlb->type()) {
-              case TypeTLB::instruction:
-                if (instruction.find(tlb) == instruction.end())
-                    instruction.insert(tlb);
-                break;
-              case TypeTLB::data:
-                if (data.find(tlb) == data.end())
-                    data.insert(tlb);
-                break;
-              case TypeTLB::unified:
-                if (unified.find(tlb) == unified.end())
-                    unified.insert(tlb);
-                break;
-              default:
-                panic("Invalid TLB type\n");
-            }
-        }
-    };
-
-    traverse_hierarchy(itb);
-    traverse_hierarchy(dtb);
-}
-
-void
 BaseMMU::flushAll()
 {
-    for (auto tlb : instruction) {
-        tlb->flushAll();
-    }
-
-    for (auto tlb : data) {
-        tlb->flushAll();
-    }
-
-    for (auto tlb : unified) {
-        tlb->flushAll();
-    }
+    dtb->flushAll();
+    itb->flushAll();
 }
 
 void
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/mmu.hh gem5-SALAM/src/arch/generic/mmu.hh
--- gem5/src/arch/generic/mmu.hh	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/generic/mmu.hh	2024-02-22 18:17:15.012944016 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020-2021 Arm Limited
+ * Copyright (c) 2020 ARM Limited
  * All rights reserved.
  *
  * The license below extends only to copyright in the software and shall
@@ -38,8 +38,6 @@
 #ifndef __ARCH_GENERIC_MMU_HH__
 #define __ARCH_GENERIC_MMU_HH__
 
-#include <set>
-
 #include "params/BaseMMU.hh"
 #include "mem/request.hh"
 #include "sim/sim_object.hh"
@@ -100,62 +98,27 @@
     }
 
   public:
-    /**
-     * Called at init time, this method is traversing the TLB hierarchy
-     * and pupulating the instruction/data/unified containers accordingly
-     */
-    void init() override;
-
     virtual void flushAll();
 
     void demapPage(Addr vaddr, uint64_t asn);
 
-    virtual Fault
-    translateAtomic(const RequestPtr &req, ThreadContext *tc,
-                    Mode mode);
-
-    virtual void
-    translateTiming(const RequestPtr &req, ThreadContext *tc,
-                    Translation *translation, Mode mode);
-
-    virtual Fault
-    translateFunctional(const RequestPtr &req, ThreadContext *tc,
-                        Mode mode);
-
-    virtual Fault
-    finalizePhysical(const RequestPtr &req, ThreadContext *tc,
-                     Mode mode) const;
+    Fault translateAtomic(const RequestPtr &req, ThreadContext *tc,
+                          Mode mode);
+
+    void translateTiming(const RequestPtr &req, ThreadContext *tc,
+                         Translation *translation, Mode mode);
+
+    Fault translateFunctional(const RequestPtr &req, ThreadContext *tc,
+                              Mode mode);
+
+    Fault finalizePhysical(const RequestPtr &req, ThreadContext *tc,
+                           Mode mode) const;
 
     virtual void takeOverFrom(BaseMMU *old_mmu);
 
   public:
     BaseTLB* dtb;
     BaseTLB* itb;
-
-  protected:
-    /**
-     * It is possible from the MMU to traverse the entire hierarchy of
-     * TLBs, starting from the DTB and ITB (generally speaking from the
-     * first level) up to the last level via the nextLevel pointer. So
-     * in theory no extra data should be stored in the BaseMMU.
-     *
-     * This design makes some operations a bit more complex. For example
-     * if we have a unified (I+D) L2, it will be pointed by both ITB and
-     * DTB. If we want to invalidate all TLB entries, we should be
-     * careful to not invalidate L2 twice, but if we simply follow the
-     * next level pointer, we might do so. This is not a problem from
-     * a functional perspective but alters the TLB statistics (a single
-     * invalidation is recorded twice)
-     *
-     * We then provide a different view of the set of TLBs in the system.
-     * At the init phase we traverse the TLB hierarchy and we add every
-     * TLB to the appropriate set. This makes invalidation (and any
-     * operation targeting a specific kind of TLBs) easier.
-     */
-    std::set<BaseTLB*> instruction;
-    std::set<BaseTLB*> data;
-    std::set<BaseTLB*> unified;
-
 };
 
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/pcstate.hh gem5-SALAM/src/arch/generic/pcstate.hh
--- gem5/src/arch/generic/pcstate.hh	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/generic/pcstate.hh	1969-12-31 18:00:00.000000000 -0600
@@ -1,466 +0,0 @@
-/*
- * Copyright (c) 2020 ARM Limited
- * All rights reserved
- *
- * The license below extends only to copyright in the software and shall
- * not be construed as granting a license to any other intellectual
- * property including but not limited to intellectual property relating
- * to a hardware implementation of the functionality of the software
- * licensed hereunder.  You may use the software subject to the license
- * terms below provided that you ensure that this notice is replicated
- * unmodified and in its entirety in all distributions of the software,
- * modified or unmodified, in source code or in binary form.
- *
- * Copyright (c) 2010 Gabe Black
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met: redistributions of source code must retain the above copyright
- * notice, this list of conditions and the following disclaimer;
- * redistributions in binary form must reproduce the above copyright
- * notice, this list of conditions and the following disclaimer in the
- * documentation and/or other materials provided with the distribution;
- * neither the name of the copyright holders nor the names of its
- * contributors may be used to endorse or promote products derived from
- * this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef __ARCH_GENERIC_TYPES_HH__
-#define __ARCH_GENERIC_TYPES_HH__
-
-#include <iostream>
-
-#include "base/trace.hh"
-#include "base/types.hh"
-#include "sim/serialize.hh"
-
-namespace gem5
-{
-
-namespace GenericISA
-{
-
-// The guaranteed interface.
-class PCStateBase : public Serializable
-{
-  protected:
-    Addr _pc = 0;
-    Addr _npc = 0;
-
-    MicroPC _upc = 0;
-    MicroPC _nupc = 1;
-
-    PCStateBase() {}
-    PCStateBase(Addr val) { set(val); }
-
-  public:
-    /**
-     * Returns the memory address the bytes of this instruction came from.
-     *
-     * @return Memory address of the current instruction's encoding.
-     */
-    Addr
-    instAddr() const
-    {
-        return _pc;
-    }
-
-    /**
-     * Returns the memory address the bytes of the next instruction came from.
-     *
-     * @return Memory address of the next instruction's encoding.
-     */
-    Addr
-    nextInstAddr() const
-    {
-        return _npc;
-    }
-
-    /**
-     * Returns the current micropc.
-     *
-     * @return The current micropc.
-     */
-    MicroPC
-    microPC() const
-    {
-        return _upc;
-    }
-
-    // Reset the macroop's upc without advancing the regular pc.
-    void
-    uReset()
-    {
-        _upc = 0;
-        _nupc = 1;
-    }
-
-    /**
-     * Force this PC to reflect a particular value, resetting all its other
-     * fields around it. This is useful for in place (re)initialization.
-     *
-     * @param val The value to set the PC to.
-     */
-    void set(Addr val);
-
-    bool
-    operator == (const PCStateBase &opc) const
-    {
-        return _pc == opc._pc && _npc == opc._npc;
-    }
-
-    bool
-    operator != (const PCStateBase &opc) const
-    {
-        return !(*this == opc);
-    }
-
-    void
-    serialize(CheckpointOut &cp) const override
-    {
-        SERIALIZE_SCALAR(_pc);
-        SERIALIZE_SCALAR(_npc);
-        SERIALIZE_SCALAR(_upc);
-        SERIALIZE_SCALAR(_nupc);
-    }
-
-    void
-    unserialize(CheckpointIn &cp) override
-    {
-        UNSERIALIZE_SCALAR(_pc);
-        UNSERIALIZE_SCALAR(_npc);
-        UNSERIALIZE_SCALAR(_upc);
-        UNSERIALIZE_SCALAR(_nupc);
-    }
-};
-
-
-/*
- * Different flavors of PC state. Only ISA specific code should rely on
- * any particular type of PC state being available. All other code should
- * use the interface above.
- */
-
-// The most basic type of PC.
-template <int InstWidth>
-class SimplePCState : public PCStateBase
-{
-  protected:
-    typedef PCStateBase Base;
-
-  public:
-
-    Addr pc() const { return _pc; }
-    void pc(Addr val) { _pc = val; }
-
-    Addr npc() const { return _npc; }
-    void npc(Addr val) { _npc = val; }
-
-    void
-    set(Addr val)
-    {
-        pc(val);
-        npc(val + InstWidth);
-    };
-
-    void
-    setNPC(Addr val)
-    {
-        npc(val);
-    }
-
-    SimplePCState() {}
-    SimplePCState(Addr val) { set(val); }
-
-    bool
-    branching() const
-    {
-        return this->npc() != this->pc() + InstWidth;
-    }
-
-    // Advance the PC.
-    void
-    advance()
-    {
-        _pc = _npc;
-        _npc += InstWidth;
-    }
-};
-
-template <int InstWidth>
-std::ostream &
-operator<<(std::ostream & os, const SimplePCState<InstWidth> &pc)
-{
-    ccprintf(os, "(%#x=>%#x)", pc.pc(), pc.npc());
-    return os;
-}
-
-// A PC and microcode PC.
-template <int InstWidth>
-class UPCState : public SimplePCState<InstWidth>
-{
-  protected:
-    typedef SimplePCState<InstWidth> Base;
-
-  public:
-
-    MicroPC upc() const { return this->_upc; }
-    void upc(MicroPC val) { this->_upc = val; }
-
-    MicroPC nupc() const { return this->_nupc; }
-    void nupc(MicroPC val) { this->_nupc = val; }
-
-    void
-    set(Addr val)
-    {
-        Base::set(val);
-        upc(0);
-        nupc(1);
-    }
-
-    UPCState() {}
-    UPCState(Addr val) { set(val); }
-
-    bool
-    branching() const
-    {
-        return this->npc() != this->pc() + InstWidth ||
-               this->nupc() != this->upc() + 1;
-    }
-
-    // Advance the upc within the instruction.
-    void
-    uAdvance()
-    {
-        upc(nupc());
-        nupc(nupc() + 1);
-    }
-
-    // End the macroop by resetting the upc and advancing the regular pc.
-    void
-    uEnd()
-    {
-        this->advance();
-        upc(0);
-        nupc(1);
-    }
-
-    bool
-    operator == (const UPCState<InstWidth> &opc) const
-    {
-        return this->pc() == opc.pc() && this->npc() == opc.npc() &&
-               this->upc() == opc.upc() && this->nupc() == opc.nupc();
-    }
-
-    bool
-    operator != (const UPCState<InstWidth> &opc) const
-    {
-        return !(*this == opc);
-    }
-};
-
-template <int InstWidth>
-std::ostream &
-operator<<(std::ostream & os, const UPCState<InstWidth> &pc)
-{
-    ccprintf(os, "(%#x=>%#x).(%d=>%d)",
-            pc.pc(), pc.npc(), pc.upc(), pc.nupc());
-    return os;
-}
-
-// A PC with a delay slot.
-template <int InstWidth>
-class DelaySlotPCState : public SimplePCState<InstWidth>
-{
-  protected:
-    typedef SimplePCState<InstWidth> Base;
-
-    Addr _nnpc;
-
-  public:
-
-    Addr nnpc() const { return _nnpc; }
-    void nnpc(Addr val) { _nnpc = val; }
-
-    void
-    set(Addr val)
-    {
-        Base::set(val);
-        nnpc(val + 2 * InstWidth);
-    }
-
-    DelaySlotPCState() {}
-    DelaySlotPCState(Addr val) { set(val); }
-
-    bool
-    branching() const
-    {
-        return !(this->nnpc() == this->npc() + InstWidth &&
-                 (this->npc() == this->pc() + InstWidth ||
-                  this->npc() == this->pc() + 2 * InstWidth));
-    }
-
-    // Advance the PC.
-    void
-    advance()
-    {
-        Base::_pc = Base::_npc;
-        Base::_npc = _nnpc;
-        _nnpc += InstWidth;
-    }
-
-    bool
-    operator == (const DelaySlotPCState<InstWidth> &opc) const
-    {
-        return Base::_pc == opc._pc &&
-               Base::_npc == opc._npc &&
-               _nnpc == opc._nnpc;
-    }
-
-    bool
-    operator != (const DelaySlotPCState<InstWidth> &opc) const
-    {
-        return !(*this == opc);
-    }
-
-    void
-    serialize(CheckpointOut &cp) const override
-    {
-        Base::serialize(cp);
-        SERIALIZE_SCALAR(_nnpc);
-    }
-
-    void
-    unserialize(CheckpointIn &cp) override
-    {
-        Base::unserialize(cp);
-        UNSERIALIZE_SCALAR(_nnpc);
-    }
-};
-
-template <int InstWidth>
-std::ostream &
-operator<<(std::ostream & os, const DelaySlotPCState<InstWidth> &pc)
-{
-    ccprintf(os, "(%#x=>%#x=>%#x)",
-            pc.pc(), pc.npc(), pc.nnpc());
-    return os;
-}
-
-// A PC with a delay slot and a microcode PC.
-template <int InstWidth>
-class DelaySlotUPCState : public DelaySlotPCState<InstWidth>
-{
-  protected:
-    typedef DelaySlotPCState<InstWidth> Base;
-
-    MicroPC _upc;
-    MicroPC _nupc;
-
-  public:
-
-    MicroPC upc() const { return _upc; }
-    void upc(MicroPC val) { _upc = val; }
-
-    MicroPC nupc() const { return _nupc; }
-    void nupc(MicroPC val) { _nupc = val; }
-
-    MicroPC
-    microPC() const
-    {
-        return _upc;
-    }
-
-    void
-    set(Addr val)
-    {
-        Base::set(val);
-        upc(0);
-        nupc(1);
-    }
-
-    DelaySlotUPCState() {}
-    DelaySlotUPCState(Addr val) { set(val); }
-
-    bool
-    branching() const
-    {
-        return Base::branching() || this->nupc() != this->upc() + 1;
-    }
-
-    // Advance the upc within the instruction.
-    void
-    uAdvance()
-    {
-        _upc = _nupc;
-        _nupc++;
-    }
-
-    // End the macroop by resetting the upc and advancing the regular pc.
-    void
-    uEnd()
-    {
-        this->advance();
-        _upc = 0;
-        _nupc = 1;
-    }
-
-    bool
-    operator == (const DelaySlotUPCState<InstWidth> &opc) const
-    {
-        return Base::_pc == opc._pc &&
-               Base::_npc == opc._npc &&
-               Base::_nnpc == opc._nnpc &&
-               _upc == opc._upc && _nupc == opc._nupc;
-    }
-
-    bool
-    operator != (const DelaySlotUPCState<InstWidth> &opc) const
-    {
-        return !(*this == opc);
-    }
-
-    void
-    serialize(CheckpointOut &cp) const override
-    {
-        Base::serialize(cp);
-        SERIALIZE_SCALAR(_upc);
-        SERIALIZE_SCALAR(_nupc);
-    }
-
-    void
-    unserialize(CheckpointIn &cp) override
-    {
-        Base::unserialize(cp);
-        UNSERIALIZE_SCALAR(_upc);
-        UNSERIALIZE_SCALAR(_nupc);
-    }
-};
-
-template <int InstWidth>
-std::ostream &
-operator<<(std::ostream & os, const DelaySlotUPCState<InstWidth> &pc)
-{
-    ccprintf(os, "(%#x=>%#x=>%#x).(%d=>%d)",
-            pc.pc(), pc.npc(), pc.nnpc(), pc.upc(), pc.nupc());
-    return os;
-}
-
-}
-
-} // namespace gem5
-
-#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/tlb.hh gem5-SALAM/src/arch/generic/tlb.hh
--- gem5/src/arch/generic/tlb.hh	2024-02-22 18:16:36.472742528 -0600
+++ gem5-SALAM/src/arch/generic/tlb.hh	2024-02-22 18:17:15.012944016 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011, 2021 Arm Limited
+ * Copyright (c) 2011 ARM Limited
  * All rights reserved.
  *
  * The license below extends only to copyright in the software and shall
@@ -41,13 +41,9 @@
 #ifndef __ARCH_GENERIC_TLB_HH__
 #define __ARCH_GENERIC_TLB_HH__
 
-#include <type_traits>
-
 #include "arch/generic/mmu.hh"
 #include "base/logging.hh"
-#include "enums/TypeTLB.hh"
 #include "mem/request.hh"
-#include "params/BaseTLB.hh"
 #include "sim/sim_object.hh"
 
 namespace gem5
@@ -58,13 +54,7 @@
 class BaseTLB : public SimObject
 {
   protected:
-    BaseTLB(const BaseTLBParams &p)
-      : SimObject(p), _type(p.entry_type), _nextLevel(p.next_level)
-    {}
-
-    TypeTLB _type;
-
-    BaseTLB *_nextLevel;
+    BaseTLB(const Params &p) : SimObject(p) {}
 
   public:
     virtual void demapPage(Addr vaddr, uint64_t asn) = 0;
@@ -121,27 +111,8 @@
     virtual Port* getTableWalkerPort() { return NULL; }
 
     void memInvalidate() { flushAll(); }
-
-    TypeTLB type() const { return _type; }
-
-    BaseTLB* nextLevel() const { return _nextLevel; }
 };
 
-/** Implementing the "&" bitwise operator for TypeTLB allows us to handle
- * TypeTLB::unified efficiently. For example if I want to check if a TLB
- * is storing instruction entries I can do this with:
- *
- * tlb->type() & TypeTLB::instruction
- *
- * which will cover both TypeTLB::instruction and TypeTLB::unified TLBs
- */
-inline auto
-operator&(TypeTLB lhs, TypeTLB rhs)
-{
-    using T = std::underlying_type_t<TypeTLB>;
-    return static_cast<T>(lhs) & static_cast<T>(rhs);
-}
-
 } // namespace gem5
 
 #endif // __ARCH_GENERIC_TLB_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/generic/types.hh gem5-SALAM/src/arch/generic/types.hh
--- gem5/src/arch/generic/types.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/arch/generic/types.hh	2024-02-22 18:17:15.012944016 -0600
@@ -0,0 +1,485 @@
+/*
+ * Copyright (c) 2020 ARM Limited
+ * All rights reserved
+ *
+ * The license below extends only to copyright in the software and shall
+ * not be construed as granting a license to any other intellectual
+ * property including but not limited to intellectual property relating
+ * to a hardware implementation of the functionality of the software
+ * licensed hereunder.  You may use the software subject to the license
+ * terms below provided that you ensure that this notice is replicated
+ * unmodified and in its entirety in all distributions of the software,
+ * modified or unmodified, in source code or in binary form.
+ *
+ * Copyright (c) 2010 Gabe Black
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __ARCH_GENERIC_TYPES_HH__
+#define __ARCH_GENERIC_TYPES_HH__
+
+#include <iostream>
+
+#include "base/trace.hh"
+#include "base/types.hh"
+#include "sim/serialize.hh"
+
+namespace gem5
+{
+
+namespace GenericISA
+{
+
+// The guaranteed interface.
+class PCStateBase : public Serializable
+{
+  protected:
+    Addr _pc;
+    Addr _npc;
+
+    PCStateBase() : _pc(0), _npc(0) {}
+    PCStateBase(Addr val) : _pc(0), _npc(0) { set(val); }
+
+  public:
+    /**
+     * Returns the memory address the bytes of this instruction came from.
+     *
+     * @return Memory address of the current instruction's encoding.
+     */
+    Addr
+    instAddr() const
+    {
+        return _pc;
+    }
+
+    /**
+     * Returns the memory address the bytes of the next instruction came from.
+     *
+     * @return Memory address of the next instruction's encoding.
+     */
+    Addr
+    nextInstAddr() const
+    {
+        return _npc;
+    }
+
+    /**
+     * Returns the current micropc.
+     *
+     * @return The current micropc.
+     */
+    MicroPC
+    microPC() const
+    {
+        return 0;
+    }
+
+    /**
+     * Force this PC to reflect a particular value, resetting all its other
+     * fields around it. This is useful for in place (re)initialization.
+     *
+     * @param val The value to set the PC to.
+     */
+    void set(Addr val);
+
+    bool
+    operator == (const PCStateBase &opc) const
+    {
+        return _pc == opc._pc && _npc == opc._npc;
+    }
+
+    bool
+    operator != (const PCStateBase &opc) const
+    {
+        return !(*this == opc);
+    }
+
+    void
+    serialize(CheckpointOut &cp) const override
+    {
+        SERIALIZE_SCALAR(_pc);
+        SERIALIZE_SCALAR(_npc);
+    }
+
+    void
+    unserialize(CheckpointIn &cp) override
+    {
+        UNSERIALIZE_SCALAR(_pc);
+        UNSERIALIZE_SCALAR(_npc);
+    }
+};
+
+
+/*
+ * Different flavors of PC state. Only ISA specific code should rely on
+ * any particular type of PC state being available. All other code should
+ * use the interface above.
+ */
+
+// The most basic type of PC.
+template <int InstWidth>
+class SimplePCState : public PCStateBase
+{
+  protected:
+    typedef PCStateBase Base;
+
+  public:
+
+    Addr pc() const { return _pc; }
+    void pc(Addr val) { _pc = val; }
+
+    Addr npc() const { return _npc; }
+    void npc(Addr val) { _npc = val; }
+
+    void
+    set(Addr val)
+    {
+        pc(val);
+        npc(val + InstWidth);
+    };
+
+    void
+    setNPC(Addr val)
+    {
+        npc(val);
+    }
+
+    SimplePCState() {}
+    SimplePCState(Addr val) { set(val); }
+
+    bool
+    branching() const
+    {
+        return this->npc() != this->pc() + InstWidth;
+    }
+
+    // Advance the PC.
+    void
+    advance()
+    {
+        _pc = _npc;
+        _npc += InstWidth;
+    }
+};
+
+template <int InstWidth>
+std::ostream &
+operator<<(std::ostream & os, const SimplePCState<InstWidth> &pc)
+{
+    ccprintf(os, "(%#x=>%#x)", pc.pc(), pc.npc());
+    return os;
+}
+
+// A PC and microcode PC.
+template <int InstWidth>
+class UPCState : public SimplePCState<InstWidth>
+{
+  protected:
+    typedef SimplePCState<InstWidth> Base;
+
+    MicroPC _upc;
+    MicroPC _nupc;
+
+  public:
+
+    MicroPC upc() const { return _upc; }
+    void upc(MicroPC val) { _upc = val; }
+
+    MicroPC nupc() const { return _nupc; }
+    void nupc(MicroPC val) { _nupc = val; }
+
+    MicroPC
+    microPC() const
+    {
+        return _upc;
+    }
+
+    void
+    set(Addr val)
+    {
+        Base::set(val);
+        upc(0);
+        nupc(1);
+    }
+
+    UPCState() : _upc(0), _nupc(1) {}
+    UPCState(Addr val) : _upc(0), _nupc(0) { set(val); }
+
+    bool
+    branching() const
+    {
+        return this->npc() != this->pc() + InstWidth ||
+               this->nupc() != this->upc() + 1;
+    }
+
+    // Advance the upc within the instruction.
+    void
+    uAdvance()
+    {
+        _upc = _nupc;
+        _nupc++;
+    }
+
+    // End the macroop by resetting the upc and advancing the regular pc.
+    void
+    uEnd()
+    {
+        this->advance();
+        _upc = 0;
+        _nupc = 1;
+    }
+
+    // Reset the macroop's upc without advancing the regular pc.
+    void
+    uReset()
+    {
+        _upc = 0;
+        _nupc = 1;
+    }
+
+    bool
+    operator == (const UPCState<InstWidth> &opc) const
+    {
+        return Base::_pc == opc._pc &&
+               Base::_npc == opc._npc &&
+               _upc == opc._upc && _nupc == opc._nupc;
+    }
+
+    bool
+    operator != (const UPCState<InstWidth> &opc) const
+    {
+        return !(*this == opc);
+    }
+
+    void
+    serialize(CheckpointOut &cp) const override
+    {
+        Base::serialize(cp);
+        SERIALIZE_SCALAR(_upc);
+        SERIALIZE_SCALAR(_nupc);
+    }
+
+    void
+    unserialize(CheckpointIn &cp) override
+    {
+        Base::unserialize(cp);
+        UNSERIALIZE_SCALAR(_upc);
+        UNSERIALIZE_SCALAR(_nupc);
+    }
+};
+
+template <int InstWidth>
+std::ostream &
+operator<<(std::ostream & os, const UPCState<InstWidth> &pc)
+{
+    ccprintf(os, "(%#x=>%#x).(%d=>%d)",
+            pc.pc(), pc.npc(), pc.upc(), pc.nupc());
+    return os;
+}
+
+// A PC with a delay slot.
+template <int InstWidth>
+class DelaySlotPCState : public SimplePCState<InstWidth>
+{
+  protected:
+    typedef SimplePCState<InstWidth> Base;
+
+    Addr _nnpc;
+
+  public:
+
+    Addr nnpc() const { return _nnpc; }
+    void nnpc(Addr val) { _nnpc = val; }
+
+    void
+    set(Addr val)
+    {
+        Base::set(val);
+        nnpc(val + 2 * InstWidth);
+    }
+
+    DelaySlotPCState() {}
+    DelaySlotPCState(Addr val) { set(val); }
+
+    bool
+    branching() const
+    {
+        return !(this->nnpc() == this->npc() + InstWidth &&
+                 (this->npc() == this->pc() + InstWidth ||
+                  this->npc() == this->pc() + 2 * InstWidth));
+    }
+
+    // Advance the PC.
+    void
+    advance()
+    {
+        Base::_pc = Base::_npc;
+        Base::_npc = _nnpc;
+        _nnpc += InstWidth;
+    }
+
+    bool
+    operator == (const DelaySlotPCState<InstWidth> &opc) const
+    {
+        return Base::_pc == opc._pc &&
+               Base::_npc == opc._npc &&
+               _nnpc == opc._nnpc;
+    }
+
+    bool
+    operator != (const DelaySlotPCState<InstWidth> &opc) const
+    {
+        return !(*this == opc);
+    }
+
+    void
+    serialize(CheckpointOut &cp) const override
+    {
+        Base::serialize(cp);
+        SERIALIZE_SCALAR(_nnpc);
+    }
+
+    void
+    unserialize(CheckpointIn &cp) override
+    {
+        Base::unserialize(cp);
+        UNSERIALIZE_SCALAR(_nnpc);
+    }
+};
+
+template <int InstWidth>
+std::ostream &
+operator<<(std::ostream & os, const DelaySlotPCState<InstWidth> &pc)
+{
+    ccprintf(os, "(%#x=>%#x=>%#x)",
+            pc.pc(), pc.npc(), pc.nnpc());
+    return os;
+}
+
+// A PC with a delay slot and a microcode PC.
+template <int InstWidth>
+class DelaySlotUPCState : public DelaySlotPCState<InstWidth>
+{
+  protected:
+    typedef DelaySlotPCState<InstWidth> Base;
+
+    MicroPC _upc;
+    MicroPC _nupc;
+
+  public:
+
+    MicroPC upc() const { return _upc; }
+    void upc(MicroPC val) { _upc = val; }
+
+    MicroPC nupc() const { return _nupc; }
+    void nupc(MicroPC val) { _nupc = val; }
+
+    MicroPC
+    microPC() const
+    {
+        return _upc;
+    }
+
+    void
+    set(Addr val)
+    {
+        Base::set(val);
+        upc(0);
+        nupc(1);
+    }
+
+    DelaySlotUPCState() {}
+    DelaySlotUPCState(Addr val) { set(val); }
+
+    bool
+    branching() const
+    {
+        return Base::branching() || this->nupc() != this->upc() + 1;
+    }
+
+    // Advance the upc within the instruction.
+    void
+    uAdvance()
+    {
+        _upc = _nupc;
+        _nupc++;
+    }
+
+    // End the macroop by resetting the upc and advancing the regular pc.
+    void
+    uEnd()
+    {
+        this->advance();
+        _upc = 0;
+        _nupc = 1;
+    }
+
+    bool
+    operator == (const DelaySlotUPCState<InstWidth> &opc) const
+    {
+        return Base::_pc == opc._pc &&
+               Base::_npc == opc._npc &&
+               Base::_nnpc == opc._nnpc &&
+               _upc == opc._upc && _nupc == opc._nupc;
+    }
+
+    bool
+    operator != (const DelaySlotUPCState<InstWidth> &opc) const
+    {
+        return !(*this == opc);
+    }
+
+    void
+    serialize(CheckpointOut &cp) const override
+    {
+        Base::serialize(cp);
+        SERIALIZE_SCALAR(_upc);
+        SERIALIZE_SCALAR(_nupc);
+    }
+
+    void
+    unserialize(CheckpointIn &cp) override
+    {
+        Base::unserialize(cp);
+        UNSERIALIZE_SCALAR(_upc);
+        UNSERIALIZE_SCALAR(_nupc);
+    }
+};
+
+template <int InstWidth>
+std::ostream &
+operator<<(std::ostream & os, const DelaySlotUPCState<InstWidth> &pc)
+{
+    ccprintf(os, "(%#x=>%#x=>%#x).(%d=>%d)",
+            pc.pc(), pc.npc(), pc.nnpc(), pc.upc(), pc.nupc());
+    return os;
+}
+
+}
+
+} // namespace gem5
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/isa_parser/isa_parser.py gem5-SALAM/src/arch/isa_parser/isa_parser.py
--- gem5/src/arch/isa_parser/isa_parser.py	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/isa_parser/isa_parser.py	2024-02-22 18:17:15.012944016 -0600
@@ -133,8 +133,7 @@
             if operands.predRead:
                 myDict['op_decl'] += 'uint8_t _sourceIndex = 0;\n'
             if operands.predWrite:
-                myDict['op_decl'] += \
-                    '[[maybe_unused]] uint8_t _destIndex = 0;\n'
+                myDict['op_decl'] += 'GEM5_VAR_USED uint8_t _destIndex = 0;\n'
 
             is_src = lambda op: op.is_src
             is_dest = lambda op: op.is_dest
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/gdb-xml/mips.xml gem5-SALAM/src/arch/mips/gdb-xml/mips.xml
--- gem5/src/arch/mips/gdb-xml/mips.xml	2024-02-22 18:16:36.476742549 -0600
+++ gem5-SALAM/src/arch/mips/gdb-xml/mips.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,94 +0,0 @@
-<?xml version="1.0"?>
-<!--
-GDB feature descriptor defining the structure of the G packet,
-i.e., the representation of register contents on the wire.
-This file does not model any real variant of 32-bit MIPS in particular;
-it simply reflects BaseGdbRegCache's fields in mips/remote_gdb.hh.
-
-As such, this description is something of an oversimplification
-relative to the XML files in the GDB source, in that it does not
-take into account possible variations in features resulting in
-non-sequential numbering of registers.
--->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<target>
- <architecture>mips</architecture>
- <feature name="org.gem5.mips">
-  <reg name="r0" bitsize="32" regnum="0"/>
-  <reg name="r1" bitsize="32"/>
-  <reg name="r2" bitsize="32"/>
-  <reg name="r3" bitsize="32"/>
-  <reg name="r4" bitsize="32"/>
-  <reg name="r5" bitsize="32"/>
-  <reg name="r6" bitsize="32"/>
-  <reg name="r7" bitsize="32"/>
-  <reg name="r8" bitsize="32"/>
-  <reg name="r9" bitsize="32"/>
-  <reg name="r10" bitsize="32"/>
-  <reg name="r11" bitsize="32"/>
-  <reg name="r12" bitsize="32"/>
-  <reg name="r13" bitsize="32"/>
-  <reg name="r14" bitsize="32"/>
-  <reg name="r15" bitsize="32"/>
-  <reg name="r16" bitsize="32"/>
-  <reg name="r17" bitsize="32"/>
-  <reg name="r18" bitsize="32"/>
-  <reg name="r19" bitsize="32"/>
-  <reg name="r20" bitsize="32"/>
-  <reg name="r21" bitsize="32"/>
-  <reg name="r22" bitsize="32"/>
-  <reg name="r23" bitsize="32"/>
-  <reg name="r24" bitsize="32"/>
-  <reg name="r25" bitsize="32"/>
-  <reg name="r26" bitsize="32"/>
-  <reg name="r27" bitsize="32"/>
-  <reg name="r28" bitsize="32"/>
-  <reg name="r29" bitsize="32"/>
-  <reg name="r30" bitsize="32"/>
-  <reg name="r31" bitsize="32"/>
-
-  <reg name="sr" bitsize="32"/>
-  <reg name="lo" bitsize="32"/>
-  <reg name="hi" bitsize="32"/>
-  <reg name="badvaddr" bitsize="32"/>
-  <reg name="cause" bitsize="32"/>
-  <reg name="pc" bitsize="32"/>
-
-  <reg name="f0" bitsize="32"/>
-  <reg name="f1" bitsize="32"/>
-  <reg name="f2" bitsize="32"/>
-  <reg name="f3" bitsize="32"/>
-  <reg name="f4" bitsize="32"/>
-  <reg name="f5" bitsize="32"/>
-  <reg name="f6" bitsize="32"/>
-  <reg name="f7" bitsize="32"/>
-  <reg name="f8" bitsize="32"/>
-  <reg name="f9" bitsize="32"/>
-  <reg name="f10" bitsize="32"/>
-  <reg name="f11" bitsize="32"/>
-  <reg name="f12" bitsize="32"/>
-  <reg name="f13" bitsize="32"/>
-  <reg name="f14" bitsize="32"/>
-  <reg name="f15" bitsize="32"/>
-  <reg name="f16" bitsize="32"/>
-  <reg name="f17" bitsize="32"/>
-  <reg name="f18" bitsize="32"/>
-  <reg name="f19" bitsize="32"/>
-  <reg name="f20" bitsize="32"/>
-  <reg name="f21" bitsize="32"/>
-  <reg name="f22" bitsize="32"/>
-  <reg name="f23" bitsize="32"/>
-  <reg name="f24" bitsize="32"/>
-  <reg name="f25" bitsize="32"/>
-  <reg name="f26" bitsize="32"/>
-  <reg name="f27" bitsize="32"/>
-  <reg name="f28" bitsize="32"/>
-  <reg name="f29" bitsize="32"/>
-  <reg name="f30" bitsize="32"/>
-  <reg name="f31" bitsize="32"/>
-
-  <reg name="fsr" bitsize="32"/>
-  <reg name="fir" bitsize="32"/>
- </feature>
-</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/gdb-xml/SConscript gem5-SALAM/src/arch/mips/gdb-xml/SConscript
--- gem5/src/arch/mips/gdb-xml/SConscript	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/mips/gdb-xml/SConscript	1969-12-31 18:00:00.000000000 -0600
@@ -1,33 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2004-2006 The Regents of The University of Michigan
-# Copyright (c) 2020 LabWare
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-Import('*')
-
-if env['TARGET_ISA'] == 'mips':
-    GdbXml('mips.xml', 'gdb_xml_mips')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/interrupts.cc gem5-SALAM/src/arch/mips/interrupts.cc
--- gem5/src/arch/mips/interrupts.cc	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/mips/interrupts.cc	2024-02-22 18:17:15.012944016 -0600
@@ -148,9 +148,8 @@
 {
     assert(checkInterrupts());
 
-    [[maybe_unused]] StatusReg status =
-        tc->readMiscRegNoEffect(MISCREG_STATUS);
-    [[maybe_unused]] CauseReg cause = tc->readMiscRegNoEffect(MISCREG_CAUSE);
+    GEM5_VAR_USED StatusReg status = tc->readMiscRegNoEffect(MISCREG_STATUS);
+    GEM5_VAR_USED CauseReg cause = tc->readMiscRegNoEffect(MISCREG_CAUSE);
     DPRINTF(Interrupt, "Interrupt! IM[7:0]=%d IP[7:0]=%d \n",
             (unsigned)status.im, (unsigned)cause.ip);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/isa/formats/mem.isa gem5-SALAM/src/arch/mips/isa/formats/mem.isa
--- gem5/src/arch/mips/isa/formats/mem.isa	2024-02-22 18:25:43.659604863 -0600
+++ gem5-SALAM/src/arch/mips/isa/formats/mem.isa	2024-02-22 18:17:15.016944037 -0600
@@ -407,7 +407,7 @@
     Fault %(class_name)s::execute(ExecContext *xc,
                                   Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] Addr EA = 0;
+        GEM5_VAR_USED Addr EA = 0;
         Fault fault = NoFault;
 
         %(fp_enable_check)s;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/isa/formats/mt.isa gem5-SALAM/src/arch/mips/isa/formats/mt.isa
--- gem5/src/arch/mips/isa/formats/mt.isa	2024-02-22 18:25:43.659604863 -0600
+++ gem5-SALAM/src/arch/mips/isa/formats/mt.isa	2024-02-22 18:17:15.016944037 -0600
@@ -111,7 +111,7 @@
             ExecContext *xc, Trace::InstRecord *traceData) const
         {
             Fault fault = NoFault;
-            [[maybe_unused]] int64_t data;
+            GEM5_VAR_USED int64_t data;
             %(op_decl)s;
             %(op_rd)s;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/MipsMMU.py gem5-SALAM/src/arch/mips/MipsMMU.py
--- gem5/src/arch/mips/MipsMMU.py	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/mips/MipsMMU.py	2024-02-22 18:17:15.012944016 -0600
@@ -42,5 +42,5 @@
     type = 'MipsMMU'
     cxx_class = 'gem5::MipsISA::MMU'
     cxx_header = 'arch/mips/mmu.hh'
-    itb = MipsTLB(entry_type="instruction")
-    dtb = MipsTLB(entry_type="data")
+    itb = MipsTLB()
+    dtb = MipsTLB()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/pcstate.hh gem5-SALAM/src/arch/mips/pcstate.hh
--- gem5/src/arch/mips/pcstate.hh	2024-02-22 18:16:36.480742570 -0600
+++ gem5-SALAM/src/arch/mips/pcstate.hh	2024-02-22 18:17:15.016944037 -0600
@@ -29,7 +29,7 @@
 #ifndef __ARCH_MIPS_PCSTATE_HH__
 #define __ARCH_MIPS_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 
 namespace gem5
 {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/remote_gdb.cc gem5-SALAM/src/arch/mips/remote_gdb.cc
--- gem5/src/arch/mips/remote_gdb.cc	2024-02-22 18:25:43.663604884 -0600
+++ gem5-SALAM/src/arch/mips/remote_gdb.cc	2024-02-22 18:17:15.016944037 -0600
@@ -136,10 +136,10 @@
 #include <string>
 
 #include "arch/mips/decoder.hh"
-#include "arch/mips/gdb-xml/gdb_xml_mips.hh"
 #include "arch/mips/regs/float.hh"
 #include "arch/mips/regs/int.hh"
 #include "arch/mips/regs/misc.hh"
+#include "blobs/gdb_xml_mips.hh"
 #include "cpu/thread_state.hh"
 #include "debug/GDBAcc.hh"
 #include "debug/GDBMisc.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/SConscript gem5-SALAM/src/arch/mips/SConscript
--- gem5/src/arch/mips/SConscript	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/mips/SConscript	2024-02-22 18:17:15.012944016 -0600
@@ -53,3 +53,5 @@
     DebugFlag('MipsPRA')
 
     ISADesc('isa/main.isa')
+
+    GdbXml('mips.xml', 'gdb_xml_mips')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/mips/SConsopts gem5-SALAM/src/arch/mips/SConsopts
--- gem5/src/arch/mips/SConsopts	2024-02-22 18:25:43.655604842 -0600
+++ gem5-SALAM/src/arch/mips/SConsopts	2024-02-22 18:17:15.012944016 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['mips'])
+all_isa_list.append('mips')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/null/pcstate.hh gem5-SALAM/src/arch/null/pcstate.hh
--- gem5/src/arch/null/pcstate.hh	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/null/pcstate.hh	2024-02-22 18:17:15.016944037 -0600
@@ -35,10 +35,10 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#ifndef __ARCH_NULL_PCSTATE_HH__
-#define __ARCH_NULL_PCSTATE_HH__
+#ifndef __ARCH_NULL_TYPES_HH__
+#define __ARCH_NULL_TYPES_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 
 namespace gem5
 {
@@ -51,4 +51,4 @@
 } // namespace NullISA
 } // namespace gem5
 
-#endif // __ARCH_NULL_PCSTATE_HH__
+#endif // __ARCH_NULL_TYPES_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/null/SConsopts gem5-SALAM/src/arch/null/SConsopts
--- gem5/src/arch/null/SConsopts	2024-02-22 18:25:43.663604884 -0600
+++ gem5-SALAM/src/arch/null/SConsopts	2024-02-22 18:17:15.016944037 -0600
@@ -37,4 +37,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['null'])
+all_isa_list.append('null')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/null/vecregs.hh gem5-SALAM/src/arch/null/vecregs.hh
--- gem5/src/arch/null/vecregs.hh	2024-02-22 18:25:43.663604884 -0600
+++ gem5-SALAM/src/arch/null/vecregs.hh	2024-02-22 18:17:15.016944037 -0600
@@ -40,6 +40,7 @@
 
 #include <cstdint>
 
+#include "arch/generic/types.hh"
 #include "arch/generic/vec_pred_reg.hh"
 #include "arch/generic/vec_reg.hh"
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/power64-core.xml gem5-SALAM/src/arch/power/gdb-xml/power64-core.xml
--- gem5/src/arch/power/gdb-xml/power64-core.xml	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/power64-core.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.power.core">
-  <reg name="r0" bitsize="64" type="uint64"/>
-  <reg name="r1" bitsize="64" type="uint64"/>
-  <reg name="r2" bitsize="64" type="uint64"/>
-  <reg name="r3" bitsize="64" type="uint64"/>
-  <reg name="r4" bitsize="64" type="uint64"/>
-  <reg name="r5" bitsize="64" type="uint64"/>
-  <reg name="r6" bitsize="64" type="uint64"/>
-  <reg name="r7" bitsize="64" type="uint64"/>
-  <reg name="r8" bitsize="64" type="uint64"/>
-  <reg name="r9" bitsize="64" type="uint64"/>
-  <reg name="r10" bitsize="64" type="uint64"/>
-  <reg name="r11" bitsize="64" type="uint64"/>
-  <reg name="r12" bitsize="64" type="uint64"/>
-  <reg name="r13" bitsize="64" type="uint64"/>
-  <reg name="r14" bitsize="64" type="uint64"/>
-  <reg name="r15" bitsize="64" type="uint64"/>
-  <reg name="r16" bitsize="64" type="uint64"/>
-  <reg name="r17" bitsize="64" type="uint64"/>
-  <reg name="r18" bitsize="64" type="uint64"/>
-  <reg name="r19" bitsize="64" type="uint64"/>
-  <reg name="r20" bitsize="64" type="uint64"/>
-  <reg name="r21" bitsize="64" type="uint64"/>
-  <reg name="r22" bitsize="64" type="uint64"/>
-  <reg name="r23" bitsize="64" type="uint64"/>
-  <reg name="r24" bitsize="64" type="uint64"/>
-  <reg name="r25" bitsize="64" type="uint64"/>
-  <reg name="r26" bitsize="64" type="uint64"/>
-  <reg name="r27" bitsize="64" type="uint64"/>
-  <reg name="r28" bitsize="64" type="uint64"/>
-  <reg name="r29" bitsize="64" type="uint64"/>
-  <reg name="r30" bitsize="64" type="uint64"/>
-  <reg name="r31" bitsize="64" type="uint64"/>
-
-  <reg name="pc" bitsize="64" type="code_ptr" regnum="64"/>
-  <reg name="msr" bitsize="64" type="uint64"/>
-  <reg name="cr" bitsize="32" type="uint32"/>
-  <reg name="lr" bitsize="64" type="code_ptr"/>
-  <reg name="ctr" bitsize="64" type="uint64"/>
-  <reg name="xer" bitsize="32" type="uint32"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/power-core.xml gem5-SALAM/src/arch/power/gdb-xml/power-core.xml
--- gem5/src/arch/power/gdb-xml/power-core.xml	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/power-core.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,49 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.power.core">
-  <reg name="r0" bitsize="32" type="uint32"/>
-  <reg name="r1" bitsize="32" type="uint32"/>
-  <reg name="r2" bitsize="32" type="uint32"/>
-  <reg name="r3" bitsize="32" type="uint32"/>
-  <reg name="r4" bitsize="32" type="uint32"/>
-  <reg name="r5" bitsize="32" type="uint32"/>
-  <reg name="r6" bitsize="32" type="uint32"/>
-  <reg name="r7" bitsize="32" type="uint32"/>
-  <reg name="r8" bitsize="32" type="uint32"/>
-  <reg name="r9" bitsize="32" type="uint32"/>
-  <reg name="r10" bitsize="32" type="uint32"/>
-  <reg name="r11" bitsize="32" type="uint32"/>
-  <reg name="r12" bitsize="32" type="uint32"/>
-  <reg name="r13" bitsize="32" type="uint32"/>
-  <reg name="r14" bitsize="32" type="uint32"/>
-  <reg name="r15" bitsize="32" type="uint32"/>
-  <reg name="r16" bitsize="32" type="uint32"/>
-  <reg name="r17" bitsize="32" type="uint32"/>
-  <reg name="r18" bitsize="32" type="uint32"/>
-  <reg name="r19" bitsize="32" type="uint32"/>
-  <reg name="r20" bitsize="32" type="uint32"/>
-  <reg name="r21" bitsize="32" type="uint32"/>
-  <reg name="r22" bitsize="32" type="uint32"/>
-  <reg name="r23" bitsize="32" type="uint32"/>
-  <reg name="r24" bitsize="32" type="uint32"/>
-  <reg name="r25" bitsize="32" type="uint32"/>
-  <reg name="r26" bitsize="32" type="uint32"/>
-  <reg name="r27" bitsize="32" type="uint32"/>
-  <reg name="r28" bitsize="32" type="uint32"/>
-  <reg name="r29" bitsize="32" type="uint32"/>
-  <reg name="r30" bitsize="32" type="uint32"/>
-  <reg name="r31" bitsize="32" type="uint32"/>
-
-  <reg name="pc" bitsize="32" type="code_ptr" regnum="64"/>
-  <reg name="msr" bitsize="32" type="uint32"/>
-  <reg name="cr" bitsize="32" type="uint32"/>
-  <reg name="lr" bitsize="32" type="code_ptr"/>
-  <reg name="ctr" bitsize="32" type="uint32"/>
-  <reg name="xer" bitsize="32" type="uint32"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/power-fpu.xml gem5-SALAM/src/arch/power/gdb-xml/power-fpu.xml
--- gem5/src/arch/power/gdb-xml/power-fpu.xml	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/power-fpu.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,44 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.power.fpu">
-  <reg name="f0" bitsize="64" type="ieee_double" regnum="32"/>
-  <reg name="f1" bitsize="64" type="ieee_double"/>
-  <reg name="f2" bitsize="64" type="ieee_double"/>
-  <reg name="f3" bitsize="64" type="ieee_double"/>
-  <reg name="f4" bitsize="64" type="ieee_double"/>
-  <reg name="f5" bitsize="64" type="ieee_double"/>
-  <reg name="f6" bitsize="64" type="ieee_double"/>
-  <reg name="f7" bitsize="64" type="ieee_double"/>
-  <reg name="f8" bitsize="64" type="ieee_double"/>
-  <reg name="f9" bitsize="64" type="ieee_double"/>
-  <reg name="f10" bitsize="64" type="ieee_double"/>
-  <reg name="f11" bitsize="64" type="ieee_double"/>
-  <reg name="f12" bitsize="64" type="ieee_double"/>
-  <reg name="f13" bitsize="64" type="ieee_double"/>
-  <reg name="f14" bitsize="64" type="ieee_double"/>
-  <reg name="f15" bitsize="64" type="ieee_double"/>
-  <reg name="f16" bitsize="64" type="ieee_double"/>
-  <reg name="f17" bitsize="64" type="ieee_double"/>
-  <reg name="f18" bitsize="64" type="ieee_double"/>
-  <reg name="f19" bitsize="64" type="ieee_double"/>
-  <reg name="f20" bitsize="64" type="ieee_double"/>
-  <reg name="f21" bitsize="64" type="ieee_double"/>
-  <reg name="f22" bitsize="64" type="ieee_double"/>
-  <reg name="f23" bitsize="64" type="ieee_double"/>
-  <reg name="f24" bitsize="64" type="ieee_double"/>
-  <reg name="f25" bitsize="64" type="ieee_double"/>
-  <reg name="f26" bitsize="64" type="ieee_double"/>
-  <reg name="f27" bitsize="64" type="ieee_double"/>
-  <reg name="f28" bitsize="64" type="ieee_double"/>
-  <reg name="f29" bitsize="64" type="ieee_double"/>
-  <reg name="f30" bitsize="64" type="ieee_double"/>
-  <reg name="f31" bitsize="64" type="ieee_double"/>
-
-  <reg name="fpscr" bitsize="32" group="float" regnum="70"/>
-</feature>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/powerpc-32.xml gem5-SALAM/src/arch/power/gdb-xml/powerpc-32.xml
--- gem5/src/arch/power/gdb-xml/powerpc-32.xml	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/powerpc-32.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!-- PowerPC UISA - a PPC processor as viewed by user-level code.  A UISA-only
-     view of the PowerPC.  -->
-
-<!DOCTYPE target SYSTEM "gdb-target.dtd">
-<target>
-  <architecture>powerpc:common</architecture>
-  <xi:include href="power-core.xml"/>
-  <xi:include href="power-fpu.xml"/>
-</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/powerpc-64.xml gem5-SALAM/src/arch/power/gdb-xml/powerpc-64.xml
--- gem5/src/arch/power/gdb-xml/powerpc-64.xml	2024-02-22 18:16:36.484742591 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/powerpc-64.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,16 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2007-2020 Free Software Foundation, Inc.
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!-- PowerPC UISA - a PPC processor as viewed by user-level code.  A UISA-only
-     view of the PowerPC.  -->
-
-<!DOCTYPE target SYSTEM "gdb-target.dtd">
-<target>
-  <architecture>powerpc:common64</architecture>
-  <xi:include href="power64-core.xml"/>
-  <xi:include href="power-fpu.xml"/>
-</target>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/gdb-xml/SConscript gem5-SALAM/src/arch/power/gdb-xml/SConscript
--- gem5/src/arch/power/gdb-xml/SConscript	2024-02-22 18:25:43.667604905 -0600
+++ gem5-SALAM/src/arch/power/gdb-xml/SConscript	1969-12-31 18:00:00.000000000 -0600
@@ -1,38 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2009 The University of Edinburgh
-# Copyright (c) 2020 LabWare
-# Copyright (c) 2021 IBM Corporation
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-Import('*')
-
-if env['TARGET_ISA'] == 'power':
-    GdbXml('power-core.xml', 'gdb_xml_power_core')
-    GdbXml('power64-core.xml', 'gdb_xml_power64_core')
-    GdbXml('power-fpu.xml', 'gdb_xml_power_fpu')
-    GdbXml('powerpc-32.xml', 'gdb_xml_powerpc_32')
-    GdbXml('powerpc-64.xml', 'gdb_xml_powerpc_64')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/isa/formats/integer.isa gem5-SALAM/src/arch/power/isa/formats/integer.isa
--- gem5/src/arch/power/isa/formats/integer.isa	2024-02-22 18:16:36.488742612 -0600
+++ gem5-SALAM/src/arch/power/isa/formats/integer.isa	2024-02-22 18:17:15.020944058 -0600
@@ -34,7 +34,7 @@
 
 let {{
 
-readXERCode = '[[maybe_unused]] Xer xer = XER;'
+readXERCode = 'GEM5_VAR_USED Xer xer = XER;'
 
 setXERCode = 'XER = xer;'
 
@@ -218,7 +218,7 @@
 def format IntCompOp(code, inst_flags = []) {{
 
     # Add code to setup variables
-    code = '[[maybe_unused]] uint32_t cr = 0;\n' + code
+    code = 'GEM5_VAR_USED uint32_t cr = 0;\n' + code
     code += 'CR = insertCRField(CR, bf, cr);\n'
 
     # Add code to access XER
@@ -235,7 +235,7 @@
 def format IntImmCompOp(code, inst_flags = []) {{
 
     # Add code to setup variables
-    code = '[[maybe_unused]] uint32_t cr = 0;\n' + code
+    code = 'GEM5_VAR_USED uint32_t cr = 0;\n' + code
     code += 'CR = insertCRField(CR, bf, cr);\n'
 
     # Add code to access XER
@@ -252,7 +252,7 @@
 def format IntImmCompLogicOp(code, inst_flags = []) {{
 
     # Add code to setup variables
-    code = '[[maybe_unused]] uint32_t cr = 0;\n' + code
+    code = 'GEM5_VAR_USED uint32_t cr = 0;\n' + code
     code += 'CR = insertCRField(CR, bf, cr);\n'
 
     # Add code to access XER
@@ -311,7 +311,7 @@
     dict = {'result':'Ra'}
 
     # Add code to setup variables and access XER if necessary
-    code  = '[[maybe_unused]] bool setCA = false;\n' + code
+    code  = 'GEM5_VAR_USED bool setCA = false;\n' + code
 
     # Code when Rc is set
     code_rc1 = readXERCode + code + computeCR0Code % dict
@@ -426,7 +426,7 @@
     # Deal with setting the overflow flag
     if computeOV:
         # Setup the 4 code versions and add code to access XER if necessary
-        code  = '[[maybe_unused]] bool setOV = false;\n' + code
+        code  = 'GEM5_VAR_USED bool setOV = false;\n' + code
         code_rc1 = readXERCode + code + computeCR0Code % dict
         code_oe1 = readXERCode + code + setOVCode + setXERCode
         code_rc1_oe1 = readXERCode + code + setOVCode + setXERCode
@@ -484,7 +484,7 @@
     dict = {'result':'Ra'}
 
     # Add code to setup variables and access XER if necessary
-    code  = '[[maybe_unused]] bool setCA = false;\n' + code
+    code  = 'GEM5_VAR_USED bool setCA = false;\n' + code
 
     # Code when Rc is set
     code_rc1 = readXERCode + code + computeCR0Code % dict
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/isa/formats/mem.isa gem5-SALAM/src/arch/power/isa/formats/mem.isa
--- gem5/src/arch/power/isa/formats/mem.isa	2024-02-22 18:25:43.667604905 -0600
+++ gem5-SALAM/src/arch/power/isa/formats/mem.isa	2024-02-22 18:17:15.020944058 -0600
@@ -117,7 +117,7 @@
                                       ExecContext *xc,
                                       Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] Addr EA;
+        GEM5_VAR_USED Addr EA;
         Fault fault = NoFault;
         Msr msr = xc->tcBase()->readIntReg(INTREG_MSR);
 
@@ -211,7 +211,7 @@
     Fault %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
                                       Trace::InstRecord *traceData) const
     {
-        [[maybe_unused]] Addr EA;
+        GEM5_VAR_USED Addr EA;
         Fault fault = NoFault;
 
         %(op_decl)s;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/pcstate.hh gem5-SALAM/src/arch/power/pcstate.hh
--- gem5/src/arch/power/pcstate.hh	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/power/pcstate.hh	2024-02-22 18:17:15.020944058 -0600
@@ -29,7 +29,7 @@
 #ifndef __ARCH_POWER_PCSTATE_HH__
 #define __ARCH_POWER_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 #include "arch/power/types.hh"
 #include "enums/ByteOrder.hh"
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/PowerMMU.py gem5-SALAM/src/arch/power/PowerMMU.py
--- gem5/src/arch/power/PowerMMU.py	2024-02-22 18:25:43.663604884 -0600
+++ gem5-SALAM/src/arch/power/PowerMMU.py	2024-02-22 18:17:15.016944037 -0600
@@ -42,5 +42,5 @@
     type = 'PowerMMU'
     cxx_class = 'gem5::PowerISA::MMU'
     cxx_header = 'arch/power/mmu.hh'
-    itb = PowerTLB(entry_type="instruction")
-    dtb = PowerTLB(entry_type="data")
+    itb = PowerTLB()
+    dtb = PowerTLB()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/remote_gdb.cc gem5-SALAM/src/arch/power/remote_gdb.cc
--- gem5/src/arch/power/remote_gdb.cc	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/power/remote_gdb.cc	2024-02-22 18:17:15.020944058 -0600
@@ -137,12 +137,12 @@
 
 #include <string>
 
-#include "arch/power/gdb-xml/gdb_xml_power64_core.hh"
-#include "arch/power/gdb-xml/gdb_xml_power_core.hh"
-#include "arch/power/gdb-xml/gdb_xml_power_fpu.hh"
-#include "arch/power/gdb-xml/gdb_xml_powerpc_32.hh"
-#include "arch/power/gdb-xml/gdb_xml_powerpc_64.hh"
 #include "arch/power/regs/misc.hh"
+#include "blobs/gdb_xml_power64_core.hh"
+#include "blobs/gdb_xml_power_core.hh"
+#include "blobs/gdb_xml_power_fpu.hh"
+#include "blobs/gdb_xml_powerpc_32.hh"
+#include "blobs/gdb_xml_powerpc_64.hh"
 #include "cpu/thread_state.hh"
 #include "debug/GDBAcc.hh"
 #include "debug/GDBMisc.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/SConscript gem5-SALAM/src/arch/power/SConscript
--- gem5/src/arch/power/SConscript	2024-02-22 18:25:43.667604905 -0600
+++ gem5-SALAM/src/arch/power/SConscript	2024-02-22 18:17:15.020944058 -0600
@@ -59,3 +59,9 @@
     DebugFlag('Power')
 
     ISADesc('isa/main.isa')
+
+    GdbXml('power-core.xml', 'gdb_xml_power_core')
+    GdbXml('power64-core.xml', 'gdb_xml_power64_core')
+    GdbXml('power-fpu.xml', 'gdb_xml_power_fpu')
+    GdbXml('powerpc-32.xml', 'gdb_xml_powerpc_32')
+    GdbXml('powerpc-64.xml', 'gdb_xml_powerpc_64')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/power/SConsopts gem5-SALAM/src/arch/power/SConsopts
--- gem5/src/arch/power/SConsopts	2024-02-22 18:25:43.667604905 -0600
+++ gem5-SALAM/src/arch/power/SConsopts	2024-02-22 18:17:15.020944058 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['power'])
+all_isa_list.append('power')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/faults.hh gem5-SALAM/src/arch/riscv/faults.hh
--- gem5/src/arch/riscv/faults.hh	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/faults.hh	2024-02-22 18:17:15.024944079 -0600
@@ -166,8 +166,7 @@
 
   public:
     IllegalInstFault(std::string r, const ExtMachInst inst)
-        : InstFault("Illegal instruction", inst),
-          reason(r)
+        : InstFault("Illegal instruction", inst)
     {}
 
     void invokeSE(ThreadContext *tc, const StaticInstPtr &inst) override;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/gdb-xml/riscv-64bit-cpu.xml gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-cpu.xml
--- gem5/src/arch/riscv/gdb-xml/riscv-64bit-cpu.xml	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-cpu.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,48 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
-     Contributed by Huawei International
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!-- Register numbers are hard-coded in order to maintain backward
-     compatibility with older versions of tools that didn't use xml
-     register descriptions.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.riscv.cpu">
-  <reg name="zero" bitsize="64" type="int" regnum="0"/>
-  <reg name="ra" bitsize="64" type="code_ptr"/>
-  <reg name="sp" bitsize="64" type="data_ptr"/>
-  <reg name="gp" bitsize="64" type="data_ptr"/>
-  <reg name="tp" bitsize="64" type="data_ptr"/>
-  <reg name="t0" bitsize="64" type="int"/>
-  <reg name="t1" bitsize="64" type="int"/>
-  <reg name="t2" bitsize="64" type="int"/>
-  <reg name="fp" bitsize="64" type="data_ptr"/>
-  <reg name="s1" bitsize="64" type="int"/>
-  <reg name="a0" bitsize="64" type="int"/>
-  <reg name="a1" bitsize="64" type="int"/>
-  <reg name="a2" bitsize="64" type="int"/>
-  <reg name="a3" bitsize="64" type="int"/>
-  <reg name="a4" bitsize="64" type="int"/>
-  <reg name="a5" bitsize="64" type="int"/>
-  <reg name="a6" bitsize="64" type="int"/>
-  <reg name="a7" bitsize="64" type="int"/>
-  <reg name="s2" bitsize="64" type="int"/>
-  <reg name="s3" bitsize="64" type="int"/>
-  <reg name="s4" bitsize="64" type="int"/>
-  <reg name="s5" bitsize="64" type="int"/>
-  <reg name="s6" bitsize="64" type="int"/>
-  <reg name="s7" bitsize="64" type="int"/>
-  <reg name="s8" bitsize="64" type="int"/>
-  <reg name="s9" bitsize="64" type="int"/>
-  <reg name="s10" bitsize="64" type="int"/>
-  <reg name="s11" bitsize="64" type="int"/>
-  <reg name="t3" bitsize="64" type="int"/>
-  <reg name="t4" bitsize="64" type="int"/>
-  <reg name="t5" bitsize="64" type="int"/>
-  <reg name="t6" bitsize="64" type="int"/>
-  <reg name="pc" bitsize="64" type="code_ptr"/>
-</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/gdb-xml/riscv-64bit-csr.xml gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-csr.xml
--- gem5/src/arch/riscv/gdb-xml/riscv-64bit-csr.xml	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-csr.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,248 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
-     Contributed by Huawei International
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.riscv.csr">
-  <reg name="cycle" bitsize="64"/>
-  <reg name="time" bitsize="64"/>
-  <reg name="ustatus" bitsize="64"/>
-  <reg name="uie" bitsize="64"/>
-  <reg name="utvec" bitsize="64"/>
-  <reg name="uscratch" bitsize="64"/>
-  <reg name="uepc" bitsize="64"/>
-  <reg name="ucause" bitsize="64"/>
-  <reg name="utval" bitsize="64"/>
-  <reg name="uip" bitsize="64"/>
-  <reg name="sstatus" bitsize="64"/>
-  <reg name="sedeleg" bitsize="64"/>
-  <reg name="sideleg" bitsize="64"/>
-  <reg name="sie" bitsize="64"/>
-  <reg name="stvec" bitsize="64"/>
-  <reg name="scounteren" bitsize="64"/>
-  <reg name="sscratch" bitsize="64"/>
-  <reg name="sepc" bitsize="64"/>
-  <reg name="scause" bitsize="64"/>
-  <reg name="stval" bitsize="64"/>
-  <reg name="sip" bitsize="64"/>
-  <reg name="satp" bitsize="64"/>
-  <reg name="mvendorid" bitsize="64"/>
-  <reg name="marchid" bitsize="64"/>
-  <reg name="mimpid" bitsize="64"/>
-  <reg name="mhartid" bitsize="64"/>
-  <reg name="mstatus" bitsize="64"/>
-  <reg name="misa" bitsize="64"/>
-  <reg name="medeleg" bitsize="64"/>
-  <reg name="mideleg" bitsize="64"/>
-  <reg name="mie" bitsize="64"/>
-  <reg name="mtvec" bitsize="64"/>
-  <reg name="mcounteren" bitsize="64"/>
-  <reg name="mscratch" bitsize="64"/>
-  <reg name="mepc" bitsize="64"/>
-  <reg name="mcause" bitsize="64"/>
-  <reg name="mtval" bitsize="64"/>
-  <reg name="mip" bitsize="64"/>
-  <reg name="hstatus" bitsize="64"/>
-  <reg name="hedeleg" bitsize="64"/>
-  <reg name="hideleg" bitsize="64"/>
-  <reg name="hie" bitsize="64"/>
-  <reg name="htvec" bitsize="64"/>
-  <reg name="hscratch" bitsize="64"/>
-  <reg name="hepc" bitsize="64"/>
-  <reg name="hcause" bitsize="64"/>
-  <reg name="hbadaddr" bitsize="64"/>
-  <reg name="hip" bitsize="64"/>
-  <!-- <reg name="instret" bitsize="64"/>
-  <reg name="hpmcounter3" bitsize="64"/>
-  <reg name="hpmcounter4" bitsize="64"/>
-  <reg name="hpmcounter5" bitsize="64"/>
-  <reg name="hpmcounter6" bitsize="64"/>
-  <reg name="hpmcounter7" bitsize="64"/>
-  <reg name="hpmcounter8" bitsize="64"/>
-  <reg name="hpmcounter9" bitsize="64"/>
-  <reg name="hpmcounter10" bitsize="64"/>
-  <reg name="hpmcounter11" bitsize="64"/>
-  <reg name="hpmcounter12" bitsize="64"/>
-  <reg name="hpmcounter13" bitsize="64"/>
-  <reg name="hpmcounter14" bitsize="64"/>
-  <reg name="hpmcounter15" bitsize="64"/>
-  <reg name="hpmcounter16" bitsize="64"/>
-  <reg name="hpmcounter17" bitsize="64"/>
-  <reg name="hpmcounter18" bitsize="64"/>
-  <reg name="hpmcounter19" bitsize="64"/>
-  <reg name="hpmcounter20" bitsize="64"/>
-  <reg name="hpmcounter21" bitsize="64"/>
-  <reg name="hpmcounter22" bitsize="64"/>
-  <reg name="hpmcounter23" bitsize="64"/>
-  <reg name="hpmcounter24" bitsize="64"/>
-  <reg name="hpmcounter25" bitsize="64"/>
-  <reg name="hpmcounter26" bitsize="64"/>
-  <reg name="hpmcounter27" bitsize="64"/>
-  <reg name="hpmcounter28" bitsize="64"/>
-  <reg name="hpmcounter29" bitsize="64"/>
-  <reg name="hpmcounter30" bitsize="64"/>
-  <reg name="hpmcounter31" bitsize="64"/>
-  <reg name="cycleh" bitsize="64"/>
-  <reg name="timeh" bitsize="64"/>
-  <reg name="instreth" bitsize="64"/>
-  <reg name="hpmcounter3h" bitsize="64"/>
-  <reg name="hpmcounter4h" bitsize="64"/>
-  <reg name="hpmcounter5h" bitsize="64"/>
-  <reg name="hpmcounter6h" bitsize="64"/>
-  <reg name="hpmcounter7h" bitsize="64"/>
-  <reg name="hpmcounter8h" bitsize="64"/>
-  <reg name="hpmcounter9h" bitsize="64"/>
-  <reg name="hpmcounter10h" bitsize="64"/>
-  <reg name="hpmcounter11h" bitsize="64"/>
-  <reg name="hpmcounter12h" bitsize="64"/>
-  <reg name="hpmcounter13h" bitsize="64"/>
-  <reg name="hpmcounter14h" bitsize="64"/>
-  <reg name="hpmcounter15h" bitsize="64"/>
-  <reg name="hpmcounter16h" bitsize="64"/>
-  <reg name="hpmcounter17h" bitsize="64"/>
-  <reg name="hpmcounter18h" bitsize="64"/>
-  <reg name="hpmcounter19h" bitsize="64"/>
-  <reg name="hpmcounter20h" bitsize="64"/>
-  <reg name="hpmcounter21h" bitsize="64"/>
-  <reg name="hpmcounter22h" bitsize="64"/>
-  <reg name="hpmcounter23h" bitsize="64"/>
-  <reg name="hpmcounter24h" bitsize="64"/>
-  <reg name="hpmcounter25h" bitsize="64"/>
-  <reg name="hpmcounter26h" bitsize="64"/>
-  <reg name="hpmcounter27h" bitsize="64"/>
-  <reg name="hpmcounter28h" bitsize="64"/>
-  <reg name="hpmcounter29h" bitsize="64"/>
-  <reg name="hpmcounter30h" bitsize="64"/>
-  <reg name="hpmcounter31h" bitsize="64"/>
-  <reg name="pmpcfg0" bitsize="64"/>
-  <reg name="pmpcfg1" bitsize="64"/>
-  <reg name="pmpcfg2" bitsize="64"/>
-  <reg name="pmpcfg3" bitsize="64"/>
-  <reg name="pmpaddr0" bitsize="64"/>
-  <reg name="pmpaddr1" bitsize="64"/>
-  <reg name="pmpaddr2" bitsize="64"/>
-  <reg name="pmpaddr3" bitsize="64"/>
-  <reg name="pmpaddr4" bitsize="64"/>
-  <reg name="pmpaddr5" bitsize="64"/>
-  <reg name="pmpaddr6" bitsize="64"/>
-  <reg name="pmpaddr7" bitsize="64"/>
-  <reg name="pmpaddr8" bitsize="64"/>
-  <reg name="pmpaddr9" bitsize="64"/>
-  <reg name="pmpaddr10" bitsize="64"/>
-  <reg name="pmpaddr11" bitsize="64"/>
-  <reg name="pmpaddr12" bitsize="64"/>
-  <reg name="pmpaddr13" bitsize="64"/>
-  <reg name="pmpaddr14" bitsize="64"/>
-  <reg name="pmpaddr15" bitsize="64"/>
-  <reg name="mcycle" bitsize="64"/>
-  <reg name="minstret" bitsize="64"/>
-  <reg name="mhpmcounter3" bitsize="64"/>
-  <reg name="mhpmcounter4" bitsize="64"/>
-  <reg name="mhpmcounter5" bitsize="64"/>
-  <reg name="mhpmcounter6" bitsize="64"/>
-  <reg name="mhpmcounter7" bitsize="64"/>
-  <reg name="mhpmcounter8" bitsize="64"/>
-  <reg name="mhpmcounter9" bitsize="64"/>
-  <reg name="mhpmcounter10" bitsize="64"/>
-  <reg name="mhpmcounter11" bitsize="64"/>
-  <reg name="mhpmcounter12" bitsize="64"/>
-  <reg name="mhpmcounter13" bitsize="64"/>
-  <reg name="mhpmcounter14" bitsize="64"/>
-  <reg name="mhpmcounter15" bitsize="64"/>
-  <reg name="mhpmcounter16" bitsize="64"/>
-  <reg name="mhpmcounter17" bitsize="64"/>
-  <reg name="mhpmcounter18" bitsize="64"/>
-  <reg name="mhpmcounter19" bitsize="64"/>
-  <reg name="mhpmcounter20" bitsize="64"/>
-  <reg name="mhpmcounter21" bitsize="64"/>
-  <reg name="mhpmcounter22" bitsize="64"/>
-  <reg name="mhpmcounter23" bitsize="64"/>
-  <reg name="mhpmcounter24" bitsize="64"/>
-  <reg name="mhpmcounter25" bitsize="64"/>
-  <reg name="mhpmcounter26" bitsize="64"/>
-  <reg name="mhpmcounter27" bitsize="64"/>
-  <reg name="mhpmcounter28" bitsize="64"/>
-  <reg name="mhpmcounter29" bitsize="64"/>
-  <reg name="mhpmcounter30" bitsize="64"/>
-  <reg name="mhpmcounter31" bitsize="64"/>
-  <reg name="mcycleh" bitsize="64"/>
-  <reg name="minstreth" bitsize="64"/>
-  <reg name="mhpmcounter3h" bitsize="64"/>
-  <reg name="mhpmcounter4h" bitsize="64"/>
-  <reg name="mhpmcounter5h" bitsize="64"/>
-  <reg name="mhpmcounter6h" bitsize="64"/>
-  <reg name="mhpmcounter7h" bitsize="64"/>
-  <reg name="mhpmcounter8h" bitsize="64"/>
-  <reg name="mhpmcounter9h" bitsize="64"/>
-  <reg name="mhpmcounter10h" bitsize="64"/>
-  <reg name="mhpmcounter11h" bitsize="64"/>
-  <reg name="mhpmcounter12h" bitsize="64"/>
-  <reg name="mhpmcounter13h" bitsize="64"/>
-  <reg name="mhpmcounter14h" bitsize="64"/>
-  <reg name="mhpmcounter15h" bitsize="64"/>
-  <reg name="mhpmcounter16h" bitsize="64"/>
-  <reg name="mhpmcounter17h" bitsize="64"/>
-  <reg name="mhpmcounter18h" bitsize="64"/>
-  <reg name="mhpmcounter19h" bitsize="64"/>
-  <reg name="mhpmcounter20h" bitsize="64"/>
-  <reg name="mhpmcounter21h" bitsize="64"/>
-  <reg name="mhpmcounter22h" bitsize="64"/>
-  <reg name="mhpmcounter23h" bitsize="64"/>
-  <reg name="mhpmcounter24h" bitsize="64"/>
-  <reg name="mhpmcounter25h" bitsize="64"/>
-  <reg name="mhpmcounter26h" bitsize="64"/>
-  <reg name="mhpmcounter27h" bitsize="64"/>
-  <reg name="mhpmcounter28h" bitsize="64"/>
-  <reg name="mhpmcounter29h" bitsize="64"/>
-  <reg name="mhpmcounter30h" bitsize="64"/>
-  <reg name="mhpmcounter31h" bitsize="64"/>
-  <reg name="mhpmevent3" bitsize="64"/>
-  <reg name="mhpmevent4" bitsize="64"/>
-  <reg name="mhpmevent5" bitsize="64"/>
-  <reg name="mhpmevent6" bitsize="64"/>
-  <reg name="mhpmevent7" bitsize="64"/>
-  <reg name="mhpmevent8" bitsize="64"/>
-  <reg name="mhpmevent9" bitsize="64"/>
-  <reg name="mhpmevent10" bitsize="64"/>
-  <reg name="mhpmevent11" bitsize="64"/>
-  <reg name="mhpmevent12" bitsize="64"/>
-  <reg name="mhpmevent13" bitsize="64"/>
-  <reg name="mhpmevent14" bitsize="64"/>
-  <reg name="mhpmevent15" bitsize="64"/>
-  <reg name="mhpmevent16" bitsize="64"/>
-  <reg name="mhpmevent17" bitsize="64"/>
-  <reg name="mhpmevent18" bitsize="64"/>
-  <reg name="mhpmevent19" bitsize="64"/>
-  <reg name="mhpmevent20" bitsize="64"/>
-  <reg name="mhpmevent21" bitsize="64"/>
-  <reg name="mhpmevent22" bitsize="64"/>
-  <reg name="mhpmevent23" bitsize="64"/>
-  <reg name="mhpmevent24" bitsize="64"/>
-  <reg name="mhpmevent25" bitsize="64"/>
-  <reg name="mhpmevent26" bitsize="64"/>
-  <reg name="mhpmevent27" bitsize="64"/>
-  <reg name="mhpmevent28" bitsize="64"/>
-  <reg name="mhpmevent29" bitsize="64"/>
-  <reg name="mhpmevent30" bitsize="64"/>
-  <reg name="mhpmevent31" bitsize="64"/>
-  <reg name="tselect" bitsize="64"/>
-  <reg name="tdata1" bitsize="64"/>
-  <reg name="tdata2" bitsize="64"/>
-  <reg name="tdata3" bitsize="64"/>
-  <reg name="dcsr" bitsize="64"/>
-  <reg name="dpc" bitsize="64"/>
-  <reg name="dscratch" bitsize="64"/>
-  <reg name="mbase" bitsize="64"/>
-  <reg name="mbound" bitsize="64"/>
-  <reg name="mibase" bitsize="64"/>
-  <reg name="mibound" bitsize="64"/>
-  <reg name="mdbase" bitsize="64"/>
-  <reg name="mdbound" bitsize="64"/>
-  <reg name="mucounteren" bitsize="64"/>
-  <reg name="mscounteren" bitsize="64"/>
-  <reg name="mhcounteren" bitsize="64"/> -->
-</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/gdb-xml/riscv-64bit-fpu.xml gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-fpu.xml
--- gem5/src/arch/riscv/gdb-xml/riscv-64bit-fpu.xml	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/gdb-xml/riscv-64bit-fpu.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,58 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2018-2019 Free Software Foundation, Inc.
-     Contributed by Huawei International
-
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-
-<!-- Register numbers are hard-coded in order to maintain backward
-     compatibility with older versions of tools that didn't use xml
-     register descriptions.  -->
-
-<!DOCTYPE feature SYSTEM "gdb-target.dtd">
-<feature name="org.gnu.gdb.riscv.fpu">
-
-  <union id="riscv_double">
-    <field name="float" type="ieee_single"/>
-    <field name="double" type="ieee_double"/>
-  </union>
-
-  <reg name="ft0" bitsize="64" type="riscv_double" regnum="33"/>
-  <reg name="ft1" bitsize="64" type="riscv_double"/>
-  <reg name="ft2" bitsize="64" type="riscv_double"/>
-  <reg name="ft3" bitsize="64" type="riscv_double"/>
-  <reg name="ft4" bitsize="64" type="riscv_double"/>
-  <reg name="ft5" bitsize="64" type="riscv_double"/>
-  <reg name="ft6" bitsize="64" type="riscv_double"/>
-  <reg name="ft7" bitsize="64" type="riscv_double"/>
-  <reg name="fs0" bitsize="64" type="riscv_double"/>
-  <reg name="fs1" bitsize="64" type="riscv_double"/>
-  <reg name="fa0" bitsize="64" type="riscv_double"/>
-  <reg name="fa1" bitsize="64" type="riscv_double"/>
-  <reg name="fa2" bitsize="64" type="riscv_double"/>
-  <reg name="fa3" bitsize="64" type="riscv_double"/>
-  <reg name="fa4" bitsize="64" type="riscv_double"/>
-  <reg name="fa5" bitsize="64" type="riscv_double"/>
-  <reg name="fa6" bitsize="64" type="riscv_double"/>
-  <reg name="fa7" bitsize="64" type="riscv_double"/>
-  <reg name="fs2" bitsize="64" type="riscv_double"/>
-  <reg name="fs3" bitsize="64" type="riscv_double"/>
-  <reg name="fs4" bitsize="64" type="riscv_double"/>
-  <reg name="fs5" bitsize="64" type="riscv_double"/>
-  <reg name="fs6" bitsize="64" type="riscv_double"/>
-  <reg name="fs7" bitsize="64" type="riscv_double"/>
-  <reg name="fs8" bitsize="64" type="riscv_double"/>
-  <reg name="fs9" bitsize="64" type="riscv_double"/>
-  <reg name="fs10" bitsize="64" type="riscv_double"/>
-  <reg name="fs11" bitsize="64" type="riscv_double"/>
-  <reg name="ft8" bitsize="64" type="riscv_double"/>
-  <reg name="ft9" bitsize="64" type="riscv_double"/>
-  <reg name="ft10" bitsize="64" type="riscv_double"/>
-  <reg name="ft11" bitsize="64" type="riscv_double"/>
-
-  <reg name="fflags" bitsize="32" type="int" regnum="66"/>
-  <reg name="frm" bitsize="32" type="int" regnum="67"/>
-  <reg name="fcsr" bitsize="32" type="int" regnum="68"/>
-  <reg name="placeholder" bitsize="32" type="int" regnum="69"/>
-</feature>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/gdb-xml/riscv.xml gem5-SALAM/src/arch/riscv/gdb-xml/riscv.xml
--- gem5/src/arch/riscv/gdb-xml/riscv.xml	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/gdb-xml/riscv.xml	1969-12-31 18:00:00.000000000 -0600
@@ -1,13 +0,0 @@
-<?xml version="1.0"?>
-<!-- Copyright (C) 2009-2013 Free Software Foundation, Inc.
-     Contributed by Huawei International
-     Copying and distribution of this file, with or without modification,
-     are permitted in any medium without royalty provided the copyright
-     notice and this notice are preserved.  -->
-<!DOCTYPE target SYSTEM "gdb-target.dtd">
-<target>
-  <architecture>riscv</architecture>
-  <xi:include href="riscv-64bit-cpu.xml"/>
-  <xi:include href="riscv-64bit-fpu.xml"/>
-  <xi:include href="riscv-64bit-csr.xml"/>
-</target>
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/gdb-xml/SConscript gem5-SALAM/src/arch/riscv/gdb-xml/SConscript
--- gem5/src/arch/riscv/gdb-xml/SConscript	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/gdb-xml/SConscript	1969-12-31 18:00:00.000000000 -0600
@@ -1,50 +0,0 @@
-# -*- mode:python -*-
-
-# Copyright (c) 2013 ARM Limited
-# Copyright (c) 2014 Sven Karlsson
-# Copyright (c) 2020 Barkhausen Institut
-# Copyright (c) 2021 Huawei International
-# All rights reserved
-#
-# The license below extends only to copyright in the software and shall
-# not be construed as granting a license to any other intellectual
-# property including but not limited to intellectual property relating
-# to a hardware implementation of the functionality of the software
-# licensed hereunder.  You may use the software subject to the license
-# terms below provided that you ensure that this notice is replicated
-# unmodified and in its entirety in all distributions of the software,
-# modified or unmodified, in source code or in binary form.
-#
-# Copyright (c) 2016 The University of Virginia
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-Import('*')
-
-if env['TARGET_ISA'] == 'riscv':
-    GdbXml('riscv.xml', 'gdb_xml_riscv_target')
-    GdbXml('riscv-64bit-cpu.xml', 'gdb_xml_riscv_cpu')
-    GdbXml('riscv-64bit-fpu.xml', 'gdb_xml_riscv_fpu')
-    GdbXml('riscv-64bit-csr.xml', 'gdb_xml_riscv_csr')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/isa.cc gem5-SALAM/src/arch/riscv/isa.cc
--- gem5/src/arch/riscv/isa.cc	2024-02-22 18:25:43.675604947 -0600
+++ gem5-SALAM/src/arch/riscv/isa.cc	2024-02-22 18:17:15.024944079 -0600
@@ -55,7 +55,7 @@
 namespace RiscvISA
 {
 
-[[maybe_unused]] const std::array<const char *, NUM_MISCREGS> MiscRegNames = {{
+GEM5_VAR_USED const std::array<const char *, NUM_MISCREGS> MiscRegNames = {{
     [MISCREG_PRV]           = "PRV",
     [MISCREG_ISA]           = "ISA",
     [MISCREG_VENDORID]      = "VENDORID",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/pcstate.hh gem5-SALAM/src/arch/riscv/pcstate.hh
--- gem5/src/arch/riscv/pcstate.hh	2024-02-22 18:25:43.675604947 -0600
+++ gem5-SALAM/src/arch/riscv/pcstate.hh	2024-02-22 18:17:15.024944079 -0600
@@ -42,7 +42,7 @@
 #ifndef __ARCH_RISCV_PCSTATE_HH__
 #define __ARCH_RISCV_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 
 namespace gem5
 {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/pmp.cc gem5-SALAM/src/arch/riscv/pmp.cc
--- gem5/src/arch/riscv/pmp.cc	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/riscv/pmp.cc	2024-02-22 18:17:15.024944079 -0600
@@ -92,8 +92,8 @@
             match_index = i;
         }
 
-        if ((match_index > -1)
-            && (PMP_OFF != pmpGetAField(pmpTable[match_index].pmpCfg))) {
+        if ((PMP_OFF != pmpGetAField(pmpTable[match_index].pmpCfg))
+                                            && (match_index > -1)) {
             // check the RWX permissions from the pmp entry
             uint8_t allowed_privs = PMP_READ | PMP_WRITE | PMP_EXEC;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/remote_gdb.cc gem5-SALAM/src/arch/riscv/remote_gdb.cc
--- gem5/src/arch/riscv/remote_gdb.cc	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/riscv/remote_gdb.cc	2024-02-22 18:17:15.028944100 -0600
@@ -135,16 +135,16 @@
 
 #include <string>
 
-#include "arch/riscv/gdb-xml/gdb_xml_riscv_cpu.hh"
-#include "arch/riscv/gdb-xml/gdb_xml_riscv_csr.hh"
-#include "arch/riscv/gdb-xml/gdb_xml_riscv_fpu.hh"
-#include "arch/riscv/gdb-xml/gdb_xml_riscv_target.hh"
 #include "arch/riscv/mmu.hh"
 #include "arch/riscv/pagetable_walker.hh"
 #include "arch/riscv/regs/float.hh"
 #include "arch/riscv/regs/int.hh"
 #include "arch/riscv/regs/misc.hh"
 #include "arch/riscv/tlb.hh"
+#include "blobs/gdb_xml_riscv_cpu.hh"
+#include "blobs/gdb_xml_riscv_csr.hh"
+#include "blobs/gdb_xml_riscv_fpu.hh"
+#include "blobs/gdb_xml_riscv_target.hh"
 #include "cpu/thread_state.hh"
 #include "debug/GDBAcc.hh"
 #include "mem/page_table.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/RiscvMMU.py gem5-SALAM/src/arch/riscv/RiscvMMU.py
--- gem5/src/arch/riscv/RiscvMMU.py	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/RiscvMMU.py	2024-02-22 18:17:15.024944079 -0600
@@ -47,8 +47,8 @@
     cxx_class = 'gem5::RiscvISA::MMU'
     cxx_header = 'arch/riscv/mmu.hh'
 
-    itb = RiscvTLB(entry_type="instruction")
-    dtb = RiscvTLB(entry_type="data")
+    itb = RiscvTLB()
+    dtb = RiscvTLB()
     pma_checker = Param.PMAChecker(PMAChecker(), "PMA Checker")
     pmp = Param.PMP(PMP(), "Physical Memory Protection Unit")
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/SConscript gem5-SALAM/src/arch/riscv/SConscript
--- gem5/src/arch/riscv/SConscript	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/SConscript	2024-02-22 18:17:15.024944079 -0600
@@ -77,3 +77,8 @@
 
     # Add in files generated by the ISA description.
     ISADesc('isa/main.isa')
+
+    GdbXml('riscv.xml', 'gdb_xml_riscv_target')
+    GdbXml('riscv-64bit-cpu.xml', 'gdb_xml_riscv_cpu')
+    GdbXml('riscv-64bit-fpu.xml', 'gdb_xml_riscv_fpu')
+    GdbXml('riscv-64bit-csr.xml', 'gdb_xml_riscv_csr')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/SConsopts gem5-SALAM/src/arch/riscv/SConsopts
--- gem5/src/arch/riscv/SConsopts	2024-02-22 18:25:43.671604926 -0600
+++ gem5-SALAM/src/arch/riscv/SConsopts	2024-02-22 18:17:15.024944079 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['riscv'])
+all_isa_list.append('riscv')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/riscv/tlb.hh gem5-SALAM/src/arch/riscv/tlb.hh
--- gem5/src/arch/riscv/tlb.hh	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/riscv/tlb.hh	2024-02-22 18:17:15.028944100 -0600
@@ -75,9 +75,11 @@
 
         statistics::Scalar readHits;
         statistics::Scalar readMisses;
+        statistics::Scalar read_acv;
         statistics::Scalar readAccesses;
         statistics::Scalar writeHits;
         statistics::Scalar writeMisses;
+        statistics::Scalar write_acv;
         statistics::Scalar writeAccesses;
 
         statistics::Formula hits;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/SConscript gem5-SALAM/src/arch/SConscript
--- gem5/src/arch/SConscript	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/arch/SConscript	2024-02-22 18:17:14.972943807 -0600
@@ -51,7 +51,7 @@
 # ISA "switch header" generation.
 #
 # Auto-generate arch headers that include the right ISA-specific
-# header based on the setting of TARGET_ISA setting.
+# header based on the setting of THE_ISA preprocessor variable.
 #
 #################################################################
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/SConsopts gem5-SALAM/src/arch/SConsopts
--- gem5/src/arch/SConsopts	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/arch/SConsopts	2024-02-22 18:17:14.972943807 -0600
@@ -25,12 +25,18 @@
 
 Import('*')
 
+# Define the universe of supported ISAs
+all_isa_list = []
+Export('all_isa_list')
+
+all_gpu_isa_list = []
+Export('all_gpu_isa_list')
+
 def add_isa_lists():
     sticky_vars.AddVariables(
-        EnumVariable('TARGET_ISA', 'Target ISA', 'null',
-            sorted(set(main.Split('${ALL_ISAS}')))),
+        EnumVariable('TARGET_ISA', 'Target ISA', 'null', sorted(all_isa_list)),
         EnumVariable('TARGET_GPU_ISA', 'Target GPU ISA', 'gcn3',
-            sorted(set(main.Split('${ALL_GPU_ISAS}')))),
+            sorted(all_gpu_isa_list)),
         )
 AfterSConsopts(add_isa_lists)
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/faults.cc gem5-SALAM/src/arch/sparc/faults.cc
--- gem5/src/arch/sparc/faults.cc	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/sparc/faults.cc	2024-02-22 18:17:15.028944100 -0600
@@ -817,7 +817,7 @@
 
     Process *p = tc->getProcessPtr();
 
-    [[maybe_unused]] SparcProcess *sp = dynamic_cast<SparcProcess *>(p);
+    GEM5_VAR_USED SparcProcess *sp = dynamic_cast<SparcProcess *>(p);
     assert(sp);
 
     auto *workload = dynamic_cast<SEWorkload *>(tc->getSystemPtr()->workload);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/linux/syscalls.cc gem5-SALAM/src/arch/sparc/linux/syscalls.cc
--- gem5/src/arch/sparc/linux/syscalls.cc	2024-02-22 18:25:43.683604988 -0600
+++ gem5-SALAM/src/arch/sparc/linux/syscalls.cc	2024-02-22 18:17:15.032944121 -0600
@@ -27,7 +27,6 @@
  */
 
 #include "arch/sparc/linux/se_workload.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/syscall_desc.hh"
 #include "sim/syscall_emul.hh"
 
@@ -60,26 +59,25 @@
 getresuidFunc(SyscallDesc *desc, ThreadContext *tc,
               VPtr<> ruid, VPtr<> euid, VPtr<> suid)
 {
-    SETranslatingPortProxy proxy(tc);
     const uint64_t id = htobe(100);
     // Handle the EFAULT case
     // Set the ruid
     if (ruid) {
         BufferArg ruidBuff(ruid, sizeof(uint64_t));
         memcpy(ruidBuff.bufferPtr(), &id, sizeof(uint64_t));
-        ruidBuff.copyOut(proxy);
+        ruidBuff.copyOut(tc->getVirtProxy());
     }
     // Set the euid
     if (euid) {
         BufferArg euidBuff(euid, sizeof(uint64_t));
         memcpy(euidBuff.bufferPtr(), &id, sizeof(uint64_t));
-        euidBuff.copyOut(proxy);
+        euidBuff.copyOut(tc->getVirtProxy());
     }
     // Set the suid
     if (suid) {
         BufferArg suidBuff(suid, sizeof(uint64_t));
         memcpy(suidBuff.bufferPtr(), &id, sizeof(uint64_t));
-        suidBuff.copyOut(proxy);
+        suidBuff.copyOut(tc->getVirtProxy());
     }
     return 0;
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/pcstate.hh gem5-SALAM/src/arch/sparc/pcstate.hh
--- gem5/src/arch/sparc/pcstate.hh	2024-02-22 18:16:36.500742674 -0600
+++ gem5-SALAM/src/arch/sparc/pcstate.hh	2024-02-22 18:17:15.032944121 -0600
@@ -29,7 +29,7 @@
 #ifndef __ARCH_SPARC_PCSTATE_HH__
 #define __ARCH_SPARC_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 
 namespace gem5
 {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/SConsopts gem5-SALAM/src/arch/sparc/SConsopts
--- gem5/src/arch/sparc/SConsopts	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/sparc/SConsopts	2024-02-22 18:17:15.028944100 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['sparc'])
+all_isa_list.append('sparc')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/se_workload.cc gem5-SALAM/src/arch/sparc/se_workload.cc
--- gem5/src/arch/sparc/se_workload.cc	2024-02-22 18:25:43.687605009 -0600
+++ gem5-SALAM/src/arch/sparc/se_workload.cc	2024-02-22 18:17:15.032944121 -0600
@@ -33,7 +33,6 @@
 #include "arch/sparc/types.hh"
 #include "base/logging.hh"
 #include "cpu/thread_context.hh"
-#include "mem/se_translating_port_proxy.hh"
 
 namespace gem5
 {
@@ -106,8 +105,6 @@
     const size_t reg_bytes = is_64 ? 8 : 4;
     uint8_t bytes[8];
 
-    SETranslatingPortProxy proxy(tc);
-
     CWP = (CWP + Cansave + 2) % NWindows;
     while (NWindows - 2 - Cansave != 0) {
         panic_if(Otherwin, "Otherwin non-zero.");
@@ -125,7 +122,7 @@
                 uint32_t regVal = htobe<uint32_t>(tc->readIntReg(index));
                 memcpy(bytes, &regVal, reg_bytes);
             }
-            if (!proxy.tryWriteBlob(addr, bytes, reg_bytes)) {
+            if (!tc->getVirtProxy().tryWriteBlob(addr, bytes, reg_bytes)) {
                 warn("Failed to save register to the stack when "
                         "flushing windows.");
             }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/se_workload.hh gem5-SALAM/src/arch/sparc/se_workload.hh
--- gem5/src/arch/sparc/se_workload.hh	2024-02-22 18:25:43.687605009 -0600
+++ gem5-SALAM/src/arch/sparc/se_workload.hh	2024-02-22 18:17:15.032944121 -0600
@@ -83,8 +83,8 @@
 
 template <typename ABI>
 struct Result<ABI, SyscallReturn,
-    typename std::enable_if_t<std::is_base_of_v<
-        SparcISA::SEWorkload::BaseSyscallABI, ABI>>>
+    typename std::enable_if_t<std::is_base_of<
+        SparcISA::SEWorkload::BaseSyscallABI, ABI>::value>>
 {
     static void
     store(ThreadContext *tc, const SyscallReturn &ret)
@@ -118,8 +118,8 @@
 template <typename Arg>
 struct Argument<SparcISA::SEWorkload::SyscallABI32, Arg,
     typename std::enable_if_t<
-        std::is_integral_v<Arg> &&
-        SparcISA::SEWorkload::SyscallABI32::IsWideV<Arg>>>
+        std::is_integral<Arg>::value &&
+        SparcISA::SEWorkload::SyscallABI32::IsWide<Arg>::value>>
 {
     using ABI = SparcISA::SEWorkload::SyscallABI32;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/SparcMMU.py gem5-SALAM/src/arch/sparc/SparcMMU.py
--- gem5/src/arch/sparc/SparcMMU.py	2024-02-22 18:25:43.679604968 -0600
+++ gem5-SALAM/src/arch/sparc/SparcMMU.py	2024-02-22 18:17:15.028944100 -0600
@@ -44,5 +44,5 @@
     type = 'SparcMMU'
     cxx_class = 'gem5::SparcISA::MMU'
     cxx_header = 'arch/sparc/mmu.hh'
-    itb = SparcTLB(entry_type="instruction")
-    dtb = SparcTLB(entry_type="data")
+    itb = SparcTLB()
+    dtb = SparcTLB()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/sparc/tlb.cc gem5-SALAM/src/arch/sparc/tlb.cc
--- gem5/src/arch/sparc/tlb.cc	2024-02-22 18:16:36.500742674 -0600
+++ gem5-SALAM/src/arch/sparc/tlb.cc	2024-02-22 18:17:15.032944121 -0600
@@ -1252,7 +1252,7 @@
         break;
       case ASI_ITLB_DATA_ACCESS_REG:
         entry_insert = bits(va, 8,3);
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case ASI_ITLB_DATA_IN_REG:
         assert(entry_insert != -1 || mbits(va,10,9) == va);
         ta_insert = itb->tag_access;
@@ -1267,7 +1267,7 @@
         break;
       case ASI_DTLB_DATA_ACCESS_REG:
         entry_insert = bits(va, 8,3);
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case ASI_DTLB_DATA_IN_REG:
         assert(entry_insert != -1 || mbits(va,10,9) == va);
         ta_insert = tag_access;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/bios/acpi.hh gem5-SALAM/src/arch/x86/bios/acpi.hh
--- gem5/src/arch/x86/bios/acpi.hh	2024-02-22 18:16:36.500742674 -0600
+++ gem5-SALAM/src/arch/x86/bios/acpi.hh	2024-02-22 18:17:15.032944121 -0600
@@ -107,7 +107,7 @@
         uint8_t revision = 0;
         uint32_t rsdtAddress = 0;
     };
-    static_assert(std::is_trivially_copyable_v<MemR0>,
+    static_assert(std::is_trivially_copyable<MemR0>::value,
             "Type not suitable for memcpy.");
 
     struct GEM5_PACKED Mem : public MemR0
@@ -118,7 +118,7 @@
         uint8_t extendedChecksum = 0;
         uint8_t _reserved[3] = {};
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy,");
 
     RSDT* rsdt;
@@ -148,7 +148,7 @@
         uint32_t creatorID = 0;
         uint32_t creatorRevision = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     virtual Addr writeBuf(PortProxy& phys_proxy, Allocator& alloc,
@@ -215,7 +215,7 @@
         uint8_t type = 0;
         uint8_t length = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     uint8_t type;
@@ -245,7 +245,7 @@
         uint8_t apicId = 0;
         uint32_t flags = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     void prepareBuf(std::vector<uint8_t>& mem) const override;
@@ -266,7 +266,7 @@
         uint32_t ioApicAddress = 0;
         uint32_t intBase = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     void prepareBuf(std::vector<uint8_t>& mem) const override;
@@ -287,7 +287,7 @@
         uint32_t globalSystemInterrupt = 0;
         uint16_t flags = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     void prepareBuf(std::vector<uint8_t>& mem) const override;
@@ -307,7 +307,7 @@
         uint16_t flags = 0;
         uint8_t lintNo = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     void prepareBuf(std::vector<uint8_t>& mem) const override;
@@ -326,7 +326,7 @@
         uint16_t _reserved = 0;
         uint64_t localAPICAddress = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     void prepareBuf(std::vector<uint8_t>& mem) const override;
@@ -345,7 +345,7 @@
         uint32_t localAPICAddress = 0;
         uint32_t flags = 0;
     };
-    static_assert(std::is_trivially_copyable_v<Mem>,
+    static_assert(std::is_trivially_copyable<Mem>::value,
             "Type not suitable for memcpy.");
 
     std::vector<Record *> records;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/insts/micromediaop.hh gem5-SALAM/src/arch/x86/insts/micromediaop.hh
--- gem5/src/arch/x86/insts/micromediaop.hh	2024-02-22 18:25:43.695605051 -0600
+++ gem5-SALAM/src/arch/x86/insts/micromediaop.hh	2024-02-22 18:17:15.036944142 -0600
@@ -84,8 +84,7 @@
     }
 
   public:
-    uint8_t getSrcSize() const { return srcSize; }
-    uint8_t getDestSize() const { return destSize; }
+    static constexpr uint8_t dataSize = 0;
 };
 
 } // namespace X86ISA
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/insts/microop_args.hh gem5-SALAM/src/arch/x86/insts/microop_args.hh
--- gem5/src/arch/x86/insts/microop_args.hh	2024-02-22 18:25:43.695605051 -0600
+++ gem5-SALAM/src/arch/x86/insts/microop_args.hh	2024-02-22 18:17:15.036944142 -0600
@@ -32,7 +32,6 @@
 #include <sstream>
 #include <string>
 #include <tuple>
-#include <type_traits>
 #include <utility>
 
 #include "arch/x86/insts/static_inst.hh"
@@ -56,10 +55,6 @@
     RegIndex opIndex() const { return dest; }
 
     DestOp(RegIndex _dest, size_t _size) : dest(_dest), size(_size) {}
-    template <class InstType>
-    DestOp(RegIndex _dest, InstType *inst) : dest(_dest),
-        size(inst->getDestSize())
-    {}
 };
 
 struct Src1Op
@@ -69,10 +64,6 @@
     RegIndex opIndex() const { return src1; }
 
     Src1Op(RegIndex _src1, size_t _size) : src1(_src1), size(_size) {}
-    template <class InstType>
-    Src1Op(RegIndex _src1, InstType *inst) : src1(_src1),
-        size(inst->getSrcSize())
-    {}
 };
 
 struct Src2Op
@@ -82,10 +73,6 @@
     RegIndex opIndex() const { return src2; }
 
     Src2Op(RegIndex _src2, size_t _size) : src2(_src2), size(_size) {}
-    template <class InstType>
-    Src2Op(RegIndex _src2, InstType *inst) : src2(_src2),
-        size(inst->getSrcSize())
-    {}
 };
 
 struct DataOp
@@ -116,29 +103,13 @@
     {}
 };
 
-template <class T, class Enabled=void>
-struct HasDataSize : public std::false_type {};
-
-template <class T>
-struct HasDataSize<T, decltype((void)&T::dataSize)> : public std::true_type {};
-
-template <class T>
-constexpr bool HasDataSizeV = HasDataSize<T>::value;
-
 template <class Base>
 struct IntOp : public Base
 {
     using ArgType = GpRegIndex;
 
-    template <class Inst>
-    IntOp(Inst *inst, std::enable_if_t<HasDataSizeV<Inst>, ArgType> idx) :
-        Base(idx.index, inst->dataSize)
-    {}
-
-    template <class Inst>
-    IntOp(Inst *inst, std::enable_if_t<!HasDataSizeV<Inst>, ArgType> idx) :
-        Base(idx.index, inst)
-    {}
+    template <class InstType>
+    IntOp(InstType *inst, ArgType idx) : Base(idx.index, inst->dataSize) {}
 
     void
     print(std::ostream &os) const
@@ -233,15 +204,8 @@
 {
     using ArgType = FpRegIndex;
 
-    template <class Inst>
-    FloatOp(Inst *inst, std::enable_if_t<HasDataSizeV<Inst>, ArgType> idx) :
-        Base(idx.index, inst->dataSize)
-    {}
-
-    template <class Inst>
-    FloatOp(Inst *inst, std::enable_if_t<!HasDataSizeV<Inst>, ArgType> idx) :
-        Base(idx.index, inst)
-    {}
+    template <class InstType>
+    FloatOp(InstType *inst, ArgType idx) : Base(idx.index, inst->dataSize) {}
 
     void
     print(std::ostream &os) const
@@ -385,7 +349,7 @@
     template <std::size_t ...I, typename ...CTorArgs>
     InstOperands(std::index_sequence<I...>, ExtMachInst mach_inst,
             const char *mnem, const char *inst_mnem, uint64_t set_flags,
-            OpClass op_class, [[maybe_unused]] ArgTuple args,
+            OpClass op_class, GEM5_VAR_USED ArgTuple args,
             CTorArgs... ctor_args) :
         Base(mach_inst, mnem, inst_mnem, set_flags, op_class, ctor_args...),
         Operands(this, std::get<I>(args))...
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/formats/cpuid.isa gem5-SALAM/src/arch/x86/isa/formats/cpuid.isa
--- gem5/src/arch/x86/isa/formats/cpuid.isa	2024-02-22 18:25:43.699605072 -0600
+++ gem5-SALAM/src/arch/x86/isa/formats/cpuid.isa	2024-02-22 18:17:15.036944142 -0600
@@ -60,6 +60,8 @@
         std::stringstream response;
 
         printMnemonic(response, mnemonic);
+        ccprintf(response, " ");
+        printReg(response, srcRegIdx(0), machInst.opSize);
         return response.str();
     }
 }};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/formats/monitor_mwait.isa gem5-SALAM/src/arch/x86/isa/formats/monitor_mwait.isa
--- gem5/src/arch/x86/isa/formats/monitor_mwait.isa	2024-02-22 18:25:43.699605072 -0600
+++ gem5-SALAM/src/arch/x86/isa/formats/monitor_mwait.isa	2024-02-22 18:17:15.036944142 -0600
@@ -27,6 +27,8 @@
         std::stringstream response;
 
         printMnemonic(response, mnemonic);
+        ccprintf(response, " ");
+        printReg(response, srcRegIdx(0), machInst.opSize);
         return response.str();
     }
 }};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/formats/syscall.isa gem5-SALAM/src/arch/x86/isa/formats/syscall.isa
--- gem5/src/arch/x86/isa/formats/syscall.isa	2024-02-22 18:25:43.703605093 -0600
+++ gem5-SALAM/src/arch/x86/isa/formats/syscall.isa	2024-02-22 18:17:15.036944142 -0600
@@ -64,7 +64,10 @@
             Addr PC, const loader::SymbolTable *symtab) const
     {
         std::stringstream response;
+
         printMnemonic(response, mnemonic);
+        ccprintf(response, " ");
+        printReg(response, srcRegIdx(0), machInst.opSize);
         return response.str();
     }
 }};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/microops/base.isa gem5-SALAM/src/arch/x86/isa/microops/base.isa
--- gem5/src/arch/x86/isa/microops/base.isa	2024-02-22 18:25:43.747605323 -0600
+++ gem5-SALAM/src/arch/x86/isa/microops/base.isa	2024-02-22 18:17:15.048944204 -0600
@@ -213,7 +213,7 @@
                 Macroop * macroop = dynamic_cast<Macroop *>(curMacroop.get());
                 const ExtMachInst &machInst =
                     macroop ? macroop->getExtMachInst() : dummyExtMachInst;
-                [[maybe_unused]] const EmulEnv &env =
+                GEM5_VAR_USED const EmulEnv &env =
                     macroop ? macroop->getEmulEnv() : dummyEmulEnv;
                 using namespace rom_labels;
                 return %s;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/microops/ldstop.isa gem5-SALAM/src/arch/x86/isa/microops/ldstop.isa
--- gem5/src/arch/x86/isa/microops/ldstop.isa	2024-02-22 18:25:43.747605323 -0600
+++ gem5-SALAM/src/arch/x86/isa/microops/ldstop.isa	2024-02-22 18:17:15.048944204 -0600
@@ -518,10 +518,10 @@
                                implicitStack=True)
     defineMicroLoadOp('Ldst', 'Data = merge(Data, data, Mem, dataSize);',
                               'Data = Mem & mask(dataSize * 8);',
-                      'Request::READ_MODIFY_WRITE')
+                      '(StoreCheck << FlagShift)')
     defineMicroLoadOp('Ldstl', 'Data = merge(Data, data, Mem, dataSize);',
                                'Data = Mem & mask(dataSize * 8);',
-                      'Request::READ_MODIFY_WRITE | Request::LOCKED_RMW',
+                      '(StoreCheck << FlagShift) | Request::LOCKED_RMW',
                       nonSpec=True)
 
     defineMicroLoadOp('Ldfp', code='FpData_uqw = Mem', big=False,
@@ -599,10 +599,10 @@
     '''
 
     defineMicroLoadSplitOp('LdSplit', code,
-                           'Request::READ_MODIFY_WRITE')
+                           '(StoreCheck << FlagShift)')
 
     defineMicroLoadSplitOp('LdSplitl', code,
-                           'Request::READ_MODIFY_WRITE | Request::LOCKED_RMW',
+                           '(StoreCheck << FlagShift) | Request::LOCKED_RMW',
                            nonSpec=True)
 
     def defineMicroStoreOp(mnemonic, code, completeCode="", mem_flags="0",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/microops/regop.isa gem5-SALAM/src/arch/x86/isa/microops/regop.isa
--- gem5/src/arch/x86/isa/microops/regop.isa	2024-02-22 18:25:43.747605323 -0600
+++ gem5-SALAM/src/arch/x86/isa/microops/regop.isa	2024-02-22 18:17:15.048944204 -0600
@@ -50,7 +50,7 @@
         %(op_decl)s;
         %(op_rd)s;
 
-        [[maybe_unused]] RegVal result;
+        GEM5_VAR_USED RegVal result;
 
         if (%(cond_check)s) {
             %(code)s;
@@ -1400,7 +1400,7 @@
             '''
 
     # Microops for manipulating segmentation registers
-    class SegOp(RegOp):
+    class SegOp(CondRegOp):
         abstract = True
         operand_types = (SegDestOp, FoldedSrc1Op)
         def __init__(self, dest, src1, flags=None, dataSize="env.dataSize"):
@@ -1504,7 +1504,7 @@
                     fault = std::make_shared<GeneralProtection>(selector);
                     break;
                 }
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
               case SegIntGateCheck:
                 // Make sure the gate's the right type.
                 if ((m5reg.mode == LongMode && (desc.type & 0xe) != 0xe) ||
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa/operands.isa gem5-SALAM/src/arch/x86/isa/operands.isa
--- gem5/src/arch/x86/isa/operands.isa	2024-02-22 18:25:43.747605323 -0600
+++ gem5-SALAM/src/arch/x86/isa/operands.isa	2024-02-22 18:17:15.048944204 -0600
@@ -153,22 +153,27 @@
         # would be retained, the write predicate checks if any of the bits
         # are being written.
 
-        'PredccFlagBits': ('CCReg', 'uqw', 'X86ISA::CCREG_ZAPS', None,
+        'PredccFlagBits': ('CCReg', 'uqw', '(X86ISA::CCREG_ZAPS)', None,
                 60, None, None,
-                '(ext & X86ISA::ccFlagMask) != X86ISA::ccFlagMask && '
-                '(ext & X86ISA::ccFlagMask) != 0',
-                '(ext & X86ISA::ccFlagMask) != 0'),
-        'PredcfofBits':   ('CCReg', 'uqw', 'X86ISA::CCREG_CFOF', None,
-                61, None, None,
-                '(ext & X86ISA::cfofMask) != X86ISA::cfofMask && '
-                '(ext & X86ISA::cfofMask) != 0',
-                '(ext & X86ISA::cfofMask) != 0'),
-        'PreddfBit':     ('CCReg', 'uqw', 'X86ISA::CCREG_DF', None,
-                62, None, None, 'false', '(ext & X86ISA::DFBit) != 0'),
-        'PredecfBit':    ('CCReg', 'uqw', 'X86ISA::CCREG_ECF', None,
-                63, None, None, 'false', '(ext & X86ISA::ECFBit) != 0'),
-        'PredezfBit':    ('CCReg', 'uqw', 'X86ISA::CCREG_EZF', None,
-                64, None, None, 'false', '(ext & X86ISA::EZFBit) != 0'),
+                '''(((ext & (X86ISA::PFBit | X86ISA::AFBit |
+                          X86ISA::ZFBit | X86ISA::SFBit)) !=
+                  (X86ISA::PFBit | X86ISA::AFBit |
+                   X86ISA::ZFBit | X86ISA::SFBit)) &&
+                ((ext & (X86ISA::PFBit | X86ISA::AFBit |
+                         X86ISA::ZFBit | X86ISA::SFBit)) != 0))''',
+                '''((ext & (X86ISA::PFBit | X86ISA::AFBit |
+                            X86ISA::ZFBit | X86ISA::SFBit)) != 0)'''),
+        'PredcfofBits':   ('CCReg', 'uqw', '(X86ISA::CCREG_CFOF)', None,
+                61, None, None, '''(((ext & X86ISA::CFBit) == 0 ||
+                (ext & X86ISA::OFBit) == 0) &&
+                    ((ext & (X86ISA::CFBit | X86ISA::OFBit)) != 0))''',
+                '((ext & (X86ISA::CFBit | X86ISA::OFBit)) != 0)'),
+        'PreddfBit':   ('CCReg', 'uqw', '(X86ISA::CCREG_DF)', None,
+                62, None, None, '(false)', '((ext & X86ISA::DFBit) != 0)'),
+        'PredecfBit':   ('CCReg', 'uqw', '(X86ISA::CCREG_ECF)', None,
+                63, None, None, '(false)', '((ext & X86ISA::ECFBit) != 0)'),
+        'PredezfBit':   ('CCReg', 'uqw', '(X86ISA::CCREG_EZF)', None,
+                64, None, None, '(false)', '((ext & X86ISA::EZFBit) != 0)'),
 
         # These register should needs to be more protected so that later
         # instructions don't map their indexes with an old value.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/isa.cc gem5-SALAM/src/arch/x86/isa.cc
--- gem5/src/arch/x86/isa.cc	2024-02-22 18:25:43.695605051 -0600
+++ gem5-SALAM/src/arch/x86/isa.cc	2024-02-22 18:17:15.036944142 -0600
@@ -381,7 +381,7 @@
         break;
       case MISCREG_DR4:
         miscReg = MISCREG_DR6;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_DR6:
         {
             DR6 dr6 = regVal[MISCREG_DR6];
@@ -398,7 +398,7 @@
         break;
       case MISCREG_DR5:
         miscReg = MISCREG_DR7;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_DR7:
         {
             DR7 dr7 = regVal[MISCREG_DR7];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/ldstflags.hh gem5-SALAM/src/arch/x86/ldstflags.hh
--- gem5/src/arch/x86/ldstflags.hh	2024-02-22 18:25:43.751605344 -0600
+++ gem5-SALAM/src/arch/x86/ldstflags.hh	2024-02-22 18:17:15.048944204 -0600
@@ -50,12 +50,13 @@
  */
 namespace X86ISA
 {
-    [[maybe_unused]] const Request::FlagsType SegmentFlagMask = mask(4);
+    GEM5_VAR_USED const Request::FlagsType SegmentFlagMask = mask(4);
     const int FlagShift = 4;
     enum FlagBit
     {
         CPL0FlagBit = 1,
         AddrSizeFlagBit = 2,
+        StoreCheck = 4
     };
 } // namespace X86ISA
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/linux/linux.hh gem5-SALAM/src/arch/x86/linux/linux.hh
--- gem5/src/arch/x86/linux/linux.hh	2024-02-22 18:25:43.751605344 -0600
+++ gem5-SALAM/src/arch/x86/linux/linux.hh	2024-02-22 18:17:15.048944204 -0600
@@ -81,7 +81,8 @@
 
 template <typename ABI>
 struct Result<ABI, SyscallReturn,
-    typename std::enable_if_t<std::is_base_of_v<X86Linux::SyscallABI, ABI>>>
+    typename std::enable_if_t<std::is_base_of<
+        X86Linux::SyscallABI, ABI>::value>>
 {
     static void
     store(ThreadContext *tc, const SyscallReturn &ret)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/linux/se_workload.cc gem5-SALAM/src/arch/x86/linux/se_workload.cc
--- gem5/src/arch/x86/linux/se_workload.cc	2024-02-22 18:25:43.751605344 -0600
+++ gem5-SALAM/src/arch/x86/linux/se_workload.cc	2024-02-22 18:17:15.048944204 -0600
@@ -48,7 +48,6 @@
 #include "base/trace.hh"
 #include "cpu/thread_context.hh"
 #include "kern/linux/linux.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/process.hh"
 #include "sim/syscall_desc.hh"
 #include "sim/syscall_emul.hh"
@@ -153,7 +152,7 @@
 {
     Process *p = tc->getProcessPtr();
     if (!p->fixupFault(tc->readMiscReg(MISCREG_CR2))) {
-        SETranslatingPortProxy proxy(tc);
+        PortProxy &proxy = tc->getVirtProxy();
         // at this point we should have 6 values on the interrupt stack
         int size = 6;
         uint64_t is[size];
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/linux/se_workload.hh gem5-SALAM/src/arch/x86/linux/se_workload.hh
--- gem5/src/arch/x86/linux/se_workload.hh	2024-02-22 18:25:43.751605344 -0600
+++ gem5-SALAM/src/arch/x86/linux/se_workload.hh	2024-02-22 18:17:15.048944204 -0600
@@ -99,8 +99,8 @@
 
 template <typename Arg>
 struct Argument<X86ISA::EmuLinux::SyscallABI32, Arg,
-    typename std::enable_if_t<std::is_integral_v<Arg> &&
-        X86ISA::EmuLinux::SyscallABI32::IsWideV<Arg>>>
+    typename std::enable_if_t<std::is_integral<Arg>::value &&
+        X86ISA::EmuLinux::SyscallABI32::IsWide<Arg>::value>>
 {
     using ABI = X86ISA::EmuLinux::SyscallABI32;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/linux/syscalls.cc gem5-SALAM/src/arch/x86/linux/syscalls.cc
--- gem5/src/arch/x86/linux/syscalls.cc	2024-02-22 18:25:43.751605344 -0600
+++ gem5-SALAM/src/arch/x86/linux/syscalls.cc	2024-02-22 18:17:15.048944204 -0600
@@ -33,7 +33,6 @@
 #include "base/trace.hh"
 #include "cpu/thread_context.hh"
 #include "kern/linux/linux.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/process.hh"
 #include "sim/syscall_desc.hh"
 #include "sim/syscall_emul.hh"
@@ -71,7 +70,7 @@
     };
 
     uint64_t fsBase, gsBase;
-    SETranslatingPortProxy p(tc);
+    PortProxy &p = tc->getVirtProxy();
     switch(code)
     {
       // Each of these valid options should actually check addr.
@@ -105,7 +104,6 @@
     const int maxTLSEntry = minTLSEntry + numTLSEntries - 1;
 
     auto process = tc->getProcessPtr();
-    SETranslatingPortProxy proxy(tc);
 
     X86Process *x86p = dynamic_cast<X86Process *>(process);
     assert(x86p);
@@ -116,7 +114,7 @@
         gdt(x86p->gdtStart() + minTLSEntry * sizeof(uint64_t),
             numTLSEntries * sizeof(uint64_t));
 
-    if (!gdt.copyIn(proxy))
+    if (!gdt.copyIn(tc->getVirtProxy()))
         panic("Failed to copy in GDT for %s.\n", desc->name());
 
     if (userDesc->entry_number == (uint32_t)(-1)) {
@@ -168,7 +166,7 @@
 
     gdt[index] = (uint64_t)segDesc;
 
-    if (!gdt.copyOut(proxy))
+    if (!gdt.copyOut(tc->getVirtProxy()))
         panic("Failed to copy out GDT for %s.\n", desc->name());
 
     return 0;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/pcstate.hh gem5-SALAM/src/arch/x86/pcstate.hh
--- gem5/src/arch/x86/pcstate.hh	2024-02-22 18:25:43.755605365 -0600
+++ gem5-SALAM/src/arch/x86/pcstate.hh	2024-02-22 18:17:15.048944204 -0600
@@ -38,7 +38,7 @@
 #ifndef __ARCH_X86_PCSTATE_HH__
 #define __ARCH_X86_PCSTATE_HH__
 
-#include "arch/generic/pcstate.hh"
+#include "arch/generic/types.hh"
 #include "sim/serialize.hh"
 
 namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/SConsopts gem5-SALAM/src/arch/x86/SConsopts
--- gem5/src/arch/x86/SConsopts	2024-02-22 18:25:43.687605009 -0600
+++ gem5-SALAM/src/arch/x86/SConsopts	2024-02-22 18:17:15.032944121 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_ISAS=['x86'])
+all_isa_list.append('x86')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/tlb.cc gem5-SALAM/src/arch/x86/tlb.cc
--- gem5/src/arch/x86/tlb.cc	2024-02-22 18:25:43.755605365 -0600
+++ gem5-SALAM/src/arch/x86/tlb.cc	2024-02-22 18:17:15.048944204 -0600
@@ -313,7 +313,7 @@
 {
     Request::Flags flags = req->getFlags();
     int seg = flags & SegmentFlagMask;
-    bool storeCheck = flags & Request::READ_MODIFY_WRITE;
+    bool storeCheck = flags & (StoreCheck << FlagShift);
 
     delayedResponse = false;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/arch/x86/X86MMU.py gem5-SALAM/src/arch/x86/X86MMU.py
--- gem5/src/arch/x86/X86MMU.py	2024-02-22 18:25:43.687605009 -0600
+++ gem5-SALAM/src/arch/x86/X86MMU.py	2024-02-22 18:17:15.032944121 -0600
@@ -42,8 +42,8 @@
     type = 'X86MMU'
     cxx_class = 'gem5::X86ISA::MMU'
     cxx_header = 'arch/x86/mmu.hh'
-    itb = X86TLB(entry_type="instruction")
-    dtb = X86TLB(entry_type="data")
+    itb = X86TLB()
+    dtb = X86TLB()
 
     @classmethod
     def walkerPorts(cls):
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/addr_range.hh gem5-SALAM/src/base/addr_range.hh
--- gem5/src/base/addr_range.hh	2024-02-22 18:25:43.759605387 -0600
+++ gem5-SALAM/src/base/addr_range.hh	2024-02-22 18:17:15.052944225 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2014, 2017-2019, 2021 Arm Limited
+ * Copyright (c) 2012, 2014, 2017-2019 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -334,7 +334,7 @@
     {
         if (interleaved()) {
             std::string str;
-            for (unsigned int i = 0; i < masks.size(); i++) {
+            for (int i = 0; i < masks.size(); i++) {
                 str += " ";
                 Addr mask = masks[i];
                 while (mask) {
@@ -443,7 +443,7 @@
         bool in_range = a >= _start && a < _end;
         if (in_range) {
             auto sel = 0;
-            for (unsigned int i = 0; i < masks.size(); i++) {
+            for (int i = 0; i < masks.size(); i++) {
                 Addr masked = a & masks[i];
                 // The result of an xor operation is 1 if the number
                 // of bits set is odd or 0 othersize, thefore it
@@ -490,7 +490,7 @@
 
         // Get the LSB set from each mask
         int masks_lsb[masks.size()];
-        for (unsigned int i = 0; i < masks.size(); i++) {
+        for (int i = 0; i < masks.size(); i++) {
             masks_lsb[i] = ctz64(masks[i]);
         }
 
@@ -498,7 +498,7 @@
         // discard them one by one starting.
         std::sort(masks_lsb, masks_lsb + masks.size());
 
-        for (unsigned int i = 0; i < masks.size(); i++) {
+        for (int i = 0; i < masks.size(); i++) {
             const int intlv_bit = masks_lsb[i];
             if (intlv_bit > 0) {
                 // on every iteration we remove one bit from the input
@@ -528,13 +528,13 @@
 
         // Get the LSB set from each mask
         int masks_lsb[masks.size()];
-        for (unsigned int i = 0; i < masks.size(); i++) {
+        for (int i = 0; i < masks.size(); i++) {
             masks_lsb[i] = ctz64(masks[i]);
         }
 
         // Add bits one-by-one from the LSB side.
         std::sort(masks_lsb, masks_lsb + masks.size());
-        for (unsigned int i = 0; i < masks.size(); i++) {
+        for (int i = 0; i < masks.size(); i++) {
             const int intlv_bit = masks_lsb[i];
             if (intlv_bit > 0) {
                 // on every iteration we add one bit from the input
@@ -547,7 +547,7 @@
             }
         }
 
-        for (unsigned int i = 0; i < masks.size(); i++) {
+        for (int i = 0; i < masks.size(); i++) {
             const int lsb = ctz64(masks[i]);
             const Addr intlv_bit = bits(intlvMatch, i);
             // Calculate the mask ignoring the LSB
@@ -586,62 +586,6 @@
     }
 
     /**
-     * Subtract a list of intervals from the range and return
-     * the resulting collection of ranges, so that the union
-     * of the two lists cover the original range
-     *
-     * The exclusion list can contain overlapping ranges
-     * Interleaving ranges are not supported and will fail the
-     * assertion.
-     *
-     * @param the input exclusion list
-     * @return the resulting collection of ranges
-     *
-     * @ingroup api_addr_range
-     */
-    std::vector<AddrRange>
-    exclude(const std::vector<AddrRange> &exclude_ranges)
-    {
-        assert(!interleaved());
-
-        auto sorted_ranges = exclude_ranges;
-        std::sort(sorted_ranges.begin(), sorted_ranges.end());
-
-        std::vector<AddrRange> ranges;
-
-        Addr next_start = start();
-        for (const auto &e : sorted_ranges) {
-            assert(!e.interleaved());
-            if (!intersects(e)) {
-                continue;
-            }
-
-            if (e.start() <= next_start) {
-                if (e.end() < end()) {
-                    if (next_start < e.end()) {
-                        next_start = e.end();
-                    }
-                } else {
-                    return ranges;
-                }
-            } else {
-                ranges.push_back(AddrRange(next_start, e.start()));
-                if (e.end() < end()) {
-                    next_start = e.end();
-                } else {
-                    return ranges;
-                }
-            }
-        }
-
-        if (next_start < end()) {
-            ranges.push_back(AddrRange(next_start, end()));
-        }
-
-        return ranges;
-    }
-
-    /**
      * Less-than operator used to turn an STL map into a binary search
      * tree of non-overlapping address ranges.
      *
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/addr_range.test.cc gem5-SALAM/src/base/addr_range.test.cc
--- gem5/src/base/addr_range.test.cc	2024-02-22 18:25:43.759605387 -0600
+++ gem5-SALAM/src/base/addr_range.test.cc	2024-02-22 18:17:15.052944225 -0600
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2019 The Regents of the University of California
- * Copyright (c) 2018-2019, 2021 Arm Limited
+ * Copyright (c) 2018-2019 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -1090,348 +1090,3 @@
     EXPECT_EQ(0x5, r.start());
     EXPECT_EQ(0xA, r.end());
 }
-
-/*
- * The exclude list is excluding the entire range: return an empty
- * list of ranges
- *
- * |---------------------|
- * |       range         |
- * |---------------------|
- *
- * |------------------------------|
- * |       exclude_range          |
- * |------------------------------|
- */
-TEST(AddrRangeTest, ExcludeAll)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x0, 0x200)
-    };
-
-    AddrRange r(0x00, 0x100);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_TRUE(ranges.empty());
-}
-
-/*
- * The exclude list is excluding the entire range: return an empty
- * list of ranges. The exclude_range = range
- *
- * |---------------------|
- * |       range         |
- * |---------------------|
- *
- * |---------------------|
- * |    exclude_range    |
- * |---------------------|
- */
-TEST(AddrRangeTest, ExcludeAllEqual)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x0, 0x100)
-    };
-
-    AddrRange r(0x00, 0x100);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_TRUE(ranges.empty());
-}
-
-/*
- * The exclude list is made of multiple adjacent ranges covering the entire
- * interval: return an empty list of ranges.
- *
- * |---------------------------------------------------------------|
- * |                            range                              |
- * |---------------------------------------------------------------|
- *
- * |--------------------------|---------------|--------------------------|
- * |       exclude_range      | exclude_range |       exclude_range      |
- * |--------------------------|---------------|--------------------------|
- */
-TEST(AddrRangeTest, ExcludeAllMultiple)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x0, 0x30),
-        AddrRange(0x30, 0x40),
-        AddrRange(0x40, 0x120)
-    };
-
-    AddrRange r(0x00, 0x100);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_TRUE(ranges.empty());
-}
-
-/*
- * ExcludeAllOverlapping:
- * The exclude list is made of multiple overlapping ranges covering the entire
- * interval: return an empty list of ranges.
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *  |-----------------------------|
- *  |       exclude_range         |
- *  |-----------------------------|
- *                          |-----------------------------|
- *                          |       exclude_range         |
- *                          |-----------------------------|
- */
-TEST(AddrRangeTest, ExcludeAllOverlapping)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x0, 0x150),
-        AddrRange(0x140, 0x220)
-    };
-
-    AddrRange r(0x100, 0x200);
-
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_TRUE(ranges.empty());
-}
-
-/*
- * The exclude list is empty:
- * the return list contains the unmodified range
- *
- * |---------------------|
- * |       range         |
- * |---------------------|
- *
- */
-TEST(AddrRangeTest, ExcludeEmpty)
-{
-    const std::vector<AddrRange> exclude_ranges;
-
-    AddrRange r(0x00, 0x100);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 1);
-    EXPECT_EQ(ranges.front(), r);
-}
-
-
-/*
- * Ranges do not overlap:
- * the return list contains the unmodified range
- *
- * |---------------------|
- * |       range         |
- * |---------------------|
- *
- *                       |------------------------------|
- *                       |       exclude_range          |
- *                       |------------------------------|
- */
-TEST(AddrRangeTest, NoExclusion)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x100, 0x200)
-    };
-
-    AddrRange r(0x00, 0x100);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 1);
-    EXPECT_EQ(ranges.front(), r);
-}
-
-/*
- * DoubleExclusion:
- * The exclusion should return two ranges:
- * AddrRange(0x130, 0x140)
- * AddrRange(0x170, 0x200)
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *  |-----------------|  |-----------------|
- *  |  exclude_range  |  |  exclude_range  |
- *  |-----------------|  |-----------------|
- */
-TEST(AddrRangeTest, DoubleExclusion)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x000, 0x130),
-        AddrRange(0x140, 0x170),
-    };
-
-    const AddrRange expected_range1(0x130, 0x140);
-    const AddrRange expected_range2(0x170, 0x200);
-
-    AddrRange r(0x100, 0x200);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 2);
-    EXPECT_EQ(ranges[0], expected_range1);
-    EXPECT_EQ(ranges[1], expected_range2);
-}
-
-/*
- * MultipleExclusion:
- * The exclusion should return two ranges:
- * AddrRange(0x130, 0x140)
- * AddrRange(0x170, 0x180)
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *  |-----------------|  |-----------------|  |-----------------|
- *  |  exclude_range  |  |  exclude_range  |  |  exclude_range  |
- *  |-----------------|  |-----------------|  |-----------------|
- */
-TEST(AddrRangeTest, MultipleExclusion)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x000, 0x130),
-        AddrRange(0x140, 0x170),
-        AddrRange(0x180, 0x210)
-    };
-
-    const AddrRange expected_range1(0x130, 0x140);
-    const AddrRange expected_range2(0x170, 0x180);
-
-    AddrRange r(0x100, 0x200);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 2);
-    EXPECT_EQ(ranges[0], expected_range1);
-    EXPECT_EQ(ranges[1], expected_range2);
-}
-
-/*
- * MultipleExclusionOverlapping:
- * The exclusion should return one range:
- * AddrRange(0x130, 0x140)
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *  |-----------------|  |-----------------|
- *  |  exclude_range  |  |  exclude_range  |
- *  |-----------------|  |-----------------|
- *                                 |-----------------|
- *                                 |  exclude_range  |
- *                                 |-----------------|
- */
-TEST(AddrRangeTest, MultipleExclusionOverlapping)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x000, 0x130),
-        AddrRange(0x140, 0x170),
-        AddrRange(0x150, 0x210)
-    };
-
-    const AddrRange expected_range1(0x130, 0x140);
-
-    AddrRange r(0x100, 0x200);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 1);
-    EXPECT_EQ(ranges[0], expected_range1);
-}
-
-/*
- * ExclusionOverlapping:
- * The exclusion should return two range:
- * AddrRange(0x100, 0x120)
- * AddrRange(0x180, 0x200)
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *                   |--------------------|
- *                   |    exclude_range   |
- *                   |--------------------|
- *
- *                      |---------------|
- *                      | exclude_range |
- *                      |---------------|
- */
-TEST(AddrRangeTest, ExclusionOverlapping)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x120, 0x180),
-        AddrRange(0x130, 0x170)
-    };
-
-    const AddrRange expected_range1(0x100, 0x120);
-    const AddrRange expected_range2(0x180, 0x200);
-
-    AddrRange r(0x100, 0x200);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 2);
-    EXPECT_EQ(ranges[0], expected_range1);
-    EXPECT_EQ(ranges[1], expected_range2);
-}
-
-/*
- * MultipleExclusionUnsorted:
- * The exclusion should return two ranges:
- * AddrRange(0x130, 0x140)
- * AddrRange(0x170, 0x180)
- * Same as MultipleExclusion, but the exclude list is provided
- * in unsorted order
- *
- *           |-----------------------------------|
- *           |              range                |
- *           |-----------------------------------|
- *
- *  |-----------------|  |-----------------|  |-----------------|
- *  |  exclude_range  |  |  exclude_range  |  |  exclude_range  |
- *  |-----------------|  |-----------------|  |-----------------|
- */
-TEST(AddrRangeTest, MultipleExclusionUnsorted)
-{
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x180, 0x210),
-        AddrRange(0x000, 0x130),
-        AddrRange(0x140, 0x170)
-    };
-
-    const AddrRange expected_range1(0x130, 0x140);
-    const AddrRange expected_range2(0x170, 0x180);
-
-    AddrRange r(0x100, 0x200);
-    auto ranges = r.exclude(exclude_ranges);
-
-    EXPECT_EQ(ranges.size(), 2);
-    EXPECT_EQ(ranges[0], expected_range1);
-    EXPECT_EQ(ranges[1], expected_range2);
-}
-
-/*
- * InterleavingRanges:
- * The exclude method does not support interleaving ranges
- */
-TEST(AddrRangeDeathTest, ExcludeInterleavingRanges)
-{
-  /* An `assert(!interleaved());` exists at the top of the `exclude(...)`
-   * method. This means EXPECT_DEATH will only function when DEBUG is enabled
-   * (as when compiled to `.opt`). When disabled (as when compiled to `.fast`),
-   * `r.exclude` fails more catastrophically via a `panic` which GTest cannot
-   * handle correctly. We therefore include a `#ifdef NDEBUG` guard so this
-   * test is skipped when DEBUG is disabled.
-   */
-#ifdef NDEBUG
-    GTEST_SKIP() << "Skipping as assetions are stripped from fast builds.";
-#endif
-    const std::vector<AddrRange> exclude_ranges{
-        AddrRange(0x180, 0x210),
-    };
-
-    AddrRange r(0x100, 0x200, {1}, 0);
-
-    EXPECT_TRUE(r.interleaved());
-    EXPECT_DEATH(r.exclude(exclude_ranges), "");
-}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/bitfield.hh gem5-SALAM/src/base/bitfield.hh
--- gem5/src/base/bitfield.hh	2024-02-22 18:25:43.759605387 -0600
+++ gem5-SALAM/src/base/bitfield.hh	2024-02-22 18:17:15.052944225 -0600
@@ -232,23 +232,26 @@
  * @ingroup api_bitfield
  */
 template <class T>
-std::enable_if_t<std::is_integral_v<T>, T>
+std::enable_if_t<std::is_integral<T>::value && sizeof(T) != 1, T>
 reverseBits(T val, size_t size=sizeof(T))
 {
     assert(size <= sizeof(T));
 
-    if constexpr (sizeof(T) == 1) {
-        return reverseBitsLookUpTable[val];
-    } else {
-        T output = {};
+    T output = {};
+    for (size_t byte = 0; byte < size; byte++) {
+        output = (output << 8) | reverseBitsLookUpTable[val & mask(8)];
+        val >>= 8;
+    }
 
-        for (size_t byte = 0; byte < size; byte++) {
-            output = (output << 8) | reverseBitsLookUpTable[val & mask(8)];
-            val >>= 8;
-        }
+    return output;
+}
 
-        return output;
-    }
+template <class T>
+std::enable_if_t<std::is_integral<T>::value && sizeof(T) == 1, T>
+reverseBits(T val, size_t size=sizeof(T))
+{
+    assert(size == 1);
+    return reverseBitsLookUpTable[val];
 }
 
 /**
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/bitunion.hh gem5-SALAM/src/base/bitunion.hh
--- gem5/src/base/bitunion.hh	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/bitunion.hh	2024-02-22 18:17:15.052944225 -0600
@@ -56,7 +56,8 @@
 template<class Base>
 class BitfieldTypeImpl : public Base
 {
-    static_assert(std::is_empty_v<Base>, "Bitfield base class must be empty.");
+    static_assert(std::is_empty<Base>::value,
+                  "Bitfield base class must be empty.");
 
   private:
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/bitunion.test.cc gem5-SALAM/src/base/bitunion.test.cc
--- gem5/src/base/bitunion.test.cc	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/bitunion.test.cc	2024-02-22 18:17:15.052944225 -0600
@@ -264,9 +264,9 @@
     EndBitUnion(Dummy32);
 
     bool is64;
-    is64 = std::is_same_v<BitUnionBaseType<Dummy64>, uint64_t>;
+    is64 = std::is_same<BitUnionBaseType<Dummy64>, uint64_t>::value;
     EXPECT_TRUE(is64);
-    is64 = std::is_same_v<BitUnionBaseType<Dummy32>, uint64_t>;
+    is64 = std::is_same<BitUnionBaseType<Dummy32>, uint64_t>::value;
     EXPECT_FALSE(is64);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/circular_queue.hh gem5-SALAM/src/base/circular_queue.hh
--- gem5/src/base/circular_queue.hh	2024-02-22 18:16:36.520742779 -0600
+++ gem5-SALAM/src/base/circular_queue.hh	2024-02-22 18:17:15.052944225 -0600
@@ -112,7 +112,7 @@
         /** Trait reference type
          * iterator satisfies OutputIterator, therefore reference
          * must be T& */
-        static_assert(std::is_same_v<reference, T&>,
+        static_assert(std::is_same<reference, T&>::value,
                 "reference type is not assignable as required");
 
         /**
@@ -348,7 +348,7 @@
          * @ingroup api_base_utils
          */
         template<typename Idx>
-        typename std::enable_if_t<std::is_integral_v<Idx>, reference>
+        typename std::enable_if_t<std::is_integral<Idx>::value, reference>
         operator[](const Idx& index)
         {
             return *(*this + index);
@@ -391,7 +391,7 @@
      * @ingroup api_base_utils
      */
     template <typename Idx>
-    typename std::enable_if_t<std::is_integral_v<Idx>, reference>
+    typename std::enable_if_t<std::is_integral<Idx>::value, reference>
     operator[](const Idx& index)
     {
         assert(index >= 0);
@@ -399,7 +399,7 @@
     }
 
     template <typename Idx>
-    typename std::enable_if_t<std::is_integral_v<Idx>, const_reference>
+    typename std::enable_if_t<std::is_integral<Idx>::value, const_reference>
     operator[](const Idx& index) const
     {
         assert(index >= 0);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/compiler.hh gem5-SALAM/src/base/compiler.hh
--- gem5/src/base/compiler.hh	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/compiler.hh	2024-02-22 18:17:15.052944225 -0600
@@ -49,6 +49,41 @@
 
 
 /*
+ * Attributes that become standard in later versions of c++.
+ */
+
+// Use GEM5_FALLTHROUGH to mark when you're intentionally falling through from
+// one case to another in a switch statement.
+#if __has_cpp_attribute(fallthrough) // Standard in c++17.
+#  define GEM5_FALLTHROUGH [[fallthrough]]
+#else
+// Not supported, so it's not necessary to avoid warnings.
+#  define GEM5_FALLTHROUGH
+#endif
+
+// When the return value of a function should not be discarded, mark it with
+// GEM5_NO_DISCARD.
+#if __has_cpp_attribute(nodiscard) // Standard in c++17, with message in c++20.
+#  define GEM5_NO_DISCARD [[nodiscard]]
+#else
+// Not supported, but it's optional so we can just omit it.
+#  define GEM5_NO_DISCARD
+#endif
+
+// When a variable may purposefully not be used, for instance if it's only used
+// in debug statements which might be disabled, mark it with GEM5_VAR_USED.
+#if __has_cpp_attribute(maybe_unused) // Standard in c++17.
+#  define GEM5_VAR_USED [[maybe_unused]]
+#elif defined(__GNUC__)
+// gcc and clang support a custom attribute which is essentially the same
+// thing.
+#  define GEM5_VAR_USED [[gnu::unused]]
+#else
+#  error "Don't know what to do for your compiler."
+#endif
+
+
+/*
  * Compiler specific features.
  */
 
@@ -80,13 +115,26 @@
 #  define GEM5_LIKELY(cond) __builtin_expect(!!(cond), 1)
 #  define GEM5_UNLIKELY(cond) __builtin_expect(!!(cond), 0)
 
+// Mark a c++ declaration as deprecated, with a message explaining what to do
+// to update to a non-deprecated alternative.
+#  define GEM5_DEPRECATED(message) [[gnu::deprecated(message)]]
+// Mark a C++ emum value as deprecated, with a message explaining what to do
+// to update to a non-deprecated alternative. This wraps GEM5_DEPRECATED but
+// is guarded by a preprocessor if directive to ensure it is not included
+// when compiled in GCC < 6, as deprecation of enum values was introduced in
+// GCC 6. All supported clang compilers allow enum value deprecation.
+#  if defined(__clang__) || __GNUC__ >= 6
+#    define GEM5_DEPRECATED_ENUM_VAL(message) GEM5_DEPRECATED(message)
+#  else
+#    define GEM5_DEPRECATED_ENUM_VAL(message)
+#  endif
 // Mark an expression-like macro as deprecated by wrapping it in some code
 // which declares and uses a deprecated variable with the same name as the
 // macro. The wrapping macro evaluates to the same thing as the original macro.
 // The definition must be an c++ expression and not a statement because of how
 // the original macro is wrapped.
 #  define GEM5_DEPRECATED_MACRO(name, definition, message) \
-     ([](){[[deprecated(message)]] int name{}; return name;}(), (definition))
+     ([](){GEM5_DEPRECATED(message) int name{}; return name;}(), (definition))
 // This version is for macros which are statement-like, which frequently use
 // "do {} while (0)" to make their syntax look more like normal c++ statements.
 #  define GEM5_DEPRECATED_MACRO_STMT(name, definition, message) \
@@ -97,7 +145,7 @@
 // This macro should be used *after* the new class has been defined.
 #  define GEM5_DEPRECATED_CLASS(old_class, new_class) \
     using old_class \
-        [[deprecated("Please use the new class name: '" #new_class "'")]] = \
+        GEM5_DEPRECATED("Please use the new class name: '" #new_class "'") = \
         new_class
 
 // These macros should be used when namespaces are deprecated in favor of
@@ -108,8 +156,8 @@
 #  if HAVE_DEPRECATED_NAMESPACE
 #    define GEM5_DEPRECATED_NAMESPACE(old_namespace, new_namespace) \
        namespace new_namespace {} \
-       namespace [[deprecated("Please use the new namespace: '" \
-         #new_namespace "'")]] old_namespace { \
+       namespace GEM5_DEPRECATED("Please use the new namespace: '" \
+         #new_namespace "'") old_namespace { \
          using namespace new_namespace; \
        }
 #  else
@@ -125,7 +173,7 @@
 // as are the arguments to the comma operator, which evaluates to the last
 // value. This is compiler specific because it uses variadic macros.
 #define GEM5_FOR_EACH_IN_PACK(...) \
-do { [[maybe_unused]] int i[] = { 0, ((void)(__VA_ARGS__), 0)... }; } while (0)
+do { GEM5_VAR_USED int i[] = { 0, ((void)(__VA_ARGS__), 0)... }; } while (0)
 
 #else
 #  error "Don't know what to do for your compiler."
@@ -157,20 +205,4 @@
 #define M5_FOR_EACH_IN_PACK(...) GEM5_FOR_EACH_IN_PACK(__VA_ARGS__)
 #define M5_CLASS_VAR_USED GEM5_CLASS_VAR_USED
 
-// Deprecated attributes which warn.
-#define GEM5_FALLTHROUGH GEM5_DEPRECATED_MACRO_STMT(GEM5_FALLTHROUGH,,\
-        "Please use the [[fallthrough]] attribute directly."); [[fallthrough]]
-#define GEM5_DEPRECATED(message) \
-     [[deprecated(message " The GEM5_DEPRECATED macro is also deprecated, "\
-             "please use the [[deprecated()]] attribute directly.")]]
-#define GEM5_DEPRECATED_ENUM_VAL(message) \
-     [[deprecated(message " The GEM5_DEPRECATED_ENUM_VAL macro is also "\
-             "deprecated, please use the [[deprecated()]] attribute "\
-             "directly.")]]
-
-// Deprecated attributes which can't be made to warn without possibly breaking
-// existing code.
-#define GEM5_NO_DISCARD [[nodiscard]]
-#define GEM5_VAR_USED [[maybe_unused]]
-
 #endif // __BASE_COMPILER_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/coroutine.hh gem5-SALAM/src/base/coroutine.hh
--- gem5/src/base/coroutine.hh	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/coroutine.hh	2024-02-22 18:17:15.052944225 -0600
@@ -69,10 +69,10 @@
     // are void. (See following ArgChannel, RetChannel typedef)
     struct Empty {};
     using ArgChannel = typename std::conditional_t<
-        std::is_same_v<Arg, void>, Empty, std::stack<Arg>>;
+        std::is_same<Arg, void>::value, Empty, std::stack<Arg>>;
 
     using RetChannel = typename std::conditional_t<
-        std::is_same_v<Ret, void>, Empty, std::stack<Ret>>;
+        std::is_same<Ret, void>::value, Empty, std::stack<Ret>>;
 
   public:
     /**
@@ -101,7 +101,7 @@
         template <typename T = Ret>
         CallerType&
         operator()(typename std::enable_if_t<
-                   !std::is_same_v<T, void>, T> param)
+                   !std::is_same<T, void>::value, T> param)
         {
             retChannel.push(param);
             callerFiber->run();
@@ -117,7 +117,7 @@
          * @ingroup api_coroutine
          */
         template <typename T = Ret>
-        typename std::enable_if_t<std::is_same_v<T, void>,
+        typename std::enable_if_t<std::is_same<T, void>::value,
                                 CallerType> &
         operator()()
         {
@@ -138,7 +138,7 @@
          * @ingroup api_coroutine
          */
         template <typename T = Arg>
-        typename std::enable_if_t<!std::is_same_v<T, void>, T>
+        typename std::enable_if_t<!std::is_same<T, void>::value, T>
         get()
         {
             auto& args_channel = coro.argsChannel;
@@ -210,7 +210,8 @@
      */
     template <typename T = Arg>
     Coroutine&
-    operator()(typename std::enable_if_t<!std::is_same_v<T, void>, T> param)
+    operator()(typename std::enable_if_t<
+               !std::is_same<T, void>::value, T> param)
     {
         argsChannel.push(param);
         this->call();
@@ -226,7 +227,7 @@
      * @ingroup api_coroutine
      */
     template <typename T = Arg>
-    typename std::enable_if_t<std::is_same_v<T, void>, Coroutine> &
+    typename std::enable_if_t<std::is_same<T, void>::value, Coroutine> &
     operator()()
     {
         this->call();
@@ -246,7 +247,7 @@
      * @ingroup api_coroutine
      */
     template <typename T = Ret>
-    typename std::enable_if_t<!std::is_same_v<T, void>, T>
+    typename std::enable_if_t<!std::is_same<T, void>::value, T>
     get()
     {
         auto& ret_channel = caller.retChannel;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/cprintf.cc gem5-SALAM/src/base/cprintf.cc
--- gem5/src/base/cprintf.cc	2024-02-22 18:16:36.520742779 -0600
+++ gem5-SALAM/src/base/cprintf.cc	2024-02-22 18:17:15.052944225 -0600
@@ -142,7 +142,7 @@
 
           case 'X':
             fmt.uppercase = true;
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 'x':
             fmt.base = Format::Hex;
             fmt.format = Format::Integer;
@@ -164,7 +164,7 @@
 
           case 'G':
             fmt.uppercase = true;
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 'g':
             fmt.format = Format::Floating;
             fmt.floatFormat = Format::Best;
@@ -173,7 +173,7 @@
 
           case 'E':
             fmt.uppercase = true;
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 'e':
             fmt.format = Format::Floating;
             fmt.floatFormat = Format::Scientific;
@@ -220,7 +220,7 @@
                 fmt.fillZero = true;
                 break;
             }
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case '1':
           case '2':
           case '3':
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/cprintftime.cc gem5-SALAM/src/base/cprintftime.cc
--- gem5/src/base/cprintftime.cc	2024-02-22 18:16:36.520742779 -0600
+++ gem5-SALAM/src/base/cprintftime.cc	2024-02-22 18:17:15.052944225 -0600
@@ -36,6 +36,9 @@
 
 #include "base/cprintf.hh"
 
+namespace gem5
+{
+
 volatile int stop = false;
 
 void
@@ -62,31 +65,30 @@
     do_test(10);
     while (!stop) {
         std::stringstream result;
-        gem5::ccprintf(result,
-                       "this is a %s of %d iterations %3.2f %p\n",
-                       "test", iterations, 51.934, &result);
+        ccprintf(result,
+                 "this is a %s of %d iterations %3.2f %p\n",
+                 "test", iterations, 51.934, &result);
 
         iterations += 1;
     }
 
-    gem5::cprintf(
-            "completed %d iterations of ccprintf in 10s, %f iterations/s\n",
+    cprintf("completed %d iterations of ccprintf in 10s, %f iterations/s\n",
             iterations, iterations / 10.0);
 
     do_test(10);
     while (!stop) {
         char result[1024];
-        int dummy;
         sprintf(result,
                  "this is a %s of %d iterations %3.2f %p\n",
-                 "test", iterations, 51.934, &dummy);
+                 "test", iterations, 51.934, &result);
 
         iterations += 1;
     }
 
-    gem5::cprintf(
-            "completed %d iterations of sprintf in 10s, %f iterations/s\n",
+    cprintf("completed %d iterations of sprintf in 10s, %f iterations/s\n",
             iterations, iterations / 10.0);
 
     return 0;
 }
+
+} // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/debug.cc gem5-SALAM/src/base/debug.cc
--- gem5/src/base/debug.cc	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/debug.cc	2024-02-22 18:17:15.052944225 -0600
@@ -71,17 +71,13 @@
 #endif
 }
 
-// Used to check the freshness of cached views of all flags.
+//
+// Flags for debugging purposes.  Primarily for trace.hh
+//
+int allFlagsVersion = 0;
 FlagsMap &
 allFlags()
 {
-    // Ensure that the special "All" compound debug flag has been created,
-    // and avoid infinite recursion.
-    static bool done = false;
-    if (!done) {
-        done = true;
-        AllFlagsFlag::instance();
-    }
     static FlagsMap flags;
     return flags;
 }
@@ -92,9 +88,8 @@
 findFlag(const std::string &name)
 {
     FlagsMap::iterator i = allFlags().find(name);
-    if (i == allFlags().end()) {
+    if (i == allFlags().end())
         return NULL;
-    }
     return i->second;
 }
 
@@ -106,6 +101,8 @@
 
     panic_if(!result.second, "Flag %s already defined!", name);
 
+    ++allFlagsVersion;
+
     sync();
 }
 
@@ -130,14 +127,6 @@
         i.second->sync();
 }
 
-SimpleFlag::SimpleFlag(const char *name, const char *desc, bool is_format)
-  : Flag(name, desc), _isFormat(is_format)
-{
-    // Add non-format flags to the special "All" compound flag.
-    if (!isFormat())
-        AllFlagsFlag::instance().add(this);
-}
-
 void
 CompoundFlag::enable()
 {
@@ -152,26 +141,6 @@
         k->disable();
 }
 
-AllFlagsFlag::AllFlagsFlag() : CompoundFlag("All",
-        "Controls all debug flags. It should not be used within C++ code.", {})
-{}
-
-void
-AllFlagsFlag::add(SimpleFlag *flag)
-{
-    ++_version;
-    _kids.push_back(flag);
-}
-
-int AllFlagsFlag::_version = 0;
-
-AllFlagsFlag &
-AllFlagsFlag::instance()
-{
-    static AllFlagsFlag flag;
-    return flag;
-}
-
 bool
 changeFlag(const char *s, bool value)
 {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/debug.hh gem5-SALAM/src/base/debug.hh
--- gem5/src/base/debug.hh	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/debug.hh	2024-02-22 18:17:15.052944225 -0600
@@ -100,7 +100,9 @@
     void sync() override { _tracing = _globalEnable && _enabled; }
 
   public:
-    SimpleFlag(const char *name, const char *desc, bool is_format=false);
+    SimpleFlag(const char *name, const char *desc, bool is_format=false)
+      : Flag(name, desc), _isFormat(is_format)
+    {}
 
     void enable() override  { _enabled = true;  sync(); }
     void disable() override { _enabled = false; sync(); }
@@ -134,20 +136,6 @@
     void disable() override;
 };
 
-class AllFlagsFlag : public CompoundFlag
-{
-  protected:
-    static int _version;
-
-  public:
-    AllFlagsFlag();
-
-    void add(SimpleFlag *flag);
-
-    static AllFlagsFlag &instance();
-    static int version() { return _version; }
-};
-
 typedef std::map<std::string, Flag *> FlagsMap;
 FlagsMap &allFlags();
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/flags.hh gem5-SALAM/src/base/flags.hh
--- gem5/src/base/flags.hh	2024-02-22 18:16:36.520742779 -0600
+++ gem5-SALAM/src/base/flags.hh	2024-02-22 18:17:15.056944246 -0600
@@ -44,7 +44,7 @@
 class Flags
 {
   private:
-    static_assert(std::is_unsigned_v<T>, "Flag type must be unsigned");
+    static_assert(std::is_unsigned<T>::value, "Flag type must be unsigned");
 
     /** The undelying container of the flags' bits. */
     T _flags;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/imgwriter.cc gem5-SALAM/src/base/imgwriter.cc
--- gem5/src/base/imgwriter.cc	2024-02-22 18:16:36.524742800 -0600
+++ gem5-SALAM/src/base/imgwriter.cc	2024-02-22 18:17:15.056944246 -0600
@@ -60,7 +60,7 @@
         // gem5 will try PNG first, and it will fallback to BMP if not
         // available.
 
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
 #if HAVE_PNG
       case enums::Png:
         return std::unique_ptr<PngWriter>(new PngWriter(fb));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/intmath.hh gem5-SALAM/src/base/intmath.hh
--- gem5/src/base/intmath.hh	2024-02-22 18:16:36.524742800 -0600
+++ gem5-SALAM/src/base/intmath.hh	2024-02-22 18:17:15.056944246 -0600
@@ -55,7 +55,7 @@
  * @ingroup api_base_utils
  */
 template <class T>
-static constexpr std::enable_if_t<std::is_integral_v<T>, int>
+static constexpr std::enable_if_t<std::is_integral<T>::value, int>
 floorLog2(T x)
 {
     assert(x > 0);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/loader/elf_object.cc gem5-SALAM/src/base/loader/elf_object.cc
--- gem5/src/base/loader/elf_object.cc	2024-02-22 18:25:43.763605407 -0600
+++ gem5-SALAM/src/base/loader/elf_object.cc	2024-02-22 18:17:15.056944246 -0600
@@ -147,7 +147,7 @@
             "No loadable segments in '%s'. ELF file corrupted?\n",
             imageData->filename());
 
-    for ([[maybe_unused]] auto &seg: image.segments())
+    for (GEM5_VAR_USED auto &seg: image.segments())
         DPRINTFR(Loader, "%s\n", seg);
 
     // We will actually read the sections when we need to load them
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/logging.hh gem5-SALAM/src/base/logging.hh
--- gem5/src/base/logging.hh	2024-02-22 18:25:43.767605428 -0600
+++ gem5-SALAM/src/base/logging.hh	2024-02-22 18:17:15.056944246 -0600
@@ -43,7 +43,6 @@
 
 #include <cassert>
 #include <sstream>
-#include <tuple>
 #include <utility>
 
 #include "base/compiler.hh"
@@ -283,51 +282,31 @@
     } while (0)
 /** @} */ // end of api_logger
 
-#ifdef NDEBUG
-#define NDEBUG_DEFINED 1
-#else
-#define NDEBUG_DEFINED 0
-#endif
-
-template <typename ...Args>
-inline std::string
-_assertMsg(const std::string &format, Args... args)
-{
-    return std::string(": ") + csprintf(format, args...);
-}
-
-inline const char *
-_assertMsg()
-{
-    return "";
-}
-
 /**
- * The assert macro will function like a normal assert, but will use panic
- * instead of straight abort(). This allows to perform some cleaning up in
- * ExitLogger::exit() before calling abort(). This macro will not check its
- * condition in fast builds, but it must still be valid code.
+ * The chatty assert macro will function like a normal assert, but will allow
+ * the specification of additional, helpful material to aid debugging why the
+ * assertion actually failed.  Like the normal assertion, the chatty_assert
+ * will not be active in fast builds.
  *
- * @param cond Condition that is checked; if false -> panic
+ * @param cond Condition that is checked; if false -> assert
  * @param ...  Printf-based format string with arguments, extends printout.
  *
- * \def gem5_assert(cond, ...)
+ * \def chatty_assert(cond, ...)
  *
  * @ingroup api_logger
  */
-#define gem5_assert(cond, ...) \
-    do { \
-        if (GEM5_UNLIKELY(!NDEBUG_DEFINED && !static_cast<bool>(cond))) { \
-            panic("assert(" #cond ") failed%s", _assertMsg(__VA_ARGS__)); \
-        } \
+#ifdef NDEBUG
+#define chatty_assert(cond, ...)
+#else //!NDEBUG
+#define chatty_assert(cond, ...)                                        \
+    do {                                                                \
+        if (GEM5_UNLIKELY(!(cond)))                                       \
+            panic("assert(" # cond ") failed: %s", \
+                ::gem5::csprintf(__VA_ARGS__)); \
     } while (0)
+#endif // NDEBUG
 /** @} */ // end of api_logger
 
-#define chatty_assert(...) \
-    do { \
-        gem5_assert(__VA_ARGS__); \
-        GEM5_DEPRECATED_MACRO(chatty_assert, {}, "Please use gem5_assert()"); \
-    } while(0)
-
 } // namespace gem5
+
 #endif // __BASE_LOGGING_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/logging.test.cc gem5-SALAM/src/base/logging.test.cc
--- gem5/src/base/logging.test.cc	2024-02-22 18:25:43.767605428 -0600
+++ gem5-SALAM/src/base/logging.test.cc	2024-02-22 18:17:15.056944246 -0600
@@ -543,17 +543,14 @@
         "fatal: fatal condition true occurred: message\nMemory Usage:"));
 }
 
-/** Test macro gem5_assert. */
-TEST(LoggingDeathTest, gem5Assert)
+/** Test macro chatty_assert. */
+TEST(LoggingDeathTest, ChattyAssert)
 {
 #ifdef NDEBUG
     GTEST_SKIP() << "Skipping as assertions are "
         "stripped out of fast builds";
 #endif
-    gem5_assert(true, "message\n");
-    ASSERT_DEATH(gem5_assert(false, "message\n"), ::testing::HasSubstr(
+    chatty_assert(true, "message\n");
+    ASSERT_DEATH(chatty_assert(false, "message\n"), ::testing::HasSubstr(
         "panic: assert(false) failed: message\nMemory Usage:"));
-    gem5_assert(true);
-    ASSERT_DEATH(gem5_assert(false), ::testing::HasSubstr(
-        "panic: assert(false) failed\nMemory Usage:"));
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/random.hh gem5-SALAM/src/base/random.hh
--- gem5/src/base/random.hh	2024-02-22 18:16:36.524742800 -0600
+++ gem5-SALAM/src/base/random.hh	2024-02-22 18:17:15.060944267 -0600
@@ -86,7 +86,7 @@
      * @ingroup api_base_utils
      */
     template <typename T>
-    typename std::enable_if_t<std::is_integral_v<T>, T>
+    typename std::enable_if_t<std::is_integral<T>::value, T>
     random()
     {
         // [0, max_value] for integer types
@@ -98,7 +98,7 @@
      * @ingroup api_base_utils
      */
     template <typename T>
-    typename std::enable_if_t<std::is_floating_point_v<T>, T>
+    typename std::enable_if_t<std::is_floating_point<T>::value, T>
     random()
     {
         // [0, 1) for real types
@@ -109,7 +109,7 @@
      * @ingroup api_base_utils
      */
     template <typename T>
-    typename std::enable_if_t<std::is_integral_v<T>, T>
+    typename std::enable_if_t<std::is_integral<T>::value, T>
     random(T min, T max)
     {
         std::uniform_int_distribution<T> dist(min, max);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/refcnt.hh gem5-SALAM/src/base/refcnt.hh
--- gem5/src/base/refcnt.hh	2024-02-22 18:16:36.524742800 -0600
+++ gem5-SALAM/src/base/refcnt.hh	2024-02-22 18:17:15.060944267 -0600
@@ -131,7 +131,7 @@
   protected:
     /** Convenience aliases for const/non-const versions of T w/ friendship. */
     /** @{ */
-    static constexpr auto TisConst = std::is_const_v<T>;
+    static constexpr auto TisConst = std::is_const<T>::value;
     using ConstT = typename std::conditional_t<TisConst,
             RefCountingPtr<T>,
             RefCountingPtr<typename std::add_const<T>::type>>;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/remote_gdb.cc gem5-SALAM/src/base/remote_gdb.cc
--- gem5/src/base/remote_gdb.cc	2024-02-22 18:25:43.767605428 -0600
+++ gem5-SALAM/src/base/remote_gdb.cc	2024-02-22 18:17:15.060944267 -0600
@@ -10,7 +10,7 @@
  * unmodified and in its entirety in all distributions of the software,
  * modified or unmodified, in source code or in binary form.
  *
- * Copyright 2015, 2021 LabWare
+ * Copyright 2015 LabWare
  * Copyright 2014 Google, Inc.
  * Copyright (c) 2002-2005 The Regents of The University of Michigan
  * All rights reserved.
@@ -152,8 +152,6 @@
 #include "debug/GDBAll.hh"
 #include "mem/port.hh"
 #include "mem/port_proxy.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 #include "sim/full_system.hh"
 #include "sim/process.hh"
 #include "sim/system.hh"
@@ -356,16 +354,14 @@
 }
 
 BaseRemoteGDB::BaseRemoteGDB(System *_system, int _port) :
-        incomingConnectionEvent(nullptr), incomingDataEvent(nullptr),
-        _port(_port), fd(-1), sys(_system),
-        connectEvent(this), disconnectEvent(this), trapEvent(this),
-        singleStepEvent(*this)
+        connectEvent(nullptr), dataEvent(nullptr), _port(_port), fd(-1),
+        sys(_system), trapEvent(this), singleStepEvent(*this)
 {}
 
 BaseRemoteGDB::~BaseRemoteGDB()
 {
-    delete incomingConnectionEvent;
-    delete incomingDataEvent;
+    delete connectEvent;
+    delete dataEvent;
 }
 
 std::string
@@ -387,9 +383,8 @@
         _port++;
     }
 
-    incomingConnectionEvent =
-            new IncomingConnectionEvent(this, listener.getfd(), POLLIN);
-    pollQueue.schedule(incomingConnectionEvent);
+    connectEvent = new ConnectEvent(this, listener.getfd(), POLLIN);
+    pollQueue.schedule(connectEvent);
 
     ccprintf(std::cerr, "%d: %s: listening for remote gdb on port %d\n",
              curTick(), name(), _port);
@@ -401,8 +396,6 @@
     panic_if(!listener.islistening(),
              "Can't accept GDB connections without any threads!");
 
-    pollQueue.remove(incomingConnectionEvent);
-
     int sfd = listener.accept(true);
 
     if (sfd != -1) {
@@ -426,55 +419,30 @@
 {
     fd = f;
 
+    dataEvent = new DataEvent(this, fd, POLLIN);
+    pollQueue.schedule(dataEvent);
+
     attached = true;
     DPRINTFN("remote gdb attached\n");
-
-    processCommands();
-
-    if (isAttached()) {
-        // At this point an initial communication with GDB is handled
-        // and we're ready to continue. Here we arrange IncomingDataEvent
-        // to get notified when GDB breaks in.
-        //
-        // However, GDB can decide to disconnect during that initial
-        // communication. In that case, we cannot arrange data event because
-        // the socket is already closed (not that it makes any sense, anyways).
-        //
-        // Hence the check above.
-        incomingDataEvent = new IncomingDataEvent(this, fd, POLLIN);
-        pollQueue.schedule(incomingDataEvent);
-    }
 }
 
 void
 BaseRemoteGDB::detach()
 {
     attached = false;
+    active = false;
     clearSingleStep();
     close(fd);
     fd = -1;
 
-    if (incomingDataEvent) {
-        // incomingDataEvent gets scheduled in attach() after
-        // initial communication with GDB is handled and GDB tells
-        // gem5 to continue.
-        //
-        // GDB can disconnect before that in which case `incomingDataEvent`
-        // is NULL.
-        //
-        // Hence the check above.
-
-        pollQueue.remove(incomingDataEvent);
-        incomingDataEvent = nullptr;
-    }
-    pollQueue.schedule(incomingConnectionEvent);
+    pollQueue.remove(dataEvent);
     DPRINTFN("remote gdb detached\n");
 }
 
 void
 BaseRemoteGDB::addThreadContext(ThreadContext *_tc)
 {
-    [[maybe_unused]] auto it_success = threads.insert({_tc->contextId(), _tc});
+    GEM5_VAR_USED auto it_success = threads.insert({_tc->contextId(), _tc});
     assert(it_success.second);
     // If no ThreadContext is current selected, select this one.
     if (!tc)
@@ -513,44 +481,86 @@
 // present, but might eventually become meaningful. (XXX) It might
 // makes sense to use POSIX errno values, because that is what the
 // gdb/remote.c functions want to return.
-void
-BaseRemoteGDB::trap(ContextID id, int signum)
+bool
+BaseRemoteGDB::trap(ContextID id, int type)
 {
     if (!attached)
-        return;
+        return false;
 
     if (tc->contextId() != id) {
         if (!selectThreadContext(id))
-            return;
+            return false;
     }
 
     DPRINTF(GDBMisc, "trap: PC=%s\n", tc->pcState());
 
     clearSingleStep();
 
-    if (threadSwitching) {
+    /*
+     * The first entry to this function is normally through
+     * a breakpoint trap in kgdb_connect(), in which case we
+     * must advance past the breakpoint because gdb will not.
+     *
+     * On the first entry here, we expect that gdb is not yet
+     * listening to us, so just enter the interaction loop.
+     * After the debugger is "active" (connected) it will be
+     * waiting for a "signaled" message from us.
+     */
+    if (!active) {
+        active = true;
+    } else if (threadSwitching) {
         threadSwitching = false;
         // Tell GDB the thread switch has completed.
         send("OK");
     } else {
         // Tell remote host that an exception has occurred.
-        send("S%02x", signum);
+        send("S%02x", type);
     }
 
-    processCommands(signum);
-}
+    // Stick frame regs into our reg cache.
+    regCachePtr = gdbRegs();
+    regCachePtr->getRegs(tc);
 
-void
-BaseRemoteGDB::incomingConnection(int revent)
-{
-    if (connectEvent.scheduled()) {
-        warn("GDB connect event has already been scheduled!");
-        return;
-    }
+    GdbCommand::Context cmd_ctx;
+    cmd_ctx.type = type;
+    std::vector<char> data;
 
-    if (revent & POLLIN) {
-        scheduleInstCommitEvent(&connectEvent, 0);
+    for (;;) {
+        try {
+            recv(data);
+            if (data.size() == 1)
+                throw BadClient();
+            cmd_ctx.cmdByte = data[0];
+            cmd_ctx.data = data.data() + 1;
+            // One for sentinel, one for cmdByte.
+            cmd_ctx.len = data.size() - 2;
+
+            auto cmd_it = commandMap.find(cmd_ctx.cmdByte);
+            if (cmd_it == commandMap.end()) {
+                DPRINTF(GDBMisc, "Unknown command: %c(%#x)\n",
+                        cmd_ctx.cmdByte, cmd_ctx.cmdByte);
+                throw Unsupported();
+            }
+            cmd_ctx.cmd = &(cmd_it->second);
+
+            if (!(this->*(cmd_ctx.cmd->func))(cmd_ctx))
+                break;
+
+        } catch (BadClient &e) {
+            if (e.warning)
+                warn(e.warning);
+            detach();
+            break;
+        } catch (Unsupported &e) {
+            send("");
+        } catch (CmdError &e) {
+            send(e.error);
+        } catch (...) {
+            panic("Unrecognzied GDB exception.");
+        }
     }
+
+    return true;
 }
 
 void
@@ -567,7 +577,7 @@
         scheduleInstCommitEvent(&trapEvent, 0);
     } else if (revent & POLLNVAL) {
         descheduleInstCommitEvent(&trapEvent);
-        scheduleInstCommitEvent(&disconnectEvent, 0);
+        detach();
     }
 }
 
@@ -671,63 +681,14 @@
     } while ((c & 0x7f) == GDBBadP);
 }
 
-void
-BaseRemoteGDB::processCommands(int signum)
-{
-    // Stick frame regs into our reg cache.
-    regCachePtr = gdbRegs();
-    regCachePtr->getRegs(tc);
-
-    GdbCommand::Context cmd_ctx;
-    cmd_ctx.type = signum;
-    std::vector<char> data;
-
-    for (;;) {
-        try {
-            recv(data);
-            if (data.size() == 1)
-                throw BadClient();
-            cmd_ctx.cmdByte = data[0];
-            cmd_ctx.data = data.data() + 1;
-            // One for sentinel, one for cmdByte.
-            cmd_ctx.len = data.size() - 2;
-
-            auto cmd_it = commandMap.find(cmd_ctx.cmdByte);
-            if (cmd_it == commandMap.end()) {
-                DPRINTF(GDBMisc, "Unknown command: %c(%#x)\n",
-                        cmd_ctx.cmdByte, cmd_ctx.cmdByte);
-                throw Unsupported();
-            }
-            cmd_ctx.cmd = &(cmd_it->second);
-
-            if (!(this->*(cmd_ctx.cmd->func))(cmd_ctx))
-                break;
-
-        } catch (BadClient &e) {
-            if (e.warning)
-                warn(e.warning);
-            detach();
-            break;
-        } catch (Unsupported &e) {
-            send("");
-        } catch (CmdError &e) {
-            send(e.error);
-        } catch (std::exception &e) {
-            panic("Unrecognized GDB exception: %s", e.what());
-        } catch (...) {
-            panic("Unrecognized GDB exception.");
-        }
-    }
-}
-
 // Read bytes from kernel address space for debugger.
 bool
 BaseRemoteGDB::read(Addr vaddr, size_t size, char *data)
 {
     DPRINTF(GDBRead, "read:  addr=%#x, size=%d", vaddr, size);
 
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        readBlob(vaddr, data, size);
+    PortProxy &proxy = tc->getVirtProxy();
+    proxy.readBlob(vaddr, data, size);
 
 #if TRACING_ON
     if (debug::GDBRead) {
@@ -756,8 +717,8 @@
         } else
             DPRINTFNR("\n");
     }
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        writeBlob(vaddr, data, size);
+    PortProxy &proxy = tc->getVirtProxy();
+    proxy.writeBlob(vaddr, data, size);
 
     return true;
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/remote_gdb.hh gem5-SALAM/src/base/remote_gdb.hh
--- gem5/src/base/remote_gdb.hh	2024-02-22 18:25:43.767605428 -0600
+++ gem5-SALAM/src/base/remote_gdb.hh	2024-02-22 18:17:15.060944267 -0600
@@ -10,7 +10,7 @@
  * unmodified and in its entirety in all distributions of the software,
  * modified or unmodified, in source code or in binary form.
  *
- * Copyright 2015, 2021 LabWare
+ * Copyright 2015 LabWare
  * Copyright 2014 Google, Inc.
  * Copyright (c) 2002-2005 The Regents of The University of Michigan
  * All rights reserved.
@@ -171,7 +171,7 @@
     void replaceThreadContext(ThreadContext *_tc);
     bool selectThreadContext(ContextID id);
 
-    void trap(ContextID id, int signum);
+    bool trap(ContextID id, int type);
 
     /** @} */ // end of api_remote_gdb
 
@@ -190,19 +190,8 @@
     /*
      * Connection to the external GDB.
      */
-
-    /*
-     * Asynchronous socket events and event handlers.
-     *
-     * These events occur asynchronously and are handled asynchronously
-     * to main simulation loop - therefore they *shall not* interact with
-     * rest of gem5.
-     *
-     * The only thing they do is to schedule a synchronous event at instruction
-     * boundary to deal with the request.
-     */
     void incomingData(int revent);
-    void incomingConnection(int revent);
+    void connectWrapper(int revent) { connect(); }
 
     template <void (BaseRemoteGDB::*F)(int revent)>
     class SocketEvent : public PollEvent
@@ -218,16 +207,14 @@
         void process(int revent) { (gdb->*F)(revent); }
     };
 
-    typedef SocketEvent<&BaseRemoteGDB::incomingConnection>
-        IncomingConnectionEvent;
-    typedef SocketEvent<&BaseRemoteGDB::incomingData>
-        IncomingDataEvent;
+    typedef SocketEvent<&BaseRemoteGDB::connectWrapper> ConnectEvent;
+    typedef SocketEvent<&BaseRemoteGDB::incomingData> DataEvent;
 
-    friend IncomingConnectionEvent;
-    friend IncomingDataEvent;
+    friend ConnectEvent;
+    friend DataEvent;
 
-    IncomingConnectionEvent *incomingConnectionEvent;
-    IncomingDataEvent *incomingDataEvent;
+    ConnectEvent *connectEvent;
+    DataEvent *dataEvent;
 
     ListenSocket listener;
     int _port;
@@ -251,16 +238,9 @@
     }
 
     /*
-     * Process commands from remote GDB. If simulation has been
-     * stopped because of some kind of fault (as segmentation violation,
-     * or SW trap), 'signum' is the signal value reported back to GDB
-     * in "S" packet (this is done in trap()).
-     */
-    void processCommands(int signum=0);
-
-    /*
      * Simulator side debugger state.
      */
+    bool active = false;
     bool attached = false;
     bool threadSwitching = false;
 
@@ -271,9 +251,6 @@
 
     BaseGdbRegCache *regCachePtr = nullptr;
 
-    EventWrapper<BaseRemoteGDB, &BaseRemoteGDB::connect> connectEvent;
-    EventWrapper<BaseRemoteGDB, &BaseRemoteGDB::detach>  disconnectEvent;
-
     class TrapEvent : public Event
     {
       protected:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/socket.cc gem5-SALAM/src/base/socket.cc
--- gem5/src/base/socket.cc	2024-02-22 18:25:43.771605449 -0600
+++ gem5-SALAM/src/base/socket.cc	2024-02-22 18:17:15.060944267 -0600
@@ -81,28 +81,6 @@
     bindToLoopback = true;
 }
 
-// Wrappers to stub out SOCK_CLOEXEC/accept4 availability
-
-int
-ListenSocket::socketCloexec(int domain, int type, int protocol)
-{
-#ifdef SOCK_CLOEXEC
-    type |= SOCK_CLOEXEC;
-#endif
-    return ::socket(domain, type, protocol);
-}
-
-int
-ListenSocket::acceptCloexec(int sockfd, struct sockaddr *addr,
-                             socklen_t *addrlen)
-{
-#if defined(_GNU_SOURCE) && defined(SOCK_CLOEXEC)
-    return ::accept4(sockfd, addr, addrlen, SOCK_CLOEXEC);
-#else
-    return ::accept(sockfd, addr, addrlen);
-#endif
-}
-
 ////////////////////////////////////////////////////////////////////////
 //
 //
@@ -126,7 +104,7 @@
 
     // only create socket if not already created by a previous call
     if (fd == -1) {
-        fd = socketCloexec(PF_INET, SOCK_STREAM, 0);
+        fd = ::socket(PF_INET, SOCK_STREAM, 0);
         if (fd < 0)
             panic("Can't create socket:%s !", strerror(errno));
     }
@@ -172,7 +150,7 @@
 {
     struct sockaddr_in sockaddr;
     socklen_t slen = sizeof (sockaddr);
-    int sfd = acceptCloexec(fd, (struct sockaddr *)&sockaddr, &slen);
+    int sfd = ::accept(fd, (struct sockaddr *)&sockaddr, &slen);
     if (sfd != -1 && nodelay) {
         int i = 1;
         if (::setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (char *)&i,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/socket.hh gem5-SALAM/src/base/socket.hh
--- gem5/src/base/socket.hh	2024-02-22 18:25:43.771605449 -0600
+++ gem5-SALAM/src/base/socket.hh	2024-02-22 18:17:15.060944267 -0600
@@ -29,9 +29,6 @@
 #ifndef __SOCKET_HH__
 #define __SOCKET_HH__
 
-#include <sys/socket.h>
-#include <sys/types.h>
-
 namespace gem5
 {
 
@@ -62,13 +59,6 @@
      */
     static void cleanup();
 
-  private:
-    /* Create a socket, adding SOCK_CLOEXEC if available. */
-    static int socketCloexec(int domain, int type, int protocol);
-    /* Accept a connection, adding SOCK_CLOEXEC if available. */
-    static int acceptCloexec(int sockfd, struct sockaddr *addr,
-                              socklen_t *addrlen);
-
 
   public:
     /**
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/statistics.hh gem5-SALAM/src/base/statistics.hh
--- gem5/src/base/statistics.hh	2024-02-22 18:25:43.771605449 -0600
+++ gem5-SALAM/src/base/statistics.hh	2024-02-22 18:17:15.060944267 -0600
@@ -675,8 +675,8 @@
  */
 template <class T>
 class FunctorProxy<T,
-    typename std::enable_if_t<std::is_constructible_v<std::function<Result()>,
-        const T &>>> : public ProxyInfo
+    typename std::enable_if_t<std::is_constructible<std::function<Result()>,
+        const T &>::value>> : public ProxyInfo
 {
   private:
     std::function<Result()> functor;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/stats/units.hh gem5-SALAM/src/base/stats/units.hh
--- gem5/src/base/stats/units.hh	2024-02-22 18:25:43.775605470 -0600
+++ gem5-SALAM/src/base/stats/units.hh	2024-02-22 18:17:15.060944267 -0600
@@ -342,12 +342,12 @@
 template <typename T1, typename T2>
 class Rate : public Base
 {
-    static_assert(std::is_base_of_v<Base, T1>, "Rate(T1,T2) must have "
+    static_assert(std::is_base_of<Base, T1>::value, "Rate(T1,T2) must have "
         "T1 and T2 derived from statistics::units::Base");
-    static_assert(std::is_base_of_v<Base, T2>, "Rate(T1,T2) must have "
+    static_assert(std::is_base_of<Base, T2>::value, "Rate(T1,T2) must have "
         "T1 and T2 derived from statistics::units::Base");
-    static_assert(!std::is_same_v<T1, T2> || std::is_same_v<T1, Count> ||
-            std::is_same_v<T1, Unspecified>,
+    static_assert(!std::is_same<T1, T2>::value ||
+        std::is_same<T1, Count>::value || std::is_same<T1, Unspecified>::value,
         "Rate(T1,T2) must have T1 and T2 of different types; "
         "otherwise, it would be a Ratio");
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/stl_helpers.hh gem5-SALAM/src/base/stl_helpers.hh
--- gem5/src/base/stl_helpers.hh	2024-02-22 18:25:43.775605470 -0600
+++ gem5-SALAM/src/base/stl_helpers.hh	2024-02-22 18:17:15.060944267 -0600
@@ -49,9 +49,6 @@
 template <typename ...Types>
 struct IsHelpedContainer<std::vector<Types...>> : public std::true_type {};
 
-template <typename ...Types>
-constexpr bool IsHelpedContainerV = IsHelpedContainer<Types...>::value;
-
 /**
  * Write out all elements in an stl container as a space separated
  * list enclosed in square brackets
@@ -60,7 +57,7 @@
  */
 
 template <typename T>
-std::enable_if_t<IsHelpedContainerV<T>, std::ostream &>
+std::enable_if_t<IsHelpedContainer<T>::value, std::ostream &>
 operator<<(std::ostream& out, const T &t)
 {
     out << "[ ";
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/str.hh gem5-SALAM/src/base/str.hh
--- gem5/src/base/str.hh	2024-02-22 18:25:43.775605470 -0600
+++ gem5-SALAM/src/base/str.hh	2024-02-22 18:17:15.060944267 -0600
@@ -110,9 +110,9 @@
  * @name String to number helper functions for signed and unsigned
  *       integeral type, as well as enums and floating-point types.
  */
-
 template <class T>
-typename std::enable_if_t<std::is_integral_v<T>, T>
+typename std::enable_if_t<std::is_integral<T>::value &&
+                          std::is_signed<T>::value, T>
 __to_number(const std::string &value)
 {
     // Cannot parse scientific numbers
@@ -120,31 +120,44 @@
         throw std::invalid_argument("Cannot convert scientific to integral");
     }
     // start big and narrow it down if needed, determine the base dynamically
-    if constexpr (std::is_signed_v<T>) {
-        long long r = std::stoll(value, nullptr, 0);
-        if (r < std::numeric_limits<T>::lowest()
-            || r > std::numeric_limits<T>::max()) {
-            throw std::out_of_range("Out of range");
-        }
-        return static_cast<T>(r);
-    } else {
-        unsigned long long r = std::stoull(value, nullptr, 0);
-        if (r > std::numeric_limits<T>::max())
-            throw std::out_of_range("Out of range");
-        return static_cast<T>(r);
+    long long r = std::stoll(value, nullptr, 0);
+    if (r < std::numeric_limits<T>::lowest()
+        || r > std::numeric_limits<T>::max()) {
+        throw std::out_of_range("Out of range");
     }
+    return static_cast<T>(r);
 }
 
 template <class T>
-typename std::enable_if_t<std::is_enum_v<T>, T>
+typename std::enable_if_t<std::is_integral<T>::value &&
+                          !std::is_signed<T>::value, T>
 __to_number(const std::string &value)
 {
-    auto r = __to_number<typename std::underlying_type_t<T>>(value);
+    // Cannot parse scientific numbers
+    if (value.find('e') != std::string::npos) {
+        throw std::invalid_argument("Cannot convert scientific to integral");
+    }
+    // start big and narrow it down if needed, determine the base dynamically
+    unsigned long long r = std::stoull(value, nullptr, 0);
+    if (r > std::numeric_limits<T>::max())
+        throw std::out_of_range("Out of range");
+    return static_cast<T>(r);
+}
+
+template <class T>
+typename std::enable_if_t<std::is_enum<T>::value, T>
+__to_number(const std::string &value)
+{
+    // Cannot parse scientific numbers
+    if (value.find('e') != std::string::npos) {
+        throw std::invalid_argument("Cannot convert scientific to integral");
+    }
+    auto r = __to_number<typename std::underlying_type<T>::type>(value);
     return static_cast<T>(r);
 }
 
 template <class T>
-typename std::enable_if_t<std::is_floating_point_v<T>, T>
+typename std::enable_if_t<std::is_floating_point<T>::value, T>
 __to_number(const std::string &value)
 {
     // start big and narrow it down if needed
@@ -166,10 +179,10 @@
  * @return True if the parsing was successful
  */
 template <class T>
-inline std::enable_if_t<(std::is_integral_v<T> ||
-                         std::is_floating_point_v<T> ||
-                         std::is_enum_v<T>) &&
-                        !std::is_same_v<bool, T>, bool>
+inline std::enable_if_t<(std::is_integral<T>::value ||
+                         std::is_floating_point<T>::value ||
+                         std::is_enum<T>::value) &&
+                        !std::is_same<bool, T>::value, bool>
 to_number(const std::string &value, T &retval)
 {
     try {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/trie.hh gem5-SALAM/src/base/trie.hh
--- gem5/src/base/trie.hh	2024-02-22 18:25:43.775605470 -0600
+++ gem5-SALAM/src/base/trie.hh	2024-02-22 18:17:15.060944267 -0600
@@ -54,7 +54,8 @@
 class Trie
 {
   protected:
-    static_assert(std::is_integral_v<Key>, "Key has to be an integral type");
+    static_assert(std::is_integral<Key>::value,
+        "Key has to be an integral type");
 
     struct Node
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/version.cc gem5-SALAM/src/base/version.cc
--- gem5/src/base/version.cc	2024-02-22 18:25:43.775605470 -0600
+++ gem5-SALAM/src/base/version.cc	2024-02-22 18:17:15.064944288 -0600
@@ -32,6 +32,6 @@
 /**
  * @ingroup api_base_utils
  */
-const char *gem5Version = "[DEVELOP-FOR-V21.2]";
+const char *gem5Version = "21.1.0.1";
 
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/base/vnc/vncserver.cc gem5-SALAM/src/base/vnc/vncserver.cc
--- gem5/src/base/vnc/vncserver.cc	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/base/vnc/vncserver.cc	2024-02-22 18:17:15.064944288 -0600
@@ -378,7 +378,7 @@
 {
     assert(curState == WaitForProtocolVersion);
 
-    [[maybe_unused]] size_t len;
+    GEM5_VAR_USED size_t len;
     char version_string[13];
 
     // Null terminate the message so it's easier to work with
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/base.hh gem5-SALAM/src/cpu/base.hh
--- gem5/src/cpu/base.hh	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/base.hh	2024-02-22 18:17:15.064944288 -0600
@@ -47,7 +47,7 @@
 // Before we do anything else, check if this build is the NULL ISA,
 // and if so stop here
 #include "config/the_isa.hh"
-#if IS_NULL_ISA
+#if THE_ISA == NULL_ISA
 #error Including BaseCPU in a system without CPU support
 #else
 #include "arch/generic/interrupts.hh"
@@ -625,6 +625,6 @@
 
 } // namespace gem5
 
-#endif // !IS_NULL_ISA
+#endif // THE_ISA == NULL_ISA
 
 #endif // __CPU_BASE_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/checker/cpu.hh gem5-SALAM/src/cpu/checker/cpu.hh
--- gem5/src/cpu/checker/cpu.hh	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/checker/cpu.hh	2024-02-22 18:17:15.064944288 -0600
@@ -153,9 +153,15 @@
 
     BaseMMU* getMMUPtr() { return mmu; }
 
-    virtual Counter totalInsts() const override { return 0; }
+    virtual Counter totalInsts() const override
+    {
+        return 0;
+    }
 
-    virtual Counter totalOps() const override { return 0; }
+    virtual Counter totalOps() const override
+    {
+        return 0;
+    }
 
     // number of simulated loads
     Counter numLoad;
@@ -213,7 +219,7 @@
         return thread->getWritableVecReg(reg);
     }
 
-    RegVal
+    TheISA::VecElem
     readVecElemOperand(const StaticInst *si, int idx) const override
     {
         const RegId& reg = si->srcRegIdx(idx);
@@ -244,13 +250,45 @@
         return thread->readCCReg(reg.index());
     }
 
+    template<typename T>
+    void
+    setScalarResult(T&& t)
+    {
+        result.push(InstResult(std::forward<T>(t),
+                               InstResult::ResultType::Scalar));
+    }
+
+    template<typename T>
+    void
+    setVecResult(T&& t)
+    {
+        result.push(InstResult(std::forward<T>(t),
+                               InstResult::ResultType::VecReg));
+    }
+
+    template<typename T>
+    void
+    setVecElemResult(T&& t)
+    {
+        result.push(InstResult(std::forward<T>(t),
+                               InstResult::ResultType::VecElem));
+    }
+
+    template<typename T>
+    void
+    setVecPredResult(T&& t)
+    {
+        result.push(InstResult(std::forward<T>(t),
+                               InstResult::ResultType::VecPredReg));
+    }
+
     void
     setIntRegOperand(const StaticInst *si, int idx, RegVal val) override
     {
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(IntRegClass));
         thread->setIntReg(reg.index(), val);
-        result.emplace(val);
+        setScalarResult(val);
     }
 
     void
@@ -259,7 +297,7 @@
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(FloatRegClass));
         thread->setFloatReg(reg.index(), val);
-        result.emplace(val);
+        setScalarResult(val);
     }
 
     void
@@ -268,7 +306,7 @@
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(CCRegClass));
         thread->setCCReg(reg.index(), val);
-        result.emplace(val);
+        setScalarResult((uint64_t)val);
     }
 
     void
@@ -278,26 +316,26 @@
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(VecRegClass));
         thread->setVecReg(reg, val);
-        result.emplace(val);
+        setVecResult(val);
     }
 
     void
-    setVecElemOperand(const StaticInst *si, int idx, RegVal val) override
+    setVecElemOperand(const StaticInst *si, int idx,
+                      const TheISA::VecElem val) override
     {
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(VecElemClass));
         thread->setVecElem(reg, val);
-        result.emplace(val);
+        setVecElemResult(val);
     }
 
-    void
-    setVecPredRegOperand(const StaticInst *si, int idx,
-                         const TheISA::VecPredRegContainer& val) override
+    void setVecPredRegOperand(const StaticInst *si, int idx,
+                              const TheISA::VecPredRegContainer& val) override
     {
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(VecPredRegClass));
         thread->setVecPredReg(reg, val);
-        result.emplace(val);
+        setVecPredResult(val);
     }
 
     bool readPredicate() const override { return thread->readPredicate(); }
@@ -438,11 +476,8 @@
         return BaseCPU::mwaitAtomic(0, tc, thread->mmu);
     }
 
-    AddressMonitor *
-    getAddrMonitor() override
-    {
-        return BaseCPU::getCpuAddrMonitor(0);
-    }
+    AddressMonitor *getAddrMonitor() override
+    { return BaseCPU::getCpuAddrMonitor(0); }
 
     /**
      * Helper function used to generate the request for a single fragment of a
@@ -467,22 +502,22 @@
 
     Fault readMem(Addr addr, uint8_t *data, unsigned size,
                   Request::Flags flags,
-                  const std::vector<bool>& byte_enable) override;
+                  const std::vector<bool>& byte_enable)
+        override;
 
     Fault writeMem(uint8_t *data, unsigned size, Addr addr,
                    Request::Flags flags, uint64_t *res,
-                   const std::vector<bool>& byte_enable) override;
+                   const std::vector<bool>& byte_enable)
+        override;
 
-    Fault
-    amoMem(Addr addr, uint8_t* data, unsigned size,
-           Request::Flags flags, AtomicOpFunctorPtr amo_op) override
+    Fault amoMem(Addr addr, uint8_t* data, unsigned size,
+                 Request::Flags flags, AtomicOpFunctorPtr amo_op) override
     {
         panic("AMO is not supported yet in CPU checker\n");
     }
 
     unsigned int
-    readStCondFailures() const override
-    {
+    readStCondFailures() const override {
         return thread->readStCondFailures();
     }
 
@@ -550,8 +585,7 @@
     void handlePendingInt();
 
   private:
-    void
-    handleError(const DynInstPtr &inst)
+    void handleError(const DynInstPtr &inst)
     {
         if (exitOnError) {
             dumpAndExit(inst);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/checker/cpu_impl.hh gem5-SALAM/src/cpu/checker/cpu_impl.hh
--- gem5/src/cpu/checker/cpu_impl.hh	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/checker/cpu_impl.hh	2024-02-22 18:17:15.064944288 -0600
@@ -471,23 +471,28 @@
     int idx = -1;
     bool result_mismatch = false;
     bool scalar_mismatch = false;
+    bool vector_mismatch = false;
 
     if (inst->isUnverifiable()) {
         // Unverifiable instructions assume they were executed
         // properly by the CPU. Grab the result from the
         // instruction and write it to the register.
-        copyResult(inst, InstResult((RegVal)0), idx);
+        copyResult(inst, InstResult(0ul, InstResult::ResultType::Scalar), idx);
     } else if (inst->numDestRegs() > 0 && !result.empty()) {
         DPRINTF(Checker, "Dest regs %d, number of checker dest regs %d\n",
                          inst->numDestRegs(), result.size());
         for (int i = 0; i < inst->numDestRegs() && !result.empty(); i++) {
             checker_val = result.front();
             result.pop();
-            inst_val = inst->popResult(InstResult((RegVal)0));
+            inst_val = inst->popResult(
+                    InstResult(0ul, InstResult::ResultType::Scalar));
             if (checker_val != inst_val) {
                 result_mismatch = true;
                 idx = i;
-                scalar_mismatch = checker_val.is<RegVal>();
+                scalar_mismatch = checker_val.isScalar();
+                vector_mismatch = checker_val.isVector();
+                panic_if(!(scalar_mismatch || vector_mismatch),
+                        "Unknown type of result\n");
             }
         }
     } // Checker CPU checks all the saved results in the dyninst passed by
@@ -500,8 +505,8 @@
         if (scalar_mismatch) {
             warn("%lli: Instruction results (%i) do not match! (Values may"
                  " not actually be integers) Inst: %#x, checker: %#x",
-                 curTick(), idx, inst_val.asNoAssert<RegVal>(),
-                 checker_val.as<RegVal>());
+                 curTick(), idx, inst_val.asIntegerNoAssert(),
+                 checker_val.asInteger());
         }
 
         // It's useful to verify load values from memory, but in MP
@@ -586,22 +591,29 @@
         const RegId& idx = inst->destRegIdx(start_idx);
         switch (idx.classValue()) {
           case IntRegClass:
-            thread->setIntReg(idx.index(), mismatch_val.as<RegVal>());
+            panic_if(!mismatch_val.isScalar(), "Unexpected type of result");
+            thread->setIntReg(idx.index(), mismatch_val.asInteger());
             break;
           case FloatRegClass:
-            thread->setFloatReg(idx.index(), mismatch_val.as<RegVal>());
+            panic_if(!mismatch_val.isScalar(), "Unexpected type of result");
+            thread->setFloatReg(idx.index(), mismatch_val.asInteger());
             break;
           case VecRegClass:
-            thread->setVecReg(idx, mismatch_val.as<TheISA::VecRegContainer>());
+            panic_if(!mismatch_val.isVector(), "Unexpected type of result");
+            thread->setVecReg(idx, mismatch_val.asVector());
             break;
           case VecElemClass:
-            thread->setVecElem(idx, mismatch_val.as<RegVal>());
+            panic_if(!mismatch_val.isVecElem(),
+                     "Unexpected type of result");
+            thread->setVecElem(idx, mismatch_val.asVectorElem());
             break;
           case CCRegClass:
-            thread->setCCReg(idx.index(), mismatch_val.as<RegVal>());
+            panic_if(!mismatch_val.isScalar(), "Unexpected type of result");
+            thread->setCCReg(idx.index(), mismatch_val.asInteger());
             break;
           case MiscRegClass:
-            thread->setMiscReg(idx.index(), mismatch_val.as<RegVal>());
+            panic_if(!mismatch_val.isScalar(), "Unexpected type of result");
+            thread->setMiscReg(idx.index(), mismatch_val.asInteger());
             break;
           default:
             panic("Unknown register class: %d", (int)idx.classValue());
@@ -614,21 +626,27 @@
         res = inst->popResult();
         switch (idx.classValue()) {
           case IntRegClass:
-            thread->setIntReg(idx.index(), res.as<RegVal>());
+            panic_if(!res.isScalar(), "Unexpected type of result");
+            thread->setIntReg(idx.index(), res.asInteger());
             break;
           case FloatRegClass:
-            thread->setFloatReg(idx.index(), res.as<RegVal>());
+            panic_if(!res.isScalar(), "Unexpected type of result");
+            thread->setFloatReg(idx.index(), res.asInteger());
             break;
           case VecRegClass:
-            thread->setVecReg(idx, res.as<TheISA::VecRegContainer>());
+            panic_if(!res.isVector(), "Unexpected type of result");
+            thread->setVecReg(idx, res.asVector());
             break;
           case VecElemClass:
-            thread->setVecElem(idx, res.as<RegVal>());
+            panic_if(!res.isVecElem(), "Unexpected type of result");
+            thread->setVecElem(idx, res.asVectorElem());
             break;
           case CCRegClass:
-            thread->setCCReg(idx.index(), res.as<RegVal>());
+            panic_if(!res.isScalar(), "Unexpected type of result");
+            thread->setCCReg(idx.index(), res.asInteger());
             break;
           case MiscRegClass:
+            panic_if(res.isValid(), "MiscReg expecting invalid result");
             // Try to get the proper misc register index for ARM here...
             thread->setMiscReg(idx.index(), 0);
             break;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/checker/SConsopts gem5-SALAM/src/cpu/checker/SConsopts
--- gem5/src/cpu/checker/SConsopts	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/checker/SConsopts	2024-02-22 18:17:15.064944288 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_CPU_MODELS=['CheckerCPU'])
+CpuModel('CheckerCPU')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/checker/thread_context.hh gem5-SALAM/src/cpu/checker/thread_context.hh
--- gem5/src/cpu/checker/thread_context.hh	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/checker/thread_context.hh	2024-02-22 18:17:15.064944288 -0600
@@ -90,7 +90,7 @@
     bool
     schedule(PCEvent *e) override
     {
-        [[maybe_unused]] bool check_ret = checkerTC->schedule(e);
+        GEM5_VAR_USED bool check_ret = checkerTC->schedule(e);
         bool actual_ret = actualTC->schedule(e);
         assert(actual_ret == check_ret);
         return actual_ret;
@@ -99,7 +99,7 @@
     bool
     remove(PCEvent *e) override
     {
-        [[maybe_unused]] bool check_ret = checkerTC->remove(e);
+        GEM5_VAR_USED bool check_ret = checkerTC->remove(e);
         bool actual_ret = actualTC->remove(e);
         assert(actual_ret == check_ret);
         return actual_ret;
@@ -167,6 +167,18 @@
 
     void setProcessPtr(Process *p) override { actualTC->setProcessPtr(p); }
 
+    PortProxy &
+    getVirtProxy() override
+    {
+        return actualTC->getVirtProxy();
+    }
+
+    void
+    initMemProxies(ThreadContext *tc) override
+    {
+        actualTC->initMemProxies(tc);
+    }
+
     void
     connectMemPorts(ThreadContext *tc)
     {
@@ -253,7 +265,7 @@
         return actualTC->getWritableVecReg(reg);
     }
 
-    RegVal
+    const TheISA::VecElem &
     readVecElem(const RegId& reg) const override
     {
         return actualTC->readVecElem(reg);
@@ -299,7 +311,7 @@
     }
 
     void
-    setVecElem(const RegId& reg, RegVal val) override
+    setVecElem(const RegId& reg, const TheISA::VecElem& val) override
     {
         actualTC->setVecElem(reg, val);
         checkerTC->setVecElem(reg, val);
@@ -449,7 +461,7 @@
         actualTC->setVecRegFlat(idx, val);
     }
 
-    RegVal
+    const TheISA::VecElem &
     readVecElemFlat(RegIndex idx, const ElemIndex& elem_idx) const override
     {
         return actualTC->readVecElemFlat(idx, elem_idx);
@@ -457,7 +469,7 @@
 
     void
     setVecElemFlat(RegIndex idx, const ElemIndex& elem_idx,
-            RegVal val) override
+            const TheISA::VecElem& val) override
     {
         actualTC->setVecElemFlat(idx, elem_idx, val);
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/exec_context.hh gem5-SALAM/src/cpu/exec_context.hh
--- gem5/src/cpu/exec_context.hh	2024-02-22 18:25:43.783605512 -0600
+++ gem5-SALAM/src/cpu/exec_context.hh	2024-02-22 18:17:15.064944288 -0600
@@ -123,11 +123,12 @@
     /** Vector Elem Interfaces. */
     /** @{ */
     /** Reads an element of a vector register. */
-    virtual RegVal readVecElemOperand(const StaticInst *si, int idx) const = 0;
+    virtual TheISA::VecElem readVecElemOperand(
+            const StaticInst *si, int idx) const = 0;
 
     /** Sets a vector register to a value. */
     virtual void setVecElemOperand(
-            const StaticInst *si, int idx, RegVal val) = 0;
+            const StaticInst *si, int idx, const TheISA::VecElem val) = 0;
     /** @} */
 
     /** Predicate registers interface. */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/inst_res.hh gem5-SALAM/src/cpu/inst_res.hh
--- gem5/src/cpu/inst_res.hh	2024-02-22 18:25:43.783605512 -0600
+++ gem5-SALAM/src/cpu/inst_res.hh	2024-02-22 18:17:15.064944288 -0600
@@ -38,148 +38,168 @@
 #ifndef __CPU_INST_RES_HH__
 #define __CPU_INST_RES_HH__
 
-#include <any>
 #include <type_traits>
 
-#include "base/logging.hh"
-#include "base/types.hh"
+#include "arch/generic/types.hh"
+#include "arch/generic/vec_reg.hh"
 
 namespace gem5
 {
 
 class InstResult
 {
+  public:
+    union MultiResult
+    {
+        uint64_t integer;
+        double dbl;
+        TheISA::VecRegContainer vector;
+        TheISA::VecElem vecElem;
+        TheISA::VecPredRegContainer pred;
+        MultiResult() {}
+    };
+
+    enum class ResultType
+    {
+        Scalar,
+        VecElem,
+        VecReg,
+        VecPredReg,
+        NumResultTypes,
+        Invalid
+    };
+
   private:
-    std::any result;
-    std::function<bool(const std::any &a, const std::any &b)> equals;
+    MultiResult result;
+    ResultType type;
 
   public:
     /** Default constructor creates an invalid result. */
-    InstResult() :
-        // This InstResult is empty, and will only equal other InstResults
-        // which are also empty.
-        equals([](const std::any &a, const std::any &b) -> bool {
-            gem5_assert(!a.has_value());
-            return !b.has_value();
-        })
-    {}
+    InstResult() : type(ResultType::Invalid) { }
     InstResult(const InstResult &) = default;
-
-    template <typename T>
-    explicit InstResult(T val) : result(val),
-
-        // Set equals so it knows how to compare results of type T.
-        equals([](const std::any &a, const std::any &b) -> bool {
-            // If one has a value but the other doesn't, not equal.
-            if (a.has_value() != b.has_value())
-                return false;
-            // If they are both empty, equal.
-            if (!a.has_value())
-                return true;
-            // At least the local object should be of the right type.
-            gem5_assert(a.type() == typeid(T));
-            // If these aren't the same type, not equal.
-            if (a.type() != b.type())
-                return false;
-            // We now know these both hold a result of the right type.
-            return std::any_cast<const T&>(a) == std::any_cast<const T&>(b);
-        })
-    {
-        static_assert(!std::is_pointer_v<T>,
-                "InstResult shouldn't point to external data.");
-        // Floating point values should be converted to/from ints using
-        // floatToBits and bitsToFloat, and not stored in InstResult directly.
-        static_assert(!std::is_floating_point_v<T>,
-                "Floating point values should be converted to/from ints.");
-    }
-
-    // Convert floating point values to integers.
-    template <typename T,
-             std::enable_if_t<std::is_floating_point_v<T>, int> = 0>
-    explicit InstResult(T val) : InstResult(floatToBits(val)) {}
-
-    // Convert all integer types to RegVal.
-    template <typename T,
-        std::enable_if_t<std::is_integral_v<T> && !std::is_same_v<T, RegVal>,
-                         int> = 0>
-    explicit InstResult(T val) : InstResult(static_cast<RegVal>(val)) {}
-
-    InstResult &
-    operator=(const InstResult& that)
-    {
-        result = that.result;
-        equals = that.equals;
+    /** Scalar result from scalar. */
+    template<typename T>
+    explicit InstResult(T i, const ResultType& t) : type(t) {
+        static_assert(std::is_integral<T>::value ^
+                        std::is_floating_point<T>::value,
+                "Parameter type is neither integral nor fp, or it is both");
+        if (std::is_integral<T>::value) {
+            result.integer = i;
+        } else if (std::is_floating_point<T>::value) {
+            result.dbl = i;
+        }
+    }
+    /** Vector result. */
+    explicit InstResult(const TheISA::VecRegContainer& v, const ResultType& t)
+        : type(t) { result.vector = v; }
+    /** Predicate result. */
+    explicit InstResult(const TheISA::VecPredRegContainer& v,
+            const ResultType& t)
+        : type(t) { result.pred = v; }
+
+    InstResult& operator=(const InstResult& that) {
+        type = that.type;
+        switch (type) {
+        /* Given that misc regs are not written to, there may be invalids in
+         * the result stack. */
+        case ResultType::Invalid:
+            break;
+        case ResultType::Scalar:
+            result.integer = that.result.integer;
+            break;
+        case ResultType::VecElem:
+            result.vecElem = that.result.vecElem;
+            break;
+        case ResultType::VecReg:
+            result.vector = that.result.vector;
+            break;
+        case ResultType::VecPredReg:
+            result.pred = that.result.pred;
+            break;
+
+        default:
+            panic("Assigning result from unknown result type");
+            break;
+        }
         return *this;
     }
-
     /**
      * Result comparison
      * Two invalid results always differ.
      */
-    bool
-    operator==(const InstResult& that) const
-    {
-        return equals(result, that.result);
+    bool operator==(const InstResult& that) const {
+        if (this->type != that.type)
+            return false;
+        switch (type) {
+        case ResultType::Scalar:
+            return result.integer == that.result.integer;
+        case ResultType::VecElem:
+            return result.vecElem == that.result.vecElem;
+        case ResultType::VecReg:
+            return result.vector == that.result.vector;
+        case ResultType::VecPredReg:
+            return result.pred == that.result.pred;
+        case ResultType::Invalid:
+            return false;
+        default:
+            panic("Unknown type of result: %d\n", (int)type);
+        }
     }
 
-    bool
-    operator!=(const InstResult& that) const
-    {
+    bool operator!=(const InstResult& that) const {
         return !operator==(that);
     }
 
     /** Checks */
     /** @{ */
-
-    template <typename T>
-    bool
-    is() const
-    {
-        static_assert(!std::is_floating_point_v<T>,
-                "Floating point values should be converted to/from ints.");
-        return result.type() == typeid(T);
-    }
-
-    template <typename T>
-    std::enable_if_t<std::is_integral_v<T> && !std::is_same_v<T, RegVal>, bool>
-    is() const
-    {
-        return is<RegVal>();
-    }
-
+    /** Is this a scalar result?. */
+    bool isScalar() const { return type == ResultType::Scalar; }
+    /** Is this a vector result?. */
+    bool isVector() const { return type == ResultType::VecReg; }
+    /** Is this a vector element result?. */
+    bool isVecElem() const { return type == ResultType::VecElem; }
+    /** Is this a predicate result?. */
+    bool isPred() const { return type == ResultType::VecPredReg; }
     /** Is this a valid result?. */
-    bool isValid() const { return result.has_value(); }
+    bool isValid() const { return type != ResultType::Invalid; }
     /** @} */
 
     /** Explicit cast-like operations. */
     /** @{ */
-    template <typename T>
-    T
-    as() const
+    const uint64_t&
+    asInteger() const
     {
-        assert(is<T>());
-        return std::any_cast<T>(result);
-    }
-
-    template <typename T>
-    std::enable_if_t<std::is_integral_v<T> && !std::is_same_v<T, RegVal>,
-                     RegVal>
-    as() const
-    {
-        return as<RegVal>();
+        assert(isScalar());
+        return result.integer;
     }
 
     /** Cast to integer without checking type.
      * This is required to have the o3 cpu checker happy, as it
      * compares results as integers without being fully aware of
      * their nature. */
-    template <typename T>
-    T
-    asNoAssert() const
-    {
-        if (!is<T>())
-            return T{};
-        return as<T>();
+    const uint64_t&
+    asIntegerNoAssert() const
+    {
+        return result.integer;
+    }
+    const TheISA::VecRegContainer&
+    asVector() const
+    {
+        panic_if(!isVector(), "Converting scalar (or invalid) to vector!!");
+        return result.vector;
+    }
+    const TheISA::VecElem&
+    asVectorElem() const
+    {
+        panic_if(!isVecElem(), "Converting scalar (or invalid) to vector!!");
+        return result.vecElem;
+    }
+
+    const TheISA::VecPredRegContainer&
+    asPred() const
+    {
+        panic_if(!isPred(), "Converting scalar (or invalid) to predicate!!");
+        return result.pred;
     }
 
     /** @} */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/kvm/base.cc gem5-SALAM/src/cpu/kvm/base.cc
--- gem5/src/cpu/kvm/base.cc	2024-02-22 18:25:43.783605512 -0600
+++ gem5-SALAM/src/cpu/kvm/base.cc	2024-02-22 18:17:15.064944288 -0600
@@ -109,7 +109,11 @@
 BaseKvmCPU::init()
 {
     BaseCPU::init();
-    fatal_if(numThreads != 1, "KVM: Multithreading not supported");
+
+    if (numThreads != 1)
+        fatal("KVM: Multithreading not supported");
+
+    tc->initMemProxies(tc);
 }
 
 void
@@ -337,7 +341,7 @@
             deschedule(tickEvent);
         _status = Idle;
 
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case Idle:
         // Idle, no need to drain
         assert(!tickEvent.scheduled());
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/kvm/x86_cpu.cc gem5-SALAM/src/cpu/kvm/x86_cpu.cc
--- gem5/src/cpu/kvm/x86_cpu.cc	2024-02-22 18:25:43.787605533 -0600
+++ gem5-SALAM/src/cpu/kvm/x86_cpu.cc	2024-02-22 18:17:15.068944309 -0600
@@ -403,7 +403,7 @@
       case MISCREG_ES:
         if (seg.unusable)
             break;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_CS:
         if (seg.base & 0xffffffff00000000ULL)
             warn("Illegal %s base: 0x%x\n", name, seg.base);
@@ -441,7 +441,7 @@
           case 3:
             if (sregs.cs.type == 3 && seg.dpl != 0)
                 warn("CS type is 3, but SS DPL is != 0.\n");
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
           case 7:
             if (!(sregs.cr0 & 1) && seg.dpl != 0)
                 warn("SS DPL is %i, but CR0 PE is 0\n", seg.dpl);
@@ -485,7 +485,7 @@
       case MISCREG_GS:
         if (seg.unusable)
             break;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_CS:
         if (!seg.s)
             warn("%s: S flag not set\n", name);
@@ -494,7 +494,7 @@
       case MISCREG_TSL:
         if (seg.unusable)
             break;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_TR:
         if (seg.s)
             warn("%s: S flag is set\n", name);
@@ -510,7 +510,7 @@
       case MISCREG_TSL:
         if (seg.unusable)
             break;
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case MISCREG_TR:
       case MISCREG_CS:
         if (!seg.present)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/cpu.cc gem5-SALAM/src/cpu/minor/cpu.cc
--- gem5/src/cpu/minor/cpu.cc	2024-02-22 18:25:43.787605533 -0600
+++ gem5-SALAM/src/cpu/minor/cpu.cc	2024-02-22 18:17:15.068944309 -0600
@@ -101,10 +101,19 @@
 {
     BaseCPU::init();
 
-    if (!params().switched_out && system->getMemoryMode() != enums::timing) {
+    if (!params().switched_out &&
+        system->getMemoryMode() != enums::timing)
+    {
         fatal("The Minor CPU requires the memory system to be in "
             "'timing' mode.\n");
     }
+
+    /* Initialise the ThreadContext's memory proxies */
+    for (ThreadID thread_id = 0; thread_id < threads.size(); thread_id++) {
+        ThreadContext *tc = getContext(thread_id);
+
+        tc->initMemProxies(tc);
+    }
 }
 
 /** Stats interface from SimObject (by way of BaseCPU) */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/dyn_inst.cc gem5-SALAM/src/cpu/minor/dyn_inst.cc
--- gem5/src/cpu/minor/dyn_inst.cc	2024-02-22 18:25:43.787605533 -0600
+++ gem5-SALAM/src/cpu/minor/dyn_inst.cc	2024-02-22 18:17:15.068944309 -0600
@@ -147,7 +147,14 @@
       case MiscRegClass:
         {
             RegIndex misc_reg = reg.index();
-            os << 'm' << misc_reg << '(' << reg_class.regName(reg) << ')';
+
+        /* This is an ugly test because not all archs. have miscRegName */
+#if THE_ISA == ARM_ISA
+            os << 'm' << misc_reg << '(' << TheISA::miscRegName[misc_reg] <<
+                ')';
+#else
+            os << 'n' << misc_reg;
+#endif
         }
         break;
       case FloatRegClass:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/exec_context.hh gem5-SALAM/src/cpu/minor/exec_context.hh
--- gem5/src/cpu/minor/exec_context.hh	2024-02-22 18:25:43.787605533 -0600
+++ gem5-SALAM/src/cpu/minor/exec_context.hh	2024-02-22 18:17:15.068944309 -0600
@@ -176,7 +176,7 @@
         return thread.getWritableVecReg(reg);
     }
 
-    RegVal
+    TheISA::VecElem
     readVecElemOperand(const StaticInst *si, int idx) const override
     {
         const RegId& reg = si->srcRegIdx(idx);
@@ -235,7 +235,8 @@
     }
 
     void
-    setVecElemOperand(const StaticInst *si, int idx, RegVal val) override
+    setVecElemOperand(const StaticInst *si, int idx,
+                      const TheISA::VecElem val) override
     {
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(VecElemClass));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/execute.cc gem5-SALAM/src/cpu/minor/execute.cc
--- gem5/src/cpu/minor/execute.cc	2024-02-22 18:25:43.791605554 -0600
+++ gem5-SALAM/src/cpu/minor/execute.cc	2024-02-22 18:17:15.068944309 -0600
@@ -39,6 +39,7 @@
 
 #include <functional>
 
+#include "arch/locked_mem.hh"
 #include "cpu/minor/cpu.hh"
 #include "cpu/minor/exec_context.hh"
 #include "cpu/minor/fetch1.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/fetch2.cc gem5-SALAM/src/cpu/minor/fetch2.cc
--- gem5/src/cpu/minor/fetch2.cc	2024-02-22 18:25:43.791605554 -0600
+++ gem5-SALAM/src/cpu/minor/fetch2.cc	2024-02-22 18:17:15.068944309 -0600
@@ -436,21 +436,24 @@
                         line_in->lineWidth, output_index, fetch_info.inputIndex,
                         fetch_info.pc, *dyn_inst);
 
-                    /*
-                     * In SE mode, it's possible to branch to a microop when
-                     * replaying faults such as page faults (or simply
-                     * intra-microcode branches in X86).  Unfortunately,
-                     * as Minor has micro-op decomposition in a separate
-                     * pipeline stage from instruction decomposition, the
-                     * following advancePC (which may follow a branch with
-                     * microPC() != 0) *must* see a fresh macroop.
+#if THE_ISA == X86_ISA || THE_ISA == ARM_ISA
+                    /* In SE mode, it's possible to branch to a microop when
+                     *  replaying faults such as page faults (or simply
+                     *  intra-microcode branches in X86).  Unfortunately,
+                     *  as Minor has micro-op decomposition in a separate
+                     *  pipeline stage from instruction decomposition, the
+                     *  following advancePC (which may follow a branch with
+                     *  microPC() != 0) *must* see a fresh macroop.  This
+                     *  kludge should be improved with an addition to PCState
+                     *  but I offer it in this form for the moment
                      *
                      * X86 can branch within microops so we need to deal with
                      * the case that, after a branch, the first un-advanced PC
                      * may be pointing to a microop other than 0.  Once
-                     * advanced, however, the microop number *must* be 0
-                     */
-                    fetch_info.pc.uReset();
+                     * advanced, however, the microop number *must* be 0 */
+                    fetch_info.pc.upc(0);
+                    fetch_info.pc.nupc(1);
+#endif
 
                     /* Advance PC for the next instruction */
                     decoded_inst->advancePC(fetch_info.pc);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/lsq.cc gem5-SALAM/src/cpu/minor/lsq.cc
--- gem5/src/cpu/minor/lsq.cc	2024-02-22 18:25:43.791605554 -0600
+++ gem5-SALAM/src/cpu/minor/lsq.cc	2024-02-22 18:17:15.068944309 -0600
@@ -83,7 +83,7 @@
     SimpleThread &thread = *port.cpu.threads[inst->id.threadId];
     TheISA::PCState old_pc = thread.pcState();
     ExecContext context(port.cpu, thread, port.execute, inst, zeroReg);
-    [[maybe_unused]] Fault fault = inst->translationFault;
+    GEM5_VAR_USED Fault fault = inst->translationFault;
 
     // Give the instruction a chance to suppress a translation fault
     inst->translationFault = inst->staticInst->initiateAcc(&context, nullptr);
@@ -339,7 +339,7 @@
 {
     port.numAccessesInDTLB--;
 
-    [[maybe_unused]] unsigned int expected_fragment_index =
+    GEM5_VAR_USED unsigned int expected_fragment_index =
         numTranslatedFragments;
 
     numInTranslationFragments--;
@@ -480,7 +480,7 @@
     for (unsigned int fragment_index = 0; fragment_index < numFragments;
          fragment_index++)
     {
-        [[maybe_unused]] bool is_last_fragment = false;
+        GEM5_VAR_USED bool is_last_fragment = false;
 
         if (fragment_addr == base_addr) {
             /* First fragment */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/minor/SConsopts gem5-SALAM/src/cpu/minor/SConsopts
--- gem5/src/cpu/minor/SConsopts	2024-02-22 18:25:43.787605533 -0600
+++ gem5-SALAM/src/cpu/minor/SConsopts	2024-02-22 18:17:15.068944309 -0600
@@ -37,4 +37,4 @@
 
 Import('*')
 
-main.Append(ALL_CPU_MODELS=['MinorCPU'])
+CpuModel('MinorCPU', default=True)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/commit.cc gem5-SALAM/src/cpu/o3/commit.cc
--- gem5/src/cpu/o3/commit.cc	2024-02-22 18:25:43.795605575 -0600
+++ gem5-SALAM/src/cpu/o3/commit.cc	2024-02-22 18:17:15.068944309 -0600
@@ -674,7 +674,7 @@
             // will be active.
             _nextStatus = Active;
 
-            [[maybe_unused]] const DynInstPtr &inst = rob->readHeadInst(tid);
+            GEM5_VAR_USED const DynInstPtr &inst = rob->readHeadInst(tid);
 
             DPRINTF(Commit,"[tid:%i] Instruction [sn:%llu] PC %s is head of"
                     " ROB and ready to commit\n",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/cpu.cc gem5-SALAM/src/cpu/o3/cpu.cc
--- gem5/src/cpu/o3/cpu.cc	2024-02-22 18:25:43.795605575 -0600
+++ gem5-SALAM/src/cpu/o3/cpu.cc	2024-02-22 18:17:15.072944330 -0600
@@ -565,6 +565,8 @@
         // Set noSquashFromTC so that the CPU doesn't squash when initially
         // setting up registers.
         thread[tid]->noSquashFromTC = true;
+        // Initialise the ThreadContext's memory proxies
+        thread[tid]->initMemProxies(thread[tid]->getTC());
     }
 
     // Clear noSquashFromTC.
@@ -1170,7 +1172,7 @@
     return regFile.getWritableVecReg(phys_reg);
 }
 
-RegVal
+const TheISA::VecElem&
 CPU::readVecElem(PhysRegIdPtr phys_reg) const
 {
     cpuStats.vecRegfileReads++;
@@ -1220,7 +1222,7 @@
 }
 
 void
-CPU::setVecElem(PhysRegIdPtr phys_reg, RegVal val)
+CPU::setVecElem(PhysRegIdPtr phys_reg, const TheISA::VecElem& val)
 {
     cpuStats.vecRegfileWrites++;
     regFile.setVecElem(phys_reg, val);
@@ -1277,7 +1279,7 @@
     return getWritableVecReg(phys_reg);
 }
 
-RegVal
+const TheISA::VecElem&
 CPU::readArchVecElem(
         const RegIndex& reg_idx, const ElemIndex& ldx, ThreadID tid) const
 {
@@ -1343,7 +1345,7 @@
 
 void
 CPU::setArchVecElem(const RegIndex& reg_idx, const ElemIndex& ldx,
-                    RegVal val, ThreadID tid)
+                                const TheISA::VecElem& val, ThreadID tid)
 {
     PhysRegIdPtr phys_reg = commitRenameMap[tid].lookup(
                 RegId(VecElemClass, reg_idx, ldx));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/cpu.hh gem5-SALAM/src/cpu/o3/cpu.hh
--- gem5/src/cpu/o3/cpu.hh	2024-02-22 18:25:43.799605596 -0600
+++ gem5-SALAM/src/cpu/o3/cpu.hh	2024-02-22 18:17:15.072944330 -0600
@@ -49,6 +49,7 @@
 #include <set>
 #include <vector>
 
+#include "arch/generic/types.hh"
 #include "arch/pcstate.hh"
 #include "base/statistics.hh"
 #include "config/the_isa.hh"
@@ -123,8 +124,7 @@
     EventFunctionWrapper threadExitEvent;
 
     /** Schedule tick event, regardless of its current state. */
-    void
-    scheduleTickEvent(Cycles delay)
+    void scheduleTickEvent(Cycles delay)
     {
         if (tickEvent.squashed())
             reschedule(tickEvent, clockEdge(delay));
@@ -133,8 +133,7 @@
     }
 
     /** Unschedule tick event, regardless of its current state. */
-    void
-    unscheduleTickEvent()
+    void unscheduleTickEvent()
     {
         if (tickEvent.scheduled())
             tickEvent.squash();
@@ -194,11 +193,8 @@
     void startup() override;
 
     /** Returns the Number of Active Threads in the CPU */
-    int
-    numActiveThreads()
-    {
-        return activeThreads.size();
-    }
+    int numActiveThreads()
+    { return activeThreads.size(); }
 
     /** Add Thread to Active Threads List */
     void activateThread(ThreadID tid);
@@ -279,7 +275,8 @@
     void verifyMemoryMode() const override;
 
     /** Get the current instruction sequence number, and increment it. */
-    InstSeqNum getAndIncrementInstSeq() { return globalSeqNum++; }
+    InstSeqNum getAndIncrementInstSeq()
+    { return globalSeqNum++; }
 
     /** Traps to handle given fault. */
     void trap(const Fault &fault, ThreadID tid, const StaticInstPtr &inst);
@@ -340,13 +337,10 @@
     enums::VecRegRenameMode vecRenameMode() const { return vecMode; }
 
     /** Sets the current vector renaming mode */
-    void
-    vecRenameMode(enums::VecRegRenameMode vec_mode)
-    {
-        vecMode = vec_mode;
-    }
+    void vecRenameMode(enums::VecRegRenameMode vec_mode)
+    { vecMode = vec_mode; }
 
-    RegVal readVecElem(PhysRegIdPtr reg_idx) const;
+    const TheISA::VecElem& readVecElem(PhysRegIdPtr reg_idx) const;
 
     const TheISA::VecPredRegContainer&
         readVecPredReg(PhysRegIdPtr reg_idx) const;
@@ -361,7 +355,7 @@
 
     void setVecReg(PhysRegIdPtr reg_idx, const TheISA::VecRegContainer& val);
 
-    void setVecElem(PhysRegIdPtr reg_idx, RegVal val);
+    void setVecElem(PhysRegIdPtr reg_idx, const TheISA::VecElem& val);
 
     void setVecPredReg(PhysRegIdPtr reg_idx,
             const TheISA::VecPredRegContainer& val);
@@ -377,7 +371,7 @@
     /** Read architectural vector register for modification. */
     TheISA::VecRegContainer& getWritableArchVecReg(int reg_idx, ThreadID tid);
 
-    RegVal readArchVecElem(const RegIndex& reg_idx,
+    const TheISA::VecElem& readArchVecElem(const RegIndex& reg_idx,
             const ElemIndex& ldx, ThreadID tid) const;
 
     const TheISA::VecPredRegContainer& readArchVecPredReg(
@@ -404,7 +398,7 @@
             ThreadID tid);
 
     void setArchVecElem(const RegIndex& reg_idx, const ElemIndex& ldx,
-                        RegVal val, ThreadID tid);
+                        const TheISA::VecElem& val, ThreadID tid);
 
     void setArchCCReg(int reg_idx, RegVal val, ThreadID tid);
 
@@ -575,18 +569,12 @@
     void activityThisCycle() { activityRec.activity(); }
 
     /** Changes a stage's status to active within the activity recorder. */
-    void
-    activateStage(const StageIdx idx)
-    {
-        activityRec.activateStage(idx);
-    }
+    void activateStage(const StageIdx idx)
+    { activityRec.activateStage(idx); }
 
     /** Changes a stage's status to inactive within the activity recorder. */
-    void
-    deactivateStage(const StageIdx idx)
-    {
-        activityRec.deactivateStage(idx);
-    }
+    void deactivateStage(const StageIdx idx)
+    { activityRec.deactivateStage(idx); }
 
     /** Wakes the CPU, rescheduling the CPU if it's not already active. */
     void wakeCPU();
@@ -635,11 +623,11 @@
     std::vector<ThreadID> tids;
 
     /** CPU pushRequest function, forwards request to LSQ. */
-    Fault
-    pushRequest(const DynInstPtr& inst, bool isLoad, uint8_t *data,
-                unsigned int size, Addr addr, Request::Flags flags,
-                uint64_t *res, AtomicOpFunctorPtr amo_op = nullptr,
-                const std::vector<bool>& byte_enable=std::vector<bool>())
+    Fault pushRequest(const DynInstPtr& inst, bool isLoad, uint8_t *data,
+                      unsigned int size, Addr addr, Request::Flags flags,
+                      uint64_t *res, AtomicOpFunctorPtr amo_op = nullptr,
+                      const std::vector<bool>& byte_enable =
+                          std::vector<bool>())
 
     {
         return iew.ldstQueue.pushRequest(inst, isLoad, data, size, addr,
@@ -647,15 +635,13 @@
     }
 
     /** CPU read function, forwards read to LSQ. */
-    Fault
-    read(LSQRequest* req, int load_idx)
+    Fault read(LSQRequest* req, int load_idx)
     {
         return iew.ldstQueue.read(req, load_idx);
     }
 
     /** CPU write function, forwards write to LSQ. */
-    Fault
-    write(LSQRequest* req, uint8_t *data, int store_idx)
+    Fault write(LSQRequest* req, uint8_t *data, int store_idx)
     {
         return iew.ldstQueue.write(req, data, store_idx);
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/dyn_inst.cc gem5-SALAM/src/cpu/o3/dyn_inst.cc
--- gem5/src/cpu/o3/dyn_inst.cc	2024-02-22 18:25:43.799605596 -0600
+++ gem5-SALAM/src/cpu/o3/dyn_inst.cc	2024-02-22 18:17:15.072944330 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011, 2021 ARM Limited
+ * Copyright (c) 2010-2011 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -301,11 +301,9 @@
 Fault
 DynInst::initiateHtmCmd(Request::Flags flags)
 {
-    const unsigned int size = 8;
     return cpu->pushRequest(
             dynamic_cast<DynInstPtr::PtrType>(this),
-            /* ld */ true, nullptr, size, 0x0ul, flags, nullptr, nullptr,
-            std::vector<bool>(size, true));
+            /* ld */ true, nullptr, 8, 0x0ul, flags, nullptr, nullptr);
 }
 
 Fault
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/dyn_inst.hh gem5-SALAM/src/cpu/o3/dyn_inst.hh
--- gem5/src/cpu/o3/dyn_inst.hh	2024-02-22 18:25:43.799605596 -0600
+++ gem5-SALAM/src/cpu/o3/dyn_inst.hh	2024-02-22 18:17:15.072944330 -0600
@@ -771,12 +771,47 @@
 
     /** Pushes a result onto the instResult queue. */
     /** @{ */
+    /** Scalar result. */
     template<typename T>
     void
-    setResult(T &&t)
+    setScalarResult(T &&t)
     {
         if (instFlags[RecordResult]) {
-            instResult.emplace(std::forward<T>(t));
+            instResult.push(InstResult(std::forward<T>(t),
+                        InstResult::ResultType::Scalar));
+        }
+    }
+
+    /** Full vector result. */
+    template<typename T>
+    void
+    setVecResult(T &&t)
+    {
+        if (instFlags[RecordResult]) {
+            instResult.push(InstResult(std::forward<T>(t),
+                        InstResult::ResultType::VecReg));
+        }
+    }
+
+    /** Vector element result. */
+    template<typename T>
+    void
+    setVecElemResult(T &&t)
+    {
+        if (instFlags[RecordResult]) {
+            instResult.push(InstResult(std::forward<T>(t),
+                        InstResult::ResultType::VecElem));
+        }
+    }
+
+    /** Predicate result. */
+    template<typename T>
+    void
+    setVecPredResult(T &&t)
+    {
+        if (instFlags[RecordResult]) {
+            instResult.push(InstResult(std::forward<T>(t),
+                            InstResult::ResultType::VecPredReg));
         }
     }
     /** @} */
@@ -1220,7 +1255,7 @@
         return this->cpu->getWritableVecReg(this->regs.renamedDestIdx(idx));
     }
 
-    RegVal
+    TheISA::VecElem
     readVecElemOperand(const StaticInst *si, int idx) const override
     {
         return this->cpu->readVecElem(this->regs.renamedSrcIdx(idx));
@@ -1252,14 +1287,14 @@
     setIntRegOperand(const StaticInst *si, int idx, RegVal val) override
     {
         this->cpu->setIntReg(this->regs.renamedDestIdx(idx), val);
-        setResult(val);
+        setScalarResult(val);
     }
 
     void
     setFloatRegOperandBits(const StaticInst *si, int idx, RegVal val) override
     {
         this->cpu->setFloatReg(this->regs.renamedDestIdx(idx), val);
-        setResult(val);
+        setScalarResult(val);
     }
 
     void
@@ -1267,15 +1302,16 @@
                      const TheISA::VecRegContainer& val) override
     {
         this->cpu->setVecReg(this->regs.renamedDestIdx(idx), val);
-        setResult(val);
+        setVecResult(val);
     }
 
     void
-    setVecElemOperand(const StaticInst *si, int idx, RegVal val) override
+    setVecElemOperand(const StaticInst *si, int idx,
+            const TheISA::VecElem val) override
     {
         int reg_idx = idx;
         this->cpu->setVecElem(this->regs.renamedDestIdx(reg_idx), val);
-        setResult(val);
+        setVecElemResult(val);
     }
 
     void
@@ -1283,14 +1319,14 @@
                          const TheISA::VecPredRegContainer& val) override
     {
         this->cpu->setVecPredReg(this->regs.renamedDestIdx(idx), val);
-        setResult(val);
+        setVecPredResult(val);
     }
 
     void
     setCCRegOperand(const StaticInst *si, int idx, RegVal val) override
     {
         this->cpu->setCCReg(this->regs.renamedDestIdx(idx), val);
-        setResult(val);
+        setScalarResult(val);
     }
 };
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/lsq.cc gem5-SALAM/src/cpu/o3/lsq.cc
--- gem5/src/cpu/o3/lsq.cc	2024-02-22 18:25:43.803605617 -0600
+++ gem5-SALAM/src/cpu/o3/lsq.cc	2024-02-22 18:17:15.072944330 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2012, 2014, 2017-2019, 2021 ARM Limited
+ * Copyright (c) 2011-2012, 2014, 2017-2019 ARM Limited
  * Copyright (c) 2013 Advanced Micro Devices, Inc.
  * All rights reserved
  *
@@ -778,7 +778,7 @@
     // This comming request can be either load, store or atomic.
     // Atomic request has a corresponding pointer to its atomic memory
     // operation
-    [[maybe_unused]] bool isAtomic = !isLoad && amo_op;
+    GEM5_VAR_USED bool isAtomic = !isLoad && amo_op;
 
     ThreadID tid = cpu->contextToThread(inst->contextId());
     auto cacheLineSize = cpu->cacheLineSize();
@@ -1374,16 +1374,6 @@
     SingleDataRequest(port, inst, true, 0x0lu, 8, flags_,
         nullptr, nullptr, nullptr)
 {
-}
-
-void
-LSQ::HtmCmdRequest::initiateTranslation()
-{
-    // Special commands are implemented as loads to avoid significant
-    // changes to the cpu and memory interfaces
-    // The virtual and physical address uses a dummy value of 0x00
-    // Address translation does not really occur thus the code below
-
     assert(_requests.size() == 0);
 
     addRequest(_addr, _size, _byteEnable);
@@ -1400,23 +1390,34 @@
         _inst->memReqFlags = _requests.back()->getFlags();
         _inst->savedReq = this;
 
-        flags.set(Flag::TranslationStarted);
-        flags.set(Flag::TranslationFinished);
-
-        _inst->translationStarted(true);
-        _inst->translationCompleted(true);
-
-        setState(State::Request);
+        setState(State::Translation);
     } else {
-        panic("unexpected behaviour in initiateTranslation()");
+        panic("unexpected behaviour");
     }
 }
 
 void
+LSQ::HtmCmdRequest::initiateTranslation()
+{
+    // Transaction commands are implemented as loads to avoid significant
+    // changes to the cpu and memory interfaces
+    // The virtual and physical address uses a dummy value of 0x00
+    // Address translation does not really occur thus the code below
+
+    flags.set(Flag::TranslationStarted);
+    flags.set(Flag::TranslationFinished);
+
+    _inst->translationStarted(true);
+    _inst->translationCompleted(true);
+
+    setState(State::Request);
+}
+
+void
 LSQ::HtmCmdRequest::finish(const Fault &fault, const RequestPtr &req,
         gem5::ThreadContext* tc, BaseMMU::Mode mode)
 {
-    panic("unexpected behaviour - finish()");
+    panic("unexpected behaviour");
 }
 
 Fault
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/lsq.hh gem5-SALAM/src/cpu/o3/lsq.hh
--- gem5/src/cpu/o3/lsq.hh	2024-02-22 18:25:43.803605617 -0600
+++ gem5-SALAM/src/cpu/o3/lsq.hh	2024-02-22 18:17:15.072944330 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011-2012, 2014, 2018-2019, 2021 ARM Limited
+ * Copyright (c) 2011-2012, 2014, 2018-2019 ARM Limited
  * Copyright (c) 2013 Advanced Micro Devices, Inc.
  * All rights reserved
  *
@@ -362,8 +362,8 @@
         /** Helper function used to add a (sub)request, given its address
          * `addr`, size `size` and byte-enable mask `byteEnable`.
          *
-         * The request is only added if there is at least one active
-         * element in the mask.
+         * The request is only added if the mask is empty or if there is at
+         * least an active element in it.
          */
         void addRequest(Addr addr, unsigned size,
                 const std::vector<bool>& byte_enable);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/lsq_unit.hh gem5-SALAM/src/cpu/o3/lsq_unit.hh
--- gem5/src/cpu/o3/lsq_unit.hh	2024-02-22 18:25:43.803605617 -0600
+++ gem5-SALAM/src/cpu/o3/lsq_unit.hh	2024-02-22 18:17:15.072944330 -0600
@@ -50,6 +50,7 @@
 
 #include "arch/generic/debugfaults.hh"
 #include "arch/generic/vec_reg.hh"
+#include "arch/locked_mem.hh"
 #include "base/circular_queue.hh"
 #include "config/the_isa.hh"
 #include "cpu/base.hh"
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/mem_dep_unit.cc gem5-SALAM/src/cpu/o3/mem_dep_unit.cc
--- gem5/src/cpu/o3/mem_dep_unit.cc	2024-02-22 18:25:43.803605617 -0600
+++ gem5-SALAM/src/cpu/o3/mem_dep_unit.cc	2024-02-22 18:17:15.072944330 -0600
@@ -255,7 +255,7 @@
     } else {
         // Otherwise make the instruction dependent on the store/barrier.
         DPRINTF(MemDepUnit, "Adding to dependency list\n");
-        for ([[maybe_unused]] auto producing_store : producing_stores)
+        for (GEM5_VAR_USED auto producing_store : producing_stores)
             DPRINTF(MemDepUnit, "\tinst PC %s is dependent on [sn:%lli].\n",
                 inst->pcState(), producing_store);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/regfile.cc gem5-SALAM/src/cpu/o3/regfile.cc
--- gem5/src/cpu/o3/regfile.cc	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/regfile.cc	2024-02-22 18:17:15.072944330 -0600
@@ -42,6 +42,8 @@
 #include "cpu/o3/regfile.hh"
 
 #include "cpu/o3/free_list.hh"
+#include "arch/generic/types.hh"
+#include "cpu/o3/free_list.hh"
 
 namespace gem5
 {
@@ -195,7 +197,7 @@
 }
 
 PhysRegFile::IdRange
-PhysRegFile::getRegIds(RegClassType cls)
+PhysRegFile::getRegIds(RegClass cls)
 {
     switch (cls)
     {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/regfile.hh gem5-SALAM/src/cpu/o3/regfile.hh
--- gem5/src/cpu/o3/regfile.hh	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/regfile.hh	2024-02-22 18:17:15.072944330 -0600
@@ -226,12 +226,12 @@
     }
 
     /** Reads a vector element. */
-    RegVal
+    const TheISA::VecElem &
     readVecElem(PhysRegIdPtr phys_reg) const
     {
         assert(phys_reg->is(VecElemClass));
         auto ret = vectorRegFile[phys_reg->index()].as<TheISA::VecElem>();
-        RegVal val = ret[phys_reg->elemIndex()];
+        const TheISA::VecElem& val = ret[phys_reg->elemIndex()];
         DPRINTF(IEW, "RegFile: Access to element %d of vector register %i,"
                 " has data %#x\n", phys_reg->elemIndex(),
                 int(phys_reg->index()), val);
@@ -311,7 +311,7 @@
 
     /** Sets a vector register to the given value. */
     void
-    setVecElem(PhysRegIdPtr phys_reg, RegVal val)
+    setVecElem(PhysRegIdPtr phys_reg, const TheISA::VecElem val)
     {
         assert(phys_reg->is(VecElemClass));
 
@@ -357,7 +357,7 @@
      * Auxiliary function to transition from Full vector mode to Elem mode
      * and to initialise the rename map.
      */
-    IdRange getRegIds(RegClassType cls);
+    IdRange getRegIds(RegClass cls);
 
     /**
      * Get the true physical register id.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/rename_map.cc gem5-SALAM/src/cpu/o3/rename_map.cc
--- gem5/src/cpu/o3/rename_map.cc	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/rename_map.cc	2024-02-22 18:17:15.072944330 -0600
@@ -60,14 +60,15 @@
 
 
 void
-SimpleRenameMap::init(const RegClass &reg_class, SimpleFreeList *_freeList)
+SimpleRenameMap::init(const RegClassInfo &reg_class_info,
+        SimpleFreeList *_freeList)
 {
     assert(freeList == NULL);
     assert(map.empty());
 
-    map.resize(reg_class.size());
+    map.resize(reg_class_info.size());
     freeList = _freeList;
-    zeroReg = RegId(IntRegClass, reg_class.zeroReg());
+    zeroReg = RegId(IntRegClass, reg_class_info.zeroReg());
 }
 
 SimpleRenameMap::RenameInfo
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/rename_map.hh gem5-SALAM/src/cpu/o3/rename_map.hh
--- gem5/src/cpu/o3/rename_map.hh	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/rename_map.hh	2024-02-22 18:17:15.072944330 -0600
@@ -100,7 +100,7 @@
      * it's awkward to initialize this object via the constructor.
      * Instead, this method is used for initialization.
      */
-    void init(const RegClass &reg_class, SimpleFreeList *_freeList);
+    void init(const RegClassInfo &reg_class_info, SimpleFreeList *_freeList);
 
     /**
      * Pair of a physical register and a physical register.  Used to
@@ -223,8 +223,7 @@
      * @return A RenameInfo pair indicating both the new and previous
      * physical registers.
      */
-    RenameInfo
-    rename(const RegId& arch_reg)
+    RenameInfo rename(const RegId& arch_reg)
     {
         switch (arch_reg.classValue()) {
           case IntRegClass:
@@ -243,11 +242,11 @@
             return ccMap.rename(arch_reg);
           case MiscRegClass:
             {
-                // misc regs aren't really renamed, just remapped
-                PhysRegIdPtr phys_reg = lookup(arch_reg);
-                // Set the new register to the previous one to keep the same
-                // mapping throughout the execution.
-                return RenameInfo(phys_reg, phys_reg);
+            // misc regs aren't really renamed, just remapped
+            PhysRegIdPtr phys_reg = lookup(arch_reg);
+            // Set the new register to the previous one to keep the same
+            // mapping throughout the execution.
+            return RenameInfo(phys_reg, phys_reg);
             }
 
           default:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/SConsopts gem5-SALAM/src/cpu/o3/SConsopts
--- gem5/src/cpu/o3/SConsopts	2024-02-22 18:25:43.795605575 -0600
+++ gem5-SALAM/src/cpu/o3/SConsopts	2024-02-22 18:17:15.068944309 -0600
@@ -28,4 +28,4 @@
 
 Import('*')
 
-main.Append(ALL_CPU_MODELS=['O3CPU'])
+CpuModel('O3CPU', default=True)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/thread_context.cc gem5-SALAM/src/cpu/o3/thread_context.cc
--- gem5/src/cpu/o3/thread_context.cc	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/thread_context.cc	2024-02-22 18:17:15.072944330 -0600
@@ -51,6 +51,12 @@
 namespace o3
 {
 
+PortProxy&
+ThreadContext::getVirtProxy()
+{
+    return thread->getVirtProxy();
+}
+
 void
 ThreadContext::takeOverFrom(gem5::ThreadContext *old_context)
 {
@@ -176,7 +182,7 @@
     return cpu->getWritableArchVecReg(reg_id, thread->threadId());
 }
 
-RegVal
+const TheISA::VecElem&
 ThreadContext::readVecElemFlat(RegIndex idx, const ElemIndex& elemIndex) const
 {
     return cpu->readArchVecElem(idx, elemIndex, thread->threadId());
@@ -227,7 +233,7 @@
 
 void
 ThreadContext::setVecElemFlat(RegIndex idx,
-        const ElemIndex& elemIndex, RegVal val)
+        const ElemIndex& elemIndex, const TheISA::VecElem& val)
 {
     cpu->setArchVecElem(idx, elemIndex, val, thread->threadId());
     conditionalSquash();
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/o3/thread_context.hh gem5-SALAM/src/cpu/o3/thread_context.hh
--- gem5/src/cpu/o3/thread_context.hh	2024-02-22 18:25:43.807605637 -0600
+++ gem5-SALAM/src/cpu/o3/thread_context.hh	2024-02-22 18:17:15.072944330 -0600
@@ -143,6 +143,14 @@
 
     void setProcessPtr(Process *p) override { thread->setProcessPtr(p); }
 
+    PortProxy &getVirtProxy() override;
+
+    void
+    initMemProxies(gem5::ThreadContext *tc) override
+    {
+        thread->initMemProxies(tc);
+    }
+
     /** Returns this thread's status. */
     Status status() const override { return thread->status(); }
 
@@ -212,7 +220,7 @@
         return getWritableVecRegFlat(flattenRegId(id).index());
     }
 
-    RegVal
+    const TheISA::VecElem &
     readVecElem(const RegId& reg) const override
     {
         return readVecElemFlat(flattenRegId(reg).index(), reg.elemIndex());
@@ -258,7 +266,7 @@
     }
 
     void
-    setVecElem(const RegId& reg, RegVal val) override
+    setVecElem(const RegId& reg, const TheISA::VecElem& val) override
     {
         setVecElemFlat(flattenRegId(reg).index(), reg.elemIndex(), val);
     }
@@ -372,10 +380,10 @@
     void setVecRegFlat(RegIndex idx,
             const TheISA::VecRegContainer& val) override;
 
-    RegVal readVecElemFlat(RegIndex idx,
+    const TheISA::VecElem &readVecElemFlat(RegIndex idx,
             const ElemIndex& elemIndex) const override;
     void setVecElemFlat(RegIndex idx, const ElemIndex& elemIdx,
-                        RegVal val) override;
+                        const TheISA::VecElem& val) override;
 
     const TheISA::VecPredRegContainer&
         readVecPredRegFlat(RegIndex idx) const override;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/pred/bpred_unit.cc gem5-SALAM/src/cpu/pred/bpred_unit.cc
--- gem5/src/cpu/pred/bpred_unit.cc	2024-02-22 18:25:43.811605658 -0600
+++ gem5-SALAM/src/cpu/pred/bpred_unit.cc	2024-02-22 18:17:15.076944351 -0600
@@ -122,7 +122,7 @@
 {
     // We shouldn't have any outstanding requests when we resume from
     // a drained system.
-    for ([[maybe_unused]] const auto& ph : predHist)
+    for (GEM5_VAR_USED const auto& ph : predHist)
         assert(ph.empty());
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/reg_class.cc gem5-SALAM/src/cpu/reg_class.cc
--- gem5/src/cpu/reg_class.cc	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/reg_class.cc	2024-02-22 18:17:15.076944351 -0600
@@ -39,17 +39,10 @@
  */
 
 #include "cpu/reg_class.hh"
-#include "base/cprintf.hh"
 
 namespace gem5
 {
 
-std::string
-DefaultRegClassOps::regName(const RegId &id) const
-{
-    return csprintf("r%d", id.index());
-}
-
 const char *RegId::regClassStrings[] = {
     "IntRegClass",
     "FloatRegClass",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/reg_class.hh gem5-SALAM/src/cpu/reg_class.hh
--- gem5/src/cpu/reg_class.hh	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/reg_class.hh	2024-02-22 18:17:15.076944351 -0600
@@ -43,7 +43,6 @@
 
 #include <cassert>
 #include <cstddef>
-#include <string>
 
 #include "arch/vecregs.hh"
 #include "base/types.hh"
@@ -53,7 +52,7 @@
 {
 
 /** Enumerate the classes of registers. */
-enum RegClassType
+enum RegClass
 {
     IntRegClass,        ///< Integer register
     FloatRegClass,      ///< Floating-point register
@@ -66,43 +65,19 @@
     MiscRegClass        ///< Control (misc) register
 };
 
-class RegId;
-
-class RegClassOps
-{
-  public:
-    virtual std::string regName(const RegId &id) const = 0;
-};
-
-class DefaultRegClassOps : public RegClassOps
-{
-  public:
-    std::string regName(const RegId &id) const override;
-};
-
-class RegClass
+class RegClassInfo
 {
   private:
     size_t _size;
     const RegIndex _zeroReg;
 
-    static inline DefaultRegClassOps defaultOps;
-    RegClassOps *_ops = &defaultOps;
-
   public:
-    RegClass(size_t new_size, RegIndex new_zero=-1) :
+    RegClassInfo(size_t new_size, RegIndex new_zero = -1) :
         _size(new_size), _zeroReg(new_zero)
     {}
-    RegClass(size_t new_size, RegClassOps &new_ops, RegIndex new_zero=-1) :
-        RegClass(new_size, new_zero)
-    {
-        _ops = &new_ops;
-    }
 
     size_t size() const { return _size; }
     RegIndex zeroReg() const { return _zeroReg; }
-
-    std::string regName(const RegId &id) const { return _ops->regName(id); }
 };
 
 /** Register ID: describe an architectural register with its class and index.
@@ -114,7 +89,7 @@
 {
   protected:
     static const char* regClassStrings[];
-    RegClassType regClass;
+    RegClass regClass;
     RegIndex regIdx;
     ElemIndex elemIdx;
     static constexpr size_t Scale = TheISA::NumVecElemPerVecReg;
@@ -125,11 +100,10 @@
   public:
     RegId() : RegId(IntRegClass, 0) {}
 
-    RegId(RegClassType reg_class, RegIndex reg_idx)
+    RegId(RegClass reg_class, RegIndex reg_idx)
         : RegId(reg_class, reg_idx, IllegalElemIndex) {}
 
-    explicit RegId(RegClassType reg_class, RegIndex reg_idx,
-            ElemIndex elem_idx)
+    explicit RegId(RegClass reg_class, RegIndex reg_idx, ElemIndex elem_idx)
         : regClass(reg_class), regIdx(reg_idx), elemIdx(elem_idx),
           numPinnedWrites(0)
     {
@@ -173,7 +147,7 @@
     }
 
     /** @return true if it is of the specified class. */
-    bool is(RegClassType reg_class) const { return regClass == reg_class; }
+    bool is(RegClass reg_class) const { return regClass == reg_class; }
 
     /** Index accessors */
     /** @{ */
@@ -203,7 +177,7 @@
     /** Elem accessor */
     RegIndex elemIndex() const { return elemIdx; }
     /** Class accessor */
-    RegClassType classValue() const { return regClass; }
+    RegClass classValue() const { return regClass; }
     /** Return a const char* with the register class name. */
     const char* className() const { return regClassStrings[regClass]; }
 
@@ -234,14 +208,14 @@
     {}
 
     /** Scalar PhysRegId constructor. */
-    explicit PhysRegId(RegClassType _regClass, RegIndex _regIdx,
+    explicit PhysRegId(RegClass _regClass, RegIndex _regIdx,
               RegIndex _flatIdx)
         : RegId(_regClass, _regIdx), flatIdx(_flatIdx),
           numPinnedWritesToComplete(0), pinned(false)
     {}
 
     /** Vector PhysRegId constructor (w/ elemIndex). */
-    explicit PhysRegId(RegClassType _regClass, RegIndex _regIdx,
+    explicit PhysRegId(RegClass _regClass, RegIndex _regIdx,
               ElemIndex elem_idx, RegIndex flat_idx)
         : RegId(_regClass, _regIdx, elem_idx), flatIdx(flat_idx),
           numPinnedWritesToComplete(0), pinned(false)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/SConsopts gem5-SALAM/src/cpu/SConsopts
--- gem5/src/cpu/SConsopts	2024-02-22 18:25:43.779605491 -0600
+++ gem5-SALAM/src/cpu/SConsopts	2024-02-22 18:17:15.064944288 -0600
@@ -25,7 +25,29 @@
 
 Import('*')
 
+class CpuModel(object):
+    '''The CpuModel class encapsulates everything the ISA parser needs to
+    know about a particular CPU model.'''
+
+    # Dict of available CPU model objects.  Accessible as CpuModel.dict.
+    dict = {}
+
+    # Constructor.  Automatically adds models to CpuModel.dict.
+    def __init__(self, name, default=False):
+        self.name = name           # name of model
+
+        # This cpu is enabled by default
+        self.default = default
+
+        # Add self to dict
+        if name in CpuModel.dict:
+            raise AttributeError("CpuModel '%s' already registered" % name)
+        CpuModel.dict[name] = self
+
+Export('CpuModel')
+
 def add_cpu_models_var():
-    sticky_vars.Add(ListVariable('CPU_MODELS', 'CPU models', [],
-                sorted(set(main.Split('${ALL_CPU_MODELS}')))))
+    sticky_vars.Add(ListVariable('CPU_MODELS', 'CPU models',
+                sorted(n for n,m in CpuModel.dict.items() if m.default),
+                sorted(CpuModel.dict.keys())))
 AfterSConsopts(add_cpu_models_var)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple/base.cc gem5-SALAM/src/cpu/simple/base.cc
--- gem5/src/cpu/simple/base.cc	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/simple/base.cc	2024-02-22 18:17:15.076944351 -0600
@@ -119,6 +119,17 @@
 }
 
 void
+BaseSimpleCPU::init()
+{
+    BaseCPU::init();
+
+    for (auto tc : threadContexts) {
+        // Initialise the ThreadContext's memory proxies
+        tc->initMemProxies(tc);
+    }
+}
+
+void
 BaseSimpleCPU::checkPcEventQueue()
 {
     Addr oldpc, pc = threadInfo[curThread]->thread->instAddr();
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple/base.hh gem5-SALAM/src/cpu/simple/base.hh
--- gem5/src/cpu/simple/base.hh	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/simple/base.hh	2024-02-22 18:17:15.076944351 -0600
@@ -92,6 +92,7 @@
     BaseSimpleCPU(const BaseSimpleCPUParams &params);
     virtual ~BaseSimpleCPU();
     void wakeup(ThreadID tid) override;
+    void init() override;
   public:
     Trace::InstRecord *traceData;
     CheckerCPU *checker;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple/exec_context.hh gem5-SALAM/src/cpu/simple/exec_context.hh
--- gem5/src/cpu/simple/exec_context.hh	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/simple/exec_context.hh	2024-02-22 18:17:15.076944351 -0600
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014-2018, 2020-2021 Arm Limited
+ * Copyright (c) 2014-2018, 2020 ARM Limited
  * All rights reserved
  *
  * The license below extends only to copyright in the software and shall
@@ -128,10 +128,6 @@
                        "Number of times the CC registers were read"),
               ADD_STAT(numCCRegWrites, statistics::units::Count::get(),
                        "Number of times the CC registers were written"),
-              ADD_STAT(numMiscRegReads, statistics::units::Count::get(),
-                       "Number of times the Misc registers were read"),
-              ADD_STAT(numMiscRegWrites, statistics::units::Count::get(),
-                       "Number of times the Misc registers were written"),
               ADD_STAT(numMemRefs, statistics::units::Count::get(),
                        "Number of memory refs"),
               ADD_STAT(numLoadInsts, statistics::units::Count::get(),
@@ -241,10 +237,6 @@
         statistics::Scalar numCCRegReads;
         statistics::Scalar numCCRegWrites;
 
-        // Number of misc register file accesses
-        statistics::Scalar numMiscRegReads;
-        statistics::Scalar numMiscRegWrites;
-
         // Number of simulated memory references
         statistics::Scalar numMemRefs;
         statistics::Scalar numLoadInsts;
@@ -362,7 +354,7 @@
     }
 
     /** Reads an element of a vector register. */
-    RegVal
+    TheISA::VecElem
     readVecElemOperand(const StaticInst *si, int idx) const override
     {
         execContextStats.numVecRegReads++;
@@ -373,7 +365,8 @@
 
     /** Sets an element of a vector register to a value. */
     void
-    setVecElemOperand(const StaticInst *si, int idx, RegVal val) override
+    setVecElemOperand(const StaticInst *si, int idx,
+                      const TheISA::VecElem val) override
     {
         execContextStats.numVecRegWrites++;
         const RegId& reg = si->destRegIdx(idx);
@@ -430,7 +423,7 @@
     RegVal
     readMiscRegOperand(const StaticInst *si, int idx) override
     {
-        execContextStats.numMiscRegReads++;
+        execContextStats.numIntRegReads++;
         const RegId& reg = si->srcRegIdx(idx);
         assert(reg.is(MiscRegClass));
         return thread->readMiscReg(reg.index());
@@ -439,7 +432,7 @@
     void
     setMiscRegOperand(const StaticInst *si, int idx, RegVal val) override
     {
-        execContextStats.numMiscRegWrites++;
+        execContextStats.numIntRegWrites++;
         const RegId& reg = si->destRegIdx(idx);
         assert(reg.is(MiscRegClass));
         thread->setMiscReg(reg.index(), val);
@@ -452,7 +445,7 @@
     RegVal
     readMiscReg(int misc_reg) override
     {
-        execContextStats.numMiscRegReads++;
+        execContextStats.numIntRegReads++;
         return thread->readMiscReg(misc_reg);
     }
 
@@ -463,7 +456,7 @@
     void
     setMiscReg(int misc_reg, RegVal val) override
     {
-        execContextStats.numMiscRegWrites++;
+        execContextStats.numIntRegWrites++;
         thread->setMiscReg(misc_reg, val);
     }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple/SConsopts gem5-SALAM/src/cpu/simple/SConsopts
--- gem5/src/cpu/simple/SConsopts	2024-02-22 18:25:43.815605679 -0600
+++ gem5-SALAM/src/cpu/simple/SConsopts	2024-02-22 18:17:15.076944351 -0600
@@ -28,4 +28,5 @@
 
 Import('*')
 
-main.Append(ALL_CPU_MODELS=['AtomicSimpleCPU', 'TimingSimpleCPU'])
+CpuModel('AtomicSimpleCPU', default=True)
+CpuModel('TimingSimpleCPU', default=True)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple/timing.cc gem5-SALAM/src/cpu/simple/timing.cc
--- gem5/src/cpu/simple/timing.cc	2024-02-22 18:25:43.823605721 -0600
+++ gem5-SALAM/src/cpu/simple/timing.cc	2024-02-22 18:17:15.076944351 -0600
@@ -170,7 +170,7 @@
 TimingSimpleCPU::switchOut()
 {
     SimpleExecContext& t_info = *threadInfo[curThread];
-    [[maybe_unused]] SimpleThread* thread = t_info.thread;
+    GEM5_VAR_USED SimpleThread* thread = t_info.thread;
 
     // hardware transactional memory
     // Cannot switch out the CPU in the middle of a transaction
@@ -945,7 +945,7 @@
     // hardware transactional memory
 
     SimpleExecContext *t_info = threadInfo[curThread];
-    [[maybe_unused]] const bool is_htm_speculative =
+    GEM5_VAR_USED const bool is_htm_speculative =
         t_info->inHtmTransactionalState();
 
     // received a response from the dcache: complete the load or store
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/simple_thread.hh gem5-SALAM/src/cpu/simple_thread.hh
--- gem5/src/cpu/simple_thread.hh	2024-02-22 18:25:43.823605721 -0600
+++ gem5-SALAM/src/cpu/simple_thread.hh	2024-02-22 18:17:15.080944372 -0600
@@ -216,6 +216,14 @@
 
     System *getSystemPtr() override { return system; }
 
+    PortProxy &getVirtProxy() override { return ThreadState::getVirtProxy(); }
+
+    void
+    initMemProxies(ThreadContext *tc) override
+    {
+        ThreadState::initMemProxies(tc);
+    }
+
     Process *getProcessPtr() override { return ThreadState::getProcessPtr(); }
     void setProcessPtr(Process *p) override { ThreadState::setProcessPtr(p); }
 
@@ -306,12 +314,13 @@
         return regVal;
     }
 
-    RegVal
+    const TheISA::VecElem &
     readVecElem(const RegId &reg) const override
     {
         int flatIndex = isa->flattenVecElemIndex(reg.index());
         assert(flatIndex < vecRegs.size());
-        RegVal regVal = readVecElemFlat(flatIndex, reg.elemIndex());
+        const TheISA::VecElem& regVal =
+            readVecElemFlat(flatIndex, reg.elemIndex());
         DPRINTF(VecRegs, "Reading element %d of vector reg %d (%d) as"
                 " %#x.\n", reg.elemIndex(), reg.index(), flatIndex, regVal);
         return regVal;
@@ -388,7 +397,7 @@
     }
 
     void
-    setVecElem(const RegId &reg, RegVal val) override
+    setVecElem(const RegId &reg, const TheISA::VecElem &val) override
     {
         int flatIndex = isa->flattenVecElemIndex(reg.index());
         assert(flatIndex < vecRegs.size());
@@ -519,7 +528,7 @@
         vecRegs[reg] = val;
     }
 
-    RegVal
+    const TheISA::VecElem &
     readVecElemFlat(RegIndex reg, const ElemIndex &elemIndex) const override
     {
         return vecRegs[reg].as<TheISA::VecElem>()[elemIndex];
@@ -527,7 +536,7 @@
 
     void
     setVecElemFlat(RegIndex reg, const ElemIndex &elemIndex,
-                   RegVal val) override
+                   const TheISA::VecElem &val) override
     {
         vecRegs[reg].as<TheISA::VecElem>()[elemIndex] = val;
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/testers/memtest/memtest.cc gem5-SALAM/src/cpu/testers/memtest/memtest.cc
--- gem5/src/cpu/testers/memtest/memtest.cc	2024-02-22 18:25:43.831605763 -0600
+++ gem5-SALAM/src/cpu/testers/memtest/memtest.cc	2024-02-22 18:17:15.080944372 -0600
@@ -249,7 +249,7 @@
     if (cmd < percentReads) {
         // start by ensuring there is a reference value if we have not
         // seen this address before
-        [[maybe_unused]] uint8_t ref_data = 0;
+        GEM5_VAR_USED uint8_t ref_data = 0;
         auto ref = referenceData.find(req->getPaddr());
         if (ref == referenceData.end()) {
             referenceData[req->getPaddr()] = 0;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/thread_context.hh gem5-SALAM/src/cpu/thread_context.hh
--- gem5/src/cpu/thread_context.hh	2024-02-22 18:25:43.835605784 -0600
+++ gem5-SALAM/src/cpu/thread_context.hh	2024-02-22 18:17:15.084944393 -0600
@@ -147,8 +147,18 @@
 
     virtual System *getSystemPtr() = 0;
 
+    virtual PortProxy &getVirtProxy() = 0;
+
     virtual void sendFunctional(PacketPtr pkt);
 
+    /**
+     * Initialise the physical and virtual port proxies and tie them to
+     * the data port of the CPU.
+     *
+     * tc ThreadContext for the virtual-to-physical translation
+     */
+    virtual void initMemProxies(ThreadContext *tc) = 0;
+
     virtual Process *getProcessPtr() = 0;
 
     virtual void setProcessPtr(Process *p) = 0;
@@ -200,7 +210,7 @@
         readVecReg(const RegId& reg) const = 0;
     virtual TheISA::VecRegContainer& getWritableVecReg(const RegId& reg) = 0;
 
-    virtual RegVal readVecElem(const RegId& reg) const = 0;
+    virtual const TheISA::VecElem& readVecElem(const RegId& reg) const = 0;
 
     virtual const TheISA::VecPredRegContainer& readVecPredReg(
             const RegId& reg) const = 0;
@@ -216,7 +226,7 @@
     virtual void setVecReg(const RegId& reg,
             const TheISA::VecRegContainer& val) = 0;
 
-    virtual void setVecElem(const RegId& reg, RegVal val) = 0;
+    virtual void setVecElem(const RegId& reg, const TheISA::VecElem& val) = 0;
 
     virtual void setVecPredReg(const RegId& reg,
             const TheISA::VecPredRegContainer& val) = 0;
@@ -291,10 +301,10 @@
     virtual void setVecRegFlat(RegIndex idx,
             const TheISA::VecRegContainer& val) = 0;
 
-    virtual RegVal readVecElemFlat(RegIndex idx,
+    virtual const TheISA::VecElem& readVecElemFlat(RegIndex idx,
             const ElemIndex& elem_idx) const = 0;
     virtual void setVecElemFlat(RegIndex idx, const ElemIndex& elem_idx,
-            RegVal val) = 0;
+            const TheISA::VecElem& val) = 0;
 
     virtual const TheISA::VecPredRegContainer &
         readVecPredRegFlat(RegIndex idx) const = 0;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/thread_state.cc gem5-SALAM/src/cpu/thread_state.cc
--- gem5/src/cpu/thread_state.cc	2024-02-22 18:16:36.556742967 -0600
+++ gem5-SALAM/src/cpu/thread_state.cc	2024-02-22 18:17:15.084944393 -0600
@@ -46,10 +46,16 @@
       numLoad(0), startNumLoad(0),
       _status(ThreadContext::Halted), baseCpu(cpu),
       _contextId(0), _threadId(_tid), lastActivate(0), lastSuspend(0),
-      process(_process), storeCondFailures(0)
+      process(_process), virtProxy(NULL), storeCondFailures(0)
 {
 }
 
+ThreadState::~ThreadState()
+{
+    if (virtProxy != NULL)
+        delete virtProxy;
+}
+
 void
 ThreadState::serialize(CheckpointOut &cp) const
 {
@@ -62,6 +68,29 @@
     UNSERIALIZE_ENUM(_status);
 }
 
+void
+ThreadState::initMemProxies(ThreadContext *tc)
+{
+    // The port proxies only refer to the data port on the CPU side
+    // and can safely be done at init() time even if the CPU is not
+    // connected, i.e. when restoring from a checkpoint and later
+    // switching the CPU in.
+    assert(virtProxy == NULL);
+    if (FullSystem) {
+        virtProxy = new TranslatingPortProxy(tc);
+    } else {
+        virtProxy = new SETranslatingPortProxy(
+                tc, SETranslatingPortProxy::NextPage);
+    }
+}
+
+PortProxy &
+ThreadState::getVirtProxy()
+{
+    assert(virtProxy != NULL);
+    return *virtProxy;
+}
+
 ThreadState::ThreadStateStats::ThreadStateStats(BaseCPU *cpu,
                                                 const ThreadID& tid)
       : statistics::Group(cpu, csprintf("thread_%i", tid).c_str()),
@@ -72,6 +101,7 @@
       ADD_STAT(numMemRefs, statistics::units::Count::get(),
                "Number of Memory References")
 {
+
 }
 
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/thread_state.hh gem5-SALAM/src/cpu/thread_state.hh
--- gem5/src/cpu/thread_state.hh	2024-02-22 18:16:36.556742967 -0600
+++ gem5-SALAM/src/cpu/thread_state.hh	2024-02-22 18:17:15.084944393 -0600
@@ -50,7 +50,7 @@
 
     ThreadState(BaseCPU *cpu, ThreadID _tid, Process *_process);
 
-    virtual ~ThreadState() = default;
+    virtual ~ThreadState();
 
     void serialize(CheckpointOut &cp) const override;
 
@@ -72,6 +72,16 @@
 
     Tick readLastSuspend() const { return lastSuspend; }
 
+    /**
+     * Initialise the physical and virtual port proxies and tie them to
+     * the data port of the CPU.
+     *
+     * @param tc ThreadContext for the virtual-to-physical translation
+     */
+    void initMemProxies(ThreadContext *tc);
+
+    PortProxy &getVirtProxy();
+
     Process *getProcessPtr() { return process; }
 
     void setProcessPtr(Process *p) { process = p; }
@@ -130,6 +140,10 @@
   protected:
     Process *process;
 
+    /** A translating port proxy, outgoing only, for functional
+     * accesse to virtual addresses. */
+    PortProxy *virtProxy;
+
   public:
 
     //
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/cpu/trace/trace_cpu.cc gem5-SALAM/src/cpu/trace/trace_cpu.cc
--- gem5/src/cpu/trace/trace_cpu.cc	2024-02-22 18:25:43.839605805 -0600
+++ gem5-SALAM/src/cpu/trace/trace_cpu.cc	2024-02-22 18:17:15.084944393 -0600
@@ -821,7 +821,7 @@
     DPRINTF(TraceCPUData, "Printing readyList:\n");
     while (itr != readyList.end()) {
         auto graph_itr = depGraph.find(itr->seqNum);
-        [[maybe_unused]] GraphNode* node_ptr = graph_itr->second;
+        GEM5_VAR_USED GraphNode* node_ptr = graph_itr->second;
         DPRINTFR(TraceCPUData, "\t%lld(%s), %lld\n", itr->seqNum,
             node_ptr->typeToStr(), itr->execTick);
         itr++;
@@ -1334,7 +1334,7 @@
         // If it is not an rob dependency then it must be a register dependency
         // If the register dependency is not found, it violates an assumption
         // and must be caught by assert.
-        [[maybe_unused]] bool regdep_found = removeRegDep(done_seq_num);
+        GEM5_VAR_USED bool regdep_found = removeRegDep(done_seq_num);
         assert(regdep_found);
     }
     // Return true if the node is dependency free
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/amdgpu/amdgpu_device.cc gem5-SALAM/src/dev/amdgpu/amdgpu_device.cc
--- gem5/src/dev/amdgpu/amdgpu_device.cc	2024-02-22 18:25:43.839605805 -0600
+++ gem5-SALAM/src/dev/amdgpu/amdgpu_device.cc	2024-02-22 18:17:15.084944393 -0600
@@ -101,7 +101,7 @@
 Tick
 AMDGPUDevice::readConfig(PacketPtr pkt)
 {
-    [[maybe_unused]] int offset = pkt->getAddr() & PCI_CONFIG_SIZE;
+    GEM5_VAR_USED int offset = pkt->getAddr() & PCI_CONFIG_SIZE;
     DPRINTF(AMDGPUDevice, "Read Config: from offset: %#x size: %#x "
             "data: %#x\n", offset, pkt->getSize(), config.data[offset]);
 
@@ -129,7 +129,7 @@
 Tick
 AMDGPUDevice::writeConfig(PacketPtr pkt)
 {
-    [[maybe_unused]] int offset = pkt->getAddr() & PCI_CONFIG_SIZE;
+    GEM5_VAR_USED int offset = pkt->getAddr() & PCI_CONFIG_SIZE;
     DPRINTF(AMDGPUDevice, "Write Config: from offset: %#x size: %#x "
             "data: %#x\n", offset, pkt->getSize(),
             pkt->getUintX(ByteOrder::little));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/arm/gic_v2.cc gem5-SALAM/src/dev/arm/gic_v2.cc
--- gem5/src/dev/arm/gic_v2.cc	2024-02-22 18:25:43.847605847 -0600
+++ gem5-SALAM/src/dev/arm/gic_v2.cc	2024-02-22 18:17:15.088944413 -0600
@@ -394,7 +394,7 @@
     const ContextID ctx = pkt->req->contextId();
     const size_t data_sz = pkt->getSize();
 
-    [[maybe_unused]] uint32_t pkt_data;
+    GEM5_VAR_USED uint32_t pkt_data;
     switch (data_sz)
     {
       case 1:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/arm/smmu_v3.cc gem5-SALAM/src/dev/arm/smmu_v3.cc
--- gem5/src/dev/arm/smmu_v3.cc	2024-02-22 18:25:43.851605867 -0600
+++ gem5-SALAM/src/dev/arm/smmu_v3.cc	2024-02-22 18:17:15.088944413 -0600
@@ -253,7 +253,7 @@
                     pkt = action.pkt;
                     break;
                 }
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
             case ACTION_SEND_REQ_FINAL:
                 delay += requestPort.sendAtomic(action.pkt);
                 pkt = action.pkt;
@@ -309,7 +309,7 @@
 
                 break;
             }
-            [[fallthrough]];
+            GEM5_FALLTHROUGH;
         case ACTION_SEND_REQ_FINAL:
             action.pkt->pushSenderState(proc);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/hsa/hsa_packet_processor.cc gem5-SALAM/src/dev/hsa/hsa_packet_processor.cc
--- gem5/src/dev/hsa/hsa_packet_processor.cc	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/hsa/hsa_packet_processor.cc	2024-02-22 18:17:15.092944434 -0600
@@ -127,7 +127,7 @@
     assert(pkt->getAddr() >= pioAddr && pkt->getAddr() < pioAddr + pioSize);
 
     // TODO: How to get pid??
-    [[maybe_unused]] Addr daddr = pkt->getAddr() - pioAddr;
+    GEM5_VAR_USED Addr daddr = pkt->getAddr() - pioAddr;
 
     DPRINTF(HSAPacketProcessor,
           "%s: write of size %d to reg-offset %d (0x%x)\n",
@@ -212,7 +212,7 @@
     dma_series_ctx *series_ctx, void *dest_4debug)
 {
     uint32_t rl_idx = series_ctx->rl_idx;
-    [[maybe_unused]] AQLRingBuffer *aqlRingBuffer =
+    GEM5_VAR_USED AQLRingBuffer *aqlRingBuffer =
         hsaPP->regdQList[rl_idx]->qCntxt.aqlBuf;
     HSAQueueDescriptor* qDesc =
         hsaPP->regdQList[rl_idx]->qCntxt.qDesc;
@@ -559,8 +559,7 @@
 void
 HSAPacketProcessor::displayQueueDescriptor(int pid, uint32_t rl_idx)
 {
-    [[maybe_unused]] HSAQueueDescriptor* qDesc =
-        regdQList[rl_idx]->qCntxt.qDesc;
+    GEM5_VAR_USED HSAQueueDescriptor* qDesc = regdQList[rl_idx]->qCntxt.qDesc;
     DPRINTF(HSAPacketProcessor,
             "%s: pid[%d], basePointer[0x%lx], dBPointer[0x%lx], "
             "writeIndex[0x%x], readIndex[0x%x], size(bytes)[0x%x]\n",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/hsa/hw_scheduler.cc gem5-SALAM/src/dev/hsa/hw_scheduler.cc
--- gem5/src/dev/hsa/hw_scheduler.cc	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/hsa/hw_scheduler.cc	2024-02-22 18:17:15.096944455 -0600
@@ -116,8 +116,7 @@
 
     // Check if this newly created queue can be directly mapped
     // to registered queue list
-    [[maybe_unused]] bool register_q =
-        mapQIfSlotAvlbl(queue_id, aql_buf, q_desc);
+    GEM5_VAR_USED bool register_q = mapQIfSlotAvlbl(queue_id, aql_buf, q_desc);
     schedWakeup();
     DPRINTF(HSAPacketProcessor,
              "%s: offset = %p, qID = %d, is_regd = %s, AL size %d\n",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/hsa/kfd_ioctl.h gem5-SALAM/src/dev/hsa/kfd_ioctl.h
--- gem5/src/dev/hsa/kfd_ioctl.h	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/hsa/kfd_ioctl.h	2024-02-22 18:17:15.096944455 -0600
@@ -24,6 +24,7 @@
 #define KFD_IOCTL_H_INCLUDED
 
 #include <cstdint>
+#include <drm/drm.h>
 #include <linux/ioctl.h>
 #include <linux/types.h>
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/dist_iface.cc gem5-SALAM/src/dev/net/dist_iface.cc
--- gem5/src/dev/net/dist_iface.cc	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/net/dist_iface.cc	2024-02-22 18:17:15.096944455 -0600
@@ -868,7 +868,7 @@
         // stop point.  Suspend execution of all local thread contexts.
         // Dist-gem5 will reactivate all thread contexts when everyone has
         // reached the sync stop point.
-#if !IS_NULL_ISA
+#if THE_ISA != NULL_ISA
         for (auto *tc: primary->sys->threads) {
             if (tc->status() == ThreadContext::Active)
                 tc->quiesce();
@@ -882,7 +882,7 @@
         // nodes to prevent causality errors.  We can also schedule CPU
         // activation here, since we know exactly when the next sync will
         // occur.
-#if !IS_NULL_ISA
+#if THE_ISA != NULL_ISA
         for (auto *tc: primary->sys->threads) {
             if (tc->status() == ThreadContext::Active)
                 tc->quiesceTick(primary->syncEvent->when() + 1);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/i8254xGBe.cc gem5-SALAM/src/dev/net/i8254xGBe.cc
--- gem5/src/dev/net/i8254xGBe.cc	2024-02-22 18:16:36.572743051 -0600
+++ gem5-SALAM/src/dev/net/i8254xGBe.cc	2024-02-22 18:17:15.096944455 -0600
@@ -106,11 +106,11 @@
     eeOpcode            = 0;
 
     // clear all 64 16 bit words of the eeprom
-    memset(&flash, 0, EEPROM_SIZE * 2);
+    memset(&flash, 0, EEPROM_SIZE*2);
 
     // Set the MAC address
     memcpy(flash, p.hardware_address.bytes(), ETH_ADDR_LEN);
-    for (int x = 0; x < ETH_ADDR_LEN / 2; x++)
+    for (int x = 0; x < ETH_ADDR_LEN/2; x++)
         flash[x] = htobe(flash[x]);
 
     uint16_t csum = 0;
@@ -119,7 +119,7 @@
 
 
     // Magic happy checksum value
-    flash[EEPROM_SIZE - 1] = htobe((uint16_t)(EEPROM_CSUM - csum));
+    flash[EEPROM_SIZE-1] = htobe((uint16_t)(EEPROM_CSUM - csum));
 
     // Store the MAC address as queue ID
     macAddr = p.hardware_address;
@@ -341,9 +341,9 @@
         pkt->setLE<uint32_t>(regs.sw_fw_sync);
         break;
       default:
-        if (!IN_RANGE(daddr, REG_VFTA, VLAN_FILTER_TABLE_SIZE * 4) &&
-            !IN_RANGE(daddr, REG_RAL, RCV_ADDRESS_TABLE_SIZE * 8) &&
-            !IN_RANGE(daddr, REG_MTA, MULTICAST_TABLE_SIZE * 4) &&
+        if (!IN_RANGE(daddr, REG_VFTA, VLAN_FILTER_TABLE_SIZE*4) &&
+            !IN_RANGE(daddr, REG_RAL, RCV_ADDRESS_TABLE_SIZE*8) &&
+            !IN_RANGE(daddr, REG_MTA, MULTICAST_TABLE_SIZE*4) &&
             !IN_RANGE(daddr, REG_CRCERRS, STATS_REGS_SIZE))
             panic("Read request to unknown register number: %#x\n", daddr);
         else
@@ -408,12 +408,11 @@
                 eeAddr = eeAddr << 1 | regs.eecd.din();
                 eeAddrBits++;
             } else if (eeDataBits < 16 && eeOpcode == EEPROM_READ_OPCODE_SPI) {
-                assert(eeAddr >> 1 < EEPROM_SIZE);
+                assert(eeAddr>>1 < EEPROM_SIZE);
                 DPRINTF(EthernetEEPROM, "EEPROM bit read: %d word: %#X\n",
-                        flash[eeAddr >> 1] >> eeDataBits & 0x1,
-                        flash[eeAddr >> 1]);
-                regs.eecd.dout(
-                        (flash[eeAddr >> 1] >> (15 - eeDataBits)) & 0x1);
+                        flash[eeAddr>>1] >> eeDataBits & 0x1,
+                        flash[eeAddr>>1]);
+                regs.eecd.dout((flash[eeAddr>>1] >> (15-eeDataBits)) & 0x1);
                 eeDataBits++;
             } else if (eeDataBits < 8 && eeOpcode == EEPROM_RDSR_OPCODE_SPI) {
                 regs.eecd.dout(0);
@@ -436,7 +435,7 @@
 
             DPRINTF(EthernetEEPROM, "EEPROM: opcode: %#X:%d addr: %#X:%d\n",
                     (uint32_t)eeOpcode, (uint32_t) eeOpBits,
-                    (uint32_t)eeAddr >> 1, (uint32_t)eeAddrBits);
+                    (uint32_t)eeAddr>>1, (uint32_t)eeAddrBits);
             if (eeOpBits == 8 && !(eeOpcode == EEPROM_READ_OPCODE_SPI ||
                                    eeOpcode == EEPROM_RDSR_OPCODE_SPI ))
                 panic("Unknown eeprom opcode: %#X:%d\n", (uint32_t)eeOpcode,
@@ -496,7 +495,7 @@
                 regs.icr(), regs.imr, regs.iam, regs.ctrl_ext.iame());
         if (regs.ctrl_ext.iame())
             regs.imr &= ~regs.iam;
-        regs.icr = ~bits(val, 30, 0) & regs.icr();
+        regs.icr = ~bits(val,30,0) & regs.icr();
         chkInterrupt();
         break;
       case REG_ITR:
@@ -570,7 +569,7 @@
         regs.fcrth = val;
         break;
       case REG_RDBAL:
-        regs.rdba.rdbal(val & ~mask(4));
+        regs.rdba.rdbal( val & ~mask(4));
         rxDescCache.areaChanged();
         break;
       case REG_RDBAH:
@@ -608,7 +607,7 @@
         regs.rxdctl = val;
         break;
       case REG_TDBAL:
-        regs.tdba.tdbal(val & ~mask(4));
+        regs.tdba.tdbal( val & ~mask(4));
         txDescCache.areaChanged();
         break;
       case REG_TDBAH:
@@ -682,9 +681,9 @@
         regs.sw_fw_sync = val;
         break;
       default:
-        if (!IN_RANGE(daddr, REG_VFTA, VLAN_FILTER_TABLE_SIZE * 4) &&
-            !IN_RANGE(daddr, REG_RAL, RCV_ADDRESS_TABLE_SIZE * 8) &&
-            !IN_RANGE(daddr, REG_MTA, MULTICAST_TABLE_SIZE * 4))
+        if (!IN_RANGE(daddr, REG_VFTA, VLAN_FILTER_TABLE_SIZE*4) &&
+            !IN_RANGE(daddr, REG_RAL, RCV_ADDRESS_TABLE_SIZE*8) &&
+            !IN_RANGE(daddr, REG_MTA, MULTICAST_TABLE_SIZE*4))
             panic("Write request to unknown register number: %#x\n", daddr);
     };
 
@@ -922,7 +921,7 @@
 
     assert(wbOut);
     igbe->dmaWrite(pciToDma(descBase() + descHead() * sizeof(T)),
-                   wbOut * sizeof(T), &wbEvent, (uint8_t *)wbBuf,
+                   wbOut * sizeof(T), &wbEvent, (uint8_t*)wbBuf,
                    igbe->wbCompDelay);
 }
 
@@ -981,7 +980,7 @@
             curFetching * sizeof(T));
     assert(curFetching);
     igbe->dmaRead(pciToDma(descBase() + cachePnt * sizeof(T)),
-                  curFetching * sizeof(T), &fetchEvent, (uint8_t *)fetchBuf,
+                  curFetching * sizeof(T), &fetchEvent, (uint8_t*)fetchBuf,
                   igbe->fetchCompDelay);
 }
 
@@ -1083,14 +1082,14 @@
     SERIALIZE_SCALAR(usedCacheSize);
     for (typename CacheType::size_type x = 0; x < usedCacheSize; x++) {
         arrayParamOut(cp, csprintf("usedCache_%d", x),
-                      (uint8_t *)usedCache[x], sizeof(T));
+                      (uint8_t*)usedCache[x],sizeof(T));
     }
 
     typename CacheType::size_type unusedCacheSize = unusedCache.size();
     SERIALIZE_SCALAR(unusedCacheSize);
     for (typename CacheType::size_type x = 0; x < unusedCacheSize; x++) {
         arrayParamOut(cp, csprintf("unusedCache_%d", x),
-                      (uint8_t *)unusedCache[x], sizeof(T));
+                      (uint8_t*)unusedCache[x],sizeof(T));
     }
 
     Tick fetch_delay = 0, wb_delay = 0;
@@ -1120,7 +1119,7 @@
     for (typename CacheType::size_type x = 0; x < usedCacheSize; x++) {
         temp = new T;
         arrayParamIn(cp, csprintf("usedCache_%d", x),
-                     (uint8_t *)temp, sizeof(T));
+                     (uint8_t*)temp,sizeof(T));
         usedCache.push_back(temp);
     }
 
@@ -1129,7 +1128,7 @@
     for (typename CacheType::size_type x = 0; x < unusedCacheSize; x++) {
         temp = new T;
         arrayParamIn(cp, csprintf("unusedCache_%d", x),
-                     (uint8_t *)temp, sizeof(T));
+                     (uint8_t*)temp,sizeof(T));
         unusedCache.push_back(temp);
     }
     Tick fetch_delay = 0, wb_delay = 0;
@@ -1496,7 +1495,7 @@
 ///////////////////////////// IGbE::TxDescCache //////////////////////////////
 
 IGbE::TxDescCache::TxDescCache(IGbE *i, const std::string n, int s)
-    : DescCache<TxDesc>(i, n, s), pktDone(false), isTcp(false),
+    : DescCache<TxDesc>(i,n, s), pktDone(false), isTcp(false),
       pktWaiting(false), pktMultiDesc(false),
       completionAddress(0), completionEnabled(false),
       useTso(false), tsoHeaderLen(0), tsoMss(0), tsoTotalLen(0), tsoUsedLen(0),
@@ -1680,7 +1679,7 @@
             DPRINTF(EthernetDesc,
                     "Loading TSO header (%d bytes) into start of packet\n",
                     tsoHeaderLen);
-            memcpy(p->data, &tsoHeader, tsoHeaderLen);
+            memcpy(p->data, &tsoHeader,tsoHeaderLen);
             p->length +=tsoHeaderLen;
             tsoPktHasHeader = true;
         }
@@ -1739,7 +1738,7 @@
 
 
     if ((!txd_op::eop(desc) && !useTso) ||
-        (pktPtr->length < (tsoMss + tsoHeaderLen) &&
+        (pktPtr->length < ( tsoMss + tsoHeaderLen) &&
          tsoTotalLen != tsoUsedLen && useTso)) {
         assert(!useTso || (tsoDescBytesUsed == txd_op::getLen(desc)));
         unusedCache.pop_front();
@@ -1910,7 +1909,7 @@
                 "Completion writing back value: %d to addr: %#x\n", descEnd,
                 completionAddress);
         igbe->dmaWrite(pciToDma(mbits(completionAddress, 63, 2)),
-                       sizeof(descEnd), &nullEvent, (uint8_t *)&descEnd, 0);
+                       sizeof(descEnd), &nullEvent, (uint8_t*)&descEnd, 0);
     }
 }
 
@@ -2370,7 +2369,7 @@
     SERIALIZE_SCALAR(eeOpcode);
     SERIALIZE_SCALAR(eeAddr);
     SERIALIZE_SCALAR(lastInterrupt);
-    SERIALIZE_ARRAY(flash, igbreg::EEPROM_SIZE);
+    SERIALIZE_ARRAY(flash,igbreg::EEPROM_SIZE);
 
     rxFifo.serialize("rxfifo", cp);
     txFifo.serialize("txfifo", cp);
@@ -2421,7 +2420,7 @@
     UNSERIALIZE_SCALAR(eeOpcode);
     UNSERIALIZE_SCALAR(eeAddr);
     UNSERIALIZE_SCALAR(lastInterrupt);
-    UNSERIALIZE_ARRAY(flash, igbreg::EEPROM_SIZE);
+    UNSERIALIZE_ARRAY(flash,igbreg::EEPROM_SIZE);
 
     rxFifo.unserialize("rxfifo", cp);
     txFifo.unserialize("txfifo", cp);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/i8254xGBe_defs.hh gem5-SALAM/src/dev/net/i8254xGBe_defs.hh
--- gem5/src/dev/net/i8254xGBe_defs.hh	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/net/i8254xGBe_defs.hh	2024-02-22 18:17:15.096944455 -0600
@@ -248,179 +248,57 @@
 const uint8_t TXD_ADVCNXT = 0x2;
 const uint8_t TXD_ADVDATA = 0x3;
 
-inline bool isLegacy(TxDesc *d) { return !bits(d->d2, 29); }
-inline uint8_t getType(TxDesc *d) { return bits(d->d2, 23, 20); }
+inline bool isLegacy(TxDesc *d) { return !bits(d->d2,29,29); }
+inline uint8_t getType(TxDesc *d) { return bits(d->d2, 23,20); }
 inline bool isType(TxDesc *d, uint8_t type) { return getType(d) == type; }
-inline bool
-isTypes(TxDesc *d, uint8_t t1, uint8_t t2)
-{
-    return isType(d, t1) || isType(d, t2);
-}
-inline bool
-isAdvDesc(TxDesc *d)
-{
-    return !isLegacy(d) && isTypes(d, TXD_ADVDATA,TXD_ADVCNXT);
-}
-inline bool
-isContext(TxDesc *d)
-{
-    return !isLegacy(d) && isTypes(d,TXD_CNXT, TXD_ADVCNXT);
-}
-inline bool
-isData(TxDesc *d)
-{
-    return !isLegacy(d) && isTypes(d, TXD_DATA, TXD_ADVDATA);
-}
+inline bool isTypes(TxDesc *d, uint8_t t1, uint8_t t2) { return isType(d, t1) || isType(d, t2); }
+inline bool isAdvDesc(TxDesc *d) { return !isLegacy(d) && isTypes(d, TXD_ADVDATA,TXD_ADVCNXT);  }
+inline bool isContext(TxDesc *d) { return !isLegacy(d) && isTypes(d,TXD_CNXT, TXD_ADVCNXT); }
+inline bool isData(TxDesc *d) { return !isLegacy(d) && isTypes(d, TXD_DATA, TXD_ADVDATA); }
 
-inline Addr
-getBuf(TxDesc *d)
-{
-    assert(isLegacy(d) || isData(d));
-    return d->d1;
-}
-inline Addr
-getLen(TxDesc *d)
-{
-    if (isLegacy(d))
-        return bits(d->d2, 15, 0);
-    else
-        return bits(d->d2, 19, 0);
-}
+inline Addr getBuf(TxDesc *d) { assert(isLegacy(d) || isData(d)); return d->d1; }
+inline Addr getLen(TxDesc *d) { if (isLegacy(d)) return bits(d->d2,15,0); else return bits(d->d2, 19,0); }
 inline void setDd(TxDesc *d) { replaceBits(d->d2, 35, 32, 1ULL); }
 
-inline bool
-ide(TxDesc *d)
-{
-    return bits(d->d2, 31, 31) && (getType(d) == TXD_DATA || isLegacy(d));
-}
-inline bool
-vle(TxDesc *d)
-{
-    assert(isLegacy(d) || isData(d));
-    return bits(d->d2, 30);
-}
-inline bool rs(TxDesc *d) { return bits(d->d2, 27); }
-inline bool
-ic(TxDesc *d)
-{
-    assert(isLegacy(d) || isData(d));
-    return isLegacy(d) && bits(d->d2, 26);
-}
-inline bool
-tse(TxDesc *d)
-{
+inline bool ide(TxDesc *d)  { return bits(d->d2, 31,31) && (getType(d) == TXD_DATA || isLegacy(d)); }
+inline bool vle(TxDesc *d)  { assert(isLegacy(d) || isData(d)); return bits(d->d2, 30,30); }
+inline bool rs(TxDesc *d)   { return bits(d->d2, 27,27); }
+inline bool ic(TxDesc *d)   { assert(isLegacy(d) || isData(d)); return isLegacy(d) && bits(d->d2, 26,26); }
+inline bool tse(TxDesc *d)  {
     if (isTypes(d, TXD_CNXT, TXD_DATA))
-        return bits(d->d2, 26);
+        return bits(d->d2, 26,26);
     if (isType(d, TXD_ADVDATA))
-        return bits(d->d2, 31);
+        return bits(d->d2, 31, 31);
     return false;
 }
 
-inline bool
-ifcs(TxDesc *d)
-{
-    assert(isLegacy(d) || isData(d));
-    return bits(d->d2, 25);
-}
-inline bool
-eop(TxDesc *d)
-{
-    assert(isLegacy(d) || isData(d));
-    return bits(d->d2, 24);
-}
-inline bool
-ip(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d2, 25);
-}
-inline bool
-tcp(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d2, 24);
-}
-
-inline uint8_t
-getCso(TxDesc *d)
-{
-    assert(isLegacy(d));
-    return bits(d->d2, 23, 16);
-}
-inline uint8_t
-getCss(TxDesc *d)
-{
-    assert(isLegacy(d));
-    return bits(d->d2, 47, 40);
-}
-
-inline bool ixsm(TxDesc *d)  { return isData(d) && bits(d->d2, 40, 40); }
-inline bool txsm(TxDesc *d)  { return isData(d) && bits(d->d2, 41, 41); }
-
-inline int
-tucse(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 63, 48);
-}
-inline int
-tucso(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 47, 40);
-}
-inline int
-tucss(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 39, 32);
-}
-inline int
-ipcse(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 31, 16);
-}
-inline int
-ipcso(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 15, 8);
-}
-inline int
-ipcss(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d1, 7, 0);
-}
-inline int
-mss(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d2, 63, 48);
-}
-inline int
-hdrlen(TxDesc *d)
-{
+inline bool ifcs(TxDesc *d) { assert(isLegacy(d) || isData(d)); return bits(d->d2, 25,25); }
+inline bool eop(TxDesc *d)  { assert(isLegacy(d) || isData(d)); return bits(d->d2, 24,24); }
+inline bool ip(TxDesc *d)   { assert(isContext(d)); return bits(d->d2, 25,25); }
+inline bool tcp(TxDesc *d)  { assert(isContext(d)); return bits(d->d2, 24,24); }
+
+inline uint8_t getCso(TxDesc *d) { assert(isLegacy(d)); return bits(d->d2, 23,16); }
+inline uint8_t getCss(TxDesc *d) { assert(isLegacy(d)); return bits(d->d2, 47,40); }
+
+inline bool ixsm(TxDesc *d)  { return isData(d) && bits(d->d2, 40,40); }
+inline bool txsm(TxDesc *d)  { return isData(d) && bits(d->d2, 41,41); }
+
+inline int tucse(TxDesc *d) { assert(isContext(d)); return bits(d->d1,63,48); }
+inline int tucso(TxDesc *d) { assert(isContext(d)); return bits(d->d1,47,40); }
+inline int tucss(TxDesc *d) { assert(isContext(d)); return bits(d->d1,39,32); }
+inline int ipcse(TxDesc *d) { assert(isContext(d)); return bits(d->d1,31,16); }
+inline int ipcso(TxDesc *d) { assert(isContext(d)); return bits(d->d1,15,8); }
+inline int ipcss(TxDesc *d) { assert(isContext(d)); return bits(d->d1,7,0); }
+inline int mss(TxDesc *d) { assert(isContext(d)); return bits(d->d2,63,48); }
+inline int hdrlen(TxDesc *d) {
     assert(isContext(d));
     if (!isAdvDesc(d))
-        return bits(d->d2, 47, 40);
-    return bits(d->d2, 47, 40) + bits(d->d1, 8, 0) + bits(d->d1, 15, 9);
-}
-
-inline int
-getTsoLen(TxDesc *d)
-{
-    assert(isType(d, TXD_ADVDATA));
-    return bits(d->d2, 63, 46);
-}
-inline int
-utcmd(TxDesc *d)
-{
-    assert(isContext(d));
-    return bits(d->d2, 24, 31);
+        return bits(d->d2,47,40);
+    return bits(d->d2, 47,40) + bits(d->d1, 8,0) + bits(d->d1, 15, 9);
 }
 
+inline int getTsoLen(TxDesc *d) { assert(isType(d, TXD_ADVDATA)); return bits(d->d2, 63,46); }
+inline int utcmd(TxDesc *d) { assert(isContext(d)); return bits(d->d2,24,31); }
 } // namespace txd_op
 
 
@@ -457,37 +335,37 @@
     {
          // 0x0000 CTRL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(fd, 0, 1);       // full duplex
-        ADD_FIELD32(bem, 1, 1);      // big endian mode
-        ADD_FIELD32(pcipr, 2, 1);    // PCI priority
-        ADD_FIELD32(lrst, 3, 1);     // link reset
-        ADD_FIELD32(tme, 4, 1);      // test mode enable
-        ADD_FIELD32(asde, 5, 1);     // Auto-speed detection
-        ADD_FIELD32(slu, 6, 1);      // Set link up
-        ADD_FIELD32(ilos, 7, 1);     // invert los-of-signal
-        ADD_FIELD32(speed, 8, 2);    // speed selection bits
-        ADD_FIELD32(be32, 10, 1);    // big endian mode 32
-        ADD_FIELD32(frcspd, 11, 1);  // force speed
-        ADD_FIELD32(frcdpx, 12, 1);  // force duplex
-        ADD_FIELD32(duden, 13, 1);   // dock/undock enable
-        ADD_FIELD32(dudpol, 14, 1);  // dock/undock polarity
-        ADD_FIELD32(fphyrst, 15, 1); // force phy reset
-        ADD_FIELD32(extlen, 16, 1);  // external link status enable
-        ADD_FIELD32(rsvd, 17, 1);    // reserved
-        ADD_FIELD32(sdp0d, 18, 1);   // software controlled pin data
-        ADD_FIELD32(sdp1d, 19, 1);   // software controlled pin data
-        ADD_FIELD32(sdp2d, 20, 1);   // software controlled pin data
-        ADD_FIELD32(sdp3d, 21, 1);   // software controlled pin data
-        ADD_FIELD32(sdp0i, 22, 1);   // software controlled pin dir
-        ADD_FIELD32(sdp1i, 23, 1);   // software controlled pin dir
-        ADD_FIELD32(sdp2i, 24, 1);   // software controlled pin dir
-        ADD_FIELD32(sdp3i, 25, 1);   // software controlled pin dir
-        ADD_FIELD32(rst, 26, 1);     // reset
-        ADD_FIELD32(rfce, 27, 1);    // receive flow control enable
-        ADD_FIELD32(tfce, 28, 1);    // transmit flow control enable
-        ADD_FIELD32(rte, 29, 1);     // routing tag enable
-        ADD_FIELD32(vme, 30, 1);     // vlan enable
-        ADD_FIELD32(phyrst, 31, 1);  // phy reset
+        ADD_FIELD32(fd,0,1);       // full duplex
+        ADD_FIELD32(bem,1,1);      // big endian mode
+        ADD_FIELD32(pcipr,2,1);    // PCI priority
+        ADD_FIELD32(lrst,3,1);     // link reset
+        ADD_FIELD32(tme,4,1);      // test mode enable
+        ADD_FIELD32(asde,5,1);     // Auto-speed detection
+        ADD_FIELD32(slu,6,1);      // Set link up
+        ADD_FIELD32(ilos,7,1);     // invert los-of-signal
+        ADD_FIELD32(speed,8,2);    // speed selection bits
+        ADD_FIELD32(be32,10,1);    // big endian mode 32
+        ADD_FIELD32(frcspd,11,1);  // force speed
+        ADD_FIELD32(frcdpx,12,1);  // force duplex
+        ADD_FIELD32(duden,13,1);   // dock/undock enable
+        ADD_FIELD32(dudpol,14,1);  // dock/undock polarity
+        ADD_FIELD32(fphyrst,15,1); // force phy reset
+        ADD_FIELD32(extlen,16,1);  // external link status enable
+        ADD_FIELD32(rsvd,17,1);    // reserved
+        ADD_FIELD32(sdp0d,18,1);   // software controlled pin data
+        ADD_FIELD32(sdp1d,19,1);   // software controlled pin data
+        ADD_FIELD32(sdp2d,20,1);   // software controlled pin data
+        ADD_FIELD32(sdp3d,21,1);   // software controlled pin data
+        ADD_FIELD32(sdp0i,22,1);   // software controlled pin dir
+        ADD_FIELD32(sdp1i,23,1);   // software controlled pin dir
+        ADD_FIELD32(sdp2i,24,1);   // software controlled pin dir
+        ADD_FIELD32(sdp3i,25,1);   // software controlled pin dir
+        ADD_FIELD32(rst,26,1);     // reset
+        ADD_FIELD32(rfce,27,1);    // receive flow control enable
+        ADD_FIELD32(tfce,28,1);    // transmit flow control enable
+        ADD_FIELD32(rte,29,1);     // routing tag enable
+        ADD_FIELD32(vme,30,1);     // vlan enable
+        ADD_FIELD32(phyrst,31,1);  // phy reset
     };
     CTRL ctrl;
 
@@ -495,18 +373,18 @@
     {
         // 0x0008 STATUS Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(fd, 0, 1);       // full duplex
-        ADD_FIELD32(lu, 1, 1);       // link up
-        ADD_FIELD32(func, 2, 2);     // function id
-        ADD_FIELD32(txoff, 4, 1);    // transmission paused
-        ADD_FIELD32(tbimode, 5, 1);  // tbi mode
-        ADD_FIELD32(speed, 6, 2);    // link speed
-        ADD_FIELD32(asdv, 8, 2);     // auto speed detection value
-        ADD_FIELD32(mtxckok, 10, 1); // mtx clock running ok
-        ADD_FIELD32(pci66, 11, 1);   // In 66Mhz pci slot
-        ADD_FIELD32(bus64, 12, 1);   // in 64 bit slot
-        ADD_FIELD32(pcix, 13, 1);    // Pci mode
-        ADD_FIELD32(pcixspd, 14, 2); // pci x speed
+        ADD_FIELD32(fd,0,1);       // full duplex
+        ADD_FIELD32(lu,1,1);       // link up
+        ADD_FIELD32(func,2,2);     // function id
+        ADD_FIELD32(txoff,4,1);    // transmission paused
+        ADD_FIELD32(tbimode,5,1);  // tbi mode
+        ADD_FIELD32(speed,6,2);    // link speed
+        ADD_FIELD32(asdv,8,2);     // auto speed detection value
+        ADD_FIELD32(mtxckok,10,1); // mtx clock running ok
+        ADD_FIELD32(pci66,11,1);   // In 66Mhz pci slot
+        ADD_FIELD32(bus64,12,1);   // in 64 bit slot
+        ADD_FIELD32(pcix,13,1);    // Pci mode
+        ADD_FIELD32(pcixspd,14,2); // pci x speed
     };
     STATUS sts;
 
@@ -514,18 +392,18 @@
     {
         // 0x0010 EECD Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(sk, 0, 1);       // clack input to the eeprom
-        ADD_FIELD32(cs, 1, 1);       // chip select to eeprom
-        ADD_FIELD32(din, 2, 1);      // data input to eeprom
-        ADD_FIELD32(dout, 3, 1);     // data output bit
-        ADD_FIELD32(fwe, 4, 2);      // flash write enable
-        ADD_FIELD32(ee_req, 6, 1);   // request eeprom access
-        ADD_FIELD32(ee_gnt, 7, 1);   // grant eeprom access
-        ADD_FIELD32(ee_pres, 8, 1);  // eeprom present
-        ADD_FIELD32(ee_size, 9, 1);  // eeprom size
-        ADD_FIELD32(ee_sz1, 10, 1);  // eeprom size
-        ADD_FIELD32(rsvd, 11, 2);    // reserved
-        ADD_FIELD32(ee_type, 13, 1); // type of eeprom
+        ADD_FIELD32(sk,0,1);       // clack input to the eeprom
+        ADD_FIELD32(cs,1,1);       // chip select to eeprom
+        ADD_FIELD32(din,2,1);      // data input to eeprom
+        ADD_FIELD32(dout,3,1);     // data output bit
+        ADD_FIELD32(fwe,4,2);      // flash write enable
+        ADD_FIELD32(ee_req,6,1);   // request eeprom access
+        ADD_FIELD32(ee_gnt,7,1);   // grant eeprom access
+        ADD_FIELD32(ee_pres,8,1);  // eeprom present
+        ADD_FIELD32(ee_size,9,1);  // eeprom size
+        ADD_FIELD32(ee_sz1,10,1);  // eeprom size
+        ADD_FIELD32(rsvd,11,2);    // reserved
+        ADD_FIELD32(ee_type,13,1); // type of eeprom
     } ;
     EECD eecd;
 
@@ -533,10 +411,10 @@
     {
         // 0x0014 EERD Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(start, 0, 1);  // start read
-        ADD_FIELD32(done, 1, 1);   // done read
-        ADD_FIELD32(addr, 2, 14);   // address
-        ADD_FIELD32(data, 16, 16); // data
+        ADD_FIELD32(start,0,1);  // start read
+        ADD_FIELD32(done,1,1);   // done read
+        ADD_FIELD32(addr,2,14);   // address
+        ADD_FIELD32(data,16,16); // data
     };
     EERD eerd;
 
@@ -544,23 +422,21 @@
     {
         // 0x0018 CTRL_EXT Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(gpi_en, 0, 4);      // enable interrupts from gpio
-        ADD_FIELD32(phyint, 5, 1);      // reads the phy internal int status
-        ADD_FIELD32(sdp2_data, 6, 1);   // data from gpio sdp
-        ADD_FIELD32(spd3_data, 7, 1);   // data frmo gpio sdp
-        ADD_FIELD32(spd2_iodir, 10, 1); // direction of sdp2
-        ADD_FIELD32(spd3_iodir, 11, 1); // direction of sdp2
-        ADD_FIELD32(asdchk, 12, 1);     // initiate auto-speed-detection
-        ADD_FIELD32(eerst, 13, 1);      // reset the eeprom
-        ADD_FIELD32(spd_byps, 15, 1);   // bypass speed select
-        ADD_FIELD32(ro_dis, 17, 1);     // disable relaxed memory ordering
-        ADD_FIELD32(vreg, 21, 1);       // power down the voltage regulator
-        ADD_FIELD32(link_mode, 22, 2);  // interface to talk to the link
-        ADD_FIELD32(iame, 27, 1);       // interrupt acknowledge auto-mask ??
-        ADD_FIELD32(drv_loaded, 28, 1); // driver is loaded and incharge of
-                                        //   device
-        ADD_FIELD32(timer_clr, 29, 1);  // clear interrupt timers after IMS
-                                        //   clear ??
+        ADD_FIELD32(gpi_en,0,4);      // enable interrupts from gpio
+        ADD_FIELD32(phyint,5,1);      // reads the phy internal int status
+        ADD_FIELD32(sdp2_data,6,1);   // data from gpio sdp
+        ADD_FIELD32(spd3_data,7,1);   // data frmo gpio sdp
+        ADD_FIELD32(spd2_iodir,10,1); // direction of sdp2
+        ADD_FIELD32(spd3_iodir,11,1); // direction of sdp2
+        ADD_FIELD32(asdchk,12,1);     // initiate auto-speed-detection
+        ADD_FIELD32(eerst,13,1);      // reset the eeprom
+        ADD_FIELD32(spd_byps,15,1);   // bypass speed select
+        ADD_FIELD32(ro_dis,17,1);     // disable relaxed memory ordering
+        ADD_FIELD32(vreg,21,1);       // power down the voltage regulator
+        ADD_FIELD32(link_mode,22,2);  // interface to talk to the link
+        ADD_FIELD32(iame, 27,1);      // interrupt acknowledge auto-mask ??
+        ADD_FIELD32(drv_loaded, 28,1);// driver is loaded and incharge of device
+        ADD_FIELD32(timer_clr, 29,1); // clear interrupt timers after IMS clear ??
     };
     CTRL_EXT ctrl_ext;
 
@@ -568,13 +444,13 @@
     {
         // 0x0020 MDIC Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(data, 0, 16);   // data
-        ADD_FIELD32(regadd, 16, 5); // register address
-        ADD_FIELD32(phyadd, 21, 5); // phy addresses
-        ADD_FIELD32(op, 26, 2);     // opcode
-        ADD_FIELD32(r, 28, 1);      // ready
-        ADD_FIELD32(i, 29, 1);      // interrupt
-        ADD_FIELD32(e, 30, 1);      // error
+        ADD_FIELD32(data,0,16);   // data
+        ADD_FIELD32(regadd,16,5); // register address
+        ADD_FIELD32(phyadd,21,5); // phy addresses
+        ADD_FIELD32(op,26,2);     // opcode
+        ADD_FIELD32(r,28,1);      // ready
+        ADD_FIELD32(i,29,1);      // interrupt
+        ADD_FIELD32(e,30,1);      // error
     };
     MDIC mdic;
 
@@ -582,23 +458,23 @@
     {
         // 0x00C0 ICR Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(txdw, 0, 1)   // tx descr witten back
-        ADD_FIELD32(txqe, 1, 1)   // tx queue empty
-        ADD_FIELD32(lsc, 2, 1)    // link status change
-        ADD_FIELD32(rxseq, 3, 1)  // rcv sequence error
-        ADD_FIELD32(rxdmt0, 4, 1) // rcv descriptor min thresh
-        ADD_FIELD32(rsvd1, 5, 1)  // reserved
-        ADD_FIELD32(rxo, 6, 1)    // receive overrunn
-        ADD_FIELD32(rxt0, 7, 1)   // receiver timer interrupt
-        ADD_FIELD32(mdac, 9, 1)   // mdi/o access complete
-        ADD_FIELD32(rxcfg, 10, 1)  // recv /c/ ordered sets
-        ADD_FIELD32(phyint, 12, 1) // phy interrupt
-        ADD_FIELD32(gpi1, 13, 1)   // gpi int 1
-        ADD_FIELD32(gpi2, 14, 1)   // gpi int 2
-        ADD_FIELD32(txdlow, 15, 1) // transmit desc low thresh
-        ADD_FIELD32(srpd, 16, 1)   // small receive packet detected
-        ADD_FIELD32(ack, 17, 1);    // receive ack frame
-        ADD_FIELD32(int_assert, 31, 1); // interrupt caused a system interrupt
+        ADD_FIELD32(txdw,0,1)   // tx descr witten back
+        ADD_FIELD32(txqe,1,1)   // tx queue empty
+        ADD_FIELD32(lsc,2,1)    // link status change
+        ADD_FIELD32(rxseq,3,1)  // rcv sequence error
+        ADD_FIELD32(rxdmt0,4,1) // rcv descriptor min thresh
+        ADD_FIELD32(rsvd1,5,1)  // reserved
+        ADD_FIELD32(rxo,6,1)    // receive overrunn
+        ADD_FIELD32(rxt0,7,1)   // receiver timer interrupt
+        ADD_FIELD32(mdac,9,1)   // mdi/o access complete
+        ADD_FIELD32(rxcfg,10,1)  // recv /c/ ordered sets
+        ADD_FIELD32(phyint,12,1) // phy interrupt
+        ADD_FIELD32(gpi1,13,1)   // gpi int 1
+        ADD_FIELD32(gpi2,14,1)   // gpi int 2
+        ADD_FIELD32(txdlow,15,1) // transmit desc low thresh
+        ADD_FIELD32(srpd,16,1)   // small receive packet detected
+        ADD_FIELD32(ack,17,1);    // receive ack frame
+        ADD_FIELD32(int_assert, 31,1); // interrupt caused a system interrupt
     };
     ICR icr;
 
@@ -608,8 +484,8 @@
     {
         // 0x00C4 ITR Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(interval, 0, 16); // minimum inter-interrutp inteval
-                                      // specified in 256ns interrupts
+        ADD_FIELD32(interval, 0,16); // minimum inter-interrutp inteval
+                                     // specified in 256ns interrupts
     };
     ITR itr;
 
@@ -622,25 +498,25 @@
     {
         // 0x0100 RCTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rst, 0, 1);   // Reset
-        ADD_FIELD32(en, 1, 1);    // Enable
-        ADD_FIELD32(sbp, 2, 1);   // Store bad packets
-        ADD_FIELD32(upe, 3, 1);   // Unicast Promiscuous enabled
-        ADD_FIELD32(mpe, 4, 1);   // Multicast promiscuous enabled
-        ADD_FIELD32(lpe, 5, 1);   // long packet reception enabled
-        ADD_FIELD32(lbm, 6, 2);   //
-        ADD_FIELD32(rdmts, 8, 2); //
-        ADD_FIELD32(mo, 12, 2);    //
-        ADD_FIELD32(mdr, 14, 1);   //
-        ADD_FIELD32(bam, 15, 1);   //
-        ADD_FIELD32(bsize, 16, 2); //
-        ADD_FIELD32(vfe, 18, 1);   //
-        ADD_FIELD32(cfien, 19, 1); //
-        ADD_FIELD32(cfi, 20, 1);   //
-        ADD_FIELD32(dpf, 22, 1);   // discard pause frames
-        ADD_FIELD32(pmcf, 23, 1);  // pass mac control  frames
-        ADD_FIELD32(bsex, 25, 1);  // buffer size extension
-        ADD_FIELD32(secrc, 26, 1); // strip ethernet crc from incoming packet
+        ADD_FIELD32(rst,0,1);   // Reset
+        ADD_FIELD32(en,1,1);    // Enable
+        ADD_FIELD32(sbp,2,1);   // Store bad packets
+        ADD_FIELD32(upe,3,1);   // Unicast Promiscuous enabled
+        ADD_FIELD32(mpe,4,1);   // Multicast promiscuous enabled
+        ADD_FIELD32(lpe,5,1);   // long packet reception enabled
+        ADD_FIELD32(lbm,6,2);   //
+        ADD_FIELD32(rdmts,8,2); //
+        ADD_FIELD32(mo,12,2);    //
+        ADD_FIELD32(mdr,14,1);   //
+        ADD_FIELD32(bam,15,1);   //
+        ADD_FIELD32(bsize,16,2); //
+        ADD_FIELD32(vfe,18,1);   //
+        ADD_FIELD32(cfien,19,1); //
+        ADD_FIELD32(cfi,20,1);   //
+        ADD_FIELD32(dpf,22,1);   // discard pause frames
+        ADD_FIELD32(pmcf,23,1);  // pass mac control  frames
+        ADD_FIELD32(bsex,25,1);  // buffer size extension
+        ADD_FIELD32(secrc,26,1); // strip ethernet crc from incoming packet
         unsigned descSize()
         {
             switch(bsize()) {
@@ -659,7 +535,7 @@
     {
         // 0x0170 FCTTV
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(ttv, 0, 16);    // Transmit Timer Value
+        ADD_FIELD32(ttv,0,16);    // Transmit Timer Value
     };
     FCTTV fcttv;
 
@@ -667,17 +543,17 @@
     {
         // 0x0400 TCTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rst, 0, 1);    // Reset
-        ADD_FIELD32(en, 1, 1);     // Enable
-        ADD_FIELD32(bce, 2, 1);    // busy check enable
-        ADD_FIELD32(psp, 3, 1);    // pad short packets
-        ADD_FIELD32(ct, 4, 8);     // collision threshold
-        ADD_FIELD32(cold, 12, 10); // collision distance
-        ADD_FIELD32(swxoff, 22, 1); // software xoff transmission
-        ADD_FIELD32(pbe, 23, 1);    // packet burst enable
-        ADD_FIELD32(rtlc, 24, 1);   // retransmit late collisions
-        ADD_FIELD32(nrtu, 25, 1);   // on underrun no TX
-        ADD_FIELD32(mulr, 26, 1);   // multiple request
+        ADD_FIELD32(rst,0,1);    // Reset
+        ADD_FIELD32(en,1,1);     // Enable
+        ADD_FIELD32(bce,2,1);    // busy check enable
+        ADD_FIELD32(psp,3,1);    // pad short packets
+        ADD_FIELD32(ct,4,8);     // collision threshold
+        ADD_FIELD32(cold,12,10); // collision distance
+        ADD_FIELD32(swxoff,22,1); // software xoff transmission
+        ADD_FIELD32(pbe,23,1);    // packet burst enable
+        ADD_FIELD32(rtlc,24,1);   // retransmit late collisions
+        ADD_FIELD32(nrtu,25,1);   // on underrun no TX
+        ADD_FIELD32(mulr,26,1);   // multiple request
     };
     TCTL tctl;
 
@@ -685,8 +561,8 @@
     {
         // 0x1000 PBA Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rxa, 0, 16);
-        ADD_FIELD32(txa, 16, 16);
+        ADD_FIELD32(rxa,0,16);
+        ADD_FIELD32(txa,16,16);
     };
     PBA pba;
 
@@ -694,9 +570,9 @@
     {
         // 0x2160 FCRTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rtl, 3, 28); // make this bigger than the spec so we can
-                                 // have a larger buffer
-        ADD_FIELD32(xone, 31, 1);
+        ADD_FIELD32(rtl,3,28); // make this bigger than the spec so we can have
+                               // a larger buffer
+        ADD_FIELD32(xone, 31,1);
     };
     FCRTL fcrtl;
 
@@ -704,9 +580,9 @@
     {
         // 0x2168 FCRTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rth, 3, 13); // make this bigger than the spec so we can
-                                 // have a larger buffer
-        ADD_FIELD32(xfce, 31, 1);
+        ADD_FIELD32(rth,3,13); // make this bigger than the spec so we can have
+                               //a larger buffer
+        ADD_FIELD32(xfce, 31,1);
     };
     FCRTH fcrth;
 
@@ -714,8 +590,8 @@
     {
         // 0x2800 RDBA Register
         using Reg<uint64_t>::operator=;
-        ADD_FIELD64(rdbal, 0, 32); // base address of rx descriptor ring
-        ADD_FIELD64(rdbah, 32, 32); // base address of rx descriptor ring
+        ADD_FIELD64(rdbal,0,32); // base address of rx descriptor ring
+        ADD_FIELD64(rdbah,32,32); // base address of rx descriptor ring
     };
     RDBA rdba;
 
@@ -723,7 +599,7 @@
     {
         // 0x2808 RDLEN Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(len, 7, 13); // number of bytes in the descriptor buffer
+        ADD_FIELD32(len,7,13); // number of bytes in the descriptor buffer
     };
     RDLEN rdlen;
 
@@ -733,8 +609,8 @@
         using Reg<uint32_t>::operator=;
         ADD_FIELD32(pktlen, 0, 8);
         ADD_FIELD32(hdrlen, 8, 8); // guess based on header, not documented
-        ADD_FIELD32(desctype, 25, 3); // type of descriptor 000 legacy,
-                                      // 001 adv, 101 hdr split
+        ADD_FIELD32(desctype, 25,3); // type of descriptor 000 legacy, 001 adv,
+                                     //101 hdr split
         unsigned bufLen() { return pktlen() << 10; }
         unsigned hdrLen() { return hdrlen() << 6; }
     };
@@ -744,7 +620,7 @@
     {
         // 0x2810 RDH Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rdh, 0, 16); // head of the descriptor ring
+        ADD_FIELD32(rdh,0,16); // head of the descriptor ring
     };
     RDH rdh;
 
@@ -752,7 +628,7 @@
     {
         // 0x2818 RDT Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(rdt, 0, 16); // tail of the descriptor ring
+        ADD_FIELD32(rdt,0,16); // tail of the descriptor ring
     };
     RDT rdt;
 
@@ -760,8 +636,8 @@
     {
         // 0x2820 RDTR Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(delay, 0, 16); // receive delay timer
-        ADD_FIELD32(fpd, 31, 1);   // flush partial descriptor block ??
+        ADD_FIELD32(delay,0,16); // receive delay timer
+        ADD_FIELD32(fpd, 31,1);   // flush partial descriptor block ??
     };
     RDTR rdtr;
 
@@ -769,12 +645,12 @@
     {
         // 0x2828 RXDCTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(pthresh, 0, 6);   // prefetch threshold, less that this
-                                      // consider prefetch
-        ADD_FIELD32(hthresh, 8, 6);   // number of descriptors in host mem to
-                                      // consider prefetch
-        ADD_FIELD32(wthresh, 16, 6);  // writeback threshold
-        ADD_FIELD32(gran, 24, 1);     // granularity 0 = desc, 1 = cacheline
+        ADD_FIELD32(pthresh,0,6);   // prefetch threshold, less that this
+                                    // consider prefetch
+        ADD_FIELD32(hthresh,8,6);   // number of descriptors in host mem to
+                                    // consider prefetch
+        ADD_FIELD32(wthresh,16,6);  // writeback threshold
+        ADD_FIELD32(gran,24,1);     // granularity 0 = desc, 1 = cacheline
     };
     RXDCTL rxdctl;
 
@@ -782,7 +658,7 @@
     {
         // 0x282C RADV Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(idv, 0, 16); // absolute interrupt delay
+        ADD_FIELD32(idv,0,16); // absolute interrupt delay
     };
     RADV radv;
 
@@ -790,7 +666,7 @@
     {
         // 0x2C00 RSRPD Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(idv, 0, 12); // size to interrutp on small packets
+        ADD_FIELD32(idv,0,12); // size to interrutp on small packets
     };
     RSRPD rsrpd;
 
@@ -798,8 +674,8 @@
     {
         // 0x3800 TDBAL Register
         using Reg<uint64_t>::operator=;
-        ADD_FIELD64(tdbal, 0, 32); // base address of transmit descriptor ring
-        ADD_FIELD64(tdbah, 32, 32); // base address of transmit descriptor ring
+        ADD_FIELD64(tdbal,0,32); // base address of transmit descriptor ring
+        ADD_FIELD64(tdbah,32,32); // base address of transmit descriptor ring
     };
     TDBA tdba;
 
@@ -807,7 +683,7 @@
     {
         // 0x3808 TDLEN Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(len, 7, 13); // number of bytes in the descriptor buffer
+        ADD_FIELD32(len,7,13); // number of bytes in the descriptor buffer
     };
     TDLEN tdlen;
 
@@ -815,7 +691,7 @@
     {
         // 0x3810 TDH Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(tdh, 0, 16); // head of the descriptor ring
+        ADD_FIELD32(tdh,0,16); // head of the descriptor ring
     };
     TDH tdh;
 
@@ -824,7 +700,7 @@
         // 0x3814 TXDCA_CTL Register
         using Reg<uint32_t>::operator=;
         ADD_FIELD32(cpu_mask, 0, 5);
-        ADD_FIELD32(enabled, 5, 1);
+        ADD_FIELD32(enabled, 5,1);
         ADD_FIELD32(relax_ordering, 6, 1);
     };
     TXDCA_CTL txdca_ctl;
@@ -833,7 +709,7 @@
     {
         // 0x3818 TDT Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(tdt, 0, 16); // tail of the descriptor ring
+        ADD_FIELD32(tdt,0,16); // tail of the descriptor ring
     };
     TDT tdt;
 
@@ -841,7 +717,7 @@
     {
         // 0x3820 TIDV Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(idv, 0, 16); // interrupt delay
+        ADD_FIELD32(idv,0,16); // interrupt delay
     };
     TIDV tidv;
 
@@ -849,17 +725,16 @@
     {
         // 0x3828 TXDCTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(pthresh, 0, 6); // if number of descriptors control has is
-                                    // below this number, a prefetch is
-                                    //considered
-        ADD_FIELD32(hthresh, 8, 8); // number of valid descriptors is host
-                                    // memory before a prefetch is considered
-        ADD_FIELD32(wthresh, 16, 6);// number of descriptors to keep until
+        ADD_FIELD32(pthresh, 0,6);  // if number of descriptors control has is
+                                    // below this number, a prefetch is considered
+        ADD_FIELD32(hthresh,8,8);   // number of valid descriptors is host memory
+                                    // before a prefetch is considered
+        ADD_FIELD32(wthresh,16,6);  // number of descriptors to keep until
                                     // writeback is considered
-        ADD_FIELD32(gran, 24, 1);   // granulatiry of above values
-                                    // (0 = cacheline, 1 == desscriptor)
-        ADD_FIELD32(lwthresh, 25, 7); // xmit descriptor low thresh, interrupt
-                                      // below this level
+        ADD_FIELD32(gran, 24,1);    // granulatiry of above values (0 = cacheline,
+                                    // 1 == desscriptor)
+        ADD_FIELD32(lwthresh,25,7); // xmit descriptor low thresh, interrupt
+                                    // below this level
     };
     TXDCTL txdctl;
 
@@ -867,19 +742,29 @@
     {
         // 0x382C TADV Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(idv, 0, 16); // absolute interrupt delay
+        ADD_FIELD32(idv,0,16); // absolute interrupt delay
     };
     TADV tadv;
+/*
+    struct TDWBA : public Reg<uint64_t>
+    {
+        // 0x3838 TDWBA Register
+        using Reg<uint64_t>::operator=;
+        ADD_FIELD64(en,0,1); // enable  transmit description ring address writeback
+        ADD_FIELD64(tdwbal,2,32); // base address of transmit descriptor ring address writeback
+        ADD_FIELD64(tdwbah,32,32); // base address of transmit descriptor ring
+    };
+    TDWBA tdwba;*/
     uint64_t tdwba;
 
     struct RXCSUM : public Reg<uint32_t>
     {
         // 0x5000 RXCSUM Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(pcss, 0, 8);
-        ADD_FIELD32(ipofld, 8, 1);
-        ADD_FIELD32(tuofld, 9, 1);
-        ADD_FIELD32(pcsd, 13, 1);
+        ADD_FIELD32(pcss,0,8);
+        ADD_FIELD32(ipofld,8,1);
+        ADD_FIELD32(tuofld,9,1);
+        ADD_FIELD32(pcsd, 13,1);
     };
     RXCSUM rxcsum;
 
@@ -889,16 +774,16 @@
     {
         // 0x5008 RFCTL Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(iscsi_dis, 0, 1);
-        ADD_FIELD32(iscsi_dwc, 1, 5);
-        ADD_FIELD32(nfsw_dis, 6, 1);
-        ADD_FIELD32(nfsr_dis, 7, 1);
-        ADD_FIELD32(nfs_ver, 8, 2);
-        ADD_FIELD32(ipv6_dis, 10, 1);
-        ADD_FIELD32(ipv6xsum_dis, 11, 1);
-        ADD_FIELD32(ackdis, 13, 1);
-        ADD_FIELD32(ipfrsp_dis, 14, 1);
-        ADD_FIELD32(exsten, 15, 1);
+        ADD_FIELD32(iscsi_dis,0,1);
+        ADD_FIELD32(iscsi_dwc,1,5);
+        ADD_FIELD32(nfsw_dis,6,1);
+        ADD_FIELD32(nfsr_dis,7,1);
+        ADD_FIELD32(nfs_ver,8,2);
+        ADD_FIELD32(ipv6_dis,10,1);
+        ADD_FIELD32(ipv6xsum_dis,11,1);
+        ADD_FIELD32(ackdis,13,1);
+        ADD_FIELD32(ipfrsp_dis,14,1);
+        ADD_FIELD32(exsten,15,1);
     };
     RFCTL rfctl;
 
@@ -906,33 +791,33 @@
     {
         // 0x5820 MANC Register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(smbus, 0, 1);    // SMBus enabled #####
-        ADD_FIELD32(asf, 1, 1);      // ASF enabled #####
-        ADD_FIELD32(ronforce, 2, 1); // reset of force
-        ADD_FIELD32(rsvd, 3, 5);     // reserved
-        ADD_FIELD32(rmcp1, 8, 1);    // rcmp1 filtering
-        ADD_FIELD32(rmcp2, 9, 1);    // rcmp2 filtering
-        ADD_FIELD32(ipv4, 10, 1);     // enable ipv4
-        ADD_FIELD32(ipv6, 11, 1);     // enable ipv6
-        ADD_FIELD32(snap, 12, 1);     // accept snap
-        ADD_FIELD32(arp, 13, 1);      // filter arp #####
-        ADD_FIELD32(neighbor, 14, 1); // neighbor discovery
-        ADD_FIELD32(arp_resp, 15, 1); // arp response
-        ADD_FIELD32(tcorst, 16, 1);   // tco reset happened
-        ADD_FIELD32(rcvtco, 17, 1);   // receive tco enabled ######
-        ADD_FIELD32(blkphyrst, 18, 1);// block phy resets ########
-        ADD_FIELD32(rcvall, 19, 1);   // receive all
-        ADD_FIELD32(macaddrfltr, 20, 1); // mac address filtering ######
-        ADD_FIELD32(mng2host, 21, 1); // mng2 host packets #######
-        ADD_FIELD32(ipaddrfltr, 22, 1); // ip address filtering
-        ADD_FIELD32(xsumfilter, 23, 1); // checksum filtering
-        ADD_FIELD32(brfilter, 24, 1); // broadcast filtering
-        ADD_FIELD32(smbreq, 25, 1);   // smb request
-        ADD_FIELD32(smbgnt, 26, 1);   // smb grant
-        ADD_FIELD32(smbclkin, 27, 1); // smbclkin
-        ADD_FIELD32(smbdatain, 28, 1); // smbdatain
-        ADD_FIELD32(smbdataout, 29, 1); // smb data out
-        ADD_FIELD32(smbclkout, 30, 1); // smb clock out
+        ADD_FIELD32(smbus,0,1);    // SMBus enabled #####
+        ADD_FIELD32(asf,1,1);      // ASF enabled #####
+        ADD_FIELD32(ronforce,2,1); // reset of force
+        ADD_FIELD32(rsvd,3,5);     // reserved
+        ADD_FIELD32(rmcp1,8,1);    // rcmp1 filtering
+        ADD_FIELD32(rmcp2,9,1);    // rcmp2 filtering
+        ADD_FIELD32(ipv4,10,1);     // enable ipv4
+        ADD_FIELD32(ipv6,11,1);     // enable ipv6
+        ADD_FIELD32(snap,12,1);     // accept snap
+        ADD_FIELD32(arp,13,1);      // filter arp #####
+        ADD_FIELD32(neighbor,14,1); // neighbor discovery
+        ADD_FIELD32(arp_resp,15,1); // arp response
+        ADD_FIELD32(tcorst,16,1);   // tco reset happened
+        ADD_FIELD32(rcvtco,17,1);   // receive tco enabled ######
+        ADD_FIELD32(blkphyrst,18,1);// block phy resets ########
+        ADD_FIELD32(rcvall,19,1);   // receive all
+        ADD_FIELD32(macaddrfltr,20,1); // mac address filtering ######
+        ADD_FIELD32(mng2host,21,1); // mng2 host packets #######
+        ADD_FIELD32(ipaddrfltr,22,1); // ip address filtering
+        ADD_FIELD32(xsumfilter,23,1); // checksum filtering
+        ADD_FIELD32(brfilter,24,1); // broadcast filtering
+        ADD_FIELD32(smbreq,25,1);   // smb request
+        ADD_FIELD32(smbgnt,26,1);   // smb grant
+        ADD_FIELD32(smbclkin,27,1); // smbclkin
+        ADD_FIELD32(smbdatain,28,1); // smbdatain
+        ADD_FIELD32(smbdataout,29,1); // smb data out
+        ADD_FIELD32(smbclkout,30,1); // smb clock out
     };
     MANC manc;
 
@@ -940,9 +825,9 @@
     {
         // 0x5B50 SWSM register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(smbi, 0, 1); // Semaphone bit
-        ADD_FIELD32(swesmbi, 1, 1); // Software eeporm semaphore
-        ADD_FIELD32(wmng, 2, 1); // Wake MNG clock
+        ADD_FIELD32(smbi,0,1); // Semaphone bit
+        ADD_FIELD32(swesmbi, 1,1); // Software eeporm semaphore
+        ADD_FIELD32(wmng, 2,1); // Wake MNG clock
         ADD_FIELD32(reserved, 3, 29);
     };
     SWSM swsm;
@@ -951,12 +836,12 @@
     {
         // 0x5B54 FWSM register
         using Reg<uint32_t>::operator=;
-        ADD_FIELD32(eep_fw_semaphore, 0, 1);
-        ADD_FIELD32(fw_mode, 1, 3);
-        ADD_FIELD32(ide, 4, 1);
-        ADD_FIELD32(sol, 5, 1);
-        ADD_FIELD32(eep_roload, 6, 1);
-        ADD_FIELD32(reserved, 7, 8);
+        ADD_FIELD32(eep_fw_semaphore,0,1);
+        ADD_FIELD32(fw_mode, 1,3);
+        ADD_FIELD32(ide, 4,1);
+        ADD_FIELD32(sol, 5,1);
+        ADD_FIELD32(eep_roload, 6,1);
+        ADD_FIELD32(reserved, 7,8);
         ADD_FIELD32(fw_val_bit, 15, 1);
         ADD_FIELD32(reset_cnt, 16, 3);
         ADD_FIELD32(ext_err_ind, 19, 6);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/pktfifo.hh gem5-SALAM/src/dev/net/pktfifo.hh
--- gem5/src/dev/net/pktfifo.hh	2024-02-22 18:16:36.572743051 -0600
+++ gem5-SALAM/src/dev/net/pktfifo.hh	2024-02-22 18:17:15.096944455 -0600
@@ -64,8 +64,7 @@
     {
     }
 
-    void
-    clear()
+    void clear()
     {
         packet = NULL;
         number = 0;
@@ -121,8 +120,7 @@
 
     EthPacketPtr front() { return fifo.begin()->packet; }
 
-    bool
-    push(EthPacketPtr ptr)
+    bool push(EthPacketPtr ptr)
     {
         assert(ptr->length);
         assert(_reserved <= ptr->length);
@@ -139,8 +137,7 @@
         return true;
     }
 
-    void
-    pop()
+    void pop()
     {
         if (empty())
             return;
@@ -152,8 +149,7 @@
         fifo.pop_front();
     }
 
-    void
-    clear()
+    void clear()
     {
         for (iterator i = begin(); i != end(); ++i)
             i->clear();
@@ -162,8 +158,7 @@
         _reserved = 0;
     }
 
-    void
-    remove(iterator i)
+    void remove(iterator i)
     {
         if (i != fifo.begin()) {
             iterator prev = i;
@@ -182,16 +177,14 @@
 
     bool copyout(void *dest, unsigned offset, unsigned len);
 
-    int
-    countPacketsBefore(const_iterator i) const
+    int countPacketsBefore(const_iterator i) const
     {
         if (i == fifo.end())
             return 0;
         return i->number - fifo.begin()->number;
     }
 
-    int
-    countPacketsAfter(const_iterator i) const
+    int countPacketsAfter(const_iterator i) const
     {
         auto end = fifo.end();
         if (i == end)
@@ -199,8 +192,7 @@
         return (--end)->number - i->number;
     }
 
-    void
-    check() const
+    void check() const
     {
         unsigned total = 0;
         for (auto i = begin(); i != end(); ++i)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/sinic.cc gem5-SALAM/src/dev/net/sinic.cc
--- gem5/src/dev/net/sinic.cc	2024-02-22 18:25:43.859605909 -0600
+++ gem5-SALAM/src/dev/net/sinic.cc	2024-02-22 18:17:15.100944476 -0600
@@ -229,7 +229,7 @@
 
     prepareRead(cpu, index);
 
-    [[maybe_unused]] uint64_t value = 0;
+    GEM5_VAR_USED uint64_t value = 0;
     if (pkt->getSize() == 4) {
         uint32_t reg = regData32(raddr);
         pkt->setLE(reg);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/net/tcp_iface.cc gem5-SALAM/src/dev/net/tcp_iface.cc
--- gem5/src/dev/net/tcp_iface.cc	2024-02-22 18:16:36.572743051 -0600
+++ gem5-SALAM/src/dev/net/tcp_iface.cc	2024-02-22 18:17:15.100944476 -0600
@@ -254,7 +254,7 @@
 
 TCPIface::~TCPIface()
 {
-    [[maybe_unused]] int ret;
+    GEM5_VAR_USED int ret;
 
     ret = close(sock);
     assert(ret == 0);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/pci/copy_engine.cc gem5-SALAM/src/dev/pci/copy_engine.cc
--- gem5/src/dev/pci/copy_engine.cc	2024-02-22 18:16:36.572743051 -0600
+++ gem5-SALAM/src/dev/pci/copy_engine.cc	2024-02-22 18:17:15.100944476 -0600
@@ -310,19 +310,19 @@
     ///
 
     if (size == sizeof(uint64_t)) {
-        [[maybe_unused]] uint64_t val = pkt->getLE<uint64_t>();
+        GEM5_VAR_USED uint64_t val = pkt->getLE<uint64_t>();
         DPRINTF(DMACopyEngine, "Wrote device register %#X value %#X\n",
                 daddr, val);
     } else if (size == sizeof(uint32_t)) {
-        [[maybe_unused]] uint32_t val = pkt->getLE<uint32_t>();
+        GEM5_VAR_USED uint32_t val = pkt->getLE<uint32_t>();
         DPRINTF(DMACopyEngine, "Wrote device register %#X value %#X\n",
                 daddr, val);
     } else if (size == sizeof(uint16_t)) {
-        [[maybe_unused]] uint16_t val = pkt->getLE<uint16_t>();
+        GEM5_VAR_USED uint16_t val = pkt->getLE<uint16_t>();
         DPRINTF(DMACopyEngine, "Wrote device register %#X value %#X\n",
                 daddr, val);
     } else if (size == sizeof(uint8_t)) {
-        [[maybe_unused]] uint8_t val = pkt->getLE<uint8_t>();
+        GEM5_VAR_USED uint8_t val = pkt->getLE<uint8_t>();
         DPRINTF(DMACopyEngine, "Wrote device register %#X value %#X\n",
                 daddr, val);
     } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/reg_bank.hh gem5-SALAM/src/dev/reg_bank.hh
--- gem5/src/dev/reg_bank.hh	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/reg_bank.hh	2024-02-22 18:17:15.100944476 -0600
@@ -943,8 +943,8 @@
 
 // Delegate serialization to the individual RegisterBase subclasses.
 template <class T>
-struct ParseParam<T, std::enable_if_t<std::is_base_of_v<
-    typename RegisterBankBase::RegisterBaseBase, T>>>
+struct ParseParam<T, std::enable_if_t<std::is_base_of<
+    typename RegisterBankBase::RegisterBaseBase, T>::value>>
 {
     static bool
     parse(const std::string &s, T &value)
@@ -954,8 +954,8 @@
 };
 
 template <class T>
-struct ShowParam<T, std::enable_if_t<std::is_base_of_v<
-    typename RegisterBankBase::RegisterBaseBase, T>>>
+struct ShowParam<T, std::enable_if_t<std::is_base_of<
+    typename RegisterBankBase::RegisterBaseBase, T>::value>>
 {
     static void
     show(std::ostream &os, const T &value)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/riscv/clint.cc gem5-SALAM/src/dev/riscv/clint.cc
--- gem5/src/dev/riscv/clint.cc	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/riscv/clint.cc	2024-02-22 18:17:15.100944476 -0600
@@ -52,7 +52,6 @@
 Clint::Clint(const Params &params) :
     BasicPioDevice(params, params.pio_size),
     system(params.system),
-    nThread(params.num_threads),
     signal(params.name + ".signal", 0, this),
     registers(params.name + ".registers", params.pio_addr, this)
 {
@@ -195,6 +194,7 @@
 void
 Clint::init()
 {
+    nThread = system->threads.size();
     registers.init();
     BasicPioDevice::init();
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/riscv/Clint.py gem5-SALAM/src/dev/riscv/Clint.py
--- gem5/src/dev/riscv/Clint.py	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/riscv/Clint.py	2024-02-22 18:17:15.100944476 -0600
@@ -52,7 +52,6 @@
     cxx_class = 'gem5::Clint'
     int_pin = IntSinkPin('Pin to receive RTC signal')
     pio_size = Param.Addr(0xC000, "PIO Size")
-    num_threads = Param.Int("Number of threads in the system.")
 
     def generateDeviceTree(self, state):
         node = self.generateBasicPioDeviceNode(state, "clint", self.pio_addr,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/riscv/HiFive.py gem5-SALAM/src/dev/riscv/HiFive.py
--- gem5/src/dev/riscv/HiFive.py	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/riscv/HiFive.py	2024-02-22 18:17:15.100944476 -0600
@@ -112,6 +112,9 @@
     uart_int_id = Param.Int(0xa, "PLIC Uart interrupt ID")
     terminal = Terminal()
 
+    # Dummy param for generating devicetree
+    cpu_count = Param.Int(0, "dummy")
+
     def _on_chip_devices(self):
         """Returns a list of on-chip peripherals
         """
@@ -169,13 +172,6 @@
         for device in self._off_chip_devices():
             device.pio = bus.mem_side_ports
 
-    def setNumCores(self, num_cpu):
-        """ Sets the PLIC and CLINT to have the right number of threads and
-            contexts. Assumes that the cores have a single hardware thread.
-        """
-        self.plic.n_contexts = num_cpu * 2
-        self.clint.num_threads = num_cpu
-
     def generateDeviceTree(self, state):
         cpus_node = FdtNode("cpus")
         cpus_node.append(FdtPropertyWords("timebase-frequency", [10000000]))
@@ -193,8 +189,6 @@
 
         yield node
 
-    # For generating devicetree
-    _cpu_count = 0
     def annotateCpuDeviceNode(self, cpu, state):
         cpu.append(FdtPropertyStrings('mmu-type', 'riscv,sv48'))
         cpu.append(FdtPropertyStrings('status', 'okay'))
@@ -208,8 +202,8 @@
         int_node.appendCompatible("riscv,cpu-intc")
 
         cpus = self.system.unproxy(self).cpu
-        phandle = int_state.phandle(cpus[self._cpu_count])
-        self._cpu_count += 1
+        phandle = int_state.phandle(cpus[self.cpu_count])
+        self.cpu_count += 1
         int_node.append(FdtPropertyWords("phandle", [phandle]))
 
         cpu.append(int_node)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/riscv/plic.cc gem5-SALAM/src/dev/riscv/plic.cc
--- gem5/src/dev/riscv/plic.cc	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/riscv/plic.cc	2024-02-22 18:17:15.100944476 -0600
@@ -56,7 +56,6 @@
     BasicPioDevice(params, params.pio_size),
     system(params.system),
     nSrc(params.n_src),
-    nContext(params.n_contexts),
     registers(params.name, pioAddr, this),
     update([this]{updateOutput();}, name() + ".update")
 {
@@ -164,6 +163,8 @@
 void
 Plic::init()
 {
+    // Number of contexts
+    nContext = system->threads.size() * 2;
     // Number of 32-bit pending registesrs where
     // each bit correspondings to one interrupt source
     nSrc32 = divCeil(nSrc, 32);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/riscv/Plic.py gem5-SALAM/src/dev/riscv/Plic.py
--- gem5/src/dev/riscv/Plic.py	2024-02-22 18:25:43.867605951 -0600
+++ gem5-SALAM/src/dev/riscv/Plic.py	2024-02-22 18:17:15.100944476 -0600
@@ -51,8 +51,6 @@
     cxx_class = 'gem5::Plic'
     pio_size = Param.Addr(0x4000000, "PIO Size")
     n_src = Param.Int("Number of interrupt sources")
-    n_contexts = Param.Int("Number of interrupt contexts. Usually the number "
-                           "of threads * 2. One for M mode, one for S mode")
 
     def generateDeviceTree(self, state):
         node = self.generateBasicPioDeviceNode(state, "plic", self.pio_addr,
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/storage/ide_disk.cc gem5-SALAM/src/dev/storage/ide_disk.cc
--- gem5/src/dev/storage/ide_disk.cc	2024-02-22 18:25:43.871605972 -0600
+++ gem5-SALAM/src/dev/storage/ide_disk.cc	2024-02-22 18:17:15.104944497 -0600
@@ -687,7 +687,7 @@
         // Supported DMA commands
       case WDCC_WRITEDMA:
         dmaRead = true;  // a write to the disk is a DMA read from memory
-        [[fallthrough]];
+        GEM5_FALLTHROUGH;
       case WDCC_READDMA:
         if (!(cmdReg.drive & DRIVE_LBA_BIT))
             panic("Attempt to perform CHS access, only supports LBA\n");
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/virtio/base.hh gem5-SALAM/src/dev/virtio/base.hh
--- gem5/src/dev/virtio/base.hh	2024-02-22 18:16:36.580743093 -0600
+++ gem5-SALAM/src/dev/virtio/base.hh	2024-02-22 18:17:15.104944497 -0600
@@ -72,7 +72,7 @@
  */
 
 template <typename T>
-inline std::enable_if_t<std::is_same_v<T, vring_used_elem>, T>
+inline std::enable_if_t<std::is_same<T, vring_used_elem>::value, T>
 swap_byte(T v)
 {
     v.id = swap_byte(v.id);
@@ -81,7 +81,7 @@
 }
 
 template <typename T>
-inline std::enable_if_t<std::is_same_v<T, vring_desc>, T>
+inline std::enable_if_t<std::is_same<T, vring_desc>::value, T>
 swap_byte(T v)
 {
     v.addr = swap_byte(v.addr);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/dev/virtio/pci.cc gem5-SALAM/src/dev/virtio/pci.cc
--- gem5/src/dev/virtio/pci.cc	2024-02-22 18:16:36.580743093 -0600
+++ gem5-SALAM/src/dev/virtio/pci.cc	2024-02-22 18:17:15.104944497 -0600
@@ -69,7 +69,7 @@
 Tick
 PciVirtIO::read(PacketPtr pkt)
 {
-    [[maybe_unused]] const unsigned size(pkt->getSize());
+    GEM5_VAR_USED const unsigned size(pkt->getSize());
     int bar;
     Addr offset;
     if (!getBAR(pkt->getAddr(), bar, offset))
@@ -150,7 +150,7 @@
 Tick
 PciVirtIO::write(PacketPtr pkt)
 {
-    [[maybe_unused]] const unsigned size(pkt->getSize());
+    GEM5_VAR_USED const unsigned size(pkt->getSize());
     int bar;
     Addr offset;
     if (!getBAR(pkt->getAddr(), bar, offset))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/Doxyfile gem5-SALAM/src/Doxyfile
--- gem5/src/Doxyfile	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/Doxyfile	2024-02-22 18:17:14.968943786 -0600
@@ -31,7 +31,7 @@
 # This could be handy for archiving the generated documentation or 
 # if some version control system is used.
 
-PROJECT_NUMBER         = DEVELOP-FOR-V21-2
+PROJECT_NUMBER         = v21.1.0.1
 
 # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
 # base path where the generated documentation will be put. 
@@ -1285,7 +1285,7 @@
 # omitted =1 is assumed.
 
 PREDEFINED             = DOXYGEN_SHOULD_SKIP_THIS \
-                         IS_NULL_ISA
+                         THE_ISA
 
 # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
 # this tag can be used to specify a list of macro names that should be expanded. 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/doxygen/footer.html gem5-SALAM/src/doxygen/footer.html
--- gem5/src/doxygen/footer.html	2024-02-22 18:16:36.584743114 -0600
+++ gem5-SALAM/src/doxygen/footer.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,5 +0,0 @@
-<hr size="1"><address style="align: right;"><small>
-Generated on $datetime for $projectname by <a href="http://www.doxygen.org/index.html"> doxygen</a> $doxygenversion</small></address>
-
-</body>
-</html>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/doxygen/group_definitions.hh gem5-SALAM/src/doxygen/group_definitions.hh
--- gem5/src/doxygen/group_definitions.hh	2024-02-22 18:16:36.584743114 -0600
+++ gem5-SALAM/src/doxygen/group_definitions.hh	1969-12-31 18:00:00.000000000 -0600
@@ -1,151 +0,0 @@
-/**
- * @defgroup api_drain The Drain API.
- *
- * These methods relate to the "Drainable" interface.
- */
-
-/**
- * @defgroup api_serialize The Serialize API.
- *
- * These methods related to the "Serialize" interface.
- */
-
-/**
- * @defgroup api_eventq The Event Queue API.
- *
- * These methods relate to the event queue interface.
- */
-
-/**
- * @defgroup api_stats The Stats API.
- *
- * These methods relate to the statistics I/O interface.
- */
-
-/**
- * @defgroup api_simobject The SimObject API.
- *
- * These methods relate to the SimObject interface.
- */
-
-/**
- * @defgroup api_addr_range The AddrRange API.
- *
- * These methods relate to the AddrRange and AddrRangeMap interfaces.
- */
-
-/**
- * @defgroup api_atomic_op The AtomicOpFunctor API.
- *
- * These methods relate to the AtomicOpFunctor and the related interfaces.
- */
-
-/**
- * @defgroup api_bitfield The bit manipulating API.
- *
- * These are a collection of methods for bit manipulations.
- */
-
-/**
- * @defgroup api_bitunion The BitUnion API.
- *
- * These are a collection of methods and macros of the BitUnion system of
- * defining bitfields on top of an underlying class.
- */
-
-/**
- * @defgroup api_base_utils The utility functions and constants API.
- *
- * These are a collection of utility functions and constants defined in
- * src/base.
- */
-
-/**
- * @defgroup api_callback The CallbackQueue API.
- *
- * These methods relate to the CallbackQueue interface.
- */
-
-/**
- * @defgroup api_channel_addr The ChannelAddr and ChannelAddrRange API.
- *
- * These methods relate to the interface of ChannelAddr and ChannelAddrRange.
- */
-
-/**
- * @defgroup api_chunk_generator The ChunkGenerator API.
- *
- * These methods relate to the ChunkGenerator interface.
- */
-
-/**
- * @defgroup api_coroutine The Coroutine API.
- *
- * These methods relate to the Coroutine interface.
- */
-
-/**
- * @defgroup api_fiber The Fiber API.
- *
- * These methods relate to the Fiber interface.
- */
-
-/**
- * @defgroup api_flags The Flags API.
- *
- * These methods relate to the Flags interface.
- */
-
-/**
- * @defgroup api_inet The inet API.
- *
- * These methods relate to EthAddr, IpAddress, TCP, UDP interfaces.
- */
-
-/**
- * @defgroup api_logger The Logger API.
- *
- * These methods and macros provide access to gem5's logging system.
- */
-
-/**
- * @defgroup api_poll_event The PollEvent API.
- *
- * These methods relate to the PollEvent interface.
- */
-
-/**
- * @defgroup api_poll_queue The PollQueue API.
- *
- * These methods relate to the PollQueue interface.
- */
-
-/**
- * @defgroup api_remote_gdb The RemoteGDB API.
- *
- * These methods relate to the BaseRemoteGDB and BaseGdbRegCache interfaces.
- */
-
-/**
- * @defgroup api_sat_counter The SatCounter API.
- *
- * These methods relate to the SatCounter interface.
- */
-
-/**
- * @defgroup api_socket The Socket API.
- *
- * These methods relate to the Socket interface.
- */
-
-/**
- * @defgroup api_stl_helpers The C++ STL helpers API.
- *
- * These are methods providing additional functionality to C++ STL.
- */
-
-/**
- * @defgroup api_trace The Trace API.
- *
- * These methods relate to the selective debugging trace facility.
- */
Binary files gem5/src/doxygen/images/gem5_MS_Fig1.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig1.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig2.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig2.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig3.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig3.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig4.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig4.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig5.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig5.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig6.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig6.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig7.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig7.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig8.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig8.PNG differ
Binary files gem5/src/doxygen/images/gem5_MS_Fig9.PNG and gem5-SALAM/src/doxygen/images/gem5_MS_Fig9.PNG differ
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/doxygen/stl.hh gem5-SALAM/src/doxygen/stl.hh
--- gem5/src/doxygen/stl.hh	2024-02-22 18:16:36.584743114 -0600
+++ gem5-SALAM/src/doxygen/stl.hh	1969-12-31 18:00:00.000000000 -0600
@@ -1,66 +0,0 @@
-/*
- * Copyright (c) 2003-2005 The Regents of The University of Michigan
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met: redistributions of source code must retain the above copyright
- * notice, this list of conditions and the following disclaimer;
- * redistributions in binary form must reproduce the above copyright
- * notice, this list of conditions and the following disclaimer in the
- * documentation and/or other materials provided with the distribution;
- * neither the name of the copyright holders nor the names of its
- * contributors may be used to endorse or promote products derived from
- * this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-/**
- * @file
- * Dummy definitions of STL classes to pick up relationships in doxygen.
- */
-
-namespace std {
-
-/** STL vector class*/
-template <class T> class vector {
-  public:
-    /** Dummy Item */
-    T item;
-};
-
-/** STL deque class */
-template <class T> class deque {
-  public:
-    /** Dummy Item */
-    T item;
-};
-
-/** STL list class */
-template <class T> class list {
-  public:
-    /** Dummy Item */
-    T item;
-};
-
-/** STL pair class */
-template <class X, class Y> class pair {
-  public:
-    /** Dummy Item */
-    X item1;
-    /** Dummy Item */
-    Y item2;
-};
-
-}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/compute_unit.cc gem5-SALAM/src/gpu-compute/compute_unit.cc
--- gem5/src/gpu-compute/compute_unit.cc	2024-02-22 18:25:43.875605993 -0600
+++ gem5-SALAM/src/gpu-compute/compute_unit.cc	2024-02-22 18:17:15.108944518 -0600
@@ -355,7 +355,7 @@
     // set the wavefront context to have a pointer to this section of the LDS
     w->ldsChunk = ldsChunk;
 
-    [[maybe_unused]] int32_t refCount =
+    GEM5_VAR_USED int32_t refCount =
                 lds.increaseRefCounter(w->dispatchId, w->wgId);
     DPRINTF(GPUDisp, "CU%d: increase ref ctr wg[%d] to [%d]\n",
                     cu_id, w->wgId, refCount);
@@ -959,7 +959,7 @@
 
     for (int i = 0; i < len; ++i) {
         PacketPtr pkt = retries.front().first;
-        [[maybe_unused]] GPUDynInstPtr gpuDynInst = retries.front().second;
+        GEM5_VAR_USED GPUDynInstPtr gpuDynInst = retries.front().second;
         DPRINTF(GPUMem, "CU%d: WF[%d][%d]: retry mem inst addr %#x\n",
                 computeUnit->cu_id, gpuDynInst->simdId, gpuDynInst->wfSlotId,
                 pkt->req->getPaddr());
@@ -993,7 +993,7 @@
 
     for (int i = 0; i < len; ++i) {
         PacketPtr pkt = retries.front().first;
-        [[maybe_unused]] Wavefront *wavefront = retries.front().second;
+        GEM5_VAR_USED Wavefront *wavefront = retries.front().second;
         DPRINTF(GPUFetch, "CU%d: WF[%d][%d]: retrying FETCH addr %#x\n",
                 computeUnit->cu_id, wavefront->simdId, wavefront->wfSlotId,
                 pkt->req->getPaddr());
@@ -1405,7 +1405,7 @@
         DTLBPort::SenderState *sender_state =
             safe_cast<DTLBPort::SenderState*>(translation_state->saved);
 
-        [[maybe_unused]] Wavefront *w =
+        GEM5_VAR_USED Wavefront *w =
             computeUnit->wfList[sender_state->_gpuDynInst->simdId]
             [sender_state->_gpuDynInst->wfSlotId];
 
@@ -1574,7 +1574,7 @@
 {
     SenderState *sender_state = safe_cast<SenderState*>(pkt->senderState);
     GPUDynInstPtr gpuDynInst = sender_state->_gpuDynInst;
-    [[maybe_unused]] ComputeUnit *compute_unit = computeUnit;
+    GEM5_VAR_USED ComputeUnit *compute_unit = computeUnit;
 
     if (!(sendTimingReq(pkt))) {
         retries.push_back(std::make_pair(pkt, gpuDynInst));
@@ -1603,7 +1603,7 @@
 {
     SenderState *sender_state = safe_cast<SenderState*>(pkt->senderState);
     GPUDynInstPtr gpuDynInst = sender_state->_gpuDynInst;
-    [[maybe_unused]] ComputeUnit *compute_unit = scalarDataPort.computeUnit;
+    GEM5_VAR_USED ComputeUnit *compute_unit = scalarDataPort.computeUnit;
 
     if (!(scalarDataPort.sendTimingReq(pkt))) {
         scalarDataPort.retries.push_back(pkt);
@@ -1643,7 +1643,7 @@
 
     for (int i = 0; i < len; ++i) {
         PacketPtr pkt = retries.front();
-        [[maybe_unused]] Addr vaddr = pkt->req->getVaddr();
+        GEM5_VAR_USED Addr vaddr = pkt->req->getVaddr();
         DPRINTF(GPUTLB, "CU%d: retrying D-translaton for address%#x", vaddr);
 
         if (!sendTimingReq(pkt)) {
@@ -1682,7 +1682,7 @@
     GPUDynInstPtr gpuDynInst = sender_state->_gpuDynInst;
     delete pkt->senderState;
 
-    [[maybe_unused]] Wavefront *w = gpuDynInst->wavefront();
+    GEM5_VAR_USED Wavefront *w = gpuDynInst->wavefront();
 
     DPRINTF(GPUTLB, "CU%d: WF[%d][%d][wv=%d]: scalar DTLB port received "
         "translation: PA %#x -> %#x\n", computeUnit->cu_id, w->simdId,
@@ -1721,7 +1721,7 @@
 bool
 ComputeUnit::ITLBPort::recvTimingResp(PacketPtr pkt)
 {
-    [[maybe_unused]] Addr line = pkt->req->getPaddr();
+    GEM5_VAR_USED Addr line = pkt->req->getPaddr();
     DPRINTF(GPUTLB, "CU%d: ITLBPort received %#x->%#x\n",
             computeUnit->cu_id, pkt->req->getVaddr(), line);
 
@@ -1787,7 +1787,7 @@
 
     for (int i = 0; i < len; ++i) {
         PacketPtr pkt = retries.front();
-        [[maybe_unused]] Addr vaddr = pkt->req->getVaddr();
+        GEM5_VAR_USED Addr vaddr = pkt->req->getVaddr();
         DPRINTF(GPUTLB, "CU%d: retrying I-translaton for address%#x", vaddr);
 
         if (!sendTimingReq(pkt)) {
@@ -2040,7 +2040,7 @@
             dynamic_cast<ComputeUnit::LDSPort::SenderState*>(pkt->senderState);
     fatal_if(!sender_state, "packet without a valid sender state");
 
-    [[maybe_unused]] GPUDynInstPtr gpuDynInst = sender_state->getMemInst();
+    GEM5_VAR_USED GPUDynInstPtr gpuDynInst = sender_state->getMemInst();
 
     if (isStalled()) {
         fatal_if(retries.empty(), "must have retries waiting to be stalled");
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/compute_unit.hh gem5-SALAM/src/gpu-compute/compute_unit.hh
--- gem5/src/gpu-compute/compute_unit.hh	2024-02-22 18:25:43.875605993 -0600
+++ gem5-SALAM/src/gpu-compute/compute_unit.hh	2024-02-22 18:17:15.108944518 -0600
@@ -479,7 +479,7 @@
     int32_t
     getRefCounter(const uint32_t dispatchId, const uint32_t wgId) const;
 
-    [[nodiscard]] bool sendToLds(GPUDynInstPtr gpuDynInst);
+    GEM5_NO_DISCARD bool sendToLds(GPUDynInstPtr gpuDynInst);
 
     typedef std::unordered_map<Addr, std::pair<int, int>> pageDataStruct;
     pageDataStruct pageAccesses;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/gpu_command_processor.cc gem5-SALAM/src/gpu-compute/gpu_command_processor.cc
--- gem5/src/gpu-compute/gpu_command_processor.cc	2024-02-22 18:25:43.875605993 -0600
+++ gem5-SALAM/src/gpu-compute/gpu_command_processor.cc	2024-02-22 18:17:15.108944518 -0600
@@ -39,10 +39,7 @@
 #include "debug/GPUCommandProc.hh"
 #include "debug/GPUKernelInfo.hh"
 #include "gpu-compute/dispatcher.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 #include "params/GPUCommandProcessor.hh"
-#include "sim/full_system.hh"
 #include "sim/process.hh"
 #include "sim/proxy_ptr.hh"
 #include "sim/syscall_emul_buf.hh"
@@ -109,10 +106,7 @@
      * space to pull out the kernel code descriptor.
      */
     auto *tc = sys->threads[0];
-
-    TranslatingPortProxy fs_proxy(tc);
-    SETranslatingPortProxy se_proxy(tc);
-    PortProxy &virt_proxy = FullSystem ? fs_proxy : se_proxy;
+    auto &virt_proxy = tc->getVirtProxy();
 
     /**
      * The kernel_object is a pointer to the machine code, whose entry
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/gpu_compute_driver.cc gem5-SALAM/src/gpu-compute/gpu_compute_driver.cc
--- gem5/src/gpu-compute/gpu_compute_driver.cc	2024-02-22 18:25:43.875605993 -0600
+++ gem5-SALAM/src/gpu-compute/gpu_compute_driver.cc	2024-02-22 18:17:15.108944518 -0600
@@ -47,10 +47,7 @@
 #include "gpu-compute/gpu_command_processor.hh"
 #include "gpu-compute/shader.hh"
 #include "mem/port_proxy.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 #include "params/GPUComputeDriver.hh"
-#include "sim/full_system.hh"
 #include "sim/process.hh"
 #include "sim/syscall_emul_buf.hh"
 
@@ -224,9 +221,7 @@
 int
 GPUComputeDriver::ioctl(ThreadContext *tc, unsigned req, Addr ioc_buf)
 {
-    TranslatingPortProxy fs_proxy(tc);
-    SETranslatingPortProxy se_proxy(tc);
-    PortProxy &virt_proxy = FullSystem ? fs_proxy : se_proxy;
+    auto &virt_proxy = tc->getVirtProxy();
     auto process = tc->getProcessPtr();
     auto mem_state = process->memState;
 
@@ -728,7 +723,7 @@
 
             assert(isdGPU || gfxVersion == GfxVersion::gfx902);
             assert((args->va_addr % TheISA::PageBytes) == 0);
-            [[maybe_unused]] Addr mmap_offset = 0;
+            GEM5_VAR_USED Addr mmap_offset = 0;
 
             Request::CacheCoherenceFlags mtype = defaultMtype;
             Addr pa_addr = 0;
@@ -836,7 +831,7 @@
             // of the region.
             //
             // This is a simplified version of regular system VMAs, but for
-            // GPUVM space (none of the clobber/remap nonsense we find in real
+            // GPUVM space (non of the clobber/remap nonsense we find in real
             // OS managed memory).
             allocateGpuVma(mtype, args->va_addr, args->size);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/gpu_tlb.cc gem5-SALAM/src/gpu-compute/gpu_tlb.cc
--- gem5/src/gpu-compute/gpu_tlb.cc	2024-02-22 18:25:43.879606014 -0600
+++ gem5-SALAM/src/gpu-compute/gpu_tlb.cc	2024-02-22 18:17:15.108944518 -0600
@@ -424,7 +424,7 @@
     {
         uint32_t flags = req->getFlags();
         int seg = flags & SegmentFlagMask;
-        bool storeCheck = flags & Request::READ_MODIFY_WRITE;
+        bool storeCheck = flags & (StoreCheck << FlagShift);
 
         // If this is true, we're dealing with a request
         // to a non-memory address space.
@@ -764,7 +764,7 @@
     {
         HandyM5Reg m5Reg = tc->readMiscRegNoEffect(MISCREG_M5_REG);
         uint32_t flags = pkt->req->getFlags();
-        bool storeCheck = flags & Request::READ_MODIFY_WRITE;
+        bool storeCheck = flags & (StoreCheck << FlagShift);
 
         // Do paging protection checks.
         bool inUser
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/schedule_stage.cc gem5-SALAM/src/gpu-compute/schedule_stage.cc
--- gem5/src/gpu-compute/schedule_stage.cc	2024-02-22 18:25:43.879606014 -0600
+++ gem5-SALAM/src/gpu-compute/schedule_stage.cc	2024-02-22 18:17:15.112944539 -0600
@@ -767,7 +767,7 @@
                 // that we've reserved a global and local memory unit. Thus,
                 // we need to mark the latter execution unit as not available.
                 if (execUnitIds.size() > 1) {
-                    [[maybe_unused]] int lm_exec_unit = wf->localMem;
+                    GEM5_VAR_USED int lm_exec_unit = wf->localMem;
                     assert(toExecute.dispatchStatus(lm_exec_unit)
                            == SKIP);
                 }
@@ -776,7 +776,7 @@
                 // Verify the GM pipe for this wave is ready to execute
                 // and the wave in the GM pipe is the same as the wave
                 // in the LM pipe
-                [[maybe_unused]] int gm_exec_unit = wf->globalMem;
+                GEM5_VAR_USED int gm_exec_unit = wf->globalMem;
                 assert(wf->wfDynId == toExecute
                        .readyInst(gm_exec_unit)->wfDynId);
                 assert(toExecute.dispatchStatus(gm_exec_unit)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/gpu-compute/X86GPUTLB.py gem5-SALAM/src/gpu-compute/X86GPUTLB.py
--- gem5/src/gpu-compute/X86GPUTLB.py	2024-02-22 18:25:43.875605993 -0600
+++ gem5-SALAM/src/gpu-compute/X86GPUTLB.py	2024-02-22 18:17:15.108944518 -0600
@@ -36,6 +36,13 @@
 from m5.objects.ClockedObject import ClockedObject
 from m5.SimObject import SimObject
 
+if buildEnv.get('FULL_SYSTEM', False):
+    class X86PagetableWalker(SimObject):
+        type = 'X86PagetableWalker'
+        cxx_class = 'gem5::X86ISA::Walker'
+        port = ResponsePort("Port for the hardware table walker")
+        system = Param.System(Parent.any, "system object")
+
 class X86GPUTLB(ClockedObject):
     type = 'X86GPUTLB'
     cxx_class = 'gem5::X86ISA::GpuTLB'
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/acc_cluster.cc gem5-SALAM/src/hwacc/acc_cluster.cc
--- gem5/src/hwacc/acc_cluster.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/acc_cluster.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,27 @@
+//------------------------------------------//
+#include "hwacc/acc_cluster.hh"
+//------------------------------------------//
+
+AccCluster::AccCluster(const AccClusterParams &p)
+    : Platform(p), system(p.system), gic(nullptr)
+{}
+
+void
+AccCluster::postConsoleInt()
+{
+    warn_once("Don't know what interrupt to post for console.\n");
+    //panic("Need implementation\n");
+}
+
+void
+AccCluster::clearConsoleInt()
+{
+    warn_once("Don't know what interrupt to clear for console.\n");
+    //panic("Need implementation\n");
+}
+
+// AccCluster *
+// AccClusterParams::create()
+// {
+//     return new AccCluster(this);
+// }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/acc_cluster.hh gem5-SALAM/src/hwacc/acc_cluster.hh
--- gem5/src/hwacc/acc_cluster.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/acc_cluster.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,45 @@
+#ifndef __HWACC_ACC_CLUSTER_HH__
+#define __HWACC_ACC_CLUSTER_HH__
+//------------------------------------------//
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "dev/platform.hh"
+#include "params/AccCluster.hh"
+//------------------------------------------//
+using namespace gem5;
+
+class BaseGic;
+class IdeController;
+class System;
+
+class AccCluster : public Platform
+{
+  public:
+    /** Pointer to the system */
+    gem5::System *system;
+
+    BaseGic *gic;
+
+  public:
+    // typedef AccClusterParams Params;
+    // const Params *
+    // params() const {
+    //     return dynamic_cast<const Params *>(_params);
+    // }
+    /**
+     * Constructor for the Tsunami Class.
+     * @param name name of the object
+     * @param s system the object belongs to
+     * @param intctrl pointer to the interrupt controller
+     */
+    PARAMS(AccCluster);
+    AccCluster(const AccClusterParams &p);
+
+    /** Give platform a pointer to interrupt controller */
+    void setGic(BaseGic *_gic) { gic = _gic; }
+
+  public: // Public Platform interfaces
+    void postConsoleInt() override;
+    void clearConsoleInt() override;
+};
+
+#endif
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/AccCluster.py gem5-SALAM/src/hwacc/AccCluster.py
--- gem5/src/hwacc/AccCluster.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/AccCluster.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,85 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.Device import BasicPioDevice, PioDevice, IsaFake, BadAddr, DmaDevice
+from m5.objects.Platform import Platform
+from m5.objects.SimpleMemory import SimpleMemory
+from m5.objects.SubSystem import SubSystem
+from m5.objects.XBar import *
+from m5.objects.Bridge import Bridge
+from m5.objects.Cache import Cache
+from m5.objects.CommInterface import CommInterface
+from m5.objects.NoncoherentDma import NoncoherentDma
+from m5.objects.StreamDma import StreamDma
+
+class ClusterCache(Cache):
+    assoc = 8
+    tag_latency = 20
+    data_latency = 20
+    response_latency = 20
+    mshrs = 20
+    tgts_per_mshr = 12
+    write_buffers = 8
+
+class AccCluster(Platform):
+    type = 'AccCluster'
+    cxx_header = "hwacc/acc_cluster.hh"
+    system = Param.System(Parent.any, "system")
+
+    # System Cache Parameter
+    cache_size = Param.String('32kB', "cache size in bytes")
+    local_range_min = Param.Unsigned(0x2f000000, "minimal address of local range")
+    local_range_max = Param.Unsigned(0x7fffffff, "maximum address of local range")
+    external_range_low_min = Param.Unsigned(0x00000000, "minimal address of external range low")
+    external_range_low_max = Param.Unsigned(0x2effffff, "maximum address of external range low")
+    external_range_hi_min = Param.Unsigned(0x80000000, "minimal address of external range high")
+    external_range_hi_max = Param.Unsigned(0xffffffff, "maximum address of external range high")
+
+    local_bus = NoncoherentXBar(width=2, frontend_latency=1, forward_latency=0, response_latency=1)
+    coherency_bus = CoherentXBar(width=2, frontend_latency=1, forward_latency=0, response_latency=1)
+    coherency_bus.snoop_filter = SnoopFilter()
+    coherency_bus.snoop_response_latency = 4
+    coherency_bus.point_of_coherency = True
+    coherency_bus.point_of_unification = True
+
+    def _add_spm(self, spm_range, spm_latency):
+        self.spm = SimpleMemory(range=spm_range, conf_table_reported=False, latency=spm_latency)
+        self.spm.port = self.local_bus.master
+
+    def _connect_spm(self, spm):
+        spm.port = self.local_bus.master
+
+    def _attach_bridges(self, system, mem_range, ext_ranges):
+        self.mem2cls = Bridge(delay='1ns', ranges = mem_range)
+        self.mem2cls.master = self.local_bus.slave
+        self.mem2cls.slave = system.membus.master
+
+        # self.cls2mem = Bridge(delay='1ns', ranges = ext_ranges)
+        # self.cls2mem.master = system.membus.slave
+        # self.cls2mem.slave = self.local_bus.master
+
+    def _connect_hwacc(self, hwacc):
+        hwacc.pio = self.local_bus.master
+
+    def _connect_caches(self, system, options, l2coherent, cache_size=0):
+        if options.acc_cache and (cache_size!=0):
+            self.cluster_cache = ClusterCache()
+            self.cluster_cache.size = cache_size
+
+            if options.l2cache and l2coherent:
+                self.cluster_cache.mem_side = system.tol2bus.slave
+            else:
+                self.cluster_cache.mem_side = system.membus.slave
+            self.coherency_bus.master = self.cluster_cache.cpu_side
+        else:
+            if options.l2cache and l2coherent:
+                self.coherency_bus.master = system.tol2bus.slave
+            else:
+                self.coherency_bus.master = system.membus.slave
+
+    def _connect_dma(self, system, dma):
+        dma.pio = self.local_bus.master
+        dma.dma = self.coherency_bus.slave
+
+    def _connect_cluster_dma(self, system, dma):
+        self._connect_dma(system, dma)
+        dma.cluster_dma = self.local_bus.slave
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/comm_interface.cc gem5-SALAM/src/hwacc/comm_interface.cc
--- gem5/src/hwacc/comm_interface.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/comm_interface.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,982 @@
+#include "hwacc/comm_interface.hh"
+#include "base/trace.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+#include "sim/system.hh"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <iomanip>
+
+using namespace std;
+
+/***************************************************************************************
+ * CommInterface serves as the general system interface for hardware accelerators. It
+ * provides a set of memory-mapped registers, as well as master ports for accessing
+ * both local busses/SPMs and system memory.
+ **************************************************************************************/
+CommInterface::CommInterface(const CommInterfaceParams &p) :
+    BasicPioDevice(p, p.pio_size),
+    io_addr(p.pio_addr),
+    io_size(p.pio_size),
+    flag_size(p.flags_size),
+    config_size(p.config_size),
+    devname(p.devicename),
+    gic(p.gic),
+    int_num(p.int_num),
+    use_premap_data(p.premap_data),
+    endian(p.system->getGuestByteOrder()),
+    debugEnabled(p.enable_debug_msgs),
+    masterId(p.system->getRequestorId(this,name())),
+    tickEvent(this),
+    cacheLineSize(p.cache_line_size),
+    clock_period(p.clock_period),
+    reset_spm(p.reset_spm) {
+    processDelay = 1000 * clock_period;
+    FLAG_OFFSET = 0;
+    CONFIG_OFFSET = flag_size;
+    VAR_OFFSET = CONFIG_OFFSET + config_size;
+    processingDone = false;
+    computationNeeded = false;
+    int_flag = false;
+
+    mmreg = new uint8_t[io_size];
+    for(int i = 0; i < io_size; i++) {
+        mmreg[i] = 0;
+    }
+    cu = nullptr;
+
+    if (use_premap_data) {
+        for (auto i = 0; i < p.data_bases.size(); i++) {
+            data_base_ptrs.push_back(p.data_bases[i]);
+        }
+    }
+}
+
+bool
+CommInterface::MemSidePort::recvTimingResp(PacketPtr pkt) {
+    owner->recvPacket(pkt);
+    return true;
+}
+
+void
+CommInterface::MemSidePort::recvReqRetry() {
+    assert(outstandingPkts.size());
+
+    if (debug()) DPRINTF(CommInterface, "Got a retry...\n");
+    while (outstandingPkts.size() && sendTimingReq(outstandingPkts.front())) {
+        if (debug()) DPRINTF(CommInterface, "Unblocked, sent blocked packet.\n");
+        outstandingPkts.pop();
+        // TODO: This should just signal the engine that the packet completed
+        // engine should schedule tick as necessary. Need a test case
+        if (!owner->tickEvent.scheduled()) {
+            owner->schedule(owner->tickEvent, curTick() + owner->processDelay);
+            //owner->schedule(owner->tickEvent, owner->nextCycle());
+        }
+    }
+}
+
+void
+CommInterface::MemSidePort::sendPacket(PacketPtr pkt) {
+    if (isStalled() || !sendTimingReq(pkt)) {
+        if (debug()) DPRINTF(CommInterface, "sendTiming failed in sendPacket(pkt->req->getPaddr()=0x%x)\n", (unsigned int)pkt->req->getPaddr());
+        setStalled(pkt);
+    }
+}
+
+bool
+CommInterface::SPMPort::recvTimingResp(PacketPtr pkt) {
+    owner->recvPacket(pkt);
+    return true;
+}
+
+void
+CommInterface::SPMPort::recvReqRetry() {
+    assert(outstandingPkts.size());
+
+    if (debug()) DPRINTF(CommInterface, "Got a retry...\n");
+    while (outstandingPkts.size() && sendTimingReq(outstandingPkts.front())) {
+        if (debug()) DPRINTF(CommInterface, "Unblocked, sent blocked packet.\n");
+        outstandingPkts.pop();
+        // TODO: This should just signal the engine that the packet completed
+        // engine should schedule tick as necessary. Need a test case
+        if (!owner->tickEvent.scheduled()) {
+            owner->schedule(owner->tickEvent, curTick() + owner->processDelay);
+            //owner->schedule(owner->tickEvent, owner->nextCycle());
+        }
+    }
+}
+
+void
+CommInterface::SPMPort::sendPacket(PacketPtr pkt) {
+    if (isStalled() || !sendTimingReq(pkt)) {
+        if (debug()) DPRINTF(CommInterface, "sendTiming failed in sendPacket(pkt->req->getPaddr()=0x%x)\n", (unsigned int)pkt->req->getPaddr());
+        setStalled(pkt);
+    }
+}
+
+bool
+CommInterface::RegPort::recvTimingResp(PacketPtr pkt) {
+    owner->recvPacket(pkt);
+    return true;
+}
+
+void
+CommInterface::RegPort::recvReqRetry() {
+    panic("We should not be receiving retries from Register Banks.\n");
+}
+
+void
+CommInterface::RegPort::sendPacket(PacketPtr pkt) {
+    sendTimingReq(pkt);
+}
+
+void
+CommInterface::recvPacket(PacketPtr pkt) {
+	if (pkt->isRead()) {
+        MemoryRequest * readReq = findMemRequest(pkt, true);
+        RequestPort * carrier = readReq->getCarrierPort();
+        if (MemSidePort * port = dynamic_cast<MemSidePort *>(carrier)) port->readReq = nullptr;
+        if (SPMPort * port = dynamic_cast<SPMPort *>(carrier)) port->readReq = nullptr;
+        if (debug()) DPRINTF(CommInterface, "Done with a read. addr: 0x%x, size: %d\n", pkt->req->getPaddr(), pkt->getSize());
+        pkt->writeData(readReq->buffer + (pkt->req->getPaddr() - readReq->beginAddr));
+        if (debug()) DPRINTF(CommInterface, "Read:%s\n", readReq->printBuffer());
+        for (int i = pkt->req->getPaddr() - readReq->beginAddr;
+             i < pkt->req->getPaddr() - readReq->beginAddr + pkt->getSize(); i++)\
+        {
+            readReq->readsDone[i] = true;
+        }
+
+        // mark readDone as only the contiguous region
+        while (readReq->readDone < readReq->totalLength && readReq->readsDone[readReq->readDone])
+        {
+            readReq->readDone++;
+        }
+
+        if (!readReq->needToRead)
+        {
+            if (debug()) DPRINTF(CommInterface, "Done reading \n");
+            cu->readCommit(readReq);
+            if (debug()) DPRINTF(CommInterface, "Clearing Request \n");
+            clearMemRequest(readReq, true);
+            delete readReq;
+        } else {
+            readQueue.push_front(readReq);
+            clearMemRequest(readReq, true); // Clear the request from the in-flight queue
+        }
+    } else if (pkt->isWrite()) {
+        MemoryRequest * writeReq = findMemRequest(pkt, false);
+        RequestPort * carrier = writeReq->getCarrierPort();
+        if (MemSidePort * port = dynamic_cast<MemSidePort *>(carrier)) port->writeReq = nullptr;
+        if (SPMPort * port = dynamic_cast<SPMPort *>(carrier)) port->writeReq = nullptr;
+        if (debug()) DPRINTF(CommInterface, "Done with a write. addr: 0x%x, size: %d\n", pkt->req->getPaddr(), pkt->getSize());
+        writeReq->writeDone += pkt->getSize();
+        if (!(writeReq->needToWrite)) {
+            if (debug()) DPRINTF(CommInterface, "Done writing\n");
+            cu->writeCommit(writeReq);
+            // delete[] writeReq->buffer;
+            // delete[] writeReq->readsDone;
+            clearMemRequest(writeReq, false);
+            delete writeReq;
+        } else {
+            writeQueue.push_front(writeReq);
+            clearMemRequest(writeReq, false); // Clear the request from the in-flight queue
+        }
+    } else {
+        panic("Something went very wrong!");
+    }
+    if (!tickEvent.scheduled())
+    {
+        schedule(tickEvent, curTick() + processDelay);
+        //schedule(tickEvent, nextCycle());
+    }
+    //if (pkt->req) delete pkt->req;
+    delete pkt;
+}
+
+void
+CommInterface::checkMMR() {
+    if (!computationNeeded) {
+        if (debug()) DPRINTF(CommInterface, "Checking MMR to see if Run bit set\n");
+        if (*mmreg & 0x01) {
+            *mmreg &= 0xfe;
+            *mmreg |= 0x02;
+            computationNeeded = true;
+            cu->initialize();
+        }
+
+        if (processingDone && !tickEvent.scheduled()) {
+            processingDone = false;
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    }
+}
+
+bool
+CommInterface::inStreamRange(Addr add) {
+    for (auto port : streamPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+bool
+CommInterface::inSPMRange(Addr add) {
+    for (auto port : spmPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+bool
+CommInterface::inRegRange(Addr add) {
+    for (auto port : regPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+bool
+CommInterface::inLocalRange(Addr add) {
+    for (auto port : localPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+bool
+CommInterface::inGlobalRange(Addr add) {
+    for (auto port : globalPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+CommInterface::MemSidePort *
+CommInterface::getValidLocalPort(Addr add, bool read) {
+    for (auto port : localPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add) && !(port->isStalled())) {
+                if ((read && !(port->readReq)) || (!read && !(port->writeReq))) {
+                    return port;
+                }
+            }
+        }
+    }
+    return nullptr;
+}
+
+CommInterface::MemSidePort *
+CommInterface::getValidGlobalPort(Addr add, bool read) {
+    for (auto port : globalPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add) && !(port->isStalled())) {
+                if ((read && !(port->readReq)) || (!read && !(port->writeReq))) {
+                    return port;
+                }
+            }
+        }
+    }
+    return nullptr;
+}
+
+CommInterface::MemSidePort *
+CommInterface::getValidStreamPort(Addr add, size_t len, bool read) {
+    for (auto port : streamPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add) && !(port->isStalled())) {
+                if (((read && !(port->readReq)) || (!read && !(port->writeReq))) && port->streamValid(len, read)) {
+                    return port;
+                }
+            }
+        }
+    }
+    return nullptr;
+}
+
+CommInterface::SPMPort *
+CommInterface::getValidSPMPort(Addr add, size_t len, bool read) {
+    for (auto port : spmPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add) && !(port->isStalled())) {
+                if (((read && !(port->readReq)) || (!read && !(port->writeReq)))) {
+                    if (port->canAccess(add, len, read))
+                        return port;
+                }
+            }
+        }
+    }
+    return nullptr;
+}
+
+CommInterface::RegPort *
+CommInterface::getValidRegPort(Addr add) {
+    for (auto port : regPorts) {
+        AddrRangeList adl = port->getAddrRanges();
+        for (auto address : adl) {
+            if (address.contains(add)) {
+                return port;
+            }
+        }
+    }
+    return nullptr;
+}
+
+void
+CommInterface::processMemoryRequests() {
+    if (!allPortsStalled()) {
+        if (debug()) DPRINTF(CommInterface, "Checking read requests. %d requests in queue.\n", readQueue.size());
+        for (auto it=readQueue.begin(); it!=readQueue.end(); ) {
+            Addr address = (*it)->currentReadAddr;
+            if (debug()) DPRINTF(CommInterfaceQueues, "Request Address: %lx\n", address);
+            RequestPort * mport;
+            if (inStreamRange(address)) {
+                mport = getValidStreamPort(address, (*it)->readLeft, true);
+            } else if (inSPMRange(address)) {
+                mport = getValidSPMPort(address, (*it)->readLeft, true);
+            } else if (inLocalRange(address)) {
+                mport = getValidLocalPort(address, true);
+            } else if (inGlobalRange(address)) {
+                mport = getValidGlobalPort(address, true);
+            } else {
+                panic("Address %lx is not reachable by any ports\n", address);
+            }
+            if (SPMPort * port = dynamic_cast<SPMPort *>(mport)) {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found available memory port\n");
+                port->readReq = (*it);
+                port->readReq->setCarrierPort(port);
+                it = readQueue.erase(it);
+                if (port->readReq && port->readReq->needToRead) {
+                    if (debug()) DPRINTF(CommInterfaceQueues, "Trying read on available memory port\n");
+                    tryRead(port);
+                    accRdQ.push_back(port->readReq);
+                    // if (!port->readReq->needToRead)
+                    //     port->readReq = NULL;
+                }
+            } else if (MemSidePort * port = dynamic_cast<MemSidePort *>(mport)) {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found available memory port\n");
+                port->readReq = (*it);
+                port->readReq->setCarrierPort(port);
+                it = readQueue.erase(it);
+                if (port->readReq && port->readReq->needToRead) {
+                    if (debug()) DPRINTF(CommInterfaceQueues, "Trying read on available memory port\n");
+                    tryRead(port);
+                    accRdQ.push_back(port->readReq);
+                    // if (!port->readReq->needToRead)
+                    //     port->readReq = NULL;
+                }
+            } else {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found no ports able to read %d bytes from %lx\n", (*it)->length, address);
+                ++it;
+            }
+        }
+        if (debug()) DPRINTF(CommInterface, "Checking write requests. %d requests in queue.\n", writeQueue.size());
+        for (auto it=writeQueue.begin(); it!=writeQueue.end(); ) {
+            Addr address = (*it)->currentWriteAddr;
+            if (debug()) DPRINTF(CommInterfaceQueues, "Request Address: %lx\n", address);
+            RequestPort * mport;
+            if (inStreamRange(address)) {
+                mport = getValidStreamPort(address, (*it)->writeLeft, false);
+            } else if (inSPMRange(address)) {
+                mport = getValidSPMPort(address, (*it)->writeLeft, false);
+            } else if (inLocalRange(address)) {
+                mport = getValidLocalPort(address, false);
+            } else if (inGlobalRange(address)) {
+                mport = getValidGlobalPort(address, false);
+            } else {
+                panic("Address %lx is not reachable by any ports\n", address);
+            }
+            if (SPMPort * port = dynamic_cast<SPMPort*>(mport)) {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found available memory port\n");
+                port->writeReq = (*it);
+                port->writeReq->setCarrierPort(port);
+                it = writeQueue.erase(it);
+                if (port->writeReq && port->writeReq->needToWrite) {
+                    if (debug()) DPRINTF(CommInterfaceQueues, "Trying write on available memory port\n");
+                    tryWrite(port);
+                    accWrQ.push_back(port->writeReq);
+                    // if (!port->writeReq->needToWrite)
+                    //     port->writeReq = NULL;
+                }
+            } else if (MemSidePort * port = dynamic_cast<MemSidePort*>(mport)) {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found available memory port\n");
+                port->writeReq = (*it);
+                port->writeReq->setCarrierPort(port);
+                it = writeQueue.erase(it);
+                if (port->writeReq && port->writeReq->needToWrite) {
+                    if (debug()) DPRINTF(CommInterfaceQueues, "Trying write on available memory port\n");
+                    tryWrite(port);
+                    accWrQ.push_back(port->writeReq);
+                    // if (!port->writeReq->needToWrite)
+                    //     port->writeReq = NULL;
+                }
+            } else {
+                if (debug()) DPRINTF(CommInterfaceQueues, "Found no ports able to write %d bytes to %lx\n", (*it)->length, address);
+                ++it;
+            }
+        }
+    } else {
+        if (debug()) DPRINTF(CommInterface, "All ports are stalled\n");
+    }
+    requestsInQueues = readQueue.size() + writeQueue.size();
+    if (!tickEvent.scheduled() && requestsInQueues>0) {
+        schedule(tickEvent, curTick() + processDelay);
+        //schedule(tickEvent, nextCycle());
+    }
+}
+
+void
+CommInterface::tick() {
+    if (debug()) DPRINTF(CommInterface, "Tick!\n");
+    checkMMR();
+    requestsInQueues = readQueue.size() + writeQueue.size();
+    if (requestsInQueues > 0)
+        processMemoryRequests();
+}
+
+void
+CommInterface::tryRead(MemSidePort * port) {
+    MemoryRequest * readReq = port->readReq;
+    Request::Flags flags;
+    if (readReq->readLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to read if there aren't reads left\n");
+        return;
+    }
+    int size;
+    if (readReq->currentReadAddr % cacheLineSize) {
+        size = cacheLineSize - (readReq->currentReadAddr % cacheLineSize);
+        if (debug()) DPRINTF(CommInterface, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = readReq->readLeft > (size - 1) ? size : readReq->readLeft;
+    RequestPtr req = make_shared<Request>(readReq->currentReadAddr, size, flags, masterId);
+    if (debug()) DPRINTF(CommInterface, "Trying to read addr: 0x%016x, %d bytes through port: %s\n",
+        req->getPaddr(), size, port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::ReadReq);
+    pkt->allocate();
+    readReq->pkt = pkt;
+    port->sendPacket(pkt);
+
+    readReq->currentReadAddr += size;
+
+    readReq->readLeft -= size;
+
+    if (!(readReq->readLeft > 0)) {
+        readReq->needToRead = false;
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    } else {
+        if (!port->isStalled() && !tickEvent.scheduled())
+        {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    }
+}
+
+void
+CommInterface::tryWrite(MemSidePort * port) {
+    MemoryRequest * writeReq = port->writeReq;
+    if (writeReq->writeLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to write if there aren't writes left\n");
+        return;
+    }
+
+    int size;
+    if (writeReq->currentWriteAddr % cacheLineSize) {
+        size = cacheLineSize - (writeReq->currentWriteAddr % cacheLineSize);
+        if (debug()) DPRINTF(CommInterface, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = writeReq->writeLeft > size - 1 ? size : writeReq->writeLeft;
+
+    Request::Flags flags;
+    uint8_t *data = new uint8_t[size];
+    std::memcpy(data, &(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]), size);
+    RequestPtr req = make_shared<Request>(writeReq->currentWriteAddr, size, flags, masterId);
+    req->setExtraData((uint64_t)data);
+
+
+    if (debug()) DPRINTF(CommInterface, "totalLength: %d, writeLeft: %d\n", writeReq->totalLength, writeReq->writeLeft);
+    if (debug()) DPRINTF(CommInterface, "Trying to write to addr: 0x%016x, %d bytes, data 0x%08x through port: %s\n",
+        writeReq->currentWriteAddr, size,
+        *((uint64_t*)(&(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]))),
+        port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::WriteReq);
+    uint8_t *pkt_data = (uint8_t *)req->getExtraData();
+    pkt->dataDynamic(pkt_data);
+    writeReq->pkt = pkt;
+    port->sendPacket(pkt);
+
+    writeReq->currentWriteAddr += size;
+    writeReq->writeLeft -= size;
+
+    if (!(writeReq->writeLeft > 0)) {
+        writeReq->needToWrite = false;
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    } else if (!port->isStalled() && !tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+    }
+}
+
+void
+CommInterface::tryRead(SPMPort * port) {
+    MemoryRequest * readReq = port->readReq;
+    Request::Flags flags;
+    if (readReq->readLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to read if there aren't reads left\n");
+        return;
+    }
+    int size;
+    if (readReq->currentReadAddr % cacheLineSize) {
+        size = cacheLineSize - (readReq->currentReadAddr % cacheLineSize);
+        if (debug()) DPRINTF(CommInterface, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = readReq->readLeft > (size - 1) ? size : readReq->readLeft;
+    RequestPtr req = make_shared<Request>(readReq->currentReadAddr, size, flags, masterId);
+    if (debug()) DPRINTF(CommInterface, "Trying to read addr: 0x%016x, %d bytes through port: %s\n",
+        req->getPaddr(), size, port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::ReadReq);
+    pkt->allocate();
+    readReq->pkt = pkt;
+    port->sendPacket(pkt);
+
+    readReq->currentReadAddr += size;
+
+    readReq->readLeft -= size;
+
+    if (!(readReq->readLeft > 0)) {
+        readReq->needToRead = false;
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    } else {
+        if (!port->isStalled() && !tickEvent.scheduled())
+        {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    }
+}
+
+void
+CommInterface::tryWrite(SPMPort * port) {
+    MemoryRequest * writeReq = port->writeReq;
+    if (writeReq->writeLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to write if there aren't writes left\n");
+        return;
+    }
+
+    int size;
+    if (writeReq->currentWriteAddr % cacheLineSize) {
+        size = cacheLineSize - (writeReq->currentWriteAddr % cacheLineSize);
+        if (debug()) DPRINTF(CommInterface, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = writeReq->writeLeft > size - 1 ? size : writeReq->writeLeft;
+
+    Request::Flags flags;
+    uint8_t *data = new uint8_t[size];
+    std::memcpy(data, &(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]), size);
+    RequestPtr req = make_shared<Request>(writeReq->currentWriteAddr, size, flags, masterId);
+    req->setExtraData((uint64_t)data);
+
+
+    if (debug()) DPRINTF(CommInterface, "totalLength: %d, writeLeft: %d\n", writeReq->totalLength, writeReq->writeLeft);
+    if (debug()) DPRINTF(CommInterface, "Trying to write to addr: 0x%016x, %d bytes, data 0x%08x through port: %s\n",
+        writeReq->currentWriteAddr, size,
+        *((uint64_t*)(&(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]))),
+        port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::WriteReq);
+    uint8_t *pkt_data = (uint8_t *)req->getExtraData();
+    pkt->dataDynamic(pkt_data);
+    writeReq->pkt = pkt;
+    port->sendPacket(pkt);
+
+    writeReq->currentWriteAddr += size;
+    writeReq->writeLeft -= size;
+
+    if (!(writeReq->writeLeft > 0)) {
+        writeReq->needToWrite = false;
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+        }
+    } else if (!port->isStalled() && !tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+            //schedule(tickEvent, nextCycle());
+    }
+}
+
+void
+CommInterface::tryRead(RegPort * port) {
+    MemoryRequest * readReq = port->readReq;
+    Request::Flags flags;
+    if (readReq->readLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to read if there aren't reads left\n");
+        return;
+    }
+    int size = readReq->readLeft;
+    RequestPtr req = make_shared<Request>(readReq->currentReadAddr, size, flags, masterId);
+    if (debug()) DPRINTF(CommInterface, "Trying to read addr: 0x%016x, %d bytes through port: %s\n",
+        req->getPaddr(), size, port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::ReadReq);
+    pkt->allocate();
+    readReq->pkt = pkt;
+    readReq->currentReadAddr += size;
+    readReq->readLeft -= size;
+    if (readReq->readLeft <= 0) readReq->needToRead = false;
+    port->sendPacket(pkt);
+
+    if (!(readReq->readLeft > 0)) {
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+        }
+    }
+}
+
+void
+CommInterface::tryWrite(RegPort * port) {
+    MemoryRequest * writeReq = port->writeReq;
+    if (writeReq->writeLeft <= 0) {
+        if (debug()) DPRINTF(CommInterface, "Something went wrong. Shouldn't try to write if there aren't writes left\n");
+        return;
+    }
+
+    int size = writeReq->writeLeft;
+
+    Request::Flags flags;
+    uint8_t *data = new uint8_t[size];
+    std::memcpy(data, &(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]), size);
+    RequestPtr req = make_shared<Request>(writeReq->currentWriteAddr, size, flags, masterId);
+    req->setExtraData((uint64_t)data);
+
+
+    if (debug()) DPRINTF(CommInterface, "totalLength: %d, writeLeft: %d\n", writeReq->totalLength, writeReq->writeLeft);
+    if (debug()) DPRINTF(CommInterface, "Trying to write to addr: 0x%016x, %d bytes, data 0x%08x through port: %s\n",
+        writeReq->currentWriteAddr, size,
+        *((uint64_t*)(&(writeReq->buffer[writeReq->totalLength-writeReq->writeLeft]))),
+        port->name());
+
+    PacketPtr pkt = new Packet(req, MemCmd::WriteReq);
+    uint8_t *pkt_data = (uint8_t *)req->getExtraData();
+    pkt->dataDynamic(pkt_data);
+    writeReq->pkt = pkt;
+    writeReq->currentWriteAddr += size;
+    writeReq->writeLeft -= size;
+    if (writeReq->writeLeft <= 0) writeReq->needToWrite = false;
+    port->sendPacket(pkt);
+
+    if (!(writeReq->writeLeft > 0)) {
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+        }
+    }
+}
+
+void
+CommInterface::enqueueRead(MemoryRequest * req) {
+    if (inRegRange(req->getAddress())) {
+        // We want to immediately handle register requests
+        // and bypass memory queues
+        auto regport = getValidRegPort(req->getAddress());
+        accRdQ.push_back(req); // Add it to active read queue
+        regport->setReadReq(req);
+        req->setCarrierPort(regport);
+        tryRead(regport);
+    } else {
+        if (debug()) DPRINTF(CommInterface, "Read from 0x%lx of Size:%d Bytes Enqueued:\n", req->address, req->length);
+        readQueue.push_back(req);
+        if (debug()) {
+            DPRINTF(CommInterfaceQueues, "Current Queue:\n");
+            for (auto it=readQueue.begin(); it!=readQueue.end(); ++it) {
+                DPRINTF(CommInterfaceQueues, "Read Request: %lx\n", (*it)->address);
+            }
+        }
+    }
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + processDelay);
+    }
+}
+
+void
+CommInterface::enqueueWrite(MemoryRequest * req) {
+    if (inRegRange(req->getAddress())) {
+        // We want to immediately handle register requests
+        // and bypass memory queues
+        auto regport = getValidRegPort(req->getAddress());
+        accWrQ.push_back(req); // Add it to active write queue
+        regport->setWriteReq(req);
+        req->setCarrierPort(regport);
+        tryWrite(regport);
+    } else {
+        if (debug()) DPRINTF(CommInterface, "Write to 0x%lx of size:%d bytes enqueued\n", req->address, req->length);
+        writeQueue.push_back(req);
+        if (debug()) {
+            DPRINTF(CommInterfaceQueues, "Current Queue:\n");
+            for (auto it=writeQueue.begin(); it!=writeQueue.end(); ++it) {
+                DPRINTF(CommInterfaceQueues, "Write Request: %lx\n", (*it)->address);
+            }
+        }
+    }
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + processDelay);
+    }
+}
+
+void
+CommInterface::finish() {
+    *mmreg &= 0xfc;
+    *mmreg |= 0x04;
+    computationNeeded = false;
+    if (int_num>0) {
+        int_flag = true;
+        gic->sendInt(int_num);
+    }
+    if (reset_spm) {
+        for (auto port : spmPorts) {
+            port->setReadyStatus(false);
+        }
+    }
+}
+
+Tick
+CommInterface::read(PacketPtr pkt) {
+    if (debug()) DPRINTF(DeviceMMR, "The address range associated with this ACC was read!\n");
+
+    Addr offset = pkt->req->getPaddr() - io_addr;
+
+    uint64_t data;
+
+    data = *(uint64_t *)(mmreg+offset);
+
+    switch(pkt->getSize()) {
+      case 1:
+        pkt->set<uint8_t>(data, endian);
+        break;
+      case 2:
+        pkt->set<uint16_t>(data, endian);
+        break;
+      case 4:
+        pkt->set<uint32_t>(data, endian);
+        break;
+      case 8:
+        pkt->set<uint64_t>(data, endian);
+        break;
+      default:
+        panic("Read size too big?\n");
+        break;
+    }
+
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+CommInterface::write(PacketPtr pkt) {
+    if (debug()) DPRINTF(DeviceMMR,
+        "The address range associated with this ACC was written to!\n");
+
+    if (debug()) DPRINTF(DeviceMMR, "Packet addr 0x%lx\n", pkt->req->getPaddr());
+    if (debug()) DPRINTF(DeviceMMR, "IO addr 0x%lx\n", io_addr);
+    if (debug()) DPRINTF(DeviceMMR, "Diff addr 0x%lx\n", pkt->req->getPaddr() - io_addr);
+    if (debug()) DPRINTF(DeviceMMR, "Packet val (LE) %d\n", pkt->getLE<uint8_t>());
+    if (debug()) DPRINTF(DeviceMMR, "Packet val (BE) %d\n", pkt->getBE<uint8_t>());
+    if (debug()) DPRINTF(DeviceMMR, "Packet val %d\n", pkt->get<uint8_t>(endian));
+    pkt->writeData(mmreg + (pkt->req->getPaddr() - io_addr));
+
+    std::stringstream mm;
+    for (int i = io_size-1; i >= 0; i--) {
+        if ((i >= flag_size+config_size) && ((i-flag_size-config_size)%8 == 0))
+            mm << std::setfill('0') << std::setw(2) << std::hex << (uint32_t)mmreg[i] << "|";
+        else if (i == flag_size+config_size)
+            mm << "|" << std::setfill('0') << std::setw(2) << std::hex << (uint32_t)mmreg[i];
+        else if (i == flag_size)
+            mm << "|" << std::setfill('0') << std::setw(2) << std::hex << (uint32_t)mmreg[i];
+        else
+            mm << std::setfill('0') << std::setw(2) << std::hex << (uint32_t)mmreg[i];
+    }
+    std::string mmr = mm.str();
+    if (debug()) DPRINTF(DeviceMMR, "MMReg value: %s\n", mmr);
+
+    pkt->makeAtomicResponse();
+
+    if (((*mmreg & 0x04) == 0x00) && int_flag) {
+        if (int_num > 0)
+            gic->clearInt(int_num);
+        int_flag = false;
+    }
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, nextCycle());
+    }
+
+    return pioDelay;
+}
+
+uint64_t
+CommInterface::getGlobalVar(unsigned offset, unsigned size) {
+    if (use_premap_data) {
+        return data_base_ptrs.at(offset/8);
+    } else {
+        uint64_t value;
+        switch (size) {
+            case 1:
+                value = *(uint64_t *)(uint8_t *)(mmreg + VAR_OFFSET + offset);
+                break;
+            case 2:
+                value = *(uint64_t *)(uint16_t *)(mmreg + VAR_OFFSET + offset);
+                break;
+            case 4:
+                value = *(uint64_t *)(uint32_t *)(mmreg + VAR_OFFSET + offset);
+                break;
+            case 8:
+                value = *(uint64_t *)(mmreg + VAR_OFFSET + offset);
+                break;
+            default:
+                panic("Data of size: %d is not supported as a global variable!");
+        }
+        return value;
+    }
+}
+
+Port&
+CommInterface::getPort(const std::string& if_name, PortID idx) {
+    if (if_name == "local") {
+        if (idx >= localPorts.size()) {
+            localPorts.resize((idx+1));
+        }
+        if (localPorts[idx] == nullptr) {
+            const std::string portName = name() + ".local[" + std::to_string(idx) + "]";
+            localPorts[idx] = new MemSidePort(portName, this, idx);
+        }
+        return *localPorts[idx];
+    } else if (if_name == "acp") {
+        if (idx >= globalPorts.size()) {
+            globalPorts.resize((idx+1));
+        }
+        if (globalPorts[idx] == nullptr) {
+            const std::string portName = name() + ".acp[" + std::to_string(idx) + "]";
+            globalPorts[idx] = new MemSidePort(portName, this, idx);
+        }
+        return *globalPorts[idx];
+    } else if (if_name == "stream") {
+        if (idx >= streamPorts.size()) {
+            streamPorts.resize((idx+1));
+        }
+        if (streamPorts[idx] == nullptr) {
+            const std::string portName = name() + ".stream[" + std::to_string(idx) + "]";
+            streamPorts[idx] = new MemSidePort(portName, this, idx);
+        }
+        return *streamPorts[idx];
+    } else if (if_name == "spm") {
+        if (idx >= spmPorts.size()) {
+            spmPorts.resize((idx+1));
+        }
+        if (spmPorts[idx] == nullptr) {
+            const std::string portName = name() + ".spm[" + std::to_string(idx) + "]";
+            spmPorts[idx] = new SPMPort(portName, this, idx);
+        }
+        return *spmPorts[idx];
+    } else if (if_name == "reg") {
+        if (idx >= regPorts.size()) {
+            regPorts.resize((idx+1));
+        }
+        if (regPorts[idx] == nullptr) {
+            const std::string portName = name() + ".reg[" + std::to_string(idx) + "]";
+            regPorts[idx] = new RegPort(portName, this, idx);
+        }
+        return *regPorts[idx];
+    } else if (if_name == "pio") {
+        return pioPort;
+    } else {
+        return ClockedObject::getPort(if_name, idx);
+    }
+}
+
+MemoryRequest *
+CommInterface::findMemRequest(PacketPtr pkt, bool isRead) {
+    if (isRead) {
+        for (auto it=accRdQ.begin(); it!=accRdQ.end(); ++it) {
+            if ((*it)->pkt == pkt) {
+                return (*it);
+            }
+        }
+    } else {
+        for (auto it=accWrQ.begin(); it!=accWrQ.end(); ++it) {
+            if ((*it)->pkt == pkt) {
+                return (*it);
+            }
+        }
+    }
+    panic("Could not find memory request in request queues");
+    return NULL;
+}
+
+void
+CommInterface::clearMemRequest(MemoryRequest * req, bool isRead) {
+    if (isRead) {
+        for (auto it=accRdQ.begin(); it!=accRdQ.end(); ++it) {
+            if ((*it) == req) {
+                it=accRdQ.erase(it);
+                break;
+            }
+        }
+    } else {
+        for (auto it=accWrQ.begin(); it!=accWrQ.end(); ++it) {
+            if ((*it) == req) {
+                it=accWrQ.erase(it);
+                break;
+            }
+        }
+    }
+}
+
+void
+CommInterface::startup() {}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/comm_interface.hh gem5-SALAM/src/hwacc/comm_interface.hh
--- gem5/src/hwacc/comm_interface.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/comm_interface.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,295 @@
+#ifndef __HWACC_COMM_INTERFACE_HH__
+#define __HWACC_COMM_INTERFACE_HH__
+
+#include "params/CommInterface.hh"
+#include "dev/io_device.hh"
+#include "dev/arm/base_gic.hh"
+#include "hwacc/compute_unit.hh"
+#include "hwacc/LLVMRead/src/mem_request.hh"
+#include "hwacc/stream_port.hh"
+#include "hwacc/scratchpad_memory.hh"
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+
+#include <list>
+#include <queue>
+#include <vector>
+
+class CommInterface : public BasicPioDevice
+{
+  protected:
+    Addr io_addr;
+    Addr io_size;
+    Addr flag_size;
+    Addr config_size;
+    Addr FLAG_OFFSET;
+    Addr CONFIG_OFFSET;
+    Addr VAR_OFFSET;
+    std::string devname;
+    BaseGic *gic;
+    int32_t int_num;
+    bool use_premap_data;
+    std::vector<Addr> data_base_ptrs;
+    ByteOrder endian;
+    bool debugEnabled;
+
+  public:
+    bool debug() { return debugEnabled; }
+
+  protected:
+    class MemSidePort : public StreamRequestPort
+    {
+      friend class CommInterface;
+
+      private:
+        CommInterface *owner;
+        std::queue<PacketPtr> outstandingPkts;
+        MemoryRequest *readReq;
+        MemoryRequest *writeReq;
+        bool readActive;
+        bool writeActive;
+
+      public:
+        MemSidePort(const std::string& name, CommInterface *owner, PortID id=InvalidPortID) :
+          StreamRequestPort(name, owner, id), owner(owner) {
+          readActive = false;
+          writeActive = false;
+          readReq = NULL;
+          writeReq = NULL;
+        }
+        MemoryRequest * getReadReq() { return readReq; }
+        MemoryRequest * getWriteReq() { return writeReq; }
+        void setReadReq(MemoryRequest * req = nullptr) { readReq = req; }
+        void setWriteReq(MemoryRequest * req = nullptr) { writeReq = req; }
+
+      protected:
+        virtual bool recvTimingResp(PacketPtr pkt);
+        virtual void recvReqRetry();
+        virtual void recvRangeChange() { };
+        virtual Tick recvAtomic(PacketPtr pkt) {return 0;}
+        virtual void recvFunctional(PacketPtr pkt) { };
+        void setStalled(PacketPtr pkt)
+        {
+          outstandingPkts.push(pkt);
+        }
+        bool isStalled() { return !outstandingPkts.empty(); }
+        void sendPacket(PacketPtr pkt);
+        bool active() { return readActive || writeActive; }
+        bool reading() { return readActive; }
+        bool writing() { return writeActive; }
+        bool debug() { return owner->debug(); }
+    };
+
+    class SPMPort : public ScratchpadRequestPort
+    {
+      friend class CommInterface;
+
+      private:
+        CommInterface *owner;
+        std::queue<PacketPtr> outstandingPkts;
+        MemoryRequest *readReq;
+        MemoryRequest *writeReq;
+        bool readActive;
+        bool writeActive;
+
+      public:
+        SPMPort(const std::string& name, CommInterface *owner, PortID id=InvalidPortID) :
+          ScratchpadRequestPort(name, owner, id), owner(owner) {
+          readActive = false;
+          writeActive = false;
+          readReq = NULL;
+          writeReq = NULL;
+        }
+        MemoryRequest * getReadReq() { return readReq; }
+        MemoryRequest * getWriteReq() { return writeReq; }
+        void setReadReq(MemoryRequest * req = nullptr) { readReq = req; }
+        void setWriteReq(MemoryRequest * req = nullptr) { writeReq = req; }
+
+      protected:
+        virtual bool recvTimingResp(PacketPtr pkt);
+        virtual void recvReqRetry();
+        virtual void recvRangeChange() { };
+        virtual Tick recvAtomic(PacketPtr pkt) {return 0;}
+        virtual void recvFunctional(PacketPtr pkt) { };
+        void setStalled(PacketPtr pkt)
+        {
+          outstandingPkts.push(pkt);
+        }
+        bool isStalled() { return !outstandingPkts.empty(); }
+        void sendPacket(PacketPtr pkt);
+        bool active() { return readActive || writeActive; }
+        bool reading() { return readActive; }
+        bool writing() { return writeActive; }
+        bool debug() { return owner->debug(); }
+    };
+
+    class RegPort : public RequestPort
+    {
+      friend class CommInterface;
+
+      private:
+        CommInterface *owner;
+        MemoryRequest *readReq;
+        MemoryRequest *writeReq;
+      public:
+        RegPort(const std::string& name, CommInterface *_owner, PortID id=InvalidPortID) :
+          RequestPort(name, _owner), owner(_owner) {}
+        void setReadReq(MemoryRequest * req = nullptr) { readReq = req; }
+        void setWriteReq(MemoryRequest * req = nullptr) { writeReq = req; }
+      protected:
+        virtual bool recvTimingResp(PacketPtr pkt);
+        virtual void recvReqRetry();
+        virtual void recvRangeChange() { };
+        virtual Tick recvAtomic(PacketPtr pkt) {return 0;}
+        virtual void recvFunctional(PacketPtr pkt) { };
+        void sendPacket(PacketPtr pkt);
+        bool debug() { return owner-debug(); }
+    };
+
+    class TickEvent : public Event
+    {
+      private:
+        CommInterface *comm;
+
+      public:
+        TickEvent(CommInterface *_comm) : Event(CPU_Tick_Pri), comm(_comm) {}
+        void process() { comm->tick(); }
+        virtual const char *description() const { return "CommInterface tick"; }
+        bool debug() { return comm->debug(); }
+    };
+
+    std::list<MemoryRequest*> readQueue;
+    std::list<MemoryRequest*> writeQueue;
+    std::list<MemoryRequest*> accRdQ;
+    std::list<MemoryRequest*> accWrQ;
+
+    int requestsInQueues;
+
+    std::vector<MemSidePort*> localPorts;
+    std::vector<MemSidePort*> globalPorts;
+    std::vector<MemSidePort*> streamPorts;
+    std::vector<SPMPort*>     spmPorts;
+    std::vector<RegPort*>     regPorts;
+
+    bool localPortsStalled() {
+        for (auto it=localPorts.begin(); it!=localPorts.end(); ++it) {
+            if (!((*it)->isStalled())) return false;
+        }
+        return true;
+    }
+    bool globalPortsStalled() {
+        for (auto it=globalPorts.begin(); it!=globalPorts.end(); ++it) {
+            if (!((*it)->isStalled())) return false;
+        }
+        return true;
+    }
+    bool streamPortsStalled() {
+        for (auto it=streamPorts.begin(); it!=streamPorts.end(); ++it) {
+            if (!((*it)->isStalled())) return false;
+        }
+        return true;
+    }
+    bool spmPortsStalled() {
+        for (auto port : spmPorts) {
+            if (!(port->isStalled())) return false;
+        }
+        return true;
+    }
+    bool allPortsStalled() {
+        return localPortsStalled() && globalPortsStalled() && streamPortsStalled() && spmPortsStalled();
+    }
+    bool inStreamRange(Addr add);
+    bool inSPMRange(Addr add);
+    bool inRegRange(Addr add);
+    bool inLocalRange(Addr add);
+    bool inGlobalRange(Addr add);
+    MemSidePort * getValidLocalPort(Addr add, bool read);
+    MemSidePort * getValidGlobalPort(Addr add, bool read);
+    MemSidePort * getValidStreamPort(Addr add, size_t len, bool read);
+    SPMPort *     getValidSPMPort(Addr add, size_t len, bool read);
+    RegPort *     getValidRegPort(Addr add);
+
+    CommInterface *comm;
+    RequestorID masterId;
+    TickEvent tickEvent;
+    unsigned cacheLineSize;
+
+    virtual void checkMMR();
+    virtual void processMemoryRequests();
+    virtual void tick();
+
+    bool running;
+    bool computationNeeded;
+    bool int_flag;
+
+    void tryRead(MemSidePort * port);
+    void tryWrite(MemSidePort * port);
+
+    void tryRead(SPMPort * port);
+    void tryWrite(SPMPort * port);
+
+    void tryRead(RegPort * port);
+    void tryWrite(RegPort * port);
+
+    Addr dataAddr;
+
+    uint8_t *mmreg;
+
+    bool processingDone;
+    int processDelay;
+    int clock_period;
+
+    bool reset_spm;
+
+    ComputeUnit *cu;
+
+  public:
+    PARAMS(CommInterface);
+
+    CommInterface(const CommInterfaceParams &p);
+
+    void startup();
+
+    virtual Tick read(PacketPtr pkt);
+
+    virtual Tick write(PacketPtr pkt);
+
+    Port& getPort(const std::string& if_name,
+                                  PortID idk = InvalidPortID) override;
+
+    void recvPacket(PacketPtr pkt);
+
+    // Addr value stored in gep register, length based on data type
+    void enqueueRead(MemoryRequest * req); 
+
+    void enqueueWrite(MemoryRequest * req);
+
+    //uint8_t* getReadBuffer() { return readBuffer; }
+
+    bool isRunning() { return running; }
+    bool isCompNeeded() { return computationNeeded; }
+
+    uint64_t getGlobalVar(unsigned offset, unsigned size);
+    int getProcessDelay() { return processDelay; }
+    virtual int getReadPorts()  { return 0; }
+    virtual int getWritePorts()  { return 0; }
+    virtual int getReadBusWidth()  { return 0; }
+    virtual int getWriteBusWidth()  { return 0; }  
+    virtual int getPmemRange() { return 0; }
+    void registerCompUnit(ComputeUnit *compunit) { cu = compunit; }
+    virtual void finish();
+
+    MemoryRequest * findMemRequest(PacketPtr pkt, bool isRead);
+    void clearMemRequest(MemoryRequest * req, bool isRead);
+    virtual void refreshMemPorts() {}
+    std::string getName() const { return name(); }
+
+    virtual bool isBaseCommInterface() { return true; }
+  protected:
+};
+
+#endif //__HWACC_COMM_INTERFACE_HH__
+
+/*
+* MM Register Layout
+* | Location of Data 32bits | Compute Finished 1bit | Unused 30bits | Start Operation 1bit |
+*/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/CommInterface.py gem5-SALAM/src/hwacc/CommInterface.py
--- gem5/src/hwacc/CommInterface.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/CommInterface.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,26 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.Device import BasicPioDevice
+
+class CommInterface(BasicPioDevice):
+    type = 'CommInterface'
+    cxx_header = 'hwacc/comm_interface.hh'
+
+    flags_size = Param.Addr(0x1, "Size of the address range dedicated to device flags")
+    config_size = Param.Addr(0x0, "Size of the addess range dedicated to device configuration")
+    pio_size = Param.Addr(0x8, "Size of MMRs. Should be large enough to support flags, config, and global var addresses")
+    devicename = Param.String("comm_interface", "Name of comm_interface device")
+    local = VectorRequestPort("Master points connected to the local cluster xbar")
+    acp = VectorRequestPort("Master ports connected to the cluster coherency xbar")
+    stream = VectorRequestPort("Master ports connected to streaming devices")
+    spm = VectorRequestPort("Master ports connected to private scratchpad memory")
+    reg = VectorRequestPort("Master ports connected to private register banks")
+    system = Param.System(Parent.any, "Parent system of the device")
+    cache_line_size = Param.Unsigned(Parent.cache_line_size, "Cache line size in bytes")
+    gic = Param.BaseGic(Parent.any, "Gic on which to trigger interrupts")
+    int_num = Param.Int32(-1, "Interrupt number that connects to GIC")
+    clock_period = Param.Int(10, "Clock period in ns")
+    premap_data = Param.Bool(False, "Whether or not the memory read/write locations for data predefined")
+    data_bases = VectorParam.Addr([0x0], "Base addresses for data if they are predefined")
+    enable_debug_msgs = Param.Bool(False, "Whether or not this device will display debug messages")
+    reset_spm = Param.Bool(False, "Reset the ready state of any connected scratchpad memories when finished executing")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/common/src/debug_flags.hh gem5-SALAM/src/hwacc/common/src/debug_flags.hh
--- gem5/src/hwacc/common/src/debug_flags.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/common/src/debug_flags.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,71 @@
+#ifndef LLVMREAD_DEBUG_HH
+#define LLVMREAD_DEBUG_HH
+// License 
+
+//____________________________________________________________________________
+// Doxygen setup
+/**
+ * @defgroup flags Flags group
+ */
+
+//____________________________________________________________________________
+// File description
+/**
+ * @file
+ * Contains include information for all M5 debug flags and base 
+ * implementation of the Debugger class used within gem5-SALAM. 
+ */
+
+//____________________________________________________________________________
+// Global includes
+// - debug_flags.hh is a common header for all files, so all files included
+// - here will available throughout the entire application
+#include "macros.hh"
+
+//____________________________________________________________________________
+// Debug includes
+#include "debug/AddrRanges.hh"
+#include "debug/CommInterface.hh"
+#include "debug/CommInterfaceQueues.hh"
+#include "debug/DeviceMMR.hh"
+#include "debug/DMA.hh"
+#include "debug/LLVMInterface.hh"
+#include "debug/NoncoherentDma.hh"
+#include "debug/Runtime.hh"
+#include "debug/RuntimeCompute.hh"
+#include "debug/RuntimeQueues.hh"
+#include "debug/SALAM_Debug.hh"
+#include "debug/StreamDma.hh"
+#include "debug/Trace.hh"
+#include "debug/Step.hh"
+
+//____________________________________________________________________________
+// M5 includes
+#include "base/trace.hh"
+
+/**
+ * @namespace SALAM
+ */
+namespace SALAM
+{
+
+/**
+ * @class Debugger
+ * Base implementation of the debugger used in gem5-SALAM
+ */
+class Debugger
+{
+    private:
+        bool dbg = false;
+    protected:
+    public:
+        Debugger();
+        ~Debugger() = default;
+        virtual void dumper() { };
+        bool enabled() { return dbg; }
+
+};
+}
+
+//------------------------------------------//
+#endif //__LLVMREAD_DEBUG_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/common/src/macros.hh gem5-SALAM/src/hwacc/common/src/macros.hh
--- gem5/src/hwacc/common/src/macros.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/common/src/macros.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,25 @@
+#ifndef __HWMODEL_COMMON_MACROS_HH__
+#define __HWMODEL_COMMON_MACROS_HH__
+
+namespace SALAM {
+    // Hardware Units
+    #define    INTADDER         1
+    #define    INTMULTI         2
+    #define    INTSHIFTER       3
+    #define    INTBITWISE       4
+    #define    FPSPADDER        5
+    #define    FPDPADDER        6
+    #define    FPSPMULTI        7
+    #define    FPSPDIVID        8
+    #define    FPDPMULTI        9
+    #define    FPDPDIVID        10
+    #define    COMPARE          11
+    #define    GETELEMENTPTR    12
+    #define    CONVERSION       13
+    #define    OTHERINST        14
+    #define    REGISTER         15
+    #define    COUNTER          16
+    #define    TRIG_SINE        17
+}
+
+#endif
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/compute_unit.cc gem5-SALAM/src/hwacc/compute_unit.cc
--- gem5/src/hwacc/compute_unit.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/compute_unit.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,14 @@
+//------------------------------------------//
+#include "hwacc/compute_unit.hh"
+//------------------------------------------//
+
+ComputeUnit::ComputeUnit(const ComputeUnitParams &p) :
+    SimObject(p),
+    comm(p.comm_int),
+    hw(p.hw_int),
+    tickEvent(this) {}
+
+// ComputeUnit*
+// ComputeUnitParams::create() {
+//     return new ComputeUnit(this);
+// }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/compute_unit.hh gem5-SALAM/src/hwacc/compute_unit.hh
--- gem5/src/hwacc/compute_unit.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/compute_unit.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,44 @@
+#ifndef __HWACC_COMPUTE_UNIT_HH__
+#define __HWACC_COMPUTE_UNIT_HH__
+//------------------------------------------//
+#include "params/ComputeUnit.hh"
+#include "sim/sim_object.hh"
+#include "hwacc/comm_interface.hh"
+#include "hwacc/LLVMRead/src/mem_request.hh"
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "hwacc/HWModeling/src/hw_interface.hh" 
+//------------------------------------------//
+
+class ComputeUnit : public SimObject {
+  private:
+
+  protected:
+    CommInterface *comm;
+    HWInterface* hw;
+
+    class TickEvent : public Event
+    {
+      private:
+        ComputeUnit *comp_unit;
+
+      public:
+        TickEvent(ComputeUnit *_comp_unit) : Event(CPU_Tick_Pri), comp_unit(_comp_unit) {}
+        void process() { comp_unit->tick(); }
+        virtual const char *description() const { return "ComputeUnit tick"; }
+    };
+
+
+    TickEvent tickEvent;
+    int clock_period;
+
+  public:
+    virtual void tick() {}
+    ComputeUnit(const ComputeUnitParams &p);
+    virtual void initialize() {}
+    virtual void readCommit(MemoryRequest * req) {}
+    virtual void writeCommit(MemoryRequest * req) {}
+    CommInterface * getCommInterface() { return comm; }
+    HWInterface * getHWInterface() { return hw; }
+};
+
+#endif //__HWACC_COMPUTE_UNIT_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/ComputeUnit.py gem5-SALAM/src/hwacc/ComputeUnit.py
--- gem5/src/hwacc/ComputeUnit.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/ComputeUnit.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,13 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+from m5.objects.CommInterface import CommInterface
+from m5.objects.HWInterface import HWInterface
+
+class ComputeUnit(SimObject):
+    type = 'ComputeUnit'
+    cxx_header = "hwacc/compute_unit.hh"
+
+    comm_int = Param.CommInterface(Parent.any, "Communication interface to connect to")
+    hw_int = Param.HWInterface(Parent.any, "Hardware model interface to connect to")
+    
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/CycleCounts.py gem5-SALAM/src/hwacc/CycleCounts.py
--- gem5/src/hwacc/CycleCounts.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/CycleCounts.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,74 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class CycleCounts(SimObject):
+    # SimObject type
+    type = "CycleCounts"
+    # gem5-SALAM attached header
+    cxx_header = "hwacc/HWModeling/src/cycle_counts.hh"
+    ### --- Do Not Modify Below This Line --- ###
+    ### Templates
+    ### YML Type: instruction
+    ## SALAM_OpCodeName = Param.UInt32(runtime_cycles, SALAM_OpCode " instruction runtime cycles.")
+    ### -- Code Auto-Generated Below This Line -- ###
+
+    counter = Param.UInt32(0, "Counter intructions runtime cycles.")
+    gep = Param.UInt32(0, "GetElementPtr intructions runtime cycles.")
+    phi = Param.UInt32(0, "Phi intructions runtime cycles.")
+    select = Param.UInt32(0, "Select intructions runtime cycles.")
+    ret = Param.UInt32(0, "Return intructions runtime cycles.")
+    br = Param.UInt32(0, "Branch intructions runtime cycles.")
+    switch_inst = Param.UInt32(0, "Switch intructions runtime cycles.")
+    indirectbr = Param.UInt32(0, "Indirect Branch intructions runtime cycles.")
+    invoke = Param.UInt32(1, "Invoke intructions runtime cycles.")
+    resume = Param.UInt32(1, "Resume intructions runtime cycles.")
+    unreachable = Param.UInt32(1, "Unreachable intructions runtime cycles.")
+    icmp = Param.UInt32(1, "Integer compare intructions runtime cycles.")
+    fcmp = Param.UInt32(1, "Floating point compare intructions runtime cycles.")
+    trunc = Param.UInt32(1, "Truncate intructions runtime cycles.")
+    zext = Param.UInt32(1, "Zero extend intructions runtime cycles.")
+    sext = Param.UInt32(1, "Sign extend intructions runtime cycles.")
+    fptrunc = Param.UInt32(1, "Floating point truncate intructions runtime cycles.")
+    fpext = Param.UInt32(1, "Floating point extend intructions runtime cycles.")
+    fptoui = Param.UInt32(1, "Floating point to unsigned integer intructions runtime cycles.")
+    fptosi = Param.UInt32(1, "Floating point to signed integer intructions runtime cycles.")
+    uitofp = Param.UInt32(1, "Unsigned integer to floating point intructions runtime cycles.")
+    sitofp = Param.UInt32(1, "Signed integer to floating point intructions runtime cycles.")
+    ptrtoint = Param.UInt32(1, "Pointer to integer intructions runtime cycles.")
+    inttoptr = Param.UInt32(1, "Integer to pointer intructions runtime cycles.")
+    bitcast = Param.UInt32(1, "Bitcast intructions runtime cycles.")
+    addrspacecast = Param.UInt32(1, "Address space cast intructions runtime cycles.")
+    call = Param.UInt32(0, "Call intructions runtime cycles.")
+    vaarg = Param.UInt32(1, "Vaarg intructions runtime cycles.")
+    landingpad = Param.UInt32(1, "Landing pad intructions runtime cycles.")
+    catchpad = Param.UInt32(1, "Catch pad intructions runtime cycles.")
+    alloca = Param.UInt32(1, "Allocate intructions runtime cycles.")
+    load = Param.UInt32(0, "Must be 0, handled by memory controller")
+    store = Param.UInt32(0, "Must be 0, handled by memory controller")
+    fence = Param.UInt32(1, "Fence intructions runtime cycles.")
+    cmpxchg = Param.UInt32(1, "Compare and exchange intructions runtime cycles.")
+    atomicrmw = Param.UInt32(1, "Atomic remove intructions runtime cycles.")
+    extractvalue = Param.UInt32(1, "Extract value intructions runtime cycles.")
+    insertvalue = Param.UInt32(1, "Insert value intructions runtime cycles.")
+    extractelement = Param.UInt32(1, "Extract element intructions runtime cycles.")
+    insertelement = Param.UInt32(1, "Insert element intructions runtime cycles.")
+    shufflevector = Param.UInt32(1, "Shuffle vector intructions runtime cycles.")
+    shl = Param.UInt32(1, "Shift left intructions runtime cycles.")
+    lshr = Param.UInt32(1, "Logical shift right intructions runtime cycles.")
+    ashr = Param.UInt32(1, "Arithmetic shift right intructions runtime cycles.")
+    and_inst = Param.UInt32(1, "And intructions runtime cycles.")
+    or_inst = Param.UInt32(1, "Or intructions runtime cycles.")
+    xor_inst = Param.UInt32(1, "Xor intructions runtime cycles.")
+    add = Param.UInt32(1, "Integer add intructions runtime cycles.")
+    sub = Param.UInt32(1, "Integer subtract intructions runtime cycles.")
+    mul = Param.UInt32(1, "Integer multiply intructions runtime cycles.")
+    udiv = Param.UInt32(1, "Unsigned integer division intructions runtime cycles.")
+    sdiv = Param.UInt32(1, "Signed integer division intructions runtime cycles.")
+    urem = Param.UInt32(1, "Unsigned remainder intructions runtime cycles.")
+    srem = Param.UInt32(1, "Signed remainder intructions runtime cycles.")
+    fadd = Param.UInt32(5, "Floating point addition intructions runtime cycles.")
+    fsub = Param.UInt32(5, "Floating point subtraction intructions runtime cycles.")
+    fmul = Param.UInt32(4, "Floating point multiplication intructions runtime cycles.")
+    fdiv = Param.UInt32(16, "Floating point division intructions runtime cycles.")
+    frem = Param.UInt32(5, "Floating point remainder intructions runtime cycles.")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/data_collection.cc gem5-SALAM/src/hwacc/data_collection.cc
--- gem5/src/hwacc/data_collection.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/data_collection.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,244 @@
+#include "data_collection.hh"
+
+void
+Results::print() {
+
+    std::cout << "********************************************************************************" << std::endl;
+    std::cout << "   ========= Performance Analysis =================" << std::endl;
+    std::cout << "   Setup Time:                      " << setupTime << "ns" << std::endl;
+    std::cout << "   Simulation Time:                 " << simTime << "ns" << std::endl;
+    std::cout << "   System Clock:                    " << sys_clock << "GHz" << std::endl;
+    std::cout << "   Transistor Latency:              " << fu_clock_period << "ns" << std::endl;
+    std::cout << "   Runtime:                         " << cycles << " cycles" << std::endl;
+    std::cout << "   Runtime:                         " << runtime << " seconds" << std::endl;
+    std::cout << "   Stalls:                          " << stalls << " cycles" << std::endl;
+    std::cout << "       Load Only:                   " << loadOnlyStall << " cycles" << std::endl;
+    std::cout << "       Store Only:                  " << storeOnlyStall << " cycles" << std::endl;
+    std::cout << "       Compute Only:                " << compOnlyStall << " cycles" << std::endl;
+    std::cout << "       Compute & Store:             " << storeCompStall << " cycles" << std::endl;
+    std::cout << "       Load & Store:                " << loadStoreStall << " cycles" << std::endl;
+    std::cout << "       Load & Compute:              " << loadCompStall << " cycles" << std::endl;
+    std::cout << "       Load & Compute & Store:      " << loadStoreCompStall << " cycles" << std::endl;
+    std::cout << "   Executed Nodes:                  " << nodes << " cycles" << std::endl;
+    std::cout << "       Load Only:                   " << loadOnly << " cycles" << std::endl;
+    std::cout << "       Store Only:                  " << storeOnly << " cycles" << std::endl;
+    std::cout << "       Compute Only:                " << compOnly << " cycles" << std::endl;
+    std::cout << "       Compute & Store:             " << storeComp << " cycles" << std::endl;
+    std::cout << "       Load & Store:                " << loadStore << " cycles" << std::endl;
+    std::cout << "       Load & Compute:              " << loadComp << " cycles" << std::endl;
+    std::cout << "       Load & Compute & Store:      " << loadStoreComp << " cycles" << std::endl;
+    std::cout << std::fixed << std::setprecision(6) << std::endl;
+    std::cout << "   ========= Runtime FU's ========= (Max | Avg) ===" << std::endl;
+    std::cout << "   Counter FU's:                    " << std::setw(4) << run_counter << " | " << occ_counter << std::endl;
+    std::cout << "   Integer Add/Sub FU's:            " << std::setw(4) << run_add_sub << " | " << occ_add_sub << std::endl;
+    std::cout << "   Integer Mul/Div FU's:            " << std::setw(4) << run_mul_div << " | " << occ_mul_div << std::endl;
+    std::cout << "   Integer Shifter FU's:            " << std::setw(4) << run_shift << " | " << occ_shift << std::endl;
+    std::cout << "   Integer Bitwise FU's:            " << std::setw(4) << run_bit << " | " << occ_bit << std::endl;
+    std::cout << "   Floating Point Float Add/Sub:    " << std::setw(4) << run_float_add_sub << " | " << occ_float_add_sub << std::endl;
+    std::cout << "   Floating Point Double Add/Sub:   " << std::setw(4) << run_doub_add_sub << " | " << occ_doub_add_sub << std::endl;
+    std::cout << "   Floating Point Float Mul/Div:    " << std::setw(4) << run_float_mul_div << " | " << occ_float_mul_div << std::endl;
+    std::cout << "   Floating Point Double Mul/Div:   " << std::setw(4) << run_doub_mul_div << " | " << occ_doub_mul_div << std::endl;
+    std::cout << "   0 Cycle Compare FU's:            " << std::setw(4) << run_zero << " | " << occ_zero << std::endl;
+    std::cout << "   GEP Instruction FU's:            " << std::setw(4) << run_gep << " | " << occ_gep << std::endl;
+    std::cout << "   Type Conversion FU's:            " << std::setw(4) << run_conv << " | " << occ_conv << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Static FU's =========================="  << std::endl;
+    std::cout << "   Counter FU's:                    " << static_counter << std::endl;
+    std::cout << "   Integer Add/Sub FU's:            " << static_add_sub << std::endl;
+    std::cout << "   Integer Mul/Div FU's:            " << static_mul_div << std::endl;
+    std::cout << "   Integer Shifter FU's:            " << static_shift << std::endl;
+    std::cout << "   Integer Bitwise FU's:            " << static_bit << std::endl;
+    std::cout << "   Floating Point Float Add/Sub:    " << static_float_add_sub << std::endl;
+    std::cout << "   Floating Point Double Add/Sub:   " << static_doub_add_sub << std::endl;
+    std::cout << "   Floating Point Float Mul/Div:    " << static_float_mul_div << std::endl;
+    std::cout << "   Floating Point Double Mul/Div:   " << static_doub_mul_div << std::endl;
+    std::cout << "   0 Cycle Compare FU's:            " << static_zero << std::endl;
+    std::cout << "   GEP Instruction FU's:            " << static_gep << std::endl;
+    std::cout << "   Type Conversion FU's:            " << static_conv << std::endl;
+    std::cout << "   Other:                           " << static_other << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Pipeline Register Usage =============" << std::endl;
+    std::cout << "   Total Number of Registers:       " << reg_total << std::endl;
+    std::cout << "   Max Register Usage Per Cycle:    " << reg_max_usage << std::endl;
+    std::cout << "   Avg Register Usage Per Cycle:    " << reg_avg_usage << std::endl;
+    std::cout << "   Avg Register Size (Bytes):       " << reg_avg_size << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Memory Configuration =================" << std::endl;
+    std::cout << "   Cache Bus Ports:                 " << cache_ports << std::endl;
+    std::cout << "   Shared Cache Size:               " << cache_size << "kB" << std::endl;
+    std::cout << "   Local Bus Ports:                 " << local_ports << std::endl;
+    std::cout << "   Private SPM Size:                " << spm_size << "kB" << std::endl;
+    std::cout << "   Private Read Ports:              " << read_ports << std::endl;
+    std::cout << "   Private Write Ports:             " << write_ports << std::endl;
+    std::cout << "   Private Read Bus Width:          " << read_bus_width << std::endl;
+    std::cout << "   Private Write Bus Width:         " << write_bus_width << std::endl;
+    std::cout << "       Memory Reads:                " << dma_reads << std::endl;
+    std::cout << "       Memory Writes:               " << dma_writes << std::endl;    
+    std::cout << "   ========= Power Analysis ======================" << std::endl;
+    std::cout << "   FU Leakage Power:                " << fu_leakage << " mW " << std::endl;
+    std::cout << "   FU Dynamic Power:                " << fu_dynamic << " mW " << std::endl;
+    std::cout << "   FU Total Power:                  " << fu_total_power << " mW " << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Registers Leakage Power:          " << reg_leakage  << " mW " << std::endl;
+    std::cout << "   Registers Dynamic Power:          " << reg_dynamic << " mW " << std::endl;
+    std::cout << "       Register Reads (Bits):        " << reg_reads << std::endl;
+    std::cout << "       Register Writes (Bits):       " << reg_writes << std::endl;
+    std::cout << "   Registers Total Power:            " << reg_total_power <<  " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   SPM Leakage Power:               " << spm_leakage << " mW" << std::endl;
+    std::cout << "   SPM Read Dynamic Power:          " << spm_read_dynamic << " mW" << std::endl;
+    std::cout << "   SPM Write Dynamic Power:         " << spm_write_dynamic << " mW" << std::endl;
+    std::cout << "   SPM Total Power:                 " << spm_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Cache Leakage Power:             " << cache_leakage << " mW" << std::endl;
+    std::cout << "   Cache Read Dynamic Power:        " << cache_read_dynamic << " mW" << std::endl;
+    std::cout << "   Cache Write Dynamic Power:       " << cache_write_dynamic << " mW" << std::endl;
+    std::cout << "   Cache Total Power:               " << cache_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Accelerator Power:               " << total_power << " mW" << std::endl;
+    std::cout << "   Accelerator Power (SPM):         " << acc_spm_total_power << " mW" << std::endl;
+    std::cout << "   Accelerator Power (Cache):       " << acc_cache_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Area Analysis =======================" << std::endl;
+    std::cout << "   FU Area:                         " << fu_area << " um^2 (" << fu_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Register Area:                   " << reg_area << " um^2 (" << reg_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   SPM Area:                        " << spm_area << " um^2 (" << spm_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Cache Area:                      " << cache_area << " um^2 (" << cache_area/1000000 << " mm^2)" << std::endl; 
+    std::cout << std::endl;
+    std::cout << "   Accelerator Area:                " << total_area << " um^2 (" << total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Accelerator Area (SPM):          " << acc_spm_total_area << " um^2 (" << acc_spm_total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Accelerator Area (Cache):        " << acc_cache_total_area << " um^2 (" << acc_cache_total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= SPM Resizing  =======================" << std::endl;
+    std::cout << "   SPM Optimized Leakage Power:     " << spm_opt_leakage << " mW" << std::endl;
+    std::cout << "   SPM Opt Area:                    " << spm_opt_area << " um^2" << std::endl;
+    std::cout << std::endl;
+
+
+}
+
+
+void
+Results::simpleStats() {
+    std::cout << std::fixed << std::setprecision(6) << std::endl;
+    std::cout << "StatsStart:";
+    std::cout << "\n" << setupTime;
+    std::cout << ",\n" << simTime;
+    std::cout << ",\n" << sys_clock;
+    std::cout << ",\n" << fu_clock_period;
+    std::cout << ",\n" << cycles;
+    std::cout << ",\n" << runtime;
+    std::cout << ",\n" << stalls;
+    std::cout << ",\n" << loadOnlyStall;
+    std::cout << ",\n" << storeOnlyStall;
+    std::cout << ",\n" << compOnlyStall;
+    std::cout << ",\n" << storeCompStall;
+    std::cout << ",\n" << loadStoreStall;
+    std::cout << ",\n" << loadCompStall;
+    std::cout << ",\n" << loadStoreCompStall;
+    std::cout << ",\n" << nodes;
+    std::cout << ",\n" << loadOnly;
+    std::cout << ",\n" << storeOnly;
+    std::cout << ",\n" << compOnly;
+    std::cout << ",\n" << storeComp;
+    std::cout << ",\n" << loadStore;
+    std::cout << ",\n" << loadComp;
+    std::cout << ",\n" << loadStoreComp;
+    std::cout << ",\n" << run_counter;
+    std::cout << ",\n" << occ_counter;
+    std::cout << ",\n" << run_add_sub;
+    std::cout << ",\n" << occ_add_sub;
+    std::cout << ",\n" << run_mul_div;
+    std::cout << ",\n" << occ_mul_div;
+    std::cout << ",\n" << run_shift;
+    std::cout << ",\n" << occ_shift;
+    std::cout << ",\n" << run_bit;
+    std::cout << ",\n" << occ_bit;
+    std::cout << ",\n" << run_float_add_sub;
+    std::cout << ",\n" << occ_float_add_sub;
+    std::cout << ",\n" << run_doub_add_sub;
+    std::cout << ",\n" << occ_doub_add_sub;
+    std::cout << ",\n" << run_float_mul_div;
+    std::cout << ",\n" << occ_float_mul_div;
+    std::cout << ",\n" << run_doub_mul_div;
+    std::cout << ",\n" << occ_doub_mul_div;
+    std::cout << ",\n" << run_zero;
+    std::cout << ",\n" << occ_zero;
+    std::cout << ",\n" << run_gep;
+    std::cout << ",\n" << occ_gep;
+    std::cout << ",\n" << run_conv;
+    std::cout << ",\n" << occ_conv;
+    std::cout << ",\n" << static_counter;
+    std::cout << ",\n" << static_add_sub;
+    std::cout << ",\n" << static_mul_div;
+    std::cout << ",\n" << static_shift;
+    std::cout << ",\n" << static_bit;
+    std::cout << ",\n" << static_float_add_sub;
+    std::cout << ",\n" << static_doub_add_sub;
+    std::cout << ",\n" << static_float_mul_div;
+    std::cout << ",\n" << static_doub_mul_div;
+    std::cout << ",\n" << static_zero;
+    std::cout << ",\n" << static_gep;
+    std::cout << ",\n" << static_conv;
+    std::cout << ",\n" << static_other;
+    std::cout << ",\n" << reg_total;
+    std::cout << ",\n" << reg_max_usage;
+    std::cout << ",\n" << reg_avg_usage;
+    std::cout << ",\n" << reg_avg_size;
+    std::cout << ",\n" << cache_ports;
+    std::cout << ",\n" << cache_size;
+    std::cout << ",\n" << local_ports;
+    std::cout << ",\n" << spm_size;
+    std::cout << ",\n" << read_ports;
+    std::cout << ",\n" << write_ports;
+    std::cout << ",\n" << read_bus_width;
+    std::cout << ",\n" << write_bus_width;
+    std::cout << ",\n" << dma_reads;
+    std::cout << ",\n" << dma_writes;
+    std::cout << ",\n" << fu_leakage;
+    std::cout << ",\n" << fu_dynamic;
+    std::cout << ",\n" << fu_total_power;
+    std::cout << ",\n" << reg_leakage;
+    std::cout << ",\n" << reg_dynamic;
+    std::cout << ",\n" << reg_reads;
+    std::cout << ",\n" << reg_writes;
+    std::cout << ",\n" << reg_total_power;
+    std::cout << ",\n" << spm_leakage;
+    std::cout << ",\n" << spm_read_dynamic;
+    std::cout << ",\n" << spm_write_dynamic;
+    std::cout << ",\n" << spm_total_power;
+    std::cout << ",\n" << cache_leakage;
+    std::cout << ",\n" << cache_read_dynamic;
+    std::cout << ",\n" << cache_write_dynamic;
+    std::cout << ",\n" << cache_total_power;
+    std::cout << ",\n" << total_power;
+    std::cout << ",\n" << acc_spm_total_power;
+    std::cout << ",\n" << acc_cache_total_power;
+    std::cout << ",\n" << fu_area;
+    std::cout << ",\n" << reg_area;
+    std::cout << ",\n" << spm_area;
+    std::cout << ",\n" << cache_area;
+    std::cout << ",\n" << total_area;
+    std::cout << ",\n" << acc_spm_total_area;
+    std::cout << ",\n" << acc_cache_total_area;
+    std::cout << ",\n" << spm_opt_leakage;
+    std::cout << ",\n" << spm_opt_area;
+    std::cout << "\nStatsEnd:\n";
+}
+
+void
+Results::unitCorrections() {
+    sys_clock = 1.0/(clock_period/1000);
+    cache_size = cache_size/1024;
+    spm_size = spm_size/1024;
+    spm_total_power = spm_leakage+spm_read_dynamic+spm_write_dynamic;
+    cache_total_power = cache_leakage + cache_read_dynamic + cache_write_dynamic;
+    acc_spm_total_power = total_power + spm_total_power;
+    acc_cache_total_power = total_power + cache_total_power;
+    spm_area = spm_area/1000;
+    cache_area = cache_area/1000;
+    spm_opt_area = spm_opt_area/1000;
+    acc_spm_total_area = total_area + spm_area;
+    acc_cache_total_area = total_area + cache_area;
+
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/data_collection.hh gem5-SALAM/src/hwacc/data_collection.hh
--- gem5/src/hwacc/data_collection.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/data_collection.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,329 @@
+#ifndef __DATA_COLLECTION_HH__
+#define __DATA_COLLECTION_HH__
+#include <iostream>
+#include <iomanip>
+#include <fstream>
+
+class Results {
+
+    private:
+        //Performance
+        double setupTime;
+        double simTime;
+        int clock_period;
+        double sys_clock;
+        int fu_clock_period;
+        int cycles;
+        double runtime;
+        int stalls;
+        int nodes;
+        int loadOnly; //
+        int storeOnly; //
+        int compOnly; //
+        int loadStore; //
+        int loadComp;
+        int loadStoreComp;
+        int storeComp;
+        int loadOnlyStall; //
+        int storeOnlyStall; //
+        int compOnlyStall;
+        int loadStoreStall; //
+        int loadCompStall;
+        int loadStoreCompStall;
+        int storeCompStall;        
+        //Memory Stats
+        int cache_ports;
+        int local_ports;
+        int cache_size;
+        int spm_size;
+        int read_ports;
+        int write_ports;
+        int read_bus_width;
+        int write_bus_width;
+        double spm_leakage;
+        double spm_read_dynamic;
+        double spm_write_dynamic;
+        double spm_area;
+        double spm_opt_leakage;
+        double spm_opt_area;
+        double cache_leakage;
+        double cache_read_dynamic;
+        double cache_write_dynamic;
+        double cache_area;
+        // Runtime Functional Units
+        int run_counter;
+        double occ_counter;
+        int run_add_sub;
+        double occ_add_sub;
+        int run_mul_div;
+        double occ_mul_div;
+        int run_shift;
+        double occ_shift;
+        int run_bit;
+        double occ_bit;
+        int run_float_add_sub;
+        double occ_float_add_sub;
+        int run_doub_add_sub;
+        double occ_doub_add_sub;
+        int run_float_mul_div;
+        double occ_float_mul_div;
+        int run_doub_mul_div;
+        double occ_doub_mul_div;
+        int run_zero;
+        double occ_zero;
+        int run_gep;
+        double occ_gep;
+        int run_conv;
+        double occ_conv;
+        // Static Functional Units
+        int static_counter;
+        int static_add_sub;
+        int static_mul_div;
+        int static_shift;
+        int static_bit;
+        int static_float_add_sub;
+        int static_doub_add_sub;
+        int static_float_mul_div;
+        int static_doub_mul_div;
+        int static_zero;
+        int static_gep;
+        int static_conv;
+        int static_other;
+        // Registers
+        int reg_total;
+        int reg_max_usage;
+        double reg_avg_usage;
+        double reg_avg_size;
+        int reg_reads;
+        int reg_writes;
+        int mem_reads;
+        int mem_writes;
+        int dma_reads;
+        int dma_writes;
+        // Power
+        double fu_leakage;
+        double fu_dynamic;
+        double fu_total_power;
+        double reg_leakage;
+        double reg_dynamic;
+        double reg_total_power;
+        double total_power;
+        // Area
+        double fu_area;
+        double reg_area;
+        double total_area;
+        // Totals
+        double spm_total_power;
+        double cache_total_power;
+        double acc_spm_total_power;
+        double acc_cache_total_power;
+        double acc_spm_total_area;
+        double acc_cache_total_area;
+
+    public:
+        Results();
+        Results(    double SetupTime,
+                    double SimTime,
+                    int Clock_Period,
+                    int FU_Clock_Period,
+                    int Cycles,
+                    double Runtime,
+                    int Stalls,
+                    int Nodes,
+                    int LoadOnly,
+                    int StoreOnly,
+                    int CompOnly,
+                    int LoadStore,
+                    int LoadComp,
+                    int LoadStoreComp,
+                    int StoreComp,
+                    int LoadOnlyStall,
+                    int StoreOnlyStall,
+                    int CompOnlyStall,
+                    int LoadStoreStall,
+                    int LoadCompStall,
+                    int LoadStoreCompStall,
+                    int StoreCompStall,
+                    int Cache_Size,
+                    int SPM_Size,
+                    int Read_Ports,
+                    int Write_Ports,
+                    int Read_Bus_Width,
+                    int Write_Bus_Width,
+                    int Cache_Ports,
+                    int Local_Ports,
+                    double SPM_Leakage,
+                    double SPM_Read_Dynamic,
+                    double SPM_Write_Dynamic,
+                    double SPM_Area,
+                    double SPM_Opt_Leakage,
+                    double SPM_Opt_Area,
+                    double Cache_Leakage,
+                    double Cache_Read_Dynamic,
+                    double Cache_Write_Dynamic,
+                    double Cache_Area,
+                    int Run_counter,
+                    double Occ_counter,
+                    int Run_add_sub,
+                    double Occ_add_sub,
+                    int Run_mul_div,
+                    double Occ_mul_div,
+                    int Run_shift,
+                    double Occ_shift,
+                    int Run_bit,
+                    double Occ_bit,
+                    int Run_float_add_sub,
+                    double Occ_float_add_sub,
+                    int Run_doub_add_sub,
+                    double Occ_doub_add_sub,
+                    int Run_float_mul_div,
+                    double Occ_float_mul_div,
+                    int Run_doub_mul_div,
+                    double Occ_doub_mul_div,
+                    int Run_zero,
+                    double Occ_zero,
+                    int Run_gep,
+                    double Occ_gep,
+                    int Run_conv,
+                    double Occ_conv,
+                    int Static_counter,
+                    int Static_add_sub,
+                    int Static_mul_div,
+                    int Static_shift,
+                    int Static_bit,
+                    int Static_float_add_sub,
+                    int Static_doub_add_sub,
+                    int Static_float_mul_div,
+                    int Static_doub_mul_div,
+                    int Static_zero,
+                    int Static_gep,
+                    int Static_conv,
+                    int Static_other,
+                    int Reg_total,
+                    int Reg_max_usage,
+                    double Reg_avg_usage,
+                    double Reg_avg_size,
+                    int Reg_reads,
+                    int Reg_writes,
+                    int Memory_Loads,
+                    int Memory_Stores,
+                    int DMA_Reads,
+                    int DMA_Writes,
+                    double Fu_leakage,
+                    double Fu_dynamic,
+                    double Fu_total_power,
+                    double Reg_leakage,
+                    double Reg_dynamic,
+                    double Reg_total_power,
+                    double Total_power,
+                    double Fu_area,
+                    double Reg_area,
+                    double Total_area):
+                    setupTime(SetupTime),
+                    simTime(SimTime),
+                    clock_period(Clock_Period),
+                    fu_clock_period(FU_Clock_Period),
+                    cycles(Cycles),
+                    runtime(Runtime),
+                    stalls(Stalls),
+                    nodes(Nodes),
+                    loadOnly(LoadOnly),
+                    storeOnly(StoreOnly),
+                    compOnly(CompOnly),
+                    loadStore(LoadStore),
+                    loadComp(LoadComp),
+                    loadStoreComp(LoadStoreComp),
+                    storeComp(StoreComp),
+                    loadOnlyStall(LoadOnlyStall),
+                    storeOnlyStall(StoreOnlyStall),
+                    compOnlyStall(CompOnlyStall),
+                    loadStoreStall(LoadStoreStall),
+                    loadCompStall(LoadCompStall),
+                    loadStoreCompStall(LoadStoreCompStall),
+                    storeCompStall(StoreCompStall),
+                    cache_ports(Cache_Ports),
+                    local_ports(Local_Ports),
+                    cache_size(Cache_Size),
+                    spm_size(SPM_Size),
+                    read_ports(Read_Ports),
+                    write_ports(Write_Ports),
+                    read_bus_width(Read_Bus_Width),
+                    write_bus_width(Write_Bus_Width),
+                    spm_leakage(SPM_Leakage),
+                    spm_read_dynamic(SPM_Read_Dynamic),
+                    spm_write_dynamic(SPM_Write_Dynamic),
+                    spm_area(SPM_Area),
+                    spm_opt_leakage(SPM_Opt_Leakage),
+                    spm_opt_area(SPM_Opt_Area),
+                    cache_leakage(Cache_Leakage),
+                    cache_read_dynamic(Cache_Read_Dynamic),
+                    cache_write_dynamic(Cache_Write_Dynamic),
+                    cache_area(Cache_Area),
+                    run_counter(Run_counter),
+                    occ_counter(Occ_counter),
+                    run_add_sub(Run_add_sub),
+                    occ_add_sub(Occ_add_sub),
+                    run_mul_div(Run_mul_div),
+                    occ_mul_div(Occ_mul_div),
+                    run_shift(Run_shift),
+                    occ_shift(Occ_shift),
+                    run_bit(Run_bit),
+                    occ_bit(Occ_bit),
+                    run_float_add_sub(Run_float_add_sub),
+                    occ_float_add_sub(Occ_float_add_sub),
+                    run_doub_add_sub(Run_doub_add_sub),
+                    occ_doub_add_sub(Occ_doub_add_sub),
+                    run_float_mul_div(Run_float_mul_div),
+                    occ_float_mul_div(Occ_float_mul_div),
+                    run_doub_mul_div(Run_doub_mul_div),
+                    occ_doub_mul_div(Occ_doub_mul_div),
+                    run_zero(Run_zero),
+                    occ_zero(Occ_zero),
+                    run_gep(Run_gep),
+                    occ_gep(Occ_gep),
+                    run_conv(Run_conv),
+                    occ_conv(Occ_conv),
+                    static_counter(Static_counter),
+                    static_add_sub(Static_add_sub),
+                    static_mul_div(Static_mul_div),
+                    static_shift(Static_shift),
+                    static_bit(Static_bit),
+                    static_float_add_sub(Static_float_add_sub),
+                    static_doub_add_sub(Static_doub_add_sub),
+                    static_float_mul_div(Static_float_mul_div),
+                    static_doub_mul_div(Static_doub_mul_div),
+                    static_zero(Static_zero),
+                    static_gep(Static_gep),
+                    static_conv(Static_conv),
+                    static_other(Static_other),
+                    reg_total(Reg_total),
+                    reg_max_usage(Reg_max_usage),
+                    reg_avg_usage(Reg_avg_usage),
+                    reg_avg_size(Reg_avg_size),
+                    reg_reads(Reg_reads),
+                    reg_writes(Reg_writes),
+                    mem_reads(Memory_Loads),
+                    mem_writes(Memory_Stores),
+                    dma_reads(DMA_Reads),
+                    dma_writes(DMA_Writes),
+                    fu_leakage(Fu_leakage),
+                    fu_dynamic(Fu_dynamic),
+                    fu_total_power(Fu_total_power),
+                    reg_leakage(Reg_leakage),
+                    reg_dynamic(Reg_dynamic),
+                    reg_total_power(Reg_total_power),
+                    total_power(Total_power),
+                    fu_area(Fu_area),
+                    reg_area(Reg_area),
+                    total_area(Total_area) { }
+
+        void print();
+        void simpleStats();
+        void unitCorrections();
+                
+};
+
+
+#endif //__DATA_COLLECTION_HH__
+
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/dma_write_fifo.cc gem5-SALAM/src/hwacc/dma_write_fifo.cc
--- gem5/src/hwacc/dma_write_fifo.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/dma_write_fifo.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,248 @@
+//------------------------------------------//
+#include "hwacc/dma_write_fifo.hh"
+//------------------------------------------//
+
+DmaWriteFifo::DmaWriteFifo(DmaPort &_port, size_t size,
+                         unsigned max_req_size,
+                         unsigned max_pending,
+                         Request::Flags flags)
+    : maxReqSize(max_req_size), fifoSize(size),
+      reqFlags(flags), port(_port),
+      buffer(size),
+      nextAddr(0), endAddr(0)
+{
+    freeRequests.resize(max_pending);
+    for (auto &e : freeRequests)
+        e.reset(new DmaDoneEvent(this, max_req_size));
+
+}
+
+DmaWriteFifo::~DmaWriteFifo()
+{
+    for (auto &p : pendingRequests) {
+        DmaDoneEvent *e(p.release());
+
+        if (e->done()) {
+            delete e;
+        } else {
+            // We can't kill in-flight DMAs, so we'll just transfer
+            // ownership to the event queue so that they get freed
+            // when they are done.
+            e->kill();
+        }
+    }
+}
+
+void
+DmaWriteFifo::serialize(CheckpointOut &cp) const
+{
+    assert(pendingRequests.empty());
+
+    SERIALIZE_CONTAINER(buffer);
+    SERIALIZE_SCALAR(endAddr);
+    SERIALIZE_SCALAR(nextAddr);
+}
+
+void
+DmaWriteFifo::unserialize(CheckpointIn &cp)
+{
+    UNSERIALIZE_CONTAINER(buffer);
+    UNSERIALIZE_SCALAR(endAddr);
+    UNSERIALIZE_SCALAR(nextAddr);
+}
+
+bool
+DmaWriteFifo::canFill(size_t len)
+{
+    if ((buffer.size()+len) <= fifoSize) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool
+DmaWriteFifo::tryFill(uint8_t *src, size_t len)
+{
+    if ((buffer.size()+len) <= fifoSize) {
+        buffer.write(src, len);
+        resumeEmpty();
+        return true;
+    } else {
+        return false;
+    }
+}
+
+void
+DmaWriteFifo::fill(uint8_t *src, size_t len)
+{
+    const bool success(tryFill(src, len));
+    panic_if(!success, "Buffer overrun in DmaWriteFifo::fill()\n");
+}
+
+void
+DmaWriteFifo::startEmpty(Addr start, size_t size)
+{
+    assert(atEndOfBlock());
+
+    nextAddr = start;
+    endAddr = start + size;
+    resumeEmpty();
+}
+
+void
+DmaWriteFifo::stopEmpty()
+{
+    // Prevent new DMA requests by setting the next address to the end
+    // address. Pending requests will still complete.
+    nextAddr = endAddr;
+
+    // Flag in-flight accesses as canceled. This prevents their data
+    // from being written to the FIFO.
+    for (auto &p : pendingRequests)
+        p->cancel();
+}
+
+void
+DmaWriteFifo::resumeEmpty()
+{
+    // Don't try to fetch more data if we are draining. This ensures
+    // that the DMA engine settles down before we checkpoint it.
+    if (drainState() == DrainState::Draining)
+        return;
+
+    const bool old_eob(atEndOfBlock());
+
+    if (port.sys->bypassCaches())
+        resumeEmptyFunctional();
+    else
+        resumeEmptyTiming();
+
+    if (!old_eob && atEndOfBlock())
+        onEndOfBlock();
+}
+
+void
+DmaWriteFifo::resumeEmptyFunctional()
+{
+    const size_t fifo_space = buffer.capacity() - buffer.size();
+    const size_t kvm_watermark = port.sys->cacheLineSize();
+    if (fifo_space >= kvm_watermark || buffer.capacity() < kvm_watermark) {
+        const size_t block_remaining = endAddr - nextAddr;
+        const size_t xfer_size = std::min(fifo_space, block_remaining);
+        std::vector<uint8_t> tmp_buffer(xfer_size);
+
+        assert(pendingRequests.empty());
+        DPRINTF(DMA, "KVM Bypassing startAddr=%#x xfer_size=%#x " \
+                "fifo_space=%#x block_remaining=%#x\n",
+                nextAddr, xfer_size, fifo_space, block_remaining);
+
+        port.sys->physProxy.readBlob(nextAddr, tmp_buffer.data(), xfer_size);
+        buffer.write(tmp_buffer.begin(), xfer_size);
+        nextAddr += xfer_size;
+    }
+}
+
+void
+DmaWriteFifo::resumeEmptyTiming()
+{
+    size_t size_pending(0);
+    for (auto &e : pendingRequests)
+        size_pending += e->requestSize();
+
+    while (!freeRequests.empty() && !atEndOfBlock()) {
+        const size_t req_size(std::min(maxReqSize, endAddr - nextAddr));
+        if ((int64_t)(buffer.size() - size_pending - req_size) < 0)
+            break;
+
+        DmaDoneEventUPtr event(std::move(freeRequests.front()));
+        freeRequests.pop_front();
+        assert(event);
+
+        event->reset(req_size);
+        buffer.read(event->data(), req_size);
+        port.dmaAction(MemCmd::WriteReq, nextAddr, req_size, event.get(),
+                       event->data(), 0, reqFlags);
+        nextAddr += req_size;
+        size_pending += req_size;
+
+        pendingRequests.emplace_back(std::move(event));
+    }
+}
+
+void
+DmaWriteFifo::dmaDone()
+{
+    const bool old_active(isActive());
+
+    handlePending();
+    resumeEmpty();
+
+    if (old_active && !isActive())
+        onIdle();
+}
+
+void
+DmaWriteFifo::handlePending()
+{
+    while (!pendingRequests.empty() && pendingRequests.front()->done()) {
+        // Get the first finished pending request
+        DmaDoneEventUPtr event(std::move(pendingRequests.front()));
+        pendingRequests.pop_front();
+
+        if (event->canceled())
+            buffer.write(event->data(), event->requestSize());
+
+        // Move the event to the list of free requests
+        freeRequests.emplace_back(std::move(event));
+    }
+
+    if (pendingRequests.empty())
+        signalDrainDone();
+}
+
+DrainState
+DmaWriteFifo::drain()
+{
+    return pendingRequests.empty() ? DrainState::Drained : DrainState::Draining;
+}
+
+
+DmaWriteFifo::DmaDoneEvent::DmaDoneEvent(DmaWriteFifo *_parent,
+                                        size_t max_size)
+    : parent(_parent), _done(false), _canceled(false), _data(max_size, 0)
+{
+}
+
+void
+DmaWriteFifo::DmaDoneEvent::kill()
+{
+    parent = nullptr;
+    setFlags(AutoDelete);
+}
+
+void
+DmaWriteFifo::DmaDoneEvent::cancel()
+{
+    _canceled = true;
+}
+
+void
+DmaWriteFifo::DmaDoneEvent::reset(size_t size)
+{
+    assert(size <= _data.size());
+    _done = false;
+    _canceled = false;
+    _requestSize = size;
+}
+
+void
+DmaWriteFifo::DmaDoneEvent::process()
+{
+    if (!parent)
+        return;
+
+    assert(!_done);
+    _done = true;
+    parent->dmaDone();
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/dma_write_fifo.hh gem5-SALAM/src/hwacc/dma_write_fifo.hh
--- gem5/src/hwacc/dma_write_fifo.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/dma_write_fifo.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,214 @@
+#ifndef __HWACC_DMA_WRITE_FIFO_HH__
+#define __HWACC_DMA_WRITE_FIFO_HH__
+//------------------------------------------//
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "dev/dma_device.hh"
+//------------------------------------------//
+
+using namespace gem5;
+
+class DmaWriteFifo : public Drainable, public Serializable
+{
+  public:
+    DmaWriteFifo(DmaPort &port, size_t size,
+                unsigned max_req_size,
+                unsigned max_pending,
+                Request::Flags flags = 0);
+
+    ~DmaWriteFifo();
+
+  public: // Serializable
+    void serialize(CheckpointOut &cp) const override;
+    void unserialize(CheckpointIn &cp) override;
+
+  public: // Drainable
+    DrainState drain() override;
+
+  public: // FIFO access
+    /**
+     * @{
+     * @name FIFO access
+     */
+    /**
+     * Try to read data from the FIFO.
+     *
+     * This method reads len bytes of data from the FIFO and stores
+     * them in the memory location pointed to by dst. The method
+     * fails, and no data is written to the buffer, if the FIFO
+     * doesn't contain enough data to satisfy the request.
+     *
+     * @param dst Pointer to a destination buffer
+     * @param len Amount of data to read.
+     * @return true on success, false otherwise.
+     */
+    bool canFill(size_t len);
+
+    bool tryFill(uint8_t *src, size_t len);
+
+    template<typename T>
+    bool tryFill(T &value) {
+        return tryFill(static_cast<T *>(&value), sizeof(T));
+    };
+
+    /**
+     * Read data from the FIFO and panic on failure.
+     *
+     * @see tryFill()
+     *
+     * @param dst Pointer to a destination buffer
+     * @param len Amount of data to read.
+     */
+    void fill(uint8_t *src, size_t len);
+
+    template<typename T>
+    T fill() {
+        T value;
+        fill(static_cast<uint8_t *>(&value), sizeof(T));
+        return value;
+    };
+
+    /** Get the amount of data stored in the FIFO */
+    size_t size() const { return buffer.size(); }
+    /** Flush the FIFO */
+    void flush() { buffer.flush(); }
+
+    /** @} */
+  public: // FIFO fill control
+    /**
+     * @{
+     * @name FIFO fill control
+     */
+    /**
+     * Start filling the FIFO.
+     *
+     * @warn It's considered an error to call start on an active DMA
+     * engine unless the last request from the active block has been
+     * sent (i.e., atEndOfBlock() is true).
+     *
+     * @param start Physical address to copy from.
+     * @param size Size of the block to copy.
+     */
+    void startEmpty(Addr start, size_t size);
+
+    /**
+     * Stop the DMA engine.
+     *
+     * Stop filling the FIFO and ignore incoming responses for pending
+     * requests. The onEndOfBlock() callback will not be called after
+     * this method has been invoked. However, once the last response
+     * has been received, the onIdle() callback will still be called.
+     */
+    void stopEmpty();
+
+    /**
+     * Has the DMA engine sent out the last request for the active
+     * block?
+     */
+    bool atEndOfBlock() const {
+        return nextAddr == endAddr;
+    }
+
+    /**
+     * Is the DMA engine active (i.e., are there still in-flight
+     * accesses)?
+     */
+    bool isActive() const {
+        return !(pendingRequests.empty() && atEndOfBlock());
+    }
+
+    /** @} */
+  protected: // Callbacks
+    /**
+     * @{
+     * @name Callbacks
+     */
+    /**
+     * End of block callback
+     *
+     * This callback is called <i>once</i> after the last access in a
+     * block has been sent. It is legal for a derived class to call
+     * startFill() from this method to initiate a transfer.
+     */
+    virtual void onEndOfBlock() {};
+
+    /**
+     * Last response received callback
+     *
+     * This callback is called when the DMA engine becomes idle (i.e.,
+     * there are no pending requests).
+     *
+     * It is possible for a DMA engine to reach the end of block and
+     * become idle at the same tick. In such a case, the
+     * onEndOfBlock() callback will be called first. This callback
+     * will <i>NOT</i> be called if that callback initiates a new DMA transfer.
+     */
+    virtual void onIdle() {};
+
+    /** @} */
+  private: // Configuration
+    /** Maximum request size in bytes */
+    const Addr maxReqSize;
+    /** Maximum FIFO size in bytes */
+    const size_t fifoSize;
+    /** Request flags */
+    const Request::Flags reqFlags;
+
+    DmaPort &port;
+
+  private:
+    class DmaDoneEvent : public Event
+    {
+      public:
+        DmaDoneEvent(DmaWriteFifo *_parent, size_t max_size);
+
+        void kill();
+        void cancel();
+        bool canceled() const { return _canceled; }
+        void reset(size_t size);
+        void process();
+
+        bool done() const { return _done; }
+        size_t requestSize() const { return _requestSize; }
+        const uint8_t *data() const { return _data.data(); }
+        uint8_t *data() { return _data.data(); }
+
+      private:
+        DmaWriteFifo *parent;
+        bool _done;
+        bool _canceled;
+        size_t _requestSize;
+        std::vector<uint8_t> _data;
+    };
+
+    typedef std::unique_ptr<DmaDoneEvent> DmaDoneEventUPtr;
+
+    /**
+     * DMA request done, handle incoming data and issue new
+     * request.
+     */
+    void dmaDone();
+
+    /** Handle pending requests that have been flagged as done. */
+    void handlePending();
+
+    /** Try to issue new DMA requests or bypass DMA requests*/
+    void resumeEmpty();
+
+    /** Try to issue new DMA requests during normal execution*/
+    void resumeEmptyTiming();
+
+    /** Try to bypass DMA requests in KVM execution mode */
+    void resumeEmptyFunctional();
+
+  private: // Internal state
+    Fifo<uint8_t> buffer;
+
+    Addr nextAddr;
+    Addr endAddr;
+
+    std::deque<DmaDoneEventUPtr> pendingRequests;
+    std::deque<DmaDoneEventUPtr> freeRequests;
+};
+
+
+#endif //__HWACC_DMA_WRITE_FIFO_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/FunctionalUnits.py gem5-SALAM/src/hwacc/FunctionalUnits.py
--- gem5/src/hwacc/FunctionalUnits.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/FunctionalUnits.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,399 @@
+# AUTO-GENERATED FILE
+
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class FunctionalUnits(SimObject):
+	# SimObject type
+	type = 'FunctionalUnits'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/src/functional_units.hh"
+
+	double_multiplier = Param.DoubleMultiplier(Parent.any, "double_multiplier functional unit SimObject.")
+	bit_register = Param.BitRegister(Parent.any, "bit_register functional unit SimObject.")
+	bitwise_operations = Param.BitwiseOperations(Parent.any, "bitwise_operations functional unit SimObject.")
+	double_adder = Param.DoubleAdder(Parent.any, "double_adder functional unit SimObject.")
+	float_divider = Param.FloatDivider(Parent.any, "float_divider functional unit SimObject.")
+	bit_shifter = Param.BitShifter(Parent.any, "bit_shifter functional unit SimObject.")
+	integer_multiplier = Param.IntegerMultiplier(Parent.any, "integer_multiplier functional unit SimObject.")
+	integer_adder = Param.IntegerAdder(Parent.any, "integer_adder functional unit SimObject.")
+	double_divider = Param.DoubleDivider(Parent.any, "double_divider functional unit SimObject.")
+	float_adder = Param.FloatAdder(Parent.any, "float_adder functional unit SimObject.")
+	float_multiplier = Param.FloatMultiplier(Parent.any, "float_multiplier functional unit SimObject.")
+
+#AUTO-GENERATED CLASSES
+class DoubleMultiplier(SimObject):
+	# SimObject type
+	type = 'DoubleMultiplier'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/double_multiplier.hh"
+	#HW Params
+	alias = Param.String("double_multiplier", "Default values set from double_multiplier.yml")
+	stages = Param.UInt32(3, "Default values set from double_multiplier.yml")
+	cycles = Param.UInt32(5, "Default values set from double_multiplier.yml")
+	enum_value = Param.UInt32(9, "Default values set from double_multiplier.yml")
+	int_size = Param.String("none", "Default values set from double_multiplier.yml")
+	int_sign = Param.String("none", "Default values set from double_multiplier.yml")
+	int_apmode = Param.Bool(False, "Default values set from double_multiplier.yml")
+	fp_size = Param.String("double", "Default values set from double_multiplier.yml")
+	fp_sign = Param.String("any", "Default values set from double_multiplier.yml")
+	fp_apmode = Param.Bool(True, "Default values set from double_multiplier.yml")
+	ptr_size = Param.String("none", "Default values set from double_multiplier.yml")
+	ptr_sign = Param.String("none", "Default values set from double_multiplier.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from double_multiplier.yml")
+	limit = Param.UInt32(0, "Default values set from double_multiplier.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from double_multiplier.yml")
+	energy_units = Param.String("pJ", "Default values set from double_multiplier.yml")
+	time_units = Param.String("ns", "Default values set from double_multiplier.yml")
+	area_units = Param.String("um^2", "Default values set from double_multiplier.yml")
+	fu_latency = Param.UInt32(5, "Default values set from double_multiplier.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from double_multiplier.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from double_multiplier.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from double_multiplier.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from double_multiplier.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from double_multiplier.yml")
+	area = Param.UInt32(5.981433, "Default values set from double_multiplier.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from double_multiplier.yml")
+
+class BitRegister(SimObject):
+	# SimObject type
+	type = 'BitRegister'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/bit_register.hh"
+	#HW Params
+	alias = Param.String("bit_register", "Default values set from bit_register.yml")
+	stages = Param.UInt32(0, "Default values set from bit_register.yml")
+	cycles = Param.UInt32(0, "Default values set from bit_register.yml")
+	enum_value = Param.UInt32(15, "Default values set from bit_register.yml")
+	int_size = Param.String("any", "Default values set from bit_register.yml")
+	int_sign = Param.String("any", "Default values set from bit_register.yml")
+	int_apmode = Param.Bool(True, "Default values set from bit_register.yml")
+	fp_size = Param.String("any", "Default values set from bit_register.yml")
+	fp_sign = Param.String("any", "Default values set from bit_register.yml")
+	fp_apmode = Param.Bool(True, "Default values set from bit_register.yml")
+	ptr_size = Param.String("any", "Default values set from bit_register.yml")
+	ptr_sign = Param.String("any", "Default values set from bit_register.yml")
+	ptr_apmode = Param.Bool(True, "Default values set from bit_register.yml")
+	limit = Param.UInt32(0, "Default values set from bit_register.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from bit_register.yml")
+	energy_units = Param.String("pJ", "Default values set from bit_register.yml")
+	time_units = Param.String("ns", "Default values set from bit_register.yml")
+	area_units = Param.String("um^2", "Default values set from bit_register.yml")
+	fu_latency = Param.UInt32(5, "Default values set from bit_register.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from bit_register.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from bit_register.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from bit_register.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from bit_register.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from bit_register.yml")
+	area = Param.UInt32(5.981433, "Default values set from bit_register.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from bit_register.yml")
+
+class BitwiseOperations(SimObject):
+	# SimObject type
+	type = 'BitwiseOperations'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/bitwise_operations.hh"
+	#HW Params
+	alias = Param.String("bitwise_operations", "Default values set from bitwise_operations.yml")
+	stages = Param.UInt32(1, "Default values set from bitwise_operations.yml")
+	cycles = Param.UInt32(1, "Default values set from bitwise_operations.yml")
+	enum_value = Param.UInt32(4, "Default values set from bitwise_operations.yml")
+	int_size = Param.String("any", "Default values set from bitwise_operations.yml")
+	int_sign = Param.String("any", "Default values set from bitwise_operations.yml")
+	int_apmode = Param.Bool(True, "Default values set from bitwise_operations.yml")
+	fp_size = Param.String("none", "Default values set from bitwise_operations.yml")
+	fp_sign = Param.String("none", "Default values set from bitwise_operations.yml")
+	fp_apmode = Param.Bool(False, "Default values set from bitwise_operations.yml")
+	ptr_size = Param.String("none", "Default values set from bitwise_operations.yml")
+	ptr_sign = Param.String("none", "Default values set from bitwise_operations.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from bitwise_operations.yml")
+	limit = Param.UInt32(0, "Default values set from bitwise_operations.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from bitwise_operations.yml")
+	energy_units = Param.String("pJ", "Default values set from bitwise_operations.yml")
+	time_units = Param.String("ns", "Default values set from bitwise_operations.yml")
+	area_units = Param.String("um^2", "Default values set from bitwise_operations.yml")
+	fu_latency = Param.UInt32(5, "Default values set from bitwise_operations.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from bitwise_operations.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from bitwise_operations.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from bitwise_operations.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from bitwise_operations.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from bitwise_operations.yml")
+	area = Param.UInt32(5.981433, "Default values set from bitwise_operations.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from bitwise_operations.yml")
+
+class DoubleAdder(SimObject):
+	# SimObject type
+	type = 'DoubleAdder'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/double_adder.hh"
+	#HW Params
+	alias = Param.String("double_adder", "Default values set from double_adder.yml")
+	stages = Param.UInt32(3, "Default values set from double_adder.yml")
+	cycles = Param.UInt32(5, "Default values set from double_adder.yml")
+	enum_value = Param.UInt32(6, "Default values set from double_adder.yml")
+	int_size = Param.String("none", "Default values set from double_adder.yml")
+	int_sign = Param.String("none", "Default values set from double_adder.yml")
+	int_apmode = Param.Bool(False, "Default values set from double_adder.yml")
+	fp_size = Param.String("double", "Default values set from double_adder.yml")
+	fp_sign = Param.String("any", "Default values set from double_adder.yml")
+	fp_apmode = Param.Bool(True, "Default values set from double_adder.yml")
+	ptr_size = Param.String("none", "Default values set from double_adder.yml")
+	ptr_sign = Param.String("none", "Default values set from double_adder.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from double_adder.yml")
+	limit = Param.UInt32(0, "Default values set from double_adder.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from double_adder.yml")
+	energy_units = Param.String("pJ", "Default values set from double_adder.yml")
+	time_units = Param.String("ns", "Default values set from double_adder.yml")
+	area_units = Param.String("um^2", "Default values set from double_adder.yml")
+	fu_latency = Param.UInt32(5, "Default values set from double_adder.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from double_adder.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from double_adder.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from double_adder.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from double_adder.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from double_adder.yml")
+	area = Param.UInt32(5.981433, "Default values set from double_adder.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from double_adder.yml")
+
+class FloatDivider(SimObject):
+	# SimObject type
+	type = 'FloatDivider'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/float_divider.hh"
+	#HW Params
+	alias = Param.String("float_divider", "Default values set from float_divider.yml")
+	stages = Param.UInt32(3, "Default values set from float_divider.yml")
+	cycles = Param.UInt32(16, "Default values set from float_divider.yml")
+	enum_value = Param.UInt32(8, "Default values set from float_divider.yml")
+	int_size = Param.String("none", "Default values set from float_divider.yml")
+	int_sign = Param.String("none", "Default values set from float_divider.yml")
+	int_apmode = Param.Bool(False, "Default values set from float_divider.yml")
+	fp_size = Param.String("single", "Default values set from float_divider.yml")
+	fp_sign = Param.String("any", "Default values set from float_divider.yml")
+	fp_apmode = Param.Bool(True, "Default values set from float_divider.yml")
+	ptr_size = Param.String("none", "Default values set from float_divider.yml")
+	ptr_sign = Param.String("none", "Default values set from float_divider.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from float_divider.yml")
+	limit = Param.UInt32(0, "Default values set from float_divider.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from float_divider.yml")
+	energy_units = Param.String("pJ", "Default values set from float_divider.yml")
+	time_units = Param.String("ns", "Default values set from float_divider.yml")
+	area_units = Param.String("um^2", "Default values set from float_divider.yml")
+	fu_latency = Param.UInt32(5, "Default values set from float_divider.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from float_divider.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from float_divider.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from float_divider.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from float_divider.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from float_divider.yml")
+	area = Param.UInt32(5.981433, "Default values set from float_divider.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from float_divider.yml")
+
+class BitShifter(SimObject):
+	# SimObject type
+	type = 'BitShifter'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/bit_shifter.hh"
+	#HW Params
+	alias = Param.String("bit_shifter", "Default values set from bit_shifter.yml")
+	stages = Param.UInt32(1, "Default values set from bit_shifter.yml")
+	cycles = Param.UInt32(1, "Default values set from bit_shifter.yml")
+	enum_value = Param.UInt32(3, "Default values set from bit_shifter.yml")
+	int_size = Param.String("any", "Default values set from bit_shifter.yml")
+	int_sign = Param.String("any", "Default values set from bit_shifter.yml")
+	int_apmode = Param.Bool(True, "Default values set from bit_shifter.yml")
+	fp_size = Param.String("none", "Default values set from bit_shifter.yml")
+	fp_sign = Param.String("none", "Default values set from bit_shifter.yml")
+	fp_apmode = Param.Bool(False, "Default values set from bit_shifter.yml")
+	ptr_size = Param.String("none", "Default values set from bit_shifter.yml")
+	ptr_sign = Param.String("none", "Default values set from bit_shifter.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from bit_shifter.yml")
+	limit = Param.UInt32(0, "Default values set from bit_shifter.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from bit_shifter.yml")
+	energy_units = Param.String("pJ", "Default values set from bit_shifter.yml")
+	time_units = Param.String("ns", "Default values set from bit_shifter.yml")
+	area_units = Param.String("um^2", "Default values set from bit_shifter.yml")
+	fu_latency = Param.UInt32(5, "Default values set from bit_shifter.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from bit_shifter.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from bit_shifter.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from bit_shifter.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from bit_shifter.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from bit_shifter.yml")
+	area = Param.UInt32(5.981433, "Default values set from bit_shifter.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from bit_shifter.yml")
+
+class IntegerMultiplier(SimObject):
+	# SimObject type
+	type = 'IntegerMultiplier'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/integer_multiplier.hh"
+	#HW Params
+	alias = Param.String("integer_multiplier", "Default values set from integer_multiplier.yml")
+	stages = Param.UInt32(1, "Default values set from integer_multiplier.yml")
+	cycles = Param.UInt32(1, "Default values set from integer_multiplier.yml")
+	enum_value = Param.UInt32(2, "Default values set from integer_multiplier.yml")
+	int_size = Param.String("any", "Default values set from integer_multiplier.yml")
+	int_sign = Param.String("any", "Default values set from integer_multiplier.yml")
+	int_apmode = Param.Bool(True, "Default values set from integer_multiplier.yml")
+	fp_size = Param.String("none", "Default values set from integer_multiplier.yml")
+	fp_sign = Param.String("none", "Default values set from integer_multiplier.yml")
+	fp_apmode = Param.Bool(False, "Default values set from integer_multiplier.yml")
+	ptr_size = Param.String("none", "Default values set from integer_multiplier.yml")
+	ptr_sign = Param.String("none", "Default values set from integer_multiplier.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from integer_multiplier.yml")
+	limit = Param.UInt32(0, "Default values set from integer_multiplier.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from integer_multiplier.yml")
+	energy_units = Param.String("pJ", "Default values set from integer_multiplier.yml")
+	time_units = Param.String("ns", "Default values set from integer_multiplier.yml")
+	area_units = Param.String("um^2", "Default values set from integer_multiplier.yml")
+	fu_latency = Param.UInt32(5, "Default values set from integer_multiplier.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from integer_multiplier.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from integer_multiplier.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from integer_multiplier.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from integer_multiplier.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from integer_multiplier.yml")
+	area = Param.UInt32(5.981433, "Default values set from integer_multiplier.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from integer_multiplier.yml")
+
+class IntegerAdder(SimObject):
+	# SimObject type
+	type = 'IntegerAdder'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/integer_adder.hh"
+	#HW Params
+	alias = Param.String("integer_adder", "Default values set from integer_adder.yml")
+	stages = Param.UInt32(1, "Default values set from integer_adder.yml")
+	cycles = Param.UInt32(1, "Default values set from integer_adder.yml")
+	enum_value = Param.UInt32(1, "Default values set from integer_adder.yml")
+	int_size = Param.String("any", "Default values set from integer_adder.yml")
+	int_sign = Param.String("any", "Default values set from integer_adder.yml")
+	int_apmode = Param.Bool(True, "Default values set from integer_adder.yml")
+	fp_size = Param.String("none", "Default values set from integer_adder.yml")
+	fp_sign = Param.String("none", "Default values set from integer_adder.yml")
+	fp_apmode = Param.Bool(False, "Default values set from integer_adder.yml")
+	ptr_size = Param.String("none", "Default values set from integer_adder.yml")
+	ptr_sign = Param.String("none", "Default values set from integer_adder.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from integer_adder.yml")
+	limit = Param.UInt32(0, "Default values set from integer_adder.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from integer_adder.yml")
+	energy_units = Param.String("pJ", "Default values set from integer_adder.yml")
+	time_units = Param.String("ns", "Default values set from integer_adder.yml")
+	area_units = Param.String("um^2", "Default values set from integer_adder.yml")
+	fu_latency = Param.UInt32(5, "Default values set from integer_adder.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from integer_adder.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from integer_adder.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from integer_adder.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from integer_adder.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from integer_adder.yml")
+	area = Param.UInt32(5.981433, "Default values set from integer_adder.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from integer_adder.yml")
+
+class DoubleDivider(SimObject):
+	# SimObject type
+	type = 'DoubleDivider'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/double_divider.hh"
+	#HW Params
+	alias = Param.String("double_divider", "Default values set from double_divider.yml")
+	stages = Param.UInt32(3, "Default values set from double_divider.yml")
+	cycles = Param.UInt32(16, "Default values set from double_divider.yml")
+	enum_value = Param.UInt32(10, "Default values set from double_divider.yml")
+	int_size = Param.String("none", "Default values set from double_divider.yml")
+	int_sign = Param.String("none", "Default values set from double_divider.yml")
+	int_apmode = Param.Bool(False, "Default values set from double_divider.yml")
+	fp_size = Param.String("double", "Default values set from double_divider.yml")
+	fp_sign = Param.String("any", "Default values set from double_divider.yml")
+	fp_apmode = Param.Bool(True, "Default values set from double_divider.yml")
+	ptr_size = Param.String("none", "Default values set from double_divider.yml")
+	ptr_sign = Param.String("none", "Default values set from double_divider.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from double_divider.yml")
+	limit = Param.UInt32(0, "Default values set from double_divider.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from double_divider.yml")
+	energy_units = Param.String("pJ", "Default values set from double_divider.yml")
+	time_units = Param.String("ns", "Default values set from double_divider.yml")
+	area_units = Param.String("um^2", "Default values set from double_divider.yml")
+	fu_latency = Param.UInt32(5, "Default values set from double_divider.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from double_divider.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from double_divider.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from double_divider.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from double_divider.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from double_divider.yml")
+	area = Param.UInt32(5.981433, "Default values set from double_divider.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from double_divider.yml")
+
+class FloatAdder(SimObject):
+	# SimObject type
+	type = 'FloatAdder'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/float_adder.hh"
+	#HW Params
+	alias = Param.String("float_adder", "Default values set from float_adder.yml")
+	stages = Param.UInt32(3, "Default values set from float_adder.yml")
+	cycles = Param.UInt32(5, "Default values set from float_adder.yml")
+	enum_value = Param.UInt32(5, "Default values set from float_adder.yml")
+	int_size = Param.String("none", "Default values set from float_adder.yml")
+	int_sign = Param.String("none", "Default values set from float_adder.yml")
+	int_apmode = Param.Bool(False, "Default values set from float_adder.yml")
+	fp_size = Param.String("single", "Default values set from float_adder.yml")
+	fp_sign = Param.String("any", "Default values set from float_adder.yml")
+	fp_apmode = Param.Bool(True, "Default values set from float_adder.yml")
+	ptr_size = Param.String("none", "Default values set from float_adder.yml")
+	ptr_sign = Param.String("none", "Default values set from float_adder.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from float_adder.yml")
+	limit = Param.UInt32(0, "Default values set from float_adder.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from float_adder.yml")
+	energy_units = Param.String("pJ", "Default values set from float_adder.yml")
+	time_units = Param.String("ns", "Default values set from float_adder.yml")
+	area_units = Param.String("um^2", "Default values set from float_adder.yml")
+	fu_latency = Param.UInt32(5, "Default values set from float_adder.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from float_adder.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from float_adder.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from float_adder.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from float_adder.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from float_adder.yml")
+	area = Param.UInt32(5.981433, "Default values set from float_adder.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from float_adder.yml")
+
+class FloatMultiplier(SimObject):
+	# SimObject type
+	type = 'FloatMultiplier'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/functionalunits/float_multiplier.hh"
+	#HW Params
+	alias = Param.String("float_multiplier", "Default values set from float_multiplier.yml")
+	stages = Param.UInt32(3, "Default values set from float_multiplier.yml")
+	cycles = Param.UInt32(5, "Default values set from float_multiplier.yml")
+	enum_value = Param.UInt32(7, "Default values set from float_multiplier.yml")
+	int_size = Param.String("none", "Default values set from float_multiplier.yml")
+	int_sign = Param.String("none", "Default values set from float_multiplier.yml")
+	int_apmode = Param.Bool(False, "Default values set from float_multiplier.yml")
+	fp_size = Param.String("single", "Default values set from float_multiplier.yml")
+	fp_sign = Param.String("any", "Default values set from float_multiplier.yml")
+	fp_apmode = Param.Bool(True, "Default values set from float_multiplier.yml")
+	ptr_size = Param.String("none", "Default values set from float_multiplier.yml")
+	ptr_sign = Param.String("none", "Default values set from float_multiplier.yml")
+	ptr_apmode = Param.Bool(False, "Default values set from float_multiplier.yml")
+	limit = Param.UInt32(0, "Default values set from float_multiplier.yml")
+	#Power Params
+	power_units = Param.String("mW", "Default values set from float_multiplier.yml")
+	energy_units = Param.String("pJ", "Default values set from float_multiplier.yml")
+	time_units = Param.String("ns", "Default values set from float_multiplier.yml")
+	area_units = Param.String("um^2", "Default values set from float_multiplier.yml")
+	fu_latency = Param.UInt32(5, "Default values set from float_multiplier.yml")
+	internal_power = Param.UInt32(0.009743773, "Default values set from float_multiplier.yml")
+	switch_power = Param.UInt32(0.007400587, "Default values set from float_multiplier.yml")
+	dynamic_power = Param.UInt32(0.001800732, "Default values set from float_multiplier.yml")
+	dynamic_energy = Param.UInt32(0.009003937, "Default values set from float_multiplier.yml")
+	leakage_power = Param.UInt32(7.395312e-05, "Default values set from float_multiplier.yml")
+	area = Param.UInt32(5.981433, "Default values set from float_multiplier.yml")
+	path_delay = Param.UInt32(1.75, "Default values set from float_multiplier.yml")
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/.gitignore gem5-SALAM/src/hwacc/.gitignore
--- gem5/src/hwacc/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/.gitignore	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,2 @@
+.vscode
+Backup
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWInterface.py gem5-SALAM/src/hwacc/HWInterface.py
--- gem5/src/hwacc/HWInterface.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWInterface.py	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,24 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+from m5.objects.CycleCounts import CycleCounts
+from m5.objects.FunctionalUnits import FunctionalUnits
+from m5.objects.HWStatistics import HWStatistics
+from m5.objects.InstConfig import InstConfig
+from m5.objects.SALAMPowerModel import SALAMPowerModel
+from m5.objects.SimulatorConfig import SimulatorConfig
+from m5.objects.InstOpCodes import InstOpCodes
+
+#Cycle Counts
+class HWInterface(SimObject):
+    type = "HWInterface"
+    cxx_header = "hwacc/HWModeling/src/hw_interface.hh"
+
+    cycle_counts = Param.CycleCounts(Parent.any, "Cycle Counts")
+    functional_units = Param.FunctionalUnits(Parent.any, "Functional Units")
+    hw_statistics = Param.HWStatistics(Parent.any, "Hardware Statistics")
+    inst_config = Param.InstConfig(Parent.any, "Instruction Configuration")
+    salam_power_model = Param.SALAMPowerModel(Parent.any, "SALAM Power Model")
+    simulator_config = Param.SimulatorConfig(Parent.any, "Simulation Configuration")
+    opcodes = Param.InstOpCodes(Parent.any, "Instruction LLVM OpCode Enumeration to SALAM Type")
+    
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/base.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/base.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/base.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/base.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,135 @@
+#ifndef __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__
+#define __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__
+
+#include "../../src/salam_power_model.hh"
+
+#include <map>
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+class FunctionalUnitBase
+{
+	private:
+	protected:
+		std::string _alias;
+		uint32_t _stages;
+		uint32_t _cycles;
+		uint32_t _enum_value;
+		std::string _int_size;
+		std::string _int_sign;
+		bool _int_apmode;
+		std::string _fp_size;
+		std::string _fp_sign;
+		bool _fp_apmode;
+		std::string _ptr_size;
+		std::string _ptr_sign;
+		bool _ptr_apmode;
+		uint32_t _limit;
+		std::string _power_units;
+		std::string _energy_units;
+		std::string _time_units;
+		std::string _area_units;
+		uint32_t _fu_latency;
+		double _internal_power;
+		double _switch_power;
+		double _dynamic_power;
+		double _dynamic_energy;
+		double _leakage_power;
+		double _area;
+		double _path_delay;
+
+		uint64_t _available;
+
+		uint64_t _in_use = 0;
+
+	public:
+		FunctionalUnitBase();
+		FunctionalUnitBase( std::string alias,
+							uint32_t stages,
+							uint32_t cycles,
+							uint32_t enum_value,
+							std::string int_size,
+							std::string int_sign,
+							bool int_apmode,
+							std::string fp_size,
+							std::string fp_sign,
+							bool fp_apmode,
+							std::string ptr_size,
+							std::string ptr_sign,
+							bool ptr_apmode,
+							uint32_t limit,
+							std::string power_units,
+							std::string energy_units,
+							std::string time_units,
+							std::string area_units,
+							uint32_t fu_latency,
+							double internal_power,
+							double switch_power,
+							double dynamic_power,
+							double dynamic_energy,
+							double leakage_power,
+							double area,
+							double path_delay) :
+							_alias(alias),
+							_stages(stages),
+							_cycles(cycles),
+							_enum_value(enum_value),
+							_int_size(int_size),
+							_int_sign(int_sign),
+							_int_apmode(int_apmode),
+							_fp_size(fp_size),
+							_fp_sign(fp_sign),
+							_fp_apmode(fp_apmode),
+							_ptr_size(ptr_size),
+							_ptr_sign(ptr_sign),
+							_ptr_apmode(ptr_apmode),
+							_limit(limit),
+							_power_units(power_units),
+							_energy_units(energy_units),
+							_time_units(time_units),
+							_area_units(area_units),
+							_fu_latency(fu_latency),
+							_internal_power(internal_power),
+							_switch_power(switch_power),
+							_dynamic_power(dynamic_power),
+							_dynamic_energy(dynamic_energy),
+							_leakage_power(leakage_power),
+							_area(area),
+							_path_delay(path_delay) { }
+		std::string get_alias() { return _alias; }
+		uint32_t get_stages() { return _stages; }
+		uint32_t get_cycles() { return _cycles; }
+		uint64_t get_in_use() { return _in_use; }
+		uint32_t get_enum_value() { return _enum_value; }
+		std::string get_int_size() { return _int_size; }
+		std::string get_int_sign() { return _int_sign; }
+		bool get_int_apmode() { return _int_apmode; }
+		std::string get_fp_size() { return _fp_size; }
+		std::string get_fp_sign() { return _fp_sign; }
+		bool get_fp_apmode() { return _fp_apmode; }
+		std::string get_ptr_size() { return _ptr_size; }
+		std::string get_ptr_sign() { return _ptr_sign; }
+		bool get_ptr_apmode() { return _ptr_apmode; }
+		uint32_t get_limit() { return _limit; }
+		std::string get_power_units() { return _power_units; }
+		std::string get_energy_units() { return _energy_units; }
+		std::string get_time_units() { return _time_units; }
+		std::string get_area_units() { return _area_units; }
+		uint32_t get_fu_latency() { return _fu_latency; }
+		double get_internal_power() { return _internal_power; }
+		double get_switch_power() { return _switch_power; }
+		double get_dynamic_power() { return _dynamic_power; }
+		double get_dynamic_energy() { return _dynamic_energy; }
+		double get_leakage_power() { return _leakage_power; }
+		double get_area() { return _area; }
+		double get_path_delay() { return _path_delay; }
+		bool is_available() { return (_in_use >= _available); }
+		void use_functional_unit() { _in_use++; }
+		void clear_functional_unit() { _in_use--; }
+		void set_functional_unit_limit(uint64_t available) { _available = available; }
+		void inc_functional_unit_limit() { _available++; }
+		uint64_t get_functional_unit_limit() { return _available; }
+
+};
+#endif // __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bit_register.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_register.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bit_register.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_register.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "bit_register.hh"
+
+//AUTO-GENERATED FILE
+
+BitRegister::BitRegister(const BitRegisterParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bit_register.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_register.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bit_register.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_register.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_BIT_REGISTER_HH__
+#define __HWMODEL_BIT_REGISTER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/BitRegister.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class BitRegister: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		BitRegister();
+		BitRegister(const BitRegisterParams &params);
+};
+#endif // __HWMODEL_BIT_REGISTER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "bit_shifter.hh"
+
+//AUTO-GENERATED FILE
+
+BitShifter::BitShifter(const BitShifterParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bit_shifter.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_BIT_SHIFTER_HH__
+#define __HWMODEL_BIT_SHIFTER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/BitShifter.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class BitShifter: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		BitShifter();
+		BitShifter(const BitShifterParams &params);
+};
+#endif // __HWMODEL_BIT_SHIFTER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "bitwise_operations.hh"
+
+//AUTO-GENERATED FILE
+
+BitwiseOperations::BitwiseOperations(const BitwiseOperationsParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/bitwise_operations.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_BITWISE_OPERATIONS_HH__
+#define __HWMODEL_BITWISE_OPERATIONS_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/BitwiseOperations.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class BitwiseOperations: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		BitwiseOperations();
+		BitwiseOperations(const BitwiseOperationsParams &params);
+};
+#endif // __HWMODEL_BITWISE_OPERATIONS_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_adder.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_adder.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_adder.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_adder.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "double_adder.hh"
+
+//AUTO-GENERATED FILE
+
+DoubleAdder::DoubleAdder(const DoubleAdderParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_adder.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_adder.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_adder.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_adder.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_DOUBLE_ADDER_HH__
+#define __HWMODEL_DOUBLE_ADDER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/DoubleAdder.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class DoubleAdder: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		DoubleAdder();
+		DoubleAdder(const DoubleAdderParams &params);
+};
+#endif // __HWMODEL_DOUBLE_ADDER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_divider.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_divider.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_divider.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_divider.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "double_divider.hh"
+
+//AUTO-GENERATED FILE
+
+DoubleDivider::DoubleDivider(const DoubleDividerParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_divider.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_divider.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_divider.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_divider.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_DOUBLE_DIVIDER_HH__
+#define __HWMODEL_DOUBLE_DIVIDER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/DoubleDivider.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class DoubleDivider: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		DoubleDivider();
+		DoubleDivider(const DoubleDividerParams &params);
+};
+#endif // __HWMODEL_DOUBLE_DIVIDER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "double_multiplier.hh"
+
+//AUTO-GENERATED FILE
+
+DoubleMultiplier::DoubleMultiplier(const DoubleMultiplierParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/double_multiplier.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_DOUBLE_MULTIPLIER_HH__
+#define __HWMODEL_DOUBLE_MULTIPLIER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/DoubleMultiplier.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class DoubleMultiplier: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		DoubleMultiplier();
+		DoubleMultiplier(const DoubleMultiplierParams &params);
+};
+#endif // __HWMODEL_DOUBLE_MULTIPLIER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_adder.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_adder.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_adder.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_adder.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "float_adder.hh"
+
+//AUTO-GENERATED FILE
+
+FloatAdder::FloatAdder(const FloatAdderParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_adder.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_adder.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_adder.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_adder.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FLOAT_ADDER_HH__
+#define __HWMODEL_FLOAT_ADDER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/FloatAdder.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class FloatAdder: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		FloatAdder();
+		FloatAdder(const FloatAdderParams &params);
+};
+#endif // __HWMODEL_FLOAT_ADDER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_divider.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_divider.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_divider.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_divider.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "float_divider.hh"
+
+//AUTO-GENERATED FILE
+
+FloatDivider::FloatDivider(const FloatDividerParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_divider.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_divider.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_divider.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_divider.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FLOAT_DIVIDER_HH__
+#define __HWMODEL_FLOAT_DIVIDER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/FloatDivider.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class FloatDivider: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		FloatDivider();
+		FloatDivider(const FloatDividerParams &params);
+};
+#endif // __HWMODEL_FLOAT_DIVIDER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "float_multiplier.hh"
+
+//AUTO-GENERATED FILE
+
+FloatMultiplier::FloatMultiplier(const FloatMultiplierParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/float_multiplier.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FLOAT_MULTIPLIER_HH__
+#define __HWMODEL_FLOAT_MULTIPLIER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/FloatMultiplier.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class FloatMultiplier: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		FloatMultiplier();
+		FloatMultiplier(const FloatMultiplierParams &params);
+};
+#endif // __HWMODEL_FLOAT_MULTIPLIER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/integer_adder.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_adder.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/integer_adder.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_adder.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "integer_adder.hh"
+
+//AUTO-GENERATED FILE
+
+IntegerAdder::IntegerAdder(const IntegerAdderParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/integer_adder.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_adder.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/integer_adder.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_adder.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_INTEGER_ADDER_HH__
+#define __HWMODEL_INTEGER_ADDER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/IntegerAdder.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class IntegerAdder: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		IntegerAdder();
+		IntegerAdder(const IntegerAdderParams &params);
+};
+#endif // __HWMODEL_INTEGER_ADDER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.cc gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.cc
--- gem5/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#include "integer_multiplier.hh"
+
+//AUTO-GENERATED FILE
+
+IntegerMultiplier::IntegerMultiplier(const IntegerMultiplierParams &params) :
+	SimObject(params),
+	FunctionalUnitBase( params.alias,
+						params.stages,
+						params.cycles,
+						params.enum_value,
+						params.int_size,
+						params.int_sign,
+						params.int_apmode,
+						params.fp_size,
+						params.fp_sign,
+						params.fp_apmode,
+						params.ptr_size,
+						params.ptr_sign,
+						params.ptr_apmode,
+						params.limit,
+						params.power_units,
+						params.energy_units,
+						params.time_units,
+						params.area_units,
+						params.fu_latency,
+						params.internal_power,
+						params.switch_power,
+						params.dynamic_power,
+						params.dynamic_energy,
+						params.leakage_power,
+						params.area,
+						params.path_delay) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.hh gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.hh
--- gem5/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/integer_multiplier.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_INTEGER_MULTIPLIER_HH__
+#define __HWMODEL_INTEGER_MULTIPLIER_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/IntegerMultiplier.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class IntegerMultiplier: public SimObject, public FunctionalUnitBase
+{
+	private:
+	protected:
+	public:
+		IntegerMultiplier();
+		IntegerMultiplier(const IntegerMultiplierParams &params);
+};
+#endif // __HWMODEL_INTEGER_MULTIPLIER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/functionalunits/SConscript gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/SConscript
--- gem5/src/hwacc/HWModeling/generated/functionalunits/SConscript	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/functionalunits/SConscript	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,14 @@
+Import('*')
+if env['TARGET_ISA'] == 'arm':
+
+    Source('double_multiplier.cc')
+    Source('bit_register.cc')
+    Source('bitwise_operations.cc')
+    Source('double_adder.cc')
+    Source('float_divider.cc')
+    Source('bit_shifter.cc')
+    Source('integer_multiplier.cc')
+    Source('integer_adder.cc')
+    Source('double_divider.cc')
+    Source('float_adder.cc')
+    Source('float_multiplier.cc')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/add.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/add.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/add.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/add.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "add.hh"
+
+//AUTO-GENERATED FILE
+
+Add::Add(const AddParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/add.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/add.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/add.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/add.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ADD_HH__
+#define __HWMODEL_ADD_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Add.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Add: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Add();
+		Add(const AddParams &params);
+};
+#endif // __HWMODEL_ADD_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/addrspacecast.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/addrspacecast.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/addrspacecast.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/addrspacecast.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "addrspacecast.hh"
+
+//AUTO-GENERATED FILE
+
+Addrspacecast::Addrspacecast(const AddrspacecastParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/addrspacecast.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/addrspacecast.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/addrspacecast.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/addrspacecast.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ADDRSPACECAST_HH__
+#define __HWMODEL_ADDRSPACECAST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Addrspacecast.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Addrspacecast: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Addrspacecast();
+		Addrspacecast(const AddrspacecastParams &params);
+};
+#endif // __HWMODEL_ADDRSPACECAST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/alloca.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/alloca.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/alloca.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/alloca.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "alloca.hh"
+
+//AUTO-GENERATED FILE
+
+Alloca::Alloca(const AllocaParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/alloca.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/alloca.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/alloca.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/alloca.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ALLOCA_HH__
+#define __HWMODEL_ALLOCA_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Alloca.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Alloca: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Alloca();
+		Alloca(const AllocaParams &params);
+};
+#endif // __HWMODEL_ALLOCA_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/and_inst.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/and_inst.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/and_inst.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/and_inst.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "and_inst.hh"
+
+//AUTO-GENERATED FILE
+
+AndInst::AndInst(const AndInstParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/and_inst.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/and_inst.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/and_inst.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/and_inst.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_AND_INST_HH__
+#define __HWMODEL_AND_INST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/AndInst.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class AndInst: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		AndInst();
+		AndInst(const AndInstParams &params);
+};
+#endif // __HWMODEL_AND_INST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ashr.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ashr.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/ashr.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ashr.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "ashr.hh"
+
+//AUTO-GENERATED FILE
+
+Ashr::Ashr(const AshrParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ashr.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ashr.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/ashr.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ashr.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ASHR_HH__
+#define __HWMODEL_ASHR_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Ashr.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Ashr: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Ashr();
+		Ashr(const AshrParams &params);
+};
+#endif // __HWMODEL_ASHR_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/base.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/base.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/base.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/base.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,32 @@
+#ifndef __HWMODEL_INST_CONFIG_BASE_HH__
+#define __HWMODEL_INST_CONFIG_BASE_HH__
+
+#include <map>
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+class InstConfigBase
+{
+	private:
+	protected:
+		uint32_t _functional_unit;
+		uint32_t _functional_unit_limit;
+		uint32_t _opcode_num;
+		uint32_t _runtime_cycles;
+	public:
+		InstConfigBase();
+		InstConfigBase( uint32_t functional_unit,
+							uint32_t functional_unit_limit,
+							uint32_t opcode_num,
+							uint32_t runtime_cycles) :
+							_functional_unit(functional_unit),
+							_functional_unit_limit(functional_unit_limit),
+							_opcode_num(opcode_num),
+							_runtime_cycles(runtime_cycles) { }
+		uint32_t get_functional_unit() { return _functional_unit; }
+		uint32_t get_functional_unit_limit() { return _functional_unit_limit; }
+		uint32_t get_opcode_num() { return _opcode_num; }
+		uint32_t get_runtime_cycles() { return _runtime_cycles; }
+};
+#endif // __HWMODEL_INST_CONFIG_BASE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/bitcast.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/bitcast.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/bitcast.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/bitcast.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "bitcast.hh"
+
+//AUTO-GENERATED FILE
+
+Bitcast::Bitcast(const BitcastParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/bitcast.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/bitcast.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/bitcast.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/bitcast.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_BITCAST_HH__
+#define __HWMODEL_BITCAST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Bitcast.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Bitcast: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Bitcast();
+		Bitcast(const BitcastParams &params);
+};
+#endif // __HWMODEL_BITCAST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/br.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/br.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/br.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/br.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "br.hh"
+
+//AUTO-GENERATED FILE
+
+Br::Br(const BrParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/br.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/br.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/br.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/br.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_BR_HH__
+#define __HWMODEL_BR_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Br.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Br: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Br();
+		Br(const BrParams &params);
+};
+#endif // __HWMODEL_BR_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/call.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/call.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/call.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/call.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "call.hh"
+
+//AUTO-GENERATED FILE
+
+Call::Call(const CallParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/call.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/call.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/call.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/call.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_CALL_HH__
+#define __HWMODEL_CALL_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Call.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Call: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Call();
+		Call(const CallParams &params);
+};
+#endif // __HWMODEL_CALL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fadd.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fadd.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fadd.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fadd.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "fadd.hh"
+
+//AUTO-GENERATED FILE
+
+Fadd::Fadd(const FaddParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fadd.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fadd.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fadd.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fadd.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FADD_HH__
+#define __HWMODEL_FADD_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fadd.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fadd: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fadd();
+		Fadd(const FaddParams &params);
+};
+#endif // __HWMODEL_FADD_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fcmp.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fcmp.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fcmp.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fcmp.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "fcmp.hh"
+
+//AUTO-GENERATED FILE
+
+Fcmp::Fcmp(const FcmpParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fcmp.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fcmp.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fcmp.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fcmp.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FCMP_HH__
+#define __HWMODEL_FCMP_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fcmp.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fcmp: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fcmp();
+		Fcmp(const FcmpParams &params);
+};
+#endif // __HWMODEL_FCMP_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fdiv.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fdiv.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fdiv.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fdiv.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "fdiv.hh"
+
+//AUTO-GENERATED FILE
+
+Fdiv::Fdiv(const FdivParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fdiv.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fdiv.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fdiv.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fdiv.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FDIV_HH__
+#define __HWMODEL_FDIV_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fdiv.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fdiv: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fdiv();
+		Fdiv(const FdivParams &params);
+};
+#endif // __HWMODEL_FDIV_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fence.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fence.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fence.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fence.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "fence.hh"
+
+//AUTO-GENERATED FILE
+
+Fence::Fence(const FenceParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fence.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fence.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fence.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fence.hh	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FENCE_HH__
+#define __HWMODEL_FENCE_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fence.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fence: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fence();
+		Fence(const FenceParams &params);
+};
+#endif // __HWMODEL_FENCE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fmul.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fmul.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fmul.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fmul.cc	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,10 @@
+#include "fmul.hh"
+
+//AUTO-GENERATED FILE
+
+Fmul::Fmul(const FmulParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fmul.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fmul.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fmul.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fmul.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FMUL_HH__
+#define __HWMODEL_FMUL_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fmul.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fmul: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fmul();
+		Fmul(const FmulParams &params);
+};
+#endif // __HWMODEL_FMUL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fpext.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fpext.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fpext.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fpext.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "fpext.hh"
+
+//AUTO-GENERATED FILE
+
+Fpext::Fpext(const FpextParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fpext.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fpext.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fpext.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fpext.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FPEXT_HH__
+#define __HWMODEL_FPEXT_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fpext.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fpext: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fpext();
+		Fpext(const FpextParams &params);
+};
+#endif // __HWMODEL_FPEXT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptosi.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptosi.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fptosi.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptosi.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "fptosi.hh"
+
+//AUTO-GENERATED FILE
+
+Fptosi::Fptosi(const FptosiParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptosi.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptosi.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fptosi.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptosi.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FPTOSI_HH__
+#define __HWMODEL_FPTOSI_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fptosi.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fptosi: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fptosi();
+		Fptosi(const FptosiParams &params);
+};
+#endif // __HWMODEL_FPTOSI_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptoui.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptoui.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fptoui.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptoui.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "fptoui.hh"
+
+//AUTO-GENERATED FILE
+
+Fptoui::Fptoui(const FptouiParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptoui.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptoui.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fptoui.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptoui.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FPTOUI_HH__
+#define __HWMODEL_FPTOUI_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fptoui.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fptoui: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fptoui();
+		Fptoui(const FptouiParams &params);
+};
+#endif // __HWMODEL_FPTOUI_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptrunc.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptrunc.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fptrunc.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptrunc.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "fptrunc.hh"
+
+//AUTO-GENERATED FILE
+
+Fptrunc::Fptrunc(const FptruncParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fptrunc.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptrunc.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fptrunc.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fptrunc.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FPTRUNC_HH__
+#define __HWMODEL_FPTRUNC_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fptrunc.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fptrunc: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fptrunc();
+		Fptrunc(const FptruncParams &params);
+};
+#endif // __HWMODEL_FPTRUNC_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/frem.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/frem.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/frem.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/frem.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "frem.hh"
+
+//AUTO-GENERATED FILE
+
+Frem::Frem(const FremParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/frem.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/frem.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/frem.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/frem.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FREM_HH__
+#define __HWMODEL_FREM_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Frem.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Frem: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Frem();
+		Frem(const FremParams &params);
+};
+#endif // __HWMODEL_FREM_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fsub.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fsub.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/fsub.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fsub.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "fsub.hh"
+
+//AUTO-GENERATED FILE
+
+Fsub::Fsub(const FsubParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/fsub.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fsub.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/fsub.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/fsub.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_FSUB_HH__
+#define __HWMODEL_FSUB_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Fsub.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Fsub: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Fsub();
+		Fsub(const FsubParams &params);
+};
+#endif // __HWMODEL_FSUB_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/gep.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/gep.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/gep.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/gep.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "gep.hh"
+
+//AUTO-GENERATED FILE
+
+Gep::Gep(const GepParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/gep.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/gep.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/gep.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/gep.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_GEP_HH__
+#define __HWMODEL_GEP_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Gep.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Gep: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Gep();
+		Gep(const GepParams &params);
+};
+#endif // __HWMODEL_GEP_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/icmp.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/icmp.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/icmp.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/icmp.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "icmp.hh"
+
+//AUTO-GENERATED FILE
+
+Icmp::Icmp(const IcmpParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/icmp.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/icmp.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/icmp.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/icmp.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ICMP_HH__
+#define __HWMODEL_ICMP_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Icmp.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Icmp: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Icmp();
+		Icmp(const IcmpParams &params);
+};
+#endif // __HWMODEL_ICMP_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/indirectbr.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/indirectbr.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/indirectbr.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/indirectbr.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "indirectbr.hh"
+
+//AUTO-GENERATED FILE
+
+Indirectbr::Indirectbr(const IndirectbrParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/indirectbr.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/indirectbr.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/indirectbr.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/indirectbr.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_INDIRECTBR_HH__
+#define __HWMODEL_INDIRECTBR_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Indirectbr.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Indirectbr: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Indirectbr();
+		Indirectbr(const IndirectbrParams &params);
+};
+#endif // __HWMODEL_INDIRECTBR_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/inttoptr.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/inttoptr.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/inttoptr.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/inttoptr.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "inttoptr.hh"
+
+//AUTO-GENERATED FILE
+
+Inttoptr::Inttoptr(const InttoptrParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/inttoptr.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/inttoptr.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/inttoptr.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/inttoptr.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_INTTOPTR_HH__
+#define __HWMODEL_INTTOPTR_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Inttoptr.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Inttoptr: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Inttoptr();
+		Inttoptr(const InttoptrParams &params);
+};
+#endif // __HWMODEL_INTTOPTR_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/invoke.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/invoke.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/invoke.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/invoke.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "invoke.hh"
+
+//AUTO-GENERATED FILE
+
+Invoke::Invoke(const InvokeParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/invoke.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/invoke.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/invoke.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/invoke.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_INVOKE_HH__
+#define __HWMODEL_INVOKE_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Invoke.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Invoke: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Invoke();
+		Invoke(const InvokeParams &params);
+};
+#endif // __HWMODEL_INVOKE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/landingpad.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/landingpad.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/landingpad.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/landingpad.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "landingpad.hh"
+
+//AUTO-GENERATED FILE
+
+Landingpad::Landingpad(const LandingpadParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/landingpad.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/landingpad.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/landingpad.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/landingpad.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_LANDINGPAD_HH__
+#define __HWMODEL_LANDINGPAD_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Landingpad.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Landingpad: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Landingpad();
+		Landingpad(const LandingpadParams &params);
+};
+#endif // __HWMODEL_LANDINGPAD_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/load.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/load.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/load.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/load.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "load.hh"
+
+//AUTO-GENERATED FILE
+
+Load::Load(const LoadParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/load.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/load.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/load.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/load.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_LOAD_HH__
+#define __HWMODEL_LOAD_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Load.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Load: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Load();
+		Load(const LoadParams &params);
+};
+#endif // __HWMODEL_LOAD_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/lshr.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/lshr.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/lshr.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/lshr.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "lshr.hh"
+
+//AUTO-GENERATED FILE
+
+Lshr::Lshr(const LshrParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/lshr.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/lshr.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/lshr.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/lshr.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_LSHR_HH__
+#define __HWMODEL_LSHR_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Lshr.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Lshr: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Lshr();
+		Lshr(const LshrParams &params);
+};
+#endif // __HWMODEL_LSHR_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/mul.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/mul.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/mul.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/mul.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "mul.hh"
+
+//AUTO-GENERATED FILE
+
+Mul::Mul(const MulParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/mul.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/mul.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/mul.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/mul.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_MUL_HH__
+#define __HWMODEL_MUL_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Mul.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Mul: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Mul();
+		Mul(const MulParams &params);
+};
+#endif // __HWMODEL_MUL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/or_inst.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/or_inst.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/or_inst.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/or_inst.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "or_inst.hh"
+
+//AUTO-GENERATED FILE
+
+OrInst::OrInst(const OrInstParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/or_inst.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/or_inst.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/or_inst.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/or_inst.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_OR_INST_HH__
+#define __HWMODEL_OR_INST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/OrInst.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class OrInst: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		OrInst();
+		OrInst(const OrInstParams &params);
+};
+#endif // __HWMODEL_OR_INST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/phi.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/phi.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/phi.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/phi.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "phi.hh"
+
+//AUTO-GENERATED FILE
+
+Phi::Phi(const PhiParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/phi.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/phi.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/phi.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/phi.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_PHI_HH__
+#define __HWMODEL_PHI_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Phi.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Phi: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Phi();
+		Phi(const PhiParams &params);
+};
+#endif // __HWMODEL_PHI_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ptrtoint.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ptrtoint.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/ptrtoint.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ptrtoint.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "ptrtoint.hh"
+
+//AUTO-GENERATED FILE
+
+Ptrtoint::Ptrtoint(const PtrtointParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ptrtoint.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ptrtoint.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/ptrtoint.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ptrtoint.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_PTRTOINT_HH__
+#define __HWMODEL_PTRTOINT_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Ptrtoint.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Ptrtoint: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Ptrtoint();
+		Ptrtoint(const PtrtointParams &params);
+};
+#endif // __HWMODEL_PTRTOINT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/resume.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/resume.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/resume.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/resume.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "resume.hh"
+
+//AUTO-GENERATED FILE
+
+Resume::Resume(const ResumeParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/resume.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/resume.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/resume.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/resume.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_RESUME_HH__
+#define __HWMODEL_RESUME_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Resume.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Resume: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Resume();
+		Resume(const ResumeParams &params);
+};
+#endif // __HWMODEL_RESUME_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ret.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ret.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/ret.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ret.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "ret.hh"
+
+//AUTO-GENERATED FILE
+
+Ret::Ret(const RetParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/ret.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ret.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/ret.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/ret.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_RET_HH__
+#define __HWMODEL_RET_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Ret.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Ret: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Ret();
+		Ret(const RetParams &params);
+};
+#endif // __HWMODEL_RET_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/SConscript gem5-SALAM/src/hwacc/HWModeling/generated/instructions/SConscript
--- gem5/src/hwacc/HWModeling/generated/instructions/SConscript	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/SConscript	2024-02-22 18:17:15.112944539 -0600
@@ -0,0 +1,52 @@
+Import('*')
+if env['TARGET_ISA'] == 'arm':
+
+    Source('add.cc')
+    Source('addrspacecast.cc')
+    Source('alloca.cc')
+    Source('and_inst.cc')
+    Source('ashr.cc')
+    Source('bitcast.cc')
+    Source('br.cc')
+    Source('call.cc')
+    Source('fadd.cc')
+    Source('fcmp.cc')
+    Source('fdiv.cc')
+    Source('fence.cc')
+    Source('fmul.cc')
+    Source('fpext.cc')
+    Source('fptosi.cc')
+    Source('fptoui.cc')
+    Source('fptrunc.cc')
+    Source('frem.cc')
+    Source('fsub.cc')
+    Source('gep.cc')
+    Source('icmp.cc')
+    Source('indirectbr.cc')
+    Source('inttoptr.cc')
+    Source('invoke.cc')
+    Source('landingpad.cc')
+    Source('load.cc')
+    Source('lshr.cc')
+    Source('mul.cc')
+    Source('or_inst.cc')
+    Source('phi.cc')
+    Source('ptrtoint.cc')
+    Source('resume.cc')
+    Source('ret.cc')
+    Source('sdiv.cc')
+    Source('select.cc')
+    Source('sext.cc')
+    Source('shl.cc')
+    Source('srem.cc')
+    Source('store.cc')
+    Source('sub.cc')
+    Source('switch_inst.cc')
+    Source('trunc.cc')
+    Source('udiv.cc')
+    Source('uitofp.cc')
+    Source('unreachable.cc')
+    Source('urem.cc')
+    Source('vaarg.cc')
+    Source('xor_inst.cc')
+    Source('zext.cc')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sdiv.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sdiv.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/sdiv.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sdiv.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "sdiv.hh"
+
+//AUTO-GENERATED FILE
+
+Sdiv::Sdiv(const SdivParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sdiv.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sdiv.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/sdiv.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sdiv.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SDIV_HH__
+#define __HWMODEL_SDIV_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Sdiv.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Sdiv: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Sdiv();
+		Sdiv(const SdivParams &params);
+};
+#endif // __HWMODEL_SDIV_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/select.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/select.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/select.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/select.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "select.hh"
+
+//AUTO-GENERATED FILE
+
+Select::Select(const SelectParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/select.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/select.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/select.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/select.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SELECT_HH__
+#define __HWMODEL_SELECT_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Select.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Select: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Select();
+		Select(const SelectParams &params);
+};
+#endif // __HWMODEL_SELECT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sext.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sext.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/sext.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sext.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "sext.hh"
+
+//AUTO-GENERATED FILE
+
+Sext::Sext(const SextParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sext.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sext.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/sext.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sext.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SEXT_HH__
+#define __HWMODEL_SEXT_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Sext.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Sext: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Sext();
+		Sext(const SextParams &params);
+};
+#endif // __HWMODEL_SEXT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/shl.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/shl.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/shl.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/shl.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "shl.hh"
+
+//AUTO-GENERATED FILE
+
+Shl::Shl(const ShlParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/shl.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/shl.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/shl.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/shl.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SHL_HH__
+#define __HWMODEL_SHL_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Shl.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Shl: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Shl();
+		Shl(const ShlParams &params);
+};
+#endif // __HWMODEL_SHL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/srem.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/srem.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/srem.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/srem.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "srem.hh"
+
+//AUTO-GENERATED FILE
+
+Srem::Srem(const SremParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/srem.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/srem.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/srem.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/srem.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SREM_HH__
+#define __HWMODEL_SREM_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Srem.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Srem: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Srem();
+		Srem(const SremParams &params);
+};
+#endif // __HWMODEL_SREM_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/store.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/store.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/store.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/store.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "store.hh"
+
+//AUTO-GENERATED FILE
+
+Store::Store(const StoreParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/store.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/store.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/store.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/store.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_STORE_HH__
+#define __HWMODEL_STORE_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Store.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Store: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Store();
+		Store(const StoreParams &params);
+};
+#endif // __HWMODEL_STORE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sub.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sub.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/sub.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sub.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "sub.hh"
+
+//AUTO-GENERATED FILE
+
+Sub::Sub(const SubParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/sub.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sub.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/sub.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/sub.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SUB_HH__
+#define __HWMODEL_SUB_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Sub.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Sub: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Sub();
+		Sub(const SubParams &params);
+};
+#endif // __HWMODEL_SUB_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/switch_inst.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/switch_inst.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/switch_inst.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/switch_inst.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "switch_inst.hh"
+
+//AUTO-GENERATED FILE
+
+SwitchInst::SwitchInst(const SwitchInstParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/switch_inst.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/switch_inst.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/switch_inst.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/switch_inst.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SWITCH_INST_HH__
+#define __HWMODEL_SWITCH_INST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/SwitchInst.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class SwitchInst: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		SwitchInst();
+		SwitchInst(const SwitchInstParams &params);
+};
+#endif // __HWMODEL_SWITCH_INST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/trunc.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/trunc.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/trunc.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/trunc.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "trunc.hh"
+
+//AUTO-GENERATED FILE
+
+Trunc::Trunc(const TruncParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/trunc.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/trunc.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/trunc.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/trunc.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_TRUNC_HH__
+#define __HWMODEL_TRUNC_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Trunc.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Trunc: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Trunc();
+		Trunc(const TruncParams &params);
+};
+#endif // __HWMODEL_TRUNC_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/udiv.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/udiv.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/udiv.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/udiv.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "udiv.hh"
+
+//AUTO-GENERATED FILE
+
+Udiv::Udiv(const UdivParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/udiv.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/udiv.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/udiv.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/udiv.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_UDIV_HH__
+#define __HWMODEL_UDIV_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Udiv.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Udiv: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Udiv();
+		Udiv(const UdivParams &params);
+};
+#endif // __HWMODEL_UDIV_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/uitofp.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/uitofp.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/uitofp.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/uitofp.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "uitofp.hh"
+
+//AUTO-GENERATED FILE
+
+Uitofp::Uitofp(const UitofpParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/uitofp.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/uitofp.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/uitofp.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/uitofp.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_UITOFP_HH__
+#define __HWMODEL_UITOFP_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Uitofp.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Uitofp: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Uitofp();
+		Uitofp(const UitofpParams &params);
+};
+#endif // __HWMODEL_UITOFP_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/unreachable.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/unreachable.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/unreachable.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/unreachable.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "unreachable.hh"
+
+//AUTO-GENERATED FILE
+
+Unreachable::Unreachable(const UnreachableParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/unreachable.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/unreachable.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/unreachable.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/unreachable.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_UNREACHABLE_HH__
+#define __HWMODEL_UNREACHABLE_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Unreachable.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Unreachable: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Unreachable();
+		Unreachable(const UnreachableParams &params);
+};
+#endif // __HWMODEL_UNREACHABLE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/urem.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/urem.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/urem.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/urem.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "urem.hh"
+
+//AUTO-GENERATED FILE
+
+Urem::Urem(const UremParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/urem.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/urem.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/urem.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/urem.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_UREM_HH__
+#define __HWMODEL_UREM_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Urem.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Urem: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Urem();
+		Urem(const UremParams &params);
+};
+#endif // __HWMODEL_UREM_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/vaarg.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/vaarg.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/vaarg.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/vaarg.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "vaarg.hh"
+
+//AUTO-GENERATED FILE
+
+Vaarg::Vaarg(const VaargParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/vaarg.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/vaarg.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/vaarg.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/vaarg.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_VAARG_HH__
+#define __HWMODEL_VAARG_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Vaarg.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Vaarg: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Vaarg();
+		Vaarg(const VaargParams &params);
+};
+#endif // __HWMODEL_VAARG_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/xor_inst.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/xor_inst.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/xor_inst.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/xor_inst.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "xor_inst.hh"
+
+//AUTO-GENERATED FILE
+
+XorInst::XorInst(const XorInstParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/xor_inst.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/xor_inst.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/xor_inst.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/xor_inst.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_XOR_INST_HH__
+#define __HWMODEL_XOR_INST_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/XorInst.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class XorInst: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		XorInst();
+		XorInst(const XorInstParams &params);
+};
+#endif // __HWMODEL_XOR_INST_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/zext.cc gem5-SALAM/src/hwacc/HWModeling/generated/instructions/zext.cc
--- gem5/src/hwacc/HWModeling/generated/instructions/zext.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/zext.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,10 @@
+#include "zext.hh"
+
+//AUTO-GENERATED FILE
+
+Zext::Zext(const ZextParams &params) :
+	SimObject(params),
+	InstConfigBase( params.functional_unit,
+						params.functional_unit_limit,
+						params.opcode_num,
+						params.runtime_cycles) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/generated/instructions/zext.hh gem5-SALAM/src/hwacc/HWModeling/generated/instructions/zext.hh
--- gem5/src/hwacc/HWModeling/generated/instructions/zext.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/generated/instructions/zext.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_ZEXT_HH__
+#define __HWMODEL_ZEXT_HH__
+
+// GENERATED FILE - DO NOT MODIFY
+
+#include "params/Zext.hh"
+#include "sim/sim_object.hh"
+#include "base.hh"
+
+using namespace gem5;
+
+class Zext: public SimObject, public InstConfigBase
+{
+	private:
+	protected:
+	public:
+		Zext();
+		Zext(const ZextParams &params);
+};
+#endif // __HWMODEL_ZEXT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/cacti_wrapper.cc gem5-SALAM/src/hwacc/HWModeling/src/cacti_wrapper.cc
--- gem5/src/hwacc/HWModeling/src/cacti_wrapper.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/cacti_wrapper.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,124 @@
+#include "cacti_wrapper.hh"
+
+uca_org_t cactiWrapper(unsigned num_of_bytes, unsigned wordsize, unsigned num_ports, int cache_type) {
+  int cache_size = num_of_bytes;
+  int line_size = wordsize;  // in bytes
+  if (wordsize < 4)          // minimum line size in cacti is 32-bit/4-byte
+    line_size = 4;
+  if (cache_size / line_size < 64)
+    cache_size = line_size * 64;  // minimum scratchpad size: 64 words
+  int associativity = 1;
+  int rw_ports = num_ports;
+  if (rw_ports == 0)
+    rw_ports = 1;
+  int excl_read_ports = 0;
+  int excl_write_ports = 0;
+  int single_ended_read_ports = 0;
+  int search_ports = 0;
+  int banks = 1;
+  double tech_node = 40;  // in nm
+  //# following three parameters are meaningful only for main memories
+  int page_sz = 0;
+  int burst_length = 8;
+  int pre_width = 8;
+  int output_width = wordsize * 8;
+  //# to model special structure like branch target buffers, directory, etc.
+  //# change the tag size parameter
+  //# if you want cacti to calculate the tagbits, set the tag size to "default"
+  int specific_tag = false;
+  int tag_width = 0;
+  int access_mode = 2;  // 0 normal, 1 seq, 2 fast
+  int cache = cache_type;   // scratch ram 0 or cache 1
+  int main_mem = 0;
+  // assign weights for CACTI optimizations
+  int obj_func_delay = 0;
+  int obj_func_dynamic_power = 0;
+  int obj_func_leakage_power = 100;
+  int obj_func_area = 0;
+  int obj_func_cycle_time = 0;
+  // from CACTI example config...
+  int dev_func_delay = 20;
+  int dev_func_dynamic_power = 100000;
+  int dev_func_leakage_power = 100000;
+  int dev_func_area = 1000000;
+  int dev_func_cycle_time = 1000000;
+
+  int ed_ed2_none = 2;  // 0 - ED, 1 - ED^2, 2 - use weight and deviate
+  int temp = 300;
+  int wt = 0;  // 0 - default(search across everything), 1 - global, 2 - 5%
+               // delay penalty, 3 - 10%, 4 - 20 %, 5 - 30%, 6 - low-swing
+  int data_arr_ram_cell_tech_flavor_in =
+      0;  // 0(itrs-hp) 1-itrs-lstp(low standby power)
+  int data_arr_peri_global_tech_flavor_in = 0;  // 0(itrs-hp)
+  int tag_arr_ram_cell_tech_flavor_in = 0;      // itrs-hp
+  int tag_arr_peri_global_tech_flavor_in = 0;   // itrs-hp
+  int interconnect_projection_type_in = 1;      // 0 - aggressive, 1 - normal
+  int wire_inside_mat_type_in = 1;   // 2 - global, 0 - local, 1 - semi-global
+  int wire_outside_mat_type_in = 1;  // 2 - global
+  int REPEATERS_IN_HTREE_SEGMENTS_in =
+      1;  // TODO for now only wires with repeaters are supported
+  int VERTICAL_HTREE_WIRES_OVER_THE_ARRAY_in = 0;
+  int BROADCAST_ADDR_DATAIN_OVER_VERTICAL_HTREES_in = 0;
+  int force_wiretype = 1;
+  int wiretype = 30;
+  int force_config = 0;
+  int ndwl = 1;
+  int ndbl = 1;
+  int nspd = 0;
+  int ndcm = 1;
+  int ndsam1 = 0;
+  int ndsam2 = 0;
+  int ecc = 0;
+  return cacti_interface(cache_size,
+                         line_size,
+                         associativity,
+                         rw_ports,
+                         excl_read_ports,
+                         excl_write_ports,
+                         single_ended_read_ports,
+                         search_ports,
+                         banks,
+                         tech_node,  // in nm
+                         output_width,
+                         specific_tag,
+                         tag_width,
+                         access_mode,  // 0 normal, 1 seq, 2 fast
+                         cache,        // scratch ram or cache
+                         main_mem,
+                         obj_func_delay,
+                         obj_func_dynamic_power,
+                         obj_func_leakage_power,
+                         obj_func_cycle_time,
+                         obj_func_area,
+                         dev_func_delay,
+                         dev_func_dynamic_power,
+                         dev_func_leakage_power,
+                         dev_func_area,
+                         dev_func_cycle_time,
+                         ed_ed2_none,
+                         temp,
+                         wt,
+                         data_arr_ram_cell_tech_flavor_in,
+                         data_arr_peri_global_tech_flavor_in,
+                         tag_arr_ram_cell_tech_flavor_in,
+                         tag_arr_peri_global_tech_flavor_in,
+                         interconnect_projection_type_in,
+                         wire_inside_mat_type_in,
+                         wire_outside_mat_type_in,
+                         REPEATERS_IN_HTREE_SEGMENTS_in,
+                         VERTICAL_HTREE_WIRES_OVER_THE_ARRAY_in,
+                         BROADCAST_ADDR_DATAIN_OVER_VERTICAL_HTREES_in,
+                         page_sz,
+                         burst_length,
+                         pre_width,
+                         force_wiretype,
+                         wiretype,
+                         force_config,
+                         ndwl,
+                         ndbl,
+                         nspd,
+                         ndcm,
+                         ndsam1,
+                         ndsam2,
+                         ecc);
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/cacti_wrapper.hh gem5-SALAM/src/hwacc/HWModeling/src/cacti_wrapper.hh
--- gem5/src/hwacc/HWModeling/src/cacti_wrapper.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/cacti_wrapper.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,9 @@
+#ifndef __HWMODEL_CACTI_WRAPPER_HH__
+#define __HWMODEL_CACTI_WRAPPER_HH__
+
+#include "../../../../ext/mcpat/cacti/cacti_interface.h"
+
+
+uca_org_t cactiWrapper(unsigned num_of_bytes, unsigned wordsize, unsigned num_ports, int cache_type);
+
+#endif //__HWMODEL_CACTI_WRAPPER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/common/defines.hh gem5-SALAM/src/hwacc/HWModeling/src/common/defines.hh
--- gem5/src/hwacc/HWModeling/src/common/defines.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/common/defines.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,7 @@
+#ifndef __HW_MODEL_DEFINES_HH__
+#define __HW_MODEL_DEFINES_HH__
+
+
+
+
+#endif // __HW_MODEL_DEFINES_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/cycle_counts.cc gem5-SALAM/src/hwacc/HWModeling/src/cycle_counts.cc
--- gem5/src/hwacc/HWModeling/src/cycle_counts.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/cycle_counts.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,72 @@
+//------------------------------------------//
+#include "cycle_counts.hh"
+//------------------------------------------//
+
+CycleCounts::CycleCounts(const CycleCountsParams &p):
+    SimObject(p),
+    counter_inst(p.counter),
+    gep_inst(p.gep),
+    phi_inst(p.phi),
+    select_inst(p.select),
+    ret_inst(p.ret),
+    br_inst(p.br),
+    switch_inst(p.switch_inst),
+    indirectbr_inst(p.indirectbr),
+    invoke_inst(p.invoke),
+    resume_inst(p.resume),
+    unreachable_inst(p.unreachable),
+    icmp_inst(p.icmp),
+    fcmp_inst(p.fcmp),
+    trunc_inst(p.trunc),
+    zext_inst(p.zext),
+    sext_inst(p.sext),
+    fptrunc_inst(p.fptrunc),
+    fpext_inst(p.fpext),
+    fptoui_inst(p.fptoui),
+    fptosi_inst(p.fptosi),
+    uitofp_inst(p.uitofp),
+    sitofp_inst(p.sitofp),
+    ptrtoint_inst(p.ptrtoint),
+    inttoptr_inst(p.inttoptr),
+    bitcast_inst(p.bitcast),
+    addrspacecast_inst(p.addrspacecast),
+    call_inst(p.call),
+    vaarg_inst(p.vaarg),
+    landingpad_inst(p.landingpad),
+    catchpad_inst(p.catchpad),
+    alloca_inst(p.alloca),
+    load_inst(p.load),
+    store_inst(p.store),
+    fence_inst(p.fence),
+    cmpxchg_inst(p.cmpxchg),
+    atomicrmw_inst(p.atomicrmw),
+    extractvalue_inst(p.extractvalue),
+    insertvalue_inst(p.insertvalue),
+    extractelement_inst(p.extractelement),
+    insertelement_inst(p.insertelement),
+    shufflevector_inst(p.shufflevector),
+    shl_inst(p.shl),
+    lshr_inst(p.lshr),
+    ashr_inst(p.ashr),
+    and_inst(p.and_inst),
+    or_inst(p.or_inst),
+    xor_inst(p.xor_inst),
+    add_inst(p.add),
+    sub_inst(p.sub),
+    mul_inst(p.mul),
+    udiv_inst(p.udiv),
+    sdiv_inst(p.sdiv),
+    urem_inst(p.urem),
+    srem_inst(p.srem),
+    fadd_inst(p.fadd),
+    fsub_inst(p.fsub),
+    fmul_inst(p.fmul),
+    fdiv_inst(p.fdiv),
+    frem_inst(p.frem)
+    { }
+
+
+// CycleCounts*
+// CycleCountsParams::create() {
+//     return new CycleCounts(this);
+// }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/cycle_counts.hh gem5-SALAM/src/hwacc/HWModeling/src/cycle_counts.hh
--- gem5/src/hwacc/HWModeling/src/cycle_counts.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/cycle_counts.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,79 @@
+#ifndef __HWMODEL_CYCLE_COUNTS_HH__
+#define __HWMODEL_CYCLE_COUNTS_HH__
+//------------------------------------------//
+//#include "debug_flags.hh"
+#include "params/CycleCounts.hh"
+#include "sim/sim_object.hh"
+//------------------------------------------//
+#include <cstdint>
+//------------------------------------------//
+
+using namespace gem5;
+
+class CycleCounts : public SimObject
+{
+    public:
+    uint32_t counter_inst;
+    uint32_t gep_inst;
+    uint32_t phi_inst;
+    uint32_t select_inst;
+    uint32_t ret_inst;
+    uint32_t br_inst;
+    uint32_t switch_inst;
+    uint32_t indirectbr_inst;
+    uint32_t invoke_inst;
+    uint32_t resume_inst;
+    uint32_t unreachable_inst;
+    uint32_t icmp_inst;
+    uint32_t fcmp_inst;
+    uint32_t trunc_inst;
+    uint32_t zext_inst;
+    uint32_t sext_inst;
+    uint32_t fptrunc_inst;
+    uint32_t fpext_inst;
+    uint32_t fptoui_inst;
+    uint32_t fptosi_inst;
+    uint32_t uitofp_inst;
+    uint32_t sitofp_inst;
+    uint32_t ptrtoint_inst;
+    uint32_t inttoptr_inst;
+    uint32_t bitcast_inst;
+    uint32_t addrspacecast_inst;
+    uint32_t call_inst;
+    uint32_t vaarg_inst;
+    uint32_t landingpad_inst;
+    uint32_t catchpad_inst;
+    uint32_t alloca_inst;
+    uint32_t load_inst;
+    uint32_t store_inst;
+    uint32_t fence_inst;
+    uint32_t cmpxchg_inst;
+    uint32_t atomicrmw_inst;
+    uint32_t extractvalue_inst;
+    uint32_t insertvalue_inst;
+    uint32_t extractelement_inst;
+    uint32_t insertelement_inst;
+    uint32_t shufflevector_inst;
+    uint32_t shl_inst;
+    uint32_t lshr_inst;
+    uint32_t ashr_inst;
+    uint32_t and_inst;
+    uint32_t or_inst;
+    uint32_t xor_inst;
+    uint32_t add_inst;
+    uint32_t sub_inst;
+    uint32_t mul_inst;
+    uint32_t udiv_inst;
+    uint32_t sdiv_inst;
+    uint32_t urem_inst;
+    uint32_t srem_inst;
+    uint32_t fadd_inst;
+    uint32_t fsub_inst;
+    uint32_t fmul_inst;
+    uint32_t fdiv_inst;
+    uint32_t frem_inst;
+    CycleCounts();
+    CycleCounts(const CycleCountsParams &p);
+};
+
+#endif //__HWMODEL_CYCLE_COUNTS_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/functional_units.cc gem5-SALAM/src/hwacc/HWModeling/src/functional_units.cc
--- gem5/src/hwacc/HWModeling/src/functional_units.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/functional_units.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,30 @@
+#include "functional_units.hh"
+
+// TODO: Update source generator
+// GENERATED CONSTRUCTOR - DO NOT MODIFY
+FunctionalUnits::FunctionalUnits(const FunctionalUnitsParams &params) :
+    SimObject(params),
+    _double_multiplier(params.double_multiplier),
+    _bit_register(params.bit_register),
+    _bitwise_operations(params.bitwise_operations),
+    _double_adder(params.double_adder),
+    _float_divider(params.float_divider),
+    _bit_shifter(params.bit_shifter),
+    _integer_multiplier(params.integer_multiplier),
+    _integer_adder(params.integer_adder),
+    _double_divider(params.double_divider),
+    _float_adder(params.float_adder),
+    _float_multiplier(params.float_multiplier) { 
+        functional_unit_list.push_back(_double_multiplier);
+        functional_unit_list.push_back(_bitwise_operations);
+        functional_unit_list.push_back(_bit_shifter);
+        functional_unit_list.push_back(_double_adder);
+        functional_unit_list.push_back(_float_divider);
+        functional_unit_list.push_back(_bit_shifter);
+        functional_unit_list.push_back(_integer_multiplier);
+        functional_unit_list.push_back(_integer_adder);
+        functional_unit_list.push_back(_double_divider);
+        functional_unit_list.push_back(_float_adder);
+        functional_unit_list.push_back(_float_multiplier);
+    }
+// END OF GENERATED CONSTRUCTOR
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/functional_units.hh gem5-SALAM/src/hwacc/HWModeling/src/functional_units.hh
--- gem5/src/hwacc/HWModeling/src/functional_units.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/functional_units.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,51 @@
+#ifndef __HWMODEL_FUNCTIONAL_UNITS_HH__
+#define __HWMODEL_FUNCTIONAL_UNITS_HH__
+
+#include "params/FunctionalUnits.hh"
+#include "sim/sim_object.hh"
+// GENERATED HEADERS - DO NOT MODIFY
+#include "../generated/functionalunits/base.hh"
+#include "../generated/functionalunits/double_multiplier.hh"
+#include "../generated/functionalunits/bit_register.hh"
+#include "../generated/functionalunits/bitwise_operations.hh"
+#include "../generated/functionalunits/double_adder.hh"
+#include "../generated/functionalunits/float_divider.hh"
+#include "../generated/functionalunits/bit_shifter.hh"
+#include "../generated/functionalunits/integer_multiplier.hh"
+#include "../generated/functionalunits/integer_adder.hh"
+#include "../generated/functionalunits/double_divider.hh"
+#include "../generated/functionalunits/float_adder.hh"
+#include "../generated/functionalunits/float_multiplier.hh"
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+using namespace gem5;
+
+class FunctionalUnitBase;
+
+class FunctionalUnits : public SimObject
+{
+	private:
+	protected:
+
+	public:
+		// GENERATED CLASS MEMBERS - DO NOT MODIFY
+		DoubleMultiplier* _double_multiplier;
+		BitRegister* _bit_register;
+		BitwiseOperations* _bitwise_operations;
+		DoubleAdder* _double_adder;
+		FloatDivider* _float_divider;
+		BitShifter* _bit_shifter;
+		IntegerMultiplier* _integer_multiplier;
+		IntegerAdder* _integer_adder;
+		DoubleDivider* _double_divider;
+		FloatAdder* _float_adder;
+		FloatMultiplier* _float_multiplier;
+		FunctionalUnits();
+		// DEFAULT CONSTRUCTOR - DO NOT MODIFY
+		FunctionalUnits(const FunctionalUnitsParams &params);
+		// END DEFAULT CONSTRUCTOR
+		std::vector<FunctionalUnitBase*> functional_unit_list;
+};
+#endif //__HWMODEL_FUNCTIONAL_UNITS_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/hw_interface.cc gem5-SALAM/src/hwacc/HWModeling/src/hw_interface.cc
--- gem5/src/hwacc/HWModeling/src/hw_interface.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/hw_interface.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,156 @@
+#include "hw_interface.hh"
+
+HWInterface::HWInterface(const HWInterfaceParams &params) :
+    SimObject(params),
+    cycle_counts(params.cycle_counts),
+    functional_units(params.functional_units),
+    hw_statistics(params.hw_statistics),
+    inst_config(params.inst_config),
+    opcodes(params.opcodes),
+    salam_power_model(params.salam_power_model),
+    simulator_config(params.simulator_config) { }
+
+bool 
+HWInterface::availableFunctionalUnit(uint64_t functional_unit) {
+    //std::cout << "\n\n\nTest 1 - " <<  functional_unit << "\n\n\n";
+    switch(functional_unit) {
+        case INTADDER : {
+            if (functional_units->_integer_adder->is_available()) {
+                functional_units->_integer_adder->use_functional_unit();
+                return true;
+            } break;
+        }
+        case INTMULTI : {
+            if (functional_units->_integer_multiplier->is_available()) {
+                functional_units->_integer_multiplier->use_functional_unit();
+                return true;
+            } break;
+        }
+        case INTSHIFTER : {
+            if (functional_units->_bit_shifter->is_available()) {
+                functional_units->_bit_shifter->use_functional_unit();
+                return true;
+            } break;
+        } 
+        case INTBITWISE : {
+            //std::cout << "\n\n\nTest 1 - 1 -";
+            //std::cout << functional_units->_bitwise_operations->get_alias() << "\n\n\n";
+            if (functional_units->_bitwise_operations->is_available()) {
+                //std::cout << "\n\n\nTest 1 - 2\n\n\n";
+                functional_units->_bitwise_operations->use_functional_unit();
+                //std::cout << "\n\n\nTest 1 - 3\n\n\n";
+                return true;
+            } break;
+        }
+        case FPSPADDER : {
+            if (functional_units->_float_adder->is_available()) {
+                functional_units->_float_adder->use_functional_unit();
+                return true;
+            } break;
+        }
+        case FPDPADDER : {
+            if (functional_units->_double_adder->is_available()) {
+                functional_units->_double_adder->use_functional_unit();
+                return true;
+            } break;
+        }
+        case FPSPMULTI : {
+            if (functional_units->_float_multiplier->is_available()) {
+                functional_units->_float_multiplier->use_functional_unit();
+                return true;
+            } break;
+        }
+        case FPSPDIVID : {
+            if (functional_units->_float_divider->is_available()) {
+                functional_units->_float_divider->use_functional_unit();
+                return true;
+            } break;
+        }
+        case FPDPMULTI : {
+            if (functional_units->_double_multiplier->is_available()) {
+                functional_units->_double_multiplier->use_functional_unit();
+                return true;
+            } break;
+        }
+        case FPDPDIVID : {
+            if (functional_units->_double_divider->is_available()) {
+                functional_units->_double_divider->use_functional_unit();
+                return true;
+            } break;
+        }
+        case COMPARE : { break; }
+        case GETELEMENTPTR : { break; }
+        case CONVERSION : { break; }
+        case OTHERINST : { break; }
+        case REGISTER : {
+            if (functional_units->_bit_register->is_available()) {
+                functional_units->_bit_register->use_functional_unit();
+                return true;
+            } break;
+        }
+        case COUNTER : { break; }
+        default: { 
+            // assert() 
+            return false;
+        }
+    }
+    return false;
+}
+
+void
+HWInterface::clearFunctionalUnit(uint64_t unit) {
+    switch(unit) {
+        case INTADDER : { 
+                functional_units->_integer_adder->clear_functional_unit();
+                break;
+            } 
+        case INTMULTI : { 
+                functional_units->_integer_multiplier->clear_functional_unit();
+                break;
+            }
+        case INTSHIFTER : { 
+                functional_units->_bit_shifter->clear_functional_unit();
+                break;
+            }
+        case INTBITWISE : { 
+                functional_units->_bitwise_operations->clear_functional_unit();
+                break;
+            }
+        case FPSPADDER : { 
+                functional_units->_float_adder->clear_functional_unit();
+                break;
+            }
+        case FPDPADDER : { 
+                functional_units->_double_adder->clear_functional_unit();
+                break;
+            }
+        case FPSPMULTI : { 
+                functional_units->_float_multiplier->clear_functional_unit();
+                break;
+            }
+        case FPSPDIVID : { 
+                functional_units->_float_divider->clear_functional_unit();
+                break;
+            }
+        case FPDPMULTI : { 
+                functional_units->_double_multiplier->clear_functional_unit();
+                break;
+            }
+        case FPDPDIVID : { 
+                functional_units->_double_divider->clear_functional_unit();
+                break;
+            }
+        case COMPARE : { break; }
+        case GETELEMENTPTR : { break; }
+        case CONVERSION : { break; }
+        case OTHERINST : { break; }
+        case REGISTER : { 
+                functional_units->_bit_register->clear_functional_unit();
+                break;
+            }
+        case COUNTER : { break; }
+        default: { 
+            // assert() 
+        }
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/hw_interface.hh gem5-SALAM/src/hwacc/HWModeling/src/hw_interface.hh
--- gem5/src/hwacc/HWModeling/src/hw_interface.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/hw_interface.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,48 @@
+#ifndef __HWMODEL_HW_MODEL_HH__
+#define __HWMODEL_HW_MODEL_HH__
+
+#include "params/HWInterface.hh"
+#include "sim/sim_object.hh"
+
+#include "../../common/src/macros.hh"
+
+#include "cycle_counts.hh"
+#include "functional_units.hh"
+#include "instruction_config.hh"
+#include "salam_power_model.hh"
+//#include "cacti_wrapper.hh"
+#include "hw_statistics.hh"
+#include "simulator_config.hh"
+#include "opcodes.hh"
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+using namespace gem5;
+
+class HWInterface : public SimObject 
+{
+    friend class LLVMInterface;
+    private:
+    protected:
+    public:
+        CycleCounts *cycle_counts;
+        FunctionalUnits *functional_units;
+        HWStatistics *hw_statistics;
+        InstConfig *inst_config;
+        InstOpCodes *opcodes;
+        SALAMPowerModel *salam_power_model;
+        SimulatorConfig *simulator_config;
+
+        HWInterface();
+        HWInterface(const HWInterfaceParams &params);
+        bool availableFunctionalUnit(uint64_t functional_unit);
+        void clearFunctionalUnit(uint64_t functional_unit);
+        
+
+};
+
+
+// TODO: Figure out a better way to link floating point instructions to the correct precision function unit, currently assuming everything is single precision since we are building for 32 bit
+
+#endif //__HWMODEL_HW_MODEL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/hw_statistics.cc gem5-SALAM/src/hwacc/HWModeling/src/hw_statistics.cc
--- gem5/src/hwacc/HWModeling/src/hw_statistics.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/hw_statistics.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,320 @@
+#include "hw_statistics.hh"
+
+HWStatistics::HWStatistics(const HWStatisticsParams &params) :
+    SimObject(params) { 
+        
+        statBufferSize = 10000;
+        statBufferPreDefine = 2;
+        dbg = false;
+
+        for (int i=0 ; i<statBufferPreDefine; i++ ) {
+            std::vector<HW_Cycle_Stats> hw_cycle_buffer;
+            hw_cycle_buffer.reserve(statBufferSize);
+            hw_buffer_list.push_back(hw_cycle_buffer);
+        }
+        hw_buffer = hw_buffer_list.begin();
+        cycle_buffer = hw_buffer->begin();
+        clearStats();
+    }
+
+
+void
+HWStatistics::updateHWStatsCycleStart() {
+    if (dbg) DPRINTF(SALAM_Debug, "Updating Cycle Statistics Buffer\n");
+    (*hw_buffer).insert(cycle_buffer, current_cycle_stats);
+    clearStats();
+    updateBuffer();
+    
+}
+
+void
+HWStatistics::clearStats() {
+    if (dbg) DPRINTF(SALAM_Debug, "Clearing Cycle Statistics\n");
+    current_cycle_stats.reset();
+    
+}
+
+void
+HWStatistics::updateHWStatsCycleEnd(int curr_cycle) {
+    if (dbg) DPRINTF(SALAM_Debug, "Updating Cycle Statistics\n");
+    current_cycle_stats.cycle = curr_cycle;
+
+}
+
+void
+HWStatistics::updateBuffer() {
+    if (dbg) DPRINTF(SALAM_Debug, "Checking Buffer[%i][%i]\n", current_buffer_index, hw_buffer_list.at(current_buffer_index).size());
+    if (hw_buffer_list.at(current_buffer_index).size() == statBufferSize) {
+        current_buffer_index++;
+        if(current_buffer_index == statBufferPreDefine) {
+            if (dbg) DPRINTF(SALAM_Debug, "Creating New Buffer Window\n");
+            std::vector<HW_Cycle_Stats> hw_cycle_buffer;
+            hw_cycle_buffer.reserve(statBufferSize);
+            hw_buffer_list.push_back(hw_cycle_buffer);
+            hw_buffer = hw_buffer_list.end();
+            cycle_buffer = hw_buffer->begin();
+        } else {
+            if (dbg) DPRINTF(SALAM_Debug, "Next Buffer Window\n");
+            hw_buffer++;
+            cycle_buffer = hw_buffer->begin();
+        }
+    } else {
+        cycle_buffer = hw_buffer->end();
+    }
+}
+
+
+void
+HWStatistics::print() {
+    if (dbg) DPRINTF(SALAM_Debug," Buffers: %i\n", (current_buffer_index + 1));
+    for (auto buffers : hw_buffer_list) {
+        for (auto cycles : buffers) {
+            // This loops through the full runtime, starting at cycle 1 to completion
+            //std::cout << " Cycle: " << cycles.cycle;
+        }
+    }
+
+
+/*
+    std::cout << "********************************************************************************" << std::endl;
+    std::cout << "   ========= Performance Analysis =================" << std::endl;
+    std::cout << "   Setup Time:                      " << setupTime << "ns" << std::endl;
+    std::cout << "   Simulation Time:                 " << simTime << "ns" << std::endl;
+    std::cout << "   System Clock:                    " << sys_clock << "GHz" << std::endl;
+    std::cout << "   Transistor Latency:              " << fu_clock_period << "ns" << std::endl;
+    std::cout << "   Runtime:                         " << cycles << " cycles" << std::endl;
+    std::cout << "   Runtime:                         " << runtime << " seconds" << std::endl;
+    std::cout << "   Stalls:                          " << stalls << " cycles" << std::endl;
+    std::cout << "       Load Only:                   " << loadOnlyStall << " cycles" << std::endl;
+    std::cout << "       Store Only:                  " << storeOnlyStall << " cycles" << std::endl;
+    std::cout << "       Compute Only:                " << compOnlyStall << " cycles" << std::endl;
+    std::cout << "       Compute & Store:             " << storeCompStall << " cycles" << std::endl;
+    std::cout << "       Load & Store:                " << loadStoreStall << " cycles" << std::endl;
+    std::cout << "       Load & Compute:              " << loadCompStall << " cycles" << std::endl;
+    std::cout << "       Load & Compute & Store:      " << loadStoreCompStall << " cycles" << std::endl;
+    std::cout << "   Executed Nodes:                  " << nodes << " cycles" << std::endl;
+    std::cout << "       Load Only:                   " << loadOnly << " cycles" << std::endl;
+    std::cout << "       Store Only:                  " << storeOnly << " cycles" << std::endl;
+    std::cout << "       Compute Only:                " << compOnly << " cycles" << std::endl;
+    std::cout << "       Compute & Store:             " << storeComp << " cycles" << std::endl;
+    std::cout << "       Load & Store:                " << loadStore << " cycles" << std::endl;
+    std::cout << "       Load & Compute:              " << loadComp << " cycles" << std::endl;
+    std::cout << "       Load & Compute & Store:      " << loadStoreComp << " cycles" << std::endl;
+    std::cout << std::fixed << std::setprecision(6) << std::endl;
+    std::cout << "   ========= Runtime FU's ========= (Max | Avg) ===" << std::endl;
+    std::cout << "   Counter FU's:                    " << std::setw(4) << run_counter << " | " << occ_counter << std::endl;
+    std::cout << "   Integer Add/Sub FU's:            " << std::setw(4) << run_add_sub << " | " << occ_add_sub << std::endl;
+    std::cout << "   Integer Mul/Div FU's:            " << std::setw(4) << run_mul_div << " | " << occ_mul_div << std::endl;
+    std::cout << "   Integer Shifter FU's:            " << std::setw(4) << run_shift << " | " << occ_shift << std::endl;
+    std::cout << "   Integer Bitwise FU's:            " << std::setw(4) << run_bit << " | " << occ_bit << std::endl;
+    std::cout << "   Floating Point Float Add/Sub:    " << std::setw(4) << run_float_add_sub << " | " << occ_float_add_sub << std::endl;
+    std::cout << "   Floating Point Double Add/Sub:   " << std::setw(4) << run_doub_add_sub << " | " << occ_doub_add_sub << std::endl;
+    std::cout << "   Floating Point Float Mul/Div:    " << std::setw(4) << run_float_mul_div << " | " << occ_float_mul_div << std::endl;
+    std::cout << "   Floating Point Double Mul/Div:   " << std::setw(4) << run_doub_mul_div << " | " << occ_doub_mul_div << std::endl;
+    std::cout << "   0 Cycle Compare FU's:            " << std::setw(4) << run_zero << " | " << occ_zero << std::endl;
+    std::cout << "   GEP Instruction FU's:            " << std::setw(4) << run_gep << " | " << occ_gep << std::endl;
+    std::cout << "   Type Conversion FU's:            " << std::setw(4) << run_conv << " | " << occ_conv << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Static FU's =========================="  << std::endl;
+    std::cout << "   Counter FU's:                    " << static_counter << std::endl;
+    std::cout << "   Integer Add/Sub FU's:            " << static_add_sub << std::endl;
+    std::cout << "   Integer Mul/Div FU's:            " << static_mul_div << std::endl;
+    std::cout << "   Integer Shifter FU's:            " << static_shift << std::endl;
+    std::cout << "   Integer Bitwise FU's:            " << static_bit << std::endl;
+    std::cout << "   Floating Point Float Add/Sub:    " << static_float_add_sub << std::endl;
+    std::cout << "   Floating Point Double Add/Sub:   " << static_doub_add_sub << std::endl;
+    std::cout << "   Floating Point Float Mul/Div:    " << static_float_mul_div << std::endl;
+    std::cout << "   Floating Point Double Mul/Div:   " << static_doub_mul_div << std::endl;
+    std::cout << "   0 Cycle Compare FU's:            " << static_zero << std::endl;
+    std::cout << "   GEP Instruction FU's:            " << static_gep << std::endl;
+    std::cout << "   Type Conversion FU's:            " << static_conv << std::endl;
+    std::cout << "   Other:                           " << static_other << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Pipeline Register Usage =============" << std::endl;
+    std::cout << "   Total Number of Registers:       " << reg_total << std::endl;
+    std::cout << "   Max Register Usage Per Cycle:    " << reg_max_usage << std::endl;
+    std::cout << "   Avg Register Usage Per Cycle:    " << reg_avg_usage << std::endl;
+    std::cout << "   Avg Register Size (Bytes):       " << reg_avg_size << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Memory Configuration =================" << std::endl;
+    std::cout << "   Cache Bus Ports:                 " << cache_ports << std::endl;
+    std::cout << "   Shared Cache Size:               " << cache_size << "kB" << std::endl;
+    std::cout << "   Local Bus Ports:                 " << local_ports << std::endl;
+    std::cout << "   Private SPM Size:                " << spm_size << "kB" << std::endl;
+    std::cout << "   Private Read Ports:              " << read_ports << std::endl;
+    std::cout << "   Private Write Ports:             " << write_ports << std::endl;
+    std::cout << "   Private Read Bus Width:          " << read_bus_width << std::endl;
+    std::cout << "   Private Write Bus Width:         " << write_bus_width << std::endl;
+    std::cout << "       Memory Reads:                " << dma_reads << std::endl;
+    std::cout << "       Memory Writes:               " << dma_writes << std::endl;    
+    std::cout << "   ========= Power Analysis ======================" << std::endl;
+    std::cout << "   FU Leakage Power:                " << fu_leakage << " mW " << std::endl;
+    std::cout << "   FU Dynamic Power:                " << fu_dynamic << " mW " << std::endl;
+    std::cout << "   FU Total Power:                  " << fu_total_power << " mW " << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Registers Leakage Power:          " << reg_leakage  << " mW " << std::endl;
+    std::cout << "   Registers Dynamic Power:          " << reg_dynamic << " mW " << std::endl;
+    std::cout << "       Register Reads (Bits):        " << reg_reads << std::endl;
+    std::cout << "       Register Writes (Bits):       " << reg_writes << std::endl;
+    std::cout << "   Registers Total Power:            " << reg_total_power <<  " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   SPM Leakage Power:               " << spm_leakage << " mW" << std::endl;
+    std::cout << "   SPM Read Dynamic Power:          " << spm_read_dynamic << " mW" << std::endl;
+    std::cout << "   SPM Write Dynamic Power:         " << spm_write_dynamic << " mW" << std::endl;
+    std::cout << "   SPM Total Power:                 " << spm_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Cache Leakage Power:             " << cache_leakage << " mW" << std::endl;
+    std::cout << "   Cache Read Dynamic Power:        " << cache_read_dynamic << " mW" << std::endl;
+    std::cout << "   Cache Write Dynamic Power:       " << cache_write_dynamic << " mW" << std::endl;
+    std::cout << "   Cache Total Power:               " << cache_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   Accelerator Power:               " << total_power << " mW" << std::endl;
+    std::cout << "   Accelerator Power (SPM):         " << acc_spm_total_power << " mW" << std::endl;
+    std::cout << "   Accelerator Power (Cache):       " << acc_cache_total_power << " mW" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= Area Analysis =======================" << std::endl;
+    std::cout << "   FU Area:                         " << fu_area << " um^2 (" << fu_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Register Area:                   " << reg_area << " um^2 (" << reg_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   SPM Area:                        " << spm_area << " um^2 (" << spm_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Cache Area:                      " << cache_area << " um^2 (" << cache_area/1000000 << " mm^2)" << std::endl; 
+    std::cout << std::endl;
+    std::cout << "   Accelerator Area:                " << total_area << " um^2 (" << total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Accelerator Area (SPM):          " << acc_spm_total_area << " um^2 (" << acc_spm_total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << "   Accelerator Area (Cache):        " << acc_cache_total_area << " um^2 (" << acc_cache_total_area/1000000 << " mm^2)" << std::endl;
+    std::cout << std::endl;
+    std::cout << "   ========= SPM Resizing  =======================" << std::endl;
+    std::cout << "   SPM Optimized Leakage Power:     " << spm_opt_leakage << " mW" << std::endl;
+    std::cout << "   SPM Opt Area:                    " << spm_opt_area << " um^2" << std::endl;
+    std::cout << std::endl;
+*/
+
+}
+
+
+void
+HWStatistics::simpleStats() {
+    /*
+    std::cout << std::fixed << std::setprecision(6) << std::endl;
+    std::cout << "StatsStart:";
+    std::cout << "\n" << setupTime;
+    std::cout << ",\n" << simTime;
+    std::cout << ",\n" << sys_clock;
+    std::cout << ",\n" << fu_clock_period;
+    std::cout << ",\n" << cycles;
+    std::cout << ",\n" << runtime;
+    std::cout << ",\n" << stalls;
+    std::cout << ",\n" << loadOnlyStall;
+    std::cout << ",\n" << storeOnlyStall;
+    std::cout << ",\n" << compOnlyStall;
+    std::cout << ",\n" << storeCompStall;
+    std::cout << ",\n" << loadStoreStall;
+    std::cout << ",\n" << loadCompStall;
+    std::cout << ",\n" << loadStoreCompStall;
+    std::cout << ",\n" << nodes;
+    std::cout << ",\n" << loadOnly;
+    std::cout << ",\n" << storeOnly;
+    std::cout << ",\n" << compOnly;
+    std::cout << ",\n" << storeComp;
+    std::cout << ",\n" << loadStore;
+    std::cout << ",\n" << loadComp;
+    std::cout << ",\n" << loadStoreComp;
+    std::cout << ",\n" << run_counter;
+    std::cout << ",\n" << occ_counter;
+    std::cout << ",\n" << run_add_sub;
+    std::cout << ",\n" << occ_add_sub;
+    std::cout << ",\n" << run_mul_div;
+    std::cout << ",\n" << occ_mul_div;
+    std::cout << ",\n" << run_shift;
+    std::cout << ",\n" << occ_shift;
+    std::cout << ",\n" << run_bit;
+    std::cout << ",\n" << occ_bit;
+    std::cout << ",\n" << run_float_add_sub;
+    std::cout << ",\n" << occ_float_add_sub;
+    std::cout << ",\n" << run_doub_add_sub;
+    std::cout << ",\n" << occ_doub_add_sub;
+    std::cout << ",\n" << run_float_mul_div;
+    std::cout << ",\n" << occ_float_mul_div;
+    std::cout << ",\n" << run_doub_mul_div;
+    std::cout << ",\n" << occ_doub_mul_div;
+    std::cout << ",\n" << run_zero;
+    std::cout << ",\n" << occ_zero;
+    std::cout << ",\n" << run_gep;
+    std::cout << ",\n" << occ_gep;
+    std::cout << ",\n" << run_conv;
+    std::cout << ",\n" << occ_conv;
+    std::cout << ",\n" << static_counter;
+    std::cout << ",\n" << static_add_sub;
+    std::cout << ",\n" << static_mul_div;
+    std::cout << ",\n" << static_shift;
+    std::cout << ",\n" << static_bit;
+    std::cout << ",\n" << static_float_add_sub;
+    std::cout << ",\n" << static_doub_add_sub;
+    std::cout << ",\n" << static_float_mul_div;
+    std::cout << ",\n" << static_doub_mul_div;
+    std::cout << ",\n" << static_zero;
+    std::cout << ",\n" << static_gep;
+    std::cout << ",\n" << static_conv;
+    std::cout << ",\n" << static_other;
+    std::cout << ",\n" << reg_total;
+    std::cout << ",\n" << reg_max_usage;
+    std::cout << ",\n" << reg_avg_usage;
+    std::cout << ",\n" << reg_avg_size;
+    std::cout << ",\n" << cache_ports;
+    std::cout << ",\n" << cache_size;
+    std::cout << ",\n" << local_ports;
+    std::cout << ",\n" << spm_size;
+    std::cout << ",\n" << read_ports;
+    std::cout << ",\n" << write_ports;
+    std::cout << ",\n" << read_bus_width;
+    std::cout << ",\n" << write_bus_width;
+    std::cout << ",\n" << dma_reads;
+    std::cout << ",\n" << dma_writes;
+    std::cout << ",\n" << fu_leakage;
+    std::cout << ",\n" << fu_dynamic;
+    std::cout << ",\n" << fu_total_power;
+    std::cout << ",\n" << reg_leakage;
+    std::cout << ",\n" << reg_dynamic;
+    std::cout << ",\n" << reg_reads;
+    std::cout << ",\n" << reg_writes;
+    std::cout << ",\n" << reg_total_power;
+    std::cout << ",\n" << spm_leakage;
+    std::cout << ",\n" << spm_read_dynamic;
+    std::cout << ",\n" << spm_write_dynamic;
+    std::cout << ",\n" << spm_total_power;
+    std::cout << ",\n" << cache_leakage;
+    std::cout << ",\n" << cache_read_dynamic;
+    std::cout << ",\n" << cache_write_dynamic;
+    std::cout << ",\n" << cache_total_power;
+    std::cout << ",\n" << total_power;
+    std::cout << ",\n" << acc_spm_total_power;
+    std::cout << ",\n" << acc_cache_total_power;
+    std::cout << ",\n" << fu_area;
+    std::cout << ",\n" << reg_area;
+    std::cout << ",\n" << spm_area;
+    std::cout << ",\n" << cache_area;
+    std::cout << ",\n" << total_area;
+    std::cout << ",\n" << acc_spm_total_area;
+    std::cout << ",\n" << acc_cache_total_area;
+    std::cout << ",\n" << spm_opt_leakage;
+    std::cout << ",\n" << spm_opt_area;
+    std::cout << "\nStatsEnd:\n";
+    */
+}
+
+void
+HWStatistics::unitCorrections() {
+    /*
+    sys_clock = 1.0/(clock_period/1000);
+    cache_size = cache_size/1024;
+    spm_size = spm_size/1024;
+    spm_total_power = spm_leakage+spm_read_dynamic+spm_write_dynamic;
+    cache_total_power = cache_leakage + cache_read_dynamic + cache_write_dynamic;
+    acc_spm_total_power = total_power + spm_total_power;
+    acc_cache_total_power = total_power + cache_total_power;
+    spm_area = spm_area/1000;
+    cache_area = cache_area/1000;
+    spm_opt_area = spm_opt_area/1000;
+    acc_spm_total_area = total_area + spm_area;
+    acc_cache_total_area = total_area + cache_area;
+    */
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/hw_statistics.hh gem5-SALAM/src/hwacc/HWModeling/src/hw_statistics.hh
--- gem5/src/hwacc/HWModeling/src/hw_statistics.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/hw_statistics.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,207 @@
+#ifndef __HWMODEL_HW_STATISTICS_HH__
+#define __HWMODEL_HW_STATISTICS_HH__
+
+#include "params/HWStatistics.hh"
+#include "sim/sim_object.hh"
+
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+
+#include <iostream>
+#include <iomanip>
+#include <fstream>
+#include <vector>
+
+using namespace gem5;
+
+
+// Things here are output only once at end of simulation
+struct HW_Params {
+    int run_end;
+
+    void reset() {
+        run_end = 0;
+    }
+
+};
+
+// These are outputs that are stored each cycle
+struct HW_Cycle_Stats {
+    int cycle;
+
+    int resInFlight;
+
+    int loadInFlight;
+    int loadInternal;
+    int loadAcitve;
+    int loadRawStall;
+
+    int storeInFlight;
+    int storeActive;
+
+    int compInFlight;
+    int compLaunched;
+    int compActive;
+    int compFUStall;
+    int compCommited;
+
+
+
+    void reset() {
+        cycle = 0;
+        resInFlight = 0;
+        loadInFlight = 0;
+        storeInFlight = 0;
+        compInFlight = 0;
+    }
+};
+
+class HWStatistics : public SimObject
+{
+    private:
+        HW_Params hw_params;
+        HW_Cycle_Stats current_cycle_stats;
+        std::vector<HW_Cycle_Stats>::iterator cycle_buffer;
+        std::vector<std::vector<HW_Cycle_Stats>> hw_buffer_list;
+        std::vector<std::vector<HW_Cycle_Stats>>::iterator hw_buffer;
+
+        // Make Into SimObjects to pass from config.yml
+        bool cycle_tracking = false;
+        bool dbg;
+        int statBufferSize;
+        int statBufferPreDefine;
+
+
+        // Class Only
+        int current_buffer_index = 0;
+
+
+    public:
+        HWStatistics();
+        HWStatistics(const HWStatisticsParams &params);
+        bool use_cycle_tracking() { return cycle_tracking; }
+
+        void print();
+        void simpleStats();
+        void unitCorrections();
+        void updateHWStatsCycleStart();
+        void updateHWStatsCycleEnd(int curr_cycle);
+        void updateBuffer();
+        void clearStats();
+};
+
+#endif //__HWMODEL_HW_STATISTICS_HH__
+
+/*
+        //Performance
+        double setupTime;
+        double simTime;
+        int clock_period;
+        double sys_clock;
+        int fu_clock_period;
+        int cycles;
+        double runtime;
+        int stalls;
+        int nodes;
+        int loadOnly; //
+        int storeOnly; //
+        int compOnly; //
+        int loadStore; //
+        int loadComp;
+        int loadStoreComp;
+        int storeComp;
+        int loadOnlyStall; //
+        int storeOnlyStall; //
+        int compOnlyStall;
+        int loadStoreStall; //
+        int loadCompStall;
+        int loadStoreCompStall;
+        int storeCompStall;        
+        //Memory Stats
+        int cache_ports;
+        int local_ports;
+        int cache_size;
+        int spm_size;
+        int read_ports;
+        int write_ports;
+        int read_bus_width;
+        int write_bus_width;
+        double spm_leakage;
+        double spm_read_dynamic;
+        double spm_write_dynamic;
+        double spm_area;
+        double spm_opt_leakage;
+        double spm_opt_area;
+        double cache_leakage;
+        double cache_read_dynamic;
+        double cache_write_dynamic;
+        double cache_area;
+        // Runtime Functional Units
+        int run_counter;
+        double occ_counter;
+        int run_add_sub;
+        double occ_add_sub;
+        int run_mul_div;
+        double occ_mul_div;
+        int run_shift;
+        double occ_shift;
+        int run_bit;
+        double occ_bit;
+        int run_float_add_sub;
+        double occ_float_add_sub;
+        int run_doub_add_sub;
+        double occ_doub_add_sub;
+        int run_float_mul_div;
+        double occ_float_mul_div;
+        int run_doub_mul_div;
+        double occ_doub_mul_div;
+        int run_zero;
+        double occ_zero;
+        int run_gep;
+        double occ_gep;
+        int run_conv;
+        double occ_conv;
+        // Static Functional Units
+        int static_counter;
+        int static_add_sub;
+        int static_mul_div;
+        int static_shift;
+        int static_bit;
+        int static_float_add_sub;
+        int static_doub_add_sub;
+        int static_float_mul_div;
+        int static_doub_mul_div;
+        int static_zero;
+        int static_gep;
+        int static_conv;
+        int static_other;
+        // Registers
+        int reg_total;
+        int reg_max_usage;
+        double reg_avg_usage;
+        double reg_avg_size;
+        int reg_reads;
+        int reg_writes;
+        int mem_reads;
+        int mem_writes;
+        int dma_reads;
+        int dma_writes;
+        // Power
+        double fu_leakage;
+        double fu_dynamic;
+        double fu_total_power;
+        double reg_leakage;
+        double reg_dynamic;
+        double reg_total_power;
+        double total_power;
+        // Area
+        double fu_area;
+        double reg_area;
+        double total_area;
+        // Totals
+        double spm_total_power;
+        double cache_total_power;
+        double acc_spm_total_power;
+        double acc_cache_total_power;
+        double acc_spm_total_area;
+        double acc_cache_total_area;
+        */
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/instruction_config.cc gem5-SALAM/src/hwacc/HWModeling/src/instruction_config.cc
--- gem5/src/hwacc/HWModeling/src/instruction_config.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/instruction_config.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,108 @@
+#include "instruction_config.hh"
+
+// TODO: Update source generator
+
+// GENERATED CONSTRUCTOR - DO NOT MODIFY
+InstConfig::InstConfig(const InstConfigParams &params) :
+    SimObject(params),
+    _add(params.add),
+    _addrspacecast(params.addrspacecast),
+    _alloca(params.alloca),
+    _and_inst(params.and_inst),
+    _ashr(params.ashr),
+    _bitcast(params.bitcast),
+    _br(params.br),
+    _call(params.call),
+    _fadd(params.fadd),
+    _fcmp(params.fcmp),
+    _fdiv(params.fdiv),
+    _fence(params.fence),
+    _fmul(params.fmul),
+    _fpext(params.fpext),
+    _fptosi(params.fptosi),
+    _fptoui(params.fptoui),
+    _fptrunc(params.fptrunc),
+    _frem(params.frem),
+    _fsub(params.fsub),
+    _gep(params.gep),
+    _icmp(params.icmp),
+    _indirectbr(params.indirectbr),
+    _inttoptr(params.inttoptr),
+    _invoke(params.invoke),
+    _landingpad(params.landingpad),
+    _load(params.load),
+    _lshr(params.lshr),
+    _mul(params.mul),
+    _or_inst(params.or_inst),
+    _phi(params.phi),
+    _ptrtoint(params.ptrtoint),
+    _resume(params.resume),
+    _ret(params.ret),
+    _sdiv(params.sdiv),
+    _select(params.select),
+    _sext(params.sext),
+    _shl(params.shl),
+    _srem(params.srem),
+    _store(params.store),
+    _sub(params.sub),
+    _switch_inst(params.switch_inst),
+    _trunc(params.trunc),
+    _udiv(params.udiv),
+    _uitofp(params.uitofp),
+    _unreachable(params.unreachable),
+    _urem(params.urem),
+    _vaarg(params.vaarg),
+    _xor_inst(params.xor_inst),
+    _zext(params.zext) {
+        inst_list.push_back(_add);
+        inst_list.push_back(_addrspacecast);
+        inst_list.push_back(_alloca);
+        inst_list.push_back(_and_inst);
+        inst_list.push_back(_ashr);
+        inst_list.push_back(_bitcast);
+        inst_list.push_back(_br);
+        inst_list.push_back(_call);
+        inst_list.push_back(_fadd);
+        inst_list.push_back(_fcmp);
+        inst_list.push_back(_fdiv);
+        inst_list.push_back(_fence);
+        inst_list.push_back(_fmul);
+        inst_list.push_back(_fpext);
+        inst_list.push_back(_fptosi);
+        inst_list.push_back(_fptoui);
+        inst_list.push_back(_fptrunc);
+        inst_list.push_back(_frem);
+        inst_list.push_back(_fsub);
+        inst_list.push_back(_gep);
+        inst_list.push_back(_icmp);
+        inst_list.push_back(_indirectbr);
+        inst_list.push_back(_inttoptr);
+        inst_list.push_back(_invoke);
+        inst_list.push_back(_landingpad);
+        inst_list.push_back(_load);
+        inst_list.push_back(_lshr);
+        inst_list.push_back(_mul);
+        inst_list.push_back(_or_inst);
+        inst_list.push_back(_phi);
+        inst_list.push_back(_ptrtoint);
+        inst_list.push_back(_resume);
+        inst_list.push_back(_ret);
+        inst_list.push_back(_sdiv);
+        inst_list.push_back(_select);
+        inst_list.push_back(_sext);
+        inst_list.push_back(_shl);
+        inst_list.push_back(_srem);
+        inst_list.push_back(_store);
+        inst_list.push_back(_sub);
+        inst_list.push_back(_switch_inst);
+        inst_list.push_back(_trunc);
+        inst_list.push_back(_udiv);
+        inst_list.push_back(_uitofp);
+        inst_list.push_back(_unreachable);
+        inst_list.push_back(_urem);
+        inst_list.push_back(_vaarg);
+        inst_list.push_back(_xor_inst);
+        inst_list.push_back(_zext);
+    }
+// END OF GENERATED CONSTRUCTOR
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/instruction_config.hh gem5-SALAM/src/hwacc/HWModeling/src/instruction_config.hh
--- gem5/src/hwacc/HWModeling/src/instruction_config.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/instruction_config.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,126 @@
+#ifndef __HWMODEL_INSTRUCTION_CONFIG_HH__
+#define __HWMODEL_INSTRUCTION_CONFIG_HH__
+
+#include "params/InstConfig.hh"
+#include "sim/sim_object.hh"
+// GENERATED HEADERS - DO NOT MODIFY
+#include "../generated/instructions/base.hh"
+#include "../generated/instructions/add.hh"
+#include "../generated/instructions/addrspacecast.hh"
+#include "../generated/instructions/alloca.hh"
+#include "../generated/instructions/and_inst.hh"
+#include "../generated/instructions/ashr.hh"
+#include "../generated/instructions/bitcast.hh"
+#include "../generated/instructions/br.hh"
+#include "../generated/instructions/call.hh"
+#include "../generated/instructions/fadd.hh"
+#include "../generated/instructions/fcmp.hh"
+#include "../generated/instructions/fdiv.hh"
+#include "../generated/instructions/fence.hh"
+#include "../generated/instructions/fmul.hh"
+#include "../generated/instructions/fpext.hh"
+#include "../generated/instructions/fptosi.hh"
+#include "../generated/instructions/fptoui.hh"
+#include "../generated/instructions/fptrunc.hh"
+#include "../generated/instructions/frem.hh"
+#include "../generated/instructions/fsub.hh"
+#include "../generated/instructions/gep.hh"
+#include "../generated/instructions/icmp.hh"
+#include "../generated/instructions/indirectbr.hh"
+#include "../generated/instructions/inttoptr.hh"
+#include "../generated/instructions/invoke.hh"
+#include "../generated/instructions/landingpad.hh"
+#include "../generated/instructions/load.hh"
+#include "../generated/instructions/lshr.hh"
+#include "../generated/instructions/mul.hh"
+#include "../generated/instructions/or_inst.hh"
+#include "../generated/instructions/phi.hh"
+#include "../generated/instructions/ptrtoint.hh"
+#include "../generated/instructions/resume.hh"
+#include "../generated/instructions/ret.hh"
+#include "../generated/instructions/sdiv.hh"
+#include "../generated/instructions/select.hh"
+#include "../generated/instructions/sext.hh"
+#include "../generated/instructions/shl.hh"
+#include "../generated/instructions/srem.hh"
+#include "../generated/instructions/store.hh"
+#include "../generated/instructions/sub.hh"
+#include "../generated/instructions/switch_inst.hh"
+#include "../generated/instructions/trunc.hh"
+#include "../generated/instructions/udiv.hh"
+#include "../generated/instructions/uitofp.hh"
+#include "../generated/instructions/unreachable.hh"
+#include "../generated/instructions/urem.hh"
+#include "../generated/instructions/vaarg.hh"
+#include "../generated/instructions/xor_inst.hh"
+#include "../generated/instructions/zext.hh"
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+using namespace gem5;
+
+class InstConfigBase;
+
+class InstConfig : public SimObject
+{
+	private:
+	protected:
+
+	public:
+		// GENERATED CLASS MEMBERS - DO NOT MODIFY
+		Add* _add;
+		Addrspacecast* _addrspacecast;
+		Alloca* _alloca;
+		AndInst* _and_inst;
+		Ashr* _ashr;
+		Bitcast* _bitcast;
+		Br* _br;
+		Call* _call;
+		Fadd* _fadd;
+		Fcmp* _fcmp;
+		Fdiv* _fdiv;
+		Fence* _fence;
+		Fmul* _fmul;
+		Fpext* _fpext;
+		Fptosi* _fptosi;
+		Fptoui* _fptoui;
+		Fptrunc* _fptrunc;
+		Frem* _frem;
+		Fsub* _fsub;
+		Gep* _gep;
+		Icmp* _icmp;
+		Indirectbr* _indirectbr;
+		Inttoptr* _inttoptr;
+		Invoke* _invoke;
+		Landingpad* _landingpad;
+		Load* _load;
+		Lshr* _lshr;
+		Mul* _mul;
+		OrInst* _or_inst;
+		Phi* _phi;
+		Ptrtoint* _ptrtoint;
+		Resume* _resume;
+		Ret* _ret;
+		Sdiv* _sdiv;
+		Select* _select;
+		Sext* _sext;
+		Shl* _shl;
+		Srem* _srem;
+		Store* _store;
+		Sub* _sub;
+		SwitchInst* _switch_inst;
+		Trunc* _trunc;
+		Udiv* _udiv;
+		Uitofp* _uitofp;
+		Unreachable* _unreachable;
+		Urem* _urem;
+		Vaarg* _vaarg;
+		XorInst* _xor_inst;
+		Zext* _zext;
+		InstConfig();
+		// DEFAULT CONSTRUCTOR - DO NOT MODIFY
+		InstConfig(const InstConfigParams &params);
+		// END DEFAULT CONSTRUCTOR
+		std::vector<InstConfigBase*> inst_list;};
+#endif //__INSTRUCTION_CONFIG_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/opcodes.cc gem5-SALAM/src/hwacc/HWModeling/src/opcodes.cc
--- gem5/src/hwacc/HWModeling/src/opcodes.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/opcodes.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,116 @@
+//------------------------------------------//
+#include "opcodes.hh"
+//------------------------------------------//
+
+InstOpCodes::InstOpCodes(const InstOpCodesParams &p):
+    SimObject(p),
+    gep_inst(p.gep),
+    phi_inst(p.phi),
+    select_inst(p.select),
+    ret_inst(p.ret),
+    br_inst(p.br),
+    switch_inst(p.switch_inst),
+    indirectbr_inst(p.indirectbr),
+    invoke_inst(p.invoke),
+    resume_inst(p.resume),
+    unreachable_inst(p.unreachable),
+    icmp_inst(p.icmp),
+    fcmp_inst(p.fcmp),
+    trunc_inst(p.trunc),
+    zext_inst(p.zext),
+    sext_inst(p.sext),
+    fptrunc_inst(p.fptrunc),
+    fpext_inst(p.fpext),
+    fptoui_inst(p.fptoui),
+    fptosi_inst(p.fptosi),
+    uitofp_inst(p.uitofp),
+    ptrtoint_inst(p.ptrtoint),
+    inttoptr_inst(p.inttoptr),
+    bitcast_inst(p.bitcast),
+    addrspacecast_inst(p.addrspacecast),
+    call_inst(p.call),
+    vaarg_inst(p.vaarg),
+    landingpad_inst(p.landingpad),
+    alloca_inst(p.alloca),
+    load_inst(p.load),
+    store_inst(p.store),
+    fence_inst(p.fence),
+    shl_inst(p.shl),
+    lshr_inst(p.lshr),
+    ashr_inst(p.ashr),
+    and_inst(p.and_inst),
+    or_inst(p.or_inst),
+    xor_inst(p.xor_inst),
+    add_inst(p.add),
+    sub_inst(p.sub),
+    mul_inst(p.mul),
+    udiv_inst(p.udiv),
+    sdiv_inst(p.sdiv),
+    urem_inst(p.urem),
+    srem_inst(p.srem),
+    fadd_inst(p.fadd),
+    fsub_inst(p.fsub),
+    fmul_inst(p.fmul),
+    fdiv_inst(p.fdiv),
+    frem_inst(p.frem)
+    { 
+        usage.insert(std::pair<int, int>(counter_inst, 0));
+        usage.insert(std::pair<int, int>(gep_inst, 0));
+        usage.insert(std::pair<int, int>(phi_inst, 0));
+        usage.insert(std::pair<int, int>(select_inst, 0));
+        usage.insert(std::pair<int, int>(ret_inst, 0));
+        usage.insert(std::pair<int, int>(br_inst, 0));
+        usage.insert(std::pair<int, int>(switch_inst, 0));
+        usage.insert(std::pair<int, int>(indirectbr_inst, 0));
+        usage.insert(std::pair<int, int>(invoke_inst, 0));
+        usage.insert(std::pair<int, int>(resume_inst, 0));
+        usage.insert(std::pair<int, int>(unreachable_inst, 0));
+        usage.insert(std::pair<int, int>(icmp_inst, 0));
+        usage.insert(std::pair<int, int>(fcmp_inst, 0));
+        usage.insert(std::pair<int, int>(trunc_inst, 0));
+        usage.insert(std::pair<int, int>(zext_inst, 0));
+        usage.insert(std::pair<int, int>(sext_inst, 0));
+        usage.insert(std::pair<int, int>(fptrunc_inst, 0));
+        usage.insert(std::pair<int, int>(fpext_inst, 0));
+        usage.insert(std::pair<int, int>(fptoui_inst, 0));
+        usage.insert(std::pair<int, int>(fptosi_inst, 0));
+        usage.insert(std::pair<int, int>(uitofp_inst, 0));
+        usage.insert(std::pair<int, int>(sitofp_inst, 0));
+        usage.insert(std::pair<int, int>(ptrtoint_inst, 0));
+        usage.insert(std::pair<int, int>(inttoptr_inst, 0));
+        usage.insert(std::pair<int, int>(bitcast_inst, 0));
+        usage.insert(std::pair<int, int>(addrspacecast_inst, 0));
+        usage.insert(std::pair<int, int>(call_inst, 0));
+        usage.insert(std::pair<int, int>(vaarg_inst, 0));
+        usage.insert(std::pair<int, int>(landingpad_inst, 0));
+        usage.insert(std::pair<int, int>(catchpad_inst, 0));
+        usage.insert(std::pair<int, int>(alloca_inst, 0));
+        usage.insert(std::pair<int, int>(load_inst, 0));
+        usage.insert(std::pair<int, int>(store_inst, 0));
+        usage.insert(std::pair<int, int>(fence_inst, 0));
+        usage.insert(std::pair<int, int>(cmpxchg_inst, 0));
+        usage.insert(std::pair<int, int>(atomicrmw_inst, 0));
+        usage.insert(std::pair<int, int>(extractvalue_inst, 0));
+        usage.insert(std::pair<int, int>(insertvalue_inst, 0));
+        usage.insert(std::pair<int, int>(extractelement_inst, 0));
+        usage.insert(std::pair<int, int>(insertelement_inst, 0));
+        usage.insert(std::pair<int, int>(shufflevector_inst, 0));
+        usage.insert(std::pair<int, int>(shl_inst, 0));
+        usage.insert(std::pair<int, int>(lshr_inst, 0));
+        usage.insert(std::pair<int, int>(ashr_inst, 0));
+        usage.insert(std::pair<int, int>(and_inst, 0));
+        usage.insert(std::pair<int, int>(or_inst, 0));
+        usage.insert(std::pair<int, int>(xor_inst, 0));
+        usage.insert(std::pair<int, int>(add_inst, 0));
+        usage.insert(std::pair<int, int>(sub_inst, 0));
+        usage.insert(std::pair<int, int>(mul_inst, 0));
+        usage.insert(std::pair<int, int>(udiv_inst, 0));
+        usage.insert(std::pair<int, int>(sdiv_inst, 0));
+        usage.insert(std::pair<int, int>(urem_inst, 0));
+        usage.insert(std::pair<int, int>(srem_inst, 0));
+        usage.insert(std::pair<int, int>(fadd_inst, 0));
+        usage.insert(std::pair<int, int>(fsub_inst, 0));
+        usage.insert(std::pair<int, int>(fmul_inst, 0));
+        usage.insert(std::pair<int, int>(fdiv_inst, 0));
+        usage.insert(std::pair<int, int>(frem_inst, 0));
+    }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/opcodes.hh gem5-SALAM/src/hwacc/HWModeling/src/opcodes.hh
--- gem5/src/hwacc/HWModeling/src/opcodes.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/opcodes.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,86 @@
+#ifndef __HWMODEL_INSTOPCODES_HH__
+#define __HWMODEL_INSTOPCODES_HH__
+//------------------------------------------//
+//#include "debug_flags.hh"
+#include "params/InstOpCodes.hh"
+#include "sim/sim_object.hh"
+//------------------------------------------//
+#include <cstdint>
+#include <map>
+//------------------------------------------//
+
+using namespace gem5;
+
+class InstOpCodes : public SimObject
+{
+    public:
+    uint32_t counter_inst;
+    uint32_t gep_inst;
+    uint32_t phi_inst;
+    uint32_t select_inst;
+    uint32_t ret_inst;
+    uint32_t br_inst;
+    uint32_t switch_inst;
+    uint32_t indirectbr_inst;
+    uint32_t invoke_inst;
+    uint32_t resume_inst;
+    uint32_t unreachable_inst;
+    uint32_t icmp_inst;
+    uint32_t fcmp_inst;
+    uint32_t trunc_inst;
+    uint32_t zext_inst;
+    uint32_t sext_inst;
+    uint32_t fptrunc_inst;
+    uint32_t fpext_inst;
+    uint32_t fptoui_inst;
+    uint32_t fptosi_inst;
+    uint32_t uitofp_inst;
+    uint32_t sitofp_inst;
+    uint32_t ptrtoint_inst;
+    uint32_t inttoptr_inst;
+    uint32_t bitcast_inst;
+    uint32_t addrspacecast_inst;
+    uint32_t call_inst;
+    uint32_t vaarg_inst;
+    uint32_t landingpad_inst;
+    uint32_t catchpad_inst;
+    uint32_t alloca_inst;
+    uint32_t load_inst;
+    uint32_t store_inst;
+    uint32_t fence_inst;
+    uint32_t cmpxchg_inst;
+    uint32_t atomicrmw_inst;
+    uint32_t extractvalue_inst;
+    uint32_t insertvalue_inst;
+    uint32_t extractelement_inst;
+    uint32_t insertelement_inst;
+    uint32_t shufflevector_inst;
+    uint32_t shl_inst;
+    uint32_t lshr_inst;
+    uint32_t ashr_inst;
+    uint32_t and_inst;
+    uint32_t or_inst;
+    uint32_t xor_inst;
+    uint32_t add_inst;
+    uint32_t sub_inst;
+    uint32_t mul_inst;
+    uint32_t udiv_inst;
+    uint32_t sdiv_inst;
+    uint32_t urem_inst;
+    uint32_t srem_inst;
+    uint32_t fadd_inst;
+    uint32_t fsub_inst;
+    uint32_t fmul_inst;
+    uint32_t fdiv_inst;
+    uint32_t frem_inst;
+
+    std::map<int, int> usage;
+
+    InstOpCodes();
+    InstOpCodes(const InstOpCodesParams &p);
+    void update_usage(uint64_t OpCode) { usage[OpCode]++; };
+    uint64_t get_usage(uint64_t OpCode) { return usage[OpCode]; }
+
+};
+
+#endif //__HWMODEL_INSTOPCODES_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/salam_power_model.cc gem5-SALAM/src/hwacc/HWModeling/src/salam_power_model.cc
--- gem5/src/hwacc/HWModeling/src/salam_power_model.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/salam_power_model.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,5 @@
+#include "salam_power_model.hh"
+
+SALAMPowerModel::SALAMPowerModel(const SALAMPowerModelParams &params) :
+    SimObject(params) { }
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/salam_power_model.hh gem5-SALAM/src/hwacc/HWModeling/src/salam_power_model.hh
--- gem5/src/hwacc/HWModeling/src/salam_power_model.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/salam_power_model.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,39 @@
+#ifndef __HWMODEL_SALAM_POWER_MODEL_HH__
+#define __HWMODEL_SALAM_POWER_MODEL_HH__
+
+#include "params/SALAMPowerModel.hh"
+#include "sim/sim_object.hh"
+
+#include <iostream>
+#include <cstdlib>
+#include <vector>
+
+using namespace gem5;
+
+class SALAMPowerModel : public SimObject
+{
+    private:
+        struct units {
+            std::string name;
+            double exponent;
+        } power_unit, energy_unit, time_unit, area_unit;
+        
+        double internal_power;
+        double swtich_power;
+        double dynmaic_power;
+        double leakage_power;
+
+        double dynamic_energy;
+        double latency;
+        double path_delay;
+        double area;
+
+    protected:
+
+    public:
+        SALAMPowerModel();
+        SALAMPowerModel(const SALAMPowerModelParams &params);
+    
+};
+
+#endif //__HWMODEL_SALAM_POWER_MODEL_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/simulator_config.cc gem5-SALAM/src/hwacc/HWModeling/src/simulator_config.cc
--- gem5/src/hwacc/HWModeling/src/simulator_config.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/simulator_config.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,4 @@
+#include "simulator_config.hh"
+
+SimulatorConfig::SimulatorConfig(const SimulatorConfigParams &params) :
+    SimObject(params) { }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWModeling/src/simulator_config.hh gem5-SALAM/src/hwacc/HWModeling/src/simulator_config.hh
--- gem5/src/hwacc/HWModeling/src/simulator_config.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWModeling/src/simulator_config.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,20 @@
+#ifndef __HWMODEL_SIMULATOR_CONFIG_HH__
+#define __HWMODEL_SIMULATOR_CONFIG_HH__
+
+#include "params/SimulatorConfig.hh"
+#include "sim/sim_object.hh"
+
+using namespace gem5;
+
+class SimulatorConfig : public SimObject
+{
+    private:
+
+    protected:
+
+    public:
+        SimulatorConfig();
+        SimulatorConfig(const SimulatorConfigParams &params);
+};
+
+#endif //__HWMODEL_SIMULATOR_CONFIG_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/HWStatistics.py gem5-SALAM/src/hwacc/HWStatistics.py
--- gem5/src/hwacc/HWStatistics.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/HWStatistics.py	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,30 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class HWStatistics(SimObject):
+    # SimObject type
+    type = 'HWStatistics'
+    # gem5-SALAM attached header
+    cxx_header = "hwacc/HWModeling/src/hw_statistics.hh"
+    ### --- Do Not Modify Below This Line --- ###
+    ### Templates
+    ### YML Type: statistics
+    ## 'quick_stats' = Param.Bool(quick_stats, "Optimized for Runtime Performance")
+    ## 'detailed_stats' = Param.Bool(detailed_stats, "Generate full Runtime Statistics, Impacts Performance")
+    ### YML Type: statistics.output_format
+    ## 'terminal' = Param.Bool(terminal, "Print Results to Terminal")
+    ## 'to_file' = Param.Bool(file, "Print Results to File")
+    ## 'to_csv' = Param.Bool(csv, "Print Results in CSV Format")
+    ### YML Type: statistics.results
+    ## 'runtime' = Param.Bool(runtime, "Simulation Real and CPU Runtime Results")
+    ## 'performance' = Param.Bool(performance, "Simulation Cycle Performance Results")
+    ## 'power' = Param.Bool(power, "Simulation Power Results")
+    ## 'area' = Param.Bool(area, "Simulation Area Results")
+    ## 'fu_occupancy' = Param.Bool(occupancy.function_units, "Functional Unit Occupancy Results")
+    ## 'runtime_queues' = Param.Bool(occupancy.runtime_queues, "Runtime Queue Occupancy Results")
+    ## 'full_trace' = Param.Bool(occupancy.full_trace, "Detailed Occupancy Tracking, Cycle Accurate")
+    ## 'params' = Param.Bool(params, "Print All Defined Configurations")
+    ## 'inst_usage' = Param.Bool(inst_usage, "Usage count of each Instruction")
+    ## 'memory' = Param.Bool(memory, "Memory Usage Results")
+    ### -- Code Auto-Generated Below This Line -- ###
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/InstConfig.py gem5-SALAM/src/hwacc/InstConfig.py
--- gem5/src/hwacc/InstConfig.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/InstConfig.py	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,553 @@
+# AUTO-GENERATED FILE
+
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class InstConfig(SimObject):
+	# SimObject type
+	type = 'InstConfig'
+	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/src/instruction_config.hh"
+
+	add = Param.Add(Parent.any, "add instruction SimObject")
+	addrspacecast = Param.Addrspacecast(Parent.any, "addrspacecast instruction SimObject")
+	alloca = Param.Alloca(Parent.any, "alloca instruction SimObject")
+	and_inst = Param.AndInst(Parent.any, "and_inst instruction SimObject")
+	ashr = Param.Ashr(Parent.any, "ashr instruction SimObject")
+	bitcast = Param.Bitcast(Parent.any, "bitcast instruction SimObject")
+	br = Param.Br(Parent.any, "br instruction SimObject")
+	call = Param.Call(Parent.any, "call instruction SimObject")
+	fadd = Param.Fadd(Parent.any, "fadd instruction SimObject")
+	fcmp = Param.Fcmp(Parent.any, "fcmp instruction SimObject")
+	fdiv = Param.Fdiv(Parent.any, "fdiv instruction SimObject")
+	fence = Param.Fence(Parent.any, "fence instruction SimObject")
+	fmul = Param.Fmul(Parent.any, "fmul instruction SimObject")
+	fpext = Param.Fpext(Parent.any, "fpext instruction SimObject")
+	fptosi = Param.Fptosi(Parent.any, "fptosi instruction SimObject")
+	fptoui = Param.Fptoui(Parent.any, "fptoui instruction SimObject")
+	fptrunc = Param.Fptrunc(Parent.any, "fptrunc instruction SimObject")
+	frem = Param.Frem(Parent.any, "frem instruction SimObject")
+	fsub = Param.Fsub(Parent.any, "fsub instruction SimObject")
+	gep = Param.Gep(Parent.any, "gep instruction SimObject")
+	icmp = Param.Icmp(Parent.any, "icmp instruction SimObject")
+	indirectbr = Param.Indirectbr(Parent.any, "indirectbr instruction SimObject")
+	inttoptr = Param.Inttoptr(Parent.any, "inttoptr instruction SimObject")
+	invoke = Param.Invoke(Parent.any, "invoke instruction SimObject")
+	landingpad = Param.Landingpad(Parent.any, "landingpad instruction SimObject")
+	load = Param.Load(Parent.any, "load instruction SimObject")
+	lshr = Param.Lshr(Parent.any, "lshr instruction SimObject")
+	mul = Param.Mul(Parent.any, "mul instruction SimObject")
+	or_inst = Param.OrInst(Parent.any, "or_inst instruction SimObject")
+	phi = Param.Phi(Parent.any, "phi instruction SimObject")
+	ptrtoint = Param.Ptrtoint(Parent.any, "ptrtoint instruction SimObject")
+	resume = Param.Resume(Parent.any, "resume instruction SimObject")
+	ret = Param.Ret(Parent.any, "ret instruction SimObject")
+	sdiv = Param.Sdiv(Parent.any, "sdiv instruction SimObject")
+	select = Param.Select(Parent.any, "select instruction SimObject")
+	sext = Param.Sext(Parent.any, "sext instruction SimObject")
+	shl = Param.Shl(Parent.any, "shl instruction SimObject")
+	srem = Param.Srem(Parent.any, "srem instruction SimObject")
+	store = Param.Store(Parent.any, "store instruction SimObject")
+	sub = Param.Sub(Parent.any, "sub instruction SimObject")
+	switch_inst = Param.SwitchInst(Parent.any, "switch_inst instruction SimObject")
+	trunc = Param.Trunc(Parent.any, "trunc instruction SimObject")
+	udiv = Param.Udiv(Parent.any, "udiv instruction SimObject")
+	uitofp = Param.Uitofp(Parent.any, "uitofp instruction SimObject")
+	unreachable = Param.Unreachable(Parent.any, "unreachable instruction SimObject")
+	urem = Param.Urem(Parent.any, "urem instruction SimObject")
+	vaarg = Param.Vaarg(Parent.any, "vaarg instruction SimObject")
+	xor_inst = Param.XorInst(Parent.any, "xor_inst instruction SimObject")
+	zext = Param.Zext(Parent.any, "zext instruction SimObject")
+
+#AUTO-GENERATED CLASSES
+class Add(SimObject):
+	# SimObject type
+	type = 'Add'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/add.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(1, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(13, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Addrspacecast(SimObject):
+	# SimObject type
+	type = 'Addrspacecast'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/addrspacecast.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(50, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Alloca(SimObject):
+	# SimObject type
+	type = 'Alloca'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/alloca.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(31, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class AndInst(SimObject):
+	# SimObject type
+	type = 'AndInst'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/and_inst.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(4, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(28, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Ashr(SimObject):
+	# SimObject type
+	type = 'Ashr'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/ashr.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(3, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(27, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Bitcast(SimObject):
+	# SimObject type
+	type = 'Bitcast'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/bitcast.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(49, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Br(SimObject):
+	# SimObject type
+	type = 'Br'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/br.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(2, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Call(SimObject):
+	# SimObject type
+	type = 'Call'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/call.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(56, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Fadd(SimObject):
+	# SimObject type
+	type = 'Fadd'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fadd.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(5, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(14, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(5, "Default instruction runtime cycles.")
+
+class Fcmp(SimObject):
+	# SimObject type
+	type = 'Fcmp'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fcmp.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(54, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Fdiv(SimObject):
+	# SimObject type
+	type = 'Fdiv'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fdiv.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(10, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(21, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(16, "Default instruction runtime cycles.")
+
+class Fence(SimObject):
+	# SimObject type
+	type = 'Fence'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fence.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(35, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Fmul(SimObject):
+	# SimObject type
+	type = 'Fmul'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fmul.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(7, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(18, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(4, "Default instruction runtime cycles.")
+
+class Fpext(SimObject):
+	# SimObject type
+	type = 'Fpext'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fpext.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(46, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Fptosi(SimObject):
+	# SimObject type
+	type = 'Fptosi'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fptosi.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(42, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Fptoui(SimObject):
+	# SimObject type
+	type = 'Fptoui'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fptoui.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(41, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Fptrunc(SimObject):
+	# SimObject type
+	type = 'Fptrunc'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fptrunc.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(45, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Frem(SimObject):
+	# SimObject type
+	type = 'Frem'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/frem.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(24, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(16, "Default instruction runtime cycles.")
+
+class Fsub(SimObject):
+	# SimObject type
+	type = 'Fsub'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/fsub.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(6, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(16, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(5, "Default instruction runtime cycles.")
+
+class Gep(SimObject):
+	# SimObject type
+	type = 'Gep'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/gep.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(34, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Icmp(SimObject):
+	# SimObject type
+	type = 'Icmp'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/icmp.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(53, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Indirectbr(SimObject):
+	# SimObject type
+	type = 'Indirectbr'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/indirectbr.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(4, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Inttoptr(SimObject):
+	# SimObject type
+	type = 'Inttoptr'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/inttoptr.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(48, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Invoke(SimObject):
+	# SimObject type
+	type = 'Invoke'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/invoke.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(5, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Landingpad(SimObject):
+	# SimObject type
+	type = 'Landingpad'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/landingpad.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(66, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Load(SimObject):
+	# SimObject type
+	type = 'Load'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/load.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(32, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Lshr(SimObject):
+	# SimObject type
+	type = 'Lshr'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/lshr.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(3, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(26, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Mul(SimObject):
+	# SimObject type
+	type = 'Mul'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/mul.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(2, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(17, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class OrInst(SimObject):
+	# SimObject type
+	type = 'OrInst'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/or_inst.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(4, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(29, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Phi(SimObject):
+	# SimObject type
+	type = 'Phi'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/phi.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(55, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Ptrtoint(SimObject):
+	# SimObject type
+	type = 'Ptrtoint'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/ptrtoint.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(47, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Resume(SimObject):
+	# SimObject type
+	type = 'Resume'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/resume.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(6, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Ret(SimObject):
+	# SimObject type
+	type = 'Ret'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/ret.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(1, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Sdiv(SimObject):
+	# SimObject type
+	type = 'Sdiv'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/sdiv.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(2, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(20, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Select(SimObject):
+	# SimObject type
+	type = 'Select'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/select.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(57, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Sext(SimObject):
+	# SimObject type
+	type = 'Sext'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/sext.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(40, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Shl(SimObject):
+	# SimObject type
+	type = 'Shl'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/shl.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(3, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(25, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Srem(SimObject):
+	# SimObject type
+	type = 'Srem'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/srem.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(23, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Store(SimObject):
+	# SimObject type
+	type = 'Store'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/store.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(33, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Sub(SimObject):
+	# SimObject type
+	type = 'Sub'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/sub.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(1, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(15, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class SwitchInst(SimObject):
+	# SimObject type
+	type = 'SwitchInst'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/switch_inst.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(3, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Trunc(SimObject):
+	# SimObject type
+	type = 'Trunc'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/trunc.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(38, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Udiv(SimObject):
+	# SimObject type
+	type = 'Udiv'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/udiv.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(2, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(19, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Uitofp(SimObject):
+	# SimObject type
+	type = 'Uitofp'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/uitofp.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(43, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Unreachable(SimObject):
+	# SimObject type
+	type = 'Unreachable'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/unreachable.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(7, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class Urem(SimObject):
+	# SimObject type
+	type = 'Urem'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/urem.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(22, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Vaarg(SimObject):
+	# SimObject type
+	type = 'Vaarg'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/vaarg.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(60, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
+class XorInst(SimObject):
+	# SimObject type
+	type = 'XorInst'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/xor_inst.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(4, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(30, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(1, "Default instruction runtime cycles.")
+
+class Zext(SimObject):
+	# SimObject type
+	type = 'Zext'	# gem5-SALAM attached header
+	cxx_header = "hwacc/HWModeling/generated/instructions/zext.hh"
+	# Instruction params
+	functional_unit = Param.UInt32(0, "Default functional unit assignment.")
+	functional_unit_limit = Param.UInt32(0, "Default functional unit limit.")
+	opcode_num = Param.UInt32(39, "Default instruction llvm enum opcode value.")
+	runtime_cycles = Param.UInt32(0, "Default instruction runtime cycles.")
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/InstOpCodes.py gem5-SALAM/src/hwacc/InstOpCodes.py
--- gem5/src/hwacc/InstOpCodes.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/InstOpCodes.py	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,64 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class InstOpCodes(SimObject):
+    # SimObject type
+    type = "InstOpCodes"
+    # gem5-SALAM attached header
+    cxx_header = "hwacc/HWModeling/src/opcodes.hh"
+    # Default Values Below are LLVM Instruction Enumerations from llvm/IR/Instructions.def 
+    ### --- Do Not Modify Below This Line --- ###
+    ### Templates
+    ### YML Type: instruction
+    ## SALAM_OpCodeName = Param.UInt32(SALAM_OpCodeNum, SALAM_OpCode " Instruction OpCode.")
+    ### -- Code Auto-Generated Below This Line -- ###
+    gep = Param.UInt32(34, "GetElementPtr operation.")
+    phi = Param.UInt32(55, "Phi operation.")
+    select = Param.UInt32(57, "Select operation.")
+    ret = Param.UInt32(1, "Return operation.")
+    br = Param.UInt32(2, "Branch operation.")
+    switch_inst = Param.UInt32(3, "Switch operation.")
+    indirectbr = Param.UInt32(4, "Indirect Branch operation.")
+    invoke = Param.UInt32(5, "Invoke operation.")
+    resume = Param.UInt32(6, "Resume operation.")
+    unreachable = Param.UInt32(7, "Unreachable operation.")
+    icmp = Param.UInt32(53, "Integer compare operation.")
+    fcmp = Param.UInt32(54, "Floating point compare operation.")
+    trunc = Param.UInt32(38, "Truncate operation.")
+    zext = Param.UInt32(39, "Zero extend operation.")
+    sext = Param.UInt32(40, "Sign extend operation.")
+    fptrunc = Param.UInt32(45, "Floating point truncate operation.")
+    fpext = Param.UInt32(46, "Floating point extend operation.")
+    fptoui = Param.UInt32(41, "Floating point to unsigned integer operation.")
+    fptosi = Param.UInt32(42, "Floating point to signed integer operation.")
+    uitofp = Param.UInt32(43, "Unsigned integer to floating point operation.")
+    ptrtoint = Param.UInt32(47, "Pointer to integer operation.")
+    inttoptr = Param.UInt32(48, "Integer to pointer operation.")
+    bitcast = Param.UInt32(49, "Bitcast operation.")
+    addrspacecast = Param.UInt32(50, "Address space cast operation.")
+    call = Param.UInt32(56, "Call operation.")
+    vaarg = Param.UInt32(60, "Vaarg operation.")
+    landingpad = Param.UInt32(66, "Landing pad operation.")
+    alloca = Param.UInt32(31, "Allocate operation.")
+    load = Param.UInt32(32, "Must be 0, handled by memory controller")
+    store = Param.UInt32(33, "Must be 0, handled by memory controller")
+    fence = Param.UInt32(35, "Fence operation.")
+    shl = Param.UInt32(25, "Shift left operation.")
+    lshr = Param.UInt32(26, "Logical shift right operation.")
+    ashr = Param.UInt32(27, "Arithmetic shift right operation.")
+    and_inst = Param.UInt32(28, "And operation.")
+    or_inst = Param.UInt32(29, "Or operation.")
+    xor_inst = Param.UInt32(30, "Xor operation.")
+    add = Param.UInt32(13, "Integer add operation.")
+    sub = Param.UInt32(15, "Integer subtract operation.")
+    mul = Param.UInt32(17, "Integer multiply operation.")
+    udiv = Param.UInt32(19, "Unsigned integer division operation.")
+    sdiv = Param.UInt32(20, "Signed integer division operation.")
+    urem = Param.UInt32(22, "Unsigned remainder operation.")
+    srem = Param.UInt32(23, "Signed remainder operation.")
+    fadd = Param.UInt32(14, "Floating point addition operation.")
+    fsub = Param.UInt32(16, "Floating point subtraction operation.")
+    fmul = Param.UInt32(18, "Floating point multiplication operation.")
+    fdiv = Param.UInt32(21, "Floating point division operation.")
+    frem = Param.UInt32(24, "Floating point remainder operation.")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/io_acc.cc gem5-SALAM/src/hwacc/io_acc.cc
--- gem5/src/hwacc/io_acc.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/io_acc.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,386 @@
+//------------------------------------------//
+#include "hwacc/io_acc.hh"
+//------------------------------------------//
+
+using namespace std;
+
+IOAcc::IOAcc(Params *p) :
+    BasicPioDevice(p, p->pio_size),
+    io_addr(p->pio_addr),
+    io_size(p->pio_size),
+    devname(p->devicename),
+    gic(p->gic),
+    int_num(p->int_num),
+    memPort(p->name + ".mem_side", this),
+    masterId(p->system->getMasterId(this,name())),
+    tickEvent(this),
+    cacheLineSize(p->cache_line_size),
+    cacheSize(p->cache_size),
+    clock_period(p->clock_period) {
+    processDelay = 1000 * clock_period;
+    needToRead = false;
+    needToWrite = false;
+    running = false;
+    processingDone = false;
+    computationNeeded = false;
+
+    dataPort = &memPort;
+    mmreg = new uint8_t[io_size];
+}
+
+bool
+IOAcc::MemSidePort::recvTimingResp(PacketPtr pkt) {
+    owner->recvPacket(pkt);
+    return true;
+}
+
+void
+IOAcc::MemSidePort::recvReqRetry() {
+    assert(outstandingPkts.size());
+
+    DPRINTF(IOAcc, "Got a retry...\n");
+    while (outstandingPkts.size() && sendTimingReq(outstandingPkts.front())) {
+        DPRINTF(IOAcc, "Unblocked, sent blocked packet.\n");
+        outstandingPkts.pop();
+        // TODO: This should just signal the engine that the packet completed
+        // engine should schedule tick as necessary. Need a test case
+        if (!owner->tickEvent.scheduled()) {
+            owner->schedule(owner->tickEvent, curTick() + owner->processDelay);
+        }
+    }
+}
+
+void
+IOAcc::MemSidePort::sendPacket(PacketPtr pkt) {
+    if (isStalled() || !sendTimingReq(pkt)) {
+        DPRINTF(IOAcc, "sendTiming failed in sendPacket(pkt->req->getPaddr()=0x%x)\n", (unsigned int)pkt->req->getPaddr());
+        setStalled(pkt);
+    }
+}
+
+void
+IOAcc::recvPacket(PacketPtr pkt) {
+    if (pkt->isRead()) {
+        DPRINTF(IOAcc, "Done with a read. addr: 0x%x, size: %d\n", pkt->req->getPaddr(), pkt->getSize());
+        pkt->writeData(curData + (pkt->req->getPaddr() - beginAddr));
+
+        for (int i = pkt->req->getPaddr() - beginAddr;
+             i < pkt->req->getPaddr() - beginAddr + pkt->getSize(); i++)
+        {
+            readsDone[i] = true;
+        }
+
+        // mark readDone as only the contiguous region
+        while (readDone < totalLength && readsDone[readDone])
+        {
+            readDone++;
+        }
+
+        if (readDone >= totalLength)
+        {
+            DPRINTF(IOAcc, "done reading!!\n");
+            needToRead = false;
+            running = false;
+            processData();
+        }
+    } else {
+        DPRINTF(IOAcc, "Done with a write. addr: 0x%x, size: %d\n", pkt->req->getPaddr(), pkt->getSize());
+        writeDone += pkt->getSize();
+        if (!(writeDone < totalLength)) {
+            DPRINTF(IOAcc, "Done writing, completely done\n");
+            gic->sendInt(int_num);
+            *(uint32_t *)mmreg |= 0x80000000;
+            DPRINTF(IOAcc, "MMReg value: 0x%016x\n", *(uint64_t *)mmreg);
+            needToWrite = false;
+            delete[] curData;
+            delete[] readsDone;
+            running = false;
+        } else {
+            if (!tickEvent.scheduled())
+            {
+                schedule(tickEvent, curTick() + processDelay);
+            }
+        }
+    }
+    //if (pkt->req) delete pkt->req;
+    delete pkt;
+}
+
+void
+IOAcc::tick() {
+    if (!running) {
+        DPRINTF(IOAcc, "Checking MMR to see if Run bit set\n");
+        if (*mmreg & 0x01) {
+            *mmreg &= 0xfe;
+            computationNeeded = true;
+            prepRead(mmrval, 0x04);
+        }
+
+        if (processingDone && !tickEvent.scheduled()) {
+            processingDone = false;
+            schedule(tickEvent, curTick() + processDelay);
+        }
+
+        return;
+    }
+    if (dataPort->isStalled()) {
+        DPRINTF(IOAcc, "Stalled\n");
+    } else {
+        if (needToRead && !dataPort->isStalled()) {
+            DPRINTF(IOAcc, "trying read\n");
+            tryRead();
+        }
+
+        if (needToWrite && !dataPort->isStalled() &&
+            ((totalLength - writeLeft) < readDone)) {
+            DPRINTF(IOAcc, "trying write\n");
+            tryWrite();
+        }
+    }
+}
+
+void
+IOAcc::tryRead() {
+    //RequestPtr req = new Request();
+    Request::Flags flags;
+
+    if (readLeft <= 0) {
+        DPRINTF(IOAcc, "Something went wrong. Shouldn't try to read if there aren't reads left\n");
+        return;
+    }
+
+    int size;
+    if (currentReadAddr % cacheLineSize) {
+        size = cacheLineSize - (currentReadAddr % cacheLineSize);
+        DPRINTF(IOAcc, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = readLeft > (size - 1) ? size : readLeft;
+    //RequestPtr req = new Request(currentReadAddr, size, flags, masterId);
+    RequestPtr req = make_shared<Request>(currentReadAddr, size, flags, masterId);
+
+    DPRINTF(IOAcc, "Trying to read addr: 0x%x, %d bytes\n",
+        req->getPaddr(), size);
+
+    PacketPtr pkt = new Packet(req, MemCmd::ReadReq);
+    pkt->allocate();
+    dataPort->sendPacket(pkt);
+
+    currentReadAddr += size;
+
+    readLeft -= size;
+
+    if (!(readLeft > 0)) {
+        needToRead = false;
+        if (!tickEvent.scheduled()) {
+            schedule(tickEvent, curTick() + processDelay);
+        }
+    } else {
+        if (!dataPort->isStalled() && !tickEvent.scheduled())
+        {
+            schedule(tickEvent, curTick() + processDelay);
+        }
+    }
+}
+
+void
+IOAcc::tryWrite() {
+    if (writeLeft <= 0) {
+        DPRINTF(IOAcc, "Something went wrong. Shouldn't try to write if there aren't writes left\n");
+        return;
+    }
+
+    int size;
+    if (currentWriteAddr % cacheLineSize) {
+        size = cacheLineSize - (currentWriteAddr % cacheLineSize);
+        DPRINTF(IOAcc, "Aligning\n");
+    } else {
+        size = cacheLineSize;
+    }
+    size = writeLeft > size - 1 ? size : writeLeft;
+
+    Request::Flags flags;
+    uint8_t *data = new uint8_t[size];
+    std::memcpy(data, &curData[totalLength-writeLeft], size);
+    //RequestPtr req = new Request(currentWriteAddr, size, flags, masterId);
+    RequestPtr req = make_shared<Request>(currentWriteAddr, size, flags, masterId);
+    req->setExtraData((uint64_t)data);
+
+
+    DPRINTF(IOAcc, "totalLength: %d, writeLeft: %d\n", totalLength, writeLeft);
+    DPRINTF(IOAcc, "Trying to write to addr: 0x%x, %d bytes, data 0x%08x\n",
+        currentWriteAddr, size, *((int*)(&curData[totalLength-writeLeft])));
+
+    PacketPtr pkt = new Packet(req, MemCmd::WriteReq);
+    uint8_t *pkt_data = (uint8_t *)req->getExtraData();
+    pkt->dataDynamic(pkt_data);
+    dataPort->sendPacket(pkt);
+
+    currentWriteAddr += size;
+    writeLeft -= size;
+
+    if (!(writeLeft > 0) && !tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + processDelay);
+    }
+}
+
+int
+IOAcc::prepRead(Addr src, size_t length) {
+    assert(length > 0);
+    assert(!running);
+    running = true;
+    gic->clearInt(int_num);
+
+    DPRINTF(IOAcc, "Initiating read of %d bytes from 0x%x\n", length, src);
+
+    needToRead = true;
+    needToWrite = false;
+
+    currentReadAddr = src;
+
+    beginAddr = src;
+
+    readLeft = length;
+    writeLeft = 0;
+
+    totalLength = length;
+
+    readDone = 0;
+
+    curData = new uint8_t[length];
+    readsDone = new bool[length];
+    for (int i = 0; i < length; i++) {
+        curData[i] = 0;
+        readsDone[i] = false;
+    }
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + processDelay);
+    }
+
+    return 0;
+}
+
+int
+IOAcc::prepWrite(Addr dst, uint8_t* value, size_t length) {
+    assert(!running);
+    assert(length > 0);
+    running = true;
+    gic->clearInt(int_num);
+    *(uint32_t *)mmreg &= 0xefffffff;
+
+    DPRINTF(IOAcc, "Initiating write of %d bytes at 0x%x to 0x%x\n",
+        length, dst, value);
+
+    needToRead = false;
+    needToWrite = true;
+
+    currentWriteAddr = dst;
+
+    readLeft = 0;
+    writeLeft = length;
+
+    totalLength = length;
+    writeLeft = totalLength;
+
+    readDone = length;
+    writeDone = 0;
+
+    curData = new uint8_t[length];
+    readsDone = new bool[length];
+    for (int i = 0; i < length; i++) {
+        curData[i] = *(value + i);
+        readsDone[i] = true;
+    }
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + processDelay);
+    }
+
+    return 0;
+}
+
+Tick
+IOAcc::read(PacketPtr pkt) {
+    DPRINTF(IOAcc, "The address range associated with this ACC was read!\n");
+
+    Addr daddr = pkt->req->getPaddr() - io_addr;
+
+    uint32_t data;
+
+    switch(daddr) {
+        case DEV_CONFIG:
+            data = *(uint32_t *)mmreg;
+            break;
+        default:
+            data = *(uint32_t *)(mmreg + 4);
+            break;
+    }
+
+    switch(pkt->getSize()) {
+      case 1:
+        pkt->set<uint8_t>(data);
+        break;
+      case 2:
+        pkt->set<uint16_t>(data);
+        break;
+      case 4:
+        pkt->set<uint32_t>(data);
+        break;
+      default:
+        panic("Read size too big?\n");
+        break;
+    }
+
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+IOAcc::write(PacketPtr pkt) {
+    DPRINTF(IOAcc,
+        "The address range associated with this ACC was written to!\n");
+
+    pkt->writeData(mmreg + (pkt->req->getPaddr() - io_addr));
+
+    mmrval = *(uint32_t *)(mmreg + 4);
+
+    DPRINTF(IOAcc, "MMReg value: 0x%016x\n", *(uint64_t *)mmreg);
+
+    pkt->makeAtomicResponse();
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, nextCycle());
+    }
+
+    return pioDelay;
+}
+
+void
+IOAcc::processData() {
+    DPRINTF(IOAcc, "BEGIN: Processing Data\n");
+    uint8_t data[4];
+    for (int i = 0; i<4; i++) data[i] = *(curData + i);
+    DPRINTF(IOAcc, "Data: 0x%08x\n", data);
+
+    *data = (*(int *)data / 2);
+    DPRINTF(IOAcc, "Data: 0x%08x\n", data);
+    processingDone = true;
+
+    prepWrite(mmrval, data, 4);
+}
+
+IOAcc *
+IOAccParams::create() {
+    return new IOAcc(this);
+}
+
+Port&
+IOAcc::getPort(const std::string& if_name, PortID idx) {
+    if (if_name == "mem_side") {
+        return memPort;
+    } else {
+        return ClockedObject::getPort(if_name, idx);
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/io_acc.hh gem5-SALAM/src/hwacc/io_acc.hh
--- gem5/src/hwacc/io_acc.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/io_acc.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,145 @@
+#ifndef __HWACC_IO_ACC_HH__
+#define __HWACC_IO_ACC_HH__
+//------------------------------------------//
+#include "base/trace.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+#include "sim/system.hh"
+#include "params/IOAcc.hh"
+#include "dev/io_device.hh"
+#include "dev/arm/base_gic.hh"
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+//------------------------------------------//
+#include <stdio.h>
+#include <stdlib.h>
+#include <queue>
+//------------------------------------------//
+
+class IOAcc : public BasicPioDevice
+{
+  private:
+    Addr io_addr;
+    Addr io_size;
+    std::string devname;
+    BaseGic *gic;
+    uint32_t int_num;
+
+    class MemSidePort : public RequestPort
+    {
+      friend class IOAcc;
+
+      private:
+        IOAcc *owner;
+        std::queue<PacketPtr> outstandingPkts;
+
+      public:
+        MemSidePort(const std::string& name, IOAcc *owner) :
+          RequestPort(name, owner), owner(owner)
+        { }
+
+      protected:
+        virtual bool recvTimingResp(PacketPtr pkt);
+        virtual void recvReqRetry();
+        virtual void recvRangeChange() { };
+        virtual Tick recvAtomic(PacketPtr pkt) {return 0;}
+        virtual void recvFunctional(PacketPtr pkt) { };
+        void setStalled(PacketPtr pkt)
+        {
+          outstandingPkts.push(pkt);
+        }
+        bool isStalled() { return !outstandingPkts.empty(); }
+        void sendPacket(PacketPtr pkt);
+    };
+
+    class TickEvent : public Event
+    {
+      private:
+        IOAcc *acc;
+
+      public:
+        TickEvent(IOAcc *_acc) : Event(CPU_Tick_Pri), acc(_acc) {}
+        void process() { acc->tick(); }
+        virtual const char *description() const { return "IOAcc tick"; }
+    };
+
+    MemSidePort memPort;
+    MemSidePort* dataPort;
+    IOAcc *acc;
+    MasterID masterId;
+    TickEvent tickEvent;
+    unsigned int cacheLineSize;
+    unsigned int cacheSize;
+
+    void tick();
+
+    bool needToRead;
+    bool needToWrite;
+    Addr currentReadAddr;
+    Addr currentWriteAddr;
+    Addr beginAddr;
+    Tick writeLeft;
+    Tick writeDone;
+    Tick readLeft;
+    Tick readDone;
+    Tick totalLength;
+
+    uint8_t *curData;
+    bool *readsDone;
+    bool running;
+    bool computationNeeded;
+
+    void tryRead();
+    void tryWrite();
+
+    Addr dataAddr;
+
+    uint8_t *mmreg;
+    uint32_t mmrval;
+
+    bool processingDone;
+    int processDelay;
+    int clock_period;
+
+  public:
+    typedef IOAccParams Params;
+    const Params *
+    params() const
+    {
+      return dynamic_cast<const Params *>(_params);
+    }
+
+    IOAcc(Params *p);
+
+    virtual Tick read(PacketPtr pkt);
+
+    virtual Tick write(PacketPtr pkt);
+
+    Port& getPort(const std::string& if_name,
+                                  PortID idk = InvalidPortID) override;
+
+    void recvPacket(PacketPtr pkt);
+
+    int prepRead(Addr src, size_t length);
+    int prepWrite(Addr dst, uint8_t* value, size_t length);
+    int getCacheSize() { return cacheSize; }
+    void processData();
+
+    uint8_t* getCurData() { return curData; }
+
+    bool isRunning() { return running; }
+    bool isCompNeeded() { return computationNeeded; }
+
+    uint64_t getMMRData(unsigned index) { return *(uint64_t *)(mmreg + DEV_MEM_LOC + index * 8); }
+    int getProcessDelay() { return processDelay; }
+
+  protected:
+    static const int DEV_CONFIG = 0x00;
+    static const int DEV_MEM_LOC = 0x04;
+};
+
+#endif //__HWACC_IO_ACC_HH__
+
+/*
+* MM Register Layout
+* | Location of Data 32bits | Compute Finished 1bit | Unused 30bits | Start Operation 1bit |
+*/
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/IOAcc.py gem5-SALAM/src/hwacc/IOAcc.py
--- gem5/src/hwacc/IOAcc.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/IOAcc.py	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,19 @@
+from m5.params import *
+from m5.proxy import *
+from Device import BasicPioDevice
+
+class IOAcc(BasicPioDevice):
+    type = 'IOAcc'
+    cxx_header = 'hwacc/io_acc.hh'
+    
+    pio_size = Param.Addr(0x8, "Size of address range")
+    devicename = Param.String("ioacc", "Name of ioacc device")
+    mem_side = RequestPort("Memory side port, sends requests")
+    system = Param.System(Parent.any, "Parent system of the device")
+    cache_line_size = Param.Unsigned(Parent.cache_line_size, "Cache line size in bytes")
+    cache_size = Param.Unsigned(1024, "Cache size in bytes")
+    private_read_ports = Param.Int(4, "The number of internal Read ports for the private SPM")
+    private_write_ports = Param.Int(4, "The number of internal Write ports for the private SPM")
+    gic = Param.BaseGic(Parent.any, "Gic on which to trigger interrupts")
+    int_num = Param.UInt32(320, "Interrupt number that connects to GIC")
+    clock_period = Param.Int(10, "Clock period in ns")
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/llvm_interface.cc gem5-SALAM/src/hwacc/llvm_interface.cc
--- gem5/src/hwacc/llvm_interface.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/llvm_interface.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,1071 @@
+// LLVMInterface Includes
+#include "hwacc/llvm_interface.hh"
+
+LLVMInterface::LLVMInterface(const LLVMInterfaceParams &p):
+    ComputeUnit(p),
+    filename(p.in_file),
+    topName(p.top_name),
+    scheduling_threshold(p.sched_threshold),
+    clock_period(p.clock_period),
+    lockstep(p.lockstep_mode) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    clock_period = clock_period * 1000;
+    dbg = comm->debug();
+}
+
+std::shared_ptr<SALAM::Value> createClone(const std::shared_ptr<SALAM::Value>& b)
+{
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    std::shared_ptr<SALAM::Value> clone = b->clone();
+    return clone;
+}
+
+void
+LLVMInterface::ActiveFunction::scheduleBB(std::shared_ptr<SALAM::BasicBlock> bb)
+{
+    auto schedulingStart = std::chrono::high_resolution_clock::now();
+    if (dbg) DPRINTFS(Runtime, owner, "|---[Schedule BB - UID:%i ]\n", bb->getUID());
+    bool needToScheduleBranch = false;
+    std::shared_ptr<SALAM::BasicBlock> nextBB;
+    auto instruction_list = *(bb->Instructions());
+    for (auto inst : instruction_list) {
+        std::shared_ptr<SALAM::Instruction> clone_inst = inst->clone();
+        if (dbg) DPRINTFS(Runtime, owner,  "\t\t Instruction Cloned [UID: %d] \n", inst->getUID());
+        if (clone_inst->isBr()) {
+            if (dbg) DPRINTFS(Runtime, owner,  "\t\t Branch Instruction Found\n");
+            auto branch = std::dynamic_pointer_cast<SALAM::Br>(clone_inst);
+            if (branch && !(branch->isConditional())) {
+                if (dbg) DPRINTFS(Runtime, owner,  "\t\t Unconditional Branch, Scheduling Next BB\n");
+                nextBB = branch->getTarget();
+                if (dbg) DPRINTFS(RuntimeCompute, owner, "\t\t Branching to %s from %s\n", nextBB->getIRStub(), bb->getIRStub());
+                needToScheduleBranch = true;
+            } else {
+                findDynamicDeps(clone_inst);
+                reservation.push_back(clone_inst);
+            }
+        } else {
+            if (clone_inst->isPhi()) {
+                if (dbg) DPRINTFS(Runtime, owner,  "\t\t Phi Instruction Found\n");
+                auto phi = std::dynamic_pointer_cast<SALAM::Phi>(clone_inst);
+                if (phi) phi->setPrevBB(previousBB);
+            }
+            findDynamicDeps(clone_inst);
+            reservation.push_back(clone_inst);
+        }
+    }
+    previousBB = bb;
+    auto schedulingStop = std::chrono::high_resolution_clock::now();
+    owner->addSchedulingTime(schedulingStop - schedulingStart);
+    if (needToScheduleBranch) scheduleBB(nextBB);
+}
+
+void
+LLVMInterface::ActiveFunction::processQueues()
+{
+    auto queueStart = std::chrono::high_resolution_clock::now();
+
+    if (owner->hw->hw_statistics->use_cycle_tracking()) {
+        auto hwStart = std::chrono::high_resolution_clock::now();
+        hw_cycle_stats.reset();
+        owner->hw->hw_statistics->updateHWStatsCycleStart();
+
+        // Update Params
+        hw_cycle_stats.cycle = owner->cycle;
+        hw_cycle_stats.resInFlight = reservation.size();
+        hw_cycle_stats.loadInFlight = readQueue.size();
+        hw_cycle_stats.storeInFlight = writeQueue.size();
+        hw_cycle_stats.compInFlight = computeQueue.size();
+
+
+        //
+        auto hwStop = std::chrono::high_resolution_clock::now();
+        owner->addHWTime(hwStop-hwStart);
+    }
+
+    if (dbg) {
+        DPRINTFS(Runtime, owner, "\t\t  |-[Process Queues]--------\n");
+        DPRINTFS(RuntimeQueues, owner, "\t\t[Runtime Queue Status] Reservation:%d, Compute:%d, Read:%d, Write:%d\n",
+             reservation.size(), computeQueue.size(), readQueue.size(), writeQueue.size());
+    }
+    // First pass, computeQueue is empty
+    for (auto queue_iter = computeQueue.begin(); queue_iter != computeQueue.end();) {
+        if (dbg) DPRINTFS(Runtime, owner,  "\n\t\t %s \n\t\t %s%s%s%d%s \n",
+        " |-[Compute Queue]--------------",
+        " | Instruction: ", llvm::Instruction::getOpcodeName((queue_iter->second)->getOpode()),
+        " | UID[", (queue_iter->first), "]"
+        );
+
+        if((queue_iter->second)->commit()) {
+            (queue_iter->second)->reset();
+            queue_iter = computeQueue.erase(queue_iter);
+            hw_cycle_stats.compCommited++;
+        } else {
+            ++queue_iter;
+            hw_cycle_stats.compFUStall++;
+        }
+    }
+    if (canReturn()) {
+        // Handle function return
+        if (dbg) DPRINTFS(Runtime, owner,  "[[Function Return]]\n\n");
+        if (caller != nullptr) {
+            // Signal the calling instruction
+            if (caller->getSize() > 0) {
+                auto retInst = reservation.front();
+                auto retOperand = retInst->getOperands()->front();
+                caller->setRegisterValue(retOperand.getOpRegister());
+            }
+            func->removeInstance();
+            caller->commit();
+        }
+        returned = true;
+        return;
+    } else if (lockstepReady()) {
+        // TODO: Look into for_each here
+        for (auto queue_iter = reservation.begin(); queue_iter != reservation.end();) {
+            if (owner->debug())
+                if (dbg) DPRINTFS(Runtime, owner,  "Debug Breakpoint");
+            auto inst = *queue_iter;
+            if (dbg) DPRINTFS(Runtime, owner,  "\n\t\t %s \n\t\t %s%s%s%d%s \n",
+                " |-[Reserve Queue]--------------",
+                " | Instruction: ", llvm::Instruction::getOpcodeName((inst)->getOpode()),
+                " | UID[", (inst)->getUID(), "]"
+                );
+            if ((inst)->isReturn() == false) {
+                if ((inst)->isTerminator() && reservation.size() >= scheduling_threshold) {
+                    ++queue_iter;
+                } else if (((inst)->ready()) && !uidActive((inst)->getUID())) {
+                    if ((inst)->isLoad()) {
+                        // RAW protection to ensure a writeback finishes before reading that location
+                        if (inst->isLoadingInternal()) {
+                            launchRead(inst);
+                            if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                            queue_iter = reservation.erase(queue_iter);
+                            hw_cycle_stats.loadInternal++;
+                        } else if (!writeActive(inst->getPtrOperandValue(0))) {
+                            launchRead(inst);
+                            if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                            queue_iter = reservation.erase(queue_iter);
+                            hw_cycle_stats.loadAcitve++;
+                        } else {
+                            auto activeWrite = getActiveWrite(inst->getPtrOperandValue(0));
+                            inst->addRuntimeDependency(activeWrite);
+                            activeWrite->addRuntimeUser(inst);
+                            ++queue_iter;
+                            hw_cycle_stats.loadRawStall++;
+                        }
+                    } else if ((inst)->isStore()) {
+                        // WAR Protection to insure reading finishes before a write
+                        // if (!readActive(inst->getPtrOperandValue(1))) {
+                        launchWrite(inst);
+                        if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                        queue_iter = reservation.erase(queue_iter);
+                        hw_cycle_stats.storeActive++;
+                        // } else {
+                        //     auto activeRead = getActiveRead(inst->getPtrOperandValue(1));
+                        //     inst->addRuntimeDependency(activeRead);
+                        //     activeRead->addRuntimeUser(inst);
+                        //     ++queue_iter;
+                        // }
+                    } else if ((inst)->isLatchingBrExiting() && ((reservation.size() > 1) || !queuesClear())) {
+                        ++queue_iter;
+                    } else if ((inst)->isTerminator()) {
+                        (inst)->launch();
+                        auto nextBB = inst->getTarget();
+                        if (dbg) DPRINTFS(RuntimeCompute, owner, "\t\t Branching to %s from %s\n",
+                            nextBB->getIRStub(), previousBB->getIRStub());
+                        scheduleBB(nextBB);
+                        if (dbg) DPRINTFS(Runtime, owner,  "\t\t  | Branch Scheduled: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((inst)->getOpode()), (inst)->getUID());
+                        (inst)->commit();
+                        if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                        queue_iter = reservation.erase(queue_iter);
+                    } else if ((*queue_iter)->isCall()) {
+                        auto callInst = std::dynamic_pointer_cast<SALAM::Call>(inst);
+                        assert(callInst);
+                        auto calleeValue = callInst->getCalleeValue();
+                        auto callee = std::dynamic_pointer_cast<SALAM::Function>(calleeValue);
+                        assert(callee);
+                        if (callee->canLaunch()) {
+                            owner->launchFunction(callee, callInst);
+                            computeQueue.insert({(inst)->getUID(), inst});
+                            if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                            queue_iter = reservation.erase(queue_iter);
+                        } else {
+                            ++queue_iter;
+                        }
+                    } else {
+                        auto computeStart = std::chrono::high_resolution_clock::now();
+                        if (!(inst)->launch()) {
+                            if (dbg) DPRINTFS(Runtime, owner,  "\t\t  | Added to Compute Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((inst)->getOpode()), (inst)->getUID());
+                            computeQueue.insert({(inst)->getUID(), inst});
+                            hw_cycle_stats.compLaunched++;
+                        }
+                        auto computeStop = std::chrono::high_resolution_clock::now();
+                        owner->addComputeTime(computeStop-computeStart);
+                        if (dbg) DPRINTFS(Runtime, owner,  "\t\t  |-Erase From Queue: %s - UID[%i]\n", llvm::Instruction::getOpcodeName((*queue_iter)->getOpode()), (*queue_iter)->getUID());
+                        queue_iter = reservation.erase(queue_iter);
+                        hw_cycle_stats.compActive++;
+                    }
+                } else {
+                    ++queue_iter;
+                }
+            } else {
+                ++queue_iter;
+            }
+        }
+    }
+
+    if (owner->hw->hw_statistics->use_cycle_tracking()) {
+        auto hwStart = std::chrono::high_resolution_clock::now();
+        for (auto fu : hw->functional_units->functional_unit_list) {
+            std::cout << fu->get_alias() << " - " << fu->get_in_use() << "\n";
+        }
+
+
+
+        owner->hw->hw_statistics->updateHWStatsCycleEnd(owner->cycle);
+        auto hwStop = std::chrono::high_resolution_clock::now();
+        owner->addHWTime(hwStop-hwStart);
+    }
+    auto queueStop = std::chrono::high_resolution_clock::now();
+    owner->addQueueTime(queueStop-queueStart);
+}
+
+
+
+/*********************************************************************************************
+ CN Scheduling
+
+ As CNs are scheduled they are added to an in-flight queue depending on operation type.
+ Loads and Stores are maintained in separate queues, and are committed by the comm_interface.
+ Branch and phi instructions evaluate and commit immediately. All other CN types are added to
+ an in-flight compute queue.
+
+ Each tick we must first check our in-flight compute queue. Each node should have its cycle
+ count incremented, and should commit if max cycle is reached.
+
+ New CNs are added to the reservation table whenever a new BB is encountered. This may occur
+ during device init, or when a br op commits. For each CN in a BB we reset the CN, evaluate
+ if it is a phi or uncond br, and add it to our reservation table otherwise.
+*********************************************************************************************/
+void
+LLVMInterface::tick()
+{
+    auto tickStart = std::chrono::high_resolution_clock::now();
+
+    if (dbg) DPRINTF(LLVMInterface, "\n%s\n%s %d\n%s\n",
+        "********************************************************************************",
+        "   Cycle", cycle,
+        "********************************************************************************");
+    cycle++;
+
+    // Process Queues in Active Functions
+    for (auto func_iter = activeFunctions.begin(); func_iter != activeFunctions.end();) {
+        func_iter->processQueues();
+        if (!(func_iter->hasReturned())) {
+            func_iter++;
+        } else {
+            func_iter = activeFunctions.erase(func_iter);
+        }
+    }
+    if (activeFunctions.empty()) {
+        // We are finished executing all functions. Signal completion to the CommInterface
+        running = false;
+        finalize();
+        return;
+    }
+    //////////////// Schedule Next Cycle ////////////////////////
+    if (running && !tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + clock_period);// * process_delay);
+    }
+    auto tickStop = std::chrono::high_resolution_clock::now();
+    simTime = simTime + (tickStop - tickStart);
+}
+
+
+/*********************************************************************************************
+- findDynamicDeps(std::list<std::shared_ptr<SALAM::Instructions>, std::shared_ptr<SALAM::Instruction>)
+- only parse queue once for each instruction until all dependencies are found
+- include self in dependency list
+- Register dynamicUser/dynamicDependencies std::deque<std::shared_ptr<SALAM::Instructon> >
+*********************************************************************************************/
+void // Add third argument, previous BB
+LLVMInterface::ActiveFunction::findDynamicDeps(std::shared_ptr<SALAM::Instruction> inst)
+{
+    // if (DTRACE(Trace)) if (dbg) DPRINTFS(Runtime, owner,  "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTFS(Runtime, owner,  "Linking Dynamic Dependencies [%s]\n", llvm::Instruction::getOpcodeName(inst->getOpode()));
+    // The list of UIDs for any dependencies we want to find
+    //std::deque<uint64_t> dep_uids = inst->runtimeInitialize();
+    std::vector<uint64_t> dep_uids = inst->runtimeInitialize();
+
+    // assert(inst->getDependencyCount() == 0);
+
+    // // An instruction is a runtime dependency for itself since multiple
+    // // instances of the same instruction shouldn't execute simultaneously
+    // // dep_uids.push_back(inst->getUID());
+
+    // Find dependencies currently in queues
+
+    // Reverse search the reservation queue because we want to link only the last instance of each dep
+    auto queue_iter = reservation.rbegin();
+    while ((queue_iter != reservation.rend()) && !dep_uids.empty()) {
+        auto queued_inst = *queue_iter;
+        // Look at each instruction in runtime queue once
+        for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+            // Check if any of the instruction to be scheduled dependencies match the current instruction from queue
+            if (queued_inst->getUID() == *dep_it) {
+                // If dependency found, create two way link
+                inst->addRuntimeDependency(queued_inst);
+                queued_inst->addRuntimeUser(inst);
+                dep_it = dep_uids.erase(dep_it);
+            } else {
+                dep_it++;
+            }
+        }
+        queue_iter++;
+    }
+
+    // The other queues do not need to be reverse-searched since only 1 instance of any instruction can exist in them
+    // Check the compute queue
+    for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+        auto queue_iter = computeQueue.find(*dep_it);
+        if (queue_iter != computeQueue.end()) {
+            auto queued_inst = queue_iter->second;
+            inst->addRuntimeDependency(queued_inst);
+            queued_inst->addRuntimeUser(inst);
+            dep_it = dep_uids.erase(dep_it);
+        } else {
+            dep_it++;
+        }
+    }
+    // Check the memory read queue
+    for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+        auto queue_iter = readQueue.find(*dep_it);
+        if (queue_iter != readQueue.end()) {
+            auto queued_inst = queue_iter->second;
+            inst->addRuntimeDependency(queued_inst);
+            queued_inst->addRuntimeUser(inst);
+            dep_it = dep_uids.erase(dep_it);
+        } else {
+            dep_it++;
+        }
+    }
+
+    // if (!dep_uids.empty()) {
+    //     // Check the memory read queue
+    //     // for (auto queued_read : readQueue) {
+    //     for (auto rq_it = readQueue.begin(); rq_it != readQueue.end(); rq_it++) {
+    //         auto queued_read = *rq_it;
+    //         auto queued_inst = queued_read.second;
+    //         // Look at each instruction in runtime queue once
+    //         for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+    //             // Check if any of the instruction to be scheduled dependencies match the current instruction from queue
+    //             if (queued_inst->getUID() == *dep_it) {
+    //                 // If dependency found, create two way link
+    //                 inst->addRuntimeDependency(queued_inst);
+    //                 queued_inst->addRuntimeUser(inst);
+    //                 dep_it = dep_uids.erase(dep_it);
+    //             } else {
+    //                 dep_it++;
+    //             }
+    //         }
+    //         if (dep_uids.empty()) break;
+    //     }
+    // }
+    // Check the memory write queue
+    for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+        auto queue_iter = writeQueue.find(*dep_it);
+        if (queue_iter != writeQueue.end()) {
+            auto queued_inst = queue_iter->second;
+            inst->addRuntimeDependency(queued_inst);
+            queued_inst->addRuntimeUser(inst);
+            dep_it = dep_uids.erase(dep_it);
+        } else {
+            dep_it++;
+        }
+    }
+
+    // if (!dep_uids.empty()) {
+    //     // Check the memory write queue
+    //     // for (auto queued_write : writeQueue) {
+    //     for (auto wq_it = writeQueue.begin(); wq_it != writeQueue.end(); wq_it++) {
+    //         auto queued_write = *wq_it;
+    //         auto queued_inst = queued_write.second;
+    //         // Look at each instruction in runtime queue once
+    //         for (auto dep_it = dep_uids.begin(); dep_it != dep_uids.end();) {
+    //             // Check if any of the instruction to be scheduled dependencies match the current instruction from queue
+    //             if (queued_inst->getUID() == *dep_it) {
+    //                 // If dependency found, create two way link
+    //                 inst->addRuntimeDependency(queued_inst);
+    //                 queued_inst->addRuntimeUser(inst);
+    //                 dep_it = dep_uids.erase(dep_it);
+    //             } else {
+    //                 dep_it++;
+    //             }
+    //         }
+    //         if (dep_uids.empty()) break;
+    //     }
+    // }
+
+    // Fetch values for resolved dependencies, static elements, and immediate values
+    if (!dep_uids.empty()) {
+        for (auto resolved : dep_uids) {
+            // If this dependency exists, then lock value into operand
+            inst->setOperandValue(resolved);
+        }
+    }
+}
+
+void
+LLVMInterface::dumpModule(llvm::Module *M) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    M->print(llvm::outs(), nullptr);
+    for (const llvm::Function &F : *M) {
+        for (const llvm::BasicBlock &BB : F) {
+            for (const llvm::Instruction &I : BB) {
+                I.print(llvm::outs());
+            }
+        }
+    }
+}
+
+
+
+void
+LLVMInterface::constructStaticGraph() {
+/*********************************************************************************************
+ Constructing the Static CDFG
+
+ Parses LLVM file and creates the CDFG passed to our runtime simulation engine.
+*********************************************************************************************/
+    auto parseStart = std::chrono::high_resolution_clock::now();
+
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTF(LLVMInterface, "Constructing Static Dependency Graph\n");
+
+    llvm::StringRef file = filename;
+    std::unique_ptr<llvm::LLVMContext> context(new llvm::LLVMContext());
+    std::unique_ptr<llvm::SMDiagnostic> error(new llvm::SMDiagnostic());
+    std::unique_ptr<llvm::Module> m;
+    std::unique_ptr<llvm::DominatorTree> dt(new llvm::DominatorTree());
+    std::unique_ptr<llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>> loopInfo(new llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>());
+
+    m = llvm::parseIRFile(file, *error, *context);
+    if(!m) panic("Error reading Module");
+
+    // Construct the LLVM::Value to SALAM::Value map
+    uint64_t valueID = 0;
+    SALAM::irvmap vmap;
+    // Generate SALAM::Values for llvm::GlobalVariables
+    DPRINTF(LLVMParse, "Instantiate SALAM::GlobalConstants\n");
+    for (auto glob_iter = m->global_begin(); glob_iter != m->global_end(); glob_iter++) {
+        llvm::GlobalVariable &glb = *glob_iter;
+        std::shared_ptr<SALAM::GlobalConstant> sglb = std::make_shared<SALAM::GlobalConstant>(valueID, this, debug());
+        values.push_back(sglb);
+        vmap.insert(SALAM::irvmaptype(&glb, sglb));
+        valueID++;
+    }
+    // Generate SALAM::Functions
+    DPRINTF(LLVMParse, "Instantiate SALAM::Functions\n");
+    for (auto func_iter = m->begin(); func_iter != m->end(); func_iter++) {
+        llvm::Function &func = *func_iter;
+        std::shared_ptr<SALAM::Function> sfunc = std::make_shared<SALAM::Function>(valueID, this, debug());
+        values.push_back(sfunc);
+        functions.push_back(sfunc);
+        vmap.insert(SALAM::irvmaptype(&func, sfunc));
+        valueID++;
+        // Generate args for SALAM:Functions
+        DPRINTF(LLVMParse, "Instantiate SALAM::Functions::Arguments\n");
+        for (auto arg_iter = func.arg_begin(); arg_iter != func.arg_end(); arg_iter++) {
+            llvm::Argument &arg = *arg_iter;
+            std::shared_ptr<SALAM::Argument> sarg = std::make_shared<SALAM::Argument>(valueID, this, debug());
+            values.push_back(sarg);
+            vmap.insert(SALAM::irvmaptype(&arg, sarg));
+            valueID++;
+        }
+        // Generate SALAM::BasicBlocks
+        DPRINTF(LLVMParse, "Instantiate SALAM::Functions::BasicBlocks\n");
+        for (auto bb_iter = func.begin(); bb_iter != func.end(); bb_iter++) {
+            llvm::BasicBlock &bb = *bb_iter;
+            std::shared_ptr<SALAM::BasicBlock> sbb = std::make_shared<SALAM::BasicBlock>(valueID, this, debug());
+            values.push_back(sbb);
+            vmap.insert(SALAM::irvmaptype(&bb, sbb));
+            valueID++;
+            //Generate SALAM::Instructions
+            DPRINTF(LLVMParse, "Instantiate SALAM::Functions::BasicBlocks::Instructions\n");
+            for (auto inst_iter = bb.begin(); inst_iter != bb.end(); inst_iter++) {
+                llvm::Instruction &inst = *inst_iter;
+                std::shared_ptr<SALAM::Instruction> sinst = createInstruction(&inst, valueID);
+                values.push_back(sinst);
+                vmap.insert(SALAM::irvmaptype(&inst, sinst));
+                valueID++;
+            }
+        }
+    }
+
+    // Use value map to initialize SALAM::Values
+    DPRINTF(LLVMParse, "Initialize SALAM::GlobalConstants\n");
+    for (auto glob_iter = m->global_begin(); glob_iter != m->global_end(); glob_iter++) {
+        llvm::GlobalVariable &glb = *glob_iter;
+        std::shared_ptr<SALAM::Value> glbval = vmap.find(&glb)->second;
+        assert(glbval);
+        std::shared_ptr<SALAM::GlobalConstant> sglb = std::dynamic_pointer_cast<SALAM::GlobalConstant>(glbval);
+        assert(sglb);
+        sglb->initialize(&glb, &vmap, &values);
+    }
+    // Functions will initialize BasicBlocks, which will initialize Instructions
+    DPRINTF(LLVMParse, "Initialize SALAM::Functions\n");
+    for (auto func_iter = m->begin(); func_iter != m->end(); func_iter++) {
+        llvm::Function &func = *func_iter;
+        std::shared_ptr<SALAM::Value> funcval = vmap.find(&func)->second;
+        assert(funcval);
+        std::shared_ptr<SALAM::Function> sfunc = std::dynamic_pointer_cast<SALAM::Function>(funcval);
+        assert(sfunc);
+        sfunc->initialize(&func, &vmap, &values, topName);
+    }
+    if (functions.size() == 1) functions.front()->setTop(true);
+
+    // Detect Loop Latches
+    for (auto func_iter = m->begin(); func_iter != m->end(); func_iter++) {
+        llvm::Function &func = *func_iter;
+        dt->recalculate(func);
+        loopInfo->releaseMemory();
+        loopInfo->analyze(*dt);
+        for (auto loop=loopInfo->begin(); loop!=loopInfo->end(); ++loop) {
+            if (llvm::BasicBlock *exBB = (*loop)->getExitingBlock()) {
+                auto latchingBr = exBB->getTerminator();
+                auto mapIt = vmap.find(latchingBr);
+                if (mapIt != vmap.end()) {
+                    auto salamValue = mapIt->second;
+                    if (std::shared_ptr<SALAM::Br> sBr =
+                        std::dynamic_pointer_cast<SALAM::Br>(salamValue)) {
+                            sBr->setLatching(true);
+                        }
+                }
+            }
+        }
+    }
+    auto parseStop = std::chrono::high_resolution_clock::now();
+    setupTime = parseStop - parseStart;
+}
+
+void
+LLVMInterface::launchRead(MemoryRequest * memReq, ActiveFunction * func) {
+    globalReadQueue.insert({memReq, func});
+    comm->enqueueRead(memReq);
+}
+
+void
+LLVMInterface::ActiveFunction::launchRead(std::shared_ptr<SALAM::Instruction> readInst) {
+    auto rdInst = std::dynamic_pointer_cast<SALAM::Load>(readInst);
+    if (rdInst->isLoadingInternal()) {
+        rdInst->loadInternal();
+    } else {
+        auto memReq = (readInst)->createMemoryRequest();
+        auto rd_uid = readInst->getUID();
+        readQueue.insert({rd_uid, (readInst)});
+        readQueueMap.insert({memReq, rd_uid});
+        owner->launchRead(memReq, this);
+    }
+}
+
+void
+LLVMInterface::launchWrite(MemoryRequest * memReq, ActiveFunction * func) {
+    globalWriteQueue.insert({memReq, func});
+    comm->enqueueWrite(memReq);
+}
+
+void
+LLVMInterface::ActiveFunction::launchWrite(std::shared_ptr<SALAM::Instruction> writeInst) {
+    auto memReq = (writeInst)->createMemoryRequest();
+    trackWrite(memReq->getAddress(), writeInst);
+    auto wr_uid = writeInst->getUID();
+    writeQueue.insert({wr_uid, (writeInst)});
+    writeQueueMap.insert({memReq, wr_uid});
+    owner->launchWrite(memReq, this);
+}
+
+void
+LLVMInterface::readCommit(MemoryRequest * req) {
+/*********************************************************************************************
+ Commit Memory Read Request
+*********************************************************************************************/
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    auto queue_iter = globalReadQueue.find(req);
+    if (queue_iter != globalReadQueue.end()) {
+        queue_iter->second->readCommit(req);
+        DPRINTF(Runtime, "Global Read Commit\n");
+        // delete queue_iter->first; // The CommInterface will ultimately delete this memory request
+        globalReadQueue.erase(queue_iter);
+    } else {
+        panic("Could not find memory request in global read queue!");
+    }
+}
+
+void
+LLVMInterface::ActiveFunction::readCommit(MemoryRequest * req) {
+/*********************************************************************************************
+ Commit Memory Read Request
+*********************************************************************************************/
+    // if (DTRACE(Trace)) if (dbg) DPRINTFS(Runtime, owner,  "Trace: %s \n", __PRETTY_FUNCTION__);
+    auto map_iter = readQueueMap.find(req);
+    if (map_iter != readQueueMap.end()) {
+        auto queue_iter = readQueue.find(map_iter->second);
+        if (queue_iter != readQueue.end()) {
+            auto load_inst = queue_iter->second;
+            uint8_t * readBuff = req->getBuffer();
+            load_inst->setRegisterValue(readBuff);
+            load_inst->compute();
+            if (dbg) DPRINTFS(Runtime, owner,  "Local Read Commit\n");
+            load_inst->commit();
+            readQueue.erase(queue_iter);
+            readQueueMap.erase(map_iter);
+        } else {
+            panic("Could not find memory request in read queue for function %u!", func->getUID());
+        }
+    } else {
+        panic("Could not find memory request in read queue for function %u!", func->getUID());
+    }
+}
+
+void
+LLVMInterface::writeCommit(MemoryRequest * req) {
+/*********************************************************************************************
+ Commit Memory Write Request
+*********************************************************************************************/
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    auto queue_iter = globalWriteQueue.find(req);
+    if (queue_iter != globalWriteQueue.end()) {
+        queue_iter->second->writeCommit(req);
+        // delete queue_iter->first; // The CommInterface will ultimately delete this memory request
+        globalWriteQueue.erase(queue_iter);
+    } else {
+        panic("Could not find memory request in global write queue!");
+    }
+}
+
+void
+LLVMInterface::ActiveFunction::writeCommit(MemoryRequest * req) {
+/*********************************************************************************************
+ Commit Memory Write Request
+*********************************************************************************************/
+    // if (DTRACE(Trace)) if (dbg) DPRINTFS(Runtime, owner,  "Trace: %s \n", __PRETTY_FUNCTION__);
+    auto map_iter = writeQueueMap.find(req);
+    if (map_iter != writeQueueMap.end()) {
+        auto queue_iter = writeQueue.find(map_iter->second);
+        if (queue_iter != writeQueue.end()) {
+            queue_iter->second->commit();
+            Addr addressWritten = map_iter->first->getAddress();
+            untrackWrite(addressWritten);
+            writeQueue.erase(queue_iter);
+            writeQueueMap.erase(map_iter);
+        } else {
+            panic("Could not find memory request in write queue for function %u!", func->getUID());
+        }
+    } else {
+        panic("Could not find memory request in write queue for function %u!", func->getUID());
+    }
+}
+
+void
+LLVMInterface::initialize() {
+/*********************************************************************************************
+ Initialize the Runtime Engine
+
+ Calls function that constructs the basic block list, initializes the reservation table and
+ read, write, and compute queues. Set all data collection variables to zero.
+*********************************************************************************************/
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTF(LLVMInterface, "Initializing LLVM Runtime Engine!\n");
+    setupTime = std::chrono::seconds(0);
+    simTime = std::chrono::seconds(0);
+    schedulingTime = std::chrono::seconds(0);
+    queueProcessTime = std::chrono::seconds(0);
+    computeTime = std::chrono::seconds(0);
+    hwTime = std::chrono::seconds(0);
+    constructStaticGraph();
+    timeStart = std::chrono::high_resolution_clock::now();
+    if (dbg) DPRINTF(LLVMInterface, "================================================================\n");
+    launchTopFunction();
+
+    // panic("Kill Simulation");
+    //if (debug()) DPRINTF(LLVMInterface, "Initializing Reservation Table!\n");
+    //if (debug()) DPRINTF(LLVMInterface, "Initializing readQueue Queue!\n");
+    //if (debug()) DPRINTF(LLVMInterface, "Initializing writeQueue Queue!\n");
+    //if (debug()) DPRINTF(LLVMInterface, "Initializing computeQueue List!\n");
+    if (dbg) DPRINTF(LLVMInterface, "\n%s\n%s\n%s\n",
+           "*******************************************************************************",
+           "*                 Begin Runtime Simulation Computation Engine                 *",
+           "*******************************************************************************");
+    running = true;
+    cycle = 0;
+    stalls = 0;
+    tick();
+}
+
+void
+LLVMInterface::debug(uint64_t flags) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    // Dump
+    for (auto func_iter = functions.begin(); func_iter != functions.end(); func_iter++) {
+        // Function Level
+        // (*func_iter)->dump();
+        for (auto bb_iter = (*func_iter)->getBBList()->begin(); bb_iter != (*func_iter)->getBBList()->end(); bb_iter++) {
+            // Basic Block Level
+            (*bb_iter)->dump();
+            for (auto inst_iter = (*bb_iter)->Instructions()->begin(); inst_iter != (*bb_iter)->Instructions()->end(); inst_iter++) {
+                // Instruction Level
+                (*inst_iter)->dump();
+            }
+        }
+    }
+    // Dump
+    // SALAM::Operand test;
+    // test.setOp()
+}
+
+void
+LLVMInterface::startup() {
+/*********************************************************************************************
+ Initialize communications between gem5 interface and simulator
+*********************************************************************************************/
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    comm->registerCompUnit(this);
+}
+
+// LLVMInterface*
+// LLVMInterfaceParams::create() {
+// /*********************************************************************************************
+//  Create new interface between the llvm IR and our simulation engine
+// *********************************************************************************************/
+//     // if (DTRACE(Trace)) if (dbg) DPRINTFS(Runtime, owner,  "Trace: %s \n", __PRETTY_FUNCTION__);
+//     return new LLVMInterface(this);
+// }
+
+void
+LLVMInterface::finalize() {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    // Simulation Times
+    simStop = std::chrono::high_resolution_clock::now();
+    simTotal = simStop - timeStart;
+    printResults();
+    functions.clear();
+    values.clear();
+    comm->finish();
+}
+
+void
+LLVMInterface::printResults() {
+
+
+    std::map<uint64_t, uint64_t> totals_reads;
+    std::map<uint64_t, uint64_t> totals_writes;
+
+    std::cout << "********************************************************************************" << std::endl;
+    std::cout << name() << std::endl;
+
+    for (auto it : values) {
+        if (it->isInstruction()) {
+            //std::cout << "Instruction: " << llvm::Instruction::getOpcodeName(it->getOpode()) << "\n";
+            if (it->getReg()) {
+                totals_reads[it->getOpode()] += it->getReg()->getReads();
+                totals_writes[it->getOpode()] += it->getReg()->getWrites();
+            }
+        }
+    }
+
+    /*
+    for(const auto& count : hw->opcodes->usage) {
+        if (count.second) std::cout << "\nInstruction: " << llvm::Instruction::getOpcodeName(count.first) << "\n\tIR Count: " << count.second << "\n\tTotal Reads: " << totals_reads[count.first] << "\n\tTotal Writes: " << totals_writes[count.first];
+    }
+    std::cout << "\n";
+    */
+
+   //hw->hw_statistics->print();
+
+
+    double adder_area = (hw->opcodes->get_usage(13) + hw->opcodes->get_usage(20) + hw->opcodes->get_usage(15)) *  1.794430e+02;
+    double adder_reads = (totals_reads[13] + totals_reads[15]);
+    double adder_writes = (totals_writes[13] + totals_writes[15]);
+    double adder_power_static = adder_reads*2.380803e-03;
+    double adder_power_dynamic =  adder_writes*(8.115300e-03+6.162853e-03);
+
+    double bitwise_area = (hw->opcodes->get_usage(29) + hw->opcodes->get_usage(30) + hw->opcodes->get_usage(25) + hw->opcodes->get_usage(26) + hw->opcodes->get_usage(27) + hw->opcodes->get_usage(28)) * 5.036996e+01;
+    double bitwise_reads = (totals_reads[25] + totals_reads[26] + totals_reads[27] + totals_reads[28] + totals_reads[29] + totals_reads[30]);
+    double bitwise_writes = (totals_writes[25] + totals_writes[26] + totals_writes[27] + totals_writes[28] + totals_writes[29] + totals_writes[30]);
+    double bitwise_power_static = bitwise_reads*6.111633e-04;
+    double bitwise_power_dynamic = bitwise_writes*(1.680942e-03+1.322420e-03);
+
+    double multiplier_area = (hw->opcodes->get_usage(17) + hw->opcodes->get_usage(19) + hw->opcodes->get_usage(20))*4.595000e+03;
+    double multiplier_reads = totals_reads[17] + totals_reads[19] + totals_reads[20];
+    double multiplier_writes = totals_writes[17] + totals_writes[19] + totals_writes[20];
+    double multiplier_power_static = multiplier_reads*4.817683e-02;
+    double multiplier_power_dynamic = multiplier_writes*(5.725752e-01+8.662890e-01);
+
+    double reg_area = hw->opcodes->get_usage(34)*32*5.981433e+00;
+    double reg_reads = totals_reads[34]*32;
+    double reg_writes = totals_writes[34]*32;
+    double register_power_static = reg_reads*7.395312e-05;
+    double register_power_dynamic = reg_writes*(1.322600e-03+1.792126e-04);
+
+    double total_area = adder_area + bitwise_area + multiplier_area + reg_area;
+    double total_power_static = adder_power_static + bitwise_power_static + multiplier_power_static + register_power_static;
+    double total_power_dynamic = adder_power_dynamic + bitwise_power_dynamic + multiplier_power_dynamic + register_power_dynamic;
+
+    std::cout << "Total Area: " << total_area;
+    std::cout << "\nTotal Power Static: " << total_power_static << "\n";
+    std::cout << "\nTotal Power Dynamic: " << total_power_dynamic << "\n";
+
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    Tick cycle_time = clock_period/1000;
+
+    auto hwTimingMS = std::chrono::duration_cast<std::chrono::milliseconds>(hwTime);
+    auto hwHours = std::chrono::duration_cast<std::chrono::hours>(hwTimingMS);
+    hwTimingMS -= std::chrono::duration_cast<std::chrono::seconds>(hwHours);
+    auto hwMins = std::chrono::duration_cast<std::chrono::minutes>(hwTimingMS);
+    hwTimingMS -= std::chrono::duration_cast<std::chrono::seconds>(hwMins);
+    auto hwSecs = std::chrono::duration_cast<std::chrono::seconds>(hwTimingMS);
+    hwTimingMS -= std::chrono::duration_cast<std::chrono::seconds>(hwSecs);
+
+    //auto setupMS = std::chrono::duration_cast<std::chrono::milliseconds>(setupTime);
+
+    //auto setupHours = std::chrono::duration_cast<std::chrono::hours>(setupMS);
+    //setupMS -= std::chrono::duration_cast<std::chrono::seconds>(setupHours);
+    //auto setupMins = std::chrono::duration_cast<std::chrono::minutes>(setupMS);
+    //setupMS -= std::chrono::duration_cast<std::chrono::seconds>(setupMins);
+    //auto setupSecs = std::chrono::duration_cast<std::chrono::seconds>(setupMS);
+    //setupMS -= std::chrono::duration_cast<std::chrono::seconds>(setupSecs);
+
+    auto setupUS = std::chrono::duration_cast<std::chrono::microseconds>(setupTime);
+    auto setupHours = std::chrono::duration_cast<std::chrono::hours>(setupUS);
+    setupUS -= std::chrono::duration_cast<std::chrono::seconds>(setupHours);
+    auto setupMins = std::chrono::duration_cast<std::chrono::minutes>(setupUS);
+    setupUS -= std::chrono::duration_cast<std::chrono::seconds>(setupMins);
+    auto setupSecs = std::chrono::duration_cast<std::chrono::seconds>(setupUS);
+    setupUS -= std::chrono::duration_cast<std::chrono::seconds>(setupSecs);
+
+    auto setupMS = std::chrono::duration_cast<std::chrono::milliseconds>(setupUS);
+
+    setupUS -= std::chrono::duration_cast<std::chrono::milliseconds>(setupMS);
+
+    auto totalMS = std::chrono::duration_cast<std::chrono::milliseconds>(simTotal);
+    auto totalHours = std::chrono::duration_cast<std::chrono::hours>(totalMS);
+    totalMS -= std::chrono::duration_cast<std::chrono::seconds>(totalHours);
+    auto totalMins = std::chrono::duration_cast<std::chrono::minutes>(totalMS);
+    totalMS -= std::chrono::duration_cast<std::chrono::seconds>(totalMins);
+    auto totalSecs = std::chrono::duration_cast<std::chrono::seconds>(totalMS);
+    totalMS -= std::chrono::duration_cast<std::chrono::seconds>(totalSecs);
+
+    auto simMS = std::chrono::duration_cast<std::chrono::milliseconds>(simTime);
+    auto simHours = std::chrono::duration_cast<std::chrono::hours>(simMS);
+    simMS -= std::chrono::duration_cast<std::chrono::seconds>(simHours);
+    auto simMins = std::chrono::duration_cast<std::chrono::minutes>(simMS);
+    simMS -= std::chrono::duration_cast<std::chrono::seconds>(simMins);
+    auto simSecs = std::chrono::duration_cast<std::chrono::seconds>(simMS);
+    simMS -= std::chrono::duration_cast<std::chrono::seconds>(simSecs);
+
+    auto queueMS = std::chrono::duration_cast<std::chrono::milliseconds>(queueProcessTime);
+    auto queueHours = std::chrono::duration_cast<std::chrono::hours>(queueMS);
+    queueMS -= std::chrono::duration_cast<std::chrono::seconds>(queueHours);
+    auto queueMins = std::chrono::duration_cast<std::chrono::minutes>(queueMS);
+    queueMS -= std::chrono::duration_cast<std::chrono::seconds>(queueMins);
+    auto queueSecs = std::chrono::duration_cast<std::chrono::seconds>(queueMS);
+    queueMS -= std::chrono::duration_cast<std::chrono::seconds>(queueSecs);
+
+    auto schedMS = std::chrono::duration_cast<std::chrono::milliseconds>(schedulingTime);
+    auto schedHours = std::chrono::duration_cast<std::chrono::hours>(schedMS);
+    schedMS -= std::chrono::duration_cast<std::chrono::seconds>(schedHours);
+    auto schedMins = std::chrono::duration_cast<std::chrono::minutes>(schedMS);
+    schedMS -= std::chrono::duration_cast<std::chrono::seconds>(schedMins);
+    auto schedSecs = std::chrono::duration_cast<std::chrono::seconds>(schedMS);
+    schedMS -= std::chrono::duration_cast<std::chrono::seconds>(schedSecs);
+
+    auto computeMS = std::chrono::duration_cast<std::chrono::milliseconds>(computeTime);
+    auto computeHours = std::chrono::duration_cast<std::chrono::hours>(computeMS);
+    computeMS -= std::chrono::duration_cast<std::chrono::seconds>(computeHours);
+    auto computeMins = std::chrono::duration_cast<std::chrono::minutes>(computeMS);
+    computeMS -= std::chrono::duration_cast<std::chrono::seconds>(computeMins);
+    auto computeSecs = std::chrono::duration_cast<std::chrono::seconds>(computeMS);
+    computeMS -= std::chrono::duration_cast<std::chrono::seconds>(computeSecs);
+
+/*********************************************************************************************
+ Prints usage statistics of how many times each instruction was accessed during runtime
+*********************************************************************************************/
+
+    std::cout << "   ========= Performance Analysis =============" << std::endl;
+    std::cout << "   Setup Time:                      " << setupHours.count() << "h " << setupMins.count() << "m " << setupSecs.count() << "s " << setupMS.count() << "ms " << setupUS.count() << "us" << std::endl;
+    std::cout << "   Simulation Time (Total):         " << totalHours.count() << "h " << totalMins.count() << "m " << totalSecs.count() << "s " << totalMS.count() << "ms" << std::endl;
+    std::cout << "   Simulation Time (Active):        " << simHours.count() << "h " << simMins.count() << "m " << simSecs.count() << "s " << simMS.count() << "ms" << std::endl;
+    std::cout << "        Queue Processing Time:      " << queueHours.count() << "h " << queueMins.count() << "m " << queueSecs.count() << "s " << queueMS.count() << "ms" << std::endl;
+    std::cout << "             Scheduling Time:       " << schedHours.count() << "h " << schedMins.count() << "m " << schedSecs.count() << "s " << schedMS.count() << "ms" << std::endl;
+    std::cout << "             Computation Time:      " << computeHours.count() << "h " << computeMins.count() << "m " << computeSecs.count() << "s " << computeMS.count() << "ms" << std::endl;
+    std::cout << "   System Clock:                    " << 1.0/(cycle_time) << "GHz" << std::endl;
+    std::cout << "   Runtime:                         " << cycle << " cycles" << std::endl;
+    std::cout << "   Runtime:                         " << (cycle*cycle_time*(1e-3)) << " us" << std::endl;
+    std::cout << "   Stalls:                          " << stalls << " cycles" << std::endl;
+    std::cout << "   Executed Nodes:                  " << (cycle-stalls-1) << " cycles" << std::endl;
+    std::cout << std::endl;
+}
+
+void
+LLVMInterface::dumpQueues() {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    // std::cout << "*********************************************************\n"
+    //           << "Compute Queue\n"
+    //           << "*********************************************************\n";
+    // for (auto compute : computeQueue) {
+    //     std::cout << compute->_LLVMLine << std::endl;
+    // }
+    // std::cout << "*********************************************************\n"
+    //           << "Read Queue\n"
+    //           << "*********************************************************\n";
+    // for (auto read : readQueue) {
+    //     std::cout << read->_LLVMLine << std::endl;
+    // }
+    // std::cout << "*********************************************************\n"
+    //           << "Write Queue\n"
+    //           << "*********************************************************\n";
+    // for (auto write : writeQueue) {
+    //     std::cout << write->_LLVMLine << std::endl;
+    // }
+    // std::cout << "*********************************************************\n"
+    //           << "Reservation Queue\n"
+    //           << "*********************************************************\n";
+    // for (auto reserved : reservation) {
+    //     std::cout << reserved->_LLVMLine << std::endl;
+    // }
+    // std::cout << "*********************************************************\n"
+    //           << "End of queue dump\n"
+    //           << "*********************************************************\n";
+}
+
+void
+LLVMInterface::launchFunction(std::shared_ptr<SALAM::Function> callee,
+                              std::shared_ptr<SALAM::Instruction> caller) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    // Add the callee to our list of active functions
+    activeFunctions.push_back(ActiveFunction(this, callee, caller));
+    activeFunctions.back().launch();
+}
+
+void
+LLVMInterface::launchTopFunction() {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    for (auto it = functions.begin(); it != functions.end(); it++) {
+        if ((*it)->isTop()) {
+            // Launch the top level function
+            launchFunction((*it), nullptr);
+            return;
+        }
+    }
+    // Fallback if no function was marked as the top-level
+    panic("No function marked as top-level. Set the top_name parameter for your LLVMInterface to the name of the top-level function\n");
+}
+
+void LLVMInterface::ActiveFunction::launch() {
+    // if (DTRACE(Trace)) if (dbg) DPRINTFS(Runtime, owner,  "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTFS(LLVMInterface, owner, "Launching Function: %s\n", func->getIRStub());
+    // func->value_dump();
+    // Fetch the arguments
+    std::vector<std::shared_ptr<SALAM::Value>> funcArgs = *(func->getArguments());
+    if (func->isTop()) {
+        // We need to fetch argument values from the memory mapped registers
+        if (dbg) DPRINTFS(LLVMInterface, owner, "Connecting CommInterface\n");
+        CommInterface * comm = owner->getCommInterface();
+        if (dbg) DPRINTFS(LLVMInterface, owner, "Connecting HWInterface\n");
+        hw = owner->getHWInterface();
+
+        unsigned argOffset = 0;
+        for (auto arg : funcArgs) {
+            uint64_t argSizeInBytes = arg->getSizeInBytes();
+            uint64_t regValue = comm->getGlobalVar(argOffset, argSizeInBytes);
+            arg->setRegisterValue(regValue);
+            argOffset += argSizeInBytes;
+        }
+    } else {
+        // We need to fetch argument values from the calling function
+        //std::deque<SALAM::Operand> callerArgs = *caller->getOperands();
+        std::vector<SALAM::Operand> callerArgs = *caller->getOperands();
+        if (funcArgs.size() != callerArgs.size())
+            panic("Function expects %d args. Got %d args.", funcArgs.size(), callerArgs.size());
+        for (auto i = 0; i < callerArgs.size(); i++) {
+            funcArgs.at(i)->setRegisterValue(callerArgs.at(i).getOpRegister());
+        }
+    }
+    func->addInstance();
+    // Schedule the first BB
+    scheduleBB(func->entry());
+}
+
+std::shared_ptr<SALAM::Instruction>
+LLVMInterface::createInstruction(llvm::Instruction * inst, uint64_t id) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    uint64_t OpCode = inst->Instruction::getOpcode();
+    // if (DTRACE(Trace)) DPRINTF(LLVMInterface, "Switch OpCode [%d]\n", OpCode);
+    // HW
+    hw->opcodes->update_usage(OpCode);
+
+    uint64_t functional_unit = 0;
+    for (auto hw_inst : hw->inst_config->inst_list) {
+        //std::cout << "\n\n\nTest 7 OpCode[" << OpCode << "] | Compare: ["<< hw_inst->get_opcode_num() << "]\n\n\n";
+        if(OpCode == hw_inst->get_opcode_num()) {
+            //std::cout << "\n\n\nTest 4\n\n\n";
+            functional_unit = hw_inst->get_functional_unit();
+            for (auto hw_fu : hw->functional_units->functional_unit_list) {
+                //std::cout << "\n\n\nTest 5\n\n\n";
+                if(hw_fu->get_enum_value() == functional_unit) {
+                    //std::cout << "\n\n\nTest 6\n\n\n";
+                    hw_fu->inc_functional_unit_limit();
+                    break;
+                }
+            }
+            break;
+        }
+    }
+
+    switch(OpCode) {
+        case llvm::Instruction::Ret : return SALAM::createRetInst(id, this, debug(), OpCode, hw->cycle_counts->ret_inst, functional_unit); break;
+        case llvm::Instruction::Br: return SALAM::createBrInst(id, this, debug(), OpCode, hw->cycle_counts->br_inst, functional_unit); break;
+        case llvm::Instruction::Switch: return SALAM::createSwitchInst(id, this, debug(), OpCode, hw->cycle_counts->switch_inst, functional_unit); break;
+        case llvm::Instruction::Add: return SALAM::createAddInst(id, this, debug(), OpCode, hw->cycle_counts->add_inst, functional_unit); break;
+        case llvm::Instruction::FAdd: return SALAM::createFAddInst(id, this, debug(), OpCode, hw->cycle_counts->fadd_inst, functional_unit); break;
+        case llvm::Instruction::Sub: return SALAM::createSubInst(id, this, debug(), OpCode, hw->cycle_counts->sub_inst, functional_unit); break;
+        case llvm::Instruction::FSub: return SALAM::createFSubInst(id, this, debug(), OpCode, hw->cycle_counts->fsub_inst, functional_unit); break;
+        case llvm::Instruction::Mul: return SALAM::createMulInst(id, this, debug(), OpCode, hw->cycle_counts->mul_inst, functional_unit); break;
+        case llvm::Instruction::FMul: return SALAM::createFMulInst(id, this, debug(), OpCode, hw->cycle_counts->fmul_inst, functional_unit); break;
+        case llvm::Instruction::UDiv: return SALAM::createUDivInst(id, this, debug(), OpCode, hw->cycle_counts->udiv_inst, functional_unit); break;
+        case llvm::Instruction::SDiv: return SALAM::createSDivInst(id, this, debug(), OpCode, hw->cycle_counts->sdiv_inst, functional_unit); break;
+        case llvm::Instruction::FDiv: return SALAM::createFDivInst(id, this, debug(), OpCode, hw->cycle_counts->fdiv_inst, functional_unit); break;
+        case llvm::Instruction::URem: return SALAM::createURemInst(id, this, debug(), OpCode, hw->cycle_counts->urem_inst, functional_unit); break;
+        case llvm::Instruction::SRem: return SALAM::createSRemInst(id, this, debug(), OpCode, hw->cycle_counts->srem_inst, functional_unit); break;
+        case llvm::Instruction::FRem: return SALAM::createFRemInst(id, this, debug(), OpCode, hw->cycle_counts->frem_inst, functional_unit); break;
+        case llvm::Instruction::Shl: return SALAM::createShlInst(id, this, debug(), OpCode, hw->cycle_counts->shl_inst, functional_unit); break;
+        case llvm::Instruction::LShr: return SALAM::createLShrInst(id, this, debug(), OpCode, hw->cycle_counts->lshr_inst, functional_unit); break;
+        case llvm::Instruction::AShr: return SALAM::createAShrInst(id, this, debug(), OpCode, hw->cycle_counts->ashr_inst, functional_unit); break;
+        case llvm::Instruction::And: return SALAM::createAndInst(id, this, debug(), OpCode, hw->cycle_counts->and_inst, functional_unit); break;
+        case llvm::Instruction::Or: return SALAM::createOrInst(id, this, debug(), OpCode, hw->cycle_counts->or_inst, functional_unit); break;
+        case llvm::Instruction::Xor: return SALAM::createXorInst(id, this, debug(), OpCode, hw->cycle_counts->xor_inst, functional_unit); break;
+        case llvm::Instruction::Load: return SALAM::createLoadInst(id, this, debug(), OpCode, hw->cycle_counts->load_inst, functional_unit); break;
+        case llvm::Instruction::Store: return SALAM::createStoreInst(id, this, debug(), OpCode, hw->cycle_counts->store_inst, functional_unit); break;
+        case llvm::Instruction::GetElementPtr : return SALAM::createGetElementPtrInst(id, this, debug(), OpCode, hw->cycle_counts->gep_inst, functional_unit); break;
+        case llvm::Instruction::Trunc: return SALAM::createTruncInst(id, this, debug(), OpCode, hw->cycle_counts->trunc_inst, functional_unit); break;
+        case llvm::Instruction::ZExt: return SALAM::createZExtInst(id, this, debug(), OpCode, hw->cycle_counts->zext_inst, functional_unit); break;
+        case llvm::Instruction::SExt: return SALAM::createSExtInst(id, this, debug(), OpCode, hw->cycle_counts->sext_inst, functional_unit); break;
+        case llvm::Instruction::FPToUI: return SALAM::createFPToUIInst(id, this, debug(), OpCode, hw->cycle_counts->fptoui_inst, functional_unit); break;
+        case llvm::Instruction::FPToSI: return SALAM::createFPToSIInst(id, this, debug(), OpCode, hw->cycle_counts->fptosi_inst, functional_unit); break;
+        case llvm::Instruction::UIToFP: return SALAM::createUIToFPInst(id, this, debug(), OpCode, hw->cycle_counts->uitofp_inst, functional_unit); break;
+        case llvm::Instruction::SIToFP: return SALAM::createSIToFPInst(id, this, debug(), OpCode, hw->cycle_counts->sitofp_inst, functional_unit); break;
+        case llvm::Instruction::FPTrunc: return SALAM::createFPTruncInst(id, this, debug(), OpCode, hw->cycle_counts->fptrunc_inst, functional_unit); break;
+        case llvm::Instruction::FPExt: return SALAM::createFPExtInst(id, this, debug(), OpCode, hw->cycle_counts->fpext_inst, functional_unit); break;
+        case llvm::Instruction::PtrToInt: return SALAM::createPtrToIntInst(id, this, debug(), OpCode, hw->cycle_counts->ptrtoint_inst, functional_unit); break;
+        case llvm::Instruction::IntToPtr: return SALAM::createIntToPtrInst(id, this, debug(), OpCode, hw->cycle_counts->inttoptr_inst, functional_unit); break;
+        case llvm::Instruction::ICmp: return SALAM::createICmpInst(id, this, debug(), OpCode, hw->cycle_counts->icmp_inst, functional_unit); break;
+        case llvm::Instruction::FCmp: return SALAM::createFCmpInst(id, this, debug(), OpCode, hw->cycle_counts->fcmp_inst, functional_unit); break;
+        case llvm::Instruction::PHI: return SALAM::createPHIInst(id, this, debug(), OpCode, hw->cycle_counts->phi_inst, functional_unit); break;
+        case llvm::Instruction::Call: return SALAM::createCallInst(id, this, debug(), OpCode, hw->cycle_counts->call_inst, functional_unit); break;
+        case llvm::Instruction::Select: return SALAM::createSelectInst(id, this, debug(), OpCode, hw->cycle_counts->select_inst, functional_unit); break;
+        default: {
+            warn("Tried to create instance of undefined instruction type!");
+            return SALAM::createBadInst(id, this, dbg, OpCode, 0, 0); break;
+        }
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/llvm_interface.hh gem5-SALAM/src/hwacc/llvm_interface.hh
--- gem5/src/hwacc/llvm_interface.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/llvm_interface.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,200 @@
+#ifndef __HWACC_LLVM_INTERFACE_HH__
+#define __HWACC_LLVM_INTERFACE_HH__
+
+// C++ Includes
+#include <algorithm>
+#include <chrono>
+#include <ctime>
+#include <deque>
+#include <fstream>
+#include <iomanip>
+#include <iostream>
+#include <list>
+#include <map>
+#include <memory>
+#include <queue>
+#include <ratio>
+#include <type_traits>
+#include <typeinfo>
+
+// LLVM Includes
+#include <llvm-c/Core.h>
+#include <llvm/Analysis/LoopInfo.h>
+#include <llvm/IR/BasicBlock.h>
+#include <llvm/IR/Dominators.h>
+#include <llvm/IR/Function.h>
+#include <llvm/IR/Instruction.h>
+#include <llvm/IR/LLVMContext.h>
+#include <llvm/IR/Module.h>
+#include <llvm/IRReader/IRReader.h>
+#include <llvm/Support/SourceMgr.h>
+#include <llvm/Transforms/Utils/Cloning.h>
+
+// SALAM Includes
+#include "hwacc/HWModeling/src/hw_interface.hh"
+#include "hwacc/LLVMRead/src/basic_block.hh"
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "hwacc/LLVMRead/src/function.hh"
+#include "hwacc/LLVMRead/src/operand.hh"
+#include "hwacc/compute_unit.hh"
+#include "params/LLVMInterface.hh"
+
+class LLVMInterface : public ComputeUnit {
+  private:
+    std::string filename;
+    std::string topName;
+    uint32_t scheduling_threshold;
+    int32_t clock_period;
+    int cycle;
+    int stalls;
+
+    bool running;
+    bool loadOpScheduled;
+    bool storeOpScheduled;
+    bool compOpScheduled;
+    bool lockstep;
+    bool dbg;
+    std::chrono::duration<float> setupTime;
+    std::chrono::duration<float> simTotal;
+    std::chrono::duration<float> simTime;
+    std::chrono::duration<float> schedulingTime;
+    std::chrono::duration<float> queueProcessTime;
+    std::chrono::duration<float> computeTime;
+    std::chrono::duration<float> hwTime;
+    std::chrono::high_resolution_clock::time_point simStop;
+    std::chrono::high_resolution_clock::time_point setupStop;
+    std::chrono::high_resolution_clock::time_point timeStart;
+
+
+    class ActiveFunction {
+      friend class LLVMInterface;
+    private:
+        LLVMInterface * owner;
+        HWInterface* hw;
+        std::shared_ptr<SALAM::Function> func;
+        std::shared_ptr<SALAM::Instruction> caller;
+        std::list<std::shared_ptr<SALAM::Instruction>> reservation;
+        std::map<uint64_t, std::shared_ptr<SALAM::Instruction>> readQueue;
+        std::map<MemoryRequest *, uint64_t> readQueueMap;
+        std::map<uint64_t, std::shared_ptr<SALAM::Instruction>> writeQueue;
+        std::map<MemoryRequest *, uint64_t> writeQueueMap;
+        std::map<uint64_t, std::shared_ptr<SALAM::Instruction>> computeQueue;
+        std::shared_ptr<SALAM::BasicBlock> previousBB;
+        HW_Cycle_Stats hw_cycle_stats;
+        uint32_t scheduling_threshold;
+        bool returned = false;
+        bool lockstep;
+        bool dbg;
+
+        inline bool uidActive(uint64_t id) {
+          return computeUIDActive(id) || readUIDActive(id) || writeUIDActive(id);
+        }
+
+        std::map<Addr, std::shared_ptr<SALAM::Instruction>> activeWrites;
+        inline void trackWrite(Addr writeAddr, std::shared_ptr<SALAM::Instruction> writeInst) {
+          activeWrites.insert({writeAddr, writeInst});
+        }
+        inline void untrackWrite(uint64_t writeAddr) {
+          auto it = activeWrites.find(writeAddr);
+          if (it != activeWrites.end()) activeWrites.erase(it);
+        }
+        inline bool writeActive(uint64_t writeAddr) {
+          return (activeWrites.find(writeAddr) != activeWrites.end());
+        }
+
+        inline std::shared_ptr<SALAM::Instruction> getActiveWrite(uint64_t writeAddr) {
+          return activeWrites.find(writeAddr)->second;
+        }
+        // std::map<Addr, std::shared_ptr<SALAM::Instruction>> activeReads;
+        // inline void trackRead(Addr readAddr, std::shared_ptr<SALAM::Instruction> readInst) {
+        //   activeReads.insert({readAddr, readInst});
+        // }
+        // inline void untrackRead(uint64_t readAddr) {
+        //   auto it = activeReads.find(readAddr);
+        //   if (it != activeReads.end()) activeReads.erase(it);
+        // }
+        // inline bool readActive(uint64_t readAddr) {
+        //   return (activeReads.find(readAddr) != activeReads.end());
+        // }
+        // inline std::shared_ptr<SALAM::Instruction> getActiveRead(uint64_t readAddr) {
+        //   return activeReads.find(readAddr)->second;
+        // }
+        inline bool writeUIDActive(uint64_t uid) {
+          return (writeQueue.find(uid) != writeQueue.end());
+        }
+        inline bool readUIDActive(uint64_t uid) {
+          return (readQueue.find(uid) != readQueue.end());
+        }
+        inline bool computeUIDActive(uint64_t uid) {
+          return (computeQueue.find(uid) != computeQueue.end());
+        }
+    public:
+        ActiveFunction(LLVMInterface * _owner, std::shared_ptr<SALAM::Function> _func,
+                       std::shared_ptr<SALAM::Instruction> _caller):
+                       owner(_owner), func(_func), caller(_caller),
+                       previousBB(nullptr) {
+                          scheduling_threshold = owner->getSchedulingThreshold();
+                          lockstep = (owner->getLockstepStatus());
+                          dbg = owner->debug();
+                       }
+        void readCommit(MemoryRequest *req);
+        void writeCommit(MemoryRequest *req);
+        void findDynamicDeps(std::shared_ptr<SALAM::Instruction> inst);
+        void scheduleBB(std::shared_ptr<SALAM::BasicBlock> bb);
+        void processQueues();
+        void launch();
+        inline bool queuesClear() {
+          return readQueue.empty() && writeQueue.empty() && computeQueue.empty();
+        }
+        inline bool lockstepReady() {
+          return !lockstep || queuesClear();
+        }
+        inline bool canReturn() {
+            return queuesClear() && reservation.front()->isReturn();
+        }
+        void launchRead(std::shared_ptr<SALAM::Instruction> readInst);
+        void launchWrite(std::shared_ptr<SALAM::Instruction> writeInst);
+        bool hasReturned() { return returned; }
+    };
+
+    std::list<ActiveFunction> activeFunctions;
+    std::map<MemoryRequest *, ActiveFunction *> globalReadQueue;
+    std::map<MemoryRequest *, ActiveFunction *> globalWriteQueue;
+
+    std::vector<std::shared_ptr<SALAM::Function>> functions;
+    std::vector<std::shared_ptr<SALAM::Value>> values;
+  protected:
+    // const std::string name() const { return comm->getName() + ".compute"; }
+    virtual bool debug() { return comm->debug(); }
+    // virtual bool debug() { return true; }
+  public:
+    PARAMS(LLVMInterface);
+    LLVMInterface(const LLVMInterfaceParams &p);
+    void tick();
+    void constructStaticGraph();
+    void startup();
+    void initialize();
+    void finalize();
+    void debug(uint64_t flags);
+    bool getLockstepStatus() { return lockstep; }
+    void readCommit(MemoryRequest *req);
+    void writeCommit(MemoryRequest *req);
+    void dumpModule(llvm::Module *m);
+    void printResults();
+    void launchFunction(std::shared_ptr<SALAM::Function> callee,
+                        std::shared_ptr<SALAM::Instruction> caller);
+    void launchTopFunction();
+    void endFunction(ActiveFunction * afunc);
+    void launchRead(MemoryRequest * memReq, ActiveFunction * func);
+    void launchWrite(MemoryRequest * memReq, ActiveFunction * func);
+    std::shared_ptr<SALAM::Instruction> createInstruction(llvm::Instruction *inst,
+                                                          uint64_t id);
+    void dumpQueues();
+    uint32_t getSchedulingThreshold() { return scheduling_threshold; }
+    void addSchedulingTime(std::chrono::duration<float> timeDelta) { schedulingTime = schedulingTime + timeDelta; }
+    void addQueueTime(std::chrono::duration<float> timeDelta) { queueProcessTime = queueProcessTime + timeDelta; }
+    void addComputeTime(std::chrono::duration<float> timeDelta) { computeTime = computeTime + timeDelta; }
+    void addHWTime(std::chrono::duration<float> timeDelta) { hwTime = hwTime + timeDelta; }
+};
+
+#endif //__HWACC_LLVM_INTERFACE_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMInterface.py gem5-SALAM/src/hwacc/LLVMInterface.py
--- gem5/src/hwacc/LLVMInterface.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMInterface.py	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,14 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+from m5.objects.ComputeUnit import ComputeUnit
+
+class LLVMInterface(ComputeUnit):
+    type = 'LLVMInterface'
+    cxx_header = "hwacc/llvm_interface.hh"
+    
+    in_file = Param.String("LLVM Trace File")
+    lockstep_mode = Param.Bool(True, "TRUE: Stall datapath if any operation stalls. FALSE: Only stall datapath regions with stalls")
+    sched_threshold = Param.UInt32(10000, "Scheduling window threshold. Prevents scheduling windows size from exploding during regions of high loop parallelism")
+    clock_period = Param.Int32(10, "System clock speed")
+    top_name = Param.String("top", "Name of the top-level function for the accelerator")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/.gitignore gem5-SALAM/src/hwacc/LLVMRead/.gitignore
--- gem5/src/hwacc/LLVMRead/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/.gitignore	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1 @@
+src/*.o
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/basic_block.cc gem5-SALAM/src/hwacc/LLVMRead/src/basic_block.cc
--- gem5/src/hwacc/LLVMRead/src/basic_block.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/basic_block.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,68 @@
+//------------------------------------------//
+#include "basic_block.hh"
+#include "llvm/IR/CFG.h"
+#include "sim/sim_object.hh"
+//------------------------------------------//
+
+using namespace SALAM;
+
+SALAM::BasicBlock::BasicBlock(uint64_t id, gem5::SimObject * owner, bool dbg) :
+    SALAM::Value(id, owner, dbg) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    // if (DTRACE(SALAM_Debug)) {
+    //     this->dbg = true;
+    //     this->bb_dbg = new BasicBlock_Debugger();
+    // }
+}
+
+SALAM::BasicBlock::~BasicBlock() 
+{
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace Deleted: %s \n", __PRETTY_FUNCTION__);
+    //// if (DTRACE(SALAM_Debug)) delete bb_dbg;
+}
+
+SALAM::BasicBlock::BasicBlock_Debugger::BasicBlock_Debugger()
+{
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+}
+
+void
+SALAM::BasicBlock::BasicBlock_Debugger::dumper(SALAM::BasicBlock *bb)
+{
+    // if (DTRACE(SALAM_Debug)) {
+        // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    //     DPRINTF(SALAM_Debug, "%s \n\t\t\t %s %d  \n", 
+    //         "************** Basic Block Dump **************",
+    //         "UID: ", bb->getUID()
+    //     );
+    // }
+}
+
+void
+SALAM::BasicBlock::initialize(llvm::Value * irval, irvmap *vmap, SALAM::valueListTy * valueList) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize Values - BasicBlock::initialize\n");
+    Value::initialize(irval, vmap);
+	//Parse irval for BasicBlock params
+	llvm::BasicBlock * bb = llvm::dyn_cast<llvm::BasicBlock>(irval);
+	assert(bb); // panic("Invalid llvm::Value type used to initialize basic block. Failed cast to llvm::BasicBlock.");
+
+    for (auto it = llvm::pred_begin(bb); it != pred_end(bb); ++it) {
+        llvm::BasicBlock * predecessor = *it;
+        std::shared_ptr<SALAM::BasicBlock> pred =
+            std::dynamic_pointer_cast<SALAM::BasicBlock>(vmap->find(predecessor)->second);
+        predecessors.push_back(pred);
+    }
+
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize BasicBlocks\n");
+	for (auto inst_iter = bb->begin(); inst_iter != bb->end(); inst_iter++) {
+        llvm::Instruction &inst = *inst_iter;
+        std::shared_ptr<SALAM::Value> instval = vmap->find(&inst)->second;
+        assert(instval);
+        std::shared_ptr<SALAM::Instruction> instruct = std::dynamic_pointer_cast<SALAM::Instruction>(instval);
+        assert(instruct);
+        instructions.push_back(instruct);
+        instruct->initialize(&inst, vmap, valueList);
+        if (dbg) DPRINTFS(LLVMParse, owner, "Instruction (UID: %d) Initialization Complete\n", instruct->getUID());
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/basic_block.hh gem5-SALAM/src/hwacc/LLVMRead/src/basic_block.hh
--- gem5/src/hwacc/LLVMRead/src/basic_block.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/basic_block.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,51 @@
+#ifndef __SALAM_BASIC_BLOCK_HH__
+#define __SALAM_BASIC_BLOCK_HH__
+//------------------------------------------//
+#include "debug_flags.hh"
+#include "value.hh"
+#include "instruction.hh"
+#include "llvm/IR/BasicBlock.h"
+#include "llvm/IR/Instruction.h"
+//------------------------------------------//
+#include <memory>
+#include <iomanip>
+#include <string>
+#include <sstream>
+#include <iostream>
+#include <iterator>
+#include <algorithm>
+//------------------------------------------//
+
+namespace SALAM {
+  class Instruction; // Do not remove
+
+  class BasicBlock : public Value {
+    private:
+      std::vector<std::shared_ptr<SALAM::BasicBlock>> predecessors;
+      std::vector<std::shared_ptr<SALAM::Instruction>> instructions;
+    protected:
+      class BasicBlock_Debugger: public Debugger
+        {
+            public:
+                BasicBlock_Debugger();
+                ~BasicBlock_Debugger() = default;
+                virtual void dumper(SALAM::BasicBlock * bb);
+        }; 
+
+       BasicBlock_Debugger* bb_dbg;  
+    public:
+      BasicBlock(uint64_t id, gem5::SimObject * owner, bool dbg);
+      ~BasicBlock();
+      virtual bool isBasicBlock() { return true; }
+      void initialize(llvm::Value * irval, irvmap *vmap, SALAM::valueListTy *valueList);
+      std::vector<std::shared_ptr<SALAM::Instruction> > * Instructions() { return &instructions; }
+      void dump() { if (dbg) bb_dbg->dumper(this); }
+      bool validPredecessor(std::shared_ptr<SALAM::BasicBlock> bb) {
+        auto it = std::find(predecessors.begin(), predecessors.end(), bb);
+        if (it == predecessors.end()) return false;
+        return true;
+      }
+  };
+}
+
+#endif //__SALAM_BASIC_BLOCK_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/debug_flags.cc gem5-SALAM/src/hwacc/LLVMRead/src/debug_flags.cc
--- gem5/src/hwacc/LLVMRead/src/debug_flags.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/debug_flags.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,6 @@
+#include "debug_flags.hh"
+
+SALAM::Debugger::Debugger() {
+      // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+      // if (DTRACE(SALAM_Debug)) this->dbg = true;
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/debug_flags.hh gem5-SALAM/src/hwacc/LLVMRead/src/debug_flags.hh
--- gem5/src/hwacc/LLVMRead/src/debug_flags.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/debug_flags.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,72 @@
+#ifndef LLVMREAD_DEBUG_HH
+#define LLVMREAD_DEBUG_HH
+// License 
+
+//____________________________________________________________________________
+// Doxygen setup
+/**
+ * @defgroup flags Flags group
+ */
+
+//____________________________________________________________________________
+// File description
+/**
+ * @file
+ * Contains include information for all M5 debug flags and base 
+ * implementation of the Debugger class used within gem5-SALAM. 
+ */
+
+//____________________________________________________________________________
+// Global includes
+// - debug_flags.hh is a common header for all files, so all files included
+// - here will available throughout the entire application
+#include "macros.hh"
+
+//____________________________________________________________________________
+// Debug includes
+#include "debug/AddrRanges.hh"
+#include "debug/CommInterface.hh"
+#include "debug/CommInterfaceQueues.hh"
+#include "debug/DeviceMMR.hh"
+#include "debug/DMA.hh"
+#include "debug/LLVMInterface.hh"
+#include "debug/NoncoherentDma.hh"
+#include "debug/LLVMParse.hh"
+#include "debug/Runtime.hh"
+#include "debug/RuntimeCompute.hh"
+#include "debug/RuntimeQueues.hh"
+#include "debug/SALAM_Debug.hh"
+#include "debug/StreamDma.hh"
+#include "debug/Trace.hh"
+#include "debug/Step.hh"
+
+//____________________________________________________________________________
+// M5 includes
+#include "base/trace.hh"
+
+/**
+ * @namespace SALAM
+ */
+namespace SALAM
+{
+
+/**
+ * @class Debugger
+ * Base implementation of the debugger used in gem5-SALAM
+ */
+class Debugger
+{
+    private:
+        bool dbg = false;
+    protected:
+    public:
+        Debugger();
+        ~Debugger() = default;
+        virtual void dumper() { };
+        bool enabled() { return dbg; }
+
+};
+}
+
+//------------------------------------------//
+#endif //__LLVMREAD_DEBUG_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/function.cc gem5-SALAM/src/hwacc/LLVMRead/src/function.cc
--- gem5/src/hwacc/LLVMRead/src/function.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/function.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,47 @@
+#include "function.hh"
+
+using namespace SALAM;
+
+SALAM::Function::Function(uint64_t id, gem5::SimObject * owner, bool dbg) :
+    SALAM::Value(id, owner, dbg) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+}
+
+void
+SALAM::Function::initialize(llvm::Value * irval,
+						   irvmap *vmap,
+						   SALAM::valueListTy *valueList,
+						   std::string topName) {
+    // if (DTRACE(Trace)) DPRINTF(Runtime, "Trace: %s \n", __PRETTY_FUNCTION__);
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize Values - Function::initialize\n");
+    Value::initialize(irval, vmap);
+
+	//Parse irval for function params
+	llvm::Function * func = llvm::dyn_cast<llvm::Function>(irval);
+	assert(func); //panic("Invalid llvm::Value type used to initialize function. Failed cast to llvm::Function.");
+    if (func->getName() == topName) top = true;
+    else top = false;
+	// Fill arguments
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize Function Arguments\n");
+	for (auto arg_iter = func->arg_begin(); arg_iter != func->arg_end(); arg_iter++) {
+        llvm::Argument &arg = *arg_iter;
+        std::shared_ptr<SALAM::Value> argval = vmap->find(&arg)->second;
+        assert(argval);
+        std::shared_ptr<SALAM::Argument> argum = std::dynamic_pointer_cast<SALAM::Argument>(argval);
+        assert(argum);
+        arguments.push_back(argum);
+        argum->initialize(&arg, vmap);
+    }
+
+    // Fill bbList
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize BasicBlocks\n");
+    for (auto bb_iter = func->begin(); bb_iter != func->end(); bb_iter++) {
+        llvm::BasicBlock &bb = *bb_iter;
+        std::shared_ptr<SALAM::Value> bbval = vmap->find(&bb)->second;
+        assert(bbval);
+        std::shared_ptr<SALAM::BasicBlock> bblock = std::dynamic_pointer_cast<SALAM::BasicBlock>(bbval);
+        assert(bblock);
+        bbList.push_back(bblock);
+        bblock->initialize(&bb, vmap, valueList);
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/function.hh gem5-SALAM/src/hwacc/LLVMRead/src/function.hh
--- gem5/src/hwacc/LLVMRead/src/function.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/function.hh	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,32 @@
+#ifndef __SALAM_FUNCTION_HH__
+#define __SALAM_FUNCTION_HH__
+
+#include "value.hh"
+#include "basic_block.hh"
+#include "llvm/IR/Function.h"
+#include "llvm/IR/DataLayout.h"
+
+namespace SALAM {
+	class Function : public Value {
+	private:
+		std::vector<std::shared_ptr<SALAM::BasicBlock>> bbList;
+		std::vector<std::shared_ptr<SALAM::Value>> arguments;
+		bool top;
+		unsigned activeInstances = 0;
+		unsigned instanceLimit = 1;
+	public:
+		Function(uint64_t id, gem5::SimObject * owner, bool dbg);
+		void initialize(llvm::Value * irval, irvmap *vmap, SALAM::valueListTy *valueList, std::string topName);
+		bool isTop() { return top; }
+		void setTop(bool isTop) { top = isTop; }
+		virtual bool isFunction() { return true; }
+		std::vector<std::shared_ptr<SALAM::BasicBlock>> * getBBList() { return &bbList; }
+		std::vector<std::shared_ptr<SALAM::Value>> * getArguments() { return & arguments; }
+		std::shared_ptr<SALAM::BasicBlock> entry() { return bbList.front(); }
+		void addInstance() { activeInstances++; }
+		void removeInstance() { if (activeInstances>0) activeInstances--; }
+		bool canLaunch() { return activeInstances < instanceLimit; }
+	};
+}
+
+#endif //__SALAM_FUNCTION_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/instruction.cc gem5-SALAM/src/hwacc/LLVMRead/src/instruction.cc
--- gem5/src/hwacc/LLVMRead/src/instruction.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/instruction.cc	2024-02-22 18:17:15.116944560 -0600
@@ -0,0 +1,3386 @@
+#include "instruction.hh"
+#include "llvm/IR/GetElementPtrTypeIterator.h"
+#include "llvm/IR/DataLayout.h"
+#include "sim/sim_object.hh"
+
+#include <cmath>
+
+namespace SALAM
+{
+
+//---------------------------------------------------------------------------//
+//--------- Instruction Base Class ------------------------------------------//
+//---------------------------------------------------------------------------//
+
+
+SALAM::Instruction::Instruction(uint64_t id, gem5::SimObject * owner, bool dbg) :
+                         Value(id, owner, dbg)
+{
+    currentCycle = 0;
+}
+
+SALAM::Instruction::Instruction(uint64_t id, gem5::SimObject * owner, bool dbg,
+                         uint64_t OpCode) :
+                         Value(id, owner, dbg),
+                         llvmOpCode(OpCode)
+{
+    currentCycle = 0;
+}
+
+SALAM::Instruction::Instruction(uint64_t id, gem5::SimObject * owner, bool dbg,
+                         uint64_t OpCode,
+                         uint64_t cycles) :
+                         Value(id, owner, dbg),
+                         llvmOpCode(OpCode),
+                         cycleCount(cycles)
+{
+    currentCycle = 0;
+}
+
+SALAM::Instruction::Instruction(uint64_t id, gem5::SimObject * owner, bool dbg,
+                         uint64_t OpCode,
+                         uint64_t cycles,
+                         uint64_t fu) :
+                         Value(id, owner, dbg),
+                         llvmOpCode(OpCode),
+                         cycleCount(cycles),
+                         functional_unit(fu)
+{
+    currentCycle = 0;
+}
+
+SALAM::Instruction::~Instruction()
+{
+}
+
+SALAM::Instruction::Instruction_Debugger::Instruction_Debugger()
+{
+}
+
+void
+SALAM::Instruction::Instruction_Debugger::dumper(Instruction *inst)
+{
+}
+
+void
+SALAM::Instruction::initialize(llvm::Value *irval,
+                         irvmap *irmap,
+                         SALAM::valueListTy *valueList)
+{
+    if (dbg) DPRINTFS(LLVMParse, owner, "Initialize Value - Instruction::initialize\n");
+    SALAM::Value::initialize(irval, irmap);
+    // Fetch the operands of the instruction
+    llvm::User * iruser = llvm::dyn_cast<llvm::User>(irval);
+    llvm::Instruction * inst = llvm::dyn_cast<llvm::Instruction>(irval);
+    assert(iruser);
+    assert(inst);
+    uint64_t phiBB = 0;
+    for (auto const op : iruser->operand_values()) {
+        auto mapit = irmap->find(op);
+        std::shared_ptr<SALAM::Value> opval;
+        if(mapit == irmap->end()) {
+            // TODO: Handle constant data and constant expressions
+            if (dbg) DPRINTFS(LLVMParse, owner, "Instantiate Operand as Constant Data/Expression\n");
+            uint64_t id = valueList->back()->getUID() + 1;
+            std::shared_ptr<SALAM::Constant> con = std::make_shared<SALAM::Constant>(id, owner, dbg);
+            valueList->push_back(con);
+            irmap->insert(SALAM::irvmaptype(op, con));
+            con->initialize(op, irmap, valueList);
+            opval = con;
+        } else {
+            if (dbg) DPRINTFS(LLVMParse, owner, "Instantiate Operands on Value List\n");
+            opval = mapit->second;
+        }
+        if (dbg) DPRINTFS(LLVMParse, owner, "Link Operand to Static Operands List\n");
+        staticDependencies.push_back(opval);
+        if(llvm::isa<llvm::PHINode>(inst)) {
+            if (dbg) DPRINTFS(LLVMParse, owner, "Phi Node Initiated\n");
+            llvm::PHINode * phi = llvm::dyn_cast<llvm::PHINode>(inst);
+            llvm::Value * bb = llvm::dyn_cast<llvm::Value>(phi->getIncomingBlock(phiBB));
+            mapit = irmap->find(bb);
+            opval = mapit->second;
+            staticDependencies.push_back(opval);
+            ++phiBB;
+        } else if(llvm::isa<llvm::CmpInst>(inst)) {
+            if (dbg) DPRINTFS(LLVMParse, owner, "Compare Instruction Initiated\n");
+        }
+    }
+}
+
+void
+SALAM::Instruction::signalUsers()
+{
+    uint64_t count = 0;
+    for (auto user : dynamicUsers) {
+        if (dbg) DPRINTFS(Runtime, owner, "|| User[%i] =============\n", count);
+        user->setOperandValue(uid);
+        count++;
+    }
+    if (dbg) DPRINTFS(Runtime, owner, "||==signalUsers==========\n");
+}
+
+void
+SALAM::Instruction::removeDynamicDependency(uint64_t opuid)
+{
+    auto end = dynamicDependencies.end();
+    auto it = dynamicDependencies.find(opuid);
+    if (it != end) dynamicDependencies.erase(it);
+}
+
+bool
+SALAM::Instruction::ready()
+{
+    if (dbg) DPRINTFS(Runtime, owner, "|| Remaining Dependencies: %i \n", getDependencyCount());
+    if (getDependencyCount() == 0) {
+        isready = true;
+        if (dbg) DPRINTFS(Runtime, owner, "||==Return: %s\n", isready ? "true" : "false");
+        if (dbg) DPRINTFS(Runtime, owner, "||==ready=================\n");
+        return true;
+    } else {
+
+    }
+    if (dbg) DPRINTFS(Runtime, owner, "||==Return: %s\n", isready ? "true" : "false");
+    if (dbg) DPRINTFS(Runtime, owner, "||==ready=================\n");
+    return false;
+}
+
+bool
+SALAM::Instruction::launch()
+{
+    if (hasFunctionalUnit()) {
+        if(!hw_interface->availableFunctionalUnit(getFunctionalUnit())) {
+            return false;
+            std::cout << "Waiting on next available FU\n"; 
+        } else {
+            
+        }
+    }
+    launched = true;
+    if (getCycleCount() == 0) { // Instruction ready to be committed
+        if (dbg) DPRINTFS(Runtime, owner, "||  0 Cycle Instruction\n");
+        compute();
+        commit();
+    } else {
+        currentCycle++;
+        compute();
+    }
+    if (dbg) DPRINTFS(Runtime, owner, "||==Return: %s\n", isCommitted() ? "true" : "false");
+    if (dbg) DPRINTFS(Runtime, owner, "||==launch================\n");
+    return isCommitted();
+}
+
+bool
+SALAM::Instruction::commit()
+{
+    if (dbg) DPRINTFS(Runtime, owner, "||  Current Cycle: %i\n", getCurrentCycle());
+    if (getCurrentCycle() == getCycleCount()) { // Instruction ready to be committed
+        signalUsers();
+        committed = true;
+        if (dbg) DPRINTFS(Runtime, owner, "||==Return: %s\n", committed ? "true" : "false");
+        if (dbg) DPRINTFS(Runtime, owner, "||==commit================\n");
+        //std::cout << "\n\n\nTest 3 - FU[" << getFunctionalUnit() << "]\n\n\n";
+        if (hasFunctionalUnit()) {
+            //std::cout << "\n\n\nTest 2\n\n\n";
+            hw_interface->clearFunctionalUnit(getFunctionalUnit());
+           // hw_interface->functional_units->
+        } else {
+            // 
+        }
+        return true;
+    } else {
+        if (dbg) DPRINTFS(Runtime, owner, "||  Remaining Cycles: %i\n", getCycleCount() - getCurrentCycle());
+        currentCycle++;
+    }
+    if (dbg) DPRINTFS(Runtime, owner, "||==Return: %s\n", committed ? "true" : "false");
+    if (dbg) DPRINTFS(Runtime, owner, "||==commit================\n");
+    return false;
+}
+
+void
+SALAM::Instruction::setOperandValue(uint64_t opuid)
+{
+    uint64_t count = 0;
+    for (auto it = operands.begin(); it != operands.end(); ++it) {
+        auto op = *it;
+        if (op.getUID() == opuid) {
+            if (dbg) DPRINTFS(Runtime, owner, "|| Storing Value in Op[%i]\n", count++);
+            op.updateOperandRegister();
+            //break;
+        } else count++;
+    }
+    removeDynamicDependency(opuid);
+}
+
+void
+SALAM::Instruction::reset() {
+    isready = false;
+    launched = false;
+    committed = false;
+    currentCycle = 0;
+    if (dbg) DPRINTFS(Runtime, owner, "||==reset=================\n");
+}
+
+void
+SALAM::Instruction::linkOperands(const SALAM::Operand &newOp)
+{
+    SALAM::Operand op_copy = newOp;
+    operands.push_back(op_copy);
+}
+
+//std::deque<uint64_t>
+std::vector<uint64_t>
+SALAM::Instruction::runtimeInitialize() {
+    assert(getDependencyCount() == 0);
+    //std::deque<uint64_t> dep_uids;
+    std::vector<uint64_t> dep_uids;
+
+    for (auto it = staticDependencies.begin(); it != staticDependencies.end(); ++it) {
+        std::shared_ptr<SALAM::Value> static_dependency = *it;
+        auto dep_uid = static_dependency->getUID();
+        operands.push_back(SALAM::Operand(static_dependency));
+        if ((static_dependency->isConstant()) || (static_dependency->isArgument())) {
+            operands.back().updateOperandRegister();
+        } else {
+            dep_uids.push_back(dep_uid);
+        }
+    }
+    // dep_uids.push_back(uid);
+
+    return dep_uids;
+}
+
+// SALAM-BadInstruction // --------------------------------------------------//
+
+std::shared_ptr<SALAM::Instruction>
+createBadInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu)
+{
+    return std::make_shared<SALAM::BadInstruction>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+BadInstruction::BadInstruction(uint64_t id, gem5::SimObject * owner, bool dbg,
+                               uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+                               Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+BadInstruction::initialize(llvm::Value * irval,
+                           irvmap * irmap,
+                           SALAM::valueListTy * valueList)
+{
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+}
+
+// SALAM-Ret // -------------------------------------------------------------//
+void // Debugging Interface
+Ret::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createRetInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu)
+{
+    return std::make_shared<SALAM::Ret>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Ret::Ret(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Ret::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList)
+{
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+}
+
+void
+Ret::compute() {
+    // Ret never calls compute. Special handling occurs in the scheduler.
+}
+
+// SALAM-Br // --------------------------------------------------------------//
+void // Debugging Interface
+Br::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createBrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu)
+{
+    return std::make_shared<SALAM::Br>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Br::Br(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+std::shared_ptr<SALAM::BasicBlock>
+Br::getTarget() {
+
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Launching Branch: %s\n", ir_string);
+    if(conditional) {
+    #if USE_LLVM_AP_VALUES
+        if (condition->getIntRegValue().isOneValue()) {
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Condition: TRUE, Fetching target %s\n",
+                trueDestination->getIRStub());
+            return trueDestination;
+        } else {
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Condition: FALSE, Fetching target %s\n",
+                falseDestination->getIRStub());
+            return falseDestination;
+        }
+    #else
+        if(condition->getUIntRegValue() == 1) {
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Condition: TRUE, Fetching target %s\n",
+                trueDestination->getIRStub());
+            return trueDestination;
+        } else {
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Condition: FALSE, Fetching target %s\n",
+                falseDestination->getIRStub());
+            return falseDestination;
+        }
+    #endif
+    }
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Fetching target %s\n", defaultDestination->getIRStub());
+    return defaultDestination;
+}
+
+void
+Br::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList)
+{
+    // SALAM::Instruction::initialize(irval, irmap, valueList); // We don't use the normal init fxn
+    SALAM::Value::initialize(irval, irmap);
+    llvm::BranchInst * br = llvm::dyn_cast<llvm::BranchInst>(irval);
+    assert(br);
+    isConditional(br->isConditional());
+    llvm::Value * defaultDestValue = br->getSuccessor(0);
+    auto mapit = irmap->find(defaultDestValue);
+    if(mapit == irmap->end()) {
+        if (dbg) DPRINTFS(Runtime, owner, "ERROR. Could not find default successor for Br in IR map.");
+        assert(0);
+    } else {
+        defaultDestination = std::dynamic_pointer_cast<SALAM::BasicBlock>(mapit->second);
+    }
+    if (isConditional()) {
+        llvm::Value * condValue = br->getCondition();
+        mapit = irmap->find(condValue);
+        if(mapit == irmap->end()) {
+            if (dbg) DPRINTFS(Runtime, owner, "ERROR. Could not find condition for Br in IR map.");
+            assert(0);
+        } else {
+            condition = mapit->second;
+            staticDependencies.push_back(condition);
+            trueDestination = defaultDestination;
+
+            llvm::Value * falseDestValue = br->getSuccessor(1);
+            mapit = irmap->find(falseDestValue);
+            if(mapit == irmap->end()) {
+                if (dbg) DPRINTFS(Runtime, owner, "ERROR. Could not find secondary successor for Br in IR map.");
+                assert(0);
+            } else {
+                falseDestination = std::dynamic_pointer_cast<SALAM::BasicBlock>(mapit->second);
+            }
+        }
+    }
+}
+
+void
+Br::compute()
+{
+    // Br does not use compute. Special handling occurs in the scheduler.
+}
+
+// SALAM-Switch // ----------------------------------------------------------//
+void // Debugging Interface
+Switch::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSwitchInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu)
+{
+    return std::make_shared<SALAM::Switch>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Switch::Switch(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+std::shared_ptr<SALAM::BasicBlock>
+Switch::getTarget() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Launching Switch: %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    auto opdata = (operands.front().getIntRegValue());
+
+    for (auto it = cases.begin(); it != cases.end(); ++it) {
+        if (it->first->getIntRegValue().eq(opdata)){
+            return it->second;
+        }
+    }
+    return defaultDestination;
+#else
+    auto opdata = operands.front().getSIntRegValue();
+
+    for (auto it = cases.begin(); it != cases.end(); ++it) {
+        if (it->first->getSIntRegValue() == opdata){
+            return it->second;
+        }
+    }
+    return defaultDestination;
+#endif
+}
+
+void
+Switch::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList)
+{
+    // SALAM::Instruction::initialize(irval, irmap, valueList);
+    SALAM::Value::initialize(irval, irmap);
+
+    llvm::User * iruser = llvm::dyn_cast<llvm::User>(irval);
+    llvm::Instruction * inst = llvm::dyn_cast<llvm::Instruction>(irval);
+    assert(iruser);
+    assert(inst);
+
+    SALAM::valueListTy tmpStaticDeps;
+    for (auto const op : iruser->operand_values()) {
+        auto mapit = irmap->find(op);
+        std::shared_ptr<SALAM::Value> opval;
+        if(mapit == irmap->end()) {
+            // TODO: Handle constant data and constant expressions
+            if (dbg) DPRINTFS(LLVMParse, owner, "Instantiate Operand as Constant Data/Expression\n");
+            uint64_t id = valueList->back()->getUID() + 1;
+            std::shared_ptr<SALAM::Constant> con = std::make_shared<SALAM::Constant>(id, owner, dbg);
+            valueList->push_back(con);
+            irmap->insert(SALAM::irvmaptype(op, con));
+            con->initialize(op, irmap, valueList);
+            opval = con;
+        } else {
+            if (dbg) DPRINTFS(LLVMParse, owner, "Instantiate Operands on Value List\n");
+            opval = mapit->second;
+        }
+        if (dbg) DPRINTFS(LLVMParse, owner, "Link Operand to Static Operands List\n");
+        tmpStaticDeps.push_back(opval);
+    }
+
+    llvm::SwitchInst * switchInst = llvm::dyn_cast<llvm::SwitchInst>(irval);
+    assert(switchInst);
+    caseArgs newArgs;
+    for (int i = 2; i < tmpStaticDeps.size();) {
+        newArgs.first = tmpStaticDeps.at(i); ++i;
+        newArgs.second = std::dynamic_pointer_cast<SALAM::BasicBlock>(tmpStaticDeps.at(i)); ++i;
+        this->cases.push_back(newArgs);
+    }
+
+    staticDependencies.push_back(tmpStaticDeps.front());
+    defaultDestination = std::dynamic_pointer_cast<SALAM::BasicBlock>(tmpStaticDeps.at(1));
+}
+
+// std::shared_ptr<SALAM::Value>
+// Switch::destination(int switchVar)
+// {
+//   
+//     for (int i = 2; i < this->arguments.size(); ++i) {
+//     #if USE_LLVM_AP_VALUES
+//         if (this->arguments.at(i).first->getReg()->getIntData()->getSExtValue() == switchVar) return this->arguments.at(i).second;
+//     #else
+//         if (this->arguments.at(i).first->getSIntRegValue() == switchVar) return this->arguments.at(i).second;
+//     #endif
+//     }
+//     return this->defaultDest();
+// }
+
+
+void
+Switch::compute() {
+    // Perform computations
+    // Store results in temp location
+}
+
+// SALAM-Add // -------------------------------------------------------------//
+void // Debugging Interface
+Add::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createAddInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu)
+{
+    return std::make_shared<SALAM::Add>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Add::Add(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Add::initialize(llvm::Value *irval,
+                SALAM::irvmap *irmap,
+                SALAM::valueListTy *valueList)
+{
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+}
+
+void
+Add::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 + op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s + (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 + op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d + (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-FAdd // ------------------------------------------------------------//
+void // Debugging Interface
+FAdd::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFAddInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FAdd>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FAdd::FAdd(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FAdd::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+}
+
+void
+FAdd::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat op1 = (operands.at(0).getFloatRegValue());
+    llvm::APFloat op2 = (operands.at(1).getFloatRegValue());
+    llvm::APFloat result = op1 + op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toString(op1str);
+    op2.toString(op2str);
+    result.toString(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s + (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    uint64_t bitcastResult;
+    switch(size) {
+        case 32:
+        {
+            float op1 = operands.at(0).getFloatFromReg();
+            float op2 = operands.at(1).getFloatFromReg();
+            float result = op1 + op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f + (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        case 64:
+        {
+            double op1 = operands.at(0).getDoubleFromReg();
+            double op2 = operands.at(1).getDoubleFromReg();
+            double result = op1 + op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f + (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        default:
+        {
+            assert(0 && "Unsupported floating point type." &&
+                   "Compile with AP values enabled for extended FP support.");
+        }
+    }
+    setRegisterValue(bitcastResult);
+#endif
+}
+
+// SALAM-Sub // -------------------------------------------------------------//
+void // Debugging Interface
+Sub::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSubInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Sub>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Sub::Sub(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Sub::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Sub::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 - op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s - (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 - op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d - (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-FSub // -------------------------------------------------------------//
+void // Debugging Interface
+FSub::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFSubInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FSub>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FSub::FSub(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FSub::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FSub::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat op1 = (operands.at(0).getFloatRegValue());
+    llvm::APFloat op2 = (operands.at(1).getFloatRegValue());
+    llvm::APFloat result = op1 - op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toString(op1str);
+    op2.toString(op2str);
+    result.toString(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s - (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    uint64_t bitcastResult;
+    switch(size) {
+        case 32:
+        {
+            float op1 = operands.at(0).getFloatFromReg();
+            float op2 = operands.at(1).getFloatFromReg();
+            float result = op1 - op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f - (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        case 64:
+        {
+            double op1 = operands.at(0).getDoubleFromReg();
+            double op2 = operands.at(1).getDoubleFromReg();
+            double result = op1 - op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f - (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        default:
+        {
+            assert(0 && "Unsupported floating point type." &&
+                   "Compile with AP values enabled for extended FP support.");
+        }
+    }
+    setRegisterValue(bitcastResult);
+#endif
+}
+
+// SALAM-Mul // -------------------------------------------------------------//
+void // Debugging Interface
+Mul::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createMulInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Mul>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Mul::Mul(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Mul::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Mul::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 * op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s * (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 * op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d * (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-FMul // ------------------------------------------------------------//
+void // Debugging Interface
+FMul::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFMulInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FMul>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FMul::FMul(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FMul::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FMul::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat op1 = (operands.at(0).getFloatRegValue());
+    llvm::APFloat op2 = (operands.at(1).getFloatRegValue());
+    llvm::APFloat result = op1 * op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toString(op1str);
+    op2.toString(op2str);
+    result.toString(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s * (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    uint64_t bitcastResult;
+    switch(size) {
+        case 32:
+        {
+            float op1 = operands.at(0).getFloatFromReg();
+            float op2 = operands.at(1).getFloatFromReg();
+            float result = op1 * op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f * (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        case 64:
+        {
+            double op1 = operands.at(0).getDoubleFromReg();
+            double op2 = operands.at(1).getDoubleFromReg();
+            double result = op1 * op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f * (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        default:
+        {
+            assert(0 && "Unsupported floating point type." &&
+                   "Compile with AP values enabled for extended FP support.");
+        }
+    }
+    setRegisterValue(bitcastResult);
+#endif
+}
+
+// SALAM-UDiv // ------------------------------------------------------------//
+void // Debugging Interface
+UDiv::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createUDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::UDiv>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+UDiv::UDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+UDiv::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+UDiv::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.udiv(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s / (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 / op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d / (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-SDiv // ------------------------------------------------------------//
+void // Debugging Interface
+SDiv::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::SDiv>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+SDiv::SDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+SDiv::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+SDiv::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.sdiv(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringSigned(op1str);
+    op2.toStringSigned(op2str);
+    result.toStringSigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s / (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    int64_t op1 = operands.at(0).getSIntRegValue();
+    int64_t op2 = operands.at(1).getSIntRegValue();
+    int64_t result = op1 / op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d / (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+    setRegisterValue((uint64_t)result);
+#endif
+}
+
+// SALAM-FDiv // ------------------------------------------------------------//
+void // Debugging Interface
+FDiv::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FDiv>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FDiv::FDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FDiv::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FDiv::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat op1 = (operands.at(0).getFloatRegValue());
+    llvm::APFloat op2 = (operands.at(1).getFloatRegValue());
+    llvm::APFloat result = op1 / op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toString(op1str);
+    op2.toString(op2str);
+    result.toString(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s / (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    uint64_t bitcastResult;
+    switch(size) {
+        case 32:
+        {
+            float op1 = operands.at(0).getFloatFromReg();
+            float op2 = operands.at(1).getFloatFromReg();
+            float result = op1 / op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f / (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        case 64:
+        {
+            double op1 = operands.at(0).getDoubleFromReg();
+            double op2 = operands.at(1).getDoubleFromReg();
+            double result = op1 / op2;
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f / (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        default:
+        {
+            assert(0 && "Unsupported floating point type." &&
+                   "Compile with AP values enabled for extended FP support.");
+        }
+    }
+    setRegisterValue(bitcastResult);
+#endif
+}
+
+// SALAM-URem // ------------------------------------------------------------//
+void // Debugging Interface
+URem::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createURemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::URem>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+URem::URem(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+URem::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+URem::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.urem(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s % (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 % op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d % (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-SRem // ------------------------------------------------------------//
+void // Debugging Interface
+SRem::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSRemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::SRem>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+SRem::SRem(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+SRem::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+SRem::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.srem(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringSigned(op1str);
+    op2.toStringSigned(op2str);
+    result.toStringSigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s % (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    int64_t op1 = operands.at(0).getSIntRegValue();
+    int64_t op2 = operands.at(1).getSIntRegValue();
+    int64_t result = op1 % op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d % (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+    setRegisterValue((uint64_t)result);
+#endif
+}
+
+// SALAM-FRem // ------------------------------------------------------------//
+void // Debugging Interface
+FRem::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFRemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FRem>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FRem::FRem(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FRem::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FRem::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat op1 = (operands.at(0).getFloatRegValue());
+    llvm::APFloat op2 = (operands.at(1).getFloatRegValue());
+    llvm::APFloat result = op1;
+    auto err = result.remainder(op2);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toString(op1str);
+    op2.toString(op2str);
+    result.toString(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s % (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    uint64_t bitcastResult;
+    switch(size) {
+        case 32:
+        {
+            float op1 = operands.at(0).getFloatFromReg();
+            float op2 = operands.at(1).getFloatFromReg();
+            float result = std::remainderf(op1, op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f % (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        case 64:
+        {
+            double op1 = operands.at(0).getDoubleFromReg();
+            double op2 = operands.at(1).getDoubleFromReg();
+            double result = std::remainder(op1, op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %f % (%s) %f\n",
+                operands.at(0).getIRStub(), op1,
+                operands.at(1).getIRStub(), op2);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %f\n", ir_stub, result);
+            bitcastResult = *(uint64_t *)&result;
+            break;
+        }
+        default:
+        {
+            assert(0 && "Unsupported floating point type." &&
+                   "Compile with AP values enabled for extended FP support.");
+        }
+    }
+    setRegisterValue(bitcastResult);
+#endif
+}
+
+// SALAM-Shl // -------------------------------------------------------------//
+void // Debugging Interface
+Shl::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createShlInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Shl>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Shl::Shl(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Shl::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Shl::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 << op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s << (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 << op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d << (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-LShr // ------------------------------------------------------------//
+void // Debugging Interface
+LShr::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createLShrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::LShr>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+LShr::LShr(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+LShr::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+LShr::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.lshr(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s >> (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 >> op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d >> (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-AShr // ------------------------------------------------------------//
+void // Debugging Interface
+AShr::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createAShrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::AShr>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+AShr::AShr(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+AShr::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+AShr::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1.ashr(op2);
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringSigned(op1str);
+    op2.toStringSigned(op2str);
+    result.toStringSigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s >> (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    int64_t op1 = operands.at(0).getSIntRegValue();
+    int64_t op2 = operands.at(1).getSIntRegValue();
+    int64_t result = op1 >> op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d >> (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+    setRegisterValue((uint64_t)result);
+#endif
+}
+
+// SALAM-And // -------------------------------------------------------------//
+void // Debugging Interface
+And::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createAndInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::And>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+And::And(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+And::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+And::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 & op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s & (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 & op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d & (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-Or // --------------------------------------------------------------//
+void // Debugging Interface
+Or::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createOrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Or>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Or::Or(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Or::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Or::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 | op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s | (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 | op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d | (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-Xor // -------------------------------------------------------------//
+void // Debugging Interface
+Xor::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createXorInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Xor>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Xor::Xor(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Xor::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Xor::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt op1 = (operands.at(0).getIntRegValue());
+    llvm::APInt op2 = (operands.at(1).getIntRegValue());
+    llvm::APInt result = op1 ^ op2;
+    llvm::SmallString<8> op1str;
+    llvm::SmallString<8> op2str;
+    llvm::SmallString<8> resstr;
+    op1.toStringUnsigned(op1str);
+    op2.toStringUnsigned(op2str);
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %s ^ (%s) %s \n",
+        operands.at(0).getIRStub(), op1str.c_str(),
+        operands.at(1).getIRStub(), op2str.c_str());
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    uint64_t op1 = operands.at(0).getUIntRegValue();
+    uint64_t op2 = operands.at(1).getUIntRegValue();
+    uint64_t result = op1 ^ op2;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| (%s) %d ^ (%s) %d\n",
+        operands.at(0).getIRStub(), op1,
+        operands.at(1).getIRStub(), op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-Load // ------------------------------------------------------------//
+void // Debugging Interface
+Load::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createLoadInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Load>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Load::Load(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Load::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+    llvm::LoadInst * inst = llvm::dyn_cast<llvm::LoadInst>(irval);
+    this->align = inst->getAlignment();
+    if (staticDependencies.front()->isGlobalConstant()) loadingInternal = true;
+}
+
+void
+Load::compute() {
+    // Load does not use compute normally. Special handling is used in the scheduler.
+    // We instead use compute just for debug printout
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, registerDataString());
+}
+
+void
+Load::loadInternal() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Launching %s\n", ir_string);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Loading internal value from %s\n",
+        operands.front().getIRString());
+    setRegisterValue(operands.front().getOpRegister());
+    commit();
+}
+
+MemoryRequest *
+Load::createMemoryRequest() {
+    Addr memAddr = (operands.front().getPtrRegValue());
+    size_t reqLen = getSizeInBytes();
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Launching %s\n", ir_string);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Addr[%x] Size[%i]\n", memAddr, reqLen);
+    return new MemoryRequest(memAddr, reqLen);
+}
+
+// SALAM-Store // -----------------------------------------------------------//
+void // Debugging Interface
+Store::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createStoreInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Store>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Store::Store(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Store::initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+    llvm::StoreInst * inst = llvm::dyn_cast<llvm::StoreInst>(irval);
+    this->align = inst->getAlignment();
+}
+
+void
+Store::compute() {
+    // Store does not use compute. Special handling is used in the scheduler.
+}
+
+MemoryRequest *
+Store::createMemoryRequest() {
+    Addr memAddr = (operands.at(1).getPtrRegValue());
+    size_t reqLen = operands.at(0).getSizeInBytes();
+
+    MemoryRequest * req;
+
+    auto dataRegister = operands.at(0).getOpRegister();
+    // Copy data from the register
+    if (dataRegister->isPtr()) {
+        uint64_t regData = dataRegister->getPtrData();
+        req = new MemoryRequest(memAddr, (uint8_t *)&regData, reqLen);
+    } else {
+    #if USE_LLVM_AP_VALUES
+        llvm::APInt regAPData;
+        if (dataRegister->isInt()) {
+            regAPData = (dataRegister->getIntData());
+        } else {
+            regAPData = dataRegister->getFloatData().bitcastToAPInt();
+        }
+        req = new MemoryRequest(memAddr, regAPData.getRawData(), reqLen);
+    #else
+        uint64_t regData;
+        if (dataRegister->isInt()) {
+            regData = dataRegister->getIntData();
+        } else {
+            regData = dataRegister->getFloatData();
+        }
+        req = new MemoryRequest(memAddr, (uint8_t *)&regData, reqLen);
+    #endif
+        if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Launching %s\n", ir_string);
+        if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Addr[%x] Size[%i]\n", memAddr, reqLen);
+    }
+
+    return req;
+}
+
+// SALAM-GEP // -------------------------------------------------------------//
+void // Debugging Interface
+GetElementPtr::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createGetElementPtrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::GetElementPtr>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+GetElementPtr::GetElementPtr(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+GetElementPtr::initialize(llvm::Value * irval,
+                            irvmap * irmap,
+                            SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+    llvm::User * iruser = llvm::dyn_cast<llvm::User>(irval);
+    assert(iruser);
+    llvm::GetElementPtrInst * GEP = llvm::dyn_cast<llvm::GetElementPtrInst>(irval);
+    assert(GEP);
+    resultElementType = GEP->getResultElementType();
+    llvm::DataLayout layout(GEP->getModule());
+
+    if (resultElementType->getTypeID() == llvm::Type::PointerTyID) {
+        resultElementSize = 64; //We assume a 64-bit memory address space
+    } else {
+        resultElementSize = resultElementType->getScalarSizeInBits();
+    }
+    resultElementSizeInBytes = ((resultElementSize - 1) >> 3) + 1;
+
+    llvm::Type * ElemTy = GEP->getSourceElementType();
+    auto it = iruser->operand_values().begin();
+    it++;
+    std::vector<llvm::Value *> indexValues;
+    for ( ; it != iruser->operand_values().end(); it++) {
+        indexValues.push_back(*it);
+    }
+    llvm::ArrayRef<llvm::Value *> Indices = llvm::ArrayRef<llvm::Value *>(indexValues);
+    llvm::generic_gep_type_iterator<llvm::Value* const*>
+        GTI = gep_type_begin(ElemTy, Indices),
+        GTE = gep_type_end(ElemTy, Indices);
+    for ( ; GTI != GTE; ++GTI) {
+        llvm::Value *idx = GTI.getOperand();
+        auto SALAMValue = irmap->find(idx)->second;
+        // auto valueID = SALAMValue->getUID();
+        if (llvm::StructType *STy = GTI.getStructTypeOrNull()) {
+            assert(idx->getType()->isIntegerTy(32) && "Illegal struct idx");
+            unsigned FieldNo = llvm::cast<llvm::ConstantInt>(idx)->getSExtValue();
+            const llvm::StructLayout *Layout = layout.getStructLayout(STy);
+            offsets.push_back(Layout->getElementOffset(FieldNo));
+            offsetOfStruct.push_back(true);
+            
+        } else {
+            llvm::Type * idxty = GTI.getIndexedType();
+            offsets.push_back(1 * layout.getTypeAllocSize(idxty));
+            offsetOfStruct.push_back(false);
+        }
+    }
+}
+
+void
+GetElementPtr::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+    uint64_t ptr = (operands.front().getPtrRegValue());
+    int64_t offset = 0;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Index Values\n");
+    for (int i = 1; i < operands.size(); i++) {
+        auto idx = operands.at(i);
+        if (offsetOfStruct.at(i-1)) {
+            offset += offsets.at(i-1);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s, struct offset = %d\n", idx.getIRStub(), offsets.at(i-1));
+        } else {
+        #if USE_LLVM_AP_VALUES
+            int64_t arrayIdx = idx.getIntRegValue().getSExtValue();
+        #else
+            int64_t arrayIdx = idx.getSIntRegValue();
+        #endif
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d, dimension offset = %d\n", idx.getIRStub(), arrayIdx, offsets.at(i-1));
+            offset += arrayIdx * offsets.at(i-1);
+        }
+    }
+
+    uint64_t result = ptr + offset;
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Ptr[%x]  Offset[%x] (Flat Idx[%d])\n", ptr, offset, offset/resultElementSizeInBytes);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Result: Addr[%x]\n", result);
+    setRegisterValue(result);
+}
+
+// SALAM-Trunc // -----------------------------------------------------------//
+void // Debugging Interface
+Trunc::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createTruncInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Trunc>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Trunc::Trunc(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Trunc::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+Trunc::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt result = operands.at(0).getIntRegValue().trunc(size);
+    llvm::SmallString<8> resstr;
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    // The trunc is handled automatically when we set the return register
+    uint64_t result = operands.at(0).getUIntRegValue();
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-ZExt // ------------------------------------------------------------//
+void // Debugging Interface
+ZExt::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createZExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::ZExt>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+ZExt::ZExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+ZExt::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+ZExt::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt result = operands.at(0).getIntRegValue().zext(size);
+    llvm::SmallString<8> resstr;
+    result.toStringUnsigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+#else
+    // Unsigned data doesn't need any modification when ZExtending
+    uint64_t result = operands.at(0).getUIntRegValue();
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+#endif
+    setRegisterValue(result);
+}
+
+// SALAM-SExt // ------------------------------------------------------------//
+void // Debugging Interface
+SExt::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::SExt>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+SExt::SExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+SExt::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+SExt::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+#if USE_LLVM_AP_VALUES
+    llvm::APInt result = operands.at(0).getIntRegValue().sext(size);
+    llvm::SmallString<8> resstr;
+    result.toStringSigned(resstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, resstr.c_str());
+    setRegisterValue(result);
+#else
+    int64_t result = operands.at(0).getSIntRegValue();
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, result);
+    setRegisterValue((uint64_t)result);
+#endif
+}
+
+// SALAM-FPToUI // ----------------------------------------------------------//
+void // Debugging Interface
+FPToUI::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFPToUIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FPToUI>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FPToUI::FPToUI(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FPToUI::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FPToUI::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    llvm::APSInt tmp(size, true);
+    bool exact;
+    auto opdata = operands.front().getFloatRegValue();
+    auto err = opdata.convertToInteger(tmp,
+                                      rounding,
+                                      &exact);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+    llvm::SmallString<8> tmpstr;
+    tmp.toString(tmpstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, tmpstr.c_str());
+#else
+    switch (operands.front().getSize()) {
+        case 32:
+        {
+            float opdata = operands.front().getFloatFromReg();
+            setRegisterValue((uint64_t)opdata);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Result: %u\n", (uint64_t)opdata);
+            break;
+        }
+        case 64:
+        {
+            double opdata = operands.front().getDoubleFromReg();
+            setRegisterValue((uint64_t)opdata);
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Result: %u\n", (uint64_t)opdata);
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+            break;
+        }
+    }
+#endif
+}
+
+// SALAM-FPToSI // ----------------------------------------------------------//
+void // Debugging Interface
+FPToSI::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFPToSIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FPToSI>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FPToSI::FPToSI(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FPToSI::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FPToSI::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    llvm::APSInt tmp(size, false);
+    bool exact;
+    auto opdata = operands.front().getFloatRegValue();
+    auto err = opdata.convertToInteger(tmp,
+                                      rounding,
+                                      &exact);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+    llvm::SmallString<8> tmpstr;
+    tmp.toString(tmpstr);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, tmpstr.c_str());
+#else
+    switch (operands.front().getSize()) {
+        case 32:
+        {
+            float opdata = operands.front().getFloatFromReg();
+            int64_t tmp = (int64_t)opdata; // Truncate to integer
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, tmp);
+            setRegisterValue((uint64_t)tmp);
+            break;
+        }
+        case 64:
+        {
+            double opdata = operands.front().getDoubleFromReg();
+            int64_t tmp = (int64_t)opdata; // Truncate to integer
+            if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %d\n", ir_stub, tmp);
+            setRegisterValue((uint64_t)tmp);
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+            break;
+        }
+    }
+#endif
+}
+
+// SALAM-UIToFP // ----------------------------------------------------------//
+void // Debugging Interface
+UIToFP::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createUIToFPInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::UIToFP>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+UIToFP::UIToFP(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+UIToFP::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+UIToFP::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    auto opdata = operands.front().getIntRegValue();
+    llvm::APFloat tmp(irtype->getFltSemantics());
+    auto err = tmp.convertFromAPInt(opdata, false, rounding);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+#else
+    auto opdata = operands.front().getUIntRegValue();
+    switch (size) {
+        case 32:
+        {
+            float tmp = (float)opdata; // Cast to float
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        case 64:
+        {
+            double tmp = (double)opdata; // Cast to double
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+            break;
+        }
+    }
+#endif
+}
+
+// SALAM-SIToFP // ----------------------------------------------------------//
+void // Debugging Interface
+SIToFP::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSIToFPInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::SIToFP>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+SIToFP::SIToFP(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+SIToFP::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+SIToFP::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    auto opdata = operands.front().getIntRegValue();
+    llvm::APFloat tmp(irtype->getFltSemantics());
+    auto err = tmp.convertFromAPInt(opdata, false, rounding);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+#else
+    auto opdata = operands.front().getSIntRegValue();
+    switch (size) {
+        case 32:
+        {
+            float tmp = (float)opdata; // Cast to float
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        case 64:
+        {
+            double tmp = (double)opdata; // Cast to double
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+            break;
+        }
+    }
+#endif
+}
+
+// SALAM-FPTrunc // ---------------------------------------------------------//
+void // Debugging Interface
+FPTrunc::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFPTruncInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FPTrunc>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FPTrunc::FPTrunc(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FPTrunc::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FPTrunc::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    auto opdata = operands.front().getFloatRegValue();
+    llvm::APFloat tmp(opdata);
+    bool losesInfo;
+    auto err = tmp.convert(irtype->getFltSemantics(), rounding, &losesInfo);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+#else
+    switch (operands.front().getSize()) {
+        case 64:
+        {
+            double opdata = operands.front().getDoubleFromReg();
+            float tmp = (float)opdata; // Cast to float
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+        }
+    }
+#endif
+}
+
+// SALAM-FPExt // -----------------------------------------------------------//
+void // Debugging Interface
+FPExt::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFPExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FPExt>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FPExt::FPExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FPExt::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+FPExt::compute() {
+#if USE_LLVM_AP_VALUES
+    #if (LLVM_VERSION_MAJOR <= 9)
+        auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+    #else
+        auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+    #endif
+    auto opdata = operands.front().getFloatRegValue();
+    llvm::APFloat tmp(opdata);
+    bool losesInfo;
+    auto err = tmp.convert(irtype->getFltSemantics(), rounding, &losesInfo);
+    assert(err == llvm::APFloatBase::opStatus::opOK);
+    setRegisterValue(tmp);
+#else
+    switch (operands.front().getSize()) {
+        case 32:
+        {
+            float opdata = operands.front().getFloatFromReg();
+            double tmp = (double)opdata; // Cast to double
+            setRegisterValue(*(uint64_t *)&tmp); // Bitcast for writeback to reg
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+        }
+    }
+#endif
+}
+
+// SALAM-PtrToInt // --------------------------------------------------------//
+void // Debugging Interface
+PtrToInt::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createPtrToIntInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::PtrToInt>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+PtrToInt::PtrToInt(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+PtrToInt::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+PtrToInt::compute() {
+    auto opdata = operands.front().getPtrRegValue();
+#if USE_LLVM_AP_VALUES
+    setRegisterValue(llvm::APInt(64, opdata));
+#else
+    setRegisterValue(opdata);
+#endif
+}
+
+// SALAM-IntToPtr // --------------------------------------------------------//
+void // Debugging Interface
+IntToPtr::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createIntToPtrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::IntToPtr>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+IntToPtr::IntToPtr(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+IntToPtr::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+IntToPtr::compute() {
+#if USE_LLVM_AP_VALUES
+    auto opdata = operands.front().getIntRegValue();
+    assert(opdata.isUnsigned());
+    int64_t tmp = opdata.getExtValue();
+    setRegisterValue(*(uint64_t *)&tmp);
+#else
+    auto opdata = operands.front().getUIntRegValue();
+    setRegisterValue(opdata);
+#endif
+}
+
+// SALAM-BitCast // --------------------------------------------------------//
+void // Debugging Interface
+BitCast::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createBitCastInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::BitCast>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+BitCast::BitCast(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+BitCast::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+}
+
+void
+BitCast::compute() {
+#if USE_LLVM_AP_VALUES
+    auto opdata = operands.front().getPtrRegValue();
+    setRegisterValue(opdata);
+#else
+    auto opdata = operands.front().getPtrRegValue();
+    setRegisterValue(opdata);
+#endif
+}
+
+// SALAM-ICmp // ------------------------------------------------------------//
+void // Debugging Interface
+ICmp::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createICmpInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::ICmp>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+ICmp::ICmp(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+ICmp::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+    llvm::CmpInst * inst = llvm::dyn_cast<llvm::CmpInst>(irval);
+    this->predicate = inst->getPredicate();
+    if (dbg) DPRINTFS(SALAM_Debug, owner, "Integer Comparison Predicate [%i | %s]\n", this->predicate, inst->getPredicateName(inst->getPredicate()).str());
+
+}
+
+void
+ICmp::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+    bool result = false;
+#if USE_LLVM_AP_VALUES
+    if (operands.at(0).hasIntVal() && operands.at(1).hasIntVal()){
+        switch (predicate) {
+            case SALAM::Predicate::ICMP_EQ: { result = operands.at(0).getIntRegValue().eq((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_NE: { result = operands.at(0).getIntRegValue().ne((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_UGT: { result = operands.at(0).getIntRegValue().ugt((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_UGE: { result = operands.at(0).getIntRegValue().uge((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_ULT: { result = operands.at(0).getIntRegValue().ult((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_ULE: { result = operands.at(0).getIntRegValue().ule((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_SGT: { result = operands.at(0).getIntRegValue().sgt((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_SGE: { result = operands.at(0).getIntRegValue().sge((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_SLT: { result = operands.at(0).getIntRegValue().slt((operands.at(1).getIntRegValue())); break; }
+            case SALAM::Predicate::ICMP_SLE: { result = operands.at(0).getIntRegValue().sle((operands.at(1).getIntRegValue())); break; }
+            default: break;
+        }
+    } else if (operands.at(0).hasPtrVal() && operands.at(1).hasPtrVal()) {
+        switch (predicate) {
+            case SALAM::Predicate::ICMP_EQ: { result = operands.at(0).getPtrRegValue() == operands.at(1).getPtrRegValue(); break; }
+            case SALAM::Predicate::ICMP_NE: { result = operands.at(0).getPtrRegValue() != operands.at(1).getPtrRegValue(); break; }
+            case SALAM::Predicate::ICMP_UGT: { result = operands.at(0).getPtrRegValue() > operands.at(1).getPtrRegValue(); break; }
+            case SALAM::Predicate::ICMP_UGE: { result = operands.at(0).getPtrRegValue() >= operands.at(1).getPtrRegValue(); break; }
+            case SALAM::Predicate::ICMP_ULT: { result = operands.at(0).getPtrRegValue() < operands.at(1).getPtrRegValue(); break; }
+            case SALAM::Predicate::ICMP_ULE: { result = operands.at(0).getPtrRegValue() <= operands.at(1).getPtrRegValue(); break; }
+            default: break;
+         }
+    } else {
+        panic("Got either wrong or differing datatypes for ICMP");
+    }
+#else
+    if (operands.at(0).hasIntVal() && operands.at(1).hasIntVal()){
+        uint64_t uOp1 = operands.at(0).getUIntRegValue();
+        uint64_t uOp2 = operands.at(1).getUIntRegValue();
+        int64_t  sOp1 = operands.at(0).getSIntRegValue();
+        int64_t  sOp2 = operands.at(1).getSIntRegValue();
+
+        switch (predicate) {
+            case SALAM::Predicate::ICMP_EQ: { result = (uOp1 == uOp2); break; }
+            case SALAM::Predicate::ICMP_NE: { result = (uOp1 != uOp2); break; }
+            case SALAM::Predicate::ICMP_UGT: { result = (uOp1 > uOp2); break; }
+            case SALAM::Predicate::ICMP_UGE: { result = (uOp1 >= uOp2); break; }
+            case SALAM::Predicate::ICMP_ULT: { result = (uOp1 < uOp2); break; }
+            case SALAM::Predicate::ICMP_ULE: { result = (uOp1 <= uOp2); break; }
+            case SALAM::Predicate::ICMP_SGT: { result = (sOp1 > sOp2); break; }
+            case SALAM::Predicate::ICMP_SGE: { result = (sOp1 >= sOp2); break; }
+            case SALAM::Predicate::ICMP_SLT: { result = (sOp1 < sOp2); break; }
+            case SALAM::Predicate::ICMP_SLE: { result = (sOp1 <= sOp2); break; }
+            default: break;
+        }
+    } else if (operands.at(0).hasPtrVal() && operands.at(1).hasPtrVal()) {
+        uint64_t uOp1 = operands.at(0).getPtrRegValue();
+        uint64_t uOp2 = operands.at(1).getPtrRegValue();
+        switch (predicate) {
+            case SALAM::Predicate::ICMP_EQ: { result = (uOp1 == uOp2); break; }
+            case SALAM::Predicate::ICMP_NE: { result = (uOp1 != uOp2); break; }
+            case SALAM::Predicate::ICMP_UGT: { result = (uOp1 > uOp2); break; }
+            case SALAM::Predicate::ICMP_UGE: { result = (uOp1 >= uOp2); break; }
+            case SALAM::Predicate::ICMP_ULT: { result = (uOp1 < uOp2); break; }
+            case SALAM::Predicate::ICMP_ULE: { result = (uOp1 <= uOp2); break; }
+            default: break;
+        }
+    } else {
+        panic("Got either wrong or differing datatypes for ICMP");
+    }
+#endif
+    setRegisterValue(result);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, result ? "TRUE" : "FALSE");
+}
+
+// SALAM-FCmp // ------------------------------------------------------------//
+void // Debugging Interface
+FCmp::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createFCmpInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::FCmp>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+FCmp::FCmp(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+FCmp::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    // ****** //
+    llvm::CmpInst * inst = llvm::dyn_cast<llvm::CmpInst>(irval);
+    this->predicate = inst->getPredicate();
+    if (dbg) DPRINTFS(SALAM_Debug, owner, "Floating-Point Comparison Predicate [%i | %s]\n", this->predicate, inst->getPredicateName(inst->getPredicate()).str());
+
+}
+
+void
+FCmp::compute() {
+    // Perform computations
+    // Store results in temp location
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+    bool result = false;
+#if USE_LLVM_AP_VALUES
+    auto op1 = operands.at(0).getFloatRegValue();
+    auto op2 = operands.at(1).getFloatRegValue();
+    auto cmp = op1.compare(op2);
+    switch(predicate)
+    {
+        case SALAM::Predicate::FCMP_FALSE: {
+            result = false;
+            break;
+        }
+        case SALAM::Predicate::FCMP_OEQ:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpEqual);
+            break;
+        }
+        case SALAM::Predicate::FCMP_OGT:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpGreaterThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_OGE:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpEqual) || 
+                          (cmp == llvm::APFloatBase::cmpResult::cmpGreaterThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_OLT:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpLessThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_OLE:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpEqual) || 
+                          (cmp == llvm::APFloatBase::cmpResult::cmpLessThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_ONE:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) && 
+                          (cmp != llvm::APFloatBase::cmpResult::cmpEqual);
+            break;
+        }
+        case SALAM::Predicate::FCMP_ORD:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UNO:   {
+            result = (cmp == llvm::APFloatBase::cmpResult::cmpUnordered);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UEQ:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpEqual);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UGT:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpGreaterThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UGE:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpEqual) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpGreaterThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_ULT:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpLessThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_ULE:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpUnordered) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpEqual) ||
+                          (cmp == llvm::APFloatBase::cmpResult::cmpLessThan);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UNE:   {
+            result = (cmp != llvm::APFloatBase::cmpResult::cmpEqual);
+            break;
+        }
+        case SALAM::Predicate::FCMP_TRUE:  {
+            result = true;
+            break;
+        }
+    }
+#else
+    double op1, op2;
+    switch (operands.front().getSize()) {
+        case 32:
+        {
+            op1 = (double)operands.at(0).getFloatFromReg();
+            op2 = (double)operands.at(1).getFloatFromReg();
+            break;
+        }
+        case 64:
+        {
+            op1 = operands.at(0).getDoubleFromReg();
+            op2 = operands.at(1).getDoubleFromReg();
+            break;
+        }
+        default:
+        {
+            assert(0 && "Must use AP values for nonstandard FP sizes.");
+            break;
+        }
+    }
+    bool unordered = (std::isnan(op1) || std::isnan(op2));
+    switch (predicate) {
+        case SALAM::Predicate::FCMP_FALSE: {
+            result = false;
+            break;
+        }
+        case SALAM::Predicate::FCMP_OEQ:   {
+            result = (!unordered && (op1 == op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_OGT:   {
+            result = (!unordered && (op1 > op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_OGE:   {
+            result = (!unordered && (op1 >= op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_OLT:   {
+            result = (!unordered && (op1 < op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_OLE:   {
+            result = (!unordered && (op1 <= op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_ONE:   {
+            result = (!unordered && (op1 != op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_ORD:   {
+            result = (!unordered);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UNO:   {
+            result = (unordered);
+            break;
+        }
+        case SALAM::Predicate::FCMP_UEQ:   {
+            result = (unordered || (op1 == op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_UGT:   {
+            result = (unordered || (op1 > op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_UGE:   {
+            result = (unordered || (op1 >= op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_ULT:   {
+            result = (unordered || (op1 < op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_ULE:   {
+            result = (unordered || (op1 <= op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_UNE:   {
+            result = (unordered || (op1 != op2));
+            break;
+        }
+        case SALAM::Predicate::FCMP_TRUE:  {
+            result = true;
+            break;
+        }
+    }
+#endif
+    setRegisterValue(result);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Comparing %f, %f\n", op1,op2);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, result ? "TRUE" : "FALSE");
+}
+
+// SALAM-Phi // -------------------------------------------------------------//
+void // Debugging Interface
+Phi::dumper() {
+}
+
+std::shared_ptr<SALAM::Instruction>
+createPHIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Phi>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Phi::Phi(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Phi::initialize(llvm::Value * irval,
+                    irvmap * irmap,
+                    SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    llvm::PHINode * phi = llvm::dyn_cast<llvm::PHINode>(irval);
+    assert(phi);
+    phiArgTy args;
+    for (int i = 0; i < Instruction::getStaticDependencies().size();) {
+        args.second = Instruction::getStaticDependencies(i); ++i;
+        args.first = std::dynamic_pointer_cast<SALAM::BasicBlock>(Instruction::getStaticDependencies(i)); ++i;
+        this->phiArgs.insert(args);
+    }
+}
+
+//std::deque<uint64_t>
+std::vector<uint64_t>
+Phi::runtimeInitialize() {
+    assert(getDependencyCount() == 0);
+    //std::deque<uint64_t> dep_uids;
+    std::vector<uint64_t> dep_uids;
+    std::shared_ptr<SALAM::Value> static_dependency;
+
+    auto it = phiArgs.find(previousBB);
+    if (it != phiArgs.end()) static_dependency = it->second;
+    else assert(0 && "Previous BasicBlock not found in PHI args");
+
+    auto dep_uid = static_dependency->getUID();
+    operands.push_back(SALAM::Operand(static_dependency));
+    if ((static_dependency->isConstant()) || (static_dependency->isArgument())) {
+        operands.back().updateOperandRegister();
+    } else {
+        dep_uids.push_back(dep_uid);
+    }
+
+    return dep_uids;
+}
+
+void
+Phi::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| PHI entered from %s, using value: %s\n",
+        previousBB->getIRStub(), operands.front().getIRString());
+
+    setRegisterValue(operands.front().getOpRegister());
+}
+
+void
+Phi::setPrevBB(std::shared_ptr<SALAM::BasicBlock> prevBB)
+{
+    auto it = phiArgs.find(prevBB);
+    if (it != phiArgs.end()) previousBB = prevBB;
+    else assert(0 && "Previous BasicBlock not found in PHI args");
+}
+
+valueListTy
+Phi::getStaticDependencies() const {
+    valueListTy deps;
+
+    auto it = phiArgs.find(previousBB);
+    if (it != phiArgs.end()) deps.push_back(it->second);
+    else assert(0 && "Previous BasicBlock not found in PHI args");
+
+    return deps;
+}
+
+
+// SALAM-Call // ------------------------------------------------------------//
+void // Debugging Interface
+Call::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createCallInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Call>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Call::Call(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Call::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    callee = staticDependencies.back();
+    staticDependencies.pop_back();
+    // ****** //
+}
+
+void
+Call::compute() {
+    // Call does not use compute. Special handling is used in the scheduler.
+}
+
+// SALAM-Select // ----------------------------------------------------------//
+void // Debugging Interface
+Select::dumper() {
+
+}
+
+std::shared_ptr<SALAM::Instruction>
+createSelectInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) {
+    return std::make_shared<SALAM::Select>(id, owner, dbg, OpCode, cycles, fu);
+}
+
+Select::Select(uint64_t id, gem5::SimObject * owner, bool dbg,
+         uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu) :
+         Instruction(id, owner, dbg, OpCode, cycles,fu)
+{
+    std::vector<uint64_t> base_params;
+    base_params.push_back(id);
+    base_params.push_back(OpCode);
+    base_params.push_back(cycles);
+    conditions.push_back(base_params);
+}
+
+void
+Select::initialize(llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList) {
+    SALAM::Instruction::initialize(irval, irmap, valueList);
+    this->condition = getStaticDependencies(0);
+    this->trueValue = getStaticDependencies(1);
+    this->falseValue = getStaticDependencies(2);
+    // ****** //
+}
+
+// std::shared_ptr<SALAM::Value>
+// Select::evaluate() {
+// #if USE_LLVM_AP_VALUES
+//     if(condition->getIntRegValue().isOneValue()) return trueValue;
+//     return falseValue;
+// #else
+//     if(condition->getUIntRegValue() == 1) return trueValue;
+//     return falseValue;
+// #endif
+// }
+
+void
+Select::compute() {
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Computing %s\n", ir_string);
+
+    auto cond = operands.at(0);
+    auto trueVal = operands.at(1);
+    auto falseVal = operands.at(2);
+
+#if USE_LLVM_AP_VALUES
+    auto resultReg = (cond.getIntRegValue().isOneValue()) ? trueVal.getOpRegister() : falseVal.getOpRegister();
+#else
+    auto resultReg = (cond.getUIntRegValue() == 1) ? trueVal.getOpRegister() : falseVal.getOpRegister();
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| Selecting %s condition\n", (cond.getUIntRegValue() == 1) ? "TRUE" : "FALSE");
+    if (dbg) DPRINTFS(RuntimeCompute, owner, "|| %s = %s\n", ir_stub, (cond.getUIntRegValue() == 1) ? trueVal.getIRStub() : falseVal.getIRStub());
+#endif
+    setRegisterValue(resultReg);
+}
+
+} // namespace SALAM
+
+//---------------------------------------------------------------------------//
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/instruction.hh gem5-SALAM/src/hwacc/LLVMRead/src/instruction.hh
--- gem5/src/hwacc/LLVMRead/src/instruction.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/instruction.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,1574 @@
+#ifndef __HWACC_LLVM_INSTRUCTION_HH__
+#define __HWACC_LLVM_INSTRUCTION_HH__
+
+#include <cstdlib>
+#include <iostream>
+#include <llvm/IR/Value.h>
+#include <llvm/IR/Instruction.h>
+#include <llvm/IR/Instructions.h>
+#include "basic_block.hh"
+#include "operand.hh"
+#include "debug_flags.hh"
+#include "value.hh"
+#include "mem_request.hh"
+#include "../../HWModeling/src/hw_interface.hh"
+
+namespace SALAM {
+
+class BasicBlock; // Required Declaration
+
+//---------------------------------------------------------------------------//
+//--------- Instruction Base Class ------------------------------------------//
+//---------------------------------------------------------------------------//
+
+
+class Instruction : public Value
+{
+    private:
+        std::map<uint64_t, std::shared_ptr<SALAM::Instruction>> dynamicDependencies;
+        std::vector<std::shared_ptr<SALAM::Instruction>> dynamicUsers;
+        uint64_t llvmOpCode;
+        uint64_t cycleCount;
+        uint64_t currentCycle;
+        uint64_t functional_unit = 0;
+        HWInterface* hw_interface;
+
+    protected:
+        valueListTy staticDependencies;
+        // Operands
+        std::vector<SALAM::Operand> operands;
+
+        bool running = false;
+        class Instruction_Debugger: public Debugger
+        {
+            public:
+                Instruction_Debugger();
+                ~Instruction_Debugger() = default;
+                virtual void dumper(SALAM::Instruction *inst);
+        };
+        Instruction_Debugger* inst_dbg;
+        bool launched = false;
+        bool committed = false;
+        bool isready = false;
+    public:
+        Instruction(uint64_t id, gem5::SimObject * owner, bool dbg); //
+        Instruction(uint64_t id, gem5::SimObject * owner, bool dbg, uint64_t OpCode); //
+        Instruction(uint64_t id, gem5::SimObject * owner, bool dbg, uint64_t OpCode, uint64_t cycles); //
+        Instruction(uint64_t id, gem5::SimObject * owner, bool dbg, uint64_t OpCode, uint64_t cycles, uint64_t functional_unit); //
+        ~Instruction(); //
+        bool operator == (const std::shared_ptr<SALAM::Instruction> inst) const { return this->getUID() == inst->getUID(); }
+        bool operator != (const std::shared_ptr<SALAM::Instruction> inst) const { return !operator==(inst); }
+        virtual void initialize(llvm::Value * irval, irvmap * irmap, SALAM::valueListTy * valueList); //
+        virtual std::shared_ptr<SALAM::BasicBlock> getTarget()  { return nullptr; }
+        uint64_t getDependencyCount() { return dynamicDependencies.size(); }
+        virtual uint64_t getCycleCount() { return cycleCount; }
+        virtual uint64_t getOpode() { return llvmOpCode; }
+        uint64_t getCurrentCycle() { return currentCycle; }
+        virtual valueListTy getStaticDependencies() const { return staticDependencies; }
+        std::map<uint64_t, std::shared_ptr<SALAM::Instruction>> getDynamicDependencies() const { return dynamicDependencies; }
+        std::shared_ptr<SALAM::Value> getStaticDependencies(int i) const { return staticDependencies.at(i); }
+        std::shared_ptr<SALAM::Value> getDynamicDependencies(int i) const { return dynamicDependencies.at(i); }
+        virtual std::vector<uint64_t> runtimeInitialize();
+        void removeDynamicDependency(uint64_t opuid);
+        void addRuntimeDependency(std::shared_ptr<SALAM::Instruction> dep) {
+            dynamicDependencies.insert({dep->getUID(),dep});
+        }
+        void addRuntimeUser(std::shared_ptr<SALAM::Instruction> dep) { dynamicUsers.push_back(dep); }
+        void signalUsers();
+        bool isCommitted() { return committed; }
+        //bool hasFunctionalUnit() { return (functional_unit != 0); }
+        bool hasFunctionalUnit() { return false; }
+        bool debug() { return dbg; }
+        void linkOperands(const SALAM::Operand &newOp);
+        std::vector<SALAM::Operand> * getOperands() { return &operands; }
+        uint64_t getFunctionalUnit() { return functional_unit; }
+        virtual bool isReturn() { return false; }
+        virtual bool isTerminator() { return false; }
+        virtual bool isPhi() { return false; }
+        virtual bool isCall() { return false; }
+        virtual bool isBr() { return false; }
+        virtual bool isLoad() { return false; }
+        virtual bool isStore() {return false; }
+        virtual bool isGEP() { return false; }
+        virtual bool launch();
+        virtual bool commit();
+        virtual bool ready();
+        virtual void compute() { }
+        virtual void reset();
+        virtual void setOperandValue(uint64_t uid);
+        virtual void dump() { if (dbg) inst_dbg->dumper(this); }
+        virtual bool isInstruction() { return true; }
+        virtual bool isLoadingInternal() { return false; }
+        virtual bool isLatchingBrExiting() { return false; }
+        // virtual void linkFunctionalUnit(HWInterface * hw_interface);
+        std::shared_ptr<SALAM::Instruction> clone() const { return std::static_pointer_cast<SALAM::Instruction>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Instruction>(new SALAM::Instruction(*this)); }
+        virtual MemoryRequest * createMemoryRequest() { return nullptr; }
+
+        // Functions for getting data from operands
+        uint64_t getPtrOperandValue(uint64_t op_num) { return (operands.at(op_num).getPtrRegValue()); }
+};
+
+//---------------------------------------------------------------------------//
+//--------- Bad Instruction -------------------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-BadInstruction // --------------------------------------------------//
+class BadInstruction : public Instruction {
+    // Used to draw hard dependencies, ie: ret
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+
+    protected:
+    public:
+        BadInstruction(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~BadInstruction() = default;
+        void initialize (llvm::Value * irval,
+                irvmap * irmap,
+                SALAM::valueListTy * valueList);
+        std::shared_ptr<SALAM::BadInstruction> clone() const { return std::static_pointer_cast<SALAM::BadInstruction>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::BadInstruction>(new SALAM::BadInstruction(*this)); }
+};
+
+
+std::shared_ptr<SALAM::Instruction>
+createBadInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+
+//---------------------------------------------------------------------------//
+//--------- Terminator Instructions -----------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Ret // -------------------------------------------------------------//
+
+class Ret : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Ret(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Ret() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        bool isReturn() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Ret> clone() const { return std::static_pointer_cast<SALAM::Ret>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Ret>(new SALAM::Ret(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createRetInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+// SALAM-Br // --------------------------------------------------------------//
+
+class Br : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        std::shared_ptr<SALAM::Value> condition;
+        std::shared_ptr<SALAM::BasicBlock> defaultDestination;
+        std::shared_ptr<SALAM::BasicBlock> trueDestination;
+        std::shared_ptr<SALAM::BasicBlock> falseDestination;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+        bool conditional = false;
+        bool isLatching = false;
+
+    protected:
+    public:
+        // Branch Constructor
+        Br(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Br() = default;
+        void initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        Br &isConditional(bool isConditional) { conditional = isConditional; return *this; }
+        bool isConditional() { return conditional; }
+        std::shared_ptr<SALAM::BasicBlock> getTarget() override;
+        bool isTerminator() override { return true; }
+        bool isBr() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void setLatching(bool latch) { isLatching = latch; }
+        virtual bool isLatchingBrExiting() override { return isLatching && (getTarget()==trueDestination); }
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Br> clone() const { return std::static_pointer_cast<SALAM::Br>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Br>(new SALAM::Br(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createBrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+// SALAM-Switch // ----------------------------------------------------------//
+typedef std::pair<std::shared_ptr<SALAM::Value>, std::shared_ptr<SALAM::BasicBlock>> caseArgs;
+typedef std::vector< caseArgs> switchArgs;
+
+class Switch : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        // [0] [Switch Var, Default Dest]
+        // [1] [ Case Var, Case Dest ] .... [n]
+        switchArgs cases;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+        std::shared_ptr<SALAM::BasicBlock> defaultDestination;
+    protected:
+    public:
+        Switch(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Switch() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        // std::shared_ptr<SALAM::Value> defaultDest() { return arguments[0].second; }
+        // std::shared_ptr<SALAM::Value> destination(int switchVar);
+        std::shared_ptr<SALAM::BasicBlock> getTarget() override;
+        bool isTerminator() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Switch> clone() const { return std::static_pointer_cast<SALAM::Switch>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Switch>(new SALAM::Switch(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSwitchInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- Binary Operator Instructions ------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Add // -------------------------------------------------------------//
+
+class Add : public Instruction
+{
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Add(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Add() = default;
+        void initialize(llvm::Value *irval,
+                        SALAM::irvmap *irmap,
+                        SALAM::valueListTy *valueList) override;
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Add> clone() const { return std::static_pointer_cast<SALAM::Add>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Add>(new SALAM::Add(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createAddInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+// SALAM-FAdd // ------------------------------------------------------------//
+
+class FAdd : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FAdd(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FAdd() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FAdd> clone() const { return std::static_pointer_cast<SALAM::FAdd>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FAdd>(new SALAM::FAdd(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFAddInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Sub // -------------------------------------------------------------//
+
+class Sub : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Sub(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Sub() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Sub> clone() const { return std::static_pointer_cast<SALAM::Sub>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Sub>(new SALAM::Sub(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSubInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FSub // -------------------------------------------------------------//
+
+class FSub : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FSub(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FSub() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FSub> clone() const { return std::static_pointer_cast<SALAM::FSub>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FSub>(new SALAM::FSub(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFSubInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Mul // -------------------------------------------------------------//
+
+class Mul : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::APIntRegister *op1, *op2;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Mul(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Mul() = default;
+        void initialize (llvm::Value * irval,
+                        SALAM::irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Mul> clone() const { return std::static_pointer_cast<SALAM::Mul>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Mul>(new SALAM::Mul(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createMulInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FMul // ------------------------------------------------------------//
+
+class FMul : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FMul(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FMul() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FMul> clone() const { return std::static_pointer_cast<SALAM::FMul>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FMul>(new SALAM::FMul(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFMulInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-UDiv // ------------------------------------------------------------//
+
+class UDiv : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        UDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~UDiv() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::UDiv> clone() const { return std::static_pointer_cast<SALAM::UDiv>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::UDiv>(new SALAM::UDiv(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createUDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-SDiv // ------------------------------------------------------------//
+
+class SDiv : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        SDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~SDiv() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::SDiv> clone() const { return std::static_pointer_cast<SALAM::SDiv>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::SDiv>(new SALAM::SDiv(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FDiv // ------------------------------------------------------------//
+
+class FDiv : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FDiv(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FDiv() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FDiv> clone() const { return std::static_pointer_cast<SALAM::FDiv>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FDiv>(new SALAM::FDiv(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFDivInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-URem // ------------------------------------------------------------//
+
+class URem : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        URem(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~URem() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::URem> clone() const { return std::static_pointer_cast<SALAM::URem>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::URem>(new SALAM::URem(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createURemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-SRem // ------------------------------------------------------------//
+
+class SRem : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        SRem(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~SRem() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::SRem> clone() const { return std::static_pointer_cast<SALAM::SRem>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::SRem>(new SALAM::SRem(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSRemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FRem // ------------------------------------------------------------//
+
+class FRem : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FRem(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FRem() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FRem> clone() const { return std::static_pointer_cast<SALAM::FRem>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FRem>(new SALAM::FRem(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFRemInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- Bitwise Binary Operator Instructions ----------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Shl // -------------------------------------------------------------//
+
+class Shl : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Shl(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Shl() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Shl> clone() const { return std::static_pointer_cast<SALAM::Shl>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Shl>(new SALAM::Shl(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createShlInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-LShr // ------------------------------------------------------------//
+
+class LShr : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        LShr(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~LShr() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::LShr> clone() const { return std::static_pointer_cast<SALAM::LShr>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::LShr>(new SALAM::LShr(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createLShrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-AShr // ------------------------------------------------------------//
+
+class AShr : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        AShr(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~AShr() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::AShr> clone() const { return std::static_pointer_cast<SALAM::AShr>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::AShr>(new SALAM::AShr(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createAShrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-And // -------------------------------------------------------------//
+
+class And : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        And(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~And() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::And> clone() const { return std::static_pointer_cast<SALAM::And>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::And>(new SALAM::And(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createAndInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Or // --------------------------------------------------------------//
+
+class Or : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+    protected:
+
+    public:
+        Or(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Or() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Or> clone() const { return std::static_pointer_cast<SALAM::Or>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Or>(new SALAM::Or(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createOrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Xor // -------------------------------------------------------------//
+
+class Xor : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Xor(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Xor() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Xor> clone() const { return std::static_pointer_cast<SALAM::Xor>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Xor>(new SALAM::Xor(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createXorInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- Memory Instructions ---------------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Load // ------------------------------------------------------------//
+
+class Load : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        uint64_t align;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+        bool loadingInternal = false;
+
+    protected:
+    public:
+        Load(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Load() = default;
+        void initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        bool isLoad() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void loadInternal();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        bool isLoadingInternal() { return loadingInternal; }
+        std::shared_ptr<SALAM::Load> clone() const { return std::static_pointer_cast<SALAM::Load>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Load>(new SALAM::Load(*this)); }
+
+        MemoryRequest * createMemoryRequest() override;
+};
+
+std::shared_ptr<SALAM::Instruction>
+createLoadInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Store // -----------------------------------------------------------//
+
+class Store : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        uint64_t align;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Store (uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Store() = default;
+        void initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        bool isStore() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Store> clone() const { return std::static_pointer_cast<SALAM::Store>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Store>(new SALAM::Store(*this)); }
+
+        MemoryRequest * createMemoryRequest() override;
+};
+
+std::shared_ptr<SALAM::Instruction>
+createStoreInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-GEP // -------------------------------------------------------------//
+
+/*
+
+In our storage, pointers are standard uint64_t, for comm interface convience
+The GEP indecies will by APSInts, so cast to int64_t for calculating offset inside GEP, then recast to APSInt
+
+*/
+
+class GetElementPtr : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        std::vector<int64_t> offsets;
+        std::vector<bool> offsetOfStruct;
+        SALAM::Debugger *dbgr;
+        llvm::Type * resultElementType;
+        uint64_t resultElementSize;
+        uint64_t resultElementSizeInBytes;
+    protected:
+
+    public:
+        GetElementPtr(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~GetElementPtr() = default;
+        void initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        GetElementPtr &setA() { std::cout << "a\n"; return *this; }
+        GetElementPtr &setB() { std::cout << "b\n"; return *this; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        virtual bool isGEP() override { return true; }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::GetElementPtr> clone() const { return std::static_pointer_cast<SALAM::GetElementPtr>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::GetElementPtr>(new SALAM::GetElementPtr(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createGetElementPtrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- Other / Cast Instructions ---------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Trunc // -----------------------------------------------------------//
+
+class Trunc : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        Trunc(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Trunc() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Trunc> clone() const { return std::static_pointer_cast<SALAM::Trunc>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Trunc>(new SALAM::Trunc(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createTruncInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-ZExt // ------------------------------------------------------------//
+
+class ZExt : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        ZExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~ZExt() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::ZExt> clone() const { return std::static_pointer_cast<SALAM::ZExt>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::ZExt>(new SALAM::ZExt(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createZExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-SExt // ------------------------------------------------------------//
+
+class SExt : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        SExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~SExt() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::SExt> clone() const { return std::static_pointer_cast<SALAM::SExt>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::SExt>(new SALAM::SExt(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FPToUI // ----------------------------------------------------------//
+class FPToUI;
+void initializeFPToUIInst(SALAM::FPToUI &salamInstruction);
+
+class FPToUI : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FPToUI(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FPToUI() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FPToUI> clone() const { return std::static_pointer_cast<SALAM::FPToUI>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FPToUI>(new SALAM::FPToUI(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFPToUIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FPToSI // ----------------------------------------------------------//
+
+class FPToSI : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+
+    public:
+        FPToSI(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FPToSI() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FPToSI> clone() const { return std::static_pointer_cast<SALAM::FPToSI>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FPToSI>(new SALAM::FPToSI(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFPToSIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-UIToFP // ----------------------------------------------------------//
+
+class UIToFP : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        UIToFP(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~UIToFP() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::UIToFP> clone() const { return std::static_pointer_cast<SALAM::UIToFP>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::UIToFP>(new SALAM::UIToFP(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createUIToFPInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-SIToFP // ----------------------------------------------------------//
+
+class SIToFP : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        SIToFP(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~SIToFP() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::SIToFP> clone() const { return std::static_pointer_cast<SALAM::SIToFP>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::SIToFP>(new SALAM::SIToFP(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSIToFPInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FPTrunc // ---------------------------------------------------------//
+
+class FPTrunc : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FPTrunc(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FPTrunc() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FPTrunc> clone() const { return std::static_pointer_cast<SALAM::FPTrunc>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FPTrunc>(new SALAM::FPTrunc(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFPTruncInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FPExt // -----------------------------------------------------------//
+
+class FPExt : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        FPExt(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FPExt() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FPExt> clone() const { return std::static_pointer_cast<SALAM::FPExt>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FPExt>(new SALAM::FPExt(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFPExtInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-PtrToInt // --------------------------------------------------------//
+
+class PtrToInt : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+
+    public:
+        PtrToInt (uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~PtrToInt() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::PtrToInt> clone() const { return std::static_pointer_cast<SALAM::PtrToInt>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::PtrToInt>(new SALAM::PtrToInt(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createPtrToIntInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-IntToPtr // --------------------------------------------------------//
+
+class IntToPtr : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        IntToPtr(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~IntToPtr() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::IntToPtr> clone() const { return std::static_pointer_cast<SALAM::IntToPtr>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::IntToPtr>(new SALAM::IntToPtr(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createIntToPtrInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+class BitCast : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        BitCast(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~BitCast() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::BitCast> clone() const { return std::static_pointer_cast<SALAM::BitCast>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::BitCast>(new SALAM::BitCast(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createBitCastInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+
+//---------------------------------------------------------------------------//
+//--------- Other / Comparison Instructions ---------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-ICmp // ------------------------------------------------------------//
+
+class ICmp : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        uint64_t predicate;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+
+    public:
+        ICmp(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~ICmp() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::ICmp> clone() const { return std::static_pointer_cast<SALAM::ICmp>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::ICmp>(new SALAM::ICmp(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createICmpInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-FCmp // ------------------------------------------------------------//
+
+class FCmp : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        uint64_t predicate;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+
+    public:
+        FCmp(uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~FCmp() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::FCmp> clone() const { return std::static_pointer_cast<SALAM::FCmp>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::FCmp>(new SALAM::FCmp(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createFCmpInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- Other / Edge Instructions ---------------------------------------//
+//---------------------------------------------------------------------------//
+
+// SALAM-Phi // -------------------------------------------------------------//
+
+typedef std::pair<std::shared_ptr<SALAM::BasicBlock>, std::shared_ptr<SALAM::Value>> phiArgTy;
+
+//typedef std::pair<std::shared_ptr<SALAM::Value>, std::shared_ptr<SALAM::Value> > phiNode;
+typedef std::map<std::shared_ptr<SALAM::BasicBlock>, std::shared_ptr<SALAM::Value>> phiArgsTy;
+
+class Phi : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        std::shared_ptr<SALAM::BasicBlock> previousBB;
+        phiArgsTy phiArgs; // [BasicBlock, Value]
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+
+    public:
+        Phi (uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Phi() = default;
+        void initialize(llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        //virtual std::deque<uint64_t> runtimeInitialize() override;
+        virtual std::vector<uint64_t> runtimeInitialize() override;
+        bool isPhi() override { return true; }
+        void setPrevBB(std::shared_ptr<SALAM::BasicBlock> prevBB);
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        virtual valueListTy getStaticDependencies() const override;
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Phi> clone() const { return std::static_pointer_cast<SALAM::Phi>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Phi>(new SALAM::Phi(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createPHIInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Call // ------------------------------------------------------------//
+
+class Call : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+        std::shared_ptr<SALAM::Value> callee;
+    protected:
+    public:
+        Call (uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Call() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        bool isCall() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Value> getCalleeValue() { return callee; }
+        std::shared_ptr<SALAM::Call> clone() const { return std::static_pointer_cast<SALAM::Call>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Call>(new SALAM::Call(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createCallInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+// SALAM-Select // ----------------------------------------------------------//
+
+class Select : public Instruction {
+    private:
+        std::vector< std::vector<uint64_t> > conditions;
+        // conditions.at[0] == base params
+        std::shared_ptr<SALAM::Value> condition;
+        std::shared_ptr<SALAM::Value> trueValue;
+        std::shared_ptr<SALAM::Value> falseValue;
+        SALAM::Debugger *dbgr;
+        uint64_t currentCycle;
+
+    protected:
+    public:
+        // ---- Constructor
+        Select (uint64_t id, gem5::SimObject * owner, bool dbg,
+            uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+        ~Select() = default;
+        void initialize (llvm::Value * irval,
+                        irvmap * irmap,
+                        SALAM::valueListTy * valueList);
+        // std::shared_ptr<SALAM::Value> evaluate();
+        // bool isTerminator() override { return true; }
+        uint64_t getCycleCount() { return conditions.at(0).at(2); }
+        void compute();
+        void dump() { if (dbgr->enabled()) { dumper(); inst_dbg->dumper(static_cast<SALAM::Instruction*>(this));}}
+        void dumper();
+        std::shared_ptr<SALAM::Select> clone() const { return std::static_pointer_cast<SALAM::Select>(createClone()); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const override { return std::shared_ptr<SALAM::Select>(new SALAM::Select(*this)); }
+};
+
+std::shared_ptr<SALAM::Instruction>
+createSelectInst(uint64_t id, gem5::SimObject * owner, bool dbg,
+              uint64_t OpCode,
+              uint64_t cycles,
+              uint64_t fu);
+//---------------------------------------------------------------------------//
+//--------- End Instruction Classes -----------------------------------------//
+//---------------------------------------------------------------------------//
+
+}
+
+#endif // __HWACC_LLVM_INSTRUCTION_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/ir_parse.cc gem5-SALAM/src/hwacc/LLVMRead/src/ir_parse.cc
--- gem5/src/hwacc/LLVMRead/src/ir_parse.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/ir_parse.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,60 @@
+#include "ir_parse.hh"
+#include "instruction.hh"
+
+namespace SALAM {
+    int ir_parser(std::string file) {
+        llvm::StringRef filename = file;
+        llvm::LLVMContext context;
+        llvm::SMDiagnostic error;
+
+        // Load LLVM IR file
+        llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>> fileOrErr = llvm::MemoryBuffer::getFileOrSTDIN(filename);
+        if (std::error_code ec = fileOrErr.getError()) {
+            std::cerr << " Error opening input file: " + ec.message() << std::endl;
+            return 2;
+        }
+
+        // Load LLVM Module
+        llvm::ErrorOr<std::unique_ptr<llvm::Module>> moduleOrErr = llvm::parseIRFile(filename, error, context);
+        if (std::error_code ec = moduleOrErr.getError()) {
+            std::cerr << "Error reading Module: " + ec.message() << std::endl;
+            return 3;
+        }
+
+        std::unique_ptr<llvm::Module> m(llvm::parseIRFile(filename, error, context));
+        if(!m) return 4;
+
+        std::cout << "Successfully Loaded Module:" << std::endl;
+        std::cout << " Name: " << m->getName().str() << std::endl;
+        std::cout << " Target Triple: " << m->getTargetTriple() << std::endl;
+
+        std::vector<std::shared_ptr<SALAM::Instruction>> inst_List;
+
+        for (auto func_iter = m->getFunctionList().begin(); func_iter != m->getFunctionList().end(); func_iter++) {
+            llvm::Function &f = *func_iter;
+            std::cout << " Function: " << f.getName().str() << std::endl;
+            for (auto bb_iter = f.getBasicBlockList().begin(); bb_iter != f.getBasicBlockList().end(); bb_iter++) {
+                llvm::BasicBlock &bb = *bb_iter;
+                std::cout << "  BasicBlock: " << bb.getName().str() << std::endl;
+                for (auto inst_iter = bb.begin(); inst_iter != bb.end(); inst_iter++) {
+                    llvm::Instruction &llvm_inst = *inst_iter;
+                    SALAM::register_instruction(llvm_inst.clone(), inst_List);
+                }
+            }
+        }
+        
+        // Test Function Only
+        for (auto inst_list_it = inst_List.begin() ; inst_list_it != inst_List.end(); inst_list_it++) {
+            (*inst_list_it)->test();
+        }
+        
+        return 0;
+    }
+
+    void register_instruction(llvm::Instruction * inst, std::vector<std::shared_ptr<SALAM::Instruction>> &inst_List) {       
+        std::shared_ptr<SALAM::Instruction> newInst(new SALAM::Instruction(inst));
+        inst_List.push_back(std::move(newInst));
+    }
+
+
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/ir_parse.hh gem5-SALAM/src/hwacc/LLVMRead/src/ir_parse.hh
--- gem5/src/hwacc/LLVMRead/src/ir_parse.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/ir_parse.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,25 @@
+#ifndef __HWACC_LLVM_IR_PARSER_HH__
+#define __HWACC_LLVM_IR_PARSER_HH__
+
+#include <llvm/IR/Module.h>
+#include <llvm/IRReader/IRReader.h>
+#include <llvm/IR/LLVMContext.h>
+#include <llvm/Support/SourceMgr.h>
+#include <llvm/Support/MemoryBuffer.h>
+#include <llvm/Support/ErrorOr.h>
+#include <llvm/Bitcode/BitcodeWriter.h>
+#include <llvm/Bitcode/BitcodeReader.h>
+#include <llvm/Support/raw_ostream.h>
+#include "instruction.hh"
+#include <string>
+#include <iostream>
+#include <vector>
+#include <memory>
+
+namespace SALAM {
+    int ir_parser(std::string file);  
+    void register_instruction(llvm::Instruction * inst, std::vector<std::shared_ptr<SALAM::Instruction>> &inst_List);
+
+}
+
+#endif //__HWACC_LLVM_IR_PARSER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/macros.hh gem5-SALAM/src/hwacc/LLVMRead/src/macros.hh
--- gem5/src/hwacc/LLVMRead/src/macros.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/macros.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,106 @@
+#ifndef MACROS_HH
+#define MACROS_HH
+//____________________________________________________________________________
+
+// Function Macros
+#define MIN(a,b) (((a)<(b))?(a):(b))
+
+// LLVM Instructions Definitions (Re-Define From llvm/IR/Instructions.def)
+#define LLVM_IR_Move 0
+#define LLVM_IR_Ret 1
+#define LLVM_IR_Br 2
+#define LLVM_IR_Switch 3
+#define LLVM_IR_IndirectBr 4
+#define LLVM_IR_Invoke 5
+#define LLVM_IR_Resume 6
+#define LLVM_IR_Unreachable 7
+#define LLVM_IR_Add 13
+#define LLVM_IR_FAdd 14
+#define LLVM_IR_Sub 15
+#define LLVM_IR_FSub 16
+#define LLVM_IR_Mul 17
+#define LLVM_IR_FMul 18
+#define LLVM_IR_UDiv 19
+#define LLVM_IR_SDiv 20
+#define LLVM_IR_FDiv 21
+#define LLVM_IR_URem 22
+#define LLVM_IR_SRem 23
+#define LLVM_IR_FRem 24
+#define LLVM_IR_Shl 25
+#define LLVM_IR_LShr 26
+#define LLVM_IR_AShr 27
+#define LLVM_IR_And 28
+#define LLVM_IR_Or 29
+#define LLVM_IR_Xor 30
+#define LLVM_IR_Alloca 31
+#define LLVM_IR_Load 32
+#define LLVM_IR_Store 33
+#define LLVM_IR_GetElementPtr 34
+#define LLVM_IR_Fence 35
+#define LLVM_IR_AtomicCmpXchg 36
+#define LLVM_IR_AtomicRMW 37
+#define LLVM_IR_Trunc 38
+#define LLVM_IR_ZExt 39
+#define LLVM_IR_SExt 40
+#define LLVM_IR_FPToUI 41
+#define LLVM_IR_FPToSI 42
+#define LLVM_IR_UIToFP 43
+#define LLVM_IR_SIToFP 44
+#define LLVM_IR_FPTrunc 45
+#define LLVM_IR_FPExt 46
+#define LLVM_IR_PtrToInt 47
+#define LLVM_IR_IntToPtr 48
+#define LLVM_IR_BitCast 49
+#define LLVM_IR_AddrSpaceCast 50
+#define LLVM_IR_ICmp 53
+#define LLVM_IR_FCmp 54
+#define LLVM_IR_PHI 55
+#define LLVM_IR_Call 56
+#define LLVM_IR_Select 57
+#define LLVM_IR_VAArg 60
+#define LLVM_IR_ExtractElement 61
+#define LLVM_IR_InsertElement 62
+#define LLVM_IR_ShuffleVector 63
+#define LLVM_IR_ExtractValue 64
+#define LLVM_IR_InsertValue 65
+#define LLVM_IR_LandingPad 66
+#define LLVM_IR_DMAFence 97
+#define LLVM_IR_DMAStore 98
+#define LLVM_IR_DMALoad 99
+#define LLVM_IR_IndexAdd 100
+#define LLVM_IR_SilentStore 101
+#define LLVM_IR_Sine 102
+#define LLVM_IR_Cosine 103
+
+/**
+ * @namespace SALAM
+ */
+
+namespace SALAM {
+    // LLVM comparison codes
+    enum Predicate : unsigned {
+        FCMP_FALSE = 0, FCMP_OEQ = 1, FCMP_OGT = 2, FCMP_OGE = 3,
+        FCMP_OLT = 4, FCMP_OLE = 5, FCMP_ONE = 6, FCMP_ORD = 7,
+        FCMP_UNO = 8, FCMP_UEQ = 9, FCMP_UGT = 10, FCMP_UGE = 11,
+        FCMP_ULT = 12, FCMP_ULE = 13, FCMP_UNE = 14, FCMP_TRUE = 15,
+        FIRST_FCMP_PREDICATE = FCMP_FALSE, LAST_FCMP_PREDICATE = FCMP_TRUE, BAD_FCMP_PREDICATE = FCMP_TRUE + 1, ICMP_EQ = 32,
+        ICMP_NE = 33, ICMP_UGT = 34, ICMP_UGE = 35, ICMP_ULT = 36,
+        ICMP_ULE = 37, ICMP_SGT = 38, ICMP_SGE = 39, ICMP_SLT = 40,
+        ICMP_SLE = 41, FIRST_ICMP_PREDICATE = ICMP_EQ, LAST_ICMP_PREDICATE = ICMP_SLE, BAD_ICMP_PREDICATE = ICMP_SLE + 1
+    };
+}
+
+
+/*
+Useful snippets
+
+// Line break
+//____________________________________________________________________________
+
+
+
+
+
+*/
+
+#endif //__MACROS_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/mem_request.cc gem5-SALAM/src/hwacc/LLVMRead/src/mem_request.cc
--- gem5/src/hwacc/LLVMRead/src/mem_request.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/mem_request.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,70 @@
+//------------------------------------------//
+#include "mem_request.hh"
+#include <sstream>
+#include <iomanip>
+//------------------------------------------//
+
+MemoryRequest::MemoryRequest(Addr add, size_t len) {
+    address = add;
+    length = len;
+
+    needToRead = true;
+    needToWrite = false;
+
+    currentReadAddr = address;
+
+    beginAddr = address;
+    readLeft = length;
+    writeLeft = 0;
+    totalLength = length;
+    readDone = 0;
+
+    buffer = new uint8_t[length];
+    readsDone = new bool[length];
+    std::memset(buffer, 0, length);
+
+    for (int i = 0; i < length; i++) {
+        readsDone[i] = false;
+    }
+    pkt = NULL;
+}
+
+
+MemoryRequest::MemoryRequest(Addr add, const void *data, size_t len) {
+    address = add;
+    length = len;
+
+    needToWrite = true;
+    needToRead = false;
+
+    currentWriteAddr = address;
+
+    readLeft = 0;
+    writeLeft = length;
+
+    totalLength = length;
+    writeLeft = totalLength;
+
+    readDone = length;
+    writeDone = 0;
+
+    buffer = new uint8_t[length];
+    readsDone = new bool[length];
+    std::memcpy(buffer, data, length);
+    // for (int i = 0; i < length; i++) {
+    //     buffer[i] = *(data + i);
+    //     readsDone[i] = true;
+    // }
+    pkt = NULL;
+}
+
+std::string
+MemoryRequest::printBuffer() {
+    std::stringstream ss;
+    ss << "0x";
+    for (int i = totalLength-1; i >= 0; i--) {
+        unsigned tmp = buffer[i];
+        ss << std::setfill('0') << std::setw(2) << std::hex << tmp;
+    }
+    return ss.str();
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/mem_request.hh gem5-SALAM/src/hwacc/LLVMRead/src/mem_request.hh
--- gem5/src/hwacc/LLVMRead/src/mem_request.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/mem_request.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,48 @@
+#ifndef MEMORY_REQUEST_HH
+#define MEMORY_REQUEST_HH
+//------------------------------------------//
+#include "mem/packet.hh"
+#include "mem/port.hh"
+#include "debug_flags.hh"
+//------------------------------------------//
+
+using namespace gem5;
+
+class MemoryRequest {
+  friend class CommInterface;
+  // friend class LLVMInterface;
+  private:
+    Addr address;
+    size_t length;
+    bool needToRead;
+    bool needToWrite;
+    Addr currentReadAddr;
+    Addr currentWriteAddr;
+    Addr beginAddr;
+    Tick writeLeft;
+    Tick writeDone;
+    Tick readLeft;
+    Tick readDone;
+    Tick totalLength;
+
+    uint8_t *buffer;
+    bool *readsDone;
+
+    PacketPtr pkt;
+    RequestPort * port;
+  public:
+    MemoryRequest(Addr add, size_t len);
+    MemoryRequest(Addr add, const void *data, size_t len);
+    ~MemoryRequest() {
+        delete[] readsDone;
+        delete[] buffer;
+        // if (pkt) delete pkt;
+    }
+    void setCarrierPort(RequestPort * _port) { port = _port; }
+    RequestPort * getCarrierPort() { return port; }
+    uint8_t * getBuffer() { return buffer; }
+    Addr getAddress() { return address; }
+    std::string printBuffer();
+};
+
+#endif //__MEM_REQUEST_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/operand.cc gem5-SALAM/src/hwacc/LLVMRead/src/operand.cc
--- gem5/src/hwacc/LLVMRead/src/operand.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/operand.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,419 @@
+#include "operand.hh"
+#include "sim/sim_object.hh"
+
+
+SALAM::Constant::Constant(uint64_t id, gem5::SimObject * owner, bool dbg) :
+                          Value(id, owner, dbg)
+{
+}
+
+void
+SALAM::Constant::initialize(llvm::Value * irval,
+                            SALAM::irvmap * irmap,
+                            SALAM::valueListTy * values)
+{
+    //Initialize SALAM::Value
+    SALAM::Value::initialize(irval, irmap);
+    // Parse the constant value
+    llvm::ConstantData * cd = llvm::dyn_cast<llvm::ConstantData>(irval);
+    llvm::ConstantExpr * ce = llvm::dyn_cast<llvm::ConstantExpr>(irval);
+    llvm::Type *irtype = irval->getType();
+    if (cd) {
+        // The constant is a llvm::ConstantData.
+        // Get it's value and store it in constValue
+        if (irtype->isFloatingPointTy()) {
+            llvm::ConstantFP * fp = llvm::dyn_cast<llvm::ConstantFP>(cd);
+        #if USE_LLVM_AP_VALUES
+            addAPFloatRegister(fp->getValueAPF());
+        #else
+            auto apfp = fp->getValueAPF();
+            auto api = apfp.bitcastToAPInt();
+            addAPFloatRegister(api.getLimitedValue());
+        #endif
+        } else if (irtype->isIntegerTy()) {
+            llvm::ConstantInt * in = llvm::dyn_cast<llvm::ConstantInt>(cd);
+        #if USE_LLVM_AP_VALUES
+            addAPIntRegister(in->getValue());
+        #else
+            auto api = in->getValue();
+            addAPIntRegister(api.getLimitedValue());
+        #endif
+        } else if (irtype->isPointerTy()) {
+            assert(llvm::dyn_cast<llvm::ConstantPointerNull>(cd));
+            addPointerRegister(false, true);
+        }
+    } else if (ce) {
+        // The constant is an expression. We need to parse the expression
+        for (auto op : ce->operand_values()) {
+            // Iterate over operands and add
+            // new values to our map and value list
+            auto mapit = irmap->find(op);
+            if (mapit == irmap->end()) {
+                uint64_t id = values->back()->getUID() + 1;
+                std::shared_ptr<SALAM::Constant> con =
+                    std::make_shared<SALAM::Constant>(id, owner, dbg);
+                values->push_back(con);
+                irmap->insert(SALAM::irvmaptype(op, con));
+                operands.push_back(con);
+                con->initialize(op, irmap, values);
+            } else {
+                std::shared_ptr<SALAM::Value> opval = mapit->second;
+                operands.push_back(opval);
+            }
+        }
+
+    #if USE_LLVM_AP_VALUES
+        #if (LLVM_VERSION_MAJOR <= 9)
+            auto rounding = llvm::APFloat::roundingMode::rmNearestTiesToEven;
+        #else
+            auto rounding = llvm::APFloat::roundingMode::NearestTiesToEven;
+        #endif
+    #endif
+
+        switch(ce->getOpcode()) {
+            case llvm::Instruction::Trunc:
+            {
+                auto opdata = operands.front()->getIntRegValue();
+            #if USE_LLVM_AP_VALUES
+                addAPIntRegister(opdata.trunc(size));
+            #else
+                addAPIntRegister(opdata);
+            #endif
+                break;
+            }
+            case llvm::Instruction::ZExt:
+            {
+                auto opdata = operands.front()->getIntRegValue();
+            #if USE_LLVM_AP_VALUES
+                opdata.setIsSigned(false);
+                addAPIntRegister(opdata.extend(size));
+            #else
+                addAPIntRegister(opdata);
+            #endif
+                break;
+            }
+            case llvm::Instruction::SExt:
+            {
+            #if USE_LLVM_AP_VALUES
+                auto opdata = operands.front()->getIntRegValue();
+                opdata.setIsSigned(true);
+                addAPIntRegister(opdata.extend(size));
+            #else
+                int64_t tmp = operands.front()->getSIntRegValue();
+                addAPIntRegister((uint64_t)tmp);
+            #endif
+                break;
+            }
+            case llvm::Instruction::FPToUI:
+            {
+            #if USE_LLVM_AP_VALUES
+                llvm::APSInt tmp(size, true);
+                bool exact;
+                auto opdata = operands.front()->getFloatRegValue();
+                auto err = opdata.convertToInteger(tmp,
+                                                  rounding,
+                                                  &exact);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPIntRegister(tmp);
+            #else
+                if (operands.front()->getSize() == 32) {
+                    auto opdata = operands.front()->getFloatFromReg();
+                    addAPIntRegister((uint64_t)opdata);
+                } else {
+                    auto opdata = operands.front()->getDoubleFromReg();
+                    addAPIntRegister((uint64_t)opdata);
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::FPToSI:
+            {
+            #if USE_LLVM_AP_VALUES
+                llvm::APSInt tmp(size, false);
+                bool exact;
+                auto opdata = operands.front()->getFloatRegValue();
+                auto err = opdata.convertToInteger(tmp,
+                                                  rounding,
+                                                  &exact);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPIntRegister(tmp);
+            #else
+                if (operands.front()->getSize() == 32) {
+                    auto opdata = operands.front()->getFloatFromReg();
+                    addAPIntRegister((uint64_t)(int64_t)opdata);
+                } else {
+                    auto opdata = operands.front()->getDoubleFromReg();
+                    addAPIntRegister((uint64_t)(int64_t)opdata);
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::UIToFP:
+            {
+            #if USE_LLVM_AP_VALUES
+                auto opdata = operands.front()->getIntRegValue();
+                llvm::APFloat tmp(irtype->getFltSemantics());
+                auto err = tmp.convertFromAPInt(opdata, false, rounding);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPFloatRegister(tmp);
+            #else
+                auto opdata = operands.front()->getUIntRegValue();
+                switch (size) {
+                    case 32:
+                    {
+                        float tmp = (float)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    case 64:
+                    {
+                        double tmp = (double)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    default:
+                    {
+                        assert(0 &&
+                            "Must use AP values for nonstandard FP sizes.");
+                        break;
+                    }
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::SIToFP:
+            {
+            #if USE_LLVM_AP_VALUES
+                auto opdata = operands.front()->getIntRegValue();
+                llvm::APFloat tmp(irtype->getFltSemantics());
+                auto err = tmp.convertFromAPInt(opdata, false, rounding);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPFloatRegister(tmp);
+            #else
+                auto opdata = operands.front()->getSIntRegValue();
+                switch (size) {
+                    case 32:
+                    {
+                        float tmp = (float)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    case 64:
+                    {
+                        double tmp = (double)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    default:
+                    {
+                        assert(0 &&
+                            "Must use AP values for nonstandard FP sizes.");
+                        break;
+                    }
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::FPTrunc:
+            {
+            #if USE_LLVM_AP_VALUES
+                auto opdata = operands.front()->getFloatRegValue();
+                llvm::APFloat tmp(opdata);
+                bool losesInfo;
+                auto err = tmp.convert(irtype->getFltSemantics(),
+                                       rounding, &losesInfo);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPFloatRegister(tmp);
+            #else
+                switch (operands.front()->getSize()) {
+                    case 64:
+                    {
+                        double opdata = operands.front()->getDoubleFromReg();
+                        float tmp = (float)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    default:
+                    {
+                        assert(0 &&
+                            "Must use AP values for nonstandard FP sizes.");
+                    }
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::FPExt:
+            {
+            #if USE_LLVM_AP_VALUES
+                auto opdata = operands.front()->getFloatRegValue();
+                llvm::APFloat tmp(opdata);
+                bool losesInfo;
+                auto err = tmp.convert(irtype->getFltSemantics(),
+                                       rounding, &losesInfo);
+                assert(err == llvm::APFloatBase::opStatus::opOK);
+                addAPFloatRegister(tmp);
+            #else
+                switch (operands.front()->getSize()) {
+                    case 32:
+                    {
+                        float opdata = operands.front()->getFloatFromReg();
+                        double tmp = (double)opdata;
+                        addAPFloatRegister(*(uint64_t *)&tmp);
+                        break;
+                    }
+                    default:
+                    {
+                        assert(0 &&
+                            "Must use AP values for nonstandard FP sizes.");
+                    }
+                }
+            #endif
+                break;
+            }
+            case llvm::Instruction::PtrToInt:
+            {
+                auto opdata = operands.front()->getReg()->getPtrData();
+            #if USE_LLVM_AP_VALUES
+                addAPIntRegister(llvm::APInt(64, opdata));
+            #else
+                addAPIntRegister(opdata);
+            #endif
+                break;
+            }
+            case llvm::Instruction::IntToPtr:
+            {
+                auto opdata = operands.front()->getIntRegValue();
+            #if USE_LLVM_AP_VALUES
+                assert(opdata.isUnsigned());
+                int64_t tmp = opdata.getExtValue();
+                addPointerRegister(*(uint64_t *)&tmp, false, false);
+            #else
+                addPointerRegister(opdata, false, false);
+            #endif
+                break;
+            }
+            default:
+                assert(0); // We do not support this nested ConstantExpr
+        }
+    } else {
+        assert(0); // The value is not a supported type of llvm::Constant
+    }
+}
+
+SALAM::GlobalConstant::GlobalConstant(uint64_t id, gem5::SimObject * owner, bool dbg) :
+                                      Constant(id, owner, dbg)
+{
+}
+
+void
+SALAM::GlobalConstant::initialize(llvm::Value * irval,
+                                  SALAM::irvmap * irmap,
+                                  SALAM::valueListTy * values)
+{
+    // Parse the initializer of the value
+    auto glb = llvm::dyn_cast<llvm::GlobalVariable>(irval);
+    assert(glb);
+    assert(glb->hasInitializer());
+    // glb->getInitializer()->print(llvm::outs());
+
+    //Initialize SALAM::ConstantData
+    SALAM::Constant::initialize(glb->getInitializer(), irmap, values);
+}
+
+SALAM::Argument::Argument(uint64_t id, gem5::SimObject * owner, bool dbg) :
+                          Value(id, owner, dbg)
+{
+}
+
+void
+SALAM::Argument::initialize(llvm::Value * irval, SALAM::irvmap * irmap)
+{
+    //Initialize SALAM::Value
+    SALAM::Value::initialize(irval, irmap);
+    addRegister(irval->getType());
+}
+
+SALAM::Operand::Operand_Debugger::Operand_Debugger()
+{
+
+}
+
+void
+SALAM::Operand::Operand_Debugger::dumper(Operand * op)
+{
+
+}
+
+// copy constructor
+SALAM::Operand::Operand(const SALAM::Operand &copy_val):
+           SALAM::Value(copy_val)
+{
+    lockedValue = copy_val.lockedValue;
+    set = copy_val.set;
+}
+
+// copy constructor from base
+SALAM::Operand::Operand(const SALAM::Value &copy_val):
+           SALAM::Value(copy_val)
+{ // Update here for values in the copied value base class
+    initOperandReg();
+}
+
+SALAM::Operand::Operand(std::shared_ptr<SALAM::Value> copy_val):
+            SALAM::Value(copy_val)
+{
+    initOperandReg();
+}
+
+// operator equals
+SALAM::Operand&
+SALAM::Operand::operator = (SALAM::Operand &copy_val)
+{
+    uid = copy_val.uid;
+      returnReg = copy_val.returnReg;
+    valueTy = copy_val.valueTy;
+    size = copy_val.size;
+    lockedValue = copy_val.lockedValue;
+    set = copy_val.set;
+    return *this;
+}
+
+void
+SALAM::Operand::initOperandReg()
+{
+    bool istracked = false;
+    if (returnReg->isPtr()) {
+        if (dbg) DPRINTFS(Runtime, owner, "Operand Ptr Register Initialized\n");
+        lockedValue = std::make_shared<PointerRegister>(istracked);
+    } else if (returnReg->isInt()) {
+        if (dbg) DPRINTFS(Runtime, owner, "Operand Int Register Initialized\n");
+        lockedValue = std::make_shared<APIntRegister>(size, istracked);
+    } else if (returnReg->isFP()) {
+        if (dbg) DPRINTFS(Runtime, owner, "Operand FP Register Initialized\n");
+        lockedValue =
+            std::make_shared<APFloatRegister>(valueTy, istracked);
+    } else {
+        if (dbg) DPRINTFS(Runtime, owner, "Invalid register type. Dumping Operand details\n");
+        dump();
+        assert(0); // Type is invalid for a register
+    }
+}
+
+void
+SALAM::Operand::initialize(llvm::Value * irval, SALAM::irvmap * irmap)
+{
+    SALAM::Value::initialize(irval, irmap);
+}
+
+void
+SALAM::Operand::updateOperandRegister() {
+    assert(lockedValue);
+    if (lockedValue->isPtr()) {
+        lockedValue->writePtrData(returnReg->getPtrData(true),
+                                  getSizeInBytes());
+    } else if (lockedValue->isInt()) {
+        lockedValue->writeIntData(returnReg->getIntData(true));
+    } else if (lockedValue->isFP()) {
+        lockedValue->writeFloatData(returnReg->getFloatData(true));
+    }
+}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/operand.hh gem5-SALAM/src/hwacc/LLVMRead/src/operand.hh
--- gem5/src/hwacc/LLVMRead/src/operand.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/operand.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,107 @@
+#ifndef __HWACC_OPERAND_HH__
+#define __HWACC_OPERAND_HH__
+//------------------------------------------//
+#include "llvm/IR/Value.h"
+#include "llvm/IR/GlobalVariable.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/ADT/APSInt.h"
+#include "llvm/ADT/APFloat.h"
+#include "llvm/IR/Instructions.h"
+#include <llvm-c/Core.h>
+#include "debug_flags.hh"
+#include "value.hh"
+#include "registers.hh"
+#include <map>
+#include <memory>
+#include <vector>
+
+namespace SALAM
+{
+
+
+class Operand: public Value
+{
+    private:
+        std::shared_ptr<SALAM::Register> lockedValue;
+        bool set = false;
+
+    protected:
+        class Operand_Debugger: public Debugger
+        {
+            public:
+                Operand_Debugger();
+                ~Operand_Debugger() = default;
+                virtual void dumper(SALAM::Operand *op);
+        };
+
+        Operand_Debugger* op_dbg;
+    public:
+        void dump() { if (dbg) op_dbg->dumper(this); }
+        void initOperandReg();
+        //Operand(uint64_t id);
+        Operand(const SALAM::Value &copy_val);
+        Operand(const Operand &copy_val);
+        Operand(std::shared_ptr<SALAM::Value> copy_val);
+        Operand& operator = (Operand &copy_val);
+        ~Operand() = default;
+        //Value *clone() { return new Operand(*this); }
+        virtual void initialize(llvm::Value * irval, irvmap * irmap) override;
+        void updateOperandRegister();
+
+        virtual uint64_t getPtrRegValue() { return lockedValue->getPtrData(); }
+    #if USE_LLVM_AP_VALUES
+        virtual llvm::APFloat getFloatRegValue() { return lockedValue->getFloatData(); }
+        virtual llvm::APSInt getIntRegValue() { return lockedValue->getIntData(); }
+        virtual bool hasIntVal() { return lockedValue->isInt(); }
+        virtual bool hasPtrVal() { return lockedValue->isPtr(); }
+    #else
+        virtual uint64_t getFloatRegValue() { return lockedValue->getFloatData(); }
+        virtual float getFloatFromReg() { return lockedValue->getFloat(); }
+        virtual double getDoubleFromReg() { return lockedValue->getDouble(); }
+        virtual uint64_t getIntRegValue() { return lockedValue->getIntData(); }
+        virtual uint64_t getUIntRegValue() { return lockedValue->getUnsignedInt(); }
+        virtual int64_t getSIntRegValue() { return lockedValue->getSignedInt(size); }
+        virtual bool hasIntVal() { return lockedValue->isInt(); }
+        virtual bool hasPtrVal() { return lockedValue->isPtr(); }
+    #endif
+        std::shared_ptr<SALAM::Register> getOpRegister() { return lockedValue; }
+};
+
+class Constant: public Value {
+    private:
+    protected:
+        SALAM::valueListTy operands;
+    public:
+        Constant(uint64_t id, gem5::SimObject * owner, bool dbg);
+        ~Constant() = default;
+        virtual bool isConstant() { return true; }
+        //Value *clone() { return new Constant(*this); }
+        virtual void initialize(llvm::Value * irval, irvmap * irmap, SALAM::valueListTy * values);
+};
+
+class GlobalConstant : public Constant {
+    private:
+    protected:
+    public:
+        GlobalConstant(uint64_t id, gem5::SimObject * owner, bool dbg);
+        ~GlobalConstant() = default;
+        virtual bool isGlobalConstant() { return true; }
+        //Value *clone() { return new GlobalConstant(*this); }
+        virtual void initialize(llvm::Value * irval, irvmap * irmap, SALAM::valueListTy * values) override;
+};
+
+class Argument : public Value {
+    private:
+    protected:
+    public:
+        Argument(uint64_t id, gem5::SimObject * owner, bool dbg);
+        ~Argument() = default;
+        virtual bool isArgument() { return true; }
+        //Value *clone() { return new Argument(*this); }
+        virtual void initialize(llvm::Value * irval, irvmap * irmap) override;
+};
+
+}
+
+//------------------------------------------//
+#endif //__HWACC_OPERAND_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/registers.cc gem5-SALAM/src/hwacc/LLVMRead/src/registers.cc
--- gem5/src/hwacc/LLVMRead/src/registers.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/registers.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,368 @@
+//------------------------------------------//
+#include "registers.hh"
+//------------------------------------------//
+
+SALAM::Register::Register(bool trk,
+                          bool nul) :
+                          tracked(trk),
+                          isNULL(nul)
+{
+}
+
+SALAM::Register::~Register()
+{
+}
+
+SALAM::Register::Register_Debugger::Register_Debugger()
+{
+}
+
+void
+SALAM::Register::Register_Debugger::dumper(SALAM::Register *reg)
+{
+}
+
+
+SALAM::APFloatRegister::APFloatRegister(llvm::Type * T,
+                                        bool tracked) :
+                                        Register(tracked)
+{
+    #if USE_LLVM_AP_VALUES
+    switch (T->getTypeID()) {
+        case llvm::Type::FloatTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEsingle());
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEdouble());
+            break;
+        }
+        case llvm::Type::HalfTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEhalf());
+            break;
+        }
+        case llvm::Type::X86_FP80TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::x87DoubleExtended());
+            break;
+        }
+        case llvm::Type::FP128TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEquad());
+            break;
+        }
+        case llvm::Type::PPC_FP128TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::PPCDoubleDouble());
+            break;
+        }
+        default:
+            assert(0 && "Specified Floating Point type is not supported");
+    }
+    #else
+    switch (T->getTypeID()) {
+        case llvm::Type::FloatTyID:
+        {
+            data = 0;
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            data = 0;
+            break;
+        }
+        default:
+            assert(0 && "Specified Floating Point type is not supported");
+    }
+    #endif
+}
+
+SALAM::APFloatRegister::APFloatRegister(llvm::Type::TypeID T,
+                                        bool tracked) :
+                                        Register(tracked)
+{
+    #if USE_LLVM_AP_VALUES
+    switch (T) {
+        case llvm::Type::FloatTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEsingle());
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEdouble());
+            break;
+        }
+        case llvm::Type::HalfTyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEhalf());
+            break;
+        }
+        case llvm::Type::X86_FP80TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::x87DoubleExtended());
+            break;
+        }
+        case llvm::Type::FP128TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::IEEEquad());
+            break;
+        }
+        case llvm::Type::PPC_FP128TyID:
+        {
+            data = llvm::APFloat::getZero(llvm::APFloat::PPCDoubleDouble());
+            break;
+        }
+        default:
+            assert(0 && "Specified Floating Point type is not supported");
+    }
+    #else
+    switch (T) {
+        case llvm::Type::FloatTyID:
+        {
+            data = 0;
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            data = 0;
+            break;
+        }
+        default:
+            assert(0 && "Specified Floating Point type is not supported");
+    }
+    #endif
+}
+
+SALAM::APFloatRegister::APFloatRegister(const llvm::APFloat &RHS) :
+                                        Register(false)
+{
+    #if USE_LLVM_AP_VALUES
+        data = (RHS);
+    #else
+        auto bitcast = RHS.bitcastToAPInt();
+        data = (uint64_t)(bitcast.getLimitedValue());
+        regdata = data;
+    #endif
+}
+
+SALAM::APIntRegister::APIntRegister(llvm::Type * T,
+                                    bool tracked) :
+                                    Register(tracked)
+{
+    #if USE_LLVM_AP_VALUES
+        llvm::IntegerType * it = llvm::dyn_cast<llvm::IntegerType>(T);
+        assert(it);
+        data = llvm::APSInt::getMinValue(it->getBitWidth(), true);
+    #else
+        data = 0;
+    #endif
+}
+
+SALAM::APIntRegister::APIntRegister(uint64_t bitwidth,
+                                    bool tracked) :
+                                    Register(tracked)
+{
+    #if USE_LLVM_AP_VALUES
+        data = llvm::APSInt::getMinValue(bitwidth), true);
+    #else
+        data = 0;
+    #endif
+}
+
+SALAM::APIntRegister::APIntRegister(const llvm::APInt &RHS) :
+                                    Register(false)
+{
+    #if USE_LLVM_AP_VALUES
+        data = RHS;
+    #else
+        data = (uint64_t)(RHS.getLimitedValue());
+        regdata = data;
+    #endif
+}
+
+SALAM::PointerRegister::PointerRegister(bool tracked,
+                                        bool isNull) :
+                                        Register(tracked,
+                                        isNull),
+                                        pointer(0)
+{
+}
+
+SALAM::PointerRegister::PointerRegister(uint64_t val,
+                                        bool tracked,
+                                        bool isNull) :
+                                        Register(tracked,
+                                        isNull),
+                                        pointer(val)
+{
+}
+
+#if USE_LLVM_AP_VALUES
+    llvm::APFloat
+    SALAM::APFloatRegister::getFloatData(bool incReads)
+    {
+        if (incReads && tracked) reads++;
+        return data;
+    }
+
+    void
+    SALAM::APFloatRegister::writeFloatData(llvm::APFloat apf, bool incWrites)
+    {
+        if (incWrites && tracked) writes++;
+        data = apf;
+    }
+#else
+    uint64_t
+    SALAM::APFloatRegister::getFloatData(bool incReads)
+    {
+        if (incReads && tracked) reads++;
+        return data;
+    }
+
+    float
+    SALAM::APFloatRegister::getFloat(bool incReads) {
+        if (incReads && tracked) reads++;
+        return *(float *)&data;
+    }
+
+    double
+    SALAM::APFloatRegister::getDouble(bool incReads) {
+        if (incReads && tracked) reads++;
+        return *(double *)&data;
+    }
+
+    void
+    SALAM::APFloatRegister::writeFloatData(uint64_t apf, size_t len, bool incWrites)
+    {
+        if (incWrites && tracked) writes++;
+        std::memcpy(&data, &apf, len);
+        regdata = data;
+    }
+#endif
+
+#if USE_LLVM_AP_VALUES
+    llvm::APSInt
+    SALAM::APIntRegister::getIntData(bool incReads)
+    {
+        if (incReads && tracked) reads++;
+        return data;
+    }
+
+    void
+    SALAM::APIntRegister::writeIntData(llvm::APInt api, bool incWrites)
+    {
+        if (incWrites && tracked) writes++;
+        data = api;
+    }
+#else
+    uint64_t
+    SALAM::APIntRegister::getIntData(bool incReads)
+    {
+        if (incReads && tracked) reads++;
+        return data;
+    }
+
+    uint64_t
+    SALAM::APIntRegister::getUnsignedInt(bool incReads) {
+        if (incReads && tracked) reads++;
+        return data;
+    }
+
+    int64_t
+    SALAM::APIntRegister::getSignedInt(size_t sizeInBits, bool incReads) {
+        if (incReads && tracked) reads++;
+        int64_t tmp;
+        switch (sizeInBits) {
+            case 8:
+            {
+                tmp = (int64_t)((int8_t)(data));
+                break;
+            }
+            case 16:
+            {
+                tmp = (int64_t)((int16_t)(data));
+                break;
+            }
+            case 32:
+            {
+                tmp = (int64_t)((int32_t)(data));
+                break;
+            }
+            case 64:
+            {
+                tmp = (int64_t)(data);
+                break;
+            }
+            default:
+            {
+                assert(0 && "Must use AP values for nonstandard int sizes.");
+                break;
+            }
+        }
+        return tmp;
+    }
+
+    void
+    SALAM::APIntRegister::writeIntData(uint64_t api, size_t len, bool incWrites)
+    {
+        if (incWrites && tracked) writes++;
+        std::memcpy(&data, &api, len);
+        regdata = data;
+    }
+#endif
+uint64_t
+SALAM::PointerRegister::getPtrData(bool incReads)
+{
+    if (incReads && tracked) reads++;
+    return pointer;
+}
+
+void
+SALAM::PointerRegister::writePtrData(uint64_t ptr, size_t len, bool incWrites)
+{
+    if (incWrites && tracked) writes++;
+    std::memcpy(&pointer, &ptr, len);
+    regdata = pointer;
+}
+
+#include <sstream>
+#include <ios>
+
+std::string
+SALAM::APFloatRegister::dataString() {
+    std::stringstream ss;
+#if USE_LLVM_AP_VALUES
+
+#else
+    float fdata = *(float*)&data;
+    double ddata = *(double*)&data;
+    ss << fdata << "f " << ddata << "d";
+#endif
+    return ss.str();
+}
+
+std::string
+SALAM::APIntRegister::dataString() {
+    std::stringstream ss;
+#if USE_LLVM_AP_VALUES
+
+#else
+    ss << "0x" << std::hex << data;
+#endif
+    return ss.str();
+}
+
+std::string
+SALAM::PointerRegister::dataString() {
+    std::stringstream ss;
+#if USE_LLVM_AP_VALUES
+
+#else
+    ss << "0x" << std::hex << pointer;
+#endif
+    return ss.str();
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/registers.hh gem5-SALAM/src/hwacc/LLVMRead/src/registers.hh
--- gem5/src/hwacc/LLVMRead/src/registers.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/registers.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,203 @@
+#ifndef __HWACC_REGISTERS_HH__
+#define __HWACC_REGISTERS_HH__
+
+#include "debug_flags.hh"
+#include "llvm/IR/Value.h"
+#include "llvm/IR/GlobalVariable.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/ADT/APSInt.h"
+#include "llvm/ADT/APFloat.h"
+#include <llvm-c/Core.h>
+
+#define USE_LLVM_AP_VALUES 0
+
+namespace SALAM
+{
+/*****************************************************************************
+* Register is the data storage container for SALAM::Values.
+* Every instruction and function argument has a corresponding register that
+* is tracked for power/area/timing. Additionally Constants have corresponding
+* registers, which are not tracked, since they do not have a timing component.
+*****************************************************************************/
+class Register
+{
+    protected:
+        bool tracked;
+        bool isNULL = false;
+        bool dbg = false;
+        uint64_t reads = 0;
+        uint64_t writes = 0;
+        uint64_t regdata;
+
+        class Register_Debugger: public Debugger
+        {
+            public:
+                Register_Debugger();
+                ~Register_Debugger() = default;
+                virtual void dumper(SALAM::Register *reg);
+        };
+
+        Register_Debugger reg_dbg;
+
+    public:
+        Register(bool trk=true,
+                 bool nul=false);
+        ~Register();
+    #if USE_LLVM_AP_VALUES
+        virtual llvm::APFloat getFloatData(bool incReads=true) {
+            assert(0 && "Attempted to read float data from non-float register");
+            return llvm::APFloat::getNaN(llvm::APFloat::IEEEdouble());
+        }
+        virtual llvm::APSInt getIntData(bool incReads=true) {
+            assert(0 && "Attempted to read integer data from non-integer register");
+            return llvm::APSInt::getMinValue(1,true);
+        }
+    #else
+        virtual uint64_t getFloatData(bool incReads=true) {
+            assert(0 && "Attempted to read float data from non-float register");
+            return 0;
+        }
+        virtual float getFloat(bool incReads=true) {
+            assert(0 && "Attempted to read float data from non-float register");
+            return NAN;
+        }
+        virtual double getDouble(bool incReads=true) {
+            assert(0 && "Attempted to read float data from non-float register");
+            return NAN;
+        }
+        virtual uint64_t getIntData(bool incReads=true) {
+            assert(0 && "Attempted to read integer data from non-integer register");
+            return 0;
+        }
+        virtual uint64_t getUnsignedInt(bool incReads=true) {
+            assert(0 && "Attempted to read integer data from non-integer register");
+            return 0;
+        }
+        virtual int64_t getSignedInt(size_t sizeInBits, bool incReads=true) {
+            assert(0 && "Attempted to read integer data from non-integer register");
+            return 0;
+        }
+    #endif
+        virtual uint64_t getPtrData(bool incReads=true) {
+            assert(0 && "Attempted to read pointer data from non-pointer register");
+            return 0;
+        }
+    #if USE_LLVM_AP_VALUES
+        virtual void writeFloatData(llvm::APFloat apf, bool incWrites=true) {
+            assert(0 && "Attempted to write float data on non-float register");
+        }
+        virtual void writeIntData(llvm::APInt api, bool incWrites=true) {
+            assert(0 && "Attempted to write interger data on non-integer register");
+        }
+    #else
+        virtual void writeFloatData(uint64_t apf, size_t len=8, bool incWrites=true) {
+            assert(0 && "Attempted to write float data on non-float register");
+        }
+        virtual void writeIntData(uint64_t api, size_t len=8, bool incWrites=true) {
+            assert(0 && "Attempted to write interger data on non-integer register");
+        }
+    #endif
+        virtual void writePtrData(uint64_t ptr, size_t len=8, bool incWrites=true) {
+            assert(0 && "Attempted to write pointer data on non-pointer register");
+        }
+        virtual bool isInt() { return false; }
+        virtual bool isFP() { return false; }
+        virtual bool isPtr() { return false; }
+        bool isTracked() { return tracked; }
+        bool isNull() { return isNULL; }
+        void setNull(bool flag) { isNULL = flag; }
+        void setTracked(bool flag) { tracked = flag; }
+        void dump() { if (dbg) reg_dbg.dumper(this); }
+        uint64_t getReads() { return reads; }
+        uint64_t getWrites() { return writes; }
+        virtual std::string dataString() = 0;
+};
+
+class APFloatRegister : public Register
+{
+    private:
+    #if USE_LLVM_AP_VALUES
+        llvm::APFloat data = llvm::APFloat::getZero(llvm::APFloat::IEEEdouble());
+    #else
+        // We use uint64_t to store the bitcast of the FP value.
+        // Compute should be performed after bitcasting back to appropriate type
+        uint64_t data = 0;
+    #endif
+    public:
+        APFloatRegister(llvm::Type::TypeID T,
+                        bool isTracked);
+        APFloatRegister(llvm::Type *T,
+                        bool isTracked=true);
+        // This constructor is only used for constants.
+        APFloatRegister(const llvm::APFloat &RHS);
+        // ~APFloatRegister() { if (data) delete data; }
+    #if USE_LLVM_AP_VALUES
+        virtual llvm::APFloat getFloatData(bool incReads=true) override;
+        virtual void writeFloatData(llvm::APFloat apf, bool incWrites=true) override;
+    #else
+        // This constructor is only used for constants.
+        APFloatRegister(const uint64_t RHS) : Register(false) {
+            data = RHS;
+            regdata = data;    
+        }
+        virtual uint64_t getFloatData(bool incReads=true) override;
+        virtual float getFloat(bool incReads=true) override;
+        virtual double getDouble(bool incReads=true) override;
+        virtual void writeFloatData(uint64_t apf, size_t len=8, bool incWrites=true) override;
+    #endif
+        virtual bool isFP() override { return true; }
+        virtual std::string dataString() override;
+};
+
+class APIntRegister : public Register
+{
+    private:
+    #if USE_LLVM_AP_VALUES
+        llvm::APSInt data = llvm::APSInt::getMinValue(1,true);
+    #else
+        uint64_t data = 0;
+    #endif
+    public:
+        APIntRegister(uint64_t bitwidth,
+                      bool isTracked);
+        APIntRegister(llvm::Type * T,
+                      bool isTracked=true);
+        // This constructor is only used for constants.
+        APIntRegister(const llvm::APInt &RHS);
+        // ~APIntRegister() { if (data) delete data; }
+    #if USE_LLVM_AP_VALUES
+        virtual llvm::APSInt getIntData(bool incReads=true) override;
+        virtual void writeIntData(llvm::APInt api, bool incWrites=true) override;
+    #else
+        // This constructor is only used for constants.
+        APIntRegister(const uint64_t RHS) : Register(false) {
+            data = RHS;
+            regdata = data;
+        }
+        virtual uint64_t getIntData(bool incReads=true) override;
+        virtual uint64_t getUnsignedInt(bool incReads=true) override;
+        virtual int64_t getSignedInt(size_t sizeInBits, bool incReads=true) override;
+        virtual void writeIntData(uint64_t api, size_t len=8, bool incWrites=true) override;
+    #endif
+        virtual bool isInt() override { return true; }
+        virtual std::string dataString() override;
+};
+
+class PointerRegister : public Register
+{
+    private:
+        uint64_t pointer = 0;
+    public:
+        PointerRegister(bool isTracked=true,
+                        bool isNull=false);
+        PointerRegister(uint64_t val,
+                        bool isTracked=true,
+                        bool isNull=false);
+        // ~PointerRegister() { if (pointer) delete pointer; }
+        virtual bool isPtr() override { return true; }
+        virtual uint64_t getPtrData(bool incReads=true) override;
+        virtual void writePtrData(uint64_t ptr, size_t len=8, bool incWrites=true) override;
+        virtual std::string dataString() override;
+};
+} // End SALAM Namespace
+#endif
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/value.cc gem5-SALAM/src/hwacc/LLVMRead/src/value.cc
--- gem5/src/hwacc/LLVMRead/src/value.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/value.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,303 @@
+#include "value.hh"
+#include "llvm/Support/raw_ostream.h"
+#include "llvm/IR/Instruction.h"
+#include "sim/sim_object.hh"
+
+SALAM::Value::Value(uint64_t id, gem5::SimObject * _owner, bool _dbg) {
+    uid = id;
+    size = 0;
+    owner = _owner;
+    dbg = _dbg;
+}
+
+SALAM::Value::~Value()
+{
+}
+
+// copy constructor
+SALAM::Value::Value(const Value &copy_val)
+{
+    uid = copy_val.uid;
+    returnReg = copy_val.returnReg;
+    valueTy = copy_val.valueTy;
+    size = copy_val.size;
+    ir_string = copy_val.ir_string;
+    ir_stub = copy_val.ir_stub;
+    owner = copy_val.owner;
+    dbg = copy_val.dbg;
+}
+
+SALAM::Value::Value(std::shared_ptr<SALAM::Value> copy_val)
+{
+    uid = copy_val->getUID();
+    returnReg = copy_val->getReg();
+    valueTy = copy_val->getType();
+    size = copy_val->getSize();
+    ir_string = copy_val->getIRString();
+    ir_stub = copy_val->getIRStub();
+    owner = copy_val->getOwner();
+    dbg = copy_val->debug();
+}
+
+// operator equals
+SALAM::Value&
+SALAM::Value::operator = (Value &copy_val)
+{
+    uid = copy_val.uid;
+    returnReg = copy_val.returnReg;
+    valueTy = copy_val.valueTy;
+    size = copy_val.size;
+    ir_string = copy_val.ir_string;
+    ir_stub = copy_val.ir_stub;
+    return *this;
+}
+
+SALAM::Value::Value_Debugger::Value_Debugger()
+{
+}
+
+void
+SALAM::Value::Value_Debugger::dumper(SALAM::Value *value)
+{
+}
+
+void
+SALAM::Value::initialize(llvm::Value * irval, SALAM::irvmap * irmap) {
+    llvm::Type *irtype = irval->getType();
+    if (irtype->getTypeID() == llvm::Type::PointerTyID) {
+        size = 64; //We assume a 64-bit memory address space
+    } else {
+        size = irtype->getScalarSizeInBits();
+    }
+    valueTy = irtype->getTypeID();
+    // Link Return Register
+    if (size>0) addRegister(irtype, true);
+
+    std::string tmpStr1;
+    llvm::raw_string_ostream ss(tmpStr1);
+    ss << *irval;
+    ir_string = ss.str();
+
+    std::string tmpStr2;
+    llvm::raw_string_ostream ss2(tmpStr2);
+    irval->printAsOperand(ss2);
+    ir_stub = ss2.str();
+}
+
+void
+SALAM::Value::addRegister(llvm::Type *irtype, bool istracked) {
+    if (irtype->isPointerTy()) {
+        returnReg = std::make_shared<PointerRegister>(istracked);
+    } else if (irtype->isIntegerTy()) {
+        returnReg = std::make_shared<APIntRegister>(irtype, istracked);
+    } else if (irtype->isFloatingPointTy()) {
+        returnReg = std::make_shared<APFloatRegister>(irtype, istracked);
+    } else {
+        //assert(0); // Type is invalid for a register
+        returnReg = nullptr;
+    }
+}
+
+#if USE_LLVM_AP_VALUES
+    void
+    SALAM::Value::addAPIntRegister(const llvm::APInt & val) {
+
+        assert(irtype->isIntegerTy());
+        returnReg = std::make_shared<APIntRegister>(val);
+    }
+    void
+    SALAM::Value::addAPIntRegister(const llvm::APSInt & val) {
+
+        assert(irtype->isIntegerTy());
+        returnReg = std::make_shared<APIntRegister>(val);
+    }
+    void
+    SALAM::Value::addAPFloatRegister(const llvm::APFloat & val) {
+
+        assert(irtype->isFloatingPointTy());
+        returnReg = std::make_shared<APFloatRegister>(val);
+    }
+#else
+    void
+    SALAM::Value::addAPIntRegister(const uint64_t & val) {
+
+        assert(valueTy == llvm::Type::IntegerTyID);
+        uint64_t bitmask = 0;
+        assert((size <= 64) &&
+            "Only 64-bit and smaller values are \
+             supported when not using AP values.");
+        bitmask = (bitmask - 1) >> (64 - size);
+        returnReg = std::make_shared<APIntRegister>(val & bitmask);
+    }
+    void
+    SALAM::Value::addAPFloatRegister(const uint64_t & val) {
+
+        assert((valueTy == llvm::Type::FloatTyID) ||
+                valueTy == llvm::Type::DoubleTyID);
+        uint64_t bitmask = 0;
+        assert((size <= 64) &&
+            "Only 64-bit and smaller values are \
+            supported when not using AP values.");
+        bitmask = (bitmask - 1) >> (64 - size);
+        returnReg = std::make_shared<APFloatRegister>(val & bitmask);
+    }
+#endif
+
+void
+SALAM::Value::addPointerRegister(bool istracked, bool isnull) {
+    assert(valueTy == llvm::Type::PointerTyID);
+    returnReg = std::make_shared<PointerRegister>(istracked, isnull);
+}
+void
+SALAM::Value::addPointerRegister(uint64_t val, bool istracked, bool isnull) {
+    assert(valueTy == llvm::Type::PointerTyID);
+    returnReg = std::make_shared<PointerRegister>(val, istracked, isnull);
+}
+
+#if USE_LLVM_AP_VALUES
+    void
+    SALAM::Value::setRegisterValue(const llvm::APInt &data) {
+
+        if (dbg) DPRINTFS(Runtime, owner, "| APInt Register\n");
+        if (returnReg->isInt()) {
+            returnReg->writeIntData(data);
+        } else {
+            if (dbg) DPRINTFS(Runtime, owner, "Unsupported type for register operation. \
+                Tried to place integer data in non-integer register.\n");
+        }
+    }
+    void
+    SALAM::Value::setRegisterValue(const llvm::APFloat &data) {
+
+        if (dbg) DPRINTFS(Runtime, owner, "| APFloat Register\n");
+        if (returnReg->isFP()) {
+            returnReg->writeFloatData(data);
+        } else {
+            if (dbg) DPRINTFS(Runtime, owner, "Unsupported type for register operation. \
+                Tried to place float data in non-float register.\n");
+        }
+    }
+#endif
+
+void
+SALAM::Value::setRegisterValue(const uint64_t data) {
+    if (returnReg->isPtr()) {
+        if (dbg) DPRINTFS(Runtime, owner, "| Ptr Register\n");
+        returnReg->writePtrData(data);
+    } else {
+    #if USE_LLVM_AP_VALUES
+        if (dbg) DPRINTFS(Runtime, owner, "Unsupported type for register operation. \
+            Tried to place Ptr data in non-Ptr register.\n");
+    #else
+        if (returnReg->isInt()) {
+            if (dbg) DPRINTFS(Runtime, owner, "| Int Register\n");
+            returnReg->writeIntData(data, getSizeInBytes());
+        } else {
+            if (dbg) DPRINTFS(Runtime, owner, "| FP Register\n");
+            returnReg->writeFloatData(data, getSizeInBytes());
+        }
+    #endif
+    }
+}
+void
+SALAM::Value::setRegisterValue(uint8_t * data) {
+    if (dbg) DPRINTFS(Runtime, owner, "| Set Register Data - ");
+    switch (valueTy) {
+    #if USE_LLVM_AP_VALUES
+        case llvm::Type::FloatTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Float\n");
+            float tmpData;
+            std::memcpy(&tmpData, data, sizeof(float));
+            setRegisterValue(llvm::APFloat(tmpData));
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Double\n");
+            double tmpData;
+            std::memcpy(&tmpData, data, sizeof(double));
+            setRegisterValue(llvm::APFloat(tmpData));
+            break;
+        }
+        case llvm::Type::IntegerTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Integer Type | Size = %d\n", size);
+            if (size > 64) {
+                size_t bigIntLen = ((size - 1) / 64) + 1;
+                setRegisterValue(llvm::APInt(size,
+                    llvm::ArrayRef<uint64_t>((uint64_t *)data, bigIntLen)));
+            } else {
+                setRegisterValue(llvm::APInt(size, *(uint64_t *)(data)));
+            }
+            break;
+        }
+    #else
+        case llvm::Type::FloatTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Float\n");
+            returnReg->writeFloatData(*(uint64_t *)data, (size_t)4);
+            break;
+        }
+        case llvm::Type::DoubleTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Double\n");
+            returnReg->writeFloatData(*(uint64_t *)data, (size_t)8);
+            break;
+        }
+        case llvm::Type::IntegerTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Integer Type | Size = %d\n", size);
+            returnReg->writeIntData(*(uint64_t *)data,
+                                    (size_t)getSizeInBytes());
+            break;
+        }
+    #endif
+        case llvm::Type::PointerTyID:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Pointer\n");
+            returnReg->writePtrData(*(uint64_t *)data);
+            break;
+        }
+        default:
+        {
+            if (dbg) DPRINTFS(Runtime, owner, "Unsupported type for register operation\n");
+            assert(0);
+        }
+    }
+}
+
+void
+SALAM::Value::setRegisterValue(bool data) {
+    if (dbg) DPRINTFS(Runtime, owner, "| Int Register\n");
+    if (returnReg->isInt()) {
+    #if USE_LLVM_AP_VALUES
+        if (data) {
+            setRegisterValue(llvm::APInt::getAllOnesValue(1));
+        } else {
+            setRegisterValue(llvm::APInt::getNullValue(1));
+        }
+    #else
+        if (data) {
+            setRegisterValue((uint64_t)1);
+        } else {
+            setRegisterValue((uint64_t)0);
+        }
+    #endif
+    } else {
+        if (dbg) DPRINTFS(Runtime, owner, "Unsupported type for register operation. \
+            Tried to place integer data in non-integer register.\n");
+    }
+}
+
+void
+SALAM::Value::setRegisterValue(std::shared_ptr<SALAM::Register> reg) {
+    if (reg->isPtr()) {
+        setRegisterValue((reg->getPtrData()));
+    } else if (reg->isFP()) {
+        setRegisterValue((reg->getFloatData()));
+    } else {
+        setRegisterValue((reg->getIntData()));
+    }
+    if (dbg) DPRINTFS(Runtime, owner, "||==setRegisterValue====\n");
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/LLVMRead/src/value.hh gem5-SALAM/src/hwacc/LLVMRead/src/value.hh
--- gem5/src/hwacc/LLVMRead/src/value.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/LLVMRead/src/value.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,143 @@
+#ifndef __SALAM_VALUE_HH__
+#define __SALAM_VALUE_HH__
+
+#include "debug_flags.hh"
+#include "registers.hh"
+#include "llvm/IR/Value.h"
+#include "llvm/IR/GlobalVariable.h"
+#include "llvm/IR/Constants.h"
+#include "llvm/ADT/APSInt.h"
+#include "llvm/ADT/APFloat.h"
+#include <llvm-c/Core.h>
+
+#include <map>
+#include <memory>
+#include <vector>
+
+namespace gem5
+{
+    class SimObject;
+}
+
+namespace SALAM
+{
+class Value;
+typedef std::pair<llvm::Value *, std::shared_ptr<Value>> irvmaptype;
+typedef std::map<llvm::Value *, std::shared_ptr<Value>> irvmap;
+typedef std::vector<std::shared_ptr<Value>> valueListTy;
+
+class Value
+{
+    public:
+
+    protected:
+        uint64_t uid = 0;
+        uint64_t size = 0;
+        gem5::SimObject * owner;
+        std::string ir_string;
+        std::string ir_stub;
+        llvm::Type::TypeID valueTy;
+        std::shared_ptr<SALAM::Register> returnReg;
+        bool dbg = false;
+        bool inst = false;
+
+        void addRegister(llvm::Type *irtype, bool isTracked=true);
+    #if USE_LLVM_AP_VALUES
+        void addAPIntRegister(const llvm::APInt & val);
+        void addAPIntRegister(const llvm::APSInt & val);
+        void addAPFloatRegister(const llvm::APFloat & val);
+    #else
+        void addAPIntRegister(const uint64_t & val);
+        void addAPFloatRegister(const uint64_t & val);
+    #endif
+        void addPointerRegister(bool isTracked=true,
+                                bool isNull=false);
+        void addPointerRegister(uint64_t val,
+                                bool isTracked=true,
+                                bool isNull=false);
+
+        class Value_Debugger: public Debugger
+        {
+            public:
+                Value_Debugger();
+                ~Value_Debugger() = default;
+                virtual void dumper(SALAM::Value * value);
+        }; 
+
+        Value_Debugger* value_dbg;
+        Value(const SALAM::Value &copy_val);
+        Value(std::shared_ptr<SALAM::Value> copy_val);
+
+    public:
+        /** Class Constructor.
+         * @param id 
+         */
+        Value(uint64_t id, gem5::SimObject * _owner, bool _dbg);
+        Value& operator = (Value &copy_val);
+        bool operator == (const Value &v) { return uid == v.uid; }
+        ~Value();
+        virtual void initialize(llvm::Value *irval,
+                                SALAM::irvmap *irmap);
+        uint64_t getSize() { return size; }
+        uint64_t getSizeInBytes() {
+            if (size==0)
+                return 0;
+            else
+                return ((size - 1) >> 3) + 1;
+        }
+        uint64_t getUID() const { return uid; }
+        std::shared_ptr<SALAM::Register> getReg() { return returnReg; }
+        llvm::Type::TypeID getType() { return valueTy; }
+        std::string getIRString() { return ir_string; }
+        std::string getIRStub() { return ir_stub; }
+        gem5::SimObject * getOwner() { return owner; }
+        bool debug() { return dbg; }
+
+        // Helper functions for setting the value of the return register directly from the value
+        // Using these functions will increment the write counters on tracked registers
+        // If you'd like to avoid incrementing write counters, directly pull the register and
+        // use its appropriate write function
+    #if USE_LLVM_AP_VALUES
+        void setRegisterValue(const llvm::APInt &data);
+        void setRegisterValue(const llvm::APFloat &data);
+    #endif
+        void setRegisterValue(const uint64_t data);
+        void setRegisterValue(uint8_t * data);
+        void setRegisterValue(bool data);
+        void setRegisterValue(std::shared_ptr<SALAM::Register> reg);
+
+        // Helper functions for getting the value of the return register directly from the value
+        // Using these functions will increment the read counters on tracked registers
+        // If you'd like to avoid incrementing read counters, directly pull the register and
+        // use its appropriate read function
+        virtual uint64_t getPtrRegValue() { return returnReg->getPtrData(); }
+    #if USE_LLVM_AP_VALUES
+        virtual llvm::APFloat getFloatRegValue() { return returnReg->getFloatData(); }
+        virtual llvm::APSInt getIntRegValue() { return returnReg->getIntData(); }
+    #else
+        virtual uint64_t getFloatRegValue() { return returnReg->getFloatData(); }
+        virtual float getFloatFromReg() { return returnReg->getFloat(); }
+        virtual double getDoubleFromReg() { return returnReg->getDouble(); }
+        virtual uint64_t getIntRegValue() { return returnReg->getIntData(); }
+        virtual uint64_t getUIntRegValue() { return returnReg->getUnsignedInt(); }
+        virtual int64_t getSIntRegValue() { return returnReg->getSignedInt(size); }
+    #endif
+
+        virtual bool isConstant() { return false; }
+        virtual bool isGlobalConstant() { return false; }
+        virtual bool isArgument() { return false; }
+        virtual bool isFunction() { return false; }
+        virtual bool isBasicBlock() { return false; }
+        virtual bool isInstruction() { return false; }
+        virtual uint64_t getOpode() { return -1; }
+
+        void value_dump() { if (dbg) value_dbg->dumper(this); }
+        std::string registerDataString() { return returnReg->dataString(); }
+        std::shared_ptr<SALAM::Value> clone() const { return createClone(); }
+        virtual std::shared_ptr<SALAM::Value> createClone() const { return std::shared_ptr<SALAM::Value>(new SALAM::Value(*this)); }
+
+};
+} // End SALAM Namespace
+
+
+#endif //__SALAM_VALUE_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/noncoherent_dma.cc gem5-SALAM/src/hwacc/noncoherent_dma.cc
--- gem5/src/hwacc/noncoherent_dma.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/noncoherent_dma.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,179 @@
+//------------------------------------------//
+#include "hwacc/noncoherent_dma.hh"
+//------------------------------------------//
+
+NoncoherentDma::NoncoherentDma(const NoncoherentDmaParams &p)
+    : DmaDevice(p),
+    devname(p.devicename),
+    pioAddr(p.pio_addr),
+    pioDelay(p.pio_delay),
+    pioSize(p.pio_size),
+    bufferSize(p.buffer_size),
+    maxPending(p.max_pending),
+    maxReqSize(p.max_req_size),
+    gic(p.gic),
+    intNum(p.int_num),
+    clock_period(p.clock_period),
+    tickEvent([this]{tick();}, name()),
+    accPort(this, sys, p.sid, p.ssid) {
+    memSideReadFifo = new DmaReadFifo(dmaPort, size_t(bufferSize/2), maxReqSize, maxPending);
+    memSideWriteFifo = new DmaWriteFifo(dmaPort, size_t(bufferSize/2), maxReqSize, maxPending);
+    accSideReadFifo = new DmaReadFifo(accPort, size_t(bufferSize/2), maxReqSize, maxPending);
+    accSideWriteFifo = new DmaWriteFifo(accPort, size_t(bufferSize/2), maxReqSize, maxPending);
+    readFifo = nullptr;
+    writeFifo = nullptr;
+    mmreg = new uint8_t[pioSize];
+    for (int i=0; i<pioSize; i++)
+        mmreg[i]=0;
+    FLAGS = mmreg;
+    last_flag = 0;
+    SRC = (uint64_t *)(mmreg+1);
+    DST = (uint64_t *)(mmreg+9);
+    LEN = (int *)(mmreg+17);
+    running = false;
+}
+
+AddrRangeList
+NoncoherentDma::getAddrRanges() const
+{
+    assert(pioSize != 0);
+    AddrRangeList ranges;
+    DPRINTF(AddrRanges, "registering range: %#x-%#x\n", pioAddr, pioSize);
+    ranges.push_back(RangeSize(pioAddr, pioSize));
+    return ranges;
+}
+
+// Select the appropriate DmaReadFifo based on which port holds
+// the active read address
+DmaReadFifo *
+NoncoherentDma::getActiveReadFifo() {
+    AddrRangeList accPortRanges = accPort.getAddrRanges();
+    for (auto range : accPortRanges) {
+        if (range.contains(activeSrc)) return accSideReadFifo;
+    }
+    return memSideReadFifo;
+}
+
+// Select the appropriate DmaWriteFifo based on which port holds
+// the active write address
+DmaWriteFifo *
+NoncoherentDma::getActiveWriteFifo() {
+    AddrRangeList accPortRanges = accPort.getAddrRanges();
+    for (auto range : accPortRanges) {
+        if (range.contains(activeDst)) return accSideWriteFifo;
+    }
+    return memSideWriteFifo;
+}
+
+void
+NoncoherentDma::tick() {
+    if (!running && ((*FLAGS&0x01)==0x01)) {
+        running = true;
+        *FLAGS &= 0xFE;
+        *FLAGS |= 0x02;
+        activeSrc = *SRC;
+        activeDst = *DST;
+        writesLeft = *LEN;
+        DPRINTF(NoncoherentDma, "SRC:0x%016x, DST:0x%016x, LEN:%d\n", activeSrc, activeDst, writesLeft);
+        start_time = curTick();
+        readFifo = getActiveReadFifo();
+        writeFifo = getActiveWriteFifo();
+        readFifo->startFill(activeSrc, writesLeft);
+        writeFifo->startEmpty(activeDst, writesLeft);
+    }
+    if (((last_flag&0x04)==0x04) && ((*FLAGS&0x04) != 0x04)) {
+        //clear interrupts
+        gic->clearInt(intNum);
+    }
+    if (running) {
+        if (writesLeft > 0) {
+            int toWrite = MIN(maxReqSize, writesLeft);
+            if (writeFifo->canFill(toWrite)) {
+                uint8_t * data = new uint8_t[toWrite];
+                if (readFifo->tryGet(data, toWrite)) {
+                    writeFifo->fill(data, toWrite);
+                    writesLeft -= toWrite;
+                }
+                delete[] data;
+            }
+        } else {
+            if (!writeFifo->isActive()) {
+                running = false;
+                *FLAGS &= 0xFD;
+                *FLAGS |= 0x04;
+                //raise interrupts
+                gic->sendInt(intNum);
+                double xfer_time = (double)(curTick() - start_time) * (1e-6);
+                DPRINTF(NoncoherentDma, "Transfer completed in %f us\n", xfer_time);
+            }
+        }
+    }
+	last_flag = *FLAGS;
+    if (!tickEvent.scheduled() && running) {
+        schedule(tickEvent, curTick() + clock_period*1000);
+    }
+}
+
+Tick
+NoncoherentDma::read(PacketPtr pkt) {
+    DPRINTF(DeviceMMR, "The address range associated with this DMA was read!\n");
+
+    Addr offset = pkt->req->getPaddr() - pioAddr;
+
+    uint64_t data;
+
+    data = *(uint64_t *)(mmreg+offset);
+
+    switch(pkt->getSize()) {
+      case 1:
+        pkt->setLE<uint8_t>(data);
+        break;
+      case 2:
+        pkt->setLE<uint16_t>(data);
+        break;
+      case 4:
+        pkt->setLE<uint32_t>(data);
+        break;
+      case 8:
+        pkt->setLE<uint64_t>(data);
+        break;
+      default:
+        panic("Read size too big?\n");
+        break;
+    }
+
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+NoncoherentDma::write(PacketPtr pkt) {
+    DPRINTF(DeviceMMR,
+        "The address range associated with this DMA was written to!\n");
+    DPRINTF(DeviceMMR, "LEN Reg:0x%08x\n", *LEN);
+    DPRINTF(DeviceMMR, "SRC Reg:0x%016x\n", *SRC);
+    DPRINTF(DeviceMMR, "DST Reg:0x%016x\n", *DST);
+    DPRINTF(DeviceMMR, "FLAGS Reg:0x%02x\n", *FLAGS);
+
+    pkt->writeData(mmreg + (pkt->req->getPaddr() - pioAddr));
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, curTick() + clock_period*1000);
+    }
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Port &
+NoncoherentDma::getPort(const std::string &if_name, PortID idx)
+{
+    if (if_name == "cluster_dma") {
+        return accPort;
+    }
+    return DmaDevice::getPort(if_name, idx);
+}
+
+// NoncoherentDma *
+// NoncoherentDmaParams::create() {
+//     return new NoncoherentDma(this);
+// }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/noncoherent_dma.hh gem5-SALAM/src/hwacc/noncoherent_dma.hh
--- gem5/src/hwacc/noncoherent_dma.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/noncoherent_dma.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,76 @@
+#ifndef __HWACC_NONCOHERENT_DMA_HH__
+#define __HWACC_NONCOHERENT_DMA_HH__
+//------------------------------------------//
+#include "dev/arm/base_gic.hh"
+#include "dev/dma_device.hh"
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "hwacc/dma_write_fifo.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+#include "params/NoncoherentDma.hh"
+
+//------------------------------------------
+//    Memory Map
+//    |  Length  | Dst Addr | Src Addr | Flags  |
+//    |----------|----------|----------|--------|
+//    |  4 Bytes | 8 Bytes  | 8 Bytes  | 1 Byte |
+//------------------------------------------//
+
+class NoncoherentDma : public DmaDevice
+{
+  private:
+    std::string devname;
+    DmaReadFifo *memSideReadFifo;
+    DmaReadFifo *accSideReadFifo;
+    DmaReadFifo *readFifo;
+    DmaWriteFifo *memSideWriteFifo;
+    DmaWriteFifo *accSideWriteFifo;
+    DmaWriteFifo *writeFifo;
+    Addr pioAddr;
+    Addr pioDelay;
+    Addr pioSize;
+    size_t bufferSize;
+    unsigned maxPending;
+    unsigned maxReqSize;
+    BaseGic * gic;
+    uint32_t intNum;
+    int clock_period;
+
+    uint8_t * mmreg;
+    uint8_t * FLAGS;
+    uint64_t * SRC;
+    uint64_t * DST;
+    int * LEN;
+
+    uint8_t last_flag;
+
+    Addr activeSrc;
+    Addr activeDst;
+    int writesLeft;
+    bool running;
+
+    Tick start_time;
+
+    EventFunctionWrapper tickEvent;
+
+  protected:
+    DmaPort accPort;
+    DmaReadFifo * getActiveReadFifo();
+    DmaWriteFifo * getActiveWriteFifo();
+  public:
+    PARAMS(NoncoherentDma);
+    NoncoherentDma(const NoncoherentDmaParams &p);
+    ~NoncoherentDma() {}
+
+    AddrRangeList getAddrRanges() const;
+
+    void tick();
+
+    Tick read(PacketPtr pkt);
+    Tick write(PacketPtr pkt);
+
+    Port &getPort(const std::string &if_name,
+                  PortID idx=InvalidPortID) override;
+};
+
+#endif //_HWACC_NONCOHERENT_DMA_HH__
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/NoncoherentDma.py gem5-SALAM/src/hwacc/NoncoherentDma.py
--- gem5/src/hwacc/NoncoherentDma.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/NoncoherentDma.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,18 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.Device import DmaDevice
+
+class NoncoherentDma(DmaDevice) :
+    type = 'NoncoherentDma'
+    cxx_header = 'hwacc/noncoherent_dma.hh'
+    devicename = Param.String("noncoherent_dma", "Name of DMA device")
+    cluster_dma = RequestPort("Cluster-side DMA port")
+    pio_addr = Param.Addr("Device Address")
+    pio_delay = Param.Latency('100ns', "PIO Latency")
+    pio_size = Param.Addr(21, "MMR Size")
+    buffer_size = Param.UInt64(1024, "Read buffer size")
+    max_pending = Param.Unsigned(8, "Maximum number of pending DMA reads")
+    max_req_size = Param.Unsigned(Parent.cache_line_size, "Maximum size of a DMA request")
+    gic = Param.BaseGic(Parent.any, "Gic on which to trigger interrupts")
+    int_num = Param.UInt32(200, "Interrupt number that connects to GIC")
+    clock_period = Param.Int(10, "Clock period in ns")
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/register_bank.cc gem5-SALAM/src/hwacc/register_bank.cc
--- gem5/src/hwacc/register_bank.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/register_bank.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,259 @@
+#include "hwacc/register_bank.hh"
+
+#include <sys/mman.h>
+#include <sys/types.h>
+#include <sys/user.h>
+
+#include <cstring>
+#include <stdio.h>
+#include <stdlib.h>
+#include <iomanip>
+
+#include "base/trace.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+#include "sim/system.hh"
+#include "debug/Drain.hh"
+
+using namespace std;
+
+#include "debug/MemoryAccess.hh"
+
+RegisterBank::RegisterBank(const RegisterBankParams &p) :
+    AbstractMemory(p),
+    port(name() + ".reg_port", this),
+    load(name() + ".load_port", this),
+    deltaTime(p.delta_time),
+    retryResp(false),
+    dequeueEvent([this]{ dequeue(); }, name()),
+    deltaEvent([this]{ delta(); }, name())
+{
+    // Setup of the delta memory container
+    int shm_fd = -1;
+    int map_flags = MAP_ANON | MAP_PRIVATE;
+
+    deltaAddr = (uint8_t *)mmap(NULL, range.size(),
+                                PROT_READ | PROT_WRITE,
+                                map_flags, shm_fd, 0);
+    if (deltaAddr == (uint8_t *)MAP_FAILED) {
+        perror("mmap");
+        fatal("Could not mmap %d bytes for range %s!\n", range.size(),
+            range.to_string());
+    }
+}
+
+static inline void
+tracePacket(System *sys, const char *label, PacketPtr pkt)
+{
+    int size = pkt->getSize();
+#if THE_ISA != NULL_ISA
+    if (size == 1 || size == 2 || size == 4 || size == 8) {
+        DPRINTF(MemoryAccess,"%s from %s of size %i on address %#x data "
+                "%#x %c\n", label, sys->getRequestorName(pkt->req->requestorId()),
+                size, pkt->getAddr(), pkt->getUintX(ByteOrder::little),
+                pkt->req->isUncacheable() ? 'U' : 'C');
+        return;
+    }
+#endif
+    DPRINTF(MemoryAccess, "%s from %s of size %i on address %#x %c\n",
+            label, sys->getRequestorName(pkt->req->requestorId()),
+            size, pkt->getAddr(), pkt->req->isUncacheable() ? 'U' : 'C');
+    DDUMP(MemoryAccess, pkt->getConstPtr<uint8_t>(), pkt->getSize());
+}
+
+#if TRACING_ON
+#   define TRACE_PACKET(A) tracePacket(system(), A, pkt)
+#else
+#   define TRACE_PACKET(A)
+#endif
+
+void
+RegisterBank::registerAccess(PacketPtr pkt)
+{
+    assert(AddrRange(pkt->getAddr(),
+                     pkt->getAddr() + (pkt->getSize() - 1)).isSubset(range));
+
+    if (pkt->isRead()) {
+        assert(!pkt->isWrite());
+        uint8_t * hostAddr = pmemAddr + pkt->getAddr() - range.start();
+        if (pmemAddr) {
+            pkt->setData(hostAddr);
+        }
+        stats.numReads[pkt->req->requestorId()]++;
+        stats.bytesRead[pkt->req->requestorId()] += pkt->getSize();
+    } else if (pkt->isWrite()) {
+        uint8_t * hostAddr = deltaAddr + pkt->getAddr() - range.start();
+        if (writeOK(pkt)) {
+            if (deltaAddr) {
+                pkt->writeData(hostAddr);
+                DPRINTF(MemoryAccess, "%s wrote %i bytes to address %x\n",
+                        __func__, pkt->getSize(), pkt->getAddr());
+            }
+            assert(!pkt->req->isInstFetch());
+            TRACE_PACKET("Write");
+            stats.numWrites[pkt->req->requestorId()]++;
+            stats.bytesWritten[pkt->req->requestorId()] += pkt->getSize();
+            if (!deltaEvent.scheduled())
+                schedule(deltaEvent, curTick()+deltaTime);
+        }
+    } else {
+        panic("Unexpected packet %s", pkt->print());
+    }
+
+    if (pkt->needsResponse()) {
+        pkt->makeResponse();
+    }
+}
+
+void
+RegisterBank::init()
+{
+    // allow unconnected memories as this is used in several ruby
+    // systems at the moment
+    if (port.isConnected()) {
+        port.sendRangeChange();
+    }
+    if (load.isConnected()) {
+        load.sendRangeChange();
+    }
+}
+
+Tick
+RegisterBank::recvAtomic(PacketPtr pkt)
+{
+    panic_if(pkt->cacheResponding(), "Should not see packets where cache "
+             "is responding");
+    registerAccess(pkt);
+    return deltaTime;
+}
+
+Tick
+RegisterBank::recvAtomicBackdoor(PacketPtr pkt, MemBackdoorPtr &_backdoor)
+{
+    Tick latency = recvAtomic(pkt);
+
+    if (backdoor.ptr())
+        _backdoor = &backdoor;
+    return latency;
+}
+
+void
+RegisterBank::recvFunctional(PacketPtr pkt)
+{
+    pkt->pushLabel(name());
+
+    functionalAccess(pkt);
+
+    bool done = false;
+    auto p = packetQueue.begin();
+    // potentially update the packets in our packet queue as well
+    while (!done && p != packetQueue.end()) {
+        done = pkt->trySatisfyFunctional(p->pkt);
+        ++p;
+    }
+
+    pkt->popLabel();
+}
+
+bool
+RegisterBank::recvTimingReq(PacketPtr pkt)
+{
+    panic_if(pkt->cacheResponding(), "Should not see packets where cache "
+             "is responding");
+
+    panic_if(!(pkt->isRead() || pkt->isWrite()),
+             "Should only see read and writes at memory controller, "
+             "saw %s to %#llx\n", pkt->cmdString(), pkt->getAddr());
+
+    bool isRead = pkt->isRead();
+
+    bool needsResponse = pkt->needsResponse();
+    Tick responseTime = curTick() + recvAtomic(pkt);
+    if (needsResponse) {
+        // recvAtomic() should already have turned packet into
+        // atomic response
+        assert(pkt->isResponse());
+        if (isRead) {
+            retryResp = !port.sendTimingResp(pkt);
+            if (!retryResp) return true;
+        }
+        // typically this should be added at the end, so start the
+        // insertion sort with the last element, also make sure not to
+        // re-order in front of some existing packet with the same
+        // address, the latter is important as this memory effectively
+        // hands out exclusive copies (shared is not asserted)
+        auto i = packetQueue.end();
+        --i;
+        while (i != packetQueue.begin() && responseTime < i->tick &&
+            !i->pkt->matchAddr(pkt))
+            --i;
+
+        // emplace inserts the element before the position pointed to by
+        // the iterator, so advance it one step
+        packetQueue.emplace(++i, pkt, responseTime);
+
+        if (!retryResp && !dequeueEvent.scheduled()) {
+            schedule(dequeueEvent, packetQueue.back().tick);
+        }
+    }
+    return true;
+}
+
+void
+RegisterBank::dequeue()
+{
+    assert(!packetQueue.empty());
+    DeferredPacket deferred_pkt = packetQueue.front();
+    
+    retryResp = !port.sendTimingResp(deferred_pkt.pkt);
+    if (!retryResp) {
+        packetQueue.pop_front();
+
+        // if the queue is not empty, schedule the next dequeue event,
+        // otherwise signal that we are drained if we were asked to do so
+        if (!packetQueue.empty()) {
+            // if there were packets that got in-between then we
+            // already have an event scheduled, so use re-schedule
+            reschedule(dequeueEvent,
+                       std::max(packetQueue.front().tick, curTick()), true);
+        } else if (drainState() == DrainState::Draining) {
+            DPRINTF(Drain, "Draining of ScratchpadMemory complete\n");
+            signalDrainDone();
+        }
+    }
+}
+
+void
+RegisterBank::delta()
+{
+    std::memcpy(pmemAddr, deltaAddr, range.size());
+}
+
+void
+RegisterBank::recvRespRetry()
+{
+    assert(retryResp);
+    dequeue();
+}
+
+Port &
+RegisterBank::getPort(const std::string &if_name, PortID idx)
+{
+    if (if_name == "reg_port") {
+        return port;
+    } else if (if_name == "load_port") {
+        return load;
+    }
+    return AbstractMemory::getPort(if_name, idx);
+}
+
+DrainState
+RegisterBank::drain()
+{
+    if (!packetQueue.empty()) {
+        DPRINTF(Drain, "ScratchpadMemory Queue has requests, waiting to drain\n");
+        return DrainState::Draining;
+    } else {
+        return DrainState::Drained;
+    }
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/register_bank.hh gem5-SALAM/src/hwacc/register_bank.hh
--- gem5/src/hwacc/register_bank.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/register_bank.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,128 @@
+#ifndef __HWACC_REGISTER_BANK_HH__
+#define __HWACC_REGISTER_BANK_HH__
+
+#include "mem/abstract_mem.hh"
+#include "mem/port.hh"
+#include "mem/tport.hh"
+
+#include <vector>
+
+using namespace gem5;
+using namespace memory;
+
+#include "params/RegisterBank.hh"
+
+class RegisterBank : public AbstractMemory
+{
+  public:
+    PARAMS(RegisterBank);
+    RegisterBank(const RegisterBankParams &p);
+    void registerAccess(PacketPtr pkt);
+
+  private:
+    class DeferredPacket
+    {
+      public:
+        const Tick tick;
+        const PacketPtr pkt;
+
+        DeferredPacket(PacketPtr _pkt, Tick _tick) : tick(_tick), pkt(_pkt)
+        { }
+    };
+
+    class RegPort : public ResponsePort
+    {
+      private:
+        RegisterBank * memory;
+      public:
+        RegPort(const std::string& _name, RegisterBank * _memory, PortID id=InvalidPortID) :
+            ResponsePort(_name, _memory, id), memory(_memory) {}
+      protected:
+        Tick recvAtomic(PacketPtr pkt) override { return memory->recvAtomic(pkt); };
+        Tick recvAtomicBackdoor(
+                PacketPtr pkt, MemBackdoorPtr &_backdoor) override { return memory->recvAtomicBackdoor(pkt,_backdoor); };
+        void recvFunctional(PacketPtr pkt) override { memory->recvFunctional(pkt); };
+        bool recvTimingReq(PacketPtr pkt) override { return memory->recvTimingReq(pkt); };
+        void recvRespRetry() override { memory->recvRespRetry(); };
+        AddrRangeList getAddrRanges() const override {
+            AddrRangeList ranges;
+            ranges.push_back(memory->getAddrRange());
+            return ranges;
+        }
+    };
+
+    RegPort port;
+
+    class LoadPort : public SimpleTimingPort
+    {
+      private:
+        RegisterBank * memory;
+      protected:
+        Tick recvAtomic(PacketPtr pkt) {
+          memory->registerAccess(pkt);
+          return memory->getDeltaTime();
+        }
+        AddrRangeList getAddrRanges() const override {
+            AddrRangeList ranges;
+            ranges.push_back(memory->getAddrRange());
+            return ranges;
+        }
+      public:
+        LoadPort(const std::string& _name, RegisterBank * _memory, PortID id=InvalidPortID) :
+          SimpleTimingPort(_name, _memory), memory(_memory) {}
+    };
+
+    LoadPort load;
+
+    /**
+     * Container for register deltas. Copied to pmem on delta events.
+     */
+    uint8_t* deltaAddr;
+    /**
+     * Latency of a delta cycle in the register bank
+     */
+    const Tick deltaTime;
+    /**
+     * Internal (unbounded) storage to mimic the delay caused by the
+     * delta timing of writes. Note that this is where the packet spends
+     * the memory latency.
+     */
+    std::list<DeferredPacket> packetQueue;
+
+    /**
+     * Remember if we failed to send a response and are awaiting a
+     * retry. This is only used as a check.
+     */
+    bool retryResp;
+
+    /**
+     * Dequeue a packet from our internal packet queue and move it to
+     * the port where it will be sent as soon as possible.
+     */
+    void dequeue();
+    EventFunctionWrapper dequeueEvent;
+
+    /**
+     * Handle the delta cycle of the registers in the bank.
+     * Copies updated data at deltaAddr to the storage buffer in pmemAddr.
+     * Calls dequeue() to send packet responses.
+     */
+    void delta();
+    EventFunctionWrapper deltaEvent;
+
+  public:
+    DrainState drain() override;
+
+    Port &getPort(const std::string &if_name,
+                  PortID idx=InvalidPortID) override;
+    void init() override;
+    Tick getDeltaTime() { return deltaTime; }
+
+  protected:
+    Tick recvAtomic(PacketPtr pkt);
+    Tick recvAtomicBackdoor(PacketPtr pkt, MemBackdoorPtr &_backdoor);
+    void recvFunctional(PacketPtr pkt);
+    bool recvTimingReq(PacketPtr pkt);
+    void recvRespRetry();
+};
+#endif //__HWACC_REGISTER_BANK_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/RegisterBank.py gem5-SALAM/src/hwacc/RegisterBank.py
--- gem5/src/hwacc/RegisterBank.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/RegisterBank.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,11 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.AbstractMemory import AbstractMemory
+
+class RegisterBank(AbstractMemory):
+    type = 'RegisterBank'
+    cxx_header = 'hwacc/register_bank.hh'
+
+    reg_port = ResponsePort("Responder port for private acclerator accesses")
+    load_port = ResponsePort("Responder port for preloading the registers")
+    delta_time = Param.Latency('10ns', "Request to response latency")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/SALAMPowerModel.py gem5-SALAM/src/hwacc/SALAMPowerModel.py
--- gem5/src/hwacc/SALAMPowerModel.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/SALAMPowerModel.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,25 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class SALAMPowerModel(SimObject):
+    # SimObject type
+    type = "SALAMPowerModel"
+    # gem5-SALAM attached header
+    cxx_header = "hwacc/HWModeling/src/salam_power_model.hh"
+    ### --- Do Not Modify Below This Line --- ###
+    ### Templates
+    ### YML Type: functional_unit.power_model
+    ## 'power_units' = Param.String(units.power, "Hardware Model Power Units")
+    ## 'energy_units' = Param.String(units.energy, "Hardware Model Energy Units")
+    ## 'time_units' = Param.String(units.time, "Hardware Model Time Units")
+    ## 'area_units' = Param.String(units.area, "Hardware Model Area Units")
+    ## 'latency' = Params.UInt32(latency, "Hardware Model Functional Unit Latency")
+    ## 'internal_power' = Params.Double(internal_power, "Measured Power Metric")
+    ## 'switch_power' = Params.Double(switch_power, "Measured Power Metric")
+    ## 'dynamic_power' = Params.Double(dynamic_power, "Measured Power Metric")
+    ## 'dynamic_energy' = Params.Double(dynamic_energy, "Measured Energy Metric")
+    ## 'leakage_power' = Params.Double(leakage_power, "Measured Power Metric")
+    ## 'area' = Params.Double(area, "Measure Area Metric")
+    ## 'path_delay' = Params.Double(path_delay, "Measured Path Delay Metric")
+    ### -- Code Auto-Generated Below This Line -- ###
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/SConscript gem5-SALAM/src/hwacc/SConscript
--- gem5/src/hwacc/SConscript	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/SConscript	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,90 @@
+Import('*')
+
+if env['TARGET_ISA'] == 'arm':
+
+    #Example
+    #SimObject('IOAcc.py')
+
+    #CommInterface
+    SimObject('CommInterface.py')
+    SimObject('ScratchpadMemory.py')
+    SimObject('NoncoherentDma.py')
+    SimObject('StreamDma.py')
+    SimObject('AccCluster.py')
+    SimObject('StreamBuffer.py')
+    SimObject('RegisterBank.py')
+
+    #LLVMInterface
+    SimObject('ComputeUnit.py')
+    SimObject('LLVMInterface.py')
+    
+    #HWInterface
+    SimObject('CycleCounts.py')
+    SimObject('FunctionalUnits.py')
+    SimObject('HWInterface.py')
+    SimObject('HWStatistics.py')
+    SimObject('InstConfig.py')
+    SimObject('InstOpCodes.py')
+    SimObject('SALAMPowerModel.py')
+    SimObject('SimulatorConfig.py')
+
+    #Functional Units
+    #SimObject('Adder.py')
+
+    # 
+    Source('comm_interface.cc')
+    Source('compute_unit.cc')
+    Source('llvm_interface.cc')
+    Source('dma_write_fifo.cc')
+    Source('noncoherent_dma.cc')
+    Source('stream_dma.cc')
+    Source('acc_cluster.cc')
+    Source('stream_buffer.cc')
+    Source('stream_port.cc')
+    Source('scratchpad_memory.cc')
+    Source('register_bank.cc')
+    
+    #
+    Source('LLVMRead/src/value.cc')
+    Source('LLVMRead/src/function.cc')
+    Source('LLVMRead/src/basic_block.cc')
+    Source('LLVMRead/src/debug_flags.cc')
+    Source('LLVMRead/src/mem_request.cc')
+    Source('LLVMRead/src/instruction.cc')
+    Source('LLVMRead/src/registers.cc')
+    Source('LLVMRead/src/operand.cc')
+
+    # GENERATED FILES
+    # Source('HWModeling/generated/functionalunits/adder.cc')
+    # Source('HWModeling/generated/instructions/add.cc')
+    # END OF GENERATED FILES
+
+    Source('HWModeling/src/cycle_counts.cc')
+    #Source('HWModeling/src/cacti_wrapper.cc') 
+    Source('HWModeling/src/functional_units.cc')
+    Source('HWModeling/src/hw_interface.cc')
+    Source('HWModeling/src/hw_statistics.cc')
+    Source('HWModeling/src/instruction_config.cc')
+    Source('HWModeling/src/opcodes.cc')
+    Source('HWModeling/src/salam_power_model.cc')
+    Source('HWModeling/src/simulator_config.cc')
+
+    #
+    DebugFlag('CommInterface')
+    DebugFlag('CommInterfaceQueues')
+    DebugFlag('DeviceMMR')
+    DebugFlag('LLVMInterface')
+    DebugFlag('NoncoherentDma')
+    DebugFlag('LLVMParse')
+    DebugFlag('Runtime')
+    DebugFlag('RuntimeCompute')
+    DebugFlag('RuntimeQueues')
+    DebugFlag('SALAM_Debug')
+    DebugFlag('StreamBuffer')
+    DebugFlag('StreamDma')
+    DebugFlag('Trace')
+    DebugFlag('Step')
+
+    #
+    CompoundFlag('JDEV', ['LLVMInterface','CommInterface', 'Runtime', 'RuntimeCompute', 'RuntimeQueues', 'SALAM_Debug'])
+    CompoundFlag('HWACC', ['CommInterface', 'LLVMInterface'])
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/scratchpad_memory.cc gem5-SALAM/src/hwacc/scratchpad_memory.cc
--- gem5/src/hwacc/scratchpad_memory.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/scratchpad_memory.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,526 @@
+#include "hwacc/scratchpad_memory.hh"
+#include "base/random.hh"
+#include "base/trace.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+#include "sim/system.hh"
+#include "debug/Drain.hh"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <iomanip>
+
+using namespace std;
+
+/***************************************************************************************
+ * Scratchpad Scratchpad Device for Accelerators using CommMemInterface
+ * Acts as a simple memory for external devices
+ * Enables specialization of access for parent device
+ **************************************************************************************/
+#include "debug/MemoryAccess.hh"
+
+ScratchpadMemory::ScratchpadMemory(const ScratchpadMemoryParams &p) :
+    AbstractMemory(p),
+    readyMode(p.ready_mode),
+    readOnInvalid(p.read_on_invalid),
+    writeOnValid(p.write_on_valid),
+    resetOnScratchpadRead(p.reset_on_scratchpad_read),
+    initial(true),
+    port(name() + ".port", *this),
+    latency(p.latency),
+    latency_var(p.latency_var),
+    bandwidth(p.bandwidth),
+    dequeueEvent([this]{ dequeue(); }, name()) {
+    ready = new bool[range.size()];
+    if (readyMode) {
+        for (auto i=0;i<range.size();i++) {
+            ready[i] = false;
+        }
+    }
+    // Each port has its own release and dequeue events, as well as signals
+    // Adding these events and signals for ".port"
+    // const std::string releaseEventName = csprintf("%s_release[0]", name());
+    const std::string releaseEventName = name() + "_release[0]";
+    releaseEvent.push_back(EventFunctionWrapper([this]{ release(); }, releaseEventName));
+    releaseTick.push_back(0);
+    isBusy.push_back(false);
+    retryReq.push_back(false);
+    retryResp.push_back(false);
+}
+
+bool
+ScratchpadMemory::isReady(Addr ad, size_t size, bool read) {
+    if (!readyMode) {
+        return true;
+    } else if (read) {
+        // We are reading. We can read if readOnInvalid or
+        // if all segments are valid.
+        if (readOnInvalid) return true;
+        Addr start_offset = ad - range.start();
+        Addr end_offset = start_offset + size;
+        for (auto i=start_offset; i<end_offset; i++) {
+            if (ready[i] == false) return false;
+        }
+    } else {
+        // We are writing. We can write if writeOnValid or
+        // if all segments are invalid.
+        if (writeOnValid) return true;
+        Addr start_offset = ad - range.start();
+        Addr end_offset = start_offset + size;
+        for (auto i=start_offset; i<end_offset; i++) {
+            if (ready[i] == true) return false;
+        }
+    }
+    return true;
+}
+
+void
+ScratchpadMemory::setAllReady(bool r) {
+    if (readyMode && !initial){
+        for (auto i=0;i<range.size();i++) {
+            ready[i] = r;
+        }
+    }
+    initial = true;
+}
+
+static inline void
+tracePacket(System *sys, const char *label, PacketPtr pkt)
+{
+    int size = pkt->getSize();
+#if THE_ISA != NULL_ISA
+    if (size == 1 || size == 2 || size == 4 || size == 8) {
+        DPRINTF(MemoryAccess,"%s from %s of size %i on address %#x data "
+                "%#x %c\n", label, sys->getRequestorName(pkt->req->requestorId()),
+                size, pkt->getAddr(), pkt->getUintX(ByteOrder::little),
+                pkt->req->isUncacheable() ? 'U' : 'C');
+        return;
+    }
+#endif
+    DPRINTF(MemoryAccess, "%s from %s of size %i on address %#x %c\n",
+            label, sys->getRequestorName(pkt->req->requestorId()),
+            size, pkt->getAddr(), pkt->req->isUncacheable() ? 'U' : 'C');
+    DDUMP(MemoryAccess, pkt->getConstPtr<uint8_t>(), pkt->getSize());
+}
+
+#if TRACING_ON
+#   define TRACE_PACKET(A) tracePacket(system(), A, pkt)
+#else
+#   define TRACE_PACKET(A)
+#endif
+
+void
+ScratchpadMemory::scratchpadAccess(PacketPtr pkt, bool validateAccess)
+{
+    initial = false;
+    if (pkt->cacheResponding()) {
+        DPRINTF(MemoryAccess, "Cache responding to %#llx: not responding\n",
+                pkt->getAddr());
+        return;
+    }
+
+    if (pkt->cmd == MemCmd::CleanEvict || pkt->cmd == MemCmd::WritebackClean) {
+        DPRINTF(MemoryAccess, "CleanEvict  on 0x%x: not responding\n",
+                pkt->getAddr());
+      return;
+    }
+
+    assert(AddrRange(pkt->getAddr(),
+                     pkt->getAddr() + (pkt->getSize() - 1)).isSubset(range));
+
+    uint8_t *hostAddr = pmemAddr + pkt->getAddr() - range.start();
+
+    if (pkt->cmd == MemCmd::SwapReq) {
+        if (pkt->isAtomicOp()) {
+            if (pmemAddr) {
+                pkt->setData(hostAddr);
+                (*(pkt->getAtomicOp()))(hostAddr);
+            }
+        } else {
+            std::vector<uint8_t> overwrite_val(pkt->getSize());
+            uint64_t condition_val64;
+            uint32_t condition_val32;
+
+            panic_if(!pmemAddr, "Swap only works if there is real memory " \
+                     "(i.e. null=False)");
+
+            bool overwrite_mem = true;
+            // keep a copy of our possible write value, and copy what is at the
+            // memory address into the packet
+            pkt->writeData(&overwrite_val[0]);
+            pkt->setData(hostAddr);
+
+            if (pkt->req->isCondSwap()) {
+                if (pkt->getSize() == sizeof(uint64_t)) {
+                    condition_val64 = pkt->req->getExtraData();
+                    overwrite_mem = !std::memcmp(&condition_val64, hostAddr,
+                                                 sizeof(uint64_t));
+                } else if (pkt->getSize() == sizeof(uint32_t)) {
+                    condition_val32 = (uint32_t)pkt->req->getExtraData();
+                    overwrite_mem = !std::memcmp(&condition_val32, hostAddr,
+                                                 sizeof(uint32_t));
+                } else
+                    panic("Invalid size for conditional read/write\n");
+            }
+
+            if (overwrite_mem)
+                std::memcpy(hostAddr, &overwrite_val[0], pkt->getSize());
+
+            assert(!pkt->req->isInstFetch());
+            TRACE_PACKET("Read/Write");
+            stats.numOther[pkt->req->requestorId()]++;
+        }
+    } else if (pkt->isRead()) {
+        assert(!pkt->isWrite());
+        if (pkt->isLLSC()) {
+            assert(!pkt->fromCache());
+            // if the packet is not coming from a cache then we have
+            // to do the LL/SC tracking here
+            trackLoadLocked(pkt);
+        }
+        if (validateAccess) {
+            if (!isReady(pkt->getAddr(),pkt->getSize(), true)) {
+                panic("Scratchpad read at address: 0x%lx is invalid! Sector has not been written yet!\n", pkt->getAddr());
+            }
+            if (resetOnScratchpadRead) {
+                Addr start_offset = pkt->getAddr() - range.start();
+                Addr end_offset = start_offset + pkt->getSize();
+                for (auto i=start_offset; i<end_offset; i++) {
+                    ready[i] = false;
+                }
+            }
+        }
+        if (pmemAddr) {
+            pkt->setData(hostAddr);
+        }
+        TRACE_PACKET(pkt->req->isInstFetch() ? "IFetch" : "Read");
+        stats.numReads[pkt->req->requestorId()]++;
+        stats.bytesRead[pkt->req->requestorId()] += pkt->getSize();
+        if (pkt->req->isInstFetch())
+            stats.bytesInstRead[pkt->req->requestorId()] += pkt->getSize();
+    } else if (pkt->isInvalidate() || pkt->isClean()) {
+        assert(!pkt->isWrite());
+        // in a fastmem system invalidating and/or cleaning packets
+        // can be seen due to cache maintenance requests
+
+        // no need to do anything
+    } else if (pkt->isWrite()) {
+        if (writeOK(pkt)) {
+            if (pmemAddr) {
+                pkt->writeData(hostAddr);
+                DPRINTF(MemoryAccess, "%s wrote %i bytes to address %x\n",
+                        __func__, pkt->getSize(), pkt->getAddr());
+            }
+            assert(!pkt->req->isInstFetch());
+            TRACE_PACKET("Write");
+            stats.numWrites[pkt->req->requestorId()]++;
+            stats.bytesWritten[pkt->req->requestorId()] += pkt->getSize();
+        }
+        if (validateAccess) {
+            if (!isReady(pkt->getAddr(),pkt->getSize(), false)) {
+                panic("Scratchpad write at address: 0x%lx is invalid! Sector has not been cleared yet!\n", pkt->getAddr());
+            }
+        }
+        // Set ready bits on external writes
+        if (readyMode) {
+            Addr start_offset = pkt->getAddr() - range.start();
+            Addr end_offset = start_offset + pkt->getSize();
+            for (auto i=start_offset; i<end_offset; i++) {
+                ready[i] = true;
+            }
+        }
+    } else {
+        panic("Unexpected packet %s", pkt->print());
+    }
+
+    if (pkt->needsResponse()) {
+        pkt->makeResponse();
+    }
+}
+
+void
+ScratchpadMemory::init()
+{
+    // allow unconnected memories as this is used in several ruby
+    // systems at the moment
+    if (port.isConnected()) {
+        port.sendRangeChange();
+    }
+    initial = true;
+}
+
+Tick
+ScratchpadMemory::recvAtomic(PacketPtr pkt, bool validateAccess)
+{
+    panic_if(pkt->cacheResponding(), "Should not see packets where cache "
+             "is responding");
+
+    scratchpadAccess(pkt, validateAccess);
+    return getLatency();
+}
+
+Tick
+ScratchpadMemory::recvAtomicBackdoor(PacketPtr pkt, MemBackdoorPtr &_backdoor)
+{
+    Tick latency = recvAtomic(pkt);
+
+    if (backdoor.ptr())
+        _backdoor = &backdoor;
+    return latency;
+}
+
+void
+ScratchpadMemory::recvFunctional(PacketPtr pkt)
+{
+    pkt->pushLabel(name());
+
+    functionalAccess(pkt);
+
+    bool done = false;
+    auto p = packetQueue.begin();
+    // potentially update the packets in our packet queue as well
+    while (!done && p != packetQueue.end()) {
+        done = pkt->trySatisfyFunctional(p->pkt);
+        ++p;
+    }
+
+    pkt->popLabel();
+}
+
+bool
+ScratchpadMemory::recvTimingReq(PacketPtr pkt, PortID recvPort, bool validateAccess)
+{
+    panic_if(pkt->cacheResponding(), "Should not see packets where cache "
+             "is responding");
+
+    panic_if(!(pkt->isRead() || pkt->isWrite()),
+             "Should only see read and writes at memory controller, "
+             "saw %s to %#llx\n", pkt->cmdString(), pkt->getAddr());
+
+    PortID idx = recvPort + 1;
+
+    // we should not get a new request after committing to retry the
+    // current one, but unfortunately the CPU violates this rule, so
+    // simply ignore it for now
+    if (retryReq[idx])
+        return false;
+
+    // if we are busy with a read or write, remember that we have to
+    // retry
+    if (isBusy[idx]) {
+        retryReq[idx] = true;
+        return false;
+    }
+
+    // technically the packet only reaches us after the header delay,
+    // and since this is a memory controller we also need to
+    // deserialise the payload before performing any write operation
+    Tick receive_delay = pkt->headerDelay + pkt->payloadDelay;
+    pkt->headerDelay = pkt->payloadDelay = 0;
+
+    // update the release time according to the bandwidth limit, and
+    // do so with respect to the time it takes to finish this request
+    // rather than long term as it is the short term data rate that is
+    // limited for any real memory
+
+    // calculate an appropriate tick to release to not exceed
+    // the bandwidth limit
+    Tick duration = pkt->getSize() * bandwidth;
+
+    // only consider ourselves busy if there is any need to wait
+    // to avoid extra events being scheduled for (infinitely) fast
+    // memories
+    if (duration != 0) {
+        schedule(releaseEvent[idx], curTick() + duration);
+        releaseTick[idx] = curTick() + duration;
+        isBusy[idx] = true;
+    }
+
+    // go ahead and deal with the packet and put the response in the
+    // queue if there is one
+    bool needsResponse = pkt->needsResponse();
+    recvAtomic(pkt, validateAccess);
+    // turn packet around to go back to requester if response expected
+    if (needsResponse) {
+        // recvAtomic() should already have turned packet into
+        // atomic response
+        assert(pkt->isResponse());
+
+        Tick when_to_send = curTick() + receive_delay + getLatency();
+
+        // typically this should be added at the end, so start the
+        // insertion sort with the last element, also make sure not to
+        // re-order in front of some existing packet with the same
+        // address, the latter is important as this memory effectively
+        // hands out exclusive copies (shared is not asserted)
+        auto i = packetQueue.end();
+        --i;
+        while (i != packetQueue.begin() && when_to_send < i->tick &&
+               !i->pkt->matchAddr(pkt))
+            --i;
+
+        // emplace inserts the element before the position pointed to by
+        // the iterator, so advance it one step
+        packetQueue.emplace(++i, pkt, when_to_send, idx);
+
+        if (!retryResp[idx] && !dequeueEvent.scheduled()) {
+            schedule(dequeueEvent, packetQueue.back().tick);
+            // dequeueTick[idx] = packetQueue.back().tick;
+        }
+    } else {
+        pendingDelete.reset(pkt);
+    }
+
+    return true;
+}
+
+void
+ScratchpadMemory::release()
+{
+    // Tick now = curTick();
+    unsigned idx;
+    for (idx = 0; idx < isBusy.size(); idx++) {
+        if ((!releaseEvent[idx].scheduled()) && (isBusy[idx])) {
+            assert(isBusy[idx]);
+            isBusy[idx] = false;
+            if (retryReq[idx]) {
+                retryReq[idx] = false;
+                if (idx==0)
+                    port.sendRetryReq();
+                else
+                    spm_ports[idx-1]->sendRetryReq();
+            }
+        }
+    }
+}
+
+void
+ScratchpadMemory::dequeue()
+{
+    assert(!packetQueue.empty());
+    DeferredPacket deferred_pkt = packetQueue.front();
+    PortID idx = deferred_pkt.origin;
+    if (idx == 0)
+        retryResp[idx] = !port.sendTimingResp(deferred_pkt.pkt);
+    else
+        retryResp[idx] = !spm_ports[idx-1]->sendTimingResp(deferred_pkt.pkt);
+
+    if (!retryResp[idx]) {
+        packetQueue.pop_front();
+
+        // if the queue is not empty, schedule the next dequeue event,
+        // otherwise signal that we are drained if we were asked to do so
+        if (!packetQueue.empty()) {
+            // if there were packets that got in-between then we
+            // already have an event scheduled, so use re-schedule
+            reschedule(dequeueEvent,
+                       std::max(packetQueue.front().tick, curTick()), true);
+        } else if (drainState() == DrainState::Draining) {
+            DPRINTF(Drain, "Draining of ScratchpadMemory complete\n");
+            signalDrainDone();
+        }
+    }
+}
+
+Tick
+ScratchpadMemory::getLatency() const
+{
+    return latency +
+        (latency_var ? random_mt.random<Tick>(0, latency_var) : 0);
+}
+
+void
+ScratchpadMemory::recvRespRetry(PortID id)
+{
+    PortID idx = id+1;
+    assert(retryResp[idx]);
+
+    dequeue();
+}
+
+Port &
+ScratchpadMemory::getPort(const std::string &if_name, PortID idx)
+{
+    if (if_name == "port") {
+        return port;
+    } else if (if_name == "spm_ports") {
+        if (idx >= spm_ports.size()) {
+            spm_ports.resize((idx+1), nullptr);
+            // const std::string releaseEventName = csprintf("%s_release[%d]", name(), (idx+1));
+            const std::string releaseEventName = name() + "_release[" + std::to_string(idx+1) + "]";
+            releaseEvent.resize((idx+2), EventFunctionWrapper([this]{ release(); }, releaseEventName));
+            releaseTick.resize((idx+2), 0);
+            isBusy.resize((idx+2), false);
+            retryReq.resize((idx+2), false);
+            retryResp.resize((idx+2), false);
+        }
+        if (spm_ports[idx] == nullptr) {
+            // const std::string portName = csprintf("%s.spm_ports[%d]", name(), idx);
+            const std::string portName = name() + ".spm_ports[" + std::to_string(idx) + "]";
+            spm_ports[idx] = new SPMPort(portName, this, idx);
+        }
+        return *spm_ports[idx];
+    }
+    return AbstractMemory::getPort(if_name, idx);
+}
+
+DrainState
+ScratchpadMemory::drain()
+{
+    if (!packetQueue.empty()) {
+        DPRINTF(Drain, "ScratchpadMemory Queue has requests, waiting to drain\n");
+        return DrainState::Draining;
+    } else {
+        return DrainState::Drained;
+    }
+}
+
+ScratchpadMemory::MemoryPort::MemoryPort(const std::string& _name,
+                                     ScratchpadMemory& _memory)
+    : ResponsePort(_name, &_memory), memory(_memory)
+{ }
+
+AddrRangeList
+ScratchpadMemory::MemoryPort::getAddrRanges() const
+{
+    AddrRangeList ranges;
+    ranges.push_back(memory.getAddrRange());
+    return ranges;
+}
+
+Tick
+ScratchpadMemory::MemoryPort::recvAtomic(PacketPtr pkt)
+{
+    return memory.recvAtomic(pkt);
+}
+
+Tick
+ScratchpadMemory::MemoryPort::recvAtomicBackdoor(
+        PacketPtr pkt, MemBackdoorPtr &_backdoor)
+{
+    return memory.recvAtomicBackdoor(pkt, _backdoor);
+}
+
+void
+ScratchpadMemory::MemoryPort::recvFunctional(PacketPtr pkt)
+{
+    memory.recvFunctional(pkt);
+}
+
+bool
+ScratchpadMemory::MemoryPort::recvTimingReq(PacketPtr pkt)
+{
+    return memory.recvTimingReq(pkt, id);
+}
+
+void
+ScratchpadMemory::MemoryPort::recvRespRetry()
+{
+    memory.recvRespRetry(id);
+}
+
+// ScratchpadMemory*
+// ScratchpadMemoryParams::create()
+// {
+//     return new ScratchpadMemory(this);
+// }
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/scratchpad_memory.hh gem5-SALAM/src/hwacc/scratchpad_memory.hh
--- gem5/src/hwacc/scratchpad_memory.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/scratchpad_memory.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,238 @@
+#ifndef __HWACC_SCRATCHPAD_MEMORY_HH__
+#define __HWACC_SCRATCHPAD_MEMORY_HH__
+
+#include "mem/abstract_mem.hh"
+#include "mem/port.hh"
+
+#include <vector>
+
+using namespace gem5;
+using namespace memory;
+
+class ScratchpadRequestPort;
+
+class ScratchpadResponsePort : public ResponsePort
+{
+  friend class ScratchpadRequestPort;
+  private:
+  public:
+    ScratchpadResponsePort(const std::string& _name, SimObject* _owner,
+        PortID id=InvalidPortID) : ResponsePort (_name, _owner, id) {}
+  protected:
+    virtual bool canAccess(Addr add, size_t len, bool read) { return true; }
+    Tick recvAtomic(PacketPtr pkt) override { return 0; }
+    Tick recvAtomicBackdoor(
+            PacketPtr pkt, MemBackdoorPtr &_backdoor) override { return 0; }
+    void recvFunctional(PacketPtr pkt) override { }
+    bool recvTimingReq(PacketPtr pkt) override { return false; }
+    void recvRespRetry() override { }
+    AddrRangeList getAddrRanges() const override {
+        AddrRangeList range;
+        return range;
+    }
+    virtual void setReadyStatus(bool r) { }
+};
+
+class ScratchpadRequestPort : public RequestPort
+{
+  private:
+    ScratchpadResponsePort *_spmslave;
+  protected:
+    //
+  public:
+    ScratchpadRequestPort(const std::string& _name, SimObject* _owner,
+        PortID id=InvalidPortID) : RequestPort(_name, _owner, id) {}
+    void setReadyStatus(bool r) { _spmslave->setReadyStatus(r); }
+    bool canAccess(Addr add, size_t len, bool read) { return _spmslave->canAccess(add, len, read); }
+    void bind(Port &peer) override {
+        auto *spmslave = dynamic_cast<ScratchpadResponsePort *>(&peer);
+        if (spmslave) {
+            _spmslave = spmslave;
+        }
+        RequestPort::bind(peer);
+    }
+    void unbind() override {
+        _spmslave = nullptr;
+        RequestPort::unbind();
+    }
+};
+
+#include "params/ScratchpadMemory.hh"
+
+class ScratchpadMemory : public AbstractMemory
+{
+  protected:
+    bool readyMode;
+    bool readOnInvalid;
+    bool writeOnValid;
+    bool resetOnScratchpadRead;
+    bool initial;
+    bool *ready;
+  public:
+    // typedef ScratchpadMemoryParams Params;
+    // const Params *
+    // params() const
+    // {
+    //   return dynamic_cast<const Params *>(_params);
+    // }
+    PARAMS(ScratchpadMemory);
+    ScratchpadMemory(const ScratchpadMemoryParams &p);
+    bool isReady(Addr ad, size_t size, bool read);
+    void scratchpadAccess(PacketPtr pkt, bool validateAccess=false);
+    void setAllReady(bool r);
+
+  private:
+
+    /**
+     * A deferred packet stores a packet along with its scheduled
+     * transmission time
+     */
+    class DeferredPacket
+    {
+
+      public:
+
+        const Tick tick;
+        const PacketPtr pkt;
+        const PortID origin;
+
+        DeferredPacket(PacketPtr _pkt, Tick _tick, PortID _origin) : tick(_tick), pkt(_pkt), origin(_origin)
+        { }
+    };
+
+    class MemoryPort : public ResponsePort
+    {
+      private:
+        ScratchpadMemory& memory;
+
+      public:
+        MemoryPort(const std::string& _name, ScratchpadMemory& _memory);
+
+      protected:
+        Tick recvAtomic(PacketPtr pkt) override;
+        Tick recvAtomicBackdoor(
+                PacketPtr pkt, MemBackdoorPtr &_backdoor) override;
+        void recvFunctional(PacketPtr pkt) override;
+        bool recvTimingReq(PacketPtr pkt) override;
+        void recvRespRetry() override;
+        AddrRangeList getAddrRanges() const override;
+    };
+
+    MemoryPort port;
+
+    class SPMPort : public ScratchpadResponsePort
+    {
+      private:
+        ScratchpadMemory * memory;
+      public:
+        SPMPort(const std::string& _name, ScratchpadMemory * _memory, PortID id=InvalidPortID) :
+            ScratchpadResponsePort(_name, _memory, id), memory(_memory) {}
+      protected:
+        bool canAccess(Addr add, size_t len, bool read) override { return memory->isReady(add, len, read); }
+        Tick recvAtomic(PacketPtr pkt) override { return memory->recvAtomic(pkt, true); };
+        Tick recvAtomicBackdoor(
+                PacketPtr pkt, MemBackdoorPtr &_backdoor) override { return memory->recvAtomicBackdoor(pkt,_backdoor); };
+        void recvFunctional(PacketPtr pkt) override { memory->recvFunctional(pkt); };
+        bool recvTimingReq(PacketPtr pkt) override { return memory->recvTimingReq(pkt, id, true); };
+        void recvRespRetry() override { memory->recvRespRetry(id); };
+        AddrRangeList getAddrRanges() const override {
+            AddrRangeList ranges;
+            ranges.push_back(memory->getAddrRange());
+            return ranges;
+        }
+        void setReadyStatus(bool r) override { memory->setAllReady(r); }
+    };
+
+    std::vector<SPMPort *> spm_ports;
+
+    /**
+     * Latency from that a request is accepted until the response is
+     * ready to be sent.
+     */
+    const Tick latency;
+
+    /**
+     * Fudge factor added to the latency.
+     */
+    const Tick latency_var;
+
+    /**
+     * Internal (unbounded) storage to mimic the delay caused by the
+     * actual memory access. Note that this is where the packet spends
+     * the memory latency.
+     */
+    std::list<DeferredPacket> packetQueue;
+
+    /**
+     * Bandwidth in ticks per byte. The regulation affects the
+     * acceptance rate of requests and the queueing takes place after
+     * the regulation.
+     */
+    const double bandwidth;
+
+    /**
+     * Track the state of the memory as either idle or busy, no need
+     * for an enum with only two states.
+     */
+    std::vector<bool> isBusy;
+
+    /**
+     * Remember if we have to retry an outstanding request that
+     * arrived while we were busy.
+     */
+    std::vector<bool> retryReq;
+
+    /**
+     * Remember if we failed to send a response and are awaiting a
+     * retry. This is only used as a check.
+     */
+    std::vector<bool> retryResp;
+
+    /**
+     * Release the memory after being busy and send a retry if a
+     * request was rejected in the meanwhile.
+     */
+    void release();
+
+    std::vector<EventFunctionWrapper> releaseEvent;
+    std::vector<Tick> releaseTick;
+
+    /**
+     * Dequeue a packet from our internal packet queue and move it to
+     * the port where it will be sent as soon as possible.
+     */
+    void dequeue();
+
+    // std::vector<EventFunctionWrapper> dequeueEvent;
+    EventFunctionWrapper dequeueEvent;
+    // std::vector<Tick> dequeueTick;
+
+    /**
+     * Detemine the latency.
+     *
+     * @return the latency seen by the current packet
+     */
+    Tick getLatency() const;
+
+    /**
+     * Upstream caches need this packet until true is returned, so
+     * hold it for deletion until a subsequent call
+     */
+    std::unique_ptr<Packet> pendingDelete;
+
+  public:
+    DrainState drain() override;
+
+    Port &getPort(const std::string &if_name,
+                  PortID idx=InvalidPortID) override;
+    void init() override;
+
+  protected:
+    Tick recvAtomic(PacketPtr pkt, bool validateAccess=false);
+    Tick recvAtomicBackdoor(PacketPtr pkt, MemBackdoorPtr &_backdoor);
+    void recvFunctional(PacketPtr pkt);
+    bool recvTimingReq(PacketPtr pkt, PortID recvPort, bool validateAccess=false);
+    void recvRespRetry(PortID id);
+};
+
+#endif //__HWACC_SCRATCHPAD_MEMORY_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/ScratchpadMemory.py gem5-SALAM/src/hwacc/ScratchpadMemory.py
--- gem5/src/hwacc/ScratchpadMemory.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/ScratchpadMemory.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,17 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.AbstractMemory import AbstractMemory
+
+class ScratchpadMemory(AbstractMemory):
+    type = 'ScratchpadMemory'
+    cxx_header = 'hwacc/scratchpad_memory.hh'
+
+    port = ResponsePort("Generic slave port")
+    spm_ports = VectorResponsePort("Slave ports for private acclerator SPM accesses")
+    latency = Param.Latency('2ns', "Request to response latency")
+    latency_var = Param.Latency('0ns', "Request to response latency variance")
+    ready_mode = Param.Bool(False, "Use ready mode for scratchpad memory")
+    read_on_invalid = Param.Bool(False, "Enable reads on invalid memory segments when ready mode is used")
+    write_on_valid = Param.Bool(True, "Enable writes on valid memory sectors when ready mode is used")
+    reset_on_scratchpad_read = Param.Bool(True, "Reset ready bit on private scratchpad memory read")
+    bandwidth = Param.MemoryBandwidth('12GB/s', "Combined read and write bandwidth per port")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/Scripts/createDomain.py gem5-SALAM/src/hwacc/Scripts/createDomain.py
--- gem5/src/hwacc/Scripts/createDomain.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/Scripts/createDomain.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,50 @@
+# Script varies parameters to create design domain
+import sys
+import os
+from argparse import ArgumentParser
+try:
+    from configparser import ConfigParser
+except ImportError:
+    from ConfigParser import ConfigParser
+
+parser = ArgumentParser()
+parser.add_argument("-f", "--config", dest="configFile", help="Config file location")
+parser.add_argument("-m", "--memports", dest="memPorts", help="Read/Write ports")
+parser.add_argument("-t", "--timing", dest="nsTime", help="Transistor timing in ns")
+parser.add_argument("-c", "--counter", dest="counters", help="Set number of counter units")
+parser.add_argument("-ia", "--intadd", dest="intAdders", help="Set number of int adder units")
+parser.add_argument("-im", "--intmul", dest="intMuls", help="Set number of int mul units")
+parser.add_argument("-s", "--shifter", dest="shifters", help="Set number of shifter units")
+parser.add_argument("-b", "--bitwise", dest="bitWise", help="Set number of bitwise units")
+parser.add_argument("-fa", "--floatadd", dest="floatAdd", help="Set number of float adder units")
+parser.add_argument("-da", "--doubadd", dest="doubAdd", help="Set number of double adder units")
+parser.add_argument("-fm", "--floatmul", dest="floatMul", help="Set number of float mul units")
+parser.add_argument("-dm", "--doubmul", dest="doubMul", help="Set number of double mul units")
+parser.add_argument("-z", "--zero", dest="zeroCyl", help="Set number of zero cycle units")
+parser.add_argument("-g", "--gep", dest="gepSet", help="Set number of GEPs per cycle")
+parser.add_argument("-cv", "--conv", dest="conversion", help="Set number of conversion units")
+args = parser.parse_args()
+
+
+
+config = ConfigParser()
+config.read(args.configFile)
+config.set('Memory','read_ports',args.memPorts)
+config.set('Memory','write_ports',args.memPorts)
+config.set('Scheduler','fu_clock_period',args.nsTime)
+config.set('FunctionalUnits','fp_sp_add',args.floatAdd)
+config.set('FunctionalUnits','fp_dp_add',args.doubAdd)
+config.set('FunctionalUnits','fp_sp_mul',args.floatMul)
+config.set('FunctionalUnits','fp_dp_mul',args.doubMul)
+config.set('FunctionalUnits','fu_int_add',args.intAdders)
+config.set('FunctionalUnits','fu_int_mul',args.intMuls)
+config.set('FunctionalUnits','fu_int_bit',args.bitWise)
+config.set('FunctionalUnits','fu_int_shift',args.shifters)
+config.set('FunctionalUnits','fu_counter',args.counters)
+config.set('FunctionalUnits','fu_gep',args.gepSet)
+config.set('FunctionalUnits','fu_compare',args.zeroCyl)
+config.set('FunctionalUnits','fu_conversion',args.conversion)
+
+
+with open (args.configFile,"w") as configfile:
+	config.write(configfile)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/Scripts/extractFunctionUnits.py gem5-SALAM/src/hwacc/Scripts/extractFunctionUnits.py
--- gem5/src/hwacc/Scripts/extractFunctionUnits.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/Scripts/extractFunctionUnits.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,27 @@
+# Script finds the maximum functional units needed
+import sys
+import os
+from argparse import ArgumentParser
+
+parser = ArgumentParser()
+parser.add_argument("-f", "--file", dest="myFile", help="Opens specified file")
+parser.add_argument("-d", "--design", dest="myDesign", help="Saves to specified file")
+args = parser.parse_args()
+myFile = args.myFile
+myDesign = args.myDesign
+
+flag = False
+designFile = open(myDesign, "w")
+with open (myFile,"rt") as parameters:
+	for line in parameters:
+		line = line.rstrip()
+		if not flag:
+			if line == r"StatsStart:":
+				print ('Adjusting Parameters')	
+				flag = True
+		else:
+			designFile.write(line)
+			designFile.write("\n")
+designFile.close()
+
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/Scripts/resetResults.py gem5-SALAM/src/hwacc/Scripts/resetResults.py
--- gem5/src/hwacc/Scripts/resetResults.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/Scripts/resetResults.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,12 @@
+#Reset results file
+import sys
+import os
+from argparse import ArgumentParser
+
+parser = ArgumentParser()
+parser.add_argument("-f", "--file", dest="myFile", help="Open specified file")
+args = parser.parse_args()
+myFile = args.myFile
+
+open(myFile, 'w').close()
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/Scripts/statParser.py gem5-SALAM/src/hwacc/Scripts/statParser.py
--- gem5/src/hwacc/Scripts/statParser.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/Scripts/statParser.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,27 @@
+# Script opens the first pass of simulation 
+import sys
+import os
+from argparse import ArgumentParser
+
+parser = ArgumentParser()
+parser.add_argument("-f", "--file", dest="myFile", help="Opens specified file")
+parser.add_argument("-d", "--design", dest="myDesign", help="Saves to specified file")
+args = parser.parse_args()
+myFile = args.myFile
+myDesign = args.myDesign
+
+flag = False
+designFile = open(myDesign, "w")
+with open (myFile,"rt") as parameters:
+	for line in parameters:
+		line = line.rstrip()
+		if not flag:
+			if line == r"StatsStart:":
+				print ('Adjusting Parameters')	
+				flag = True
+		else:
+			designFile.write(line)
+designFile.write("\n")
+designFile.close()
+
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/Scripts/storeResults.py gem5-SALAM/src/hwacc/Scripts/storeResults.py
--- gem5/src/hwacc/Scripts/storeResults.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/Scripts/storeResults.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,28 @@
+# Script stores simulation results 
+import sys
+import os
+from argparse import ArgumentParser
+
+parser = ArgumentParser()
+parser.add_argument("-f", "--file", dest="myFile", help="Open specified file")
+parser.add_argument("-d", "--design", dest="myDesign", help="Saves to specified file")
+args = parser.parse_args()
+myFile = args.myFile
+myDesign = args.myDesign
+
+flag = False
+param = 0
+designFile = open(myDesign, "a")
+with open (myFile,"rt") as parameters:
+	for line in parameters:
+		line = line.rstrip()
+		if not flag:
+			if line == r"StatsStart:":
+				print ('Adjusting Parameters')	
+				flag = True
+		else:
+			designFile.write(line)
+designFile.write("\n")
+designFile.close()
+
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/SimulatorConfig.py gem5-SALAM/src/hwacc/SimulatorConfig.py
--- gem5/src/hwacc/SimulatorConfig.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/SimulatorConfig.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,16 @@
+from m5.params import *
+from m5.proxy import *
+from m5.SimObject import SimObject
+
+class SimulatorConfig(SimObject):
+    # SimObject type
+    type = "SimulatorConfig"
+    # gem5-SALAM attached header
+    cxx_header = "hwacc/HWModeling/src/simulator_config.hh"
+    ### --- Do Not Modify Below This Line --- ###
+    ### Templates
+    ### YML Type: simulator_config.functional_unit
+    ## alias = Param.UInt32(limit, "Max Concurrent Functional Units, 0 = IR Defined")
+    ### YML Type: simulator_config
+    ## 'output_to_file' = Param.Bool(output_to_file, "Print Terminal Runtime Output to File")
+    ### -- Code Auto-Generated Below This Line -- ###
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_buffer.cc gem5-SALAM/src/hwacc/stream_buffer.cc
--- gem5/src/hwacc/stream_buffer.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_buffer.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,211 @@
+#include "hwacc/stream_buffer.hh"
+#include "debug/StreamBuffer.hh"
+
+#include "sim/system.hh"
+#include "mem/packet_access.hh"
+#include "debug/AddrRanges.hh"
+
+using namespace std;
+
+// StreamBuffer::StreamBuffer(Params *p) :
+// 	BasicPioDevice(p, p->pio_size),
+// 	buffer(p->buffer_size),
+// 	fifoSize(p->buffer_size),
+// 	endian(p->system->getGuestByteOrder()) {
+// 	//
+// }
+
+StreamBuffer::StreamBuffer(const StreamBufferParams &p) :
+    ClockedObject(p),
+    streamIn(this),
+    streamOut(this),
+    statusIn(this),
+    statusOut(this),
+    buffer(p.buffer_size),
+    fifoSize(p.buffer_size),
+    endian(p.system->getGuestByteOrder()),
+    streamAddr(p.stream_address),
+    streamSize(p.stream_size),
+    statusAddr(p.status_address),
+    statusSize(p.status_size),
+    streamDelay(p.stream_latency),
+    bandwidth(p.bandwidth) {}
+
+bool
+StreamBuffer::canReadStream(size_t len) {
+    if (buffer.size() >= len) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool
+StreamBuffer::canWriteStream(size_t len) {
+    if ((buffer.size()+len) <= fifoSize) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool
+StreamBuffer::tryReadStream(uint8_t *dst, size_t len) {
+    if (buffer.size() >= len) {
+        buffer.read(dst, len);
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool
+StreamBuffer::tryWriteStream(uint8_t *src, size_t len)
+{
+    if ((buffer.size()+len) <= fifoSize) {
+        buffer.write(src, len);
+        return true;
+    } else {
+        return false;
+    }
+}
+
+void
+StreamBuffer::readStream(uint8_t *dst, size_t len) {
+    const bool success(tryReadStream(dst, len));
+    panic_if(!success, "Buffer underrun in StreamBuffer::readStream()\n");
+}
+
+void
+StreamBuffer::writeStream(uint8_t *src, size_t len) {
+    const bool success(tryWriteStream(src, len));
+    panic_if(!success, "Buffer overrun in StreamBuffer::writeStream()\n");
+}
+
+bool StreamBuffer::tvalid(PacketPtr pkt) {
+    return tvalid(pkt->getSize(), pkt->isRead());
+}
+
+bool StreamBuffer::tvalid(size_t len, bool isRead) {
+    return isRead ? canReadStream(len) : canWriteStream(len);
+}
+
+Tick
+StreamBuffer::streamRead(PacketPtr pkt) {
+    DPRINTF(StreamBuffer, "A read request of size %d was received by this stream buffer\n", pkt->getSize());
+    uint8_t *buff = new uint8_t[pkt->getSize()];
+    readStream(buff, pkt->getSize());
+    uint64_t data = *(uint64_t *)buff;
+    delete[] buff;
+
+    switch(pkt->getSize()) {
+      case 1:
+        pkt->set<uint8_t>(data, endian);
+        break;
+      case 2:
+        pkt->set<uint16_t>(data, endian);
+        break;
+      case 4:
+        pkt->set<uint32_t>(data, endian);
+        break;
+      case 8:
+        pkt->set<uint64_t>(data, endian);
+        break;
+      default:
+        panic("Read size too big?\n");
+        break;
+    }
+    Tick duration = pkt->getSize() * bandwidth;
+    pkt->makeAtomicResponse();
+    return duration;
+}
+
+Tick
+StreamBuffer::streamWrite(PacketPtr pkt) {
+    DPRINTF(StreamBuffer, "A write request of size %d was received by this stream buffer\n", pkt->getSize());
+    uint8_t * data = new uint8_t[pkt->getSize()];
+    pkt->writeData(data);
+    writeStream(data, pkt->getSize());
+    delete data;
+    pkt->makeAtomicResponse();
+    return streamDelay;
+}
+
+Tick
+StreamBuffer::status(PacketPtr pkt, bool readStatus) {
+    // Provide a means of reading the current buffer capacity of the stream
+    // Writes to this register do nothing
+    if (pkt->isRead()) {
+        DPRINTF(StreamBuffer, "The status of the buffer has been read. Current capacity is %d of %d bytes\n",
+                buffer.size(), fifoSize);
+        uint64_t data = buffer.size();
+        switch(pkt->getSize()) {
+            case 1:
+                pkt->set<uint8_t>(data, endian);
+                break;
+            case 2:
+                pkt->set<uint16_t>(data, endian);
+                break;
+            case 4:
+                pkt->set<uint32_t>(data, endian);
+                break;
+            case 8:
+                pkt->set<uint64_t>(data, endian);
+                break;
+            default:
+                panic("Read size too big?\n");
+                break;
+        }
+    }
+    Tick duration = pkt->getSize() * bandwidth;
+    pkt->makeAtomicResponse();
+    return duration;
+}
+
+AddrRangeList
+StreamBuffer::getStreamAddrRanges() const {
+    assert(streamSize != 0);
+    AddrRangeList streamRanges;
+    DPRINTF(AddrRanges, "registering range: %#x-%#x\n", streamAddr, streamSize);
+    streamRanges.push_back(RangeSize(streamAddr, streamSize));
+    return streamRanges;
+}
+
+AddrRangeList
+StreamBuffer::getStatusAddrRanges() const {
+    assert(statusSize != 0);
+    AddrRangeList statusRanges;
+    DPRINTF(AddrRanges, "registering range: %#x-%#x\n", statusAddr, statusSize);
+    statusRanges.push_back(RangeSize(statusAddr, statusSize));
+    return statusRanges;
+}
+
+Port &
+StreamBuffer::getPort(const std::string &if_name, PortID idx)
+{
+    if (if_name == "stream_in") {
+        return streamIn;
+    } else if (if_name == "stream_out") {
+        return streamOut;
+    } else if (if_name == "status_in") {
+        return statusIn;
+    } else if (if_name == "status_out") {
+        return statusOut;
+    }
+    return ClockedObject::getPort(if_name, idx);
+}
+
+void
+StreamBuffer::serialize(CheckpointOut &cp) const {
+    SERIALIZE_CONTAINER(buffer);
+}
+
+void
+StreamBuffer::unserialize(CheckpointIn &cp) {
+    UNSERIALIZE_CONTAINER(buffer);
+}
+
+// StreamBuffer *
+// StreamBufferParams::create() {
+// 	return new StreamBuffer(this);
+// }
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_buffer.hh gem5-SALAM/src/hwacc/stream_buffer.hh
--- gem5/src/hwacc/stream_buffer.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_buffer.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,63 @@
+#ifndef __HWACC_STREAM_BUFFER_HH__
+#define __HWACC_STREAM_BUFFER_HH__
+
+#include "params/StreamBuffer.hh"
+// #include "dev/io_device.hh"
+#include "base/circlebuf.hh"
+#include "sim/clocked_object.hh"
+#include "hwacc/stream_port.hh"
+
+class StreamBuffer : public ClockedObject {
+  private:
+    StreamResponsePortT<StreamBuffer> streamIn;
+    StreamResponsePortT<StreamBuffer> streamOut;
+    StatusPort<StreamBuffer> statusIn;
+    StatusPort<StreamBuffer> statusOut;
+    Fifo<uint8_t> buffer;
+    size_t const fifoSize;
+    ByteOrder endian;
+    Addr streamAddr;
+    Addr streamSize;
+  Addr statusAddr;
+  Addr statusSize;
+    Tick streamDelay;
+    const double bandwidth;
+
+  public:
+    // typedef StreamBufferParams Params;
+    // const Params *
+    // params() const
+    // {
+    //   return dynamic_cast<const Params *>(_params);
+    // }
+  PARAMS(StreamBuffer);
+    StreamBuffer(const StreamBufferParams &p);
+
+    size_t size() const { return buffer.size(); }
+    void flush() { buffer.flush(); }
+    bool canReadStream(size_t len);
+    bool canWriteStream(size_t len);
+    void readStream(uint8_t *dst, size_t len);
+    void writeStream(uint8_t *src, size_t len);
+    bool tryReadStream(uint8_t *dst, size_t len);
+    bool tryWriteStream(uint8_t *src, size_t len);
+
+    bool tvalid(PacketPtr pkt);
+    bool tvalid(size_t len, bool isRead);
+
+    virtual Tick streamRead(PacketPtr pkt);
+    virtual Tick streamWrite(PacketPtr pkt);
+  Tick status(PacketPtr pkt, bool readStatus);
+
+    AddrRangeList getStreamAddrRanges() const;
+  AddrRangeList getStatusAddrRanges() const;
+
+    Port &getPort(const std::string &if_name,
+            PortID idx=InvalidPortID) override;
+
+    void serialize(CheckpointOut &cp) const override;
+    void unserialize(CheckpointIn & cp) override;
+    double getBandwidth(){ return bandwidth; };
+};
+
+#endif // __HWACC_STREAM_BUFFER_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/StreamBuffer.py gem5-SALAM/src/hwacc/StreamBuffer.py
--- gem5/src/hwacc/StreamBuffer.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/StreamBuffer.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,20 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.ClockedObject import ClockedObject
+# from Device import BasicPioDevice
+
+class StreamBuffer(ClockedObject):
+    type = 'StreamBuffer'
+    cxx_header = 'hwacc/stream_buffer.hh'
+    system = Param.System(Parent.any, "System this devices is part of")
+    stream_in = ResponsePort("Stream buffer access port for pushing to stream")
+    stream_out = ResponsePort("Stream buffer access port for pulling from stream")
+    status_in = ResponsePort("Stream buffer status port")
+    status_out = ResponsePort("Stream buffer status port")
+    buffer_size = Param.UInt64(256, "Stream buffer depth in bytes")
+    stream_address = Param.Addr("Address for accessing stream data")
+    stream_size = Param.Addr("Stream buffer width in bytes")
+    status_address = Param.Addr("Address for accessing buffer status")
+    status_size = Param.Addr(4, "Size of the buffer status register")
+    stream_latency = Param.Latency('1ns', 'Stream W/R latency')
+    bandwidth = Param.MemoryBandwidth('12.6GB/s', "Combined read and write bandwidth")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_dma.cc gem5-SALAM/src/hwacc/stream_dma.cc
--- gem5/src/hwacc/stream_dma.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_dma.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,366 @@
+//------------------------------------------//
+#include "hwacc/stream_dma.hh"
+//------------------------------------------//
+
+StreamDma::StreamDma(const StreamDmaParams &p)
+    : DmaDevice(p),
+    devname(p.devicename),
+    streamIn(this),
+    streamOut(this),
+    statusIn(this, false),
+    statusOut(this, true),
+    pioAddr(p.pio_addr),
+    pioDelay(p.pio_delay),
+    pioSize(p.pio_size),
+    streamAddr(p.stream_addr),
+    streamSize(p.stream_size),
+    statusAddr(p.status_addr),
+    statusSize(p.status_size),
+    memDelay(p.mem_delay),
+    rdBufferSize(p.read_buffer_size),
+    wrBufferSize(p.write_buffer_size),
+    maxPending(p.max_pending),
+    maxReqSize(p.max_req_size),
+    gic(p.gic),
+    rdInt(p.rd_int),
+    wrInt(p.wr_int),
+    tickEvent(this),
+    bandwidth(p.bandwidth) {
+    readFifo = new DmaReadFifo(dmaPort, rdBufferSize, maxReqSize, maxPending);
+    writeFifo = new DmaWriteFifo(dmaPort, wrBufferSize, maxReqSize, maxPending);
+    mmreg = new uint8_t[32];
+    for (int i=0; i<pioSize; i++)
+        mmreg[i]=0;
+    FLAGS = mmreg;
+    CONFIG = (uint16_t *)(mmreg+CONFIG_OFF);
+    RD_ADDR = (uint64_t *)(mmreg+RD_ADDR_OFF);
+    WR_ADDR = (uint64_t *)(mmreg+WR_ADDR_OFF);
+    RD_FRAME_SIZE = (uint32_t *)(mmreg+RD_FRAME_SIZE_OFF);
+    NUM_RD_FRAMES = (uint8_t *)(mmreg+NUM_RD_FRAMES_OFF);
+    RD_FRAME_BUFF_SIZE = (uint8_t *)(mmreg+RD_FRAME_BUFF_SIZE_OFF);
+    WR_FRAME_SIZE = (uint32_t *)(mmreg+WR_FRAME_SIZE_OFF);
+    NUM_WR_FRAMES = (uint8_t *)(mmreg+NUM_WR_FRAMES_OFF);
+    WR_FRAME_BUFF_SIZE = (uint8_t *)(mmreg+WR_FRAME_BUFF_SIZE_OFF);
+
+    rdRunning = false;
+    wrRunning = false;
+    running = false;
+
+    endian = sys->getGuestByteOrder();
+}
+
+AddrRangeList
+StreamDma::getAddrRanges() const
+{
+    assert(pioSize != 0);
+    AddrRangeList ranges;
+    DPRINTF(AddrRanges, "Valid pio range: %#x-%#x\n", pioAddr, pioAddr+pioSize);
+    ranges.push_back(RangeSize(pioAddr, pioSize));
+    return ranges;
+}
+
+AddrRangeList
+StreamDma::getStreamAddrRanges() const {
+    assert(streamSize != 0);
+    AddrRangeList streamRanges;
+    DPRINTF(AddrRanges, "Valid stream range: %#x-%#x\n", streamAddr, streamAddr+streamSize);
+    streamRanges.push_back(RangeSize(streamAddr, streamSize));
+    return streamRanges;
+}
+
+AddrRangeList
+StreamDma::getStatusAddrRanges() const {
+	assert(statusSize != 0);
+	AddrRangeList statusRanges;
+	DPRINTF(AddrRanges, "registering range: %#x-%#x\n", statusAddr, statusSize);
+    statusRanges.push_back(RangeSize(statusAddr, statusSize));
+    return statusRanges;
+}
+
+void
+StreamDma::tick() {
+
+    if (!rdRunning && ((*FLAGS&RD_START_MASK)==RD_START_MASK)) {
+        rdRunning = true;
+        *FLAGS &= ~RD_START_MASK;
+        *FLAGS |= RD_RUNNING_MASK;
+        readAddr = *RD_ADDR;
+        readPtr = readAddr;
+        readFrameSize = *RD_FRAME_SIZE;
+        framesToRead = *NUM_RD_FRAMES;
+        readFrameBuffSize = *RD_FRAME_BUFF_SIZE;
+        framesRead = 0;
+        readIntFrames = *(uint8_t *)CONFIG;
+        DPRINTF(StreamDma, "Initializing frame read from 0x%016x with frame size of %d Bytes\n", readPtr, readFrameSize);
+        readFifo->startFill(readPtr, readFrameSize);
+    }
+
+    if (!wrRunning && ((*FLAGS&WR_START_MASK)==WR_START_MASK)) {
+        wrRunning = true;
+        *FLAGS &= ~WR_START_MASK;
+        *FLAGS |= WR_RUNNING_MASK;
+        writeAddr = *WR_ADDR;
+        writePtr = writeAddr;
+        writeFrameSize = *WR_FRAME_SIZE;
+        framesToWrite = *NUM_WR_FRAMES;
+        writeFrameBuffSize = *WR_FRAME_BUFF_SIZE;
+        framesWritten = 0;
+        writeIntFrames = *CONFIG>>8;
+        DPRINTF(StreamDma, "MMR After Write: %08x\n", *FLAGS);
+        DPRINTF(StreamDma, "Initializing frame write to 0x%016x with frame size of %d Bytes\n", writePtr, writeFrameSize);
+        writeFifo->startEmpty(writePtr, writeFrameSize);
+    }
+
+    if ((*FLAGS&RD_INT_MASK) != RD_INT_MASK) {
+        gic->clearInt(rdInt);
+    }
+
+    if ((*FLAGS&WR_INT_MASK) != WR_INT_MASK) {
+        gic->clearInt(wrInt);
+    }
+
+    if (rdRunning && !readFifo->isActive()) {
+        framesRead++;
+        DPRINTF(StreamDma, "Frame %d of %d read\n", framesRead, framesToRead);
+        if (readIntFrames != 0) {
+            if (framesRead % readIntFrames == 0) {
+                gic->sendInt(rdInt);
+                *FLAGS |= RD_INT_MASK;
+            }
+        }
+        if ((framesToRead != 0) && (framesRead >= framesToRead)) {
+            rdRunning = false;
+            *FLAGS &= ~RD_RUNNING_MASK;
+        } else {
+            assert(readFrameBuffSize != 0);
+            readPtr = readAddr + ((framesRead % readFrameBuffSize) * readFrameSize);
+            DPRINTF(StreamDma, "Initializing frame read from 0x%016x with frame size of %d Bytes\n", readPtr, readFrameSize);
+            readFifo->startFill(readPtr, readFrameSize);
+        }
+    }
+
+    if (wrRunning && !writeFifo->isActive()) {
+        framesWritten++;
+        DPRINTF(StreamDma, "Frame %d of %d written\n", framesWritten, framesToWrite);
+        if (writeIntFrames != 0) {
+            if (framesWritten % writeIntFrames == 0) {
+                gic->sendInt(wrInt);
+                *FLAGS |= WR_INT_MASK;
+            }
+        }
+        if ((framesToWrite != 0) && (framesWritten >= framesToWrite)) {
+            wrRunning = false;
+            *FLAGS &= ~WR_RUNNING_MASK;
+        } else {
+            assert(writeFrameBuffSize != 0);
+            writePtr = writeAddr + ((framesWritten % writeFrameBuffSize) * writeFrameSize);
+            DPRINTF(StreamDma, "Initializing frame write to 0x%016x with frame size of %d Bytes\n", writePtr, writeFrameSize);
+            writeFifo->startEmpty(writePtr, writeFrameSize);
+        }
+    }
+
+    running = rdRunning || wrRunning;
+    if (!tickEvent.scheduled() && running) {
+        schedule(tickEvent, nextCycle());
+    }
+}
+
+Tick
+StreamDma::read(PacketPtr pkt) {
+
+    Addr offset = pkt->req->getPaddr() - pioAddr;
+
+    if (offset < BUFFER_ACCESS_OFF) {
+        DPRINTF(DeviceMMR, "The MMR associated with this DMA was read from!\n");
+
+        uint32_t data;
+
+        data = *(uint32_t *)(mmreg+offset);
+
+        switch(pkt->getSize()) {
+          case 1:
+            pkt->set<uint8_t>(data, endian);
+            break;
+          case 2:
+            pkt->set<uint16_t>(data, endian);
+            break;
+          case 4:
+            pkt->set<uint32_t>(data, endian);
+            break;
+          default:
+            panic("Read size too big?\n");
+            break;
+        }
+    } else {
+        DPRINTF(DeviceMMR, "The data buffer associated with this DMA was read from!\n");
+
+        uint8_t *buff = new uint8_t[pkt->getSize()];
+        readFifo->get(buff, pkt->getSize());
+        uint64_t data = *(uint64_t *)buff;
+        delete buff;
+
+        switch(pkt->getSize()) {
+          case 1:
+            pkt->set<uint8_t>(data, endian);
+            break;
+          case 2:
+            pkt->set<uint16_t>(data, endian);
+            break;
+          case 4:
+            pkt->set<uint32_t>(data, endian);
+            break;
+          case 8:
+            pkt->set<uint64_t>(data, endian);
+            break;
+          default:
+            panic("Read size too big?\n");
+            break;
+        }
+    }
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, nextCycle());
+    }
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+StreamDma::write(PacketPtr pkt) {
+
+    Addr offset = pkt->req->getPaddr() - pioAddr;
+
+    if (offset < BUFFER_ACCESS_OFF) {
+        DPRINTF(DeviceMMR, "The MMR associated with this DMA was written to!\n");
+
+        pkt->writeData(mmreg + offset);
+    } else {
+        DPRINTF(DeviceMMR, "The data buffer associated with this DMA was written to!\n");
+        uint8_t * data = new uint8_t[pkt->getSize()];
+        pkt->writeData(data);
+        writeFifo->fill(data, pkt->getSize());
+        delete data;
+    }
+
+    if (!tickEvent.scheduled()) {
+        schedule(tickEvent, nextCycle());
+    }
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+StreamDma::streamRead(PacketPtr pkt) {
+    DPRINTF(DeviceMMR, "The data buffer associated with this DMA was read from!\n");
+
+    uint8_t *buff = new uint8_t[pkt->getSize()];
+    readFifo->get(buff, pkt->getSize());
+    uint64_t data = *(uint64_t *)buff;
+    delete buff;
+
+    switch(pkt->getSize()) {
+      case 1:
+        pkt->set<uint8_t>(data, endian);
+        break;
+      case 2:
+        pkt->set<uint16_t>(data, endian);
+        break;
+      case 4:
+        pkt->set<uint32_t>(data, endian);
+        break;
+      case 8:
+        pkt->set<uint64_t>(data, endian);
+        break;
+      default:
+        panic("Read size too big?\n");
+        break;
+    }
+    Tick duration = pkt->getSize() * bandwidth;
+
+    pkt->makeAtomicResponse();
+
+    return duration;
+}
+
+Tick
+StreamDma::streamWrite(PacketPtr pkt) {
+    DPRINTF(DeviceMMR, "The data buffer associated with this DMA was written to!\n");
+    uint8_t * data = new uint8_t[pkt->getSize()];
+    pkt->writeData(data);
+    writeFifo->fill(data, pkt->getSize());
+    delete data;
+
+    pkt->makeAtomicResponse();
+    return pioDelay;
+}
+
+Tick
+StreamDma::status(PacketPtr pkt, bool readStatus) {
+	// Provide a means of reading the current buffer capacity of the stream
+	// Writes to this register do nothing
+	if (pkt->isRead()) {
+        uint64_t data;
+        if (readStatus) {
+            DPRINTF(StreamDma, "The status of the MM2S buffer has been read. Current capacity is %d of %d bytes\n",
+                    readFifo->size(), rdBufferSize);
+            data = readFifo->size();
+        } else {
+            DPRINTF(StreamDma, "The status of the S2MM buffer has been read. Current capacity is %d of %d bytes\n",
+                    writeFifo->size(), wrBufferSize);
+            data = writeFifo->size();
+        }
+		switch(pkt->getSize()) {
+			case 1:
+				pkt->set<uint8_t>(data, endian);
+				break;
+			case 2:
+				pkt->set<uint16_t>(data, endian);
+				break;
+			case 4:
+				pkt->set<uint32_t>(data, endian);
+				break;
+			case 8:
+				pkt->set<uint64_t>(data, endian);
+				break;
+			default:
+				panic("Read size too big?\n");
+				break;
+    	}
+	}
+	Tick duration = pkt->getSize() * bandwidth;
+    pkt->makeAtomicResponse();
+    return duration;
+}
+
+bool
+StreamDma::tvalid(PacketPtr pkt) {
+    return tvalid(pkt->getSize(), pkt->isRead());
+}
+
+bool
+StreamDma::tvalid(size_t len, bool isRead) {
+    if (isRead) {
+        return (readFifo->size() >= len) ? true : false;
+    } else {
+        return writeFifo->canFill(len);
+    }
+}
+
+Port &
+StreamDma::getPort(const std::string &if_name, PortID idx) {
+    if (if_name == "stream_in") {
+        return streamIn;
+    } else if (if_name == "stream_out") {
+        return streamOut;
+    } else if (if_name == "status_in") {
+        return statusIn;
+    } else if (if_name == "status_out") {
+    	return statusOut;
+	}
+    return DmaDevice::getPort(if_name, idx);
+}
+
+// StreamDma *
+// StreamDmaParams::create() {
+//     return new StreamDma(this);
+// }
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_dma.hh gem5-SALAM/src/hwacc/stream_dma.hh
--- gem5/src/hwacc/stream_dma.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_dma.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,188 @@
+#ifndef __HWACC_STREAM_DMA_HH__
+#define __HWACC_STREAM_DMA_HH__
+//------------------------------------------//
+#include "hwacc/LLVMRead/src/debug_flags.hh"
+#include "hwacc/dma_write_fifo.hh"
+#include "params/StreamDma.hh"
+#include "dev/dma_device.hh"
+#include "dev/arm/base_gic.hh"
+#include "hwacc/stream_port.hh"
+#include "mem/packet.hh"
+#include "mem/packet_access.hh"
+//------------------------------------------//
+
+/*
+    Steaming DMA device with 2 modes.
+    1. Memory to Stream (MM2S)
+    2. Stream to Memory (S2MM)
+    Data read from memory is stored in a FIFO buffer. Reads from the Buffer Access Range will read the FIFO, enabling use with
+    devices that make "addressable" memory requests. Writes to the Buffer Access Range will store into the write FIFO to be
+    writen back to memory later. Supports interrupts based on the number of Frames transmitted.
+
+
+    Memory Mapped Register 32+N Bytes
+    | Buffer Access Range | WrFrameBuffSize | NumWrFrames | WrFrameSize | RdFrameBuffSize | NumRdFrames | RdFrameSize | Wr_Addr | Rd_Addr | Configs | Flags  |
+    |---------------------|-----------------|-------------|-------------|-----------------|-------------|-------------|---------|---------|---------|--------|
+    |       N Bytes       |     1 Bytes     |   1 Bytes   |   4 Bytes   |     1 Bytes     |   1 Bytes   |   4 Bytes   | 8 Bytes | 8 Bytes | 3 Bytes | 1 Byte |
+
+    Buffer Access Range - Reads/Writes from/to this address range access the internal Rd and Wr FIFOs. This is to enable access
+        by devices using "addressable" memory requests. The actual memory offset does not matter however.
+    WrFrameBuffSize - Number of Write frames actually stored in memory. Allows for ping-pong buffering in memory.
+    NumWrFrames - Total number of frames to write. Use '0' to enable unlimited frames.
+    WrFrameSize - The size of a Write frame in Bytes.
+    RdFrameBuffSize - Number of Read frames actually stored in memory. Allows for ping-pong buffering in memory.
+    NumRdFrames - Total number of frames to read. Use '0' to enable unlimited frames.
+    RdFrameSize - The size of a Read frame in Bytes.
+    Wr_Addr - The base address to which we are writing the first frame.
+    Rd_Addr - The base address from which the first frame is read.
+
+    Config Register
+    | Unused  | WrIntFrame | RdIntFrame |
+    |---------|------------|------------|
+    | 1 Byte  |   1 Byte   |   1 Byte   |
+    23        15           7            0
+
+    RdIntFrame - Number of frames to read before raising interrupt '0' for never
+    WrIntFrame - Number of frames to write before raising interrupt '0' for never
+
+    Flags Register
+    | Unused | WrInt | RdInt | WrRunning | RdRunning | WrStart | RdStart |
+    |--------|-------|-------|-----------|-----------|---------|---------|
+    | 2 Bits | 1 Bit | 1 Bit |   1 Bit   |   1 Bit   |  1 Bit  |  1 Bit  |
+    7        6       5       4           3           2         1         0
+
+*/
+
+#define FLAGS_OFF               0
+#define CONFIG_OFF              FLAGS_OFF+1
+#define RD_ADDR_OFF             CONFIG_OFF+3
+#define WR_ADDR_OFF             RD_ADDR_OFF+8
+#define RD_FRAME_SIZE_OFF       WR_ADDR_OFF+8
+#define NUM_RD_FRAMES_OFF       RD_FRAME_SIZE_OFF+4
+#define RD_FRAME_BUFF_SIZE_OFF  NUM_RD_FRAMES_OFF+1
+#define WR_FRAME_SIZE_OFF       RD_FRAME_BUFF_SIZE_OFF+1
+#define NUM_WR_FRAMES_OFF       WR_FRAME_SIZE_OFF+4
+#define WR_FRAME_BUFF_SIZE_OFF  NUM_WR_FRAMES_OFF+1
+#define BUFFER_ACCESS_OFF       WR_FRAME_BUFF_SIZE_OFF+1
+
+#define START_MASK              0x03
+#define RD_START_MASK           0x01
+#define WR_START_MASK           0x02
+#define RUNNING_MASK            0x0C
+#define RD_RUNNING_MASK         0x04
+#define WR_RUNNING_MASK         0x08
+#define INT_MASK                0x30
+#define RD_INT_MASK             0x10
+#define WR_INT_MASK             0x20
+
+class StreamDma : public DmaDevice {
+  private:
+    std::string devname;
+    StreamResponsePortT<StreamDma> streamIn;
+    StreamResponsePortT<StreamDma> streamOut;
+    StatusPort<StreamDma> statusIn;
+    StatusPort<StreamDma> statusOut;
+    DmaReadFifo *readFifo;
+    DmaWriteFifo *writeFifo;
+    Addr pioAddr;
+    Tick pioDelay;
+    Addr pioSize;
+    Addr streamAddr;
+    Addr streamSize;
+    Addr statusAddr;
+	  Addr statusSize;
+    Tick memDelay;
+    size_t rdBufferSize;
+    size_t wrBufferSize;
+    unsigned maxPending;
+    unsigned maxReqSize;
+    BaseGic * gic;
+    uint32_t rdInt;
+    uint32_t wrInt;
+
+    bool rdRunning;
+    bool wrRunning;
+    bool running;
+
+    ByteOrder endian;
+
+    class TickEvent : public Event
+    {
+      private:
+        StreamDma *dma;
+
+      public:
+        TickEvent(StreamDma *_dma) : Event(CPU_Tick_Pri), dma(_dma) {}
+        void process() { dma->tick(); }
+        virtual const char *description() const { return "StreamDma tick"; }
+    };
+
+    TickEvent tickEvent;
+
+    const double bandwidth;
+
+    uint8_t * mmreg;
+    uint8_t * FLAGS;
+    uint16_t * CONFIG;
+    uint64_t * RD_ADDR;
+    uint64_t * WR_ADDR;
+    uint32_t * RD_FRAME_SIZE;
+    uint8_t * NUM_RD_FRAMES;
+    uint8_t * RD_FRAME_BUFF_SIZE;
+    uint32_t * WR_FRAME_SIZE;
+    uint8_t * NUM_WR_FRAMES;
+    uint8_t * WR_FRAME_BUFF_SIZE;
+
+    uint64_t readAddr;
+    uint32_t readFrameSize;
+    uint8_t framesToRead;
+    uint8_t readFrameBuffSize;
+    uint64_t framesRead;
+    uint8_t readIntFrames;
+    uint64_t readPtr;
+
+    uint64_t writeAddr;
+    uint32_t writeFrameSize;
+    uint8_t framesToWrite;
+    uint8_t writeFrameBuffSize;
+    uint64_t framesWritten;
+    uint8_t writeIntFrames;
+    uint64_t writePtr;
+
+  protected:
+
+  public:
+    // typedef StreamDmaParams Params;
+
+    // const Params *
+    // params() const
+    // {
+    //   return dynamic_cast<const Params *>(_params);
+    // }
+    PARAMS(StreamDma);
+    StreamDma(const StreamDmaParams &p);
+    ~StreamDma() {}
+
+    AddrRangeList getAddrRanges() const;
+    AddrRangeList getStreamAddrRanges() const;
+    AddrRangeList getStatusAddrRanges() const;
+
+    void tick();
+
+    Tick read(PacketPtr pkt);
+    Tick write(PacketPtr pkt);
+
+    Tick streamRead(PacketPtr pkt);
+    Tick streamWrite(PacketPtr pkt);
+    Tick status(PacketPtr pkt, bool readStatus);
+
+    bool tvalid(PacketPtr pkt);
+    bool tvalid(size_t len, bool isRead);
+
+    double getBandwidth(){ return bandwidth; };
+
+    Port &getPort(const std::string &if_name,
+            PortID idx=InvalidPortID) override;
+};
+
+#endif //__HWACC_STREAM_DMA_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/StreamDma.py gem5-SALAM/src/hwacc/StreamDma.py
--- gem5/src/hwacc/StreamDma.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/StreamDma.py	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,29 @@
+from m5.params import *
+from m5.proxy import *
+from m5.objects.Device import DmaDevice
+
+class StreamDma(DmaDevice) :
+    type = 'StreamDma'
+    cxx_header = 'hwacc/stream_dma.hh'
+    devicename = Param.String("stream_dma", "Name of DMA device")
+    pio_addr = Param.Addr("Device Address")
+    pio_delay = Param.Latency('100ns', "PIO Latency")
+    pio_size = Param.Addr(32, "MMR Size")
+    stream_in = ResponsePort("Stream buffer access port for S2MM")
+    stream_out = ResponsePort("Stream buffer access port for MM2S")
+    stream_addr = Param.Addr("Stream interface address")
+    stream_size = Param.Addr(8, "Stream width")
+    status_in = ResponsePort("Stream buffer status port")
+    status_out = ResponsePort("Stream buffer status port")
+    status_addr = Param.Addr("Address for accessing buffer status")
+    status_size = Param.Addr(4, "Size of the buffer status register")
+    mem_delay = Param.Latency('1ns', "Buffer read time")
+    read_buffer_size = Param.UInt64(1024, "Read buffer size")
+    write_buffer_size = Param.UInt64(1024, "Write buffer size")
+    max_pending = Param.Unsigned(8, "Maximum number of pending DMA reads")
+    max_req_size = Param.Unsigned(Parent.cache_line_size, "Maximum size of a DMA request")
+    gic = Param.BaseGic(Parent.any, "Gic on which to trigger interrupts")
+    rd_int = Param.UInt32(210, "Interrupt for read buffer")
+    wr_int = Param.UInt32(211, "Interrupt for write buffer")
+
+    bandwidth = Param.MemoryBandwidth('12.6GB/s', "Combined read and write bandwidth")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_port.cc gem5-SALAM/src/hwacc/stream_port.cc
--- gem5/src/hwacc/stream_port.cc	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_port.cc	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,26 @@
+#include "hwacc/stream_port.hh"
+#include "sim/sim_object.hh"
+
+StreamRequestPort::StreamRequestPort(const std::string& name, SimObject* _owner, PortID _id)
+	: RequestPort(name, _owner, _id) {
+	//
+}
+
+StreamRequestPort::~StreamRequestPort() {
+	//
+}
+
+void
+StreamRequestPort::bind(Port &peer) {
+	auto *stream_slave = dynamic_cast<StreamResponsePort *>(&peer);
+	if (stream_slave) {
+		_stream_slave = stream_slave;
+	}
+	RequestPort::bind(peer);
+}
+
+void
+StreamRequestPort::unbind() {
+	_stream_slave = nullptr;
+	RequestPort::unbind();
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/hwacc/stream_port.hh gem5-SALAM/src/hwacc/stream_port.hh
--- gem5/src/hwacc/stream_port.hh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/hwacc/stream_port.hh	2024-02-22 18:17:15.120944581 -0600
@@ -0,0 +1,215 @@
+#ifndef __HWACC_STREAM_PORT_HH__
+#define __HWACC_STREAM_PORT_HH__
+
+#include "mem/port.hh"
+#include "mem/tport.hh"
+
+using namespace gem5;
+
+/** Forward declaration **/
+class StreamRequestPort;
+
+/**
+ * A StreamResponsePort is a specialization of a SimpleTimingPort meant to enable
+ * functionality similar to the master port in the AXI-Stream specification.
+ * This serves only as a base class.
+ */
+class StreamResponsePort : public SimpleTimingPort {
+  friend class StreamRequestPort;
+  private:
+  protected:
+    virtual bool tvalid(PacketPtr pkt) = 0;
+    virtual bool tvalid(size_t len, bool isRead) = 0;
+    Tick recvAtomic(PacketPtr pkt) override {
+      Tick t = 0;
+      return t;
+    }
+    AddrRangeList getAddrRanges() const override {
+      AddrRangeList range;
+      return range;
+    }
+  public:
+    StreamResponsePort(const std::string& name, SimObject* owner) :
+      SimpleTimingPort(name, owner) {}
+};
+
+/**
+ * Templated StreamResponsePort that functions similarly to the pio port on PioDevices.
+ */
+template <class Device>
+class StreamResponsePortT : public StreamResponsePort
+{
+  friend class StreamRequestPort;
+
+  private:
+    bool isBusy;
+    bool retryReq;
+
+    EventFunctionWrapper releaseEvent;
+
+    void
+    release() {
+        assert(isBusy);
+        isBusy = false;
+        if (retryReq) {
+            retryReq = false;
+            sendRetryReq();
+        }
+    }
+
+  protected:
+  Device *device;
+
+    virtual bool tvalid(PacketPtr pkt) { return device->tvalid(pkt); }
+    virtual bool tvalid(size_t len, bool isRead) { return device->tvalid(len, isRead); }
+
+    bool
+    recvTimingReq(PacketPtr pkt) override {
+        // we should not get a new request after committing to retry the
+        // current one, but unfortunately the CPU violates this rule, so
+        // simply ignore it for now
+        if (retryReq)
+          return false;
+        // if we are busy with a read or write, remember that we have to
+        // retry
+        if (isBusy) {
+          retryReq = true;
+          return false;
+        }
+        // Make sure that the transfer is valid
+        if(!tvalid(pkt))
+          return false;
+        // the SimpleTimingPort should not be used anywhere where there is
+        // a need to deal with snoop responses and their flow control
+        // requirements
+        if (pkt->cacheResponding())
+            panic("SimpleTimingPort should never see packets with the "
+                  "cacheResponding flag set\n");
+
+        Tick duration = pkt->getSize() * device->getBandwidth();
+
+        if (duration != 0) {
+            device->schedule(releaseEvent, curTick() + duration);
+            isBusy = true;
+        }
+
+        bool needsResponse = pkt->needsResponse();
+
+        Tick latency = recvAtomic(pkt);
+
+        // turn packet around to go back to requester if response expected
+        if (needsResponse) {
+            // recvAtomic() should already have turned packet into
+            // atomic response
+            assert(pkt->isResponse());
+            schedTimingResp(pkt, curTick() + latency);
+        } else {
+            // queue the packet for deletion
+            pendingDelete.reset(pkt);
+        }
+        return true;
+    }
+
+    Tick recvAtomic(PacketPtr pkt) override {
+      Tick receive_delay = pkt->headerDelay + pkt->payloadDelay;
+      pkt->headerDelay = pkt->payloadDelay = 0;
+      const Tick delay =
+        pkt->isRead() ? device->streamRead(pkt) : device->streamWrite(pkt);
+      assert(pkt->isResponse() || pkt->isError());
+      return delay + receive_delay;
+    }
+
+    AddrRangeList getAddrRanges() const override {
+      return device->getStreamAddrRanges();
+    }
+
+  public:
+    StreamResponsePortT(Device *dev) :
+      StreamResponsePort(dev->name() + ".stream", dev),
+      isBusy(false),
+      retryReq(false),
+      releaseEvent([this]{ release(); }, dev->name()),
+      device(dev) {}
+      virtual ~StreamResponsePortT() {}
+};
+
+/**
+ * A StreamRequestPort is a specialization of a RequestPort, meant to enable
+ * functionality similar to the master port in the AXI-Stream specification.
+ * A StreamRequestPort is able to check the valid signal on a corresponding
+ * StreamResponsePort before initiating a transfer. Otherwise it functions like
+ * a standard RequestPort.
+ */
+class StreamRequestPort : public RequestPort {
+  private:
+    StreamResponsePort *_stream_slave;
+
+  protected:
+    //
+  public:
+    StreamRequestPort(const std::string& name, SimObject* _owner,
+                 PortID id=InvalidPortID);
+    virtual ~StreamRequestPort();
+
+    /**
+     * Bind this master port to a slave port. This also does the
+     * mirror action and binds the slave port to the master port.
+     * If the slave port is a stream slave, also binds the tvalid
+     * signal.
+     */
+    void bind(Port &peer) override;
+
+    /**
+     * Unbind this master port and the associated slave port.
+     */
+    void unbind() override;
+
+    /**
+   * If the slave port is a stream slave port, then check if it can
+   * service a request of size 'len'
+     */
+    bool streamValid(PacketPtr pkt) {
+      if (_stream_slave)
+        return _stream_slave->tvalid(pkt);
+      return true;
+    }
+    bool streamValid(size_t len, bool isRead) {
+      if (_stream_slave)
+        return _stream_slave->tvalid(len, isRead);
+      return true;
+    }
+};
+
+template <class Device>
+class StatusPort : public SimpleTimingPort
+{
+  protected:
+  Device * device;
+  bool read; // Port reads from the stream
+
+  Tick
+    recvAtomic(PacketPtr pkt) override
+    {
+        // Technically the packet only reaches us after the header delay,
+        // and typically we also need to deserialise any payload.
+        Tick receive_delay = pkt->headerDelay + pkt->payloadDelay;
+        pkt->headerDelay = pkt->payloadDelay = 0;
+
+        const Tick delay = device->status(pkt, read);
+        assert(pkt->isResponse() || pkt->isError());
+        return delay + receive_delay;
+    }
+
+    AddrRangeList
+    getAddrRanges() const override
+    {
+        return device->getStatusAddrRanges();
+    }
+
+  public:
+    StatusPort(Device *dev, bool _read=true) :
+        SimpleTimingPort(dev->name() + ".status", dev), device(dev), read(_read)
+    {}
+};
+
+#endif //__HWACC_STREAM_PORT_HH__
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/kern/linux/helpers.cc gem5-SALAM/src/kern/linux/helpers.cc
--- gem5/src/kern/linux/helpers.cc	2024-02-22 18:25:43.883606035 -0600
+++ gem5-SALAM/src/kern/linux/helpers.cc	2024-02-22 18:17:15.120944581 -0600
@@ -40,7 +40,6 @@
 #include "base/compiler.hh"
 #include "cpu/thread_context.hh"
 #include "mem/port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 #include "sim/byteswap.hh"
 #include "sim/system.hh"
 
@@ -98,7 +97,7 @@
     System *system = tc->getSystemPtr();
     const ByteOrder bo = system->getGuestByteOrder();
     const auto &symtab = system->workload->symtab(tc);
-    TranslatingPortProxy proxy(tc);
+    PortProxy &proxy = tc->getVirtProxy();
 
     auto lb = symtab.find("__log_buf");
     auto lb_len = symtab.find("log_buf_len");
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/kern/linux/linux.cc gem5-SALAM/src/kern/linux/linux.cc
--- gem5/src/kern/linux/linux.cc	2024-02-22 18:25:43.883606035 -0600
+++ gem5-SALAM/src/kern/linux/linux.cc	2024-02-22 18:17:15.120944581 -0600
@@ -77,7 +77,7 @@
     if (matched) {
         FILE *f = tmpfile();
         int fd = fileno(f);
-        [[maybe_unused]] size_t ret = fwrite(data.c_str(), 1, data.size(), f);
+        GEM5_VAR_USED size_t ret = fwrite(data.c_str(), 1, data.size(), f);
         assert(ret == data.size());
         rewind(f);
         return fd;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/kern/linux/printk.cc gem5-SALAM/src/kern/linux/printk.cc
--- gem5/src/kern/linux/printk.cc	2024-02-22 18:25:43.883606035 -0600
+++ gem5-SALAM/src/kern/linux/printk.cc	2024-02-22 18:17:15.120944581 -0600
@@ -37,7 +37,6 @@
 #include "base/compiler.hh"
 #include "cpu/thread_context.hh"
 #include "mem/port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 
 namespace gem5
 {
@@ -52,8 +51,7 @@
 {
     std::string format;
     std::ostringstream out;
-    TranslatingPortProxy proxy(tc);
-    proxy.readString(format, format_ptr);
+    tc->getVirtProxy().readString(format, format_ptr);
 
     const char *p = format.c_str();
 
@@ -111,7 +109,7 @@
                 break;
               case 'P':
                 format = true;
-                [[fallthrough]];
+                GEM5_FALLTHROUGH;
               case 'p':
                 hexnum = true;
                 break;
@@ -183,7 +181,7 @@
                     Addr s_ptr = args.get<Addr>();
                     std::string s;
                     if (s_ptr)
-                        proxy.readString(s, s_ptr);
+                        tc->getVirtProxy().readString(s, s_ptr);
                     else
                         s = "<NULL>";
 
@@ -221,7 +219,7 @@
                     uint64_t n = args.get<uint64_t>();
                     Addr s_ptr = args.get<Addr>();
                     std::string s;
-                    proxy.readString(s, s_ptr);
+                    tc->getVirtProxy().readString(s, s_ptr);
                     out << s << ": " << n;
                 }
                 break;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/kern/system_events.cc gem5-SALAM/src/kern/system_events.cc
--- gem5/src/kern/system_events.cc	2024-02-22 18:25:43.883606035 -0600
+++ gem5-SALAM/src/kern/system_events.cc	2024-02-22 18:17:15.124944602 -0600
@@ -39,7 +39,7 @@
 void
 SkipFuncBase::process(ThreadContext *tc)
 {
-    [[maybe_unused]] TheISA::PCState oldPC = tc->pcState();
+    GEM5_VAR_USED TheISA::PCState oldPC = tc->pcState();
 
     returnFromFuncIn(tc);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/learning_gem5/part2/simple_cache.cc gem5-SALAM/src/learning_gem5/part2/simple_cache.cc
--- gem5/src/learning_gem5/part2/simple_cache.cc	2024-02-22 18:16:36.592743155 -0600
+++ gem5-SALAM/src/learning_gem5/part2/simple_cache.cc	2024-02-22 18:17:15.124944602 -0600
@@ -233,7 +233,7 @@
         DPRINTF(SimpleCache, "Copying data from new packet to old\n");
         // We had to upgrade a previous packet. We can functionally deal with
         // the cache access now. It better be a hit.
-        [[maybe_unused]] bool hit = accessFunctional(originalPacket);
+        GEM5_VAR_USED bool hit = accessFunctional(originalPacket);
         panic_if(!hit, "Should always hit after inserting");
         originalPacket->makeResponse();
         delete pkt; // We may need to delay this, I'm not sure.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/base.cc gem5-SALAM/src/mem/cache/base.cc
--- gem5/src/mem/cache/base.cc	2024-02-22 18:25:43.887606056 -0600
+++ gem5-SALAM/src/mem/cache/base.cc	2024-02-22 18:17:15.124944602 -0600
@@ -917,8 +917,7 @@
 
     // Get previous compressed size
     CompressionBlk* compression_blk = static_cast<CompressionBlk*>(blk);
-    [[maybe_unused]] const std::size_t prev_size =
-        compression_blk->getSizeBits();
+    GEM5_VAR_USED const std::size_t prev_size = compression_blk->getSizeBits();
 
     // If compressed size didn't change enough to modify its co-allocatability
     // there is nothing to do. Otherwise we may be facing a data expansion
@@ -1157,9 +1156,9 @@
     // sanity check
     assert(pkt->isRequest());
 
-    gem5_assert(!(isReadOnly && pkt->isWrite()),
-                "Should never see a write in a read-only cache %s\n",
-                name());
+    chatty_assert(!(isReadOnly && pkt->isWrite()),
+                  "Should never see a write in a read-only cache %s\n",
+                  name());
 
     // Access block in the tags
     Cycles tag_latency(0);
@@ -1502,8 +1501,8 @@
             // owners copy
             blk->setCoherenceBits(CacheBlk::DirtyBit);
 
-            gem5_assert(!isReadOnly, "Should never see dirty snoop response "
-                        "in read-only cache %s\n", name());
+            chatty_assert(!isReadOnly, "Should never see dirty snoop response "
+                          "in read-only cache %s\n", name());
 
         }
     }
@@ -1616,8 +1615,8 @@
 PacketPtr
 BaseCache::writebackBlk(CacheBlk *blk)
 {
-    gem5_assert(!isReadOnly || writebackClean,
-                "Writeback from read-only cache");
+    chatty_assert(!isReadOnly || writebackClean,
+                  "Writeback from read-only cache");
     assert(blk && blk->isValid() &&
         (blk->isSet(CacheBlk::DirtyBit) || writebackClean));
 
@@ -2454,7 +2453,7 @@
     if (cache->system->bypassCaches()) {
         // Just forward the packet if caches are disabled.
         // @todo This should really enqueue the packet rather
-        [[maybe_unused]] bool success = cache->memSidePort.sendTimingReq(pkt);
+        GEM5_VAR_USED bool success = cache->memSidePort.sendTimingReq(pkt);
         assert(success);
         return true;
     } else if (tryTiming(pkt)) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/base.hh gem5-SALAM/src/mem/cache/base.hh
--- gem5/src/mem/cache/base.hh	2024-02-22 18:25:43.887606056 -0600
+++ gem5-SALAM/src/mem/cache/base.hh	2024-02-22 18:17:15.124944602 -0600
@@ -808,7 +808,7 @@
      * @param blk Block to invalidate
      * @return A packet with the writeback, can be nullptr
      */
-    [[nodiscard]] virtual PacketPtr evictBlock(CacheBlk *blk) = 0;
+    GEM5_NO_DISCARD virtual PacketPtr evictBlock(CacheBlk *blk) = 0;
 
     /**
      * Evict a cache block.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/cache.cc gem5-SALAM/src/mem/cache/cache.cc
--- gem5/src/mem/cache/cache.cc	2024-02-22 18:25:43.887606056 -0600
+++ gem5-SALAM/src/mem/cache/cache.cc	2024-02-22 18:17:15.124944602 -0600
@@ -165,9 +165,9 @@
     if (pkt->req->isUncacheable()) {
         assert(pkt->isRequest());
 
-        gem5_assert(!(isReadOnly && pkt->isWrite()),
-                    "Should never see a write in a read-only cache %s\n",
-                    name());
+        chatty_assert(!(isReadOnly && pkt->isWrite()),
+                      "Should never see a write in a read-only cache %s\n",
+                      name());
 
         DPRINTF(Cache, "%s for %s\n", __func__, pkt->print());
 
@@ -452,7 +452,7 @@
         // this express snoop travels towards the memory, and at
         // every crossbar it is snooped upwards thus reaching
         // every cache in the system
-        [[maybe_unused]] bool success = memSidePort.sendTimingReq(snoop_pkt);
+        GEM5_VAR_USED bool success = memSidePort.sendTimingReq(snoop_pkt);
         // express snoops always succeed
         assert(success);
 
@@ -995,7 +995,7 @@
     // responds in atomic mode, so remember a few things about the
     // original packet up front
     bool invalidate = pkt->isInvalidate();
-    [[maybe_unused]] bool needs_writable = pkt->needsWritable();
+    GEM5_VAR_USED bool needs_writable = pkt->needsWritable();
 
     // at the moment we could get an uncacheable write which does not
     // have the invalidate flag, and we need a suitable way of dealing
@@ -1104,7 +1104,7 @@
         // xbar.
         respond = blk->isSet(CacheBlk::DirtyBit) && pkt->needsResponse();
 
-        gem5_assert(!(isReadOnly && blk->isSet(CacheBlk::DirtyBit)),
+        chatty_assert(!(isReadOnly && blk->isSet(CacheBlk::DirtyBit)),
             "Should never have a dirty block in a read-only cache %s\n",
             name());
     }
@@ -1397,7 +1397,7 @@
         // prefetchSquash first may result in the MSHR being
         // prematurely deallocated.
         if (snoop_pkt.cacheResponding()) {
-            [[maybe_unused]] auto r = outstandingSnoop.insert(snoop_pkt.req);
+            GEM5_VAR_USED auto r = outstandingSnoop.insert(snoop_pkt.req);
             assert(r.second);
 
             // if we are getting a snoop response with no sharers it
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/cache.hh gem5-SALAM/src/mem/cache/cache.hh
--- gem5/src/mem/cache/cache.hh	2024-02-22 18:16:36.596743176 -0600
+++ gem5-SALAM/src/mem/cache/cache.hh	2024-02-22 18:17:15.124944602 -0600
@@ -137,7 +137,7 @@
     uint32_t handleSnoop(PacketPtr pkt, CacheBlk *blk,
                          bool is_timing, bool is_deferred, bool pending_inval);
 
-    [[nodiscard]] PacketPtr evictBlock(CacheBlk *blk) override;
+    GEM5_NO_DISCARD PacketPtr evictBlock(CacheBlk *blk) override;
 
     /**
      * Create a CleanEvict request for the given block.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/compressors/dictionary_compressor.hh gem5-SALAM/src/mem/cache/compressors/dictionary_compressor.hh
--- gem5/src/mem/cache/compressors/dictionary_compressor.hh	2024-02-22 18:25:43.891606077 -0600
+++ gem5-SALAM/src/mem/cache/compressors/dictionary_compressor.hh	2024-02-22 18:17:15.128944623 -0600
@@ -179,7 +179,7 @@
     template <class Head>
     struct Factory<Head>
     {
-        static_assert(std::is_base_of_v<UncompressedPattern, Head>,
+        static_assert(std::is_base_of<UncompressedPattern, Head>::value,
             "The last pattern must always be derived from the uncompressed "
             "pattern.");
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/compressors/frequent_values.cc gem5-SALAM/src/mem/cache/compressors/frequent_values.cc
--- gem5/src/mem/cache/compressors/frequent_values.cc	2024-02-22 18:25:43.891606077 -0600
+++ gem5-SALAM/src/mem/cache/compressors/frequent_values.cc	2024-02-22 18:17:15.128944623 -0600
@@ -147,7 +147,7 @@
                 // its corresponding value, in order to make life easier we
                 // search for the value and verify that the stored code
                 // matches the table's
-                [[maybe_unused]] const encoder::Code code =
+                GEM5_VAR_USED const encoder::Code code =
                     indexEncoder.encode(comp_chunk.value);
 
                 // Either the value will be found and the codes match, or the
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/noncoherent_cache.hh gem5-SALAM/src/mem/cache/noncoherent_cache.hh
--- gem5/src/mem/cache/noncoherent_cache.hh	2024-02-22 18:16:36.600743197 -0600
+++ gem5-SALAM/src/mem/cache/noncoherent_cache.hh	2024-02-22 18:17:15.128944623 -0600
@@ -120,7 +120,7 @@
                                bool needs_writable,
                                bool is_whole_line_write) const override;
 
-    [[nodiscard]] PacketPtr evictBlock(CacheBlk *blk) override;
+    GEM5_NO_DISCARD PacketPtr evictBlock(CacheBlk *blk) override;
 
   public:
     NoncoherentCache(const NoncoherentCacheParams &p);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/prefetch/associative_set.hh gem5-SALAM/src/mem/cache/prefetch/associative_set.hh
--- gem5/src/mem/cache/prefetch/associative_set.hh	2024-02-22 18:16:36.600743197 -0600
+++ gem5-SALAM/src/mem/cache/prefetch/associative_set.hh	2024-02-22 18:17:15.128944623 -0600
@@ -44,7 +44,7 @@
 template<class Entry>
 class AssociativeSet
 {
-    static_assert(std::is_base_of_v<TaggedEntry, Entry>,
+    static_assert(std::is_base_of<TaggedEntry, Entry>::value,
                   "Entry must derive from TaggedEntry");
 
     /** Associativity of the container */
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/prefetch/queued.cc gem5-SALAM/src/mem/cache/prefetch/queued.cc
--- gem5/src/mem/cache/prefetch/queued.cc	2024-02-22 18:25:43.895606098 -0600
+++ gem5-SALAM/src/mem/cache/prefetch/queued.cc	2024-02-22 18:17:15.128944623 -0600
@@ -131,11 +131,8 @@
 
     for (const_iterator it = queue.cbegin(); it != queue.cend();
                                                             it++, pos++) {
-        Addr vaddr = it->pfInfo.getAddr();
-        /* Set paddr to 0 if not yet translated */
-        Addr paddr = it->pkt ? it->pkt->getAddr() : 0;
-        DPRINTF(HWPrefetchQueue, "%s[%d]: Prefetch Req VA: %#x PA: %#x "
-                "prio: %3d\n", queue_name, pos, vaddr, paddr, it->priority);
+        DPRINTF(HWPrefetchQueue, "%s[%d]: Prefetch Req Addr: %#x prio: %3d\n",
+                queue_name, pos, it->pkt->getAddr(), it->priority);
     }
 }
 
@@ -317,8 +314,8 @@
                     "cache/MSHR prefetch addr:%#x\n", target_paddr);
         } else {
             Tick pf_time = curTick() + clockPeriod() * latency;
-            it->createPkt(target_paddr, blkSize, requestorId, tagPrefetch,
-                          pf_time);
+            it->createPkt(it->translationRequest->getPaddr(), blkSize,
+                    requestorId, tagPrefetch, pf_time);
             addToQueue(pfq, *it);
         }
     } else {
@@ -520,7 +517,7 @@
         queue.insert(it, dpp);
     }
 
-    if (debug::HWPrefetchQueue)
+    if (Debug::HWPrefetchQueue)
         printQueue(queue);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/queue.hh gem5-SALAM/src/mem/cache/queue.hh
--- gem5/src/mem/cache/queue.hh	2024-02-22 18:16:36.604743218 -0600
+++ gem5-SALAM/src/mem/cache/queue.hh	2024-02-22 18:17:15.128944623 -0600
@@ -69,7 +69,7 @@
 template<class Entry>
 class Queue : public Drainable, public Named
 {
-    static_assert(std::is_base_of_v<QueueEntry, Entry>,
+    static_assert(std::is_base_of<QueueEntry, Entry>::value,
         "Entry must be derived from QueueEntry");
 
   protected:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/cache/tags/fa_lru.cc gem5-SALAM/src/mem/cache/tags/fa_lru.cc
--- gem5/src/mem/cache/tags/fa_lru.cc	2024-02-22 18:16:36.604743218 -0600
+++ gem5-SALAM/src/mem/cache/tags/fa_lru.cc	2024-02-22 18:17:15.132944643 -0600
@@ -114,7 +114,7 @@
 FALRU::invalidate(CacheBlk *blk)
 {
     // Erase block entry reference in the hash table
-    [[maybe_unused]] auto num_erased =
+    GEM5_VAR_USED auto num_erased =
         tagHash.erase(std::make_pair(blk->getTag(), blk->isSecure()));
 
     // Sanity check; only one block reference should be erased
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/coherent_xbar.cc gem5-SALAM/src/mem/coherent_xbar.cc
--- gem5/src/mem/coherent_xbar.cc	2024-02-22 18:25:43.903606140 -0600
+++ gem5-SALAM/src/mem/coherent_xbar.cc	2024-02-22 18:17:15.132944643 -0600
@@ -643,7 +643,7 @@
                             *memSidePorts[dest_port_id]);
         }
 
-        [[maybe_unused]] bool success =
+        GEM5_VAR_USED bool success =
             memSidePorts[dest_port_id]->sendTimingSnoopResp(pkt);
         pktCount[cpu_side_port_id][dest_port_id]++;
         pktSize[cpu_side_port_id][dest_port_id] += pkt_size;
@@ -863,7 +863,7 @@
         // if this is the destination of the operation, the xbar
         // sends the responce to the cache clean operation only
         // after having encountered the cache clean request
-        [[maybe_unused]] auto ret = outstandingCMO.emplace(pkt->id, nullptr);
+        GEM5_VAR_USED auto ret = outstandingCMO.emplace(pkt->id, nullptr);
         // in atomic mode we know that the WriteClean packet should
         // precede the clean request
         assert(ret.second);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/dramsim2_wrapper.cc gem5-SALAM/src/mem/dramsim2_wrapper.cc
--- gem5/src/mem/dramsim2_wrapper.cc	2024-02-22 18:25:43.903606140 -0600
+++ gem5-SALAM/src/mem/dramsim2_wrapper.cc	2024-02-22 18:17:15.132944643 -0600
@@ -175,7 +175,7 @@
 void
 DRAMSim2Wrapper::enqueue(bool is_write, uint64_t addr)
 {
-    [[maybe_unused]] bool success = dramsim->addTransaction(is_write, addr);
+    GEM5_VAR_USED bool success = dramsim->addTransaction(is_write, addr);
     assert(success);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/dramsim3_wrapper.cc gem5-SALAM/src/mem/dramsim3_wrapper.cc
--- gem5/src/mem/dramsim3_wrapper.cc	2024-02-22 18:25:43.903606140 -0600
+++ gem5-SALAM/src/mem/dramsim3_wrapper.cc	2024-02-22 18:17:15.132944643 -0600
@@ -129,7 +129,7 @@
 void
 DRAMsim3Wrapper::enqueue(uint64_t addr, bool is_write)
 {
-    [[maybe_unused]] bool success = dramsim->AddTransaction(addr, is_write);
+    GEM5_VAR_USED bool success = dramsim->AddTransaction(addr, is_write);
     assert(success);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/external_slave.cc gem5-SALAM/src/mem/external_slave.cc
--- gem5/src/mem/external_slave.cc	2024-02-22 18:16:36.608743239 -0600
+++ gem5-SALAM/src/mem/external_slave.cc	2024-02-22 18:17:15.132944643 -0600
@@ -101,7 +101,7 @@
 StubSlavePort::recvAtomic(PacketPtr packet)
 {
     if (debug::ExternalPort) {
-        [[maybe_unused]] unsigned int size = packet->getSize();
+        GEM5_VAR_USED unsigned int size = packet->getSize();
 
         DPRINTF(ExternalPort, "StubSlavePort: recvAtomic a: 0x%x size: %d"
             " data: ...\n", packet->getAddr(), size);
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/mem_checker.cc gem5-SALAM/src/mem/mem_checker.cc
--- gem5/src/mem/mem_checker.cc	2024-02-22 18:16:36.612743260 -0600
+++ gem5-SALAM/src/mem/mem_checker.cc	2024-02-22 18:17:15.136944664 -0600
@@ -53,7 +53,7 @@
         // Initialize a fresh write cluster
         start = _start;
     }
-    gem5_assert(start <= _start, "WriteClusters must filled in order!");
+    chatty_assert(start <= _start, "WriteClusters must filled in order!");
 
     ++numIncomplete;
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/packet.hh gem5-SALAM/src/mem/packet.hh
--- gem5/src/mem/packet.hh	2024-02-22 18:25:43.907606161 -0600
+++ gem5-SALAM/src/mem/packet.hh	2024-02-22 18:17:15.136944664 -0600
@@ -1286,7 +1286,7 @@
             assert(req->getByteEnable().size() == getSize());
             // Write only the enabled bytes
             const uint8_t *base = getConstPtr<uint8_t>();
-            for (unsigned int i = 0; i < getSize(); i++) {
+            for (int i = 0; i < getSize(); i++) {
                 if (req->getByteEnable()[i]) {
                     p[i] = *(base + i);
                 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/page_table.cc gem5-SALAM/src/mem/page_table.cc
--- gem5/src/mem/page_table.cc	2024-02-22 18:25:43.907606161 -0600
+++ gem5-SALAM/src/mem/page_table.cc	2024-02-22 18:17:15.136944664 -0600
@@ -81,7 +81,7 @@
             new_vaddr, size);
 
     while (size > 0) {
-        [[maybe_unused]] auto new_it = pTable.find(new_vaddr);
+        GEM5_VAR_USED auto new_it = pTable.find(new_vaddr);
         auto old_it = pTable.find(vaddr);
         assert(old_it != pTable.end() && new_it == pTable.end());
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/request.hh gem5-SALAM/src/mem/request.hh
--- gem5/src/mem/request.hh	2024-02-22 18:25:43.911606182 -0600
+++ gem5-SALAM/src/mem/request.hh	2024-02-22 18:17:15.140944685 -0600
@@ -157,8 +157,6 @@
         /** This request is for a memory swap. */
         MEM_SWAP                    = 0x00400000,
         MEM_SWAP_COND               = 0x00800000,
-        /** This request is a read which will be followed by a write. */
-        READ_MODIFY_WRITE           = 0x00020000,
 
         /** The request is a prefetch. */
         PREFETCH                    = 0x01000000,
@@ -941,22 +939,14 @@
     bool isUncacheable() const { return _flags.isSet(UNCACHEABLE); }
     bool isStrictlyOrdered() const { return _flags.isSet(STRICT_ORDER); }
     bool isInstFetch() const { return _flags.isSet(INST_FETCH); }
-    bool
-    isPrefetch() const
-    {
-        return (_flags.isSet(PREFETCH | PF_EXCLUSIVE));
-    }
+    bool isPrefetch() const { return (_flags.isSet(PREFETCH) ||
+                                      _flags.isSet(PF_EXCLUSIVE)); }
     bool isPrefetchEx() const { return _flags.isSet(PF_EXCLUSIVE); }
     bool isLLSC() const { return _flags.isSet(LLSC); }
     bool isPriv() const { return _flags.isSet(PRIVILEGED); }
     bool isLockedRMW() const { return _flags.isSet(LOCKED_RMW); }
-    bool isSwap() const { return _flags.isSet(MEM_SWAP | MEM_SWAP_COND); }
+    bool isSwap() const { return _flags.isSet(MEM_SWAP|MEM_SWAP_COND); }
     bool isCondSwap() const { return _flags.isSet(MEM_SWAP_COND); }
-    bool
-    isReadModifyWrite() const
-    {
-        return _flags.isSet(LOCKED_RMW | READ_MODIFY_WRITE);
-    }
     bool isSecure() const { return _flags.isSet(SECURE); }
     bool isPTWalk() const { return _flags.isSet(PT_WALK); }
     bool isRelease() const { return _flags.isSet(RELEASE); }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/network/garnet/GarnetNetwork.cc gem5-SALAM/src/mem/ruby/network/garnet/GarnetNetwork.cc
--- gem5/src/mem/ruby/network/garnet/GarnetNetwork.cc	2024-02-22 18:25:43.919606224 -0600
+++ gem5-SALAM/src/mem/ruby/network/garnet/GarnetNetwork.cc	2024-02-22 18:17:15.144944706 -0600
@@ -138,7 +138,7 @@
         for (std::vector<Router*>::const_iterator i= m_routers.begin();
              i != m_routers.end(); ++i) {
             Router* router = safe_cast<Router*>(*i);
-            [[maybe_unused]] int router_id =
+            GEM5_VAR_USED int router_id =
                 fault_model->declare_router(router->get_num_inports(),
                                             router->get_num_outports(),
                                             router->get_vc_per_vnet(),
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/network/garnet/RoutingUnit.cc gem5-SALAM/src/mem/ruby/network/garnet/RoutingUnit.cc
--- gem5/src/mem/ruby/network/garnet/RoutingUnit.cc	2024-02-22 18:16:36.620743302 -0600
+++ gem5-SALAM/src/mem/ruby/network/garnet/RoutingUnit.cc	2024-02-22 18:17:15.144944706 -0600
@@ -211,7 +211,7 @@
 {
     PortDirection outport_dirn = "Unknown";
 
-    [[maybe_unused]] int num_rows = m_router->get_net_ptr()->getNumRows();
+    GEM5_VAR_USED int num_rows = m_router->get_net_ptr()->getNumRows();
     int num_cols = m_router->get_net_ptr()->getNumCols();
     assert(num_rows > 0 && num_cols > 0);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/protocol/chi/CHI-cache-transitions.sm gem5-SALAM/src/mem/ruby/protocol/chi/CHI-cache-transitions.sm
--- gem5/src/mem/ruby/protocol/chi/CHI-cache-transitions.sm	2024-02-22 18:25:43.939606328 -0600
+++ gem5-SALAM/src/mem/ruby/protocol/chi/CHI-cache-transitions.sm	2024-02-22 18:17:15.156944769 -0600
@@ -587,7 +587,7 @@
 
 // This could happen if enqueued the eviction when the line was busy
 // or couldn't handle it immediately due to no TBE available
-transition({RU,RSC,RSD,RUSC,RUSD,I}, {Local_Eviction, LocalHN_Eviction}) {
+transition({RU,RSC,RSD,RUSD,I}, {Local_Eviction, LocalHN_Eviction}) {
   Pop_ReplTriggerQueue;
 }
 transition(I, Global_Eviction) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/SConscript gem5-SALAM/src/mem/ruby/SConscript
--- gem5/src/mem/ruby/SConscript	2024-02-22 18:25:43.911606182 -0600
+++ gem5-SALAM/src/mem/ruby/SConscript	2024-02-22 18:17:15.140944685 -0600
@@ -61,6 +61,36 @@
     'RubyDma', 'RubyPort', 'RubySequencer', 'RubyCacheTrace',
     'RubyPrefetcher'])
 
+def do_embed_text(target, source, env):
+    """convert a text file into a file that can be embedded in C
+    using an #include statement, that defines a \"const char *\" pointing
+    to the same text.
+
+    This is useful to embed scripts and configuration files in object files.
+    """
+
+    escape = [ "\'", "\"", "\\", "\?" ]
+
+    # reads the text file in, line by line, converting it to a C string
+    fin = open(str(source[0]), 'r')
+    fout = open(str(target[0]), 'w' )
+    fout.write("static const char *%s =\n" % source[1].get_contents());
+    for l in fin:
+        # add escape sequences for the characters in escape
+        fout.write("\"")
+        for char in l:
+            if char == "\n":
+                break
+            if char in escape:
+                fout.write("\\")
+                fout.write(char)
+            else:
+                fout.write(char)
+        fout.write("\\n\"\n");
+    fout.write(";\n");
+    fin.close()
+    fout.close()
+
 #
 # Link includes
 #
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/structures/CacheMemory.cc gem5-SALAM/src/mem/ruby/structures/CacheMemory.cc
--- gem5/src/mem/ruby/structures/CacheMemory.cc	2024-02-22 18:25:43.939606328 -0600
+++ gem5-SALAM/src/mem/ruby/structures/CacheMemory.cc	2024-02-22 18:17:15.156944769 -0600
@@ -415,7 +415,7 @@
 CacheMemory::recordCacheContents(int cntrl, CacheRecorder* tr) const
 {
     uint64_t warmedUpBlocks = 0;
-    [[maybe_unused]] uint64_t totalBlocks = (uint64_t)m_cache_num_sets *
+    GEM5_VAR_USED uint64_t totalBlocks = (uint64_t)m_cache_num_sets *
                                          (uint64_t)m_cache_assoc;
 
     for (int i = 0; i < m_cache_num_sets; i++) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/structures/PerfectCacheMemory.hh gem5-SALAM/src/mem/ruby/structures/PerfectCacheMemory.hh
--- gem5/src/mem/ruby/structures/PerfectCacheMemory.hh	2024-02-22 18:16:36.632743364 -0600
+++ gem5-SALAM/src/mem/ruby/structures/PerfectCacheMemory.hh	2024-02-22 18:17:15.156944769 -0600
@@ -157,7 +157,7 @@
 inline void
 PerfectCacheMemory<ENTRY>::deallocate(Addr address)
 {
-    [[maybe_unused]] auto num_erased = m_map.erase(makeLineAddress(address));
+    GEM5_VAR_USED auto num_erased = m_map.erase(makeLineAddress(address));
     assert(num_erased == 1);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/system/GPUCoalescer.cc gem5-SALAM/src/mem/ruby/system/GPUCoalescer.cc
--- gem5/src/mem/ruby/system/GPUCoalescer.cc	2024-02-22 18:25:43.939606328 -0600
+++ gem5-SALAM/src/mem/ruby/system/GPUCoalescer.cc	2024-02-22 18:17:15.156944769 -0600
@@ -542,8 +542,7 @@
 {
     PacketPtr pkt = crequest->getFirstPkt();
     Addr request_address = pkt->getAddr();
-    [[maybe_unused]] Addr request_line_address =
-        makeLineAddress(request_address);
+    GEM5_VAR_USED Addr request_line_address = makeLineAddress(request_address);
 
     RubyRequestType type = crequest->getRubyType();
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/system/RubyPort.cc gem5-SALAM/src/mem/ruby/system/RubyPort.cc
--- gem5/src/mem/ruby/system/RubyPort.cc	2024-02-22 18:25:43.943606349 -0600
+++ gem5-SALAM/src/mem/ruby/system/RubyPort.cc	2024-02-22 18:17:15.160944790 -0600
@@ -213,7 +213,7 @@
             if (it->contains(pkt->getAddr())) {
                 // generally it is not safe to assume success here as
                 // the port could be blocked
-                [[maybe_unused]] bool success =
+                GEM5_VAR_USED bool success =
                     ruby_port->request_ports[i]->sendTimingReq(pkt);
                 assert(success);
                 return true;
@@ -345,27 +345,16 @@
                RubySystem::getBlockSizeBytes());
     }
 
-    // Find the machine type of memory controller interface
-    RubySystem *rs = ruby_port->m_ruby_system;
-    static int mem_interface_type = -1;
-    if (mem_interface_type == -1) {
-        if (rs->m_abstract_controls[MachineType_Directory].size() != 0) {
-            mem_interface_type = MachineType_Directory;
-        }
-        else if (rs->m_abstract_controls[MachineType_Memory].size() != 0) {
-            mem_interface_type = MachineType_Memory;
-        }
-        else {
-            panic("Can't find the memory controller interface\n");
-        }
-    }
-
-    // Find the controller for the target address
+    // Find appropriate directory for address
+    // This assumes that protocols have a Directory machine,
+    // which has its memPort hooked up to memory. This can
+    // fail for some custom protocols.
     MachineID id = ruby_port->m_controller->mapAddressToMachine(
-                    pkt->getAddr(), (MachineType)mem_interface_type);
-    AbstractController *mem_interface =
-        rs->m_abstract_controls[mem_interface_type][id.getNum()];
-    Tick latency = mem_interface->recvAtomic(pkt);
+                    pkt->getAddr(), MachineType_Directory);
+    RubySystem *rs = ruby_port->m_ruby_system;
+    AbstractController *directory =
+        rs->m_abstract_controls[id.getType()][id.getNum()];
+    Tick latency = directory->recvAtomic(pkt);
     if (access_backing_store)
         rs->getPhysMem()->access(pkt);
     return latency;
@@ -391,7 +380,7 @@
 {
     DPRINTF(RubyPort, "Functional access for address: %#x\n", pkt->getAddr());
 
-    [[maybe_unused]] RubyPort *rp = static_cast<RubyPort *>(&owner);
+    GEM5_VAR_USED RubyPort *rp = static_cast<RubyPort *>(&owner);
     RubySystem *rs = rp->m_ruby_system;
 
     // Check for pio requests and directly send them to the dedicated
@@ -618,7 +607,7 @@
         ranges.splice(ranges.begin(),
                 ruby_port->request_ports[i]->getAddrRanges());
     }
-    for ([[maybe_unused]] const auto &r : ranges)
+    for (GEM5_VAR_USED const auto &r : ranges)
         DPRINTF(RubyPort, "%s\n", r.to_string());
     return ranges;
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/system/RubySystem.cc gem5-SALAM/src/mem/ruby/system/RubySystem.cc
--- gem5/src/mem/ruby/system/RubySystem.cc	2024-02-22 18:25:43.943606349 -0600
+++ gem5-SALAM/src/mem/ruby/system/RubySystem.cc	2024-02-22 18:17:15.160944790 -0600
@@ -706,7 +706,7 @@
 
     DPRINTF(RubySystem, "Functional Write request for %#x\n", addr);
 
-    [[maybe_unused]] uint32_t num_functional_writes = 0;
+    GEM5_VAR_USED uint32_t num_functional_writes = 0;
 
     // Only send functional requests within the same network.
     assert(requestorToNetwork.count(pkt->requestorId()));
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/ruby/system/Sequencer.cc gem5-SALAM/src/mem/ruby/system/Sequencer.cc
--- gem5/src/mem/ruby/system/Sequencer.cc	2024-02-22 18:25:43.943606349 -0600
+++ gem5-SALAM/src/mem/ruby/system/Sequencer.cc	2024-02-22 18:17:15.160944790 -0600
@@ -725,7 +725,14 @@
             } else if (pkt->req->isInstFetch()) {
                 primary_type = secondary_type = RubyRequestType_IFETCH;
             } else {
-                if (pkt->req->isReadModifyWrite()) {
+                bool storeCheck = false;
+                // only X86 need the store check
+                if (system->getArch() == Arch::X86ISA) {
+                    uint32_t flags = pkt->req->getFlags();
+                    storeCheck = flags &
+                        (X86ISA::StoreCheck << X86ISA::FlagShift);
+                }
+                if (storeCheck) {
                     primary_type = RubyRequestType_RMW_Read;
                     secondary_type = RubyRequestType_ST;
                 } else {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/slicc/ast/PeekStatementAST.py gem5-SALAM/src/mem/slicc/ast/PeekStatementAST.py
--- gem5/src/mem/slicc/ast/PeekStatementAST.py	2024-02-22 18:25:43.947606370 -0600
+++ gem5-SALAM/src/mem/slicc/ast/PeekStatementAST.py	2024-02-22 18:17:15.160944790 -0600
@@ -61,7 +61,7 @@
         code('''
 {
     // Declare message
-    [[maybe_unused]] const $mtid* in_msg_ptr;
+    GEM5_VAR_USED const $mtid* in_msg_ptr;
     in_msg_ptr = dynamic_cast<const $mtid *>(($qcode).${{self.method}}());
     if (in_msg_ptr == NULL) {
         // If the cast fails, this is the wrong inport (wrong message type).
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/slicc/symbols/StateMachine.py gem5-SALAM/src/mem/slicc/symbols/StateMachine.py
--- gem5/src/mem/slicc/symbols/StateMachine.py	2024-02-22 18:25:43.951606391 -0600
+++ gem5-SALAM/src/mem/slicc/symbols/StateMachine.py	2024-02-22 18:17:15.164944811 -0600
@@ -613,7 +613,7 @@
 $c_ident::initNetQueues()
 {
     MachineType machine_type = string_to_MachineType("${{self.ident}}");
-    [[maybe_unused]] int base = MachineType_base_number(machine_type);
+    GEM5_VAR_USED int base = MachineType_base_number(machine_type);
 
 ''')
         code.indent()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/mem/slicc/symbols/Type.py gem5-SALAM/src/mem/slicc/symbols/Type.py
--- gem5/src/mem/slicc/symbols/Type.py	2024-02-22 18:25:43.951606391 -0600
+++ gem5-SALAM/src/mem/slicc/symbols/Type.py	2024-02-22 18:17:15.164944811 -0600
@@ -775,7 +775,7 @@
                     code('    base += ${{enum.ident}}_Controller::getNumControllers();')
                 else:
                     code('    base += 0;')
-                code('    [[fallthrough]];')
+                code('    GEM5_FALLTHROUGH;')
                 code('  case ${{self.c_ident}}_${{enum.ident}}:')
             code('    break;')
             code.dedent()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/importer.py gem5-SALAM/src/python/importer.py
--- gem5/src/python/importer.py	2024-02-22 18:25:43.951606391 -0600
+++ gem5-SALAM/src/python/importer.py	2024-02-22 18:17:15.164944811 -0600
@@ -24,52 +24,63 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-import importlib
-import importlib.abc
-import importlib.util
-import os
-
-class ByteCodeLoader(importlib.abc.Loader):
-    def __init__(self, code):
-        super(ByteCodeLoader, self).__init__()
-        self.code = code
-
-    def exec_module(self, module):
-        exec(self.code, module.__dict__)
-
 # Simple importer that allows python to import data from a dict of
 # code objects.  The keys are the module path, and the items are the
 # filename and bytecode of the file.
 class CodeImporter(object):
     def __init__(self):
         self.modules = {}
-        override_var = os.environ.get('M5_OVERRIDE_PY_SOURCE', 'false')
-        self.override = (override_var.lower() in ('true', 'yes'))
 
-    def add_module(self, abspath, modpath, code):
+    def add_module(self, filename, abspath, modpath, code):
         if modpath in self.modules:
             raise AttributeError("%s already found in importer" % modpath)
 
-        self.modules[modpath] = (abspath, code)
-
-    def find_spec(self, fullname, path, target=None):
-        if fullname not in self.modules:
-            return None
-
-        abspath, code = self.modules[fullname]
-
-        if self.override and os.path.exists(abspath):
-            src = open(abspath, 'r').read()
-            code = compile(src, abspath, 'exec')
-
-        is_package = (os.path.basename(abspath) == '__init__.py')
-        spec = importlib.util.spec_from_loader(
-                name=fullname, loader=ByteCodeLoader(code),
-                is_package=is_package)
+        self.modules[modpath] = (filename, abspath, code)
 
-        spec.loader_state = self.modules.keys()
+    def find_module(self, fullname, path):
+        if fullname in self.modules:
+            return self
+
+        return None
+
+    def load_module(self, fullname):
+        # Because the importer is created and initialized in its own
+        # little sandbox (in init.cc), the globals that were available
+        # when the importer module was loaded and CodeImporter was
+        # defined are not available when load_module is actually
+        # called. Soooo, the imports must live here.
+        import imp
+        import os
+        import sys
+
+        try:
+            mod = sys.modules[fullname]
+        except KeyError:
+            mod = imp.new_module(fullname)
+            sys.modules[fullname] = mod
+
+        try:
+            mod.__loader__ = self
+            srcfile,abspath,code = self.modules[fullname]
+
+            override = os.environ.get('M5_OVERRIDE_PY_SOURCE', 'false').lower()
+            if override in ('true', 'yes') and  os.path.exists(abspath):
+                src = open(abspath, 'r').read()
+                code = compile(src, abspath, 'exec')
+
+            if os.path.basename(srcfile) == '__init__.py':
+                mod.__path__ = fullname.split('.')
+                mod.__package__ = fullname
+            else:
+                mod.__package__ = fullname.rpartition('.')[0]
+            mod.__file__ = srcfile
+
+            exec(code, mod.__dict__)
+        except Exception:
+            del sys.modules[fullname]
+            raise
 
-        return spec
+        return mod
 
 # Create an importer and add it to the meta_path so future imports can
 # use it.  There's currently nothing in the importer, but calls to
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/main.py gem5-SALAM/src/python/m5/main.py
--- gem5/src/python/m5/main.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/main.py	2024-02-22 18:17:15.164944811 -0600
@@ -143,8 +143,7 @@
     option("--debug-end", metavar="TICK", type='int',
         help="End debug output at TICK")
     option("--debug-file", metavar="FILE", default="cout",
-        help="Sets the output file for debug. Append '.gz' to the name for it"
-              " to be compressed automatically [Default: %default]")
+        help="Sets the output file for debug [Default: %default]")
     option("--debug-ignore", metavar="EXPR", action='append', split=':',
         help="Ignore EXPR sim objects")
     option("--remote-gdb-port", type='int', default=7000,
@@ -214,7 +213,6 @@
 
 def main(*args):
     import m5
-    import _m5.core
 
     from . import core
     from . import debug
@@ -337,8 +335,8 @@
         print(brief_copyright)
         print()
 
-        print("gem5 version %s" % _m5.core.gem5Version)
-        print("gem5 compiled %s" % _m5.core.compileDate)
+        print("gem5 version %s" % defines.gem5Version)
+        print("gem5 compiled %s" % defines.compileDate)
 
         print("gem5 started %s" %
               datetime.datetime.now().strftime("%b %e %Y %X"))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/objects/__init__.py gem5-SALAM/src/python/m5/objects/__init__.py
--- gem5/src/python/m5/objects/__init__.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/objects/__init__.py	2024-02-22 18:17:15.164944811 -0600
@@ -24,6 +24,14 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-for module in __spec__.loader_state:
+from m5.internal import params
+from m5.SimObject import *
+
+try:
+    modules = __loader__.modules
+except NameError:
+    modules = { }
+
+for module in modules.keys():
     if module.startswith('m5.objects.'):
         exec("from %s import *" % module)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/params.py gem5-SALAM/src/python/m5/params.py
--- gem5/src/python/m5/params.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/params.py	2024-02-22 18:17:15.164944811 -0600
@@ -864,17 +864,6 @@
         return AddrRange(int(self.start), int(self.end),
                          self.masks, int(self.intlvMatch))
 
-    def exclude(self, ranges):
-        from _m5.range import AddrRangeVector
-
-        # The wrapped C++ class is assuming an AddrRangeVector
-        # We are therefore converting to it before excluding ranges
-        # and reconverting it into a list of AddrRange before returning
-        pybind_exclude = AddrRangeVector([ r.getValue() for r in ranges ])
-        pybind_include = self.getValue().exclude(pybind_exclude)
-
-        return [ AddrRange(r.start(), r.end()) for r in pybind_include ]
-
 # Boolean parameter type.  Python doesn't let you subclass bool, since
 # it doesn't want to let you create multiple instances of True and
 # False.  Thus this is a little more complicated than String.
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/SimObject.py gem5-SALAM/src/python/m5/SimObject.py
--- gem5/src/python/m5/SimObject.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/SimObject.py	2024-02-22 18:17:15.164944811 -0600
@@ -854,8 +854,8 @@
                 # constructor.
                 code('template <class CxxClass>')
                 code('class Dummy${cls}Shunt<CxxClass, std::enable_if_t<')
-                code('    std::is_constructible_v<CxxClass,')
-                code('        const ${cls}Params &>>>')
+                code('    std::is_constructible<CxxClass,')
+                code('        const ${cls}Params &>::value>>')
                 code('{')
                 code('  public:')
                 code('    using Params = ${cls}Params;')
@@ -871,8 +871,8 @@
                 # not exist.
                 code('template <class CxxClass>')
                 code('class Dummy${cls}Shunt<CxxClass, std::enable_if_t<')
-                code('    !std::is_constructible_v<CxxClass,')
-                code('        const ${cls}Params &>>>')
+                code('    !std::is_constructible<CxxClass,')
+                code('        const ${cls}Params &>::value>>')
                 code('{')
                 code('  public:')
                 code('    using Params = Dummy${cls}ParamsClass;')
@@ -889,7 +889,7 @@
                 # method, or the Dummy one. Either an implementation is
                 # mandantory since this was shunted off to the dummy class, or
                 # one is optional which will override this weak version.
-                code('[[maybe_unused]] ${{cls.cxx_class}} *')
+                code('GEM5_VAR_USED ${{cls.cxx_class}} *')
                 code('Dummy${cls}Shunt<${{cls.cxx_class}}>::Params::create() '
                      'const')
                 code('{')
@@ -1716,9 +1716,6 @@
         if self._ccParams:
             return self._ccParams
 
-        # Ensure that m5.internal.params is available.
-        import m5.internal.params
-
         cc_params_struct = getattr(m5.internal.params, '%sParams' % self.type)
         cc_params = cc_params_struct()
         cc_params.name = str(self)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/simulate.py gem5-SALAM/src/python/m5/simulate.py
--- gem5/src/python/m5/simulate.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/simulate.py	2024-02-22 18:17:15.164944811 -0600
@@ -50,7 +50,6 @@
 from . import SimObject
 from . import ticks
 from . import objects
-from . import params
 from m5.util.dot_writer import do_dot, do_dvfs_dot
 from m5.util.dot_writer_ruby import do_ruby_dot
 
@@ -60,6 +59,12 @@
 # define a MaxTick parameter, unsigned 64 bit
 MaxTick = 2**64 - 1
 
+_memory_modes = {
+    "atomic" : objects.params.atomic,
+    "timing" : objects.params.timing,
+    "atomic_noncaching" : objects.params.atomic_noncaching,
+    }
+
 _drain_manager = _m5.drain.DrainManager.instance()
 
 # The final hook to generate .ini files.  Called from the user script
@@ -287,9 +292,8 @@
             raise RuntimeError(
                 "Old CPU (%s) does not support CPU handover." % (old_cpu,))
 
-    MemoryMode = params.allEnums["MemoryMode"]
     try:
-        memory_mode = MemoryMode(memory_mode_name).getValue()
+        memory_mode = _memory_modes[memory_mode_name]
     except KeyError:
         raise RuntimeError("Invalid memory mode (%s)" % memory_mode_name)
 
@@ -305,7 +309,7 @@
         # Flush the memory system if we are switching to a memory mode
         # that disables caches. This typically happens when switching to a
         # hardware virtualized CPU.
-        if memory_mode == MemoryMode("atomic_noncaching").getValue():
+        if memory_mode == objects.params.atomic_noncaching:
             memWriteback(system)
             memInvalidate(system)
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/util/__init__.py gem5-SALAM/src/python/m5/util/__init__.py
--- gem5/src/python/m5/util/__init__.py	2024-02-22 18:25:43.955606412 -0600
+++ gem5-SALAM/src/python/m5/util/__init__.py	2024-02-22 18:17:15.164944811 -0600
@@ -1,4 +1,4 @@
-# Copyright (c) 2016, 2020-2021 Arm Limited
+# Copyright (c) 2016, 2020 ARM Limited
 # All rights reserved.
 #
 # The license below extends only to copyright in the software and shall
@@ -42,6 +42,7 @@
 import sys
 
 from . import convert
+from . import jobfile
 
 from .attrdict import attrdict, multiattrdict, optiondict
 from .code_formatter import code_formatter
@@ -94,17 +95,6 @@
     # so place the new dir right after that.
     sys.path.insert(1, path)
 
-def repoPath():
-    """
-    Return the abspath of the gem5 repository.
-    This is relying on the following structure:
-
-    <gem5-repo>/build/<ISA>/gem5.[opt,debug...]
-    """
-    return os.path.dirname(
-        os.path.dirname(
-            os.path.dirname(sys.executable)))
-
 # Apply method to object.
 # applyMethod(obj, 'meth', <args>) is equivalent to obj.meth(<args>)
 def applyMethod(obj, meth, *args, **kwargs):
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/m5/util/jobfile.py gem5-SALAM/src/python/m5/util/jobfile.py
--- gem5/src/python/m5/util/jobfile.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/src/python/m5/util/jobfile.py	2024-02-22 18:17:15.168944832 -0600
@@ -0,0 +1,469 @@
+# Copyright (c) 2005-2006 The Regents of The University of Michigan
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import sys
+
+class Data(object):
+    def __init__(self, name, desc, **kwargs):
+        self.name = name
+        self.desc = desc
+        self.__dict__.update(kwargs)
+
+    def update(self, obj):
+        if not isinstance(obj, Data):
+            raise AttributeError("can only update from Data object")
+
+        for key,val in obj.__dict__.items():
+            if key.startswith('_') or key in ('name', 'desc'):
+                continue
+
+            if key not in self.__dict__:
+                self.__dict__[key] = val
+                continue
+
+            if not isinstance(val, dict):
+                if self.__dict__[key] == val:
+                    continue
+
+                raise AttributeError(
+                    "%s specified more than once old: %s new: %s" % \
+                    (key, self.__dict__[key], val))
+
+            d = self.__dict__[key]
+            for k,v in val.items():
+                if k in d:
+                    raise AttributeError(
+                        "%s specified more than once in %s" % (k, key))
+                d[k] = v
+
+        if hasattr(self, 'system') and hasattr(obj, 'system'):
+            if self.system != obj.system:
+                raise AttributeError(
+                    "conflicting values for system: '%s'/'%s'" % \
+                    (self.system, obj.system))
+
+    def printinfo(self):
+        if self.name:
+            print('name: %s' % self.name)
+        if self.desc:
+            print('desc: %s' % self.desc)
+        try:
+            if self.system:
+                print('system: %s' % self.system)
+        except AttributeError:
+            pass
+
+    def printverbose(self):
+        for key in self:
+            val = self[key]
+            if isinstance(val, dict):
+                import pprint
+                val = pprint.pformat(val)
+            print('%-20s = %s' % (key, val))
+        print()
+
+    def __contains__(self, attr):
+        if attr.startswith('_'):
+            return False
+        return attr in self.__dict__
+
+    def __getitem__(self, key):
+        if key.startswith('_'):
+            raise KeyError("Key '%s' not found" % attr)
+        return self.__dict__[key]
+
+    def __iter__(self):
+        keys = list(self.__dict__.keys())
+        keys.sort()
+        for key in keys:
+            if not key.startswith('_'):
+                yield key
+
+    def optiondict(self):
+        import m5.util
+        result = m5.util.optiondict()
+        for key in self:
+            result[key] = self[key]
+        return result
+
+    def __repr__(self):
+        d = {}
+        for key,value in self.__dict__.items():
+            if not key.startswith('_'):
+                d[key] = value
+
+        return "<%s: %s>" % (type(self).__name__, d)
+
+    def __str__(self):
+        return self.name
+
+class Job(Data):
+    def __init__(self, options):
+        super(Job, self).__init__('', '')
+
+        config = options[0]._config
+        for opt in options:
+            if opt._config != config:
+                raise AttributeError(
+                    "All options are not from the same Configuration")
+
+        self._config = config
+        self._groups = [ opt._group for opt in options ]
+        self._options = options
+
+        self.update(self._config)
+        for group in self._groups:
+            self.update(group)
+
+        self._is_checkpoint = True
+
+        for option in self._options:
+            self.update(option)
+            if not option._group._checkpoint:
+                self._is_checkpoint = False
+
+            if option._suboption:
+                self.update(option._suboption)
+                self._is_checkpoint = False
+
+        names = [ ]
+        for opt in self._options:
+            if opt.name:
+                names.append(opt.name)
+        self.name = ':'.join(names)
+
+        descs = [ ]
+        for opt in self._options:
+            if opt.desc:
+                descs.append(opt.desc)
+        self.desc = ', '.join(descs)
+
+        self._checkpoint = None
+        if not self._is_checkpoint:
+            opts = []
+            for opt in options:
+                cpt = opt._group._checkpoint
+                if not cpt:
+                    continue
+                if isinstance(cpt, Option):
+                    opt = cpt.clone(suboptions=False)
+                else:
+                    opt = opt.clone(suboptions=False)
+
+                opts.append(opt)
+
+            if opts:
+                self._checkpoint = Job(opts)
+
+    def clone(self):
+        return Job(self._options)
+
+    def printinfo(self):
+        super(Job, self).printinfo()
+        if self._checkpoint:
+            print('checkpoint: %s' % self._checkpoint.name)
+        print('config: %s' % self._config.name)
+        print('groups: %s' % [ g.name for g in self._groups ])
+        print('options: %s' % [ o.name for o in self._options ])
+        super(Job, self).printverbose()
+
+class SubOption(Data):
+    def __init__(self, name, desc, **kwargs):
+        super(SubOption, self).__init__(name, desc, **kwargs)
+        self._number = None
+
+class Option(Data):
+    def __init__(self, name, desc, **kwargs):
+        super(Option, self).__init__(name, desc, **kwargs)
+        self._suboptions = []
+        self._suboption = None
+        self._number = None
+
+    def __getattribute__(self, attr):
+        if attr == 'name':
+            name = self.__dict__[attr]
+            if self._suboption is not None:
+                name = '%s:%s' % (name, self._suboption.name)
+            return name
+
+        if attr == 'desc':
+            desc = [ self.__dict__[attr] ]
+            if self._suboption is not None and self._suboption.desc:
+                desc.append(self._suboption.desc)
+            return ', '.join(desc)
+
+        return super(Option, self).__getattribute__(attr)
+
+    def suboption(self, name, desc, **kwargs):
+        subo = SubOption(name, desc, **kwargs)
+        subo._config = self._config
+        subo._group = self._group
+        subo._option = self
+        subo._number = len(self._suboptions)
+        self._suboptions.append(subo)
+        return subo
+
+    def clone(self, suboptions=True):
+        option = Option(self.__dict__['name'], self.__dict__['desc'])
+        option.update(self)
+        option._group = self._group
+        option._config = self._config
+        option._number = self._number
+        if suboptions:
+            option._suboptions.extend(self._suboptions)
+            option._suboption = self._suboption
+        return option
+
+    def subopts(self):
+        if not self._suboptions:
+            return [ self ]
+
+        subopts = []
+        for subo in self._suboptions:
+            option = self.clone()
+            option._suboption = subo
+            subopts.append(option)
+
+        return subopts
+
+    def printinfo(self):
+        super(Option, self).printinfo()
+        print('config: %s' % self._config.name)
+        super(Option, self).printverbose()
+
+class Group(Data):
+    def __init__(self, name, desc, **kwargs):
+        super(Group, self).__init__(name, desc, **kwargs)
+        self._options = []
+        self._number = None
+        self._checkpoint = False
+
+    def option(self, name, desc, **kwargs):
+        opt = Option(name, desc, **kwargs)
+        opt._config = self._config
+        opt._group = self
+        opt._number = len(self._options)
+        self._options.append(opt)
+        return opt
+
+    def options(self):
+        return self._options
+
+    def subopts(self):
+        subopts = []
+        for opt in self._options:
+            for subo in opt.subopts():
+                subopts.append(subo)
+        return subopts
+
+    def printinfo(self):
+        super(Group, self).printinfo()
+        print('config: %s' % self._config.name)
+        print('options: %s' % [ o.name for o in self._options ])
+        super(Group, self).printverbose()
+
+class Configuration(Data):
+    def __init__(self, name, desc, **kwargs):
+        super(Configuration, self).__init__(name, desc, **kwargs)
+        self._groups = []
+        self._posfilters = []
+        self._negfilters = []
+
+    def group(self, name, desc, **kwargs):
+        grp = Group(name, desc, **kwargs)
+        grp._config = self
+        grp._number = len(self._groups)
+        self._groups.append(grp)
+        return grp
+
+    def groups(self):
+        return self._groups
+
+    def checkchildren(self, kids):
+        for kid in kids:
+            if kid._config != self:
+                raise AttributeError("child from the wrong configuration")
+
+    def sortgroups(self, groups):
+        groups = [ (grp._number, grp) for grp in groups ]
+        groups.sort()
+        return [ grp[1] for grp in groups ]
+
+    def options(self, groups=None, checkpoint=False):
+        if groups is None:
+            groups = self._groups
+        self.checkchildren(groups)
+        groups = self.sortgroups(groups)
+        if checkpoint:
+            groups = [ grp for grp in groups if grp._checkpoint ]
+            optgroups = [ g.options() for g in groups ]
+        else:
+            optgroups = [ g.subopts() for g in groups ]
+        if not optgroups:
+            return
+
+        import m5.util
+        for options in m5.util.crossproduct(optgroups):
+            for opt in options:
+                cpt = opt._group._checkpoint
+                if not isinstance(cpt, bool) and cpt != opt:
+                    if checkpoint:
+                        break
+                    else:
+                        yield options
+            else:
+                if checkpoint:
+                    yield options
+
+    def addfilter(self, filt, pos=True):
+        import re
+        filt = re.compile(filt)
+        if pos:
+            self._posfilters.append(filt)
+        else:
+            self._negfilters.append(filt)
+
+    def jobfilter(self, job):
+        for filt in self._negfilters:
+            if filt.match(job.name):
+                return False
+
+        if not self._posfilters:
+            return True
+
+        for filt in self._posfilters:
+            if filt.match(job.name):
+                return True
+
+        return False
+
+    def checkpoints(self, groups=None):
+        for options in self.options(groups, True):
+            job = Job(options)
+            if self.jobfilter(job):
+                yield job
+
+    def jobs(self, groups=None):
+        for options in self.options(groups, False):
+            job = Job(options)
+            if self.jobfilter(job):
+                yield job
+
+    def alljobs(self, groups=None):
+        for options in self.options(groups, True):
+            yield Job(options)
+        for options in self.options(groups, False):
+            yield Job(options)
+
+    def find(self, jobname):
+        for job in self.alljobs():
+            if job.name == jobname:
+                return job
+        else:
+            raise AttributeError("job '%s' not found" % jobname)
+
+    def job(self, options):
+        self.checkchildren(options)
+        options = [ (opt._group._number, opt) for opt in options ]
+        options.sort()
+        options = [ opt[1] for opt in options ]
+        job = Job(options)
+        return job
+
+    def printinfo(self):
+        super(Configuration, self).printinfo()
+        print('groups: %s' % [ g.name for g in self._groups ])
+        super(Configuration, self).printverbose()
+
+def JobFile(jobfile):
+    from os.path import expanduser, isfile, join as joinpath
+    filename = expanduser(jobfile)
+
+    # Can't find filename in the current path, search sys.path
+    if not isfile(filename):
+        for path in sys.path:
+            testname = joinpath(path, filename)
+            if isfile(testname):
+                filename = testname
+                break
+        else:
+            raise AttributeError("Could not find file '%s'" % jobfile)
+
+    data = {}
+    exec(compile(open(filename).read(), filename, 'exec'), data)
+    if 'conf' not in data:
+        raise ImportError('cannot import name conf from %s' % jobfile)
+    return data['conf']
+
+def main(conf=None):
+    usage = 'Usage: %s [-b] [-c] [-v]' % sys.argv[0]
+    if conf is None:
+        usage += ' <jobfile>'
+
+    try:
+        import getopt
+        opts, args = getopt.getopt(sys.argv[1:], '-bcv')
+    except getopt.GetoptError:
+        sys.exit(usage)
+
+    both = False
+    checkpoint = False
+    verbose = False
+    for opt,arg in opts:
+        if opt == '-b':
+            both = True
+            checkpoint = True
+        if opt == '-c':
+            checkpoint = True
+        if opt == '-v':
+            verbose = True
+
+    if conf is None:
+        if len(args) != 1:
+            raise AttributeError(usage)
+        conf = JobFile(args[0])
+    else:
+        if len(args) != 0:
+            raise AttributeError(usage)
+
+    if both:
+        jobs = conf.alljobs()
+    elif checkpoint:
+        jobs = conf.checkpoints()
+    else:
+        jobs = conf.jobs()
+
+    for job in jobs:
+        if verbose:
+            job.printinfo()
+        else:
+            cpt = ''
+            if job._checkpoint:
+                cpt = job._checkpoint.name
+            print(job.name, cpt)
+
+if __name__ == '__main__':
+    main()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/marshal.cc gem5-SALAM/src/python/marshal.cc
--- gem5/src/python/marshal.cc	2024-02-22 18:25:43.959606433 -0600
+++ gem5-SALAM/src/python/marshal.cc	2024-02-22 18:17:15.168944832 -0600
@@ -42,29 +42,23 @@
 namespace py = pybind11;
 using namespace pybind11::literals;
 
-constexpr auto MarshalScript = R"(
-import marshal
-
-with open(source, 'r') as f:
-    src = f.read()
-
-compiled = compile(src, source, 'exec')
-marshalled = marshal.dumps(compiled)
-)";
-
 int
-main(int argc, const char **argv)
-{
-    py::scoped_interpreter guard;
+main(int argc, char **argv) {
+    py::scoped_interpreter guard{};
 
     if (argc != 2) {
-        std::cerr << "Usage: marshal PYSOURCE" << std::endl;
+        std::cerr << "Usage: marshal PYSOURCE\n" << std::endl;
         exit(1);
     }
 
     auto locals = py::dict("source"_a=argv[1]);
 
-    py::exec(MarshalScript, py::globals(), locals);
+    py::exec(
+        "import marshal\n"
+        "with open(source, 'r') as f: src = f.read()\n"
+        "compiled = compile(src, source, 'exec')\n"
+        "marshalled = marshal.dumps(compiled)\n",
+        py::globals(), locals);
 
     auto marshalled = locals["marshalled"].cast<std::string>();
     std::cout << marshalled;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/pybind11/core.cc gem5-SALAM/src/python/pybind11/core.cc
--- gem5/src/python/pybind11/core.cc	2024-02-22 18:25:43.959606433 -0600
+++ gem5-SALAM/src/python/pybind11/core.cc	2024-02-22 18:17:15.168944832 -0600
@@ -86,6 +86,18 @@
 extern const char *compileDate;
 extern const char *gem5Version;
 
+#ifdef DEBUG
+const bool flag_DEBUG = true;
+#else
+const bool flag_DEBUG = false;
+#endif
+#ifdef NDEBUG
+const bool flag_NDEBUG = true;
+#else
+const bool flag_NDEBUG = false;
+#endif
+const bool flag_TRACING_ON = TRACING_ON;
+
 static void
 init_drain(py::module_ &m_native)
 {
@@ -155,7 +167,6 @@
         .def("mergesWith", &AddrRange::mergesWith)
         .def("intersects", &AddrRange::intersects)
         .def("isSubset", &AddrRange::isSubset)
-        .def("exclude", &AddrRange::exclude)
         ;
 
     // We need to make vectors of AddrRange opaque to avoid weird
@@ -289,6 +300,11 @@
     m_core.attr("compileDate") = py::cast(compileDate);
     m_core.attr("gem5Version") = py::cast(gem5Version);
 
+    m_core.attr("flag_DEBUG") = py::cast(flag_DEBUG);
+    m_core.attr("flag_DEBUG") = py::cast(flag_DEBUG);
+    m_core.attr("flag_NDEBUG") = py::cast(flag_NDEBUG);
+    m_core.attr("flag_TRACING_ON") = py::cast(flag_TRACING_ON);
+
     m_core.attr("MaxTick") = py::cast(MaxTick);
 
     /*
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/pybind11/debug.cc gem5-SALAM/src/python/pybind11/debug.cc
--- gem5/src/python/pybind11/debug.cc	2024-02-22 18:25:43.959606433 -0600
+++ gem5-SALAM/src/python/pybind11/debug.cc	2024-02-22 18:17:15.168944832 -0600
@@ -56,6 +56,12 @@
 namespace gem5
 {
 
+GEM5_DEPRECATED_NAMESPACE(Debug, debug);
+namespace debug
+{
+extern int allFlagsVersion;
+} // namespace debug
+
 static void
 output(const char *filename)
 {
@@ -81,8 +87,7 @@
     py::module_ m_debug = m_native.def_submodule("debug");
 
     m_debug
-        .def("getAllFlagsVersion",
-             []() { return debug::AllFlagsFlag::version(); })
+        .def("getAllFlagsVersion", []() { return debug::allFlagsVersion; })
         .def("allFlags", &debug::allFlags, py::return_value_policy::reference)
 
         .def("schedBreak", &schedBreak)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/python/SConscript gem5-SALAM/src/python/SConscript
--- gem5/src/python/SConscript	2024-02-22 18:25:43.951606391 -0600
+++ gem5-SALAM/src/python/SConscript	2024-02-22 18:17:15.164944811 -0600
@@ -52,6 +52,7 @@
 PySource('m5.util', 'm5/util/dot_writer_ruby.py')
 PySource('m5.util', 'm5/util/fdthelper.py')
 PySource('m5.util', 'm5/util/grammar.py')
+PySource('m5.util', 'm5/util/jobfile.py')
 PySource('m5.util', 'm5/util/multidict.py')
 PySource('m5.util', 'm5/util/pybind.py')
 PySource('m5.util', 'm5/util/terminal.py')
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/SConscript gem5-SALAM/src/SConscript
--- gem5/src/SConscript	2024-02-22 18:25:43.571604402 -0600
+++ gem5-SALAM/src/SConscript	2024-02-22 18:17:14.972943807 -0600
@@ -37,25 +37,21 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
+import array
 import bisect
 import distutils.spawn
-import importlib
-import importlib.abc
-import importlib.machinery
-import importlib.util
+import functools
+import imp
 import os
-import os.path
 import re
 import sys
 import zlib
 
-import SCons
+from os.path import basename, dirname, exists, isdir, isfile, join as joinpath
 
-from gem5_scons import Transform, warning, error, ToValue, FromValue
-from gem5_scons.sources import *
-from gem5_scons.util import bytesToCppArray
+import SCons
 
-Export(SourceFilter.factories)
+from gem5_scons import Transform, warning, error
 
 # This file defines how to build a particular configuration of gem5
 # based on variable settings in the 'env' build environment.
@@ -69,111 +65,361 @@
 
 from m5.util import code_formatter
 
-def GdbXml(xml_id, symbol):
-    cc, hh = env.Blob(symbol, xml_id)
-    Source(cc)
+########################################################################
+# Code for adding source files of various types
+#
+# When specifying a source file of some type, a set of tags can be
+# specified for that file.
 
-class Source(SourceFile):
-    pass
+def tag_implies(env, tag, tag_list):
+    '''
+    Associates a tag X to a list of tags which are implied by X.
 
-# Build a small helper that marshals the Python code using the same version
-# of Python as gem5. This is in an unorthodox location to avoid building it
-# for every variant.
-py_marshal = marshal_env.Program('marshal', 'python/marshal.cc')[0]
+    For example, assume:
+    - Each file <X>.cc is tagged with the tag "Tag <X>".
+    - B.cc refers to symbols from A.cc
+    - C.cc refers to symbols from B.cc
+    - D.cc refers to symbols from A.cc and C.cc
+
+    Then:
+    - "Tag A" is implied by "Tag B"
+    - "Tag B" is implied by "Tag C"
+    - "Tag A" is transitively implied by "Tag C" (from "Tag B")
+    - "Tag A" and "Tag C" are implied by "Tag D"
+    - "Tag B" is transitively implied by "Tag D" (from "Tag C")
+    - "Tag A" is transitively implied by "Tag D" (from transitive "Tag B")
+
+    All of these implications are simply declared as:
+        env.TagImplies("Tag B", "Tag A")
+        env.TagImplies("Tag C", "Tag B")
+        env.TagImplies("Tag D", ["Tag A", "Tag C"])
 
-# Embed python files.  All .py files that have been indicated by a
-# PySource() call in a SConscript need to be embedded into the M5
-# library.  To do that, we compile the file to byte code, marshal the
-# byte code, compress it, and then generate a c++ file that
-# inserts the result into an array.
-def embedPyFile(target, source, env):
-    def c_str(string):
-        if string is None:
-            return "0"
-        return '"%s"' % string
+    So that any use of a tag will automatically include its transitive tags
+    after being resolved.
+    '''
 
-    '''Action function to compile a .py into a code object, marshal it,
-    compress it, and stick it into an asm file so the code appears as
-    just bytes with a label in the data section. The action takes two
-    sources:
+    env.SetDefault(_tag_implies={})
+    implications = env['_tag_implies']
 
-    source[0]: Binary used to marshal Python sources
-    source[1]: Python script to marshal
+    if isinstance(tag_list, str):
+        tag_list = frozenset([tag_list])
+    if not isinstance(tag_list, frozenset):
+        tag_list = frozenset(tag_list)
+    if tag in implications:
+        implications[tag] |= tag_list
+    else:
+        implications[tag] = tag_list
+
+    # Check if any of the tags on which the new tag depends on already
+    # has a list of implications. If so, add the list to the new tag's
+    # implications
+    for t in tag_list:
+        if t in implications:
+            implications[tag] |= implications[t]
+
+    # Check if another tag depends on this tag. If so, add this tag's
+    # implications to that tag.
+    for t,implied in implications.items():
+        if tag in implied:
+            implications[t] |= implications[tag]
+
+env.AddMethod(tag_implies, 'TagImplies')
+
+def resolve_tags(env, tags):
+    '''
+    Returns the complete set of tags implied (dependencies) by the
+    supplied tags.
     '''
 
-    import subprocess
+    implications = env.SetDefault(_tag_implies={})
+    implications = env['_tag_implies']
 
-    marshalled = subprocess.check_output(
-            [source[0].abspath, str(source[1])], env=env['ENV'])
+    if isinstance(tags, str):
+        tags = frozenset([tags])
+    if not isinstance(tags, frozenset):
+        tags = frozenset(tags)
+
+    tags = tags.copy()
+    for tag in tags:
+        if tag in implications:
+            tags |= implications[tag]
+    return tags
+
+class SourceFilter(object):
+    def __init__(self, predicate):
+        self.predicate = predicate
+
+    def __or__(self, other):
+        return SourceFilter(lambda env, tags: self.predicate(env, tags) or
+                                              other.predicate(env, tags))
+
+    def __and__(self, other):
+        return SourceFilter(lambda env, tags: self.predicate(env, tags) and
+                                              other.predicate(env, tags))
+
+def with_tags_that(predicate):
+    '''Return a list of sources with tags that satisfy a predicate.'''
+    return SourceFilter(predicate)
+
+def with_any_tags(*tags):
+    '''Return a list of sources with any of the supplied tags.'''
+    return SourceFilter(lambda env, stags: \
+        len(resolve_tags(env, tags) & stags) > 0)
+
+def with_all_tags(*tags):
+    '''Return a list of sources with all of the supplied tags.'''
+    return SourceFilter(lambda env, stags: resolve_tags(env, tags) <= stags)
+
+def with_tag(tag):
+    '''Return a list of sources with the supplied tag.'''
+    return with_any_tags(*[tag])
+
+def without_tags(*tags):
+    '''Return a list of sources without any of the supplied tags.'''
+    return SourceFilter(lambda env, stags: \
+        len(resolve_tags(env, tags) & stags) == 0)
+
+def without_tag(tag):
+    '''Return a list of sources without the supplied tag.'''
+    return without_tags(*[tag])
+
+source_filter_factories = {
+    'with_tags_that': with_tags_that,
+    'with_any_tags': with_any_tags,
+    'with_all_tags': with_all_tags,
+    'with_tag': with_tag,
+    'without_tags': without_tags,
+    'without_tag': without_tag,
+}
 
-    compressed = zlib.compress(marshalled)
-    data = compressed
-    pysource = PySource.tnodes[source[1]]
+Export(source_filter_factories)
 
-    code = code_formatter()
-    code('''\
-#include "sim/init.hh"
+class SourceList(list):
+    def apply_filter(self, env, f):
+        def match(source):
+            return f.predicate(env, source.tags)
+        return SourceList(filter(match, self))
+
+    def __getattr__(self, name):
+        func = source_filter_factories.get(name, None)
+        if not func:
+            raise AttributeError
+
+        @functools.wraps(func)
+        def wrapper(env, *args, **kwargs):
+            return self.apply_filter(env, func(*args, **kwargs))
+        return wrapper
+
+class SourceMeta(type):
+    '''Meta class for source files that keeps track of all files of a
+    particular type.'''
+    def __init__(cls, name, bases, dict):
+        super(SourceMeta, cls).__init__(name, bases, dict)
+        cls.all = SourceList()
+
+class SourceFile(object, metaclass=SourceMeta):
+    '''Base object that encapsulates the notion of a source file.
+    This includes, the source node, target node, various manipulations
+    of those.  A source file also specifies a set of tags which
+    describing arbitrary properties of the source file.'''
+
+    static_objs = {}
+    shared_objs = {}
+
+    def __init__(self, source, tags=None, add_tags=None, append=None):
+        if tags is None:
+            tags='gem5 lib'
+        if isinstance(tags, str):
+            tags = set([tags])
+        if not isinstance(tags, set):
+            tags = set(tags)
+        self.tags = tags
+
+        if add_tags:
+            if isinstance(add_tags, str):
+                add_tags = set([add_tags])
+            if not isinstance(add_tags, set):
+                add_tags = set(add_tags)
+            self.tags |= add_tags
+
+        self.append = append
+
+        tnode = source
+        if not isinstance(source, SCons.Node.FS.File):
+            tnode = File(source)
+
+        self.tnode = tnode
+        self.snode = tnode.srcnode()
+
+        for base in type(self).__mro__:
+            if issubclass(base, SourceFile):
+                base.all.append(self)
+
+    def static(self, env):
+        key = (self.tnode, env['OBJSUFFIX'])
+        if self.append:
+            env = env.Clone()
+            env.Append(**self.append)
+        if not key in self.static_objs:
+            self.static_objs[key] = env.StaticObject(self.tnode)
+        return self.static_objs[key]
+
+    def shared(self, env):
+        key = (self.tnode, env['OBJSUFFIX'])
+        if self.append:
+            env = env.Clone()
+            env.Append(**self.append)
+        if not key in self.shared_objs:
+            self.shared_objs[key] = env.SharedObject(self.tnode)
+        return self.shared_objs[key]
+
+    @property
+    def filename(self):
+        return str(self.tnode)
+
+    @property
+    def dirname(self):
+        return dirname(self.filename)
+
+    @property
+    def basename(self):
+        return basename(self.filename)
+
+    @property
+    def extname(self):
+        index = self.basename.rfind('.')
+        if index <= 0:
+            # dot files aren't extensions
+            return self.basename, None
+
+        return self.basename[:index], self.basename[index+1:]
+
+    def __lt__(self, other): return self.filename < other.filename
+    def __le__(self, other): return self.filename <= other.filename
+    def __gt__(self, other): return self.filename > other.filename
+    def __ge__(self, other): return self.filename >= other.filename
+    def __eq__(self, other): return self.filename == other.filename
+    def __ne__(self, other): return self.filename != other.filename
 
-namespace gem5
-{
-namespace
-{
+def blobToCpp(data, symbol, cpp_code, hpp_code=None, namespace=None):
+    '''
+    Convert bytes data into C++ .cpp and .hh uint8_t byte array
+    code containing that binary data.
 
+    :param data: binary data to be converted to C++
+    :param symbol: name of the symbol
+    :param cpp_code: append the generated cpp_code to this object
+    :param hpp_code: append the generated hpp_code to this object
+                     If None, ignore it. Otherwise, also include it
+                     in the .cpp file.
+    :param namespace: namespace to put the symbol into. If None,
+                      don't put the symbols into any namespace.
+    '''
+    symbol_len_declaration = 'const std::size_t {}_len'.format(symbol)
+    symbol_declaration = 'const std::uint8_t {}[]'.format(symbol)
+    if hpp_code is not None:
+        cpp_code('''\
+#include "blobs/{}.hh"
+'''.format(symbol))
+        hpp_code('''\
+#include <cstddef>
+#include <cstdint>
 ''')
-    bytesToCppArray(code, 'embedded_module_data', data)
-    # The name of the EmbeddedPython object doesn't matter since it's in an
-    # anonymous namespace, and it's constructor takes care of installing it
-    # into a global list.
-    code('''
-EmbeddedPython embedded_module_info(
-    ${{c_str(pysource.abspath)}},
-    ${{c_str(pysource.modpath)}},
-    embedded_module_data,
-    ${{len(data)}},
-    ${{len(marshalled)}});
+        if namespace is not None:
+            hpp_code('namespace {} {{'.format(namespace))
+        hpp_code('extern ' + symbol_len_declaration + ';')
+        hpp_code('extern ' + symbol_declaration + ';')
+        if namespace is not None:
+            hpp_code('}')
+    if namespace is not None:
+        cpp_code('namespace {} {{'.format(namespace))
+    if hpp_code is not None:
+        cpp_code(symbol_len_declaration + ' = {};'.format(len(data)))
+    cpp_code(symbol_declaration + ' = {')
+    cpp_code.indent()
+    step = 16
+    for i in range(0, len(data), step):
+        x = array.array('B', data[i:i+step])
+        cpp_code(''.join('%d,' % d for d in x))
+    cpp_code.dedent()
+    cpp_code('};')
+    if namespace is not None:
+        cpp_code('}')
 
-} // anonymous namespace
-} // namespace gem5
-''')
-    code.write(str(target[0]))
+def Blob(blob_path, symbol):
+    '''
+    Embed an arbitrary blob into the gem5 executable,
+    and make it accessible to C++ as a byte array.
+    '''
+    blob_path = os.path.abspath(blob_path)
+    blob_out_dir = os.path.join(env['BUILDDIR'], 'blobs')
+    path_noext = joinpath(blob_out_dir, symbol)
+    cpp_path = path_noext + '.cc'
+    hpp_path = path_noext + '.hh'
+    def embedBlob(target, source, env):
+        with open(str(source[0]), 'rb') as f:
+            data = f.read()
+        cpp_code = code_formatter()
+        hpp_code = code_formatter()
+        blobToCpp(data, symbol, cpp_code, hpp_code, namespace='Blobs')
+        cpp_path = str(target[0])
+        hpp_path = str(target[1])
+        cpp_dir = os.path.split(cpp_path)[0]
+        if not os.path.exists(cpp_dir):
+            os.makedirs(cpp_dir)
+        cpp_code.write(cpp_path)
+        hpp_code.write(hpp_path)
+    env.Command([cpp_path, hpp_path], blob_path,
+                MakeAction(embedBlob, Transform("EMBED BLOB")))
+    Source(cpp_path)
+
+def GdbXml(xml_id, symbol):
+    Blob(joinpath(gdb_xml_dir, xml_id), symbol)
+
+class Source(SourceFile):
+    pass
 
 class PySource(SourceFile):
     '''Add a python source file to the named package'''
+    invalid_sym_char = re.compile('[^A-z0-9_]')
     modules = {}
     tnodes = {}
+    symnames = {}
 
     def __init__(self, package, source, tags=None, add_tags=None):
         '''specify the python package, the source file, and any tags'''
         super(PySource, self).__init__(source, tags, add_tags)
 
-        basename = os.path.basename(self.filename)
-        modname, ext = os.path.splitext(basename)
-        assert ext == '.py'
+        modname,ext = self.extname
+        assert ext == 'py'
 
         if package:
-            modpath = package.split('.')
+            path = package.split('.')
         else:
-            modpath = []
+            path = []
 
+        modpath = path[:]
         if modname != '__init__':
             modpath += [ modname ]
         modpath = '.'.join(modpath)
 
+        arcpath = path + [ self.basename ]
         abspath = self.snode.abspath
-        if not os.path.exists(abspath):
+        if not exists(abspath):
             abspath = self.tnode.abspath
 
         self.package = package
         self.modname = modname
         self.modpath = modpath
+        self.arcname = joinpath(*arcpath)
         self.abspath = abspath
+        self.compiled = File(self.filename + 'c')
         self.cpp = File(self.filename + '.cc')
+        self.symname = PySource.invalid_sym_char.sub('_', modpath)
 
         PySource.modules[modpath] = self
         PySource.tnodes[self.tnode] = self
-
-        marshal_env.Command(self.cpp, [ py_marshal, self.tnode ],
-                        MakeAction(embedPyFile, Transform("EMBED PY")))
+        PySource.symnames[self.symname] = self
 
 class SimObject(PySource):
     '''Add a SimObject python file as a python source object and add
@@ -211,25 +457,35 @@
     root, ext = os.path.splitext(source[0].get_abspath())
     return [root + '.pb.cc', root + '.pb.h'], source
 
-protoc_action = MakeAction('${PROTOC} --cpp_out ${BUILDDIR} '
-        '--proto_path ${BUILDDIR} ${SOURCE.get_abspath()}',
-        Transform("PROTOC"))
-protobuf_builder = Builder(action=protoc_action, emitter=protoc_emitter,
-        src_suffix='.proto')
-env.Append(BUILDERS={'ProtoBufCC' : protobuf_builder})
-
-c_file, cxx_file = SCons.Tool.createCFileBuilders(env)
-cxx_file.add_action('.proto', protoc_action)
-cxx_file.add_emitter('.proto', protoc_emitter)
+env.Append(BUILDERS={'ProtoBufCC' : Builder(
+            action=MakeAction('${PROTOC} --cpp_out ${BUILDDIR} '
+                              '--proto_path ${BUILDDIR} '
+                              '${SOURCE.get_abspath()}',
+                              Transform("PROTOC")),
+            emitter=protoc_emitter
+        )})
 
-def ProtoBuf(source, tags=None, add_tags=None):
+class ProtoBuf(SourceFile):
     '''Add a Protocol Buffer to build'''
 
-    if not env['HAVE_PROTOC'] or not env['HAVE_PROTOBUF']:
-        error('Got protobuf to build, but lacks support!')
+    def __init__(self, source, tags=None, add_tags=None):
+        '''Specify the source file, and any tags'''
+        super(ProtoBuf, self).__init__(source, tags, add_tags)
+
+        if not env['HAVE_PROTOC'] or not env['HAVE_PROTOBUF']:
+            error('Got protobuf to build, but lacks support!')
+
+        # Get the file name and the extension
+        modname,ext = self.extname
+        assert ext == 'proto'
+
+        self.cc_file, self.hh_file = env.ProtoBufCC(source=source)
+
+        # Add the C++ source file
+        Source(self.cc_file, tags=self.tags,
+                append={'CXXFLAGS': '-Wno-array-bounds'})
+
 
-    '''Specify the source file, and any tags'''
-    Source(source, tags, add_tags, append={'CXXFLAGS': '-Wno-array-bounds'})
 
 env['PROTOC_GRPC'] = distutils.spawn.find_executable('grpc_cpp_plugin')
 if env['PROTOC_GRPC']:
@@ -239,45 +495,53 @@
     root, ext = os.path.splitext(source[0].get_abspath())
     return [root + '.grpc.pb.cc', root + '.grpc.pb.h'], source
 
-protoc_grpc_action=MakeAction('${PROTOC} --grpc_out ${BUILDDIR} '
-        '--plugin=protoc-gen-grpc=${PROTOC_GRPC} --proto_path ${BUILDDIR} '
-        '${SOURCE.get_abspath()}',
-        Transform("PROTOC"))
-
 env.Append(BUILDERS={'GrpcProtoBufCC' : Builder(
-            action=protoc_grpc_action,
+            action=MakeAction('${PROTOC} --grpc_out ${BUILDDIR} '
+                              '--plugin=protoc-gen-grpc=${PROTOC_GRPC} '
+                              '--proto_path ${BUILDDIR} '
+                              '${SOURCE.get_abspath()}',
+                              Transform("PROTOC")),
             emitter=protoc_grpc_emitter
         )})
 
-def GrpcProtoBuf(source, tags=None, add_tags=None):
+class GrpcProtoBuf(SourceFile):
     '''Add a GRPC protocol buffer to the build'''
 
-    if not env['PROTOC_GRPC']:
-        error('No grpc_cpp_plugin found')
+    def __init__(self, source, tags=None, add_tags=None):
+        '''Specify the source file, and any tags'''
 
-    Source(env.GrpcProtoBufCC(source=source)[0], tags=tags, add_tags=add_tags)
-    Source(env.ProtoBufCC(source=source)[0], tags=tags, add_tags=add_tags)
+        super(GrpcProtoBuf, self).__init__(source, tags, add_tags)
 
+        if not env['PROTOC_GRPC']:
+            error('No grpc_cpp_plugin found')
 
+        self.cc_file, self.hh_file = env.GrpcProtoBufCC(source=source)
 
-date_source = File('base/date.cc')
+        # We still need to build the normal protobuf code too.
+        self.protobuf = ProtoBuf(source, tags=self.tags)
 
-class TopLevelMeta(type):
-    '''Meta class for top level build products, ie binaries and libraries.'''
+        # Add the C++ source file.
+        Source(self.cc_file, tags=self.tags,
+                append={'CXXFLAGS': '-Wno-array-bounds'})
+
+
+exectuable_classes = []
+class ExecutableMeta(type):
+    '''Meta class for Executables.'''
     all = []
 
     def __init__(cls, name, bases, d):
-        TopLevelMeta.all.append(cls)
-        super(TopLevelMeta, cls).__init__(name, bases, d)
+        ExecutableMeta.all.append(cls)
+        super(ExecutableMeta, cls).__init__(name, bases, d)
         cls.all = []
 
-class TopLevelBase(object, metaclass=TopLevelMeta):
-    '''Base class for linked build products.'''
+class Executable(object, metaclass=ExecutableMeta):
+    '''Base class for creating an executable from sources.'''
 
     def __init__(self, target, *srcs_and_filts):
         '''Specify the target name and any sources. Sources that are
         not SourceFiles are evalued with Source().'''
-        super(TopLevelBase, self).__init__()
+        super(Executable, self).__init__()
         self.all.append(self)
         self.target = target
 
@@ -290,15 +554,12 @@
             if not isinstance(src, SourceFile):
                 src = Source(src, tags=[])
             srcs.append(src)
-        self.srcs = srcs
 
+        self.sources = srcs
         self.dir = Dir('.')
 
-    def sources(self, env):
-        srcs = self.srcs
-        for f in self.filters:
-            srcs += Source.all.apply_filter(env, f)
-        return srcs
+    def path(self, env):
+        return self.dir.File(self.target + '.' + env['EXE_SUFFIX'])
 
     def srcs_to_objs(self, env, sources):
         return list([ s.static(env) for s in sources ])
@@ -307,90 +568,75 @@
     def declare_all(cls, env):
         return list([ instance.declare(env) for instance in cls.all ])
 
-class StaticLib(TopLevelBase):
-    '''Base class for creating a static library from sources.'''
-
-    def declare(self, env):
-        objs = self.srcs_to_objs(env, self.sources(env))
-
-        date_obj = env.StaticObject(date_source)
-        env.Depends(date_obj, objs)
-
-        return env.StaticLibrary(self.target, [date_obj, objs])[0]
-
-class SharedLib(TopLevelBase):
-    '''Base class for creating a shared library from sources.'''
-
-    def srcs_to_objs(self, env, sources):
-        return list([ s.shared(env) for s in sources ])
-
-    def declare(self, env):
-        objs = self.srcs_to_objs(env, self.sources(env))
-
-        date_obj = env.SharedObject(date_source)
-        env.Depends(date_obj, objs)
-
-        return env.SharedLibrary(self.target, [date_obj, objs])[0]
-
-class Executable(TopLevelBase):
-    '''Base class for creating an executable from sources.'''
-
-    def path(self, env):
-        return self.dir.File(self.target + '.${ENV_LABEL}')
-
     def declare(self, env, objs=None):
         if objs is None:
-            objs = self.srcs_to_objs(env, self.sources(env))
+            objs = self.srcs_to_objs(env, self.sources)
 
         env = env.Clone()
         env['BIN_RPATH_PREFIX'] = os.path.relpath(
                 env['BUILDDIR'], self.path(env).dir.abspath)
 
-        date_obj = env.StaticObject(date_source)
-        env.Depends(date_obj, objs)
-
-        executable = env.Program(self.path(env).abspath, [date_obj, objs])[0]
-
-        if sys.platform == 'sunos5':
-            cmd = 'cp $SOURCE $TARGET; strip $TARGET'
+        if env['STRIP_EXES']:
+            stripped = self.path(env)
+            unstripped = env.File(str(stripped) + '.unstripped')
+            if sys.platform == 'sunos5':
+                cmd = 'cp $SOURCE $TARGET; strip $TARGET'
+            else:
+                cmd = 'strip $SOURCE -o $TARGET'
+            env.Program(unstripped, objs)
+            return env.Command(stripped, unstripped,
+                               MakeAction(cmd, Transform("STRIP")))
         else:
-            cmd = 'strip $SOURCE -o $TARGET'
-        stripped = env.Command(str(executable) + '.stripped',
-                executable, MakeAction(cmd, Transform("STRIP")))[0]
-
-        return [executable, stripped]
+            return env.Program(self.path(env), objs)
 
 class GTest(Executable):
     '''Create a unit test based on the google test framework.'''
     all = []
     def __init__(self, *srcs_and_filts, **kwargs):
-        if not kwargs.pop('skip_lib', False):
-            srcs_and_filts = srcs_and_filts + (with_tag('gtest lib'),)
         super(GTest, self).__init__(*srcs_and_filts)
 
+        self.skip_lib = kwargs.pop('skip_lib', False)
+
     @classmethod
     def declare_all(cls, env):
         env = env.Clone()
-        env['OBJSUFFIX'] = '.t' + env['OBJSUFFIX'][1:]
-        env['SHOBJSUFFIX'] = '.t' + env['SHOBJSUFFIX'][1:]
         env.Append(LIBS=env['GTEST_LIBS'])
         env.Append(CPPFLAGS=env['GTEST_CPPFLAGS'])
+        env['GTEST_LIB_SOURCES'] = Source.all.with_tag(env, 'gtest lib')
         env['GTEST_OUT_DIR'] = \
-            Dir(env['BUILDDIR']).Dir('unittests.${ENV_LABEL}')
+            Dir(env['BUILDDIR']).Dir('unittests.' + env['EXE_SUFFIX'])
         return super(GTest, cls).declare_all(env)
 
     def declare(self, env):
-        binary, stripped = super(GTest, self).declare(env)
+        sources = list(self.sources)
+        if not self.skip_lib:
+            sources += env['GTEST_LIB_SOURCES']
+        for f in self.filters:
+            sources += Source.all.apply_filter(env, f)
+        objs = self.srcs_to_objs(env, sources)
+
+        binary = super(GTest, self).declare(env, objs)
 
         out_dir = env['GTEST_OUT_DIR']
         xml_file = out_dir.Dir(str(self.dir)).File(self.target + '.xml')
-        AlwaysBuild(env.Command(xml_file.abspath, binary,
+        AlwaysBuild(env.Command(xml_file, binary,
             "${SOURCES[0]} --gtest_output=xml:${TARGETS[0]}"))
 
         return binary
 
+class Gem5(Executable):
+    '''Create a gem5 executable.'''
+
+    def __init__(self, target):
+        super(Gem5, self).__init__(target)
+
+    def declare(self, env):
+        objs = env['MAIN_OBJS'] + env['STATIC_OBJS']
+        return super(Gem5, self).declare(env, objs)
+
 
 # Children should have access
+Export('Blob')
 Export('GdbXml')
 Export('Source')
 Export('PySource')
@@ -404,75 +650,35 @@
 #
 # Debug Flags
 #
-
-def makeDebugFlagHH(target, source, env):
-    assert len(target) == 1 and len(source) == 1
-
-    name, components, desc, fmt = FromValue(source[0])
-
-    code = code_formatter()
-
-    typename = "CompoundFlag" if components else "SimpleFlag"
-    component_flag_decls = \
-            ''.join('extern SimpleFlag& %s;\n' % flag for flag in components)
-
-    # file header boilerplate
-    code('''\
-#ifndef __DEBUG_${name}_HH__
-#define __DEBUG_${name}_HH__
-
-#include "base/compiler.hh" // For namespace deprecation
-
-namespace gem5
-{
-
-GEM5_DEPRECATED_NAMESPACE(Debug, debug);
-namespace debug
-{
-
-class SimpleFlag;
-class CompoundFlag;
-extern ${typename}& ${name};
-${component_flag_decls}
-
-} // namespace debug
-} // namespace gem5
-
-#endif // __DEBUG_${name}_HH__
-''')
-
-    code.write(str(target[0]))
-
 debug_flags = {}
 def DebugFlag(name, desc=None, fmt=False):
-    if name == "All":
-        raise AttributeError('The "All" flag name is reserved')
     if name in debug_flags:
         raise AttributeError("Flag {} already specified".format(name))
-
-    flag = (name, (), desc, fmt)
-    debug_flags[name] = flag
-
-    hh_file = Dir(env['BUILDDIR']).Dir('debug').File('%s.hh' % name)
-    env.Command(hh_file, ToValue(flag),
-            MakeAction(makeDebugFlagHH, Transform("TRACING", 0)))
+    debug_flags[name] = (name, (), desc, fmt)
 
 def CompoundFlag(name, flags, desc=None):
-    if name == "All":
-        raise AttributeError('The "All" flag name is reserved')
     if name in debug_flags:
-        raise AttributeError('Flag {} already specified'.format(name))
-
-    flag = (name, flags, desc, False)
-    debug_flags[name] = flag
+        raise AttributeError("Flag {} already specified".format(name))
 
-    env.Command(Dir(env['BUILDDIR']).Dir('debug').File('%s.hh' % name),
-            ToValue(flag),
-            MakeAction(makeDebugFlagHH, Transform("TRACING", 0)))
+    compound = tuple(flags)
+    debug_flags[name] = (name, compound, desc, False)
 
 def DebugFormatFlag(name, desc=None):
     DebugFlag(name, desc, True)
 
+# Create a compound debug flag that encapsulates all flags: "All". This
+# flag should not be used within C++ code - it is a compound meta flag
+def _createAllDebugFlag():
+    simple_flags = []
+    for name,flag in sorted(debug_flags.items()):
+        n, compound, desc, fmt = flag
+        assert n == name
+        if not compound and not fmt:
+            simple_flags.append(n)
+
+    CompoundFlag("All", simple_flags,
+        "Controls all debug flags. It should not be used within C++ code.")
+
 Export('DebugFlag')
 Export('CompoundFlag')
 Export('DebugFormatFlag')
@@ -508,15 +714,15 @@
         continue
 
     if 'SConscript' in files:
-        build_dir = os.path.join(env['BUILDDIR'], root[len(base_dir) + 1:])
-        SConscript(os.path.join(root, 'SConscript'), variant_dir=build_dir)
+        build_dir = joinpath(env['BUILDDIR'], root[len(base_dir) + 1:])
+        SConscript(joinpath(root, 'SConscript'), variant_dir=build_dir)
 
 for extra_dir in extras_dir_list:
-    prefix_len = len(os.path.dirname(extra_dir)) + 1
+    prefix_len = len(dirname(extra_dir)) + 1
 
     # Also add the corresponding build directory to pick up generated
     # include files.
-    env.Append(CPPPATH=Dir(env['BUILDDIR']).Dir(extra_dir[prefix_len:]))
+    env.Append(CPPPATH=Dir(joinpath(env['BUILDDIR'], extra_dir[prefix_len:])))
 
     for root, dirs, files in os.walk(extra_dir, topdown=True):
         # if build lives in the extras directory, don't walk down it
@@ -524,16 +730,17 @@
             dirs.remove('build')
 
         if 'SConscript' in files:
-            build_dir = os.path.join(env['BUILDDIR'], root[prefix_len:])
-            SConscript(os.path.join(root, 'SConscript'), variant_dir=build_dir)
+            build_dir = joinpath(env['BUILDDIR'], root[prefix_len:])
+            SConscript(joinpath(root, 'SConscript'), variant_dir=build_dir)
 
 for opt in export_vars:
     env.ConfigFile(opt)
 
 def makeTheISA(source, target, env):
-    isas = sorted(set(env.Split('${ALL_ISAS}')))
+    isas = [ src.get_contents().decode('utf-8') for src in source ]
     target_isa = env['TARGET_ISA']
-    is_null_isa = '1' if (target_isa.lower() == 'null') else '0'
+    def define(isa):
+        return str(isa.upper()) + '_ISA'
 
     def namespace(isa):
         return isa[0].upper() + isa[1:].lower() + 'ISA'
@@ -544,30 +751,73 @@
 #ifndef __CONFIG_THE_ISA_HH__
 #define __CONFIG_THE_ISA_HH__
 
-#define IS_NULL_ISA ${{is_null_isa}}
+''')
+
+    # create defines for the preprocessing and compile-time determination
+    for i,isa in enumerate(isas):
+        code('#define $0 $1', define(isa), i + 1)
+    code()
+
+    # create an enum for any run-time determination of the ISA, we
+    # reuse the same name as the namespaces
+    code('enum class Arch {')
+    for isa in isas:
+        code('  $0 = $1,', namespace(isa), define(isa))
+    code('};')
+
+    code('''
+
+#define THE_ISA ${{define(target_isa)}}
 #define TheISA ${{namespace(target_isa)}}
+#define THE_ISA_STR "${{target_isa}}"
 
 #endif // __CONFIG_THE_ISA_HH__''')
 
     code.write(str(target[0]))
 
-env.Command('config/the_isa.hh', [],
+env.Command('config/the_isa.hh', list(map(Value, all_isa_list)),
             MakeAction(makeTheISA, Transform("CFG ISA", 0)))
 
 def makeTheGPUISA(source, target, env):
-    gpu_isa = env['TARGET_GPU_ISA']
+    isas = [ src.get_contents().decode('utf-8') for src in source ]
+    target_gpu_isa = env['TARGET_GPU_ISA']
+    def define(isa):
+        return str(isa.upper()) + '_ISA'
+
+    def namespace(isa):
+        return isa[0].upper() + isa[1:].lower() + 'ISA'
 
-    namespace = gpu_isa[0].upper() + gpu_isa[1:].lower() + 'ISA'
 
     code = code_formatter()
     code('''\
-#ifndef TheGpuISA
-#define TheGpuISA ${namespace}
-#endif // TheGpuISA''')
+#ifndef __CONFIG_THE_GPU_ISA_HH__
+#define __CONFIG_THE_GPU_ISA_HH__
+
+''')
+
+    # create defines for the preprocessing and compile-time determination
+    for i,isa in enumerate(isas):
+        code('#define $0 $1', define(isa), i + 1)
+    code()
+
+    # create an enum for any run-time determination of the ISA, we
+    # reuse the same name as the namespaces
+    code('enum class GPUArch {')
+    for isa in isas:
+        code('  $0 = $1,', namespace(isa), define(isa))
+    code('};')
+
+    code('''
+
+#define THE_GPU_ISA ${{define(target_gpu_isa)}}
+#define TheGpuISA ${{namespace(target_gpu_isa)}}
+#define THE_GPU_ISA_STR "${{target_gpu_isa}}"
+
+#endif // __CONFIG_THE_GPU_ISA_HH__''')
 
     code.write(str(target[0]))
 
-env.Command('config/the_gpu_isa.hh', [],
+env.Command('config/the_gpu_isa.hh', list(map(Value, all_gpu_isa_list)),
             MakeAction(makeTheGPUISA, Transform("CFG ISA", 0)))
 
 ########################################################################
@@ -577,20 +827,10 @@
 #
 SimObject.fixed = True
 
-class SimpleModuleLoader(importlib.abc.Loader):
-    '''A simple wrapper which delegates setting up a module to a function.'''
-    def __init__(self, executor):
-        super(SimpleModuleLoader, self).__init__()
-        self.executor = executor
-    def create_module(self, spec):
-        return None
-
-    def exec_module(self, module):
-        self.executor(module)
-
-class M5MetaPathFinder(importlib.abc.MetaPathFinder):
+class DictImporter(object):
+    '''This importer takes a dictionary of arbitrary module names that
+    map to arbitrary filenames.'''
     def __init__(self, modules):
-        super(M5MetaPathFinder, self).__init__()
         self.modules = modules
         self.installed = set()
 
@@ -600,49 +840,49 @@
             del sys.modules[module]
         self.installed = set()
 
-    def find_spec(self, fullname, path, target=None):
-        spec = None
+    def find_module(self, fullname, path):
+        if fullname == 'm5.defines':
+            return self
+
+        if fullname == 'm5.objects':
+            return self
+
+        if fullname.startswith('_m5'):
+            return None
+
+        source = self.modules.get(fullname, None)
+        if source is not None and fullname.startswith('m5.objects'):
+            return self
 
-        # If this isn't even in the m5 package, ignore it.
-        if fullname.startswith('m5.'):
-            if fullname.startswith('m5.objects'):
-                # When imported in this context, return a spec for a dummy
-                # package which just serves to house the modules within it.
-                # This is subtley different from "import * from m5.objects"
-                # which relies on the __init__.py in m5.objects. That in turn
-                # indirectly relies on the c++ based _m5 package which doesn't
-                # exist yet.
-                if fullname == 'm5.objects':
-                    dummy_loader = SimpleModuleLoader(lambda x: None)
-                    spec = importlib.machinery.ModuleSpec(
-                            name=fullname, loader=dummy_loader,
-                            is_package=True)
-                    spec.loader_state = self.modules.keys()
-
-                # If this is a module within the m5.objects package, return a
-                # spec that maps to its source file.
-                elif fullname in self.modules:
-                    source = self.modules[fullname]
-                    spec = importlib.util.spec_from_file_location(
-                            name=fullname, location=source.abspath)
-
-            # The artificial m5.defines subpackage.
-            elif fullname == 'm5.defines':
-                def build_m5_defines(module):
-                    module.__dict__['buildEnv'] = dict(build_env)
-
-                spec = importlib.util.spec_from_loader(name=fullname,
-                        loader=SimpleModuleLoader(build_m5_defines))
-
-        # If we're handling this module, write it down so we can unload it
-        # later.
-        if spec is not None:
-            self.installed.add(fullname)
+        return None
+
+    def load_module(self, fullname):
+        mod = imp.new_module(fullname)
+        sys.modules[fullname] = mod
+        self.installed.add(fullname)
+
+        mod.__loader__ = self
+        if fullname == 'm5.objects':
+            mod.__path__ = fullname.split('.')
+            return mod
+
+        if fullname == 'm5.defines':
+            mod.__dict__['buildEnv'] = dict(build_env)
+            return mod
+
+        source = self.modules[fullname]
+        if source.modname == '__init__':
+            mod.__path__ = source.modpath
+        mod.__file__ = source.abspath
 
-        return spec
+        compiled = compile(open(source.abspath).read(), source.abspath, 'exec')
+        exec(compiled, mod.__dict__)
+
+        return mod
 
 import m5.SimObject
 import m5.params
+from m5.util import code_formatter
 
 m5.SimObject.clear()
 m5.params.clear()
@@ -650,7 +890,7 @@
 # install the python importer so we can grab stuff from the source
 # tree itself.  We can't have SimObjects added after this point or
 # else we won't know about them for the rest of the stuff.
-importer = M5MetaPathFinder(PySource.modules)
+importer = DictImporter(PySource.modules)
 sys.meta_path[0:0] = [ importer ]
 
 # import all sim objects so we can populate the all_objects list
@@ -693,7 +933,21 @@
     build_env = source[0].get_contents().decode('utf-8')
 
     code = code_formatter()
-    code("buildEnv = dict($build_env)")
+    code("""
+import _m5.core
+import m5.util
+
+buildEnv = dict($build_env)
+
+compileDate = _m5.core.compileDate
+gem5Version = _m5.core.gem5Version
+_globals = globals()
+for key,val in _m5.core.__dict__.items():
+    if key.startswith('flag_'):
+        flag = key[5:]
+        _globals[flag] = val
+del _globals
+""")
     code.write(target[0].abspath)
 
 defines_info = Value(build_env)
@@ -884,7 +1138,7 @@
                 MakeAction(createSimObjectWrappers,
                             Transform("SO PyB/C")))
     env.Depends(cc_file, depends + extra_deps)
-    Source(cc_file, add_tags='python')
+    Source(cc_file)
 
 #
 # Handle debug flags
@@ -950,7 +1204,59 @@
 
     code.write(str(target[0]))
 
+def makeDebugFlagHH(target, source, env):
+    assert(len(target) == 1 and len(source) == 1)
+
+    val = eval(source[0].get_contents())
+    name, compound, desc, fmt = val
+
+    code = code_formatter()
+
+    # file header boilerplate
+    code('''\
+#ifndef __DEBUG_${name}_HH__
+#define __DEBUG_${name}_HH__
+
+#include "base/compiler.hh" // For namespace deprecation
+
+namespace gem5
+{
+
+GEM5_DEPRECATED_NAMESPACE(Debug, debug);
+namespace debug
+{
+''')
+
+    if compound:
+        code('class CompoundFlag;')
+    code('class SimpleFlag;')
+
+    if compound:
+        code('extern CompoundFlag& $name;')
+        for flag in compound:
+            code('extern SimpleFlag& $flag;')
+    else:
+        code('extern SimpleFlag& $name;')
+
+    code('''
+} // namespace debug
+} // namespace gem5
+
+#endif // __DEBUG_${name}_HH__
+''')
+
+    code.write(str(target[0]))
+
 # Generate the files for the debug and debug-format flags
+_createAllDebugFlag()
+for name,flag in sorted(debug_flags.items()):
+    n, compound, desc, fmt = flag
+    assert n == name
+
+    hh_file = 'debug/%s.hh' % name
+    env.Command(hh_file, Value(flag),
+                MakeAction(makeDebugFlagHH, Transform("TRACING", 0)))
+
 env.Command('debug/flags.cc', Value(debug_flags),
             MakeAction(makeDebugFlagCC, Transform("TRACING", 0)))
 Source('debug/flags.cc', add_tags='gem5 trace')
@@ -962,8 +1268,72 @@
                        Transform("VER TAGS")))
 env.AlwaysBuild(tags)
 
+# Embed python files.  All .py files that have been indicated by a
+# PySource() call in a SConscript need to be embedded into the M5
+# library.  To do that, we compile the file to byte code, marshal the
+# byte code, compress it, and then generate a c++ file that
+# inserts the result into an array.
+def embedPyFile(target, source, env):
+    def c_str(string):
+        if string is None:
+            return "0"
+        return '"%s"' % string
+
+    '''Action function to compile a .py into a code object, marshal it,
+    compress it, and stick it into an asm file so the code appears as
+    just bytes with a label in the data section. The action takes two
+    sources:
+
+    source[0]: Binary used to marshal Python sources
+    source[1]: Python script to marshal
+    '''
+
+    import subprocess
+
+    marshalled = subprocess.check_output(
+            [source[0].abspath, str(source[1])], env=env['ENV'])
+
+    compressed = zlib.compress(marshalled)
+    data = compressed
+    pysource = PySource.tnodes[source[1]]
+    sym = pysource.symname
+
+    code = code_formatter()
+    code('''\
+#include "sim/init.hh"
+
+namespace gem5
+{
+namespace
+{
+
+''')
+    blobToCpp(data, 'data_' + sym, code)
+    code('''\
+
+
+EmbeddedPython embedded_${sym}(
+    ${{c_str(pysource.arcname)}},
+    ${{c_str(pysource.abspath)}},
+    ${{c_str(pysource.modpath)}},
+    data_${sym},
+    ${{len(data)}},
+    ${{len(marshalled)}});
+
+} // anonymous namespace
+} // namespace gem5
+''')
+    code.write(str(target[0]))
+
 if main['USE_PYTHON']:
+    # Build a small helper that marshals the Python code using the same
+    # version of Python as gem5. This is in an unorthodox location to
+    # avoid building it for every variant.
+    py_marshal = marshal_env.Program('marshal', 'python/marshal.cc')[0]
+
     for source in PySource.all:
+        marshal_env.Command(source.cpp, [ py_marshal, source.tnode ],
+                        MakeAction(embedPyFile, Transform("EMBED PY")))
         Source(source.cpp, tags=source.tags, add_tags='python')
 
 ########################################################################
@@ -972,23 +1342,83 @@
 # a slightly different build environment.
 #
 
-env['SHOBJSUFFIX'] = '${OBJSUFFIX}s'
+# List of constructed environments to pass back to SConstruct
+date_source = Source('base/date.cc', tags=[])
 
-envs = {
-    'debug': env.Clone(ENV_LABEL='debug', OBJSUFFIX='.do'),
-    'opt': env.Clone(ENV_LABEL='opt', OBJSUFFIX='.o'),
-    'fast': env.Clone(ENV_LABEL='fast', OBJSUFFIX='.fo'),
-    'prof': env.Clone(ENV_LABEL='prof', OBJSUFFIX='.po'),
-    'perf': env.Clone(ENV_LABEL='perf', OBJSUFFIX='.gpo')
-}
+gem5_binary = Gem5('gem5')
 
-envs['debug'].Append(CPPDEFINES=['DEBUG', 'TRACING_ON=1'])
-envs['opt'].Append(CCFLAGS=['-g'], CPPDEFINES=['TRACING_ON=1'])
-envs['fast'].Append(CPPDEFINES=['NDEBUG', 'TRACING_ON=0'])
-envs['prof'].Append(CCFLAGS=['-g', '-pg'], LDFLAGS=['-pg'],
-        CPPDEFINES=['NDEBUG', 'TRACING_ON=0'])
-envs['perf'].Append(CCFLAGS=['-g'], CPPDEFINES=['NDEBUG', 'TRACING_ON=0'],
-        LDFLAGS=['-Wl,--no-as-needed', '-lprofiler', '-Wl,--as-needed'])
+# Function to create a new build environment as clone of current
+# environment 'env' with modified object suffix and optional stripped
+# binary.  Additional keyword arguments are appended to corresponding
+# build environment vars.
+def makeEnv(env, label, objsfx, strip=False, **kwargs):
+    # SCons doesn't know to append a library suffix when there is a '.' in the
+    # name.  Use '_' instead.
+    libname = 'gem5_' + label
+    secondary_exename = 'm5.' + label
+
+    new_env = env.Clone(OBJSUFFIX=objsfx, SHOBJSUFFIX=objsfx + 's')
+    new_env.Label = label
+    new_env.Append(**kwargs)
+
+    lib_sources = Source.all.with_tag(new_env, 'gem5 lib')
+
+    # Without Python, leave out all Python content from the library
+    # builds.  The option doesn't affect gem5 built as a program
+    if GetOption('without_python'):
+        lib_sources = lib_sources.without_tag(new_env, 'python')
+
+    static_objs = list([ s.static(new_env) for s in lib_sources ])
+    shared_objs = list([ s.shared(new_env) for s in lib_sources ])
+
+    static_date = date_source.static(new_env)
+    new_env.Depends(static_date, static_objs)
+    static_objs.extend(static_date)
+
+    shared_date = date_source.shared(new_env)
+    new_env.Depends(shared_date, shared_objs)
+    shared_objs.extend(shared_date)
+
+    main_objs = [ s.static(new_env) for s in
+            Source.all.with_tag(new_env, 'main') ]
+
+    # First make a library of everything but main() so other programs can
+    # link against m5.
+    static_lib = new_env.StaticLibrary(libname, static_objs)
+    shared_lib = new_env.SharedLibrary(libname, shared_objs)
+
+    # Keep track of the object files generated so far so Executables can
+    # include them.
+    new_env['STATIC_OBJS'] = static_objs
+    new_env['SHARED_OBJS'] = shared_objs
+    new_env['MAIN_OBJS'] = main_objs
+
+    new_env['STATIC_LIB'] = static_lib
+    new_env['SHARED_LIB'] = shared_lib
+
+    # Record some settings for building Executables.
+    new_env['EXE_SUFFIX'] = label
+    new_env['STRIP_EXES'] = strip
+
+    for cls in ExecutableMeta.all:
+        cls.declare_all(new_env)
+
+    new_env.M5Binary = File(gem5_binary.path(new_env))
+
+    new_env.Command(secondary_exename, new_env.M5Binary,
+            MakeAction('ln $SOURCE $TARGET', Transform("HARDLINK")))
+
+# Start out with the compiler flags common to all compilers,
+# i.e. they all use -g for opt and -g -pg for prof
+ccflags = {'debug' : [], 'opt' : ['-g'], 'fast' : [], 'prof' : ['-g', '-pg'],
+           'perf' : ['-g']}
+
+# Start out with the linker flags common to all linkers, i.e. -pg for
+# prof, and -lprofiler for perf. The -lprofile flag is surrounded by
+# no-as-needed and as-needed as the binutils linker is too clever and
+# simply doesn't link to the library otherwise.
+ldflags = {'debug' : [], 'opt' : [], 'fast' : [], 'prof' : ['-pg'],
+           'perf' : ['-Wl,--no-as-needed', '-lprofiler', '-Wl,--as-needed']}
 
 # For Link Time Optimization, the optimisation flags used to compile
 # individual files are decoupled from those used at link time
@@ -996,63 +1426,77 @@
 # to also update the linker flags based on the target.
 if env['GCC']:
     if sys.platform == 'sunos5':
-        envs['debug'].Append(CCFLAGS=['-gstabs+'])
+        ccflags['debug'] += ['-gstabs+']
     else:
-        envs['debug'].Append(CCFLAGS=['-ggdb3'])
-    envs['debug'].Append(LDFLAGS=['-O0'])
+        ccflags['debug'] += ['-ggdb3']
+    ldflags['debug'] += ['-O0']
     # opt, fast, prof and perf all share the same cc flags, also add
     # the optimization to the ldflags as LTO defers the optimization
     # to link time
     for target in ['opt', 'fast', 'prof', 'perf']:
-        envs[target].Append(CCFLAGS=['-O3', '${LTO_CCFLAGS}'])
-        envs[target].Append(LDFLAGS=['-O3', '${LTO_LDFLAGS}'])
+        ccflags[target] += ['-O3'] + env['LTO_CCFLAGS']
+        ldflags[target] += ['-O3'] + env['LTO_LDFLAGS']
 
 elif env['CLANG']:
-    envs['debug'].Append(CCFLAGS=['-g', '-O0'])
+    ccflags['debug'] += ['-g', '-O0']
     # opt, fast, prof and perf all share the same cc flags
     for target in ['opt', 'fast', 'prof', 'perf']:
-        envs[target].Append(CCFLAGS=['-O3'])
+        ccflags[target] += ['-O3']
 else:
     error('Unknown compiler, please fix compiler options')
 
 
-# To speed things up, we only instantiate the build environments we need. We
-# try to identify the needed environment for each target; if we can't, we fall
-# back on instantiating all the environments just to be safe.
-
-# A set of all the extensions on targets.
-target_exts = set({ os.path.splitext(t)[1] for t in BUILD_TARGETS })
-needed_envs = set()
-for ext in target_exts:
-    match = next((e for e in envs.values() if ext in (
-                    '.' + e['ENV_LABEL'], e['OBJSUFFIX'])), None)
-    if match:
-        needed_envs.add(match['ENV_LABEL'])
-    else:
-        needed_envs |= set(envs.keys())
-        break
-
-
-# SCons doesn't know to append a library suffix when there is a '.' in the
-# name. Use '_' instead.
-lib_name = 'gem5_${ENV_LABEL}'
-
-lib_filter = with_tag('gem5 lib')
-
-# Without Python, leave out all Python content from the library builds. The
-# option doesn't affect gem5 built as a program.
-if GetOption('without_python'):
-    lib_filter = lib_filter & without_tag('python')
-
-StaticLib(lib_name, lib_filter)
-SharedLib(lib_name, lib_filter)
-
-Executable('gem5', with_any_tags('gem5 lib', 'main'))
-
-
-# Function to create a new build environment as clone of current
-# environment 'env' with modified object suffix and optional stripped
-# binary.
-for env in (envs[e] for e in needed_envs):
-    for cls in TopLevelMeta.all:
-        cls.declare_all(env)
+# To speed things up, we only instantiate the build environments we
+# need.  We try to identify the needed environment for each target; if
+# we can't, we fall back on instantiating all the environments just to
+# be safe.
+target_types = ['debug', 'opt', 'fast', 'prof', 'perf']
+obj2target = {'do': 'debug', 'o': 'opt', 'fo': 'fast', 'po': 'prof',
+              'gpo' : 'perf'}
+
+def identifyTarget(t):
+    ext = t.split('.')[-1]
+    if ext in target_types:
+        return ext
+    if ext in obj2target:
+        return obj2target[ext]
+    return 'all'
+
+needed_envs = [identifyTarget(target) for target in BUILD_TARGETS]
+if 'all' in needed_envs:
+    needed_envs += target_types
+
+# Debug binary
+if 'debug' in needed_envs:
+    makeEnv(env, 'debug', '.do',
+            CCFLAGS = Split(ccflags['debug']),
+            CPPDEFINES = ['DEBUG', 'TRACING_ON=1'],
+            LINKFLAGS = Split(ldflags['debug']))
+
+# Optimized binary
+if 'opt' in needed_envs:
+    makeEnv(env, 'opt', '.o',
+            CCFLAGS = Split(ccflags['opt']),
+            CPPDEFINES = ['TRACING_ON=1'],
+            LINKFLAGS = Split(ldflags['opt']))
+
+# "Fast" binary
+if 'fast' in needed_envs:
+    makeEnv(env, 'fast', '.fo', strip = True,
+            CCFLAGS = Split(ccflags['fast']),
+            CPPDEFINES = ['NDEBUG', 'TRACING_ON=0'],
+            LINKFLAGS = Split(ldflags['fast']))
+
+# Profiled binary using gprof
+if 'prof' in needed_envs:
+    makeEnv(env, 'prof', '.po',
+            CCFLAGS = Split(ccflags['prof']),
+            CPPDEFINES = ['NDEBUG', 'TRACING_ON=0'],
+            LINKFLAGS = Split(ldflags['prof']))
+
+# Profiled binary using google-pprof
+if 'perf' in needed_envs:
+    makeEnv(env, 'perf', '.gpo',
+            CCFLAGS = Split(ccflags['perf']),
+            CPPDEFINES = ['NDEBUG', 'TRACING_ON=0'],
+            LINKFLAGS = Split(ldflags['perf']))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/aux_vector.hh gem5-SALAM/src/sim/aux_vector.hh
--- gem5/src/sim/aux_vector.hh	2024-02-22 18:25:43.959606433 -0600
+++ gem5-SALAM/src/sim/aux_vector.hh	2024-02-22 18:17:15.168944832 -0600
@@ -95,8 +95,8 @@
 } // namespace auxv
 
 #define GEM5_DEPRECATE_AT(NAME, name) M5_AT_##NAME \
-    [[deprecated("Replace M5_AT_" #NAME " with gem5::auxv::" #name)]] = \
-    gem5::auxv::name
+    GEM5_DEPRECATED_ENUM_VAL(\
+        "Replace M5_AT_" #NAME " with gem5::auxv::" #name) = gem5::auxv::name
 
 enum AuxiliaryVectorType
 {
@@ -119,8 +119,8 @@
     GEM5_DEPRECATE_AT(HWCAP, Hwcap),
     GEM5_DEPRECATE_AT(CLKTCK, Clktck),
     GEM5_DEPRECATE_AT(SECURE, Secure),
-    M5_BASE_PLATFORM [[deprecated(
-            "Replace M5_BASE_PLATFORM with gem5::auxv::BasePlatform")]] =
+    M5_BASE_PLATFORM GEM5_DEPRECATED_ENUM_VAL(
+            "Replace M5_BASE_PLATFORM with gem5::auxv::BasePlatform") =
         gem5::auxv::BasePlatform,
     GEM5_DEPRECATE_AT(RANDOM, Random),
     GEM5_DEPRECATE_AT(HWCAP2, Hwcap2),
@@ -131,8 +131,8 @@
 #undef GEM5_DEPRECATE_AT
 
 template <class IntType>
-using AuxVector [[deprecated(
-        "The AuxVector template is now in the gem5::auxv namespace.")]] =
+using AuxVector GEM5_DEPRECATED(
+        "The AuxVector template is now in the gem5::auxv namespace.") =
         gem5::auxv::AuxVector<IntType>;
 
 } // namespace gem5
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/byteswap.hh gem5-SALAM/src/sim/byteswap.hh
--- gem5/src/sim/byteswap.hh	2024-02-22 18:16:36.660743511 -0600
+++ gem5-SALAM/src/sim/byteswap.hh	2024-02-22 18:17:15.168944832 -0600
@@ -112,7 +112,7 @@
 
 template <typename T>
 inline std::enable_if_t<
-    sizeof(T) == 8 && std::is_convertible_v<T, uint64_t>, T>
+    sizeof(T) == 8 && std::is_convertible<T, uint64_t>::value, T>
 swap_byte(T x)
 {
     return swap_byte64((uint64_t)x);
@@ -120,7 +120,7 @@
 
 template <typename T>
 inline std::enable_if_t<
-    sizeof(T) == 4 && std::is_convertible_v<T, uint32_t>, T>
+    sizeof(T) == 4 && std::is_convertible<T, uint32_t>::value, T>
 swap_byte(T x)
 {
     return swap_byte32((uint32_t)x);
@@ -128,7 +128,7 @@
 
 template <typename T>
 inline std::enable_if_t<
-    sizeof(T) == 2 && std::is_convertible_v<T, uint16_t>, T>
+    sizeof(T) == 2 && std::is_convertible<T, uint16_t>::value, T>
 swap_byte(T x)
 {
     return swap_byte16((uint16_t)x);
@@ -136,7 +136,7 @@
 
 template <typename T>
 inline std::enable_if_t<
-    sizeof(T) == 1 && std::is_convertible_v<T, uint8_t>, T>
+    sizeof(T) == 1 && std::is_convertible<T, uint8_t>::value, T>
 swap_byte(T x)
 {
     return x;
@@ -145,10 +145,10 @@
 // Make the function visible in case we need to declare a version of it for
 // other types
 template <typename T>
-std::enable_if_t<std::is_same_v<T, vring_used_elem>, T>
+std::enable_if_t<std::is_same<T, vring_used_elem>::value, T>
 swap_byte(T v);
 template <typename T>
-std::enable_if_t<std::is_same_v<T, vring_desc>, T>
+std::enable_if_t<std::is_same<T, vring_desc>::value, T>
 swap_byte(T v);
 
 template <typename T, size_t N>
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/guest_abi/dispatch.hh gem5-SALAM/src/sim/guest_abi/dispatch.hh
--- gem5/src/sim/guest_abi/dispatch.hh	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/guest_abi/dispatch.hh	2024-02-22 18:17:15.172944853 -0600
@@ -100,7 +100,7 @@
 
 template <typename ABI, typename Ret, typename ...Args>
 static void
-dumpArgsFrom(std::ostream &os, [[maybe_unused]] ThreadContext *tc,
+dumpArgsFrom(std::ostream &os, GEM5_VAR_USED ThreadContext *tc,
         typename ABI::State &state)
 {
     int count = 0;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/guest_abi/layout.hh gem5-SALAM/src/sim/guest_abi/layout.hh
--- gem5/src/sim/guest_abi/layout.hh	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/guest_abi/layout.hh	2024-02-22 18:17:15.172944853 -0600
@@ -58,7 +58,7 @@
 
 template <typename ABI>
 struct StateInitializer<ABI, typename std::enable_if_t<
-    std::is_constructible_v<typename ABI::State, const ThreadContext *>>>
+    std::is_constructible<typename ABI::State, const ThreadContext *>::value>>
 {
     static typename ABI::State
     init(const ThreadContext *tc)
@@ -113,7 +113,7 @@
 
 template <typename ABI, typename ...Args>
 static inline void
-prepareForArguments([[maybe_unused]] ThreadContext *tc,
+prepareForArguments(GEM5_VAR_USED ThreadContext *tc,
         typename ABI::State &state)
 {
     GEM5_FOR_EACH_IN_PACK(Preparer<ABI, Argument, Args>::prepare(tc, state));
@@ -144,9 +144,8 @@
 
 template <typename ABI, typename Ret>
 struct ResultStorer<ABI, Ret, typename std::enable_if_t<
-    std::is_same_v<void (*)(ThreadContext *, const Ret &,
-                            typename ABI::State &),
-                 decltype(&Result<ABI, Ret>::store)>>>
+    std::is_same<void (*)(ThreadContext *, const Ret &, typename ABI::State &),
+                 decltype(&Result<ABI, Ret>::store)>::value>>
 {
     static void
     store(ThreadContext *tc, const Ret &ret, typename ABI::State &state)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/guest_abi/varargs.hh gem5-SALAM/src/sim/guest_abi/varargs.hh
--- gem5/src/sim/guest_abi/varargs.hh	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/guest_abi/varargs.hh	2024-02-22 18:17:15.172944853 -0600
@@ -176,9 +176,6 @@
 template <typename ...Types>
 struct IsVarArgs<VarArgs<Types...>> : public std::true_type {};
 
-template <typename T>
-constexpr bool IsVarArgsV = IsVarArgs<T>::value;
-
 template <typename ...Types>
 std::ostream &
 operator << (std::ostream &os, const VarArgs<Types...> &va)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/guest_abi.test.cc gem5-SALAM/src/sim/guest_abi.test.cc
--- gem5/src/sim/guest_abi.test.cc	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/guest_abi.test.cc	2024-02-22 18:17:15.172944853 -0600
@@ -116,7 +116,7 @@
 
 template <typename Arg>
 struct Argument<TestABI_1D, Arg,
-    typename std::enable_if_t<std::is_floating_point_v<Arg>>>
+    typename std::enable_if_t<std::is_floating_point<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, TestABI_1D::State &state)
@@ -137,7 +137,7 @@
 
 template <typename Ret>
 struct Result<TestABI_1D, Ret,
-    typename std::enable_if_t<std::is_floating_point_v<Ret>>>
+    typename std::enable_if_t<std::is_floating_point<Ret>::value>>
 {
     static void
     store(ThreadContext *tc, const Ret &ret)
@@ -191,7 +191,7 @@
 
 template <typename Arg>
 struct Argument<TestABI_2D, Arg,
-    typename std::enable_if_t<std::is_floating_point_v<Arg>>>
+    typename std::enable_if_t<std::is_floating_point<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, TestABI_2D::State &state)
@@ -212,7 +212,7 @@
 
 template <typename Ret>
 struct Result<TestABI_2D, Ret,
-    typename std::enable_if_t<std::is_floating_point_v<Ret>>>
+    typename std::enable_if_t<std::is_floating_point<Ret>::value>>
 {
     static void
     store(ThreadContext *tc, const Ret &ret)
@@ -399,11 +399,11 @@
 
 TEST(GuestABITest, isVarArgs)
 {
-    EXPECT_TRUE(guest_abi::IsVarArgsV<guest_abi::VarArgs<int>>);
-    EXPECT_FALSE(guest_abi::IsVarArgsV<int>);
-    EXPECT_FALSE(guest_abi::IsVarArgsV<double>);
+    EXPECT_TRUE(guest_abi::IsVarArgs<guest_abi::VarArgs<int>>::value);
+    EXPECT_FALSE(guest_abi::IsVarArgs<int>::value);
+    EXPECT_FALSE(guest_abi::IsVarArgs<double>::value);
     struct FooStruct {};
-    EXPECT_FALSE(guest_abi::IsVarArgsV<FooStruct>);
+    EXPECT_FALSE(guest_abi::IsVarArgs<FooStruct>::value);
     union FooUnion {};
-    EXPECT_FALSE(guest_abi::IsVarArgsV<FooUnion>);
+    EXPECT_FALSE(guest_abi::IsVarArgs<FooUnion>::value);
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/init.cc gem5-SALAM/src/sim/init.cc
--- gem5/src/sim/init.cc	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/init.cc	2024-02-22 18:17:15.172944853 -0600
@@ -75,9 +75,10 @@
 
 EmbeddedPython *EmbeddedPython::importer = NULL;
 PyObject *EmbeddedPython::importerModule = NULL;
-EmbeddedPython::EmbeddedPython(const char *abspath, const char *modpath,
-        const unsigned char *code, int zlen, int len)
-    : abspath(abspath), modpath(modpath), code(code), zlen(zlen), len(len)
+EmbeddedPython::EmbeddedPython(const char *filename, const char *abspath,
+    const char *modpath, const unsigned char *code, int zlen, int len)
+    : filename(filename), abspath(abspath), modpath(modpath), code(code),
+      zlen(zlen), len(len)
 {
     // if we've added the importer keep track of it because we need it
     // to bootstrap.
@@ -116,7 +117,7 @@
 {
     PyObject *code = getCode();
     PyObject *result = PyObject_CallMethod(importerModule, PyCC("add_module"),
-        PyCC("ssO"), abspath, modpath, code);
+        PyCC("sssO"), filename, abspath, modpath, code);
     if (!result) {
         PyErr_Print();
         return false;
@@ -142,10 +143,12 @@
 
     // Load the rest of the embedded python files into the embedded
     // python importer
-    for (auto *embedded: getList()) {
-        if (!embedded->addModule())
+    std::list<EmbeddedPython *>::iterator i = getList().begin();
+    std::list<EmbeddedPython *>::iterator end = getList().end();
+    for (; i != end; ++i)
+        if (!(*i)->addModule())
             return 1;
-    }
+
     return 0;
 }
 
@@ -188,7 +191,11 @@
     return objs;
 }
 
+#if PY_MAJOR_VERSION >= 3
 PyObject *
+#else
+void
+#endif
 EmbeddedPyBind::initAll()
 {
     std::list<EmbeddedPyBind *> pending;
@@ -223,7 +230,9 @@
         }
     }
 
+#if PY_MAJOR_VERSION >= 3
     return m_m5.ptr();
+#endif
 }
 
 void
@@ -259,6 +268,7 @@
 #endif
 
 
+#if PY_MAJOR_VERSION >= 3
     typedef std::unique_ptr<wchar_t[], decltype(&PyMem_RawFree)> WArgUPtr;
     std::vector<WArgUPtr> v_argv;
     std::vector<wchar_t *> vp_argv;
@@ -270,6 +280,9 @@
     }
 
     wchar_t **argv = vp_argv.data();
+#else
+    char **argv = _argv;
+#endif
 
     PySys_SetArgv(argc, argv);
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/init.hh gem5-SALAM/src/sim/init.hh
--- gem5/src/sim/init.hh	2024-02-22 18:25:43.967606475 -0600
+++ gem5-SALAM/src/sim/init.hh	2024-02-22 18:17:15.172944853 -0600
@@ -62,14 +62,15 @@
  */
 struct EmbeddedPython
 {
+    const char *filename;
     const char *abspath;
     const char *modpath;
     const uint8_t *code;
     int zlen;
     int len;
 
-    EmbeddedPython(const char *abspath, const char *modpath,
-            const uint8_t *code, int zlen, int len);
+    EmbeddedPython(const char *filename, const char *abspath,
+                   const char *modpath, const uint8_t *code, int zlen, int len);
 
     PyObject *getCode() const;
     bool addModule() const;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/process.cc gem5-SALAM/src/sim/process.cc
--- gem5/src/sim/process.cc	2024-02-22 18:25:43.971606496 -0600
+++ gem5-SALAM/src/sim/process.cc	2024-02-22 18:17:15.172944853 -0600
@@ -346,13 +346,13 @@
 
     // Read from old physical page.
     uint8_t buf_p[pTable->pageSize()];
-    SETranslatingPortProxy(old_tc).readBlob(vaddr, buf_p, sizeof(buf_p));
+    old_tc->getVirtProxy().readBlob(vaddr, buf_p, sizeof(buf_p));
 
     // Create new mapping in process address space by clobbering existing
     // mapping (if any existed) and then write to the new physical page.
     bool clobber = true;
     pTable->map(vaddr, new_paddr, sizeof(buf_p), clobber);
-    SETranslatingPortProxy(new_tc).writeBlob(vaddr, buf_p, sizeof(buf_p));
+    new_tc->getVirtProxy().writeBlob(vaddr, buf_p, sizeof(buf_p));
 }
 
 bool
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/proxy_ptr.hh gem5-SALAM/src/sim/proxy_ptr.hh
--- gem5/src/sim/proxy_ptr.hh	2024-02-22 18:25:43.971606496 -0600
+++ gem5-SALAM/src/sim/proxy_ptr.hh	2024-02-22 18:17:15.172944853 -0600
@@ -137,16 +137,16 @@
     using Type = T;
 
     template <typename ...Args,
-              typename std::enable_if_t<std::is_constructible_v<
-                  Proxy, Args&&...>, int> = 0>
+              typename std::enable_if_t<std::is_constructible<
+                  Proxy, Args&&...>::value, int> = 0>
     explicit ConstProxyPtr(Addr _ptr, Args&&... args) :
         proxy(std::make_shared<Proxy>(args...))
     {
         setAddr(_ptr);
     }
     template <typename ...Args,
-              typename std::enable_if_t<std::is_constructible_v<
-                  Proxy, Args&&...>, int> = 0>
+              typename std::enable_if_t<std::is_constructible<
+                  Proxy, Args&&...>::value, int> = 0>
     explicit ConstProxyPtr(Args&&... args) :
         proxy(std::make_shared<Proxy>(args...))
     {
@@ -154,7 +154,7 @@
     }
 
     template <typename O, typename Enabled=
-        typename std::enable_if_t<std::is_assignable_v<T *, O *>>>
+        typename std::enable_if_t<std::is_assignable<T *, O *>::value>>
     ConstProxyPtr(const ConstProxyPtr<O, Proxy> &other) :
         proxy(other.proxy), buffer(other.buffer)
     {}
@@ -174,14 +174,14 @@
     operator bool() const { return (bool)buffer; }
 
     template <typename A>
-    typename std::enable_if_t<std::is_integral_v<A>, CPP>
+    typename std::enable_if_t<std::is_integral<A>::value, CPP>
     operator + (A a) const
     {
         return CPP(addr() + a * sizeof(T), proxy);
     }
 
     template <typename A>
-    typename std::enable_if_t<std::is_integral_v<A>, CPP>
+    typename std::enable_if_t<std::is_integral<A>::value, CPP>
     operator - (A a) const
     {
         return CPP(addr() - a * sizeof(T), proxy);
@@ -228,7 +228,7 @@
 };
 
 template <typename T, typename Proxy, typename A>
-typename std::enable_if_t<std::is_integral_v<A>, ConstProxyPtr<T, Proxy>>
+typename std::enable_if_t<std::is_integral<A>::value, ConstProxyPtr<T, Proxy>>
 operator + (A a, const ConstProxyPtr<T, Proxy> &other)
 {
     return other + a;
@@ -245,17 +245,17 @@
 
   public:
     template <typename ...Args,
-              typename std::enable_if_t<std::is_constructible_v<
-                  Proxy, Args&&...>, int> = 0>
+              typename std::enable_if_t<std::is_constructible<
+                  Proxy, Args&&...>::value, int> = 0>
     explicit ProxyPtr(Addr _ptr, Args&&... args) : CPP(_ptr, args...) {}
     template <typename ...Args,
-              typename std::enable_if_t<std::is_constructible_v<
-                  Proxy, Args&&...>, int> = 0>
+              typename std::enable_if_t<std::is_constructible<
+                  Proxy, Args&&...>::value, int> = 0>
     explicit ProxyPtr(Args&&... args) : CPP(0, args...) {}
 
     template <typename O, typename Enabled=
-        typename std::enable_if_t<std::is_assignable_v<T *, O *> &&
-                                  !std::is_same_v<O, void>>>
+        typename std::enable_if_t<std::is_assignable<T *, O *>::value &&
+                                  !std::is_same<O, void>::value>>
     ProxyPtr(const ProxyPtr<O, Proxy> &other) : CPP(other) {}
 
     ProxyPtr(const PP &other) : CPP(other) {}
@@ -269,14 +269,14 @@
     }
 
     template <typename A>
-    typename std::enable_if_t<std::is_integral_v<A>, PP>
+    typename std::enable_if_t<std::is_integral<A>::value, PP>
     operator + (A a) const
     {
         return PP(this->addr() + a * sizeof(T), this->proxy);
     }
 
     template <typename A>
-    typename std::enable_if_t<std::is_integral_v<A>, PP>
+    typename std::enable_if_t<std::is_integral<A>::value, PP>
     operator - (A a) const
     {
         return PP(this->addr() - a * sizeof(T), this->proxy);
@@ -351,7 +351,7 @@
 };
 
 template <typename T, typename Proxy, typename A>
-typename std::enable_if_t<std::is_integral_v<A>, ProxyPtr<T, Proxy>>
+typename std::enable_if_t<std::is_integral<A>::value, ProxyPtr<T, Proxy>>
 operator + (A a, const ProxyPtr<T, Proxy> &other)
 {
     return other + a;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/proxy_ptr.test.cc gem5-SALAM/src/sim/proxy_ptr.test.cc
--- gem5/src/sim/proxy_ptr.test.cc	2024-02-22 18:25:43.971606496 -0600
+++ gem5-SALAM/src/sim/proxy_ptr.test.cc	2024-02-22 18:17:15.172944853 -0600
@@ -341,7 +341,7 @@
     EXPECT_EQ((const PtrType *)null, nullptr);
 
     // Dereferences.
-    is_same = std::is_same_v<decltype(*test_ptr1), const PtrType &>;
+    is_same = std::is_same<decltype(*test_ptr1), const PtrType &>::value;
     EXPECT_TRUE(is_same);
 
     store.store[0x100] = 0x55;
@@ -373,7 +373,7 @@
     EXPECT_EQ(struct_ptr->c, 0x33);
     EXPECT_EQ(struct_ptr->d, 0x44);
 
-    is_same = std::is_same_v<decltype((struct_ptr->a)), const uint8_t &>;
+    is_same = std::is_same<decltype((struct_ptr->a)), const uint8_t &>::value;
     EXPECT_TRUE(is_same);
 }
 
@@ -426,7 +426,7 @@
     EXPECT_EQ((const PtrType *)null, nullptr);
 
     // Dereferences.
-    is_same = std::is_same_v<decltype(*test_ptr1), PtrType &>;
+    is_same = std::is_same<decltype(*test_ptr1), PtrType &>::value;
     EXPECT_TRUE(is_same);
 
     // Flush test_ptr1, which has been conservatively marked as dirty.
@@ -461,7 +461,7 @@
     EXPECT_EQ(struct_ptr->c, 0x33);
     EXPECT_EQ(struct_ptr->d, 0x44);
 
-    is_same = std::is_same_v<decltype((struct_ptr->a)), uint8_t &>;
+    is_same = std::is_same<decltype((struct_ptr->a)), uint8_t &>::value;
     EXPECT_TRUE(is_same);
 }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/pseudo_inst.cc gem5-SALAM/src/sim/pseudo_inst.cc
--- gem5/src/sim/pseudo_inst.cc	2024-02-22 18:25:43.971606496 -0600
+++ gem5-SALAM/src/sim/pseudo_inst.cc	2024-02-22 18:17:15.172944853 -0600
@@ -59,10 +59,7 @@
 #include "debug/Quiesce.hh"
 #include "debug/WorkItems.hh"
 #include "dev/net/dist_iface.hh"
-#include "mem/se_translating_port_proxy.hh"
-#include "mem/translating_port_proxy.hh"
 #include "params/BaseCPU.hh"
-#include "sim/full_system.hh"
 #include "sim/process.hh"
 #include "sim/serialize.hh"
 #include "sim/sim_events.hh"
@@ -262,8 +259,7 @@
             addr, symbolAddr);
 
     std::string symbol;
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        readString(symbol, symbolAddr);
+    tc->getVirtProxy().readString(symbol, symbolAddr);
 
     DPRINTF(Loader, "Loaded symbol: %s @ %#llx\n", symbol, addr);
 
@@ -393,8 +389,7 @@
     }
 
     close(fd);
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        writeBlob(vaddr, buf, result);
+    tc->getVirtProxy().writeBlob(vaddr, buf, result);
     delete [] buf;
     return result;
 }
@@ -408,8 +403,7 @@
 
     // copy out target filename
     std::string filename;
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        readString(filename, filename_addr);
+    tc->getVirtProxy().readString(filename, filename_addr);
 
     OutputStream *out;
     if (offset == 0) {
@@ -434,8 +428,7 @@
 
     // copy out data and write to file
     char *buf = new char[len];
-    (FullSystem ? TranslatingPortProxy(tc) : SETranslatingPortProxy(tc)).
-        readBlob(vaddr, buf, len);
+    tc->getVirtProxy().readBlob(vaddr, buf, len);
     os->write(buf, len);
     if (os->fail() || os->bad())
         panic("Error while doing writefile!\n");
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/root.cc gem5-SALAM/src/sim/root.cc
--- gem5/src/sim/root.cc	2024-02-22 18:16:36.668743553 -0600
+++ gem5-SALAM/src/sim/root.cc	2024-02-22 18:17:15.172944853 -0600
@@ -42,6 +42,7 @@
 #include "base/hostinfo.hh"
 #include "base/logging.hh"
 #include "base/trace.hh"
+#include "config/the_isa.hh"
 #include "debug/TimeSync.hh"
 #include "sim/core.hh"
 #include "sim/cur_tick.hh"
@@ -205,6 +206,8 @@
 Root::serialize(CheckpointOut &cp) const
 {
     SERIALIZE_SCALAR(FullSystem);
+    std::string isa = THE_ISA_STR;
+    SERIALIZE_SCALAR(isa);
 
     globals.serializeSection(cp, "globals");
 }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/serialize_handlers.hh gem5-SALAM/src/sim/serialize_handlers.hh
--- gem5/src/sim/serialize_handlers.hh	2024-02-22 18:16:36.668743553 -0600
+++ gem5-SALAM/src/sim/serialize_handlers.hh	2024-02-22 18:17:15.172944853 -0600
@@ -130,14 +130,14 @@
 // Handle characters specially so that we print their value, not the character
 // they encode.
 template <class T>
-struct ShowParam<T, std::enable_if_t<std::is_same_v<char, T> ||
-                                     std::is_same_v<unsigned char, T> ||
-                                     std::is_same_v<signed char, T>>>
+struct ShowParam<T, std::enable_if_t<std::is_same<char, T>::value ||
+                                     std::is_same<unsigned char, T>::value ||
+                                     std::is_same<signed char, T>::value>>
 {
     static void
     show(std::ostream &os, const T &value)
     {
-        if (std::is_signed_v<T>)
+        if (std::is_signed<T>::value)
             os << (int)value;
         else
             os << (unsigned int)value;
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/serialize.hh gem5-SALAM/src/sim/serialize.hh
--- gem5/src/sim/serialize.hh	2024-02-22 18:16:36.668743553 -0600
+++ gem5-SALAM/src/sim/serialize.hh	2024-02-22 18:17:15.172944853 -0600
@@ -598,7 +598,7 @@
 #define UNSERIALIZE_ENUM(scalar)                        \
     do {                                                \
         int tmp;                                        \
-        ::gem5::paramIn(cp, #scalar, tmp);              \
+        paramIn(cp, #scalar, tmp);                      \
         scalar = static_cast<decltype(scalar)>(tmp);    \
     } while (0)
 
@@ -608,7 +608,7 @@
  * @ingroup api_serialize
  */
 #define SERIALIZE_ARRAY(member, size)           \
-        ::gem5::arrayParamOut(cp, #member, member, size)
+        arrayParamOut(cp, #member, member, size)
 
 /**
  * \def UNSERIALIZE_ARRAY(member, size)
@@ -616,7 +616,7 @@
  * @ingroup api_serialize
  */
 #define UNSERIALIZE_ARRAY(member, size)         \
-        ::gem5::arrayParamIn(cp, #member, member, size)
+        arrayParamIn(cp, #member, member, size)
 
 /**
  * \def SERIALIZE_CONTAINER(member)
@@ -624,7 +624,7 @@
  * @ingroup api_serialize
  */
 #define SERIALIZE_CONTAINER(member)             \
-        ::gem5::arrayParamOut(cp, #member, member)
+        arrayParamOut(cp, #member, member)
 
 /**
  * \def UNSERIALIZE_CONTAINER(member)
@@ -632,7 +632,7 @@
  * @ingroup api_serialize
  */
 #define UNSERIALIZE_CONTAINER(member)           \
-        ::gem5::arrayParamIn(cp, #member, member)
+        arrayParamIn(cp, #member, member)
 
 /**
  * \def SERIALIZE_OBJ(obj)
@@ -658,13 +658,13 @@
  * \def SERIALIZE_MAPPING(member, names, size)
  */
 #define SERIALIZE_MAPPING(member, names, size) \
-        ::gem5::mappingParamOut(cp, #member, names, member, size)
+        mappingParamOut(cp, #member, names, member, size)
 
 /**
  * \def UNSERIALIZE_MAPPING(member, names, size)
  */
 #define UNSERIALIZE_MAPPING(member, names, size) \
-        ::gem5::mappingParamIn(cp, #member, names, member, size)
+        mappingParamIn(cp, #member, names, member, size)
 
 } // namespace gem5
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/syscall_abi.hh gem5-SALAM/src/sim/syscall_abi.hh
--- gem5/src/sim/syscall_abi.hh	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/syscall_abi.hh	2024-02-22 18:17:15.176944873 -0600
@@ -62,9 +62,6 @@
         public std::true_type
     {};
 
-    template <typename T>
-    static constexpr bool IsWideV = IsWide<T>::value;
-
     // Read two registers and merge them into one value.
     static uint64_t
     mergeRegs(ThreadContext *tc, RegIndex low_idx, RegIndex high_idx)
@@ -83,8 +80,8 @@
 template <typename ABI, typename Arg>
 struct Argument<ABI, Arg,
     typename std::enable_if_t<
-        std::is_base_of_v<GenericSyscallABI64, ABI> &&
-        std::is_integral_v<Arg>>>
+        std::is_base_of<GenericSyscallABI64, ABI>::value &&
+        std::is_integral<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, typename ABI::State &state)
@@ -99,8 +96,8 @@
 // arguments aren't handled generically.
 template <typename ABI, typename Arg>
 struct Argument<ABI, Arg,
-    typename std::enable_if_t<std::is_integral_v<Arg> &&
-        !ABI::template IsWideV<Arg>>>
+    typename std::enable_if_t<std::is_integral<Arg>::value &&
+        !ABI::template IsWide<Arg>::value>>
 {
     static Arg
     get(ThreadContext *tc, typename ABI::State &state)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/syscall_emul.cc gem5-SALAM/src/sim/syscall_emul.cc
--- gem5/src/sim/syscall_emul.cc	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/syscall_emul.cc	2024-02-22 18:17:15.176944873 -0600
@@ -43,7 +43,6 @@
 #include "cpu/thread_context.hh"
 #include "dev/net/dist_iface.hh"
 #include "mem/page_table.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "sim/byteswap.hh"
 #include "sim/process.hh"
 #include "sim/proxy_ptr.hh"
@@ -97,7 +96,7 @@
     BufferArg ctidBuf(addr, sizeof(long));
     long *ctid = (long *)ctidBuf.bufferPtr();
     *ctid = 0;
-    ctidBuf.copyOut(SETranslatingPortProxy(tc));
+    ctidBuf.copyOut(tc->getVirtProxy());
 
     FutexMap &futex_map = tc->getSystemPtr()->futexMap;
     // Wake one of the waiting threads.
@@ -331,7 +330,7 @@
     // Assuming that the size of loff_t is 64 bits on the target platform
     BufferArg result_buf(result_ptr, sizeof(result));
     std::memcpy(result_buf.bufferPtr(), &result, sizeof(result));
-    result_buf.copyOut(SETranslatingPortProxy(tc));
+    result_buf.copyOut(tc->getVirtProxy());
     return 0;
 }
 
@@ -364,7 +363,7 @@
 {
     BufferArg name(buf_ptr, name_len);
     strncpy((char *)name.bufferPtr(), hostname, name_len);
-    name.copyOut(SETranslatingPortProxy(tc));
+    name.copyOut(tc->getVirtProxy());
     return 0;
 }
 
@@ -393,7 +392,7 @@
         }
     }
 
-    buf.copyOut(SETranslatingPortProxy(tc));
+    buf.copyOut(tc->getVirtProxy());
 
     return (result == -1) ? -errno : result;
 }
@@ -405,7 +404,7 @@
     std::string path;
     auto p = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -451,7 +450,7 @@
                   (char*)buf.bufferPtr());
     }
 
-    buf.copyOut(SETranslatingPortProxy(tc));
+    buf.copyOut(tc->getVirtProxy());
 
     return (result == -1) ? -errno : result;
 }
@@ -462,7 +461,7 @@
     std::string path;
     auto p = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     path = p->checkPathRedirect(path);
@@ -479,7 +478,7 @@
     std::string new_path;
     auto p = tc->getProcessPtr();
 
-    SETranslatingPortProxy virt_mem(tc);
+    auto &virt_mem = tc->getVirtProxy();
     if (!virt_mem.tryReadString(path, pathname))
         return -EFAULT;
     if (!virt_mem.tryReadString(new_path, new_pathname))
@@ -500,7 +499,7 @@
     std::string new_path;
     auto p = tc->getProcessPtr();
 
-    SETranslatingPortProxy virt_mem(tc);
+    auto &virt_mem = tc->getVirtProxy();
     if (!virt_mem.tryReadString(path, pathname))
         return -EFAULT;
     if (!virt_mem.tryReadString(new_path, new_pathname))
@@ -518,7 +517,7 @@
 {
     auto p = tc->getProcessPtr();
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     path = p->checkPathRedirect(path);
@@ -533,13 +532,12 @@
 {
     auto p = tc->getProcessPtr();
 
-    SETranslatingPortProxy proxy(tc);
     std::string old_name;
-    if (!proxy.tryReadString(old_name, oldpath))
+    if (!tc->getVirtProxy().tryReadString(old_name, oldpath))
         return -EFAULT;
 
     std::string new_name;
-    if (!proxy.tryReadString(new_name, newpath))
+    if (!tc->getVirtProxy().tryReadString(new_name, newpath))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -557,7 +555,7 @@
     std::string path;
     auto p = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -588,7 +586,7 @@
     auto process = tc->getProcessPtr();
     std::string path;
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -639,7 +637,7 @@
     std::string path;
     auto p = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     /* XXX endianess */
@@ -852,7 +850,7 @@
     int *buf_ptr = (int*)tgt_handle.bufferPtr();
     buf_ptr[0] = tgt_fds[0];
     buf_ptr[1] = tgt_fds[1];
-    tgt_handle.copyOut(SETranslatingPortProxy(tc));
+    tgt_handle.copyOut(tc->getVirtProxy());
 
     if (flags) {
         // pipe2 only uses O_NONBLOCK, O_CLOEXEC, and (O_NONBLOCK | O_CLOEXEC)
@@ -1012,7 +1010,7 @@
 {
     std::string path;
     auto p = tc->getProcessPtr();
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1028,7 +1026,7 @@
 {
     auto p = tc->getProcessPtr();
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     path = p->checkPathRedirect(path);
@@ -1042,7 +1040,7 @@
 {
     auto p = tc->getProcessPtr();
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     std::string tgt_cwd;
@@ -1069,7 +1067,7 @@
 {
     auto p = tc->getProcessPtr();
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     path = p->checkPathRedirect(path);
@@ -1116,7 +1114,7 @@
         traversed += host_reclen;
     }
 
-    buf_arg.copyOut(SETranslatingPortProxy(tc));
+    buf_arg.copyOut(tc->getVirtProxy());
     return status;
 }
 #endif
@@ -1179,7 +1177,7 @@
     auto p = tc->getProcessPtr();
 
     BufferArg bufSock(buf_ptr, addrlen);
-    bufSock.copyIn(SETranslatingPortProxy(tc));
+    bufSock.copyIn(tc->getVirtProxy());
 
     auto sfdp = std::dynamic_pointer_cast<SocketFDEntry>((*p->fds)[tgt_fd]);
     if (!sfdp)
@@ -1215,7 +1213,7 @@
     auto p = tc->getProcessPtr();
 
     BufferArg addr(buf_ptr, addrlen);
-    addr.copyIn(SETranslatingPortProxy(tc));
+    addr.copyIn(tc->getVirtProxy());
 
     auto sfdp = std::dynamic_pointer_cast<SocketFDEntry>((*p->fds)[tgt_fd]);
     if (!sfdp)
@@ -1244,21 +1242,19 @@
     // Reserve buffer space.
     BufferArg bufrBuf(bufrPtr, bufrLen);
 
-    SETranslatingPortProxy proxy(tc);
-
     // Get address length.
     socklen_t addrLen = 0;
     if (addrlenPtr != 0) {
         // Read address length parameter.
         BufferArg addrlenBuf(addrlenPtr, sizeof(socklen_t));
-        addrlenBuf.copyIn(proxy);
+        addrlenBuf.copyIn(tc->getVirtProxy());
         addrLen = *((socklen_t *)addrlenBuf.bufferPtr());
     }
 
     struct sockaddr sa, *sap = NULL;
     if (addrLen != 0) {
         BufferArg addrBuf(addrPtr, addrLen);
-        addrBuf.copyIn(proxy);
+        addrBuf.copyIn(tc->getVirtProxy());
         memcpy(&sa, (struct sockaddr *)addrBuf.bufferPtr(),
                sizeof(struct sockaddr));
         sap = &sa;
@@ -1272,20 +1268,20 @@
         return -errno;
 
     // Pass the received data out.
-    bufrBuf.copyOut(proxy);
+    bufrBuf.copyOut(tc->getVirtProxy());
 
     // Copy address to addrPtr and pass it on.
     if (sap != NULL) {
         BufferArg addrBuf(addrPtr, addrLen);
         memcpy(addrBuf.bufferPtr(), sap, sizeof(sa));
-        addrBuf.copyOut(proxy);
+        addrBuf.copyOut(tc->getVirtProxy());
     }
 
     // Copy len to addrlenPtr and pass it on.
     if (addrLen != 0) {
         BufferArg addrlenBuf(addrlenPtr, sizeof(socklen_t));
         *(socklen_t *)addrlenBuf.bufferPtr() = addrLen;
-        addrlenBuf.copyOut(proxy);
+        addrlenBuf.copyOut(tc->getVirtProxy());
     }
 
     return recvd_size;
@@ -1305,13 +1301,13 @@
 
     // Reserve buffer space.
     BufferArg bufrBuf(bufrPtr, bufrLen);
-    bufrBuf.copyIn(SETranslatingPortProxy(tc));
+    bufrBuf.copyIn(tc->getVirtProxy());
 
     struct sockaddr sa, *sap = nullptr;
     memset(&sa, 0, sizeof(sockaddr));
     if (addrLen != 0) {
         BufferArg addrBuf(addrPtr, addrLen);
-        addrBuf.copyIn(SETranslatingPortProxy(tc));
+        addrBuf.copyIn(tc->getVirtProxy());
         memcpy(&sa, (sockaddr*)addrBuf.bufferPtr(), addrLen);
         sap = &sa;
     }
@@ -1352,15 +1348,13 @@
       *  };
       */
 
-    SETranslatingPortProxy proxy(tc);
-
     /**
      * The plan with this system call is to replace all of the pointers in the
      * structure and the substructure with BufferArg class pointers. We will
      * copy every field from the structures into our BufferArg classes.
      */
     BufferArg msgBuf(msgPtr, sizeof(struct msghdr));
-    msgBuf.copyIn(proxy);
+    msgBuf.copyIn(tc->getVirtProxy());
     struct msghdr *msgHdr = (struct msghdr *)msgBuf.bufferPtr();
 
     /**
@@ -1380,7 +1374,7 @@
     if (msgHdr->msg_name) {
         /*1*/msg_name_phold = (Addr)msgHdr->msg_name;
         /*2*/nameBuf = new BufferArg(msg_name_phold, msgHdr->msg_namelen);
-        /*3*/nameBuf->copyIn(proxy);
+        /*3*/nameBuf->copyIn(tc->getVirtProxy());
         /*4*/msgHdr->msg_name = nameBuf->bufferPtr();
     }
 
@@ -1400,14 +1394,14 @@
         /*1*/msg_iov_phold = (Addr)msgHdr->msg_iov;
         /*2*/iovBuf = new BufferArg(msg_iov_phold, msgHdr->msg_iovlen *
                                     sizeof(struct iovec));
-        /*3*/iovBuf->copyIn(proxy);
+        /*3*/iovBuf->copyIn(tc->getVirtProxy());
         for (int i = 0; i < msgHdr->msg_iovlen; i++) {
             if (((struct iovec *)iovBuf->bufferPtr())[i].iov_base) {
                 /*1*/iovec_base_phold[i] =
                      (Addr)((struct iovec *)iovBuf->bufferPtr())[i].iov_base;
                 /*2*/iovecBuf[i] = new BufferArg(iovec_base_phold[i],
                      ((struct iovec *)iovBuf->bufferPtr())[i].iov_len);
-                /*3*/iovecBuf[i]->copyIn(proxy);
+                /*3*/iovecBuf[i]->copyIn(tc->getVirtProxy());
                 /*4*/((struct iovec *)iovBuf->bufferPtr())[i].iov_base =
                      iovecBuf[i]->bufferPtr();
             }
@@ -1423,7 +1417,7 @@
         /*1*/msg_control_phold = (Addr)msgHdr->msg_control;
         /*2*/controlBuf = new BufferArg(msg_control_phold,
                                         CMSG_ALIGN(msgHdr->msg_controllen));
-        /*3*/controlBuf->copyIn(proxy);
+        /*3*/controlBuf->copyIn(tc->getVirtProxy());
         /*4*/msgHdr->msg_control = controlBuf->bufferPtr();
     }
 
@@ -1433,7 +1427,7 @@
         return -errno;
 
     if (msgHdr->msg_name) {
-        nameBuf->copyOut(proxy);
+        nameBuf->copyOut(tc->getVirtProxy());
         delete(nameBuf);
         msgHdr->msg_name = (void *)msg_name_phold;
     }
@@ -1441,24 +1435,24 @@
     if (msgHdr->msg_iov) {
         for (int i = 0; i< msgHdr->msg_iovlen; i++) {
             if (((struct iovec *)iovBuf->bufferPtr())[i].iov_base) {
-                iovecBuf[i]->copyOut(proxy);
+                iovecBuf[i]->copyOut(tc->getVirtProxy());
                 delete iovecBuf[i];
                 ((struct iovec *)iovBuf->bufferPtr())[i].iov_base =
                 (void *)iovec_base_phold[i];
             }
         }
-        iovBuf->copyOut(proxy);
+        iovBuf->copyOut(tc->getVirtProxy());
         delete iovBuf;
         msgHdr->msg_iov = (struct iovec *)msg_iov_phold;
     }
 
     if (msgHdr->msg_control) {
-        controlBuf->copyOut(proxy);
+        controlBuf->copyOut(tc->getVirtProxy());
         delete(controlBuf);
         msgHdr->msg_control = (void *)msg_control_phold;
     }
 
-    msgBuf.copyOut(proxy);
+    msgBuf.copyOut(tc->getVirtProxy());
 
     return recvd_size;
 }
@@ -1474,13 +1468,11 @@
         return -EBADF;
     int sim_fd = sfdp->getSimFD();
 
-    SETranslatingPortProxy proxy(tc);
-
     /**
      * Reserve buffer space.
      */
     BufferArg msgBuf(msgPtr, sizeof(struct msghdr));
-    msgBuf.copyIn(proxy);
+    msgBuf.copyIn(tc->getVirtProxy());
     struct msghdr msgHdr = *((struct msghdr *)msgBuf.bufferPtr());
 
     /**
@@ -1489,7 +1481,7 @@
      */
     struct iovec *iovPtr = msgHdr.msg_iov;
     BufferArg iovBuf((Addr)iovPtr, sizeof(struct iovec) * msgHdr.msg_iovlen);
-    iovBuf.copyIn(proxy);
+    iovBuf.copyIn(tc->getVirtProxy());
     struct iovec *iov = (struct iovec *)iovBuf.bufferPtr();
     msgHdr.msg_iov = iov;
 
@@ -1509,7 +1501,7 @@
     for (int iovIndex = 0 ; iovIndex < msgHdr.msg_iovlen; iovIndex++) {
         Addr basePtr = (Addr) iov[iovIndex].iov_base;
         bufferArray[iovIndex] = new BufferArg(basePtr, iov[iovIndex].iov_len);
-        bufferArray[iovIndex]->copyIn(proxy);
+        bufferArray[iovIndex]->copyIn(tc->getVirtProxy());
         iov[iovIndex].iov_base = bufferArray[iovIndex]->bufferPtr();
     }
 
@@ -1559,17 +1551,15 @@
     if (status == -1)
         return -errno;
 
-    SETranslatingPortProxy proxy(tc);
-
     // copy val to valPtr and pass it on
     BufferArg valBuf(valPtr, sizeof(val));
     memcpy(valBuf.bufferPtr(), &val, sizeof(val));
-    valBuf.copyOut(proxy);
+    valBuf.copyOut(tc->getVirtProxy());
 
     // copy len to lenPtr and pass  it on
     BufferArg lenBuf(lenPtr, sizeof(len));
     memcpy(lenBuf.bufferPtr(), &len, sizeof(len));
-    lenBuf.copyOut(proxy);
+    lenBuf.copyOut(tc->getVirtProxy());
 
     return status;
 }
@@ -1588,11 +1578,9 @@
     // lenPtr is an in-out paramenter:
     // sending the address length in, conveying the final length out
 
-    SETranslatingPortProxy proxy(tc);
-
     // Read in the value of len from the passed pointer.
     BufferArg lenBuf(lenPtr, sizeof(socklen_t));
-    lenBuf.copyIn(proxy);
+    lenBuf.copyIn(tc->getVirtProxy());
     socklen_t len = *(socklen_t *)lenBuf.bufferPtr();
 
     struct sockaddr sa;
@@ -1604,11 +1592,11 @@
     // Copy address to addrPtr and pass it on.
     BufferArg addrBuf(addrPtr, sizeof(sa));
     memcpy(addrBuf.bufferPtr(), &sa, sizeof(sa));
-    addrBuf.copyOut(proxy);
+    addrBuf.copyOut(tc->getVirtProxy());
 
     // Copy len to lenPtr and pass  it on.
     *(socklen_t *)lenBuf.bufferPtr() = len;
-    lenBuf.copyOut(proxy);
+    lenBuf.copyOut(tc->getVirtProxy());
 
     return status;
 }
@@ -1624,10 +1612,8 @@
         return -EBADF;
     int sim_fd = sfdp->getSimFD();
 
-    SETranslatingPortProxy proxy(tc);
-
     BufferArg bufAddrlen(addrlenPtr, sizeof(unsigned));
-    bufAddrlen.copyIn(proxy);
+    bufAddrlen.copyIn(tc->getVirtProxy());
     BufferArg bufSock(sockAddrPtr, *(unsigned *)bufAddrlen.bufferPtr());
 
     int retval = getpeername(sim_fd,
@@ -1635,8 +1621,8 @@
                              (unsigned *)bufAddrlen.bufferPtr());
 
     if (retval != -1) {
-        bufSock.copyOut(proxy);
-        bufAddrlen.copyOut(proxy);
+        bufSock.copyOut(tc->getVirtProxy());
+        bufAddrlen.copyOut(tc->getVirtProxy());
     }
 
     return (retval == -1) ? -errno : retval;
@@ -1650,7 +1636,7 @@
     auto p = tc->getProcessPtr();
 
     BufferArg valBuf(valPtr, len);
-    valBuf.copyIn(SETranslatingPortProxy(tc));
+    valBuf.copyIn(tc->getVirtProxy());
 
     auto sfdp = std::dynamic_pointer_cast<SocketFDEntry>((*p->fds)[tgt_fd]);
     if (!sfdp)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/syscall_emul.hh gem5-SALAM/src/sim/syscall_emul.hh
--- gem5/src/sim/syscall_emul.hh	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/syscall_emul.hh	2024-02-22 18:17:15.176944873 -0600
@@ -97,7 +97,6 @@
 #include "cpu/thread_context.hh"
 #include "kern/linux/linux.hh"
 #include "mem/page_table.hh"
-#include "mem/se_translating_port_proxy.hh"
 #include "params/Process.hh"
 #include "sim/emul_driver.hh"
 #include "sim/futex_map.hh"
@@ -394,7 +393,7 @@
     if (OS::TGT_FUTEX_WAIT == op || OS::TGT_FUTEX_WAIT_BITSET == op) {
         // Ensure futex system call accessed atomically.
         BufferArg buf(uaddr, sizeof(int));
-        buf.copyIn(SETranslatingPortProxy(tc));
+        buf.copyIn(tc->getVirtProxy());
         int mem_val = *(int*)buf.bufferPtr();
 
         /*
@@ -421,7 +420,7 @@
 
         // Ensure futex system call accessed atomically.
         BufferArg buf(uaddr, sizeof(int));
-        buf.copyIn(SETranslatingPortProxy(tc));
+        buf.copyIn(tc->getVirtProxy());
         int mem_val = *(int*)buf.bufferPtr();
         /*
          * For CMP_REQUEUE, the whole operation is only started only if
@@ -454,7 +453,7 @@
          */
         // get value from simulated-space
         BufferArg buf(uaddr2, sizeof(int));
-        buf.copyIn(SETranslatingPortProxy(tc));
+        buf.copyIn(tc->getVirtProxy());
         int oldval = *(int*)buf.bufferPtr();
         int newval = oldval;
         // extract op, oparg, cmp, cmparg from val3
@@ -478,7 +477,7 @@
             newval ^= wake_oparg;
         // copy updated value back to simulated-space
         *(int*)buf.bufferPtr() = newval;
-        buf.copyOut(SETranslatingPortProxy(tc));
+        buf.copyOut(tc->getVirtProxy());
         // perform the first wake-up
         int woken1 = futex_map.wakeup(uaddr, process->tgid(), val);
         int woken2 = 0;
@@ -703,20 +702,20 @@
         switch (req) {
           case SIOCGIFCONF: {
             BufferArg conf_arg(addr, sizeof(ifconf));
-            conf_arg.copyIn(SETranslatingPortProxy(tc));
+            conf_arg.copyIn(tc->getVirtProxy());
 
             ifconf *conf = (ifconf*)conf_arg.bufferPtr();
             Addr ifc_buf_addr = (Addr)conf->ifc_buf;
             BufferArg ifc_buf_arg(ifc_buf_addr, conf->ifc_len);
-            ifc_buf_arg.copyIn(SETranslatingPortProxy(tc));
+            ifc_buf_arg.copyIn(tc->getVirtProxy());
 
             conf->ifc_buf = (char*)ifc_buf_arg.bufferPtr();
 
             status = ioctl(sfdp->getSimFD(), req, conf_arg.bufferPtr());
             if (status != -1) {
                 conf->ifc_buf = (char*)ifc_buf_addr;
-                ifc_buf_arg.copyOut(SETranslatingPortProxy(tc));
-                conf_arg.copyOut(SETranslatingPortProxy(tc));
+                ifc_buf_arg.copyOut(tc->getVirtProxy());
+                conf_arg.copyOut(tc->getVirtProxy());
             }
 
             return status;
@@ -732,11 +731,11 @@
 #endif
           case SIOCGIFMTU: {
             BufferArg req_arg(addr, sizeof(ifreq));
-            req_arg.copyIn(SETranslatingPortProxy(tc));
+            req_arg.copyIn(tc->getVirtProxy());
 
             status = ioctl(sfdp->getSimFD(), req, req_arg.bufferPtr());
             if (status != -1)
-                req_arg.copyOut(SETranslatingPortProxy(tc));
+                req_arg.copyOut(tc->getVirtProxy());
             return status;
           }
         }
@@ -764,7 +763,7 @@
      * string from that memory space into the host's working memory space.
      */
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
 #ifdef __CYGWIN32__
@@ -982,7 +981,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     mode_t hostMode = 0;
@@ -1009,7 +1008,7 @@
     auto p = tc->getProcessPtr();
 
     BufferArg fdsBuf(fdsPtr, sizeof(struct pollfd) * nfds);
-    fdsBuf.copyIn(SETranslatingPortProxy(tc));
+    fdsBuf.copyIn(tc->getVirtProxy());
 
     /**
      * Record the target file descriptors in a local variable. We need to
@@ -1069,7 +1068,7 @@
      * Copy out the pollfd struct because the host may have updated fields
      * in the structure.
      */
-    fdsBuf.copyOut(SETranslatingPortProxy(tc));
+    fdsBuf.copyOut(tc->getVirtProxy());
 
     return status;
 }
@@ -1185,7 +1184,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1212,7 +1211,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1247,7 +1246,7 @@
         warn("fstatat64: first argument not AT_FDCWD; unlikely to work");
 
     std::string path;
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1309,7 +1308,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1335,7 +1334,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1393,7 +1392,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     // Adjust path for cwd and redirection
@@ -1482,7 +1481,7 @@
         BufferArg ptidBuf(ptidPtr, sizeof(long));
         long *ptid = (long *)ptidBuf.bufferPtr();
         *ptid = cp->pid();
-        ptidBuf.copyOut(SETranslatingPortProxy(tc));
+        ptidBuf.copyOut(tc->getVirtProxy());
     }
 
     if (flags & OS::TGT_CLONE_THREAD) {
@@ -1505,7 +1504,7 @@
         BufferArg ctidBuf(ctidPtr, sizeof(long));
         long *ctid = (long *)ctidBuf.bufferPtr();
         *ctid = cp->pid();
-        ctidBuf.copyOut(SETranslatingPortProxy(ctc));
+        ctidBuf.copyOut(ctc->getVirtProxy());
     }
 
     if (flags & OS::TGT_CLONE_CHILD_CLEARTID)
@@ -1575,7 +1574,7 @@
         return -EBADF;
     int sim_fd = ffdp->getSimFD();
 
-    SETranslatingPortProxy prox(tc);
+    PortProxy &prox = tc->getVirtProxy();
     typename OS::tgt_iovec tiov[count];
     struct iovec hiov[count];
     for (size_t i = 0; i < count; ++i) {
@@ -1612,7 +1611,7 @@
         return -EBADF;
     int sim_fd = hbfdp->getSimFD();
 
-    SETranslatingPortProxy prox(tc);
+    PortProxy &prox = tc->getVirtProxy();
     struct iovec hiov[count];
     for (size_t i = 0; i < count; ++i) {
         typename OS::tgt_iovec tiov;
@@ -1792,7 +1791,7 @@
 
     int bytes_read = pread(sim_fd, bufArg.bufferPtr(), nbytes, offset);
 
-    bufArg.copyOut(SETranslatingPortProxy(tc));
+    bufArg.copyOut(tc->getVirtProxy());
 
     return (bytes_read == -1) ? -errno : bytes_read;
 }
@@ -1810,7 +1809,7 @@
     int sim_fd = ffdp->getSimFD();
 
     BufferArg bufArg(bufPtr, nbytes);
-    bufArg.copyIn(SETranslatingPortProxy(tc));
+    bufArg.copyIn(tc->getVirtProxy());
 
     int bytes_written = pwrite(sim_fd, bufArg.bufferPtr(), nbytes, offset);
 
@@ -1952,7 +1951,7 @@
     std::string path;
     auto process = tc->getProcessPtr();
 
-    if (!SETranslatingPortProxy(tc).tryReadString(path, pathname))
+    if (!tc->getVirtProxy().tryReadString(path, pathname))
         return -EFAULT;
 
     struct timeval hostTimeval[2];
@@ -1980,7 +1979,7 @@
     auto p = tc->getProcessPtr();
 
     std::string path;
-    SETranslatingPortProxy mem_proxy(tc);
+    PortProxy & mem_proxy = tc->getVirtProxy();
     if (!mem_proxy.tryReadString(path, pathname))
         return -EFAULT;
 
@@ -2148,10 +2147,10 @@
     getElapsedTimeMicro(sec, usec);
     sec += seconds_since_epoch;
 
-    SETranslatingPortProxy p(tc);
     if (taddr != 0) {
         typename OS::time_t t = sec;
         t = htog(t, OS::byteOrder);
+        PortProxy &p = tc->getVirtProxy();
         p.writeBlob(taddr, &t, (int)sizeof(typename OS::time_t));
     }
     return sec;
@@ -2236,7 +2235,7 @@
     fds[0] = p->fds->allocFD(sfdp1);
     auto sfdp2 = std::make_shared<SocketFDEntry>(fds[1], domain, type, prot);
     fds[1] = p->fds->allocFD(sfdp2);
-    svBuf.copyOut(SETranslatingPortProxy(tc));
+    svBuf.copyOut(tc->getVirtProxy());
 
     return status;
 }
@@ -2437,7 +2436,7 @@
     int bytes_read = read(sim_fd, buf_arg.bufferPtr(), nbytes);
 
     if (bytes_read > 0)
-        buf_arg.copyOut(SETranslatingPortProxy(tc));
+        buf_arg.copyOut(tc->getVirtProxy());
 
     return (bytes_read == -1) ? -errno : bytes_read;
 }
@@ -2455,7 +2454,7 @@
     int sim_fd = hbfdp->getSimFD();
 
     BufferArg buf_arg(buf_ptr, nbytes);
-    buf_arg.copyIn(SETranslatingPortProxy(tc));
+    buf_arg.copyIn(tc->getVirtProxy());
 
     struct pollfd pfd;
     pfd.fd = sim_fd;
@@ -2531,7 +2530,7 @@
     const int EXITED = 0;
     BufferArg statusBuf(statPtr, sizeof(int));
     *(int *)statusBuf.bufferPtr() = EXITED;
-    statusBuf.copyOut(SETranslatingPortProxy(tc));
+    statusBuf.copyOut(tc->getVirtProxy());
 
     // Return the child PID.
     pid_t retval = iter->sender->pid();
@@ -2571,14 +2570,14 @@
 
     if (lenPtr) {
         lenBufPtr = new BufferArg(lenPtr, sizeof(socklen_t));
-        lenBufPtr->copyIn(SETranslatingPortProxy(tc));
+        lenBufPtr->copyIn(tc->getVirtProxy());
         memcpy(&addrLen, (socklen_t *)lenBufPtr->bufferPtr(),
                sizeof(socklen_t));
     }
 
     if (addrPtr) {
         addrBufPtr = new BufferArg(addrPtr, sizeof(struct sockaddr));
-        addrBufPtr->copyIn(SETranslatingPortProxy(tc));
+        addrBufPtr->copyIn(tc->getVirtProxy());
         memcpy(&sa, (struct sockaddr *)addrBufPtr->bufferPtr(),
                sizeof(struct sockaddr));
     }
@@ -2590,13 +2589,13 @@
 
     if (addrPtr) {
         memcpy(addrBufPtr->bufferPtr(), &sa, sizeof(sa));
-        addrBufPtr->copyOut(SETranslatingPortProxy(tc));
+        addrBufPtr->copyOut(tc->getVirtProxy());
         delete(addrBufPtr);
     }
 
     if (lenPtr) {
         *(socklen_t *)lenBufPtr->bufferPtr() = addrLen;
-        lenBufPtr->copyOut(SETranslatingPortProxy(tc));
+        lenBufPtr->copyOut(tc->getVirtProxy());
         delete(lenBufPtr);
     }
 
@@ -2642,13 +2641,12 @@
     if (cpusetsize < CPU_ALLOC_SIZE(tc->getSystemPtr()->threads.size()))
         return -EINVAL;
 
-    SETranslatingPortProxy proxy(tc);
     BufferArg maskBuf(cpu_set_mask, cpusetsize);
-    maskBuf.copyIn(proxy);
+    maskBuf.copyIn(tc->getVirtProxy());
     for (int i = 0; i < tc->getSystemPtr()->threads.size(); i++) {
         CPU_SET(i, (cpu_set_t *)maskBuf.bufferPtr());
     }
-    maskBuf.copyOut(proxy);
+    maskBuf.copyOut(tc->getVirtProxy());
     return CPU_ALLOC_SIZE(tc->getSystemPtr()->threads.size());
 #else
     warnUnsupportedOS("sched_getaffinity");
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/system.cc gem5-SALAM/src/sim/system.cc
--- gem5/src/sim/system.cc	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/system.cc	2024-02-22 18:17:15.176944873 -0600
@@ -54,7 +54,7 @@
 #include "cpu/kvm/base.hh"
 #include "cpu/kvm/vm.hh"
 #endif
-#if !IS_NULL_ISA
+#if THE_ISA != NULL_ISA
 #include "cpu/base.hh"
 #endif
 #include "cpu/thread_context.hh"
@@ -77,7 +77,7 @@
 void
 System::Threads::Thread::resume()
 {
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     DPRINTFS(Quiesce, context->getCpuPtr(), "activating\n");
     context->activate();
 #   endif
@@ -133,7 +133,7 @@
 {
     auto &t = thread(id);
     panic_if(!t.context, "Can't replace a context which doesn't exist.");
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     if (t.resumeEvent->scheduled()) {
         Tick when = t.resumeEvent->when();
         t.context->getCpuPtr()->deschedule(t.resumeEvent);
@@ -171,8 +171,8 @@
 System::Threads::quiesce(ContextID id)
 {
     auto &t = thread(id);
-#   if !IS_NULL_ISA
-    [[maybe_unused]] BaseCPU *cpu = t.context->getCpuPtr();
+#   if THE_ISA != NULL_ISA
+    GEM5_VAR_USED BaseCPU *cpu = t.context->getCpuPtr();
     DPRINTFS(Quiesce, cpu, "quiesce()\n");
 #   endif
     t.quiesce();
@@ -181,7 +181,7 @@
 void
 System::Threads::quiesceTick(ContextID id, Tick when)
 {
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     auto &t = thread(id);
     BaseCPU *cpu = t.context->getCpuPtr();
 
@@ -250,7 +250,7 @@
     }
 
     // Get the generic system requestor IDs
-    [[maybe_unused]] RequestorID tmp_id;
+    GEM5_VAR_USED RequestorID tmp_id;
     tmp_id = getRequestorId(this, "writebacks");
     assert(tmp_id == Request::wbRequestorId);
     tmp_id = getRequestorId(this, "functional");
@@ -449,7 +449,7 @@
                 !when || !t.resumeEvent) {
             continue;
         }
-#       if !IS_NULL_ISA
+#       if THE_ISA != NULL_ISA
         t.context->getCpuPtr()->schedule(t.resumeEvent, when);
 #       endif
     }
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/system.hh gem5-SALAM/src/sim/system.hh
--- gem5/src/sim/system.hh	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/system.hh	2024-02-22 18:17:15.176944873 -0600
@@ -390,6 +390,11 @@
     AddrRangeList getShadowRomRanges() const { return ShadowRomRanges; }
 
     /**
+     * Get the architecture.
+     */
+    Arch getArch() const { return Arch::TheISA; }
+
+    /**
      * Get the guest byte order.
      */
     ByteOrder
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/voltage_domain.cc gem5-SALAM/src/sim/voltage_domain.cc
--- gem5/src/sim/voltage_domain.cc	2024-02-22 18:16:36.672743574 -0600
+++ gem5-SALAM/src/sim/voltage_domain.cc	2024-02-22 18:17:15.176944873 -0600
@@ -64,9 +64,9 @@
 void
 VoltageDomain::perfLevel(PerfLevel perf_level)
 {
-    gem5_assert(perf_level < voltageOpPoints.size(),
-                "DVFS: Requested voltage ID %d is outside the known "\
-                "range for domain %s.\n", perf_level, name());
+    chatty_assert(perf_level < voltageOpPoints.size(),
+                  "DVFS: Requested voltage ID %d is outside the known "\
+                  "range for domain %s.\n", perf_level, name());
 
     if (perf_level == _perfLevel) {
         // Silently ignore identical overwrites
@@ -88,12 +88,11 @@
     // Find the highest requested performance level and update the voltage
     // domain with it
     PerfLevel perf_max = (PerfLevel)-1;
-    for (auto dit = srcClockChildren.begin(); dit != srcClockChildren.end();
-            ++dit) {
+    for (auto dit = srcClockChildren.begin(); dit != srcClockChildren.end(); ++dit) {
         SrcClockDomain* d = *dit;
-        gem5_assert(d->voltageDomain() == this, "DVFS: Clock domain %s "\
-                    "(id: %d) should not be registered with voltage domain "\
-                    "%s\n", d->name(), d->domainID(), name());
+        chatty_assert(d->voltageDomain() == this, "DVFS: Clock domain %s "\
+                      "(id: %d) should not be registered with voltage domain "\
+                      "%s\n", d->name(), d->domainID(), name());
 
         PerfLevel perf = d->perfLevel();
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/voltage_domain.hh gem5-SALAM/src/sim/voltage_domain.hh
--- gem5/src/sim/voltage_domain.hh	2024-02-22 18:16:36.672743574 -0600
+++ gem5-SALAM/src/sim/voltage_domain.hh	2024-02-22 18:17:15.176944873 -0600
@@ -77,10 +77,10 @@
      */
     double voltage(PerfLevel perf_level) const
     {
-        gem5_assert(perf_level < numVoltages(), "VoltageDomain %s "\
-                    "request for voltage perf level %u is outside "\
-                    "of numVoltages %u", name(), perf_level,
-                    numVoltages());
+        chatty_assert(perf_level < numVoltages(), "VoltageDomain %s "\
+                      "request for voltage perf level %u is outside "\
+                      "of numVoltages %u", name(), perf_level,
+                      numVoltages());
         return voltageOpPoints[perf_level];
     }
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/sim/workload.cc gem5-SALAM/src/sim/workload.cc
--- gem5/src/sim/workload.cc	2024-02-22 18:25:43.975606516 -0600
+++ gem5-SALAM/src/sim/workload.cc	2024-02-22 18:17:15.176944873 -0600
@@ -44,7 +44,7 @@
     panic_if(!success, "Failed to add thread context %d.",
             tc->contextId());
 
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     if (gdb)
         gdb->addThreadContext(tc);
 #   endif
@@ -66,7 +66,7 @@
         panic_if(!success,
                 "Failed to insert replacement thread context %d.", id);
 
-#       if !IS_NULL_ISA
+#       if THE_ISA != NULL_ISA
         if (gdb)
             gdb->replaceThreadContext(tc);
 #       endif
@@ -79,7 +79,7 @@
 bool
 Workload::trapToGdb(int signal, ContextID ctx_id)
 {
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     if (gdb) {
         gdb->trap(ctx_id, signal);
         return true;
@@ -93,7 +93,7 @@
 {
     SimObject::startup();
 
-#   if !IS_NULL_ISA
+#   if THE_ISA != NULL_ISA
     // Now that we're about to start simulation, wait for GDB connections if
     // requested.
     if (gdb && waitForRemoteGDB) {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/systemc/dt/fx/scfx_rep.cc gem5-SALAM/src/systemc/dt/fx/scfx_rep.cc
--- gem5/src/systemc/dt/fx/scfx_rep.cc	2024-02-22 18:16:36.676743594 -0600
+++ gem5-SALAM/src/systemc/dt/fx/scfx_rep.cc	2024-02-22 18:17:15.180944894 -0600
@@ -549,10 +549,10 @@
                 switch (*s) {
                   case '1':
                     set_bin(j);
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '0':
                     j--;
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '.':
                     break;
                   default:
@@ -587,10 +587,10 @@
                   case '7': case '6': case '5': case '4':
                   case '3': case '2': case '1':
                     set_oct(j, *s - '0');
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '0':
                     j -= 3;
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '.':
                     break;
                   default:
@@ -677,10 +677,10 @@
                   case '9': case '8': case '7': case '6': case '5':
                   case '4': case '3': case '2': case '1':
                     set_hex(j, *s - '0');
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '0':
                     j -= 4;
-                    [[fallthrough]];
+                    GEM5_FALLTHROUGH;
                   case '.':
                     break;
                   default:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/src/systemc/ext/core/sc_module.hh gem5-SALAM/src/systemc/ext/core/sc_module.hh
--- gem5/src/systemc/ext/core/sc_module.hh	2024-02-22 18:16:36.680743615 -0600
+++ gem5-SALAM/src/systemc/ext/core/sc_module.hh	2024-02-22 18:17:15.184944915 -0600
@@ -31,6 +31,7 @@
 #include <string>
 #include <vector>
 
+#include "mem/port.hh"
 #include "sc_object.hh"
 #include "sc_process_handle.hh"
 #include "sc_sensitive.hh"
@@ -57,13 +58,9 @@
 
 } // namespace sc_gem5
 
-namespace gem5
-{
-
+// Gem5 prototype
 class Port;
 
-} // namespace gem5
-
 namespace sc_core
 {
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/system/arm/dt/armv7.dts gem5-SALAM/system/arm/dt/armv7.dts
--- gem5/system/arm/dt/armv7.dts	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/system/arm/dt/armv7.dts	2024-02-22 18:17:15.400946045 -0600
@@ -0,0 +1,105 @@
+/*
+ * Copyright (c) 2015-2016, 2019 ARM Limited
+ * All rights reserved
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/dts-v1/;
+
+/include/ CONF_PLATFORM
+
+#define CPU(n) \
+	cpu@ ## n { \
+		device_type = "cpu"; \
+		compatible = "gem5,arm", "arm,cortex-a15"; \
+		reg = < n >; \
+	};
+
+/ {
+	model = "V2P-CA15";
+	compatible = "arm,vexpress,v2p-ca15,tc1", "arm,vexpress,v2p-ca15", "arm,vexpress";
+
+	memory@80000000 {
+		device_type = "memory";
+		reg = <0 0x80000000 0x4 0x00000000>;
+	};
+
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		#if CONF_CPUS > 0
+		CPU(0)
+		#endif
+		#if CONF_CPUS > 1
+		CPU(1)
+		#endif
+		#if CONF_CPUS > 2
+		CPU(2)
+		#endif
+		#if CONF_CPUS > 3
+		CPU(3)
+		#endif
+		#if CONF_CPUS > 4
+		CPU(4)
+		#endif
+		#if CONF_CPUS > 5
+		CPU(5)
+		#endif
+		#if CONF_CPUS > 6
+		CPU(6)
+		#endif
+		#if CONF_CPUS > 7
+		CPU(7)
+		#endif
+		#if CONF_CPUS > 8
+		CPU(8)
+		#endif
+		#if CONF_CPUS > 9
+		CPU(9)
+		#endif
+		#if CONF_CPUS > 10
+		CPU(10)
+		#endif
+		#if CONF_CPUS > 11
+		CPU(11)
+		#endif
+		#if CONF_CPUS > 12
+		CPU(12)
+		#endif
+		#if CONF_CPUS > 13
+		CPU(13)
+		#endif
+		#if CONF_CPUS > 14
+		CPU(14)
+		#endif
+		#if CONF_CPUS > 15
+		CPU(15)
+		#endif
+		#if CONF_CPUS > 16
+		#error Unsupported number of CPUs
+		#endif
+	};
+};
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/system/arm/dt/Makefile gem5-SALAM/system/arm/dt/Makefile
--- gem5/system/arm/dt/Makefile	2024-02-22 18:16:36.864744577 -0600
+++ gem5-SALAM/system/arm/dt/Makefile	2024-02-22 18:17:15.400946045 -0600
@@ -34,8 +34,10 @@
 CREATE_TARGET=$(foreach n, $(NUM_CPUS), $(1)_$(n)cpu.dtb)
 
 TARGET_PREFIX=\
+	armv7_gem5_v1 \
 	armv8_gem5_v1 \
 	armv8_gem5_v2 \
+	armv7_gem5_v1_hdlcd \
 	armv8_gem5_v1_hdlcd \
 	armv8_gem5_v2_hdlcd
 
@@ -73,6 +75,14 @@
 
 all: $(TARGETS)
 
+.gen/armv7_gem5_v1_%cpu.dts: armv7.dts \
+	$(VEXPRESS_GEM5_V1_DTSIS)
+	$(call GEN_DTS,vexpress_gem5_v1_base.dtsi,$*)
+
+.gen/armv7_gem5_v1_hdlcd_%cpu.dts: armv7.dts \
+	$(VEXPRESS_GEM5_V1_HDLCD_DTSIS)
+	$(call GEN_DTS,vexpress_gem5_v1_hdlcd.dtsi,$*)
+
 .gen/armv8_gem5_v1_%cpu.dts: armv8.dts \
 	$(VEXPRESS_GEM5_V1_DTSIS)
 	$(call GEN_DTS,vexpress_gem5_v1_base.dtsi,$*)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/TESTING.md gem5-SALAM/TESTING.md
--- gem5/TESTING.md	2024-02-22 18:25:43.387603440 -0600
+++ gem5-SALAM/TESTING.md	1969-12-31 18:00:00.000000000 -0600
@@ -1,255 +0,0 @@
-This file explains how to use gem5's updated testing infrastructure. Running
-tests before submitting a patch is *incredibly important* so unexpected bugs
-don't creep into gem5.
-
-gem5's testing infrastructure has the following goals:
- * Simple for *all* users to run
- * Fast execution in the simple case
- * High coverage of gem5 code
-
-# Running unit tests
-
-gem5 comes with unit tests, created using the Google Test framework. These can
-be built through SCons.
-
-To build and run all the unit tests:
-
-```shell
-scons build/NULL/unittests.opt
-```
-
-All unit tests should be run prior to posting a patch to
-https://gem5-review.googlesource.com
-
-To compile and run just one set of tests (e.g. those declared within
-`src/base/bitunion.test.cc`):
-
-```shell
-scons build/NULL/base/bitunion.test.opt
-./build/NULL/base/bitunion.test.opt
-```
-
-To list the available test functions from a test file:
-
-```shell
-./build/NULL/base/bitunion.test.opt --gtest_list_tests
-```
-
-To run a specific test function (e.g., BitUnionData.NormalBitfield):
-
-```shell
-./build/NULL/base/bitunion.test.opt --gtest_filter=BitUnionData.NormalBitfield
-```
-
-# Running system-level tests
-
-Within the `tests` directory we have system-level tests. These tests run
-the gem5 framework against various hardware configurations, with different
-ISAs, then verify the simulations execute correctly. These should be seen as
-high-level, coarse-grained tests to compliment the unit-tests.
-
-Below is the most common way the tests are run. This will run all of the
-"quick" tests for X86, ARM, and RISC-V. These tests make up our best-supported
-platforms and use cases. When running these tests, you will likely want to us
-the option `-j <CPUs>` where `CPUs` is as large as you can make it.
-Additionally, it is often a good idea to run longer tests (e.g., linux boot)
-before submitting your patch.
-
-```shell
-cd tests
-./main.py run
-```
-
-The above is the *minumum* you should run before posting a patch to
-https://gem5-review.googlesource.com
-
-## Running tests from multiple directories
-
-The command line above will walk the directory tree starting from the cwd
-(tests), and it will run every test it encounters in its path. It is possible
-to specify multiple root directories by providing several positional
-arguments:
-
-```shell
-./main.py run <directory1> <directory2> [...]
-```
-
-This will load every test in directory1 and directory2 (and their
-subdirectories).
-
-## Specifying a subset of tests to run
-
-You can use the tag query interface to specify the exact tests you want to run.
-For instance, if you want to run only with `gem5.opt`, you can use
-
-```shell
-./main.py run --variant opt
-```
-
-Or, if you want to just run X86 tests with the `gem5.opt` binary:
-
-```shell
-./main.py run --length quick --variant opt --isa X86
-```
-
-
-To view all of the available tags, use
-
-```shell
-./main.py list --all-tags
-```
-
-The output is split into tag *types* (e.g., isa, variant, length) and the
-tags for each type are listed after the type name.
-
-You can specify "or" between tags within the same type by using the tag flag
-multiple times. For instance, to run everything that is tagged "opt" or "fast"
-use
-
-```shell
-./main.py run --variant opt --variant fast
-```
-
-You can also specify "and" between different types of tags by specifying more
-than one type on the command line. For instance, this will only run tests with
-both the "X86" and "opt" tags.
-
-```shell
-./main.py run --isa X86 --variant opt
-```
-
-## Running tests in batch
-
-The testing infrastructure provides the two needed methods to run tests in
-batch. First, you can list all of the tests based on the same tags as above in
-a machine-readable format by passing the `-q` flag. This will list all of the
-*suites* that match the given tag(s).
-
-```shell
-./main.py list -q --suites
-SuiteUID:tests/gem5/hello_se/test_hello_se.py:testhello64-static-X86-opt
-SuiteUID:tests/gem5/hello_se/test_hello_se.py:testhello64-dynamic-X86-opt
-SuiteUID:tests/gem5/hello_se/test_hello_se.py:testhello32-static-X86-opt
-SuiteUID:tests/gem5/hello_se/test_hello_se.py:testhello64-static-ARM-opt
-SuiteUID:tests/gem5/hello_se/test_hello_se.py:testhello32-static-ARM-opt
-SuiteUID:tests/gem5/m5_util/test_exit.py:m5_exit_test-X86-opt
-SuiteUID:tests/gem5/test_build/test_build.py:build-X86-opt
-SuiteUID:tests/gem5/test_build/test_build.py:build-RISCV-opt
-SuiteUID:tests/gem5/test_build/test_build.py:build-ARM-opt
-```
-
-Next, you can run a single *suite* from the command line by passing the option
-`--uid`. For instance,
-
-```shell
-./main.py run --skip-build \
-    --uid SuiteUID:tests/gem5/m5_util/test_exit.py:m5_exit_test-X86-opt
-```
-
-With this method, you can only run a *single* suite at a time. If you want to
-run more than one uid, you must call `./main.py` multiple times.
-
-Currently, you must specify `--skip-build` if you want to run a single suite or
-run in batch mode. Otherwise, you will build gem5 for all architectures.
-
-## Rerunning failed tests
-
-While developing software a common practice is to run tests, make a change, and
-assert that the tests still pass. If tests fail you'll likely want to
-rerun and fix those specific tests without running redundant ones. The testing
-infrastructure allows you to rerun tests which failed in the last execution by
-using the `rerun` command.
-
-```shell
-./main.py run
-#
-#  Some tests fail...
-#
-
-# Rerun only the failed test suites (not the ones which passed).
-./main.py rerun
-```
-
-## If something goes wrong
-
-The first step is to turn up the verbosity of the output using `-v`. This will
-allow you to see what tests are running and why a test is failing.
-
-If a test fails, the temporary directory where the gem5 output was saved is kept
-and the path to the directory is printed in the terminal.
-
-## Debugging the testing infrastructure
-
-Every command takes an option for the verbosity. `-v`, `-vv`, `-vvv` will
-increase the verbosity level. If something isn't working correctly, you can
-start here.
-
-Most of the code for the testing infrastructure is in ext/testlib. This code
-contains the base code for tests, suites, fixtures, etc. The code in tests/gem5
-is *gem5-specific* code. For the most part, the code in tests/gem5 extends the
-structures in ext/testlib.
-
-## Common errors
-
-You may see a number of lines of output during test discovery that look like
-the following:
-
-```shell
-    Tried to load tests from ... but failed with an exception.
-    Tried to load tests from ... but failed with an exception.
-    ...
-```
-
-The testing library searches all python files in the `tests/` directory. The
-test library executes each python file it finds searching for tests. It's okay
-if the file causes an exception. This means there are no tests in that file
-(e.g., it's not a new-style test).
-
-
-## Binary test applications
-
-The code for some test binaries that are run in the gem5 guest during
-testing can be found in `tests/test-progs`.
-There's one directory per test application.
-The source code is under the `source` directory.
-
-You may have a `bin` directory as well.
-The `bin` directory is automatically created when running the test case that
-uses the test binary.
-This is not the case when a test is run via the --bin-path option.
-In that scenario a bin directory will be created in the selected path
-rather than in `tests/test-progs`.
-The binary is downloaded from the gem5 servers the first
-time it is referenced by a test.
-
-Some other tests (like Linux-boot) don't have sources inside gem5 and
-are simply downloaded from gem5 servers.
-
-## Updating the test binaries
-
-The test infrastructure should check with the gem5 servers to ensure you have
-the latest binaries. However, if you believe your binaries are out of date,
-simply delete the `bin` directory and they will be re-downloaded to your local
-machine.
-
-## Building (new-style) test binaries
-
-In each `src/` directory under `tests/test-progs`, there is a Makefile.
-This Makefile downloads a docker image and builds the test binary for some ISA
-(e.g., Makefile.x86 builds the binary for x86). Additionally, if you run `make
-upload` it will upload the binaries to the gem5 server, if you have access to
-modify the binaries. *If you need to modify the binaries for updating a test or
-adding a new test and you don't have access to the gem5 server, contact a
-maintainer (see MAINTAINERS).*
-
-
-## Running Tests in Parallel
-
-Whimsy has support for parallel testing baked in. This system supports
-running multiple suites at the same time on the same computer. To run 
-suites in parallel, supply the `-t <number-tests>` flag to the run command.
-
-For example, to run up to three test suites at the same time::
-
-    ./main.py run --skip-build -t 3
-
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/configs/components-library/boot_exit_disk_run.py gem5-SALAM/tests/gem5/configs/components-library/boot_exit_disk_run.py
--- gem5/tests/gem5/configs/components-library/boot_exit_disk_run.py	2024-02-22 18:25:43.987606579 -0600
+++ gem5-SALAM/tests/gem5/configs/components-library/boot_exit_disk_run.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,256 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-This script will run a simple boot exit test.
-"""
-
-import m5
-from m5.objects import Root
-
-import sys
-import os
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.runtime import (
-    get_runtime_coherence_protocol,
-    get_runtime_isa,
-)
-from components_library.utils.requires import requires
-from components_library.boards.x86_board import X86Board
-from components_library.memory.single_channel import SingleChannelDDR3_1600
-from components_library.processors.simple_processor import SimpleProcessor
-from components_library.processors.cpu_types import CPUTypes
-from components_library.isas import ISA
-from components_library.coherence_protocol import CoherenceProtocol
-from components_library.resources.resource import Resource
-
-import os
-import argparse
-
-parser = argparse.ArgumentParser(
-    description="A script to run the gem5 boot test. This test boots the "
-    "linux kernel."
-)
-parser.add_argument(
-    "-m",
-    "--mem-system",
-    type=str,
-    choices=("classic", "mi_example", "mesi_two_level"),
-    required=True,
-    help="The memory system.",
-)
-parser.add_argument(
-    "-n",
-    "--num-cpus",
-    type=int,
-    choices=(1, 2, 4, 8),
-    required=True,
-    help="The number of CPUs.",
-)
-parser.add_argument(
-    "-c",
-    "--cpu",
-    type=str,
-    choices=("kvm", "atomic", "timing", "o3"),
-    required=True,
-    help="The CPU type.",
-)
-parser.add_argument(
-    "-b",
-    "--boot-type",
-    type=str,
-    choices=("systemd", "init"),
-    required=True,
-    help="The boot type.",
-)
-
-parser.add_argument(
-    "-t",
-    "--tick-exit",
-    type=int,
-    required=False,
-    help="The tick to exit the simulation. Note: using this may make the "
-    "selected boot-type selection pointless.",
-)
-
-parser.add_argument(
-    "-r",
-    "--resource-directory",
-    type=str,
-    required=False,
-    help="The directory in which resources will be downloaded or exist.",
-)
-
-parser.add_argument(
-    "-o",
-    "--override-download",
-    action="store_true",
-    help="Override a local resource if the hashes do not match.",
-)
-
-args = parser.parse_args()
-
-coherence_protocol_required = None
-if args.mem_system == "mi_example":
-    coherence_protocol_required = CoherenceProtocol.MI_EXAMPLE
-elif args.mem_system == "mesi_two_level":
-    coherence_protocol_required = CoherenceProtocol.MESI_TWO_LEVEL
-
-requires(isa_required=ISA.X86,
-         coherence_protocol_required=coherence_protocol_required,
-         kvm_required=(args.cpu == "kvm"))
-
-cache_hierarchy = None
-if args.mem_system == "mi_example":
-    from components_library.cachehierarchies.ruby.\
-        mi_example_cache_hierarchy import (
-        MIExampleCacheHierarchy,
-    )
-
-    cache_hierarchy = MIExampleCacheHierarchy(size="32kB", assoc=8)
-elif args.mem_system == "mesi_two_level":
-    from components_library.cachehierarchies.ruby.\
-        mesi_two_level_cache_hierarchy import (
-        MESITwoLevelCacheHierarchy,
-    )
-
-    cache_hierarchy = MESITwoLevelCacheHierarchy(
-        l1d_size="16kB",
-        l1d_assoc=8,
-        l1i_size="16kB",
-        l1i_assoc=8,
-        l2_size="256kB",
-        l2_assoc=16,
-        num_l2_banks=1,
-    )
-elif args.mem_system == "classic":
-    from components_library.cachehierarchies.classic.\
-        private_l1_cache_hierarchy import (
-        PrivateL1CacheHierarchy,
-    )
-
-    cache_hierarchy = PrivateL1CacheHierarchy(l1d_size="16kB", l1i_size="16kB")
-else:
-    raise NotImplementedError(
-        "Memory system '{}' is not supported in the boot tests.".format(
-            args.mem_system
-        )
-    )
-
-assert cache_hierarchy != None
-
-# Setup the system memory.
-# Warning: This must be kept at 3GB for now. X86Motherboard does not support
-# anything else right now!
-memory = SingleChannelDDR3_1600(size="3GB")
-
-# Setup a Processor.
-
-cpu_type = None
-if args.cpu == "kvm":
-    cpu_type = CPUTypes.KVM
-elif args.cpu == "atomic":
-    cpu_type = CPUTypes.ATOMIC
-elif args.cpu == "timing":
-    cpu_type = CPUTypes.TIMING
-elif args.cpu == "o3":
-    cpu_type = CPUTypes.O3
-else:
-    raise NotImplementedError(
-        "CPU type '{}' is not supported in the boot tests.".format(args.cpu)
-    )
-
-assert cpu_type != None
-
-processor = SimpleProcessor(cpu_type=cpu_type, num_cores=args.num_cpus)
-
-# Setup the motherboard.
-motherboard = X86Board(
-    clk_freq="3GHz",
-    processor=processor,
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-    exit_on_work_items=True,
-)
-
-motherboard.connect_things()
-
-additional_kernal_args = []
-if args.boot_type == "init":
-    additional_kernal_args.append("init=/root/exit.sh")
-
-# Set the Full System workload.
-motherboard.set_workload(
-    kernel=Resource(
-        "x86-linux-kernel-5.4.49",
-        override=args.override_download,
-        resource_directory=args.resource_directory,
-    ),
-    disk_image=Resource(
-        "x86-boot-exit",
-        override=args.override_download,
-        resource_directory=args.resource_directory,
-    ),
-    command="m5 exit \n",
-    kernel_args=additional_kernal_args,
-)
-
-
-# Begin running of the simulation. This will exit once the Linux system boot
-# is complete.
-print("Running with ISA: " + get_runtime_isa().name)
-print("Running with protocol: " + get_runtime_coherence_protocol().name)
-print()
-
-root = Root(full_system=True, system=motherboard)
-
-if args.cpu == "kvm":
-    # TODO: This of annoying. Is there a way to fix this to happen
-    # automatically when running KVM?
-    root.sim_quantum = int(1e9)
-
-m5.instantiate()
-
-print("Beginning simulation!")
-if args.tick_exit != None:
-    exit_event = m5.simulate(args.tick_exit)
-else:
-    exit_event = m5.simulate()
-print(
-    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/configs/components-library/boot_kvm_switch_exit.py gem5-SALAM/tests/gem5/configs/components-library/boot_kvm_switch_exit.py
--- gem5/tests/gem5/configs/components-library/boot_kvm_switch_exit.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/configs/components-library/boot_kvm_switch_exit.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,250 +0,0 @@
-# Copyright (c) 2021 The Univerity of Texas at Austin
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-This script boots with KVM then switches processors and exits.
-"""
-
-import argparse
-import os
-import sys
-
-import m5
-from m5.objects import Root
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.boards.x86_board import X86Board
-from components_library.coherence_protocol import CoherenceProtocol
-from components_library.isas import ISA
-from components_library.memory.single_channel import SingleChannelDDR3_1600
-from components_library.processors.cpu_types import CPUTypes
-from components_library.processors.simple_switchable_processor import (
-    SimpleSwitchableProcessor,
-)
-from components_library.resources.resource import Resource
-from components_library.runtime import (
-    get_runtime_coherence_protocol, get_runtime_isa
-)
-from components_library.utils.requires import requires
-
-parser = argparse.ArgumentParser(
-    description="A script to test switching cpus. This test boots"
-    "the linux kernel with the KVM cpu, then switches cpus until exiting."
-)
-parser.add_argument(
-    "-m",
-    "--mem-system",
-    type=str,
-    choices=("classic", "mi_example", "mesi_two_level"),
-    required=True,
-    help="The memory system.",
-)
-parser.add_argument(
-    "-n",
-    "--num-cpus",
-    type=int,
-    choices=(1, 2, 4, 8),
-    required=True,
-    help="The number of CPUs.",
-)
-parser.add_argument(
-    "-c",
-    "--cpu",
-    type=str,
-    choices=("kvm", "atomic", "timing", "o3"),
-    required=True,
-    help="The CPU type.",
-)
-parser.add_argument(
-    "-r",
-    "--resource-directory",
-    type=str,
-    required=False,
-    help="The directory in which resources will be downloaded or exist.",
-)
-parser.add_argument(
-    "-o",
-    "--override-download",
-    action="store_true",
-    help="Override a local resource if the hashes do not match.",
-)
-parser.add_argument(
-    "-k",
-    "--kernel-args",
-    type=str,
-    default="init=/root/gem5_init.sh",
-    help="Additional kernel boot arguments.",
-)
-
-args = parser.parse_args()
-
-coherence_protocol_required = None
-if args.mem_system == "mi_example":
-    coherence_protocol_required = CoherenceProtocol.MI_EXAMPLE
-elif args.mem_system == "mesi_two_level":
-    coherence_protocol_required = CoherenceProtocol.MESI_TWO_LEVEL
-
-requires(
-    isa_required=ISA.X86,
-    coherence_protocol_required=coherence_protocol_required,
-    kvm_required=(args.cpu == "kvm"),
-)
-
-cache_hierarchy = None
-if args.mem_system == "mi_example":
-    from components_library.cachehierarchies.ruby.\
-        mi_example_cache_hierarchy import (
-        MIExampleCacheHierarchy,
-    )
-
-    cache_hierarchy = MIExampleCacheHierarchy(size="32kB", assoc=8)
-elif args.mem_system == "mesi_two_level":
-    from components_library.cachehierarchies.ruby.\
-        mesi_two_level_cache_hierarchy import (
-        MESITwoLevelCacheHierarchy,
-    )
-
-    cache_hierarchy = MESITwoLevelCacheHierarchy(
-        l1d_size="16kB",
-        l1d_assoc=8,
-        l1i_size="16kB",
-        l1i_assoc=8,
-        l2_size="256kB",
-        l2_assoc=16,
-        num_l2_banks=1,
-    )
-elif args.mem_system == "classic":
-    from components_library.cachehierarchies.classic.\
-        private_l1_cache_hierarchy import (
-        PrivateL1CacheHierarchy,
-    )
-
-    cache_hierarchy = PrivateL1CacheHierarchy(l1d_size="16kB", l1i_size="16kB")
-else:
-    raise NotImplementedError(
-        "Memory system '{}' is not supported in the boot tests.".format(
-            args.mem_system
-        )
-    )
-
-assert cache_hierarchy != None
-
-# Setup the system memory.
-memory = SingleChannelDDR3_1600(size="3GB")
-
-# Setup a Processor.
-cpu_type = None
-if args.cpu == "kvm":
-    cpu_type = CPUTypes.KVM
-elif args.cpu == "atomic":
-    cpu_type = CPUTypes.ATOMIC
-elif args.cpu == "timing":
-    cpu_type = CPUTypes.TIMING
-elif args.cpu == "o3":
-    cpu_type = CPUTypes.O3
-else:
-    raise NotImplementedError(
-        "CPU type '{}' is not supported in the boot tests.".format(args.cpu)
-    )
-
-assert cpu_type != None
-
-processor = SimpleSwitchableProcessor(
-    starting_core_type=CPUTypes.KVM,
-    switch_core_type=cpu_type,
-    num_cores=args.num_cpus,
-)
-
-# Setup the motherboard.
-motherboard = X86Board(
-    clk_freq="3GHz",
-    processor=processor,
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-    exit_on_work_items=True,
-)
-
-motherboard.connect_things()
-
-additional_kernal_args = [args.kernel_args]
-
-# Set the Full System workload.
-motherboard.set_workload(
-    kernel=Resource(
-        "x86-linux-kernel-5.4.49",
-        override=args.override_download,
-        resource_directory=args.resource_directory,
-    ),
-    disk_image=Resource(
-        "x86-boot-exit",
-        override=args.override_download,
-        resource_directory=args.resource_directory,
-    ),
-    # The first exit signals to switch processors.
-    command="m5 exit\nm5 exit\n",
-    kernel_args=additional_kernal_args,
-)
-
-
-# Begin running of the simulation. This will exit once the Linux system boot
-# is complete.
-print("Running with ISA: " + get_runtime_isa().name)
-print("Running with protocol: " + get_runtime_coherence_protocol().name)
-print()
-
-root = Root(full_system=True, system=motherboard)
-
-root.sim_quantum = int(1e9)
-
-m5.instantiate()
-
-print("Booting!")
-exit_event = m5.simulate()
-if exit_event.getCause() != "m5_exit instruction encountered":
-    raise Exception("Expected exit instruction after boot!")
-
-print(f"Switching processors to {args.cpu}!")
-processor.switch()
-
-exit_event = m5.simulate()
-exit_cause = exit_event.getCause()
-
-if exit_cause != "m5_exit instruction encountered":
-    raise Exception(
-        f"Expected exit after switching processors, received: {exit_cause}"
-    )
-print("Exiting @ tick {} because {}.".format(m5.curTick(), exit_cause))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/configs/components-library/parsec_disk_run.py gem5-SALAM/tests/gem5/configs/components-library/parsec_disk_run.py
--- gem5/tests/gem5/configs/components-library/parsec_disk_run.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/configs/components-library/parsec_disk_run.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,368 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-A run script for running the parsec benchmark suite in gem5.
-
-Notes
------
-
-* This will download the PARSEC disk image if not found locally. This image is
-  8 GB compressed, and 25 GB decompressed.
-* This will only function for the X86 ISA.
-"""
-
-import m5
-import m5.ticks
-from m5.objects import Root
-
-import sys
-import os
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.resources.resource import Resource
-from components_library.boards.x86_board import X86Board
-from components_library.memory.single_channel import SingleChannelDDR3_1600
-from components_library.processors.simple_switchable_processor import (
-    SimpleSwitchableProcessor,
-)
-from components_library.processors.cpu_types import CPUTypes
-from components_library.isas import ISA
-from components_library.runtime import (
-    get_runtime_isa,
-    get_runtime_coherence_protocol,
-)
-from components_library.utils.requires import requires
-
-import time
-import argparse
-
-requires(isa_required=ISA.X86)
-
-
-parser = argparse.ArgumentParser(
-    description="A script to run the PARSEC benchmarks on a basic X86 full "
-    "system."
-)
-
-parser.add_argument(
-    "-n",
-    "--num-cpus",
-    type=int,
-    choices=(1, 2, 8),
-    required=True,
-    help="The number of CPUs. Note: 1, 2, and 8 cores supported on KVM; 1 and "
-    "2 supported on TimingSimpleCPU.",
-)
-
-parser.add_argument(
-    "-b",
-    "--boot-cpu",
-    type=str,
-    choices=("kvm", "timing", "atomic", "o3"),
-    required=False,
-    help="The CPU type to run before and after the ROI. If not specified will "
-    "be equal to that of the CPU type used in the ROI.",
-)
-
-parser.add_argument(
-    "-c",
-    "--cpu",
-    type=str,
-    choices=("kvm", "timing", "atomic", "o3"),
-    required=True,
-    help="The CPU type used in the ROI.",
-)
-
-parser.add_argument(
-    "-m",
-    "--mem-system",
-    type=str,
-    choices=("classic", "mesi_two_level"),
-    required=True,
-    help="The memory system to be used",
-)
-
-parser.add_argument(
-    "-e",
-    "--benchmark",
-    type=str,
-    choices=(
-        "blackscholes",
-        "bodytrack",
-        "canneal",
-        "dedup",
-        "facesim",
-        "ferret",
-        "fluidanimate",
-        "freqmine",
-        "raytrace",
-        "streamcluster",
-        "swaptions",
-        "vips",
-        "x264",
-    ),
-    required=True,
-    help="The PARSEC benchmark to run.",
-)
-
-parser.add_argument(
-    "-s",
-    "--size",
-    type=str,
-    choices=("simsmall", "simmedium", "simlarge"),
-    required=True,
-    help="The size of the PARSEC benchmark input size.",
-)
-
-parser.add_argument(
-    "-r",
-    "--resource-directory",
-    type=str,
-    required=False,
-    help="The directory in which resources will be downloaded or exist.",
-)
-
-parser.add_argument(
-    "-o",
-    "--override-download",
-    action="store_true",
-    help="Override a local resource if the hashes do not match.",
-)
-
-args = parser.parse_args()
-
-# Setup the cachie hierarchy.
-
-if args.mem_system == "classic":
-
-    from components_library.cachehierarchies.classic.\
-        private_l1_private_l2_cache_hierarchy import (
-        PrivateL1PrivateL2CacheHierarchy,
-    )
-
-    cache_hierarchy = PrivateL1PrivateL2CacheHierarchy(
-        l1d_size="32kB",
-        l1i_size="32kB",
-        l2_size="256kB",
-    )
-elif args.mem_system == "mesi_two_level":
-    from components_library.cachehierarchies.ruby.\
-        mesi_two_level_cache_hierarchy import (
-        MESITwoLevelCacheHierarchy,
-    )
-
-    cache_hierarchy = MESITwoLevelCacheHierarchy(
-        l1i_size="32kB",
-        l1i_assoc=8,
-        l1d_size="32kB",
-        l1d_assoc=8,
-        l2_size="256kB",
-        l2_assoc=16,
-        num_l2_banks=1,
-    )
-
-# Setup the memory system.
-memory = SingleChannelDDR3_1600(size="3GB")
-
-
-def input_to_cputype(input: str) -> CPUTypes:
-    if input == "kvm":
-        return CPUTypes.KVM
-    elif input == "timing":
-        return CPUTypes.TIMING
-    elif input == "atomic":
-        return CPUTypes.ATOMIC
-    elif input == "o3":
-        return CPUTypes.O3
-    else:
-        raise NotADirectoryError("Unknown CPU type '{}'.".format(input))
-
-
-roi_type = input_to_cputype(args.cpu)
-if args.boot_cpu != None:
-    boot_type = input_to_cputype(args.boot_cpu)
-else:
-    boot_type = roi_type
-
-
-processor = SimpleSwitchableProcessor(
-    starting_core_type=boot_type,
-    switch_core_type=roi_type,
-    num_cores=args.num_cpus,
-)
-
-# Setup the board.
-board = X86Board(
-    clk_freq="3GHz",
-    processor=processor,
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-    exit_on_work_items=True,
-)
-
-board.connect_things()
-
-# The command to run.
-command = (
-    "cd /home/gem5/parsec-benchmark\n"
-    + "source env.sh\n"
-    + "parsecmgmt -a run -p {} ".format(args.benchmark)
-    + "-c gcc-hooks -i {} ".format(args.size)
-    + "-n {}\n".format(str(args.num_cpus))
-    + "sleep 5 \n"
-    + "m5 exit \n"
-)
-
-board.set_workload(
-    kernel=Resource(
-        "x86-linux-kernel-5.4.49",
-        resource_directory=args.resource_directory,
-        override=args.override_download,
-    ),
-    disk_image=Resource(
-        "x86-parsec",
-        resource_directory=args.resource_directory,
-        override=args.override_download,
-    ),
-    command=command,
-)
-
-print("Running with ISA: " + get_runtime_isa().name)
-print("Running with protocol: " + get_runtime_coherence_protocol().name)
-print()
-
-root = Root(full_system=True, system=board)
-
-if args.cpu == "kvm" or args.boot_cpu == "kvm":
-    # TODO: This of annoying. Is there a way to fix this to happen
-    # automatically when running KVM?
-    root.sim_quantum = int(1e9)
-
-m5.instantiate()
-
-globalStart = time.time()
-print("Beginning the simulation")
-
-start_tick = m5.curTick()
-end_tick = m5.curTick()
-
-m5.stats.reset()
-
-exit_event = m5.simulate()
-
-if exit_event.getCause() == "workbegin":
-    print("Done booting Linux")
-    # Reached the start of ROI.
-    # The start of the ROI is marked by an m5_work_begin() call.
-    print("Resetting stats at the start of ROI!")
-    m5.stats.reset()
-    start_tick = m5.curTick()
-
-    # Switch to the Timing Processor.
-    board.get_processor().switch()
-else:
-    print("Unexpected termination of simulation!")
-    print("Cause: {}".format(exit_event.getCause()))
-    print()
-
-    m5.stats.dump()
-    end_tick = m5.curTick()
-
-    m5.stats.reset()
-    print("Performance statistics:")
-    print("Simulated time: {}s".format((end_tick - start_tick) / 1e12))
-    print("Ran a total of", m5.curTick() / 1e12, "simulated seconds")
-    print(
-        "Total wallclock time: {}s, {} min".format(
-            (
-                time.time() - globalStart,
-                (time.time() - globalStart) / 60,
-            )
-        )
-    )
-    exit(1)
-
-# Simulate the ROI.
-exit_event = m5.simulate()
-
-if exit_event.getCause() == "workend":
-    # Reached the end of ROI
-    # The end of the ROI is marked by an m5_work_end() call.
-    print("Dumping stats at the end of the ROI!")
-    m5.stats.dump()
-    end_tick = m5.curTick()
-
-    m5.stats.reset()
-
-    # Switch back to the Atomic Processor
-    board.get_processor().switch()
-else:
-    print("Unexpected termination of simulation!")
-    print("Cause: {}".format(exit_event.getCause()))
-    print()
-    m5.stats.dump()
-    end_tick = m5.curTick()
-
-    m5.stats.reset()
-    print("Performance statistics:")
-    print("Simulated time: {}s".format((end_tick - start_tick) / 1e12))
-    print("Ran a total of", m5.curTick() / 1e12, "simulated seconds")
-    print(
-        "Total wallclock time: {}s, {} min".format(
-            time.time() - globalStart,
-            (time.time() - globalStart) / 60,
-        )
-    )
-    exit(1)
-
-# Simulate the remaning part of the benchmark
-# Run the rest of the workload until m5 exit
-
-exit_event = m5.simulate()
-
-print("Done running the simulation")
-print()
-print("Performance statistics:")
-
-print("Simulated time in ROI: {}s".format((end_tick - start_tick) / 1e12))
-print("Ran a total of {} simulated seconds".format(m5.curTick() / 1e12))
-print(
-    "Total wallclock time: {}s, {} min".format(
-        time.time() - globalStart, (time.time() - globalStart) / 60
-    )
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/configs/components-library/simple_binary_run.py gem5-SALAM/tests/gem5/configs/components-library/simple_binary_run.py
--- gem5/tests/gem5/configs/components-library/simple_binary_run.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/configs/components-library/simple_binary_run.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,139 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-A run script for a very simple Syscall-Execution running simple binaries.
-The system has no cache heirarchy and is as "bare-bones" as you can get in
-gem5 while still being functinal.
-"""
-
-import m5
-from m5.objects import Root
-
-import os
-import sys
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.resources.resource import Resource
-from components_library.boards.simple_board import SimpleBoard
-from components_library.cachehierarchies.classic.no_cache import NoCache
-from components_library.memory.single_channel import SingleChannelDDR3_1600
-from components_library.processors.simple_processor import SimpleProcessor
-from components_library.processors.cpu_types import CPUTypes
-
-import argparse
-
-parser = argparse.ArgumentParser(
-    description="A script to run the gem5 boot test. This test boots the "
-    "linux kernel."
-)
-
-parser.add_argument(
-    "resource",
-    type=str,
-    help="The gem5 resource binary to run.",
-)
-
-parser.add_argument(
-    "cpu",
-    type=str,
-    choices=("kvm", "timing", "atomic", "o3"),
-    help="The CPU type used.",
-)
-
-parser.add_argument(
-    "-r",
-    "--resource-directory",
-    type=str,
-    required=False,
-    help="The directory in which resources will be downloaded or exist.",
-)
-
-parser.add_argument(
-    "-o",
-    "--override-download",
-    action="store_true",
-    help="Override a local resource if the hashes do not match.",
-)
-
-args = parser.parse_args()
-
-def input_to_cputype(input: str) -> CPUTypes:
-    if input == "kvm":
-        return CPUTypes.KVM
-    elif input == "timing":
-        return CPUTypes.TIMING
-    elif input == "atomic":
-        return CPUTypes.ATOMIC
-    elif input == "o3":
-        return CPUTypes.O3
-    else:
-        raise NotADirectoryError("Unknown CPU type '{}'.".format(input))
-
-# Setup the system.
-cache_hierarchy = NoCache()
-memory = SingleChannelDDR3_1600()
-processor = SimpleProcessor(cpu_type=input_to_cputype(args.cpu), num_cores=1)
-
-motherboard = SimpleBoard(
-    clk_freq="3GHz",
-    processor=processor,
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-)
-
-motherboard.connect_things()
-
-# Set the workload
-binary = Resource(args.resource,
-        resource_directory=args.resource_directory,
-        override=args.override_download)
-motherboard.set_workload(binary)
-
-root = Root(full_system=False, system=motherboard)
-
-if args.cpu == "kvm":
-    # TODO: This of annoying. Is there a way to fix this to happen
-    # automatically when running KVM?
-    root.sim_quantum = int(1e9)
-
-m5.instantiate()
-
-exit_event = m5.simulate()
-print(
-    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/configs/components-library/simple_traffic_run.py gem5-SALAM/tests/gem5/configs/components-library/simple_traffic_run.py
--- gem5/tests/gem5/configs/components-library/simple_traffic_run.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/configs/components-library/simple_traffic_run.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,121 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-This script creates a simple traffic generator. The simulator starts with a
-linear traffic generator, and ends with a random traffic generator. It is used
-for testing purposes.
-"""
-
-import m5
-
-from m5.objects import Root
-
-import sys
-import os
-import argparse
-import importlib
-
-# This is a lame hack to get the imports working correctly.
-# TODO: This needs fixed.
-sys.path.append(
-    os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
-        os.pardir,
-    )
-)
-
-from components_library.boards.test_board import TestBoard
-from components_library.cachehierarchies.classic.no_cache import NoCache
-from components_library.memory.single_channel import *
-from components_library.processors.complex_generator import ComplexGenerator
-
-parser = argparse.ArgumentParser(
-    description="A traffic generator that can be used to test a gem5 "
-    "memory component."
-)
-
-parser.add_argument(
-    "module",
-    type=str,
-    help="The python module to import.",
-)
-
-parser.add_argument(
-    "mem_class",
-    type=str,
-    help="The memory class to import and instantiate.",
-)
-
-parser.add_argument(
-    "arguments",
-    nargs="*",
-    help="The arguments needed to instantiate the memory class.",
-)
-
-args = parser.parse_args()
-
-# This setup does not require a cache heirarchy. We therefore use the `NoCache`
-# setup.
-cache_hierarchy = NoCache()
-
-memory_class = getattr(importlib.import_module(args.module), args.mem_class)
-memory = memory_class(*args.arguments)
-
-cmxgen = ComplexGenerator(num_cores=1)
-cmxgen.add_linear(rate="100GB/s")
-cmxgen.add_random(block_size=32, rate="50MB/s")
-
-# We use the Test Board. This is a special board to run traffic generation
-# tasks
-motherboard = TestBoard(
-    clk_freq="3GHz",
-    processor=cmxgen,  # We pass the traffic generator as the processor.
-    memory=memory,
-    cache_hierarchy=cache_hierarchy,
-)
-
-motherboard.connect_things()
-
-root = Root(full_system=False, system=motherboard)
-
-m5.instantiate()
-
-cmxgen.start_traffic()
-print("Beginning simulation!")
-exit_event = m5.simulate()
-print(
-    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
-)
-cmxgen.start_traffic()
-print("The Linear taffic has finished. Swiching to random traffic!")
-exit_event = m5.simulate()
-print(
-    "Exiting @ tick {} because {}.".format(m5.curTick(), exit_event.getCause())
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/hello_se/ref/simout gem5-SALAM/tests/gem5/hello_se/ref/simout
--- gem5/tests/gem5/hello_se/ref/simout	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tests/gem5/hello_se/ref/simout	2024-02-22 18:17:15.404946066 -0600
@@ -0,0 +1,3 @@
+Global frequency set at 1000000000000 ticks per second
+**** REAL SIMULATION ****
+Hello world!
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/hello_se/test_hello_se.py gem5-SALAM/tests/gem5/hello_se/test_hello_se.py
--- gem5/tests/gem5/hello_se/test_hello_se.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/hello_se/test_hello_se.py	2024-02-22 18:17:15.404946066 -0600
@@ -39,84 +39,75 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-"""
+'''
 Test file for the util m5 exit assembly instruction.
-"""
+'''
 from testlib import *
 
-import re
-
 static_progs = {
-    constants.gcn3_x86_tag: (
-        "x86-hello64-static",
-        # "x86-hello32-static", # Running 32-bit binaries on gem5 is broken:
-                                # https://gem5.atlassian.net/browse/GEM5-1074
-    ),
-    constants.arm_tag: (
-        "arm-hello64-static",
-        # "arm-hello32-static", # Running 32-bit binaries on gem5 is broken.
-                                # https://gem5.atlassian.net/browse/GEM5-1074
-    ),
-    constants.mips_tag: ("mips-hello",),
-    constants.riscv_tag: ("riscv-hello",),
-    constants.sparc_tag: ("sparc-hello",),
+    constants.gcn3_x86_tag : ('hello64-static', 'hello32-static'),
+    constants.arm_tag : ('hello64-static', 'hello32-static'),
+    constants.mips_tag : ('hello',),
+    constants.riscv_tag : ('hello',),
+    constants.sparc_tag : ('hello',)
 }
 
-dynamic_progs = {constants.gcn3_x86_tag: ("x86-hello64-dynamic",)}
+dynamic_progs = {
+    constants.gcn3_x86_tag : ('hello64-dynamic',)
+}
 
 cpu_types = {
-    constants.gcn3_x86_tag: ("timing", "atomic", "o3"),
-    constants.arm_tag: ("timing", "atomic", "o3"),
-    constants.mips_tag: ("timing", "atomic", "o3"),
-    constants.riscv_tag: ("timing", "atomic", "o3"),
-    constants.sparc_tag: ("timing", "atomic"),
+    constants.gcn3_x86_tag :
+        ('TimingSimpleCPU', 'AtomicSimpleCPU', 'DerivO3CPU'),
+    constants.arm_tag :  ('TimingSimpleCPU', 'AtomicSimpleCPU','DerivO3CPU'),
+    constants.mips_tag : ('TimingSimpleCPU', 'AtomicSimpleCPU', 'DerivO3CPU'),
+    constants.riscv_tag :
+        ('TimingSimpleCPU', 'AtomicSimpleCPU', 'DerivO3CPU', 'MinorCPU'),
+    constants.sparc_tag : ('TimingSimpleCPU', 'AtomicSimpleCPU')
 }
 
 # We only want to test x86, arm, and riscv on quick. Mips and sparc will be
 # left for long.
 os_length = {
-    constants.gcn3_x86_tag: constants.quick_tag,
-    constants.arm_tag: constants.quick_tag,
-    constants.mips_tag: constants.long_tag,
-    constants.riscv_tag: constants.quick_tag,
-    constants.sparc_tag: constants.long_tag,
+    constants.gcn3_x86_tag : constants.quick_tag,
+    constants.arm_tag : constants.quick_tag,
+    constants.mips_tag : constants.long_tag,
+    constants.riscv_tag : constants.quick_tag,
+    constants.sparc_tag : constants.long_tag,
 }
 
+base_path = joinpath(config.bin_path, 'hello')
 
-if config.bin_path:
-    resource_path = config.bin_path
-else:
-    resource_path = joinpath(absdirpath(__file__), "..", "resources")
+urlbase = config.resource_url + '/test-progs/hello/bin/'
 
+isa_urls = {
+    constants.gcn3_x86_tag : urlbase + "x86/linux",
+    constants.arm_tag : urlbase + "arm/linux",
+    constants.mips_tag : urlbase + "mips/linux",
+    constants.riscv_tag : urlbase + "riscv/linux",
+    constants.sparc_tag : urlbase + "sparc/linux",
+}
 
-regex = re.compile(r"Hello world!")
-stdout_verifier = verifier.MatchRegex(regex)
-
+ref_path = joinpath(getcwd(), 'ref')
+verifiers = (
+    verifier.MatchStdoutNoPerf(joinpath(ref_path, 'simout')),
+)
 
 def verify_config(isa, binary, cpu, hosts):
+    url = isa_urls[isa] + '/' + binary
+    path = joinpath(base_path, isa.lower())
+    hello_program = DownloadedProgram(url, path, binary)
 
     gem5_verify_config(
-        name="test-" + binary + "-" + cpu,
-        fixtures=(),
-        verifiers=(stdout_verifier,),
-        config=joinpath(
-            config.base_dir,
-            "tests",
-            "gem5",
-            "configs",
-            "components-library",
-            "simple_binary_run.py",
-        ),
-        config_args=[
-            binary,
-            cpu,
-            "--override-download",
-            "--resource-directory",
-            resource_path,
-        ],
+        name='test-' + binary + '-' + cpu,
+        fixtures=(hello_program,),
+        verifiers=verifiers,
+        config=joinpath(config.base_dir, 'configs', 'example','se.py'),
+        config_args=['--cmd', joinpath(path, binary), '--cpu-type', cpu,
+            '--caches'],
         valid_isas=(isa,),
         valid_hosts=hosts,
-        length=os_length[isa],
+        length = os_length[isa],
     )
 
 # Run statically linked hello worlds
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/insttest_se/ref/simout gem5-SALAM/tests/gem5/insttest_se/ref/simout
--- gem5/tests/gem5/insttest_se/ref/simout	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/insttest_se/ref/simout	1969-12-31 18:00:00.000000000 -0600
@@ -1,12 +0,0 @@
-Global frequency set at 1000000000000 ticks per second
-Begining test of difficult SPARC instructions...
-LDSTUB:		Passed
-SWAP:		Passed
-CAS FAIL:	Passed
-CAS WORK:	Passed
-CASX FAIL:	Passed
-CASX WORK:	Passed
-LDTX:		Passed
-LDTW:		Passed
-STTW:		Passed
-Done
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/insttest_se/ref/sparc/linux/insttest/simout gem5-SALAM/tests/gem5/insttest_se/ref/sparc/linux/insttest/simout
--- gem5/tests/gem5/insttest_se/ref/sparc/linux/insttest/simout	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tests/gem5/insttest_se/ref/sparc/linux/insttest/simout	2024-02-22 18:17:15.404946066 -0600
@@ -0,0 +1,13 @@
+Global frequency set at 1000000000000 ticks per second
+**** REAL SIMULATION ****
+Begining test of difficult SPARC instructions...
+LDSTUB:		Passed
+SWAP:		Passed
+CAS FAIL:	Passed
+CAS WORK:	Passed
+CASX FAIL:	Passed
+CASX WORK:	Passed
+LDTX:		Passed
+LDTW:		Passed
+STTW:		Passed
+Done
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/insttest_se/test.py gem5-SALAM/tests/gem5/insttest_se/test.py
--- gem5/tests/gem5/insttest_se/test.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/insttest_se/test.py	2024-02-22 18:17:15.404946066 -0600
@@ -24,47 +24,55 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-"""
+'''
 Test file for the insttest binary running on the SPARC ISA
-"""
+'''
 from testlib import *
 
-test_progs = {constants.sparc_tag: ("sparc-insttest",)}
+test_progs = {
+    constants.sparc_tag : ('insttest',)
+}
 
-cpu_types = {constants.sparc_tag: ("atomic", "timing")}
+cpu_types = {
+    constants.sparc_tag : ('AtomicSimpleCPU', 'TimingSimpleCPU')
+}
 
-if config.bin_path:
-    resource_path = config.bin_path
-else:
-    resource_path = joinpath(absdirpath(__file__), "..", "resources")
+supported_os = {
+    constants.sparc_tag : ('linux',)
+}
 
+base_path = joinpath(config.bin_path, 'insttest')
+
+urlbase = config.resource_url + '/test-progs/insttest/bin/'
 for isa in test_progs:
     for binary in test_progs[isa]:
-        ref_path = joinpath(getcwd(), "ref")
-        verifiers = (
-            verifier.MatchStdoutNoPerf(joinpath(ref_path, "simout")),
-        )
-
-        for cpu in cpu_types[isa]:
-            gem5_verify_config(
-                name="test-" + binary + "-" + cpu,
-                fixtures=(),
-                verifiers=verifiers,
-                config=joinpath(
-                    config.base_dir,
-                    "tests",
-                    "gem5",
-                    "configs",
-                    "components-library",
-                    "simple_binary_run.py",
-                ),
-                config_args=[
-                    binary,
-                    cpu,
-                    "--override-download",
-                    "--resource-directory",
-                    resource_path,
-                ],
-                valid_isas=(isa,),
-                length=constants.long_tag,
+        for  operating_s in supported_os[isa]:
+            import os
+            url = urlbase + isa.lower() + '/' + operating_s + '/' + binary
+            path = joinpath(base_path, isa.lower(), operating_s, binary)
+
+            try:
+                program = DownloadedProgram(url, path, binary)
+            except:
+                continue
+
+            ref_path = joinpath(
+                getcwd(), 'ref', isa.lower(), operating_s, binary
+            )
+            verifiers = (
+                verifier.MatchStdoutNoPerf(joinpath(ref_path, 'simout')),
             )
+
+            for cpu in cpu_types[isa]:
+
+                gem5_verify_config(
+                    name='test-'+binary + '-' + operating_s + '-' + cpu,
+                    fixtures=(program,),
+                    verifiers=verifiers,
+                    config=joinpath(config.base_dir, 'configs',
+                        'example','se.py'),
+                    config_args=['--cmd', joinpath(path, binary),
+                        '--cpu-type', cpu, '--caches'],
+                    valid_isas=(isa,),
+                    length = constants.long_tag,
+                )
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/learning_gem5/part3_test.py gem5-SALAM/tests/gem5/learning_gem5/part3_test.py
--- gem5/tests/gem5/learning_gem5/part3_test.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/learning_gem5/part3_test.py	2024-02-22 18:17:15.404946066 -0600
@@ -43,7 +43,6 @@
     valid_isas=(constants.gcn3_x86_tag,),
     # dynamically linked
     valid_hosts=constants.target_host[constants.gcn3_x86_tag],
-    length=constants.long_tag,
 )
 
 gem5_verify_config(
@@ -54,5 +53,4 @@
     protocol = 'MSI',
     # Currently only x86 has the threads test
     valid_isas=(constants.gcn3_x86_tag,),
-    length=constants.long_tag,
 )
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/m5_util/test_exit.py gem5-SALAM/tests/gem5/m5_util/test_exit.py
--- gem5/tests/gem5/m5_util/test_exit.py	2024-02-22 18:25:43.991606600 -0600
+++ gem5-SALAM/tests/gem5/m5_util/test_exit.py	2024-02-22 18:17:15.404946066 -0600
@@ -36,40 +36,28 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-"""
+'''
 Test file for the util m5 exit assembly instruction.
-"""
+'''
 import re
+import os
 from testlib import *
 
 m5_exit_regex = re.compile(
-    r"Exiting @ tick \d* because m5_exit instruction encountered"
+r'Exiting @ tick \d* because m5_exit instruction encountered'
 )
 
-if config.bin_path:
-    resource_path = config.bin_path
-else:
-    resource_path = joinpath(absdirpath(__file__), "..", "resources")
+path = joinpath(config.bin_path, 'test-progs', 'hello', 'bin', 'x86', 'linux')
+filename = 'm5_exit'
+url = (config.resource_url + '/test-progs/m5-exit/bin/x86/linux/m5_exit')
+test_program = DownloadedProgram(url, path, filename)
 
 a = verifier.MatchRegex(m5_exit_regex)
 gem5_verify_config(
-    name="m5_exit_test",
+    name='m5_exit_test',
     verifiers=[a],
-    fixtures=(),
-    config=joinpath(
-        config.base_dir,
-        "tests",
-        "gem5",
-        "configs",
-        "components-library",
-        "simple_binary_run.py",
-    ),
-    config_args=[
-        "x86-m5-exit",
-        "atomic",
-        "--override-download",
-        "--resource-directory",
-        resource_path,
-    ],
-    valid_isas=(constants.gcn3_x86_tag,),
+    fixtures=(test_program,),
+    config=os.path.join(config.base_dir, 'configs', 'example','se.py'),
+    config_args=['--cmd', joinpath(test_program.path, filename)],
+    valid_isas=(constants.gcn3_x86_tag,)
 )
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/parsec-benchmarks/test_parsec.py gem5-SALAM/tests/gem5/parsec-benchmarks/test_parsec.py
--- gem5/tests/gem5/parsec-benchmarks/test_parsec.py	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/gem5/parsec-benchmarks/test_parsec.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,242 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os
-
-from testlib import *
-
-if config.bin_path:
-    resource_path = config.bin_path
-else:
-    resource_path = joinpath(absdirpath(__file__), "..", "resources")
-
-
-def test_parsec(
-    boot_cpu: str,
-    detailed_cpu: str,
-    num_cpus: int,
-    mem_system: str,
-    benchmark: str,
-    size: str,
-    length: str,
-):
-
-    if (boot_cpu == "kvm" or detailed_cpu == "kvm") and not os.access(
-        "/dev/kvm", mode=os.R_OK | os.W_OK
-    ):
-        # Don't run the tests if KVM is unavailable.
-        return
-
-
-    if mem_system == "mesi_two_level":
-        protocol_to_use="MESI_Two_Level"
-    else:
-        protocol_to_use=None
-
-    gem5_verify_config(
-        name="{}-boot-cpu_{}-detailed-cpu_{}-cores_{}_{}_{}_parsec-test"\
-            .format(
-                boot_cpu,
-                detailed_cpu,
-                str(num_cpus),
-                mem_system,
-                benchmark,
-                size,
-            ),
-        verifiers=(),
-        fixtures=(),
-        config=joinpath(
-            config.base_dir,
-            "tests",
-            "gem5",
-            "configs",
-            "components-library",
-            "parsec_disk_run.py",
-        ),
-        config_args=[
-            "--cpu",
-            detailed_cpu,
-            "--boot-cpu",
-            boot_cpu,
-            "--num-cpus",
-            str(num_cpus),
-            "--mem-system",
-            mem_system,
-            "--benchmark",
-            benchmark,
-            "--size",
-            size,
-            "--override-download",
-            "--resource-directory",
-            resource_path,
-        ],
-        valid_isas=(constants.x86_tag,),
-        valid_hosts=constants.supported_hosts,
-        protocol=protocol_to_use,
-        length=length,
-    )
-
-
-#### The very long (Weekly) tests ####
-
-# Note: The cross product of all possible PARSEC tests is huge, and there is
-# little value in doing all. Therefore a sensible selection covering all
-# benchmarks have been chosen.
-#
-# Note: At present the MESI_Two_Level protocol does not appear to work
-# correctly with the SwitchableProcessor. As such they are commented out. This
-# issue is documented here: https://gem5.atlassian.net/browse/GEM5-1085.
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="atomic",
-    num_cpus=2,
-    mem_system="classic",
-    benchmark="blackscholes",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="timing",
-#    num_cpus=1,
-#    mem_system="mesi_two_level",
-#    benchmark="bodytrack",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="o3",
-    num_cpus=1,
-    mem_system="classic",
-    benchmark="canneal",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="kvm",
-#    num_cpus=8,
-#    mem_system="mesi_two_level",
-#    benchmark="dedup",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="atomic",
-    num_cpus=2,
-    mem_system="classic",
-    benchmark="facesim",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="timing",
-#    num_cpus=1,
-#    mem_system="mesi_two_level",
-#    benchmark="ferret",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="o3",
-    num_cpus=1,
-    mem_system="classic",
-    benchmark="fluidanimate",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="kvm",
-#    num_cpus=8,
-#    mem_system="mesi_two_level",
-#    benchmark="freqmine",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="atomic",
-    num_cpus=2,
-    mem_system="classic",
-    benchmark="raytrace",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="timing",
-#    num_cpus=1,
-#    mem_system="mesi_two_level",
-#    benchmark="streamcluster",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-test_parsec(
-    boot_cpu="kvm",
-    detailed_cpu="o3",
-    num_cpus=1,
-    mem_system="classic",
-    benchmark="swaptions",
-    size="simsmall",
-    length=constants.very_long_tag,
-)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="kvm",
-#    num_cpus=8,
-#    mem_system="mesi_two_level",
-#    benchmark="vips",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
-
-#test_parsec(
-#    boot_cpu="kvm",
-#    detailed_cpu="timing",
-#    num_cpus=1,
-#    mem_system="mesi_two_level",
-#    benchmark="x264",
-#    size="simsmall",
-#    length=constants.very_long_tag,
-#)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/stats/test_hdf5.py gem5-SALAM/tests/gem5/stats/test_hdf5.py
--- gem5/tests/gem5/stats/test_hdf5.py	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/gem5/stats/test_hdf5.py	2024-02-22 18:17:15.404946066 -0600
@@ -1,5 +1,4 @@
 # Copyright (c) 2021 Huawei International
-# Copyright (c) 2021 Arm Limited
 # All rights reserved.
 #
 # The license below extends only to copyright in the software and shall
@@ -34,62 +33,33 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-"""
+'''
 Test file for the hdf5 stats.
 It just runs an SE simulation with the hdf5 stats and checks that the
 simulation succeeds and the stats file exists.
 No specific checks on the stats are performed.
-"""
+'''
 import re
 import os
 from testlib import *
 
-
-if config.bin_path:
-    resource_path = config.bin_path
-else:
-    resource_path = joinpath(absdirpath(__file__), '..', 'resources')
-
-def have_hdf5():
-    have_hdf5_file = os.path.join(
-        config.base_dir, "build", constants.arm_tag, "config", "have_hdf5.hh"
-    )
-    with open(have_hdf5_file) as f:
-        content = f.read()
-
-    result = re.match("#define HAVE_HDF5 ([0-1])", content)
-    if not result:
-        raise Exception(f"Unable to find the HAVE_HDF5 in {have_hdf5_file}")
-    else:
-        return result.group(1) == "1"
-
-
-if have_hdf5():
-    ok_exit_regex = re.compile(
-        r"Exiting @ tick \d+ because exiting with last active thread context"
-    )
-
-    stdout_verifier = verifier.MatchRegex(ok_exit_regex)
-    h5_verifier = verifier.CheckH5StatsExist()
-    gem5_verify_config(
-        name="hdf5_test",
-        verifiers=[stdout_verifier, h5_verifier],
-        fixtures=(),
-        config=joinpath(
-            config.base_dir,
-            "tests",
-            "gem5",
-            "configs",
-            "components-library",
-            "simple_binary_run.py",
-        ),
-        config_args=[
-            "arm-hello64-static",
-            "atomic",
-            "--override-download",
-            "--resource-directory",
-            resource_path,
-        ],
-        gem5_args=["--stats-file=h5://stats.h5"],
-        valid_isas=(constants.arm_tag,),
-    )
+ok_exit_regex = re.compile(
+r'Exiting @ tick \d+ because exiting with last active thread context'
+)
+
+path = joinpath(config.bin_path, 'test-progs', 'hello', 'bin', 'arm', 'linux')
+filename = 'hello'
+url = (config.resource_url + '/test-progs/hello/bin/arm/linux/hello')
+test_program = DownloadedProgram(url, path, filename)
+
+stdout_verifier = verifier.MatchRegex(ok_exit_regex)
+h5_verifier = verifier.CheckH5StatsExist()
+gem5_verify_config(
+    name='hdf5_test',
+    verifiers=[stdout_verifier, h5_verifier],
+    fixtures=(test_program,),
+    config=os.path.join(config.base_dir, 'configs', 'example','se.py'),
+    config_args=['--cmd', joinpath(test_program.path, filename)],
+    gem5_args=['--stats-file=h5://stats.h5'],
+    valid_isas=(constants.arm_tag,)
+)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/traffic_gen/test_memory_traffic_gen.py gem5-SALAM/tests/gem5/traffic_gen/test_memory_traffic_gen.py
--- gem5/tests/gem5/traffic_gen/test_memory_traffic_gen.py	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/gem5/traffic_gen/test_memory_traffic_gen.py	1969-12-31 18:00:00.000000000 -0600
@@ -1,84 +0,0 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-"""
-This tests the gem5 components library memory components with a simple traffic
-generator.
-
-TODO: At present all the Single Channel memory components are tested. This
-      should be expanded to included DRAMSIM3 memory systems.
-"""
-
-from testlib import *
-
-
-def test_memory(module: str, memory: str, *args) -> None:
-    gem5_verify_config(
-        name="test-memory-" + module + "." + memory,
-        fixtures=(),
-        verifiers=(),
-        config=joinpath(
-            config.base_dir,
-            "tests",
-            "gem5",
-            "configs",
-            "components-library",
-            "simple_traffic_run.py",
-        ),
-        config_args=[
-            module,
-            memory,
-        ]
-        + list(args),
-        valid_isas=(constants.null_tag,),
-        valid_hosts=constants.supported_hosts,
-        length=constants.quick_tag,
-    )
-
-
-test_memory(
-    "components_library.memory.single_channel",
-    "SingleChannelDDR3_1600",
-    "512MiB",
-)
-test_memory(
-    "components_library.memory.single_channel",
-    "SingleChannelDDR3_2133",
-    "512MiB",
-)
-test_memory(
-    "components_library.memory.single_channel",
-    "SingleChannelDDR4_2400",
-    "512MiB",
-)
-test_memory(
-    "components_library.memory.single_channel",
-    "SingleChannelLPDDR3_1600",
-    "512MiB",
-)
-test_memory(
-    "components_library.memory.single_channel", "SingleChannelHBM", "512MiB"
-)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/verifier.py gem5-SALAM/tests/gem5/verifier.py
--- gem5/tests/gem5/verifier.py	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/gem5/verifier.py	2024-02-22 18:17:15.404946066 -0600
@@ -154,8 +154,6 @@
             re.compile("^info: Standard input is not a terminal"),
             re.compile("^Couldn't unlink "),
             re.compile("^Using GPU kernel code file\(s\) "),
-            re.compile("^.* not found locally\. Downloading"),
-            re.compile("^Finished downloading"),
         ]
 
 class MatchStdoutNoPerf(MatchStdout):
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/x86-boot-tests/run_exit.py gem5-SALAM/tests/gem5/x86-boot-tests/run_exit.py
--- gem5/tests/gem5/x86-boot-tests/run_exit.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tests/gem5/x86-boot-tests/run_exit.py	2024-02-22 18:17:15.404946066 -0600
@@ -0,0 +1,78 @@
+# Copyright (c) 2016 Jason Lowe-Power
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import argparse
+import sys
+import os
+
+import m5
+import m5.ticks
+from m5.objects import *
+
+sys.path.append(os.path.dirname(__file__) + '/system')
+sys.path.append(os.path.dirname(__file__) + '/../../../configs/common/')
+from system import *
+
+parser = argparse.ArgumentParser(description="")
+parser.add_argument('--kernel', type=str)
+parser.add_argument('--disk', type=str)
+parser.add_argument('--cpu-type', choices=['atomic', 'kvm', 'o3', 'simple',])
+parser.add_argument('--num-cpus', type=int)
+parser.add_argument('--boot-type', choices=['init', 'systemd',])
+
+args = parser.parse_args()
+
+# create the system we are going to simulate
+system = MySystem(args.kernel, args.disk, args.cpu_type, args.num_cpus)
+
+if args.boot_type == "init":
+    # Simply run "exit.sh"
+    system.workload.command_line += ' init=/root/exit.sh'
+else:
+    if args.boot_type != "systemd":
+        m5.fatal("Bad option for boot_type. init or systemd.")
+
+# set up the root SimObject and start the simulation
+root = Root(full_system = True, system = system)
+
+if system.getHostParallel():
+    # Required for running kvm on multiple host cores.
+    # Uses gem5's parallel event queue feature
+    # Note: The simulator is quite picky about this number!
+    root.sim_quantum = int(1e9) # 1 ms
+
+# instantiate all of the objects we've created above
+m5.instantiate()
+
+print("Running the simulation")
+exit_event = m5.simulate()
+
+if exit_event.getCause() != "m5_exit instruction encountered":
+    print("Failed to exit correctly")
+    exit(1)
+else:
+    print("Success!")
+    exit(0)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/x86-boot-tests/system/caches.py gem5-SALAM/tests/gem5/x86-boot-tests/system/caches.py
--- gem5/tests/gem5/x86-boot-tests/system/caches.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tests/gem5/x86-boot-tests/system/caches.py	2024-02-22 18:17:15.404946066 -0600
@@ -0,0 +1,143 @@
+# Copyright (c) 2016 Jason Lowe-Power
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+""" Caches with options for a simple gem5 configuration script
+
+This file contains L1 I/D and L2 caches to be used in the simple
+gem5 configuration script.
+"""
+
+import m5
+from m5.objects import Cache, L2XBar, StridePrefetcher, SubSystem
+from m5.params import AddrRange, AllMemory, MemorySize
+from m5.util.convert import toMemorySize
+
+# Some specific options for caches
+# For all options see src/mem/cache/BaseCache.py
+
+class PrefetchCache(Cache):
+
+    def __init__(self, options):
+        super(PrefetchCache, self).__init__()
+
+class L1Cache(PrefetchCache):
+    """Simple L1 Cache with default values"""
+
+    assoc = 8
+    tag_latency = 1
+    data_latency = 1
+    response_latency = 1
+    mshrs = 16
+    tgts_per_mshr = 20
+    writeback_clean = True
+
+    def __init__(self, options=None):
+        super(L1Cache, self).__init__(options)
+        pass
+
+    def connectBus(self, bus):
+        """Connect this cache to a memory-side bus"""
+        self.mem_side = bus.slave
+
+    def connectCPU(self, cpu):
+        """Connect this cache's port to a CPU-side port
+           This must be defined in a subclass"""
+        raise NotImplementedError
+
+class L1ICache(L1Cache):
+    """Simple L1 instruction cache with default values"""
+
+    # Set the size
+    size = '32kB'
+
+    def __init__(self, opts=None):
+        super(L1ICache, self).__init__(opts)
+
+    def connectCPU(self, cpu):
+        """Connect this cache's port to a CPU icache port"""
+        self.cpu_side = cpu.icache_port
+
+class L1DCache(L1Cache):
+    """Simple L1 data cache with default values"""
+
+    # Set the size
+    size = '32kB'
+
+    def __init__(self, opts=None):
+        super(L1DCache, self).__init__(opts)
+
+    def connectCPU(self, cpu):
+        """Connect this cache's port to a CPU dcache port"""
+        self.cpu_side = cpu.dcache_port
+
+class MMUCache(Cache):
+    # Default parameters
+    size = '8kB'
+    assoc = 4
+    tag_latency = 1
+    data_latency = 1
+    response_latency = 1
+    mshrs = 20
+    tgts_per_mshr = 12
+    writeback_clean = True
+
+    def __init__(self):
+        super(MMUCache, self).__init__()
+
+    def connectCPU(self, cpu):
+        """Connect the CPU itb and dtb to the cache
+           Note: This creates a new crossbar
+        """
+        self.mmubus = L2XBar()
+        self.cpu_side = self.mmubus.master
+        cpu.mmu.connectWalkerPorts(
+            self.mmubus.slave, self.mmubus.slave)
+
+    def connectBus(self, bus):
+        """Connect this cache to a memory-side bus"""
+        self.mem_side = bus.slave
+
+class L2Cache(PrefetchCache):
+    """Simple L2 Cache with default values"""
+
+    # Default parameters
+    size = '256kB'
+    assoc = 16
+    tag_latency = 10
+    data_latency = 10
+    response_latency = 1
+    mshrs = 20
+    tgts_per_mshr = 12
+    writeback_clean = True
+
+    def __init__(self, opts=None):
+        super(L2Cache, self).__init__(opts)
+
+    def connectCPUSideBus(self, bus):
+        self.cpu_side = bus.master
+
+    def connectMemSideBus(self, bus):
+        self.mem_side = bus.slave
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/x86-boot-tests/system/system.py gem5-SALAM/tests/gem5/x86-boot-tests/system/system.py
--- gem5/tests/gem5/x86-boot-tests/system/system.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tests/gem5/x86-boot-tests/system/system.py	2024-02-22 18:17:15.404946066 -0600
@@ -0,0 +1,322 @@
+# Copyright (c) 2016 Jason Lowe-Power
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import m5
+from m5.objects import *
+from m5.util import convert
+from caches import *
+import sys
+
+class MySystem(System):
+
+    def __init__(self, kernel, disk, cpu_type, num_cpus):
+        super(MySystem, self).__init__()
+
+        self.workload = X86FsLinux()
+        self._host_parallel = cpu_type == "kvm"
+
+        # Set up the clock domain and the voltage domain
+        self.clk_domain = SrcClockDomain()
+        self.clk_domain.clock = '3GHz'
+        self.clk_domain.voltage_domain = VoltageDomain()
+
+        self.mem_ranges = [AddrRange(Addr('3GB')), # All data
+                           AddrRange(0xC0000000, size=0x100000), # For I/0
+                           ]
+
+        # Create the main memory bus
+        # This connects to main memory
+        self.membus = SystemXBar(width = 64) # 64-byte width
+        self.membus.badaddr_responder = BadAddr()
+        self.membus.default = Self.badaddr_responder.pio
+
+        # Set up the system port for functional access from the simulator
+        self.system_port = self.membus.slave
+
+        self.initFS(self.membus, num_cpus)
+
+        # Replace these paths with the path to your disk images.
+        # The first disk is the root disk. The second could be used for swap
+        # or anything else.
+        self.setDiskImages(disk, disk)
+
+        # Change this path to point to the kernel you want to use
+        self.workload.object_file = kernel
+        # Options specified on the kernel command line
+        boot_options = ['earlyprintk=ttyS0', 'console=ttyS0', 'lpj=7999923',
+                         'root=/dev/hda1']
+
+        self.workload.command_line = ' '.join(boot_options)
+
+        # Create the CPUs for our system.
+        self.createCPU(cpu_type, num_cpus)
+
+        # Create the cache heirarchy for the system.
+        self.createCacheHierarchy()
+
+        # Set up the interrupt controllers for the system (x86 specific)
+        self.setupInterrupts()
+
+        self.createMemoryControllersDDR3()
+
+        if self._host_parallel:
+            # To get the KVM CPUs to run on different host CPUs
+            # Specify a different event queue for each CPU
+            for i,cpu in enumerate(self.cpu):
+                for obj in cpu.descendants():
+                    obj.eventq_index = 0
+                cpu.eventq_index = i + 1
+
+    def getHostParallel(self):
+        return self._host_parallel
+
+    def totalInsts(self):
+        return sum([cpu.totalInsts() for cpu in self.cpu])
+
+    def createCPU(self, cpu_type, num_cpus):
+        if cpu_type == "atomic":
+            self.cpu = [AtomicSimpleCPU(cpu_id = i)
+                              for i in range(num_cpus)]
+            self.mem_mode = 'atomic'
+        elif cpu_type == "kvm":
+            # Note KVM needs a VM and atomic_noncaching
+            self.cpu = [X86KvmCPU(cpu_id = i)
+                        for i in range(num_cpus)]
+            self.kvm_vm = KvmVM()
+            self.mem_mode = 'atomic_noncaching'
+        elif cpu_type == "o3":
+            self.cpu = [DerivO3CPU(cpu_id = i)
+                        for i in range(num_cpus)]
+            self.mem_mode = 'timing'
+        elif cpu_type == "simple":
+            self.cpu = [TimingSimpleCPU(cpu_id = i)
+                        for i in range(num_cpus)]
+            self.mem_mode = 'timing'
+        else:
+            m5.fatal("No CPU type {}".format(cpu_type))
+
+        for c in self.cpu:
+            c.createThreads()
+
+    def setDiskImages(self, img_path_1, img_path_2):
+        disk0 = CowDisk(img_path_1)
+        disk2 = CowDisk(img_path_2)
+        self.pc.south_bridge.ide.disks = [disk0, disk2]
+
+    def createCacheHierarchy(self):
+        for cpu in self.cpu:
+            # Create a memory bus, a coherent crossbar, in this case
+            cpu.l2bus = L2XBar()
+
+            # Create an L1 instruction and data cache
+            cpu.icache = L1ICache()
+            cpu.dcache = L1DCache()
+            cpu.mmucache = MMUCache()
+
+            # Connect the instruction and data caches to the CPU
+            cpu.icache.connectCPU(cpu)
+            cpu.dcache.connectCPU(cpu)
+            cpu.mmucache.connectCPU(cpu)
+
+            # Hook the CPU ports up to the l2bus
+            cpu.icache.connectBus(cpu.l2bus)
+            cpu.dcache.connectBus(cpu.l2bus)
+            cpu.mmucache.connectBus(cpu.l2bus)
+
+            # Create an L2 cache and connect it to the l2bus
+            cpu.l2cache = L2Cache()
+            cpu.l2cache.connectCPUSideBus(cpu.l2bus)
+
+            # Connect the L2 cache to the L3 bus
+            cpu.l2cache.connectMemSideBus(self.membus)
+
+    def setupInterrupts(self):
+        for cpu in self.cpu:
+            # create the interrupt controller CPU and connect to the membus
+            cpu.createInterruptController()
+
+            # For x86 only, connect interrupts to the memory
+            # Note: these are directly connected to the memory bus and
+            #       not cached
+            cpu.interrupts[0].pio = self.membus.master
+            cpu.interrupts[0].int_master = self.membus.slave
+            cpu.interrupts[0].int_slave = self.membus.master
+
+
+    def createMemoryControllersDDR3(self):
+        self._createMemoryControllers(1, DDR3_1600_8x8)
+
+    def _createMemoryControllers(self, num, cls):
+        self.mem_cntrls = [
+            MemCtrl(dram = cls(range = self.mem_ranges[0]),
+                    port = self.membus.master)
+            for i in range(num)
+        ]
+
+    def initFS(self, membus, cpus):
+        self.pc = Pc()
+
+        # Constants similar to x86_traits.hh
+        IO_address_space_base = 0x8000000000000000
+        pci_config_address_space_base = 0xc000000000000000
+        interrupts_address_space_base = 0xa000000000000000
+        APIC_range_size = 1 << 12;
+
+        # North Bridge
+        self.iobus = IOXBar()
+        self.bridge = Bridge(delay='50ns')
+        self.bridge.master = self.iobus.slave
+        self.bridge.slave = membus.master
+        # Allow the bridge to pass through:
+        #  1) kernel configured PCI device memory map address: address range
+        #  [0xC0000000, 0xFFFF0000). (The upper 64kB are reserved for m5ops.)
+        #  2) the bridge to pass through the IO APIC (two pages, already
+        #     contained in 1),
+        #  3) everything in the IO address range up to the local APIC, and
+        #  4) then the entire PCI address space and beyond.
+        self.bridge.ranges = \
+            [
+            AddrRange(0xC0000000, 0xFFFF0000),
+            AddrRange(IO_address_space_base,
+                      interrupts_address_space_base - 1),
+            AddrRange(pci_config_address_space_base,
+                      Addr.max)
+            ]
+
+        # Create a bridge from the IO bus to the memory bus to allow access
+        # to the local APIC (two pages)
+        self.apicbridge = Bridge(delay='50ns')
+        self.apicbridge.slave = self.iobus.master
+        self.apicbridge.master = membus.slave
+        self.apicbridge.ranges = [AddrRange(interrupts_address_space_base,
+                                            interrupts_address_space_base +
+                                            cpus * APIC_range_size
+                                            - 1)]
+
+        # connect the io bus
+        self.pc.attachIO(self.iobus)
+
+        # Add a tiny cache to the IO bus.
+        # This cache is required for the classic memory model for coherence
+        self.iocache = Cache(assoc=8,
+                            tag_latency = 50,
+                            data_latency = 50,
+                            response_latency = 50,
+                            mshrs = 20,
+                            size = '1kB',
+                            tgts_per_mshr = 12,
+                            addr_ranges = self.mem_ranges)
+        self.iocache.cpu_side = self.iobus.master
+        self.iocache.mem_side = self.membus.slave
+
+        ###############################################
+
+        # Add in a Bios information structure.
+        self.workload.smbios_table.structures = [X86SMBiosBiosInformation()]
+
+        # Set up the Intel MP table
+        base_entries = []
+        ext_entries = []
+        for i in range(cpus):
+            bp = X86IntelMPProcessor(
+                    local_apic_id = i,
+                    local_apic_version = 0x14,
+                    enable = True,
+                    bootstrap = (i ==0))
+            base_entries.append(bp)
+        io_apic = X86IntelMPIOAPIC(
+                id = cpus,
+                version = 0x11,
+                enable = True,
+                address = 0xfec00000)
+        self.pc.south_bridge.io_apic.apic_id = io_apic.id
+        base_entries.append(io_apic)
+        pci_bus = X86IntelMPBus(bus_id = 0, bus_type='PCI   ')
+        base_entries.append(pci_bus)
+        isa_bus = X86IntelMPBus(bus_id = 1, bus_type='ISA   ')
+        base_entries.append(isa_bus)
+        connect_busses = X86IntelMPBusHierarchy(bus_id=1,
+                subtractive_decode=True, parent_bus=0)
+        ext_entries.append(connect_busses)
+        pci_dev4_inta = X86IntelMPIOIntAssignment(
+                interrupt_type = 'INT',
+                polarity = 'ConformPolarity',
+                trigger = 'ConformTrigger',
+                source_bus_id = 0,
+                source_bus_irq = 0 + (4 << 2),
+                dest_io_apic_id = io_apic.id,
+                dest_io_apic_intin = 16)
+        base_entries.append(pci_dev4_inta)
+        def assignISAInt(irq, apicPin):
+            assign_8259_to_apic = X86IntelMPIOIntAssignment(
+                    interrupt_type = 'ExtInt',
+                    polarity = 'ConformPolarity',
+                    trigger = 'ConformTrigger',
+                    source_bus_id = 1,
+                    source_bus_irq = irq,
+                    dest_io_apic_id = io_apic.id,
+                    dest_io_apic_intin = 0)
+            base_entries.append(assign_8259_to_apic)
+            assign_to_apic = X86IntelMPIOIntAssignment(
+                    interrupt_type = 'INT',
+                    polarity = 'ConformPolarity',
+                    trigger = 'ConformTrigger',
+                    source_bus_id = 1,
+                    source_bus_irq = irq,
+                    dest_io_apic_id = io_apic.id,
+                    dest_io_apic_intin = apicPin)
+            base_entries.append(assign_to_apic)
+        assignISAInt(0, 2)
+        assignISAInt(1, 1)
+        for i in range(3, 15):
+            assignISAInt(i, i)
+        self.workload.intel_mp_table.base_entries = base_entries
+        self.workload.intel_mp_table.ext_entries = ext_entries
+
+        entries = \
+           [
+            # Mark the first megabyte of memory as reserved
+            X86E820Entry(addr = 0, size = '639kB', range_type = 1),
+            X86E820Entry(addr = 0x9fc00, size = '385kB', range_type = 2),
+            # Mark the rest of physical memory as available
+            X86E820Entry(addr = 0x100000,
+                    size = '%dB' % (self.mem_ranges[0].size() - 0x100000),
+                    range_type = 1),
+            ]
+
+        # Reserve the last 16kB of the 32-bit address space for m5ops
+        entries.append(X86E820Entry(addr = 0xFFFF0000, size = '64kB',
+                                    range_type=2))
+
+        self.workload.e820_table.entries = entries
+
+class CowDisk(IdeDisk):
+    def __init__(self, filename):
+        super(CowDisk, self).__init__()
+        self.driveID = 'device0'
+        self.image = CowDiskImage(child=RawDiskImage(read_only=True),
+                                  read_only=False)
+        self.image.child.image_file = filename
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/gem5/x86-boot-tests/test_linux_boot.py gem5-SALAM/tests/gem5/x86-boot-tests/test_linux_boot.py
--- gem5/tests/gem5/x86-boot-tests/test_linux_boot.py	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/gem5/x86-boot-tests/test_linux_boot.py	2024-02-22 18:17:15.404946066 -0600
@@ -1,5 +1,5 @@
-# Copyright (c) 2021 The Regents of the University of California
-# All rights reserved.
+# Copyright (c) 2020 The Regents of the University of California
+# All Rights Reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions are
@@ -24,244 +24,56 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-from typing import Optional
-import re
-
+import os
 from testlib import *
 
+
 if config.bin_path:
-    resource_path = config.bin_path
+    base_path = config.bin_path
 else:
-    resource_path = joinpath(absdirpath(__file__), "..", "resources")
+    base_path = joinpath(absdirpath(__file__), '..', 'resources',
+            'ubuntu-boot')
 
+image_url = config.resource_url + '/images/x86/ubuntu-18-04/base.img.gz'
+kernel_url = config.resource_url + '/kernels/x86/static/vmlinux-4.19.83'
 
-def test_boot(
-    cpu: str,
-    num_cpus: int,
-    mem_system: str,
-    length: str,
-    boot_type: Optional[str] = "init",
-    to_tick: Optional[int] = None,
-):
+image_name = 'ubuntu-18-04-base.img'
+kernel_name = 'vmlinux-4.19.83' # 4.19 is LTS (Projected EOL: Dec, 2020)
 
-    name = "{}-cpu_{}-cores_{}_{}_x86-boot-test".format(
-        cpu, str(num_cpus), mem_system, boot_type
-    )
-    verifiers = []
-    additional_config_args = []
+image = DownloadedProgram(image_url, base_path, image_name, True)
+kernel = DownloadedProgram(kernel_url, base_path, kernel_name)
 
-    if to_tick != None:
-        name += "_to-tick"
-        exit_regex = re.compile(
-            "Exiting @ tick {} because simulate\(\) limit reached".format(
-                str(to_tick)
-            )
-        )
-        verifiers.append(verifier.MatchRegex(exit_regex))
-        additional_config_args.append("--tick-exit")
-        additional_config_args.append(str(to_tick))
-
-    if mem_system == "mesi_two_level":
-        protocol_to_use="MESI_Two_Level"
-        isa_to_use=constants.x86_tag
-    elif mem_system == "mi_example":
-        protocol_to_use=None
-        isa_to_use=constants.x86_tag
-    else:
-        protocol_to_use=None
-        isa_to_use=constants.gcn3_x86_tag
+def support_kvm():
+    return os.access("/dev/kvm", os.R_OK | os.W_OK)
 
+def test_boot(cpu_type, num_cpus, boot_type, host):
     gem5_verify_config(
-        name=name,
-        verifiers=verifiers,
-        fixtures=(),
-        config=joinpath(
-            config.base_dir,
-            "tests",
-            "gem5",
-            "configs",
-            "components-library",
-            "boot_exit_disk_run.py",
-        ),
-        config_args=[
-            "--cpu",
-            cpu,
-            "--num-cpus",
-            str(num_cpus),
-            "--mem-system",
-            mem_system,
-            "--boot-type",
-            boot_type,
-            "--override-download",
-            "--resource-directory",
-            resource_path,
-        ]
-        + additional_config_args,
-        valid_isas=(isa_to_use,),
-        valid_hosts=constants.supported_hosts,
-        protocol=protocol_to_use,
-        length=length,
+        name = 'test-ubuntu_boot-' + cpu_type + '_cpu-' + num_cpus + '_cpus-'
+               + boot_type + '_boot',
+        verifiers = (),
+        fixtures = (image, kernel,),
+        config = joinpath(joinpath(absdirpath(__file__), 'run_exit.py')),
+        config_args = [
+            '--kernel', joinpath(base_path, kernel_name),
+            '--disk', joinpath(base_path, image_name),
+            '--cpu-type', cpu_type,
+            '--num-cpus', num_cpus,
+            '--boot-type', boot_type,
+        ],
+        valid_isas = (constants.x86_tag,),
+        valid_hosts = host,
+        length = constants.long_tag,
     )
 
-
-#### The quick (pre-submit/Kokoro) tests ####
-
-test_boot(
-    cpu="atomic",
-    num_cpus=1,
-    mem_system="classic",
-    to_tick=10000000000, #Simulates 1/100th of a second.
-    length=constants.quick_tag,
-)
-
-test_boot(
-    cpu="timing",
-    num_cpus=1,
-    mem_system="classic",
-    to_tick=10000000000,
-    length=constants.quick_tag,
-)
-
-test_boot(
-    cpu="atomic",
-    num_cpus=4,
-    mem_system="classic",
-    to_tick=10000000000,
-    length=constants.quick_tag,
-)
-
-test_boot(
-    cpu="o3",
-    num_cpus=1,
-    mem_system="classic",
-    to_tick=10000000000,
-    length=constants.quick_tag,
-)
-
-#### The long (Nightly) tests ####
-
-test_boot(
-    cpu="atomic",
-    num_cpus=1,
-    mem_system="classic",
-    boot_type="init",
-    length=constants.long_tag,
-)
-
-test_boot(
-    cpu="timing",
-    num_cpus=1,
-    mem_system="mesi_two_level",
-    boot_type="init",
-    length=constants.long_tag,
-)
-
-test_boot(
-    cpu="timing",
-    num_cpus=1,
-    mem_system="mi_example",
-    boot_type="init",
-    length=constants.long_tag,
-)
-
-test_boot(
-    cpu="atomic",
-    num_cpus=4,
-    mem_system="classic",
-    boot_type="systemd",
-    length=constants.long_tag,
-)
-
-test_boot(
-    cpu="o3",
-    num_cpus=2,
-    mem_system="mesi_two_level",
-    boot_type="init",
-    length=constants.long_tag,
-)
-
-#### The very-long (Weekly) tests ####
-
-# This maps the cross product of the test to run. As 'init' is a subset
-# of the 'systemd' boot-type, we only run 'systemd'. A test with a value of
-# 'False' will not be run. This is either due to 'Timeout' (this test cannot
-# complete within 12 hours), this setup is not supported at present, or a
-# simulation crash.
-run_map = {
-    # The Memory System.
-    "classic": {
-        # The CPU Type.
-        "atomic": {
-            # The number of cores.
-            1: True,
-            2: True,
-            4: False,  # We already run this in the long (Nightly) tests.
-            8: True,
-        },
-        "timing": {
-            1: True,
-            2: False,  # Timeout
-            4: False,  # Timeout
-            8: False,  # Timeout
-        },
-        "o3": {
-            1: False,  # Timeout
-            2: False,  # Not Supported
-            4: False,  # Not Supported
-            8: False,  # Not Supported
-        },
-    },
-    "mi_example": {
-        "atomic": {
-            1: False,  # Not Supported
-            2: False,  # Not Supported
-            4: False,  # Not Supported
-            8: False,  # Not Supported
-        },
-        "timing": {
-            1: True,
-            2: True,
-            4: True,
-            8: True,
-        },
-        "o3": {
-            1: False,  # Timeout
-            2: False,  # Timeout
-            4: False,  # Timeout
-            8: False,  # Timeout
-        },
-    },
-    "mesi_two_level": {
-        "atomic": {
-            1: False,  # Not Supported
-            2: False,  # Not Supported
-            4: False,  # Not Supported
-            8: False,  # Not Supported
-        },
-        "timing": {
-            1: True,
-            2: True,
-            4: True,
-            8: True,
-        },
-        "o3": {
-            1: False,  # Timeout
-            2: False,  # Timeout
-            4: False,  # Simulation Crash
-            8: False,  # Simulation Crash
-        },
-    },
-}
-
-for mem_system in run_map:
-    for cpu in run_map[mem_system]:
-        for num_cpus in run_map[mem_system][cpu]:
-            if run_map[mem_system][cpu][num_cpus]:
-
-                test_boot(
-                    cpu=cpu,
-                    num_cpus=num_cpus,
-                    mem_system=mem_system,
-                    boot_type="systemd",
-                    length=constants.very_long_tag,
-                )
+# Test every CPU type
+cpu_types = ('atomic', 'simple',)
+for cpu_type in cpu_types:
+    test_boot(cpu_type, '1', 'init', constants.supported_hosts)
+
+# Test a multicore system
+test_boot('atomic', '4', 'systemd', constants.supported_hosts)
+
+#KVM
+if(support_kvm()):
+    test_boot('kvm', '1', 'init', (constants.host_x86_64_tag,))
+    test_boot('kvm', '4', 'systemd', (constants.host_x86_64_tag,))
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/jenkins/gem5art-tests.sh gem5-SALAM/tests/jenkins/gem5art-tests.sh
--- gem5/tests/jenkins/gem5art-tests.sh	2024-02-22 18:25:43.995606621 -0600
+++ gem5-SALAM/tests/jenkins/gem5art-tests.sh	2024-02-22 18:17:15.408946087 -0600
@@ -43,13 +43,10 @@
 python3 -m venv .pyenv
 source .pyenv/bin/activate
 
-# The 20.04_all-dependencies image has a slightly outdated version of pip which
-# causes problems when trying to install the celery package. The error
-# is `invalid command 'bdist_wheel'`, which can be resolved by upgrading pip
-# prior to installing the modules. More information on this error is found
-# here:
-# https://stackoverflow.com/questions/34819221/why-is-python-setup-py-saying-invalid-command-bdist-wheel-on-travis-ci
- pip install --upgrade pip
+# The 18.04_all-depenencies image has an outdated version of setuptools. We
+# update it here. Attempts to fix this via the Dockerfile have been
+# unsuccessful.
+pip install -U setuptools
 
 # Install the packages
 pip install -e util/gem5art/artifact
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/nightly.sh gem5-SALAM/tests/nightly.sh
--- gem5/tests/nightly.sh	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/tests/nightly.sh	2024-02-22 18:17:15.408946087 -0600
@@ -80,21 +80,4 @@
 # Run the gem5 long tests.
 docker run -u $UID:$GID --volume "${gem5_root}":"${gem5_root}" -w \
     "${gem5_root}"/tests --rm gcr.io/gem5-test/ubuntu-20.04_all-dependencies \
-        ./main.py run --length long -j${threads} -t${threads}
-
-# Run the GPU tests.
-
-# For the GPU tests we compile and run GCN3_X86 inside a gcn-gpu container.
-docker pull gcr.io/gem5-test/gcn-gpu:latest
-docker run --rm -u $UID:$GUID --volume "${gem5_root}":"${gem5_root}" -w \
-    "${gem5_root}" gcr.io/gem5-test/gcn-gpu:latest bash -c \
-    "scons build/GCN3_X86/gem5.opt -j${threads} \
-        || (rm -rf build && scons build/GCN3_X86/gem5.opt -j${threads})"
-
-wget -qN http://dist.gem5.org/dist/develop/test-progs/square/square
-
-mkdir -p tests/testing-results
-
-docker run --rm -u $UID:$GUID --volume "${gem5_root}":"${gem5_root}" -w \
-    "${gem5_root}" gcr.io/gem5-test/gcn-gpu:latest build/GCN3_X86/gem5.opt \
-    configs/example/apu_se.py -n3 -c square
+        ./main.py run --length long -j${threads} -t${threads}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/run_pyunit.py gem5-SALAM/tests/run_pyunit.py
--- gem5/tests/run_pyunit.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/tests/run_pyunit.py	2024-02-22 18:17:15.408946087 -0600
@@ -35,9 +35,8 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-import sys
-
 if __name__ == "__main__":
+    import sys
     print("ERROR: This file must be run from gem5.", file=sys.stderr)
     sys.exit(1)
 
@@ -48,9 +47,5 @@
     tests = loader.discover("pyunit", pattern='pyunit*.py')
 
     runner = unittest.runner.TextTestRunner(verbosity=2)
-    result = runner.run(tests)
-    if result.wasSuccessful():
-        sys.exit(0)
-    else:
-        sys.exit(1)
+    runner.run(tests)
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tests/weekly.sh gem5-SALAM/tests/weekly.sh
--- gem5/tests/weekly.sh	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/tests/weekly.sh	1969-12-31 18:00:00.000000000 -0600
@@ -1,45 +0,0 @@
-#!/bin/bash
-
-# Copyright (c) 2021 The Regents of the University of California
-# All Rights Reserved.
-#
-# Redistribution and use in source and binary forms, with or without
-# modification, are permitted provided that the following conditions are
-# met: redistributions of source code must retain the above copyright
-# notice, this list of conditions and the following disclaimer;
-# redistributions in binary form must reproduce the above copyright
-# notice, this list of conditions and the following disclaimer in the
-# documentation and/or other materials provided with the distribution;
-# neither the name of the copyright holders nor the names of its
-# contributors may be used to endorse or promote products derived from
-# this software without specific prior written permission.
-#
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-set -e
-set -x
-
-dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
-gem5_root="${dir}/.."
-
-# We assume the lone argument is the number of threads. If no argument is
-# given we default to one.
-threads=1
-if [[ $# -gt 0 ]]; then
-    threads=$1
-fi
-
-# Run the gem5 very-long tests.
-docker run -u $UID:$GID --volume "${gem5_root}":"${gem5_root}" -w \
-    "${gem5_root}"/tests --rm gcr.io/gem5-test/ubuntu-20.04_all-dependencies \
-        ./main.py run --length very-long -j${threads} -t${threads}
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/cactiStats.sh gem5-SALAM/tools/cacti-SALAM/cactiStats.sh
--- gem5/tools/cacti-SALAM/cactiStats.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/cactiStats.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,113 @@
+#!/bin/bash
+
+CACHE_SIZE=$1
+LINE_SIZE=64
+ASSOCIATIVITY=1
+RW_PORTS=$2
+EXCL_READ_PORTS=0
+EXCL_WRITE_PORTS=0
+SINGLE_ENDED_READ_PORTS=0
+SEARCH_PORTS=0
+BANKS=1
+TECH_NODE=45
+OUTPUT_WIDTH=512
+SPECIFIC_TAG=0
+TAG_WIDTH=0
+ACCESS_MODE=2
+CACHE=0
+MAIN_MEM=0
+OBJ_FUNC_DELAY=0
+OBJ_FUNC_DYNAMIC_POWER=0
+OBJ_FUNC_LEAKAGE_POWER=100
+OBJ_FUNC_CYCLE_TIME=0
+OBJ_FUNC_AREA=0
+DEV_FUNC_DELAY=20
+DEV_FUNC_DYNAMIC_POWER=100000
+DEV_FUNC_LEAKAGE_POWER=100000
+DEV_FUNC_AREA=1000000
+DEV_FUNC_CYCLE_TIME=1000000
+ED_ED2_NONE=2
+TEMP=300
+WT=0
+DATA_ARR_RAM_CELL_TECH_FLAVOR_IN=0
+DATA_ARR_PERI_GLOBAL_TECH_FLAVOR_IN=0
+TAG_ARR_RAM_CELL_TECH_FLAVOR_IN=0
+TAG_ARR_PERI_GLOBAL_TECH_FLAVOR_IN=0
+INTERCONNECT_PROJECTION_TYPE_IN=1
+WIRE_INSIDE_MAT_TYPE_IN=1
+WIRE_OUTSIDE_MAT_TYPE_IN=1
+REPEATERS_IN_HTREE_SEGMENTS_IN=1
+VERTICAL_HTREE_WIRES_OVER_THE_ARRAY_IN=0
+BROADCAST_ADDR_DATAIN_OVER_VERTICAL_HTREES_IN=0
+PAGE_SIZE_BITS_IN=0
+BURST_LENGTH_IN=8
+INTERNAL_PREFETCH_WIDTH_IN=8
+FORCE_WIRETYPE=1
+WIRETYPE=30
+FORCE_CONFIG=0
+NDWL=1
+NDBL=1
+NSPD=0
+NDCM=1
+NDSAM1=0
+NDSAM2=0
+ECC=0
+
+cd $M5_PATH/ext/mcpat/cacti
+
+./cacti $CACHE_SIZE \
+$LINE_SIZE \
+$ASSOCIATIVITY \
+$RW_PORTS \
+$EXCL_READ_PORTS \
+$EXCL_WRITE_PORTS \
+$SINGLE_ENDED_READ_PORTS \
+$SEARCH_PORTS \
+$BANKS \
+$TECH_NODE \
+$OUTPUT_WIDTH \
+$SPECIFIC_TAG \
+$TAG_WIDTH \
+$ACCESS_MODE \
+$CACHE \
+$MAIN_MEM \
+$OBJ_FUNC_DELAY \
+$OBJ_FUNC_DYNAMIC_POWER \
+$OBJ_FUNC_LEAKAGE_POWER \
+$OBJ_FUNC_CYCLE_TIME \
+$OBJ_FUNC_AREA \
+$DEV_FUNC_DELAY \
+$DEV_FUNC_DYNAMIC_POWER \
+$DEV_FUNC_LEAKAGE_POWER \
+$DEV_FUNC_AREA \
+$DEV_FUNC_CYCLE_TIME \
+$ED_ED2_NONE \
+$TEMP \
+$WT \
+$DATA_ARR_RAM_CELL_TECH_FLAVOR_IN \
+$DATA_ARR_PERI_GLOBAL_TECH_FLAVOR_IN \
+$TAG_ARR_RAM_CELL_TECH_FLAVOR_IN \
+$TAG_ARR_PERI_GLOBAL_TECH_FLAVOR_IN \
+$INTERCONNECT_PROJECTION_TYPE_IN \
+$WIRE_INSIDE_MAT_TYPE_IN \
+$WIRE_OUTSIDE_MAT_TYPE_IN \
+$REPEATERS_IN_HTREE_SEGMENTS_IN \
+$VERTICAL_HTREE_WIRES_OVER_THE_ARRAY_IN \
+$BROADCAST_ADDR_DATAIN_OVER_VERTICAL_HTREES_IN \
+$PAGE_SIZE_BITS_IN \
+$BURST_LENGTH_IN \
+$INTERNAL_PREFETCH_WIDTH_IN \
+$FORCE_WIRETYPE \
+$WIRETYPE \
+$FORCE_CONFIG \
+$NDWL \
+$NDBL \
+$NSPD \
+$NDCM \
+$NDSAM1 \
+$NDSAM2 \
+$ECC
+
+cd $M5_PATH/cacti-SALAM
+
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/cactiSweep.sh gem5-SALAM/tools/cacti-SALAM/cactiSweep.sh
--- gem5/tools/cacti-SALAM/cactiSweep.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/cactiSweep.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,11 @@
+#!/bin/bash
+
+input="benchmarks.list"
+while IFS= read -r line;
+do
+    [[ $line =~ ^#.* ]] && continue
+        python3 cactiWrapper.py $line
+        sleep 1
+    
+done < "$input"
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/cactiWrapper.py gem5-SALAM/tools/cacti-SALAM/cactiWrapper.py
--- gem5/tools/cacti-SALAM/cactiWrapper.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/cactiWrapper.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,79 @@
+import subprocess
+import sys
+import os
+import yaml
+import csv
+
+benchmark_config = str(sys.argv[1])
+bench_name = str(sys.argv[2])
+bench_subname = str(sys.argv[3])
+
+yaml_file = open(benchmark_config, 'r')
+yaml_data = yaml.load(yaml_file, Loader=yaml.FullLoader)
+cluster_data = yaml_data['acc_cluster']
+accelerators = list()
+memobjects = list()
+for acc in cluster_data:
+    accelerators.append(acc)
+    
+for params in accelerators:
+    for item in params.items():
+        for param_type in item:
+            if type(param_type) is list:
+                for params_list in param_type:
+                    if 'Var' in params_list.keys():  
+                        for mem_object in params_list.items():
+                            if mem_object[1][0]['Type'] == 'SPM':
+                                memobjects.append(mem_object[1][0])
+                            else:
+                                print("Streaming Buffer Found - Dumping Parameters")
+                                print(benchmark_config + " " + bench_name + " " + bench_subname)
+                                print(yaml.dump(mem_object[1][0]))
+
+process = subprocess.Popen(["./clearStats.sh"])
+process.wait()
+
+memobjectsList = []
+
+for element in memobjects:
+    memobjectsList.append(element['Name'])
+    with open("results/stdout.txt","a") as out, open("results/stderr.txt","a") as err:
+        # cacti has a lower limit of 2048 for size
+        if (element['Size'] < 2048):
+            element['Size'] = 2048
+        process = subprocess.Popen(["./cactiStats.sh", str(element['Size']), str(element['Ports'])], stdout=out, stderr=err)
+        process.wait()
+        out.write(element["Name"] + '(above) \n')
+        out.write("/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\ \n\n")
+
+process = subprocess.Popen(["./getcactiResults.sh"])
+process.wait()
+
+results_csv = list()
+with open('results/out.csv', 'r') as results_file:
+    results = csv.reader(results_file)
+    for row in results:
+        results_csv.append(row)
+
+results_csv[0].insert(0, "Benchmark")
+results_csv[0].insert(1, "Config")
+results_csv[0].insert(2, "Acc")
+
+index = 0
+for row in results_csv[1:]:
+    row.insert(0, str(bench_name))
+    row.insert(1, str(bench_subname))
+    row.insert(2, str(memobjectsList[index]))
+    index = index+1
+
+if(not os.path.exists('results/SALAM-out.csv')):
+    results_file = open('results/SALAM-out.csv', 'w+')
+    writer = csv.writer(results_file)
+    writer.writerow(results_csv[0])
+    results_file.close()
+
+
+with open('results/SALAM-out.csv', 'a') as results_file:
+    writer = csv.writer(results_file)
+    writer.writerows(results_csv[1:])
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/clearStats.sh gem5-SALAM/tools/cacti-SALAM/clearStats.sh
--- gem5/tools/cacti-SALAM/clearStats.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/clearStats.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,5 @@
+#!/bin/bash
+rm -f $M5_PATH/ext/mcpat/cacti/out.csv
+rm -f $M5_PATH/cacti-SALAM/results/out.csv
+rm -f $M5_PATH/cacti-SALAM/results/stderr.txt
+rm -f $M5_PATH/cacti-SALAM/results/stdout.txt
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/getcactiResults.sh gem5-SALAM/tools/cacti-SALAM/getcactiResults.sh
--- gem5/tools/cacti-SALAM/getcactiResults.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/getcactiResults.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,2 @@
+#!/bin/bash
+mv $M5_PATH/ext/mcpat/cacti/out.csv $M5_PATH/cacti-SALAM/results
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/.gitignore gem5-SALAM/tools/cacti-SALAM/.gitignore
--- gem5/tools/cacti-SALAM/.gitignore	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/.gitignore	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,2 @@
+results/*
+benchmarks.list
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/cacti-SALAM/setup-cacti-SALAM.sh gem5-SALAM/tools/cacti-SALAM/setup-cacti-SALAM.sh
--- gem5/tools/cacti-SALAM/setup-cacti-SALAM.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/cacti-SALAM/setup-cacti-SALAM.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,26 @@
+#!/bin/bash
+
+sudo apt-get install gcc-multilib g++-multilib
+
+sudo chmod u+x cactiStats.sh
+sudo chmod u+x cactiSweep.sh
+sudo chmod u+x clearStats.sh
+sudo chmod u+x getcactiResults.sh
+
+cd ../ext/mcpat/cacti
+
+make clean
+make all
+
+
+echo " "
+echo "Testing Install"
+echo " "
+
+sleep 1
+./cacti -infile cache.cfg
+
+echo "=================================================================="
+echo "Usage: ./cactiSweep config.yml bench_name config_name"
+echo "bench_name and config_name are only for grouping"
+#should make them optional at some point
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/hw_generator/generate_hw.sh gem5-SALAM/tools/hw_generator/generate_hw.sh
--- gem5/tools/hw_generator/generate_hw.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/hw_generator/generate_hw.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,5 @@
+#!/bin/bash
+
+echo "Generating HW"
+python3 ${M5_PATH}/HWProfileGenerator.py -b bfs
+
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/hw_generator/HWProfileGenerator.py gem5-SALAM/tools/hw_generator/HWProfileGenerator.py
--- gem5/tools/hw_generator/HWProfileGenerator.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/hw_generator/HWProfileGenerator.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,109 @@
+import yaml
+import os
+
+from SALAMArgs import HWArgs
+from SALAMClassGenerator import FunctionalUnitGenerator
+
+
+class HWModel():
+    def __init__(self, model='40nm_model', latency='10ns', profile='default_profile', benchname=None, benchfolder = 'benchmarks/sys_validation'):
+        self.benchname = benchname
+        self.benchfolder = benchfolder
+        self.model = model
+        self.latency = latency
+        self.profile = profile
+        self.yaml_dir = benchfolder + '/' + benchname + '/configs/hw_interface/functional_units/' + model + '/' + latency + '/' + profile 
+        self.inst_list_yaml = benchfolder + '/' + benchname + '/configs/hw_interface/instructions/inst_list.yml'
+        self.fu_list = os.listdir(self.yaml_dir)
+        self.inst_list = []
+
+    def get_fu_list(self):
+        return self.fu_list
+
+    def get_instruction_list(self):
+        self.fu_yaml = open(self.inst_list_yaml, 'r')
+        self.data = yaml.load(self.fu_yaml, Loader=yaml.FullLoader)
+        self.buffer = dict()
+        with open(self.inst_list_yaml) as yaml_inst_list:
+            buffer = yaml.safe_load(yaml_inst_list)
+            inst_list = buffer['instructions'].keys()
+        return buffer
+
+    def generate_hw(self, fu):
+        self.fu_yaml_path = self.yaml_dir + '/' + fu + '/' + fu + '.yml'
+        self.fu_yaml = open(self.fu_yaml_path, 'r')
+        self.data = yaml.load(self.fu_yaml, Loader=yaml.FullLoader)
+        self.alias = self.data['functional_unit']['parameters']['alias']
+        self.stages = self.data['functional_unit']['parameters']['stages']
+        self.cycles = self.data['functional_unit']['parameters']['cycles']
+        self.enum_value = self.data['functional_unit']['parameters']['enum_value']
+        self.int_size = self.data['functional_unit']['parameters']['datatypes']['integer']['size']
+        self.int_sign = self.data['functional_unit']['parameters']['datatypes']['integer']['sign']
+        self.int_apmode = self.data['functional_unit']['parameters']['datatypes']['integer']['APMode']
+        self.fp_size = self.data['functional_unit']['parameters']['datatypes']['floating_point']['size']
+        self.fp_sign = self.data['functional_unit']['parameters']['datatypes']['floating_point']['sign']
+        self.fp_apmode = self.data['functional_unit']['parameters']['datatypes']['floating_point']['APMode']
+        self.ptr_size = self.data['functional_unit']['parameters']['datatypes']['pointer']['size'] 
+        self.ptr_sign = self.data['functional_unit']['parameters']['datatypes']['pointer']['sign']
+        self.ptr_apmode= self.data['functional_unit']['parameters']['datatypes']['pointer']['APMode']
+        self.instructions_list = self.data['functional_unit']['parameters']['instructions']
+        with open(self.inst_list_yaml) as yaml_inst_list:
+            buffer = yaml.safe_load(yaml_inst_list)
+            for instruction in self.instructions_list:
+                if (instruction != 'any') and (instruction != 'none'):
+                    buffer['instructions'][instruction]['functional_unit'] = self.enum_value
+        with open(self.inst_list_yaml, 'w') as yaml_inst_list:
+            yaml.safe_dump(buffer, yaml_inst_list, default_flow_style=False)
+        self.limit = self.data['functional_unit']['parameters']['limit']
+        
+    def generate_power_model(self, fu):
+        self.fu_yaml_path = self.yaml_dir + '/' + fu + '/' + fu + '.yml'
+        self.fu_yaml = open(self.fu_yaml_path, 'r')
+        self.data = yaml.load(self.fu_yaml, Loader=yaml.FullLoader)
+        self.units_dict = self.data['functional_unit']['power_model']['units']
+        self.power_units = self.units_dict['power']
+        self.energy_units = self.units_dict['energy']
+        self.time_units = self.units_dict['time']
+        self.area_units = self.units_dict['area']
+        self.fu_latency = self.data['functional_unit']['power_model']['latency']
+        self.internal_power = self.data['functional_unit']['power_model']['internal_power']
+        self.switch_power = self.data['functional_unit']['power_model']['switch_power']
+        self.dynamic_power = self.data['functional_unit']['power_model']['dynamic_power']
+        self.dynamic_energy = self.data['functional_unit']['power_model']['dynamic_energy']
+        self.leakage_power = self.data['functional_unit']['power_model']['leakage_power']
+        self.area = self.data['functional_unit']['power_model']['area']
+        self.path_delay = self.data['functional_unit']['power_model']['path_delay']
+
+if not os.path.exists('src/hwacc/HWModeling/generated'):
+    os.makedirs('src/hwacc/HWModeling/generated')
+
+if not os.path.exists('src/hwacc/HWModeling/generated/functionalunits'):
+    os.makedirs('src/hwacc/HWModeling/generated/functionalunits')
+
+if not os.path.exists('src/hwacc/HWModeling/generated/instructions'):
+    os.makedirs('src/hwacc/HWModeling/generated/instructions')
+
+benchmark_args = HWArgs()
+generate_hw_models = HWModel(benchname=benchmark_args.bench, latency='5ns')
+fu_file_generator = FunctionalUnitGenerator(fu_directory="src/hwacc/FunctionalUnits.py")
+fu_file_generator.initialize_functional_unit_base_header_file()
+fu_file_generator.initalize_fu_list_header(generate_hw_models.get_fu_list())
+fu_file_generator.initialize_simobject_file(generate_hw_models.get_fu_list())
+
+for functional_unit in generate_hw_models.get_fu_list():
+    generate_hw_models.generate_hw(functional_unit)
+    generate_hw_models.generate_power_model(functional_unit)
+    fu_file_generator.set_fu(functional_unit)
+    fu_file_generator.functional_unit_header_generator(generate_hw_models)
+    fu_file_generator.simobject_generator(generate_hw_models)
+
+#TODO clean up this by creating a InstConfigGenerator class, for clarity
+fu_file_generator.instruction_simobject_generator(generate_hw_models)
+fu_file_generator.initalize_inst_config_header(generate_hw_models.get_instruction_list())
+fu_file_generator.initialize_inst_config_base_header_file()
+for inst in generate_hw_models.get_instruction_list()['instructions'].keys():
+    fu_file_generator.inst_config_header_generator(inst)
+
+
+fu_file_generator.generate_functional_unit_sconscript(generate_hw_models.get_fu_list())
+fu_file_generator.generate_inst_config_sconscript(generate_hw_models.get_instruction_list()['instructions'])
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/hw_generator/SALAMArgs.py gem5-SALAM/tools/hw_generator/SALAMArgs.py
--- gem5/tools/hw_generator/SALAMArgs.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/hw_generator/SALAMArgs.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,6 @@
+import argparse
+
+def HWArgs():
+    parser = argparse.ArgumentParser(description='Parse command line args for hardware generator')
+    parser.add_argument('-b', '--bench', type=str, required=True, help='Name of benchmark')
+    return parser.parse_args()
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/hw_generator/SALAMClassGenerator.py gem5-SALAM/tools/hw_generator/SALAMClassGenerator.py
--- gem5/tools/hw_generator/SALAMClassGenerator.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/hw_generator/SALAMClassGenerator.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,610 @@
+
+
+
+class FunctionalUnitGenerator():
+    def __init__(self, bench_directory="", fu_directory=""):
+        self.bench_directory = bench_directory
+        self.fu_directory = fu_directory
+        self.alias = ""
+        self.classname = ""
+        self.header_name = ""
+        self.cxx_header = "src/hwacc/HWModeling/src/functional_units.hh"
+        self.cxx_header_py_path = "hwacc/HWModeling/src/functional_units.hh"
+        self.fu_base_directory = "src/hwacc/HWModeling/generated/functionalunits/"
+        self.fu_base_directory_py_path = "hwacc/HWModeling/generated/functionalunits/"
+        self.scons_dir_fu = "src/hwacc/HWModeling/generated/functionalunits/SConscript"
+        self.scons_dir_inst = "src/hwacc/HWModeling/generated/instructions/SConscript"
+
+    # Functional unit alias from yml is passed for classname variable
+    def set_fu(self, alias=""):
+        self.alias = alias
+        # Create Python SimObject
+        self.classname = ''.join(words.capitalize() for words in self.alias.split('_'))
+        # create C++ header
+        self.header_name = self.fu_base_directory + self.alias + '.hh'
+        self.header_name_py_path = self.fu_base_directory_py_path + self.alias + '.hh'
+        self.source_name = self.fu_base_directory + self.alias + '.cc'
+        #self.header_name = self.alias + '.hh'
+        #self.source_name = self.alias + '.cc'
+
+    def functional_unit_header_generator(self, hwmodel):
+        self.hwmodel = hwmodel
+        self.new_header = open(self.header_name, 'w')
+
+        # start header gaurd
+        self.new_header.write("#ifndef __HWMODEL_" + self.alias.upper() + "_HH__\n")
+        self.new_header.write("#define __HWMODEL_" + self.alias.upper() + "_HH__\n\n")
+
+        # warning label
+        self.new_header.write("// GENERATED FILE - DO NOT MODIFY\n\n")
+        
+        # includes
+        self.new_header.write("#include \"params/" + self.classname + ".hh\"\n")
+        self.new_header.write("#include \"sim/sim_object.hh\"\n")
+        self.new_header.write("#include \"base.hh\"\n\n")
+
+        # namespaces
+        self.new_header.write("using namespace gem5;\n\n")
+
+        # define class name and inheritance
+
+        self.new_header.write("class " + self.classname + ": public SimObject, public FunctionalUnitBase\n")
+        self.new_header.write("{\n")
+
+        # define class body
+        # define private members and methods
+        self.new_header.write("\tprivate:\n")
+        # members
+
+        # methods
+        
+        # define protected members and methods
+        self.new_header.write("\tprotected:\n")
+        # members
+
+        # methods
+
+        # define public members and methods
+        self.new_header.write("\tpublic:\n")
+        # members
+
+        # methods
+        # default constructor
+        self.new_header.write("\t\t" + self.classname + "();\n")
+        # SimObject Constructor
+        self.new_header.write("\t\t" + self.classname + "(const " + self.classname + "Params &params);\n")
+
+        # end class body
+        self.new_header.write("};\n")
+        # end header gaurd
+        self.new_header.write("#endif // __HWMODEL_" + self.alias.upper() + "_HH__")
+
+        self.new_header.close()
+
+        # Define source files
+        self.new_source = open(self.source_name, 'w')
+
+        # Include header file
+        self.new_source.write("#include \"" + self.alias + ".hh\"\n\n")
+        
+        # Warning
+        self.new_source.write("//AUTO-GENERATED FILE\n\n")
+        self.new_source.write(self.classname + "::" + self.classname + "(const " + self.classname + "Params &params) :\n")
+        self.new_source.write("\tSimObject(params),\n")
+        self.new_source.write("\tFunctionalUnitBase( params.alias,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.stages,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.cycles,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.enum_value,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.int_size,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.int_sign,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.int_apmode,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.fp_size,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.fp_sign,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.fp_apmode,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.ptr_size,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.ptr_sign,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.ptr_apmode,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.limit,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.power_units,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.energy_units,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.time_units,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.area_units,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.fu_latency,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.internal_power,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.switch_power,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.dynamic_power,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.dynamic_energy,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.leakage_power,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.area,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.path_delay) { }\n")
+
+    def generate_functional_unit_sconscript(self, fu_list = []):
+        self.fu_list = fu_list
+        with open(self.scons_dir_fu, 'w+') as self.scons_file:
+            self.scons_file.write("Import('*')\n")
+            self.scons_file.write("if env['TARGET_ISA'] == 'arm':\n\n")
+            for unit in self.fu_list:
+                self.scons_file.write("    Source('" + unit + ".cc')\n")
+
+
+    def initalize_fu_list_header(self, fu_list = []):
+        self.fu_list = fu_list
+        with open(self.cxx_header, 'w+') as self.fu_list_header_file:
+            self.fu_list_header_file.write("#ifndef __HWMODEL_FUNCTIONAL_UNITS_HH__\n")
+            self.fu_list_header_file.write("#define __HWMODEL_FUNCTIONAL_UNITS_HH__\n\n")
+            self.fu_list_header_file.write("#include \"params/FunctionalUnits.hh\"\n")
+            self.fu_list_header_file.write("#include \"sim/sim_object.hh\"\n")
+
+            self.fu_list_header_file.write("// GENERATED HEADERS - DO NOT MODIFY\n")
+            self.fu_list_header_file.write("#include \"../generated/functionalunits/base.hh\"\n")
+            for unit in self.fu_list:
+                # Add include headers to files
+                self.fu_list_header_file.write("#include \"../generated/functionalunits/" + unit + ".hh\"\n")
+
+            self.fu_list_header_file.write("#include <iostream>\n")
+            self.fu_list_header_file.write("#include <cstdlib>\n")
+            self.fu_list_header_file.write("#include <vector>\n\n")
+
+            self.fu_list_header_file.write("using namespace gem5;\n\n")
+
+            self.fu_list_header_file.write("class FunctionalUnitBase;\n\n")
+
+            self.fu_list_header_file.write("class FunctionalUnits : public SimObject\n")
+            self.fu_list_header_file.write("{\n")
+            self.fu_list_header_file.write("\tprivate:\n")
+            self.fu_list_header_file.write("\tprotected:\n\n")
+            self.fu_list_header_file.write("\tpublic:\n")
+            self.fu_list_header_file.write("\t\t// GENERATED CLASS MEMBERS - DO NOT MODIFY\n")
+            
+            for unit in self.fu_list:
+                self.fu_list_header_file.write("\t\t" + ''.join(words.capitalize() for words in unit.split('_')) + "* _" + unit + ";\n")
+            #// END OF GENERATED CLASS MEMBERS
+
+            self.fu_list_header_file.write("\t\tFunctionalUnits();\n")
+            self.fu_list_header_file.write("\t\t// DEFAULT CONSTRUCTOR - DO NOT MODIFY\n")
+            self.fu_list_header_file.write("\t\tFunctionalUnits(const FunctionalUnitsParams &params);\n")
+            self.fu_list_header_file.write("\t\t// END DEFAULT CONSTRUCTOR\n")
+            self.fu_list_header_file.write("\t\tstd::vector<FunctionalUnitBase*> functional_unit_list;\n")
+            self.fu_list_header_file.write("};\n")
+
+            self.fu_list_header_file.write("#endif //__HWMODEL_FUNCTIONAL_UNITS_HH__\n")
+            #TODO Write source generator
+
+    def initialize_functional_unit_base_header_file(self):
+        self.base_header = self.fu_base_directory + "base.hh"
+        with open(self.base_header, 'w+') as self.base_header_file:
+
+            self.base_header_file.write("#ifndef __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__\n")
+            self.base_header_file.write("#define __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__\n\n")
+            self.base_header_file.write("#include \"../../src/salam_power_model.hh\"\n\n")
+            self.base_header_file.write("#include <map>\n")
+            self.base_header_file.write("#include <iostream>\n")
+            self.base_header_file.write("#include <cstdlib>\n")
+            self.base_header_file.write("#include <vector>\n\n")
+ 
+            self.base_header_file.write("class FunctionalUnitBase\n")
+            self.base_header_file.write("{\n")
+
+            # define class body
+            # define private members and methods
+            self.base_header_file.write("\tprivate:\n")
+            # members
+
+            # methods
+            
+            # define protected members and methods
+            self.base_header_file.write("\tprotected:\n")
+            # members
+            self.base_header_file.write("\t\tstd::string _alias;\n")
+            self.base_header_file.write("\t\tuint32_t _stages;\n")
+            self.base_header_file.write("\t\tuint32_t _cycles;\n")
+            self.base_header_file.write("\t\tuint32_t _enum_value;\n")
+            self.base_header_file.write("\t\tstd::string _int_size;\n")
+            self.base_header_file.write("\t\tstd::string _int_sign;\n")
+            self.base_header_file.write("\t\tbool _int_apmode;\n")
+            self.base_header_file.write("\t\tstd::string _fp_size;\n")
+            self.base_header_file.write("\t\tstd::string _fp_sign;\n")
+            self.base_header_file.write("\t\tbool _fp_apmode;\n")
+            self.base_header_file.write("\t\tstd::string _ptr_size;\n")
+            self.base_header_file.write("\t\tstd::string _ptr_sign;\n")
+            self.base_header_file.write("\t\tbool _ptr_apmode;\n")
+            self.base_header_file.write("\t\tuint32_t _limit;\n")
+            self.base_header_file.write("\t\tstd::string _power_units;\n")
+            self.base_header_file.write("\t\tstd::string _energy_units;\n")
+            self.base_header_file.write("\t\tstd::string _time_units;\n")
+            self.base_header_file.write("\t\tstd::string _area_units;\n")
+            self.base_header_file.write("\t\tuint32_t _fu_latency;\n")
+            self.base_header_file.write("\t\tdouble _internal_power;\n")
+            self.base_header_file.write("\t\tdouble _switch_power;\n")
+            self.base_header_file.write("\t\tdouble _dynamic_power;\n")
+            self.base_header_file.write("\t\tdouble _dynamic_energy;\n")
+            self.base_header_file.write("\t\tdouble _leakage_power;\n")
+            self.base_header_file.write("\t\tdouble _area;\n")
+            self.base_header_file.write("\t\tdouble _path_delay;\n\n")
+            self.base_header_file.write("\t\tuint64_t _available;\n\n")
+            self.base_header_file.write("\t\tuint64_t _in_use;\n\n")
+            # methods
+
+            # define public members and methods
+            self.base_header_file.write("\tpublic:\n")
+            # members
+
+            # methods
+            # default constructor
+            self.base_header_file.write("\t\tFunctionalUnitBase();\n")
+            # SimObject Constructor
+            self.base_header_file.write("\t\tFunctionalUnitBase( std::string alias,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t stages,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t cycles,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t enum_value,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string int_size,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string int_sign,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tbool int_apmode,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string fp_size,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string fp_sign,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tbool fp_apmode,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string ptr_size,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string ptr_sign,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tbool ptr_apmode,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t limit,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string power_units,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string energy_units,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string time_units,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tstd::string area_units,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t fu_latency,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble internal_power,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble switch_power,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble dynamic_power,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble dynamic_energy,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble leakage_power,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble area,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tdouble path_delay) :\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_alias(alias),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_stages(stages),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_cycles(cycles),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_enum_value(enum_value),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_int_size(int_size),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_int_sign(int_sign),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_int_apmode(int_apmode),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_fp_size(fp_size),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_fp_sign(fp_sign),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_fp_apmode(fp_apmode),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_ptr_size(ptr_size),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_ptr_sign(ptr_sign),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_ptr_apmode(ptr_apmode),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_limit(limit),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_power_units(power_units),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_energy_units(energy_units),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_time_units(time_units),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_area_units(area_units),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_fu_latency(fu_latency),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_internal_power(internal_power),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_switch_power(switch_power),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_dynamic_power(dynamic_power),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_dynamic_energy(dynamic_energy),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_leakage_power(leakage_power),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_area(area),\n")
+            self.base_header_file.write("\t\t\t\t\t\t\t_path_delay(path_delay) { }\n")
+
+            # Getters / Setters
+            self.base_header_file.write("\t\tstd::string get_alias() { return _alias; }\n")
+            self.base_header_file.write("\t\tuint32_t get_stages() { return _stages; }\n")
+            self.base_header_file.write("\t\tuint32_t get_cycles() { return _cycles; }\n")
+            self.base_header_file.write("\t\tuint32_t get_enum_value() { return _enum_value; }\n")
+            self.base_header_file.write("\t\tstd::string get_int_size() { return _int_size; }\n")
+            self.base_header_file.write("\t\tstd::string get_int_sign() { return _int_sign; }\n")
+            self.base_header_file.write("\t\tbool get_int_apmode() { return _int_apmode; }\n")
+            self.base_header_file.write("\t\tstd::string get_fp_size() { return _fp_size; }\n")
+            self.base_header_file.write("\t\tstd::string get_fp_sign() { return _fp_sign; }\n")
+            self.base_header_file.write("\t\tbool get_fp_apmode() { return _fp_apmode; }\n")
+            self.base_header_file.write("\t\tstd::string get_ptr_size() { return _ptr_size; }\n")
+            self.base_header_file.write("\t\tstd::string get_ptr_sign() { return _ptr_sign; }\n")
+            self.base_header_file.write("\t\tbool get_ptr_apmode() { return _ptr_apmode; }\n")
+            self.base_header_file.write("\t\tuint32_t get_limit() { return _limit; }\n")
+            self.base_header_file.write("\t\tstd::string get_power_units() { return _power_units; }\n")
+            self.base_header_file.write("\t\tstd::string get_energy_units() { return _energy_units; }\n")
+            self.base_header_file.write("\t\tstd::string get_time_units() { return _time_units; }\n")
+            self.base_header_file.write("\t\tstd::string get_area_units() { return _area_units; }\n")
+            self.base_header_file.write("\t\tuint32_t get_fu_latency() { return _fu_latency; }\n")
+            self.base_header_file.write("\t\tdouble get_internal_power() { return _internal_power; }\n")
+            self.base_header_file.write("\t\tdouble get_switch_power() { return _switch_power; }\n")
+            self.base_header_file.write("\t\tdouble get_dynamic_power() { return _dynamic_power; }\n")
+            self.base_header_file.write("\t\tdouble get_dynamic_energy() { return _dynamic_energy; }\n")
+            self.base_header_file.write("\t\tdouble get_leakage_power() { return _leakage_power; }\n")
+            self.base_header_file.write("\t\tdouble get_area() { return _area; }\n")
+            self.base_header_file.write("\t\tdouble get_path_delay() { return _path_delay; }\n")
+            self.base_header_file.write("\t\tbool is_available() { return (_in_use >= _available); }\n")
+            self.base_header_file.write("\t\tvoid use_functional_unit() { _in_use++; }\n")
+            self.base_header_file.write("\t\tvoid clear_functional_unit() { _in_use--; }\n")
+            self.base_header_file.write("\t\tvoid set_functional_unit_limit(uint64_t available) { _available = available; }\n")
+            self.base_header_file.write("\t\tvoid inc_functional_unit_limit() { _available++; }\n")
+            self.base_header_file.write("\t\tuint64_t get_functional_unit_limit() { return _available; }\n\n")
+
+
+            # end class body
+            self.base_header_file.write("};\n")
+            # end header gaurd
+            self.base_header_file.write("#endif // __HWMODEL_FUNCTIONAL_UNIT_BASE_HH__")
+
+            self.base_header_file.close()
+
+    def initialize_simobject_file(self, fu_list = []):
+        self.fu_list = fu_list
+        with open(self.fu_directory, 'w+') as self.simobject_file:
+            # Warning 
+            self.simobject_file.write("# AUTO-GENERATED FILE\n\n")
+            # imports
+            self.simobject_file.write("from m5.params import *\n")
+            self.simobject_file.write("from m5.proxy import *\n")
+            self.simobject_file.write("from m5.SimObject import SimObject\n\n")
+            # define the class
+            self.simobject_file.write("class FunctionalUnits(SimObject):\n")
+            self.simobject_file.write("\t# SimObject type\n")
+            self.simobject_file.write("\ttype = 'FunctionalUnits'\n")
+            self.simobject_file.write("\t# gem5-SALAM attached header\n")
+            self.simobject_file.write("\tcxx_header = \"" + self.cxx_header_py_path + "\"\n\n")
+
+            for unit in self.fu_list:
+                self.simobject_file.write("\t" + unit + " = Param." + ''.join(words.capitalize() for words in unit.split('_')))
+                self.simobject_file.write("(Parent.any, \"" + unit + " functional unit SimObject.\")\n")
+
+            self.simobject_file.write("\n#AUTO-GENERATED CLASSES\n")
+
+    def simobject_generator(self, hwmodel):
+        self.hwmodel = hwmodel
+        # create Python SimObject
+        #self.simobject_file = self.directory + '/' + self.alias + '.py'
+        #self.simobject_file = self.classname + '.py'
+        with open(self.fu_directory, 'a+') as self.simobject_file:
+            self.simobject_file.write("class " + self.classname + "(SimObject):\n")
+            self.simobject_file.write("\t# SimObject type\n")
+            self.simobject_file.write("\ttype = '" + self.classname + "'\n")
+            self.simobject_file.write("\t# gem5-SALAM attached header\n")
+            self.simobject_file.write("\tcxx_header = \"" + self.header_name_py_path + "\"\n")
+            self.simobject_file.write("\t#HW Params\n")
+            self.simobject_file.write("\talias = Param.String(\"" + self.alias + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tstages = Param.UInt32(" + str(self.hwmodel.stages) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tcycles = Param.UInt32(" + str(self.hwmodel.cycles) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tenum_value = Param.UInt32(" + str(self.hwmodel.enum_value) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tint_size = Param.String(\"" + str(self.hwmodel.int_size) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tint_sign = Param.String(\"" + str(self.hwmodel.int_sign) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tint_apmode = Param.Bool(" + str(self.hwmodel.int_apmode) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tfp_size = Param.String(\"" + str(self.hwmodel.fp_size) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tfp_sign = Param.String(\"" + str(self.hwmodel.fp_sign) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tfp_apmode = Param.Bool(" + str(self.hwmodel.fp_apmode) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tptr_size = Param.String(\"" + str(self.hwmodel.ptr_size) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tptr_sign = Param.String(\"" + str(self.hwmodel.ptr_sign) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tptr_apmode = Param.Bool(" + str(self.hwmodel.ptr_apmode) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tlimit = Param.UInt32(" + str(self.hwmodel.limit) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\t#Power Params\n")
+            self.simobject_file.write("\tpower_units = Param.String(\"" + str(self.hwmodel.power_units) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tenergy_units = Param.String(\"" + str(self.hwmodel.energy_units) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\ttime_units = Param.String(\"" + str(self.hwmodel.time_units) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tarea_units = Param.String(\"" + str(self.hwmodel.area_units) + "\", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tfu_latency = Param.UInt32(" + str(self.hwmodel.fu_latency) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tinternal_power = Param.UInt32(" + str(self.hwmodel.internal_power) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tswitch_power = Param.UInt32(" + str(self.hwmodel.switch_power) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tdynamic_power = Param.UInt32(" + str(self.hwmodel.dynamic_power) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tdynamic_energy = Param.UInt32(" + str(self.hwmodel.dynamic_energy) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tleakage_power = Param.UInt32(" + str(self.hwmodel.leakage_power) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tarea = Param.UInt32(" + str(self.hwmodel.area) + ", \"Default values set from " + self.alias + ".yml\")\n")
+            self.simobject_file.write("\tpath_delay = Param.UInt32(" + str(self.hwmodel.path_delay) + ", \"Default values set from " + self.alias + ".yml\")\n\n")
+
+    def instruction_simobject(self, instruction):
+        self.functional_unit = instruction['functional_unit']
+        self.functional_unit_limit = instruction['functional_unit_limit']
+        self.opcode_num = instruction['opcode_num']
+        self.runtime_cycles = instruction['runtime_cycles']
+
+
+    def instruction_simobject_generator(self, hwmodel):
+        self.hwmodel = hwmodel
+        self.inst_dict = hwmodel.get_instruction_list()
+        with open("src/hwacc/InstConfig.py", 'w+') as self.simobject_file:
+            # Warning 
+            self.simobject_file.write("# AUTO-GENERATED FILE\n\n")
+            # imports
+            self.simobject_file.write("from m5.params import *\n")
+            self.simobject_file.write("from m5.proxy import *\n")
+            self.simobject_file.write("from m5.SimObject import SimObject\n\n")
+            # define the class
+            self.simobject_file.write("class InstConfig(SimObject):\n")
+            self.simobject_file.write("\t# SimObject type\n")
+            self.simobject_file.write("\ttype = 'InstConfig'\n")
+            self.simobject_file.write("\t# gem5-SALAM attached header\n")
+            self.simobject_file.write("\tcxx_header = \"hwacc/HWModeling/src/instruction_config.hh\"\n\n")
+            for inst_name in self.inst_dict['instructions'].keys():
+                self.simobject_file.write("\t" + str(inst_name) + " = Param." + ''.join(words.capitalize() for words in inst_name.split('_')) + "(Parent.any, \"" + str(inst_name) + " instruction SimObject\")\n")
+            self.simobject_file.write("\n#AUTO-GENERATED CLASSES\n")
+            for inst_name in self.inst_dict['instructions'].keys():
+                self.simobject_file.write("class " + ''.join(words.capitalize() for words in inst_name.split('_')) + "(SimObject):\n")
+                self.simobject_file.write("\t# SimObject type\n")
+                self.simobject_file.write("\ttype = \'" + ''.join(words.capitalize() for words in inst_name.split('_')) + "\'")
+                self.simobject_file.write("\t# gem5-SALAM attached header\n")
+                self.simobject_file.write("\tcxx_header = \"hwacc/HWModeling/generated/instructions/" + str(inst_name) + ".hh\"\n")
+                self.simobject_file.write("\t# Instruction params\n")
+                self.simobject_file.write("\tfunctional_unit = Param.UInt32(" + str(self.inst_dict['instructions'][inst_name]['functional_unit']) + ", \"Default functional unit assignment.\")\n")
+                self.simobject_file.write("\tfunctional_unit_limit = Param.UInt32(" + str(self.inst_dict['instructions'][inst_name]['functional_unit_limit']) + ", \"Default functional unit limit.\")\n")
+                self.simobject_file.write("\topcode_num = Param.UInt32(" + str(self.inst_dict['instructions'][inst_name]['opcode_num']) + ", \"Default instruction llvm enum opcode value.\")\n")
+                self.simobject_file.write("\truntime_cycles = Param.UInt32(" + str(self.inst_dict['instructions'][inst_name]['runtime_cycles']) + ", \"Default instruction runtime cycles.\")\n\n")
+
+    def initalize_inst_config_header(self, inst_list = []):
+        self.inst_list = inst_list['instructions']
+        with open("src/hwacc/HWModeling/src/instruction_config.hh", 'w+') as self.inst_config_header_file:
+            self.inst_config_header_file.write("#ifndef __HWMODEL_INSTRUCTION_CONFIG_HH__\n")
+            self.inst_config_header_file.write("#define __HWMODEL_INSTRUCTION_CONFIG_HH__\n\n")
+            self.inst_config_header_file.write("#include \"params/InstConfig.hh\"\n")
+            self.inst_config_header_file.write("#include \"sim/sim_object.hh\"\n")
+
+            self.inst_config_header_file.write("// GENERATED HEADERS - DO NOT MODIFY\n")
+            self.inst_config_header_file.write("#include \"../generated/instructions/base.hh\"\n")
+            for inst in self.inst_list:
+                # Add include headers to files
+                self.inst_config_header_file.write("#include \"../generated/instructions/" + inst + ".hh\"\n")
+
+            self.inst_config_header_file.write("#include <iostream>\n")
+            self.inst_config_header_file.write("#include <cstdlib>\n")
+            self.inst_config_header_file.write("#include <vector>\n\n")
+
+            self.inst_config_header_file.write("using namespace gem5;\n\n")
+
+            self.inst_config_header_file.write("class InstConfigBase;\n\n")
+
+            self.inst_config_header_file.write("class InstConfig : public SimObject\n")
+            self.inst_config_header_file.write("{\n")
+            self.inst_config_header_file.write("\tprivate:\n")
+            self.inst_config_header_file.write("\tprotected:\n\n")
+            self.inst_config_header_file.write("\tpublic:\n")
+            self.inst_config_header_file.write("\t\t// GENERATED CLASS MEMBERS - DO NOT MODIFY\n")
+            
+            for inst in self.inst_list:
+                self.inst_config_header_file.write("\t\t" + ''.join(words.capitalize() for words in inst.split('_')) + "* _" + inst + ";\n")
+            #// END OF GENERATED CLASS MEMBERS
+
+            self.inst_config_header_file.write("\t\tInstConfig();\n")
+            self.inst_config_header_file.write("\t\t// DEFAULT CONSTRUCTOR - DO NOT MODIFY\n")
+            self.inst_config_header_file.write("\t\tInstConfig(const InstConfigParams &params);\n")
+            self.inst_config_header_file.write("\t\t// END DEFAULT CONSTRUCTOR\n")
+            self.inst_config_header_file.write("\t\tstd::vector<InstConfigBase*> inst_list;")
+            self.inst_config_header_file.write("};\n")
+
+            self.inst_config_header_file.write("#endif //__INSTRUCTION_CONFIG_HH__\n")
+
+
+    def inst_config_header_generator(self, inst_params = { }):
+        self.inst_params = inst_params
+        self.header_name = "src/hwacc/HWModeling/generated/instructions/" + str(inst_params) + ".hh"
+        self.source_name = "src/hwacc/HWModeling/generated/instructions/" + str(inst_params) + ".cc"
+
+        self.new_header = open(self.header_name, 'w')
+        self.classname = ''.join(words.capitalize() for words in str(inst_params).split('_'))
+
+        # start header gaurd
+        self.new_header.write("#ifndef __HWMODEL_" + str(inst_params).upper() + "_HH__\n")
+        self.new_header.write("#define __HWMODEL_" + str(inst_params).upper() + "_HH__\n\n")
+
+        # warning label
+        self.new_header.write("// GENERATED FILE - DO NOT MODIFY\n\n")
+        
+        # includes
+        self.new_header.write("#include \"params/" + self.classname + ".hh\"\n")
+        self.new_header.write("#include \"sim/sim_object.hh\"\n")
+        self.new_header.write("#include \"base.hh\"\n\n")
+
+        # namespaces
+        self.new_header.write("using namespace gem5;\n\n")
+
+        # define class name and inheritance
+
+        self.new_header.write("class " + self.classname + ": public SimObject, public InstConfigBase\n")
+        self.new_header.write("{\n")
+
+        # define class body
+        # define private members and methods
+        self.new_header.write("\tprivate:\n")
+        # members
+
+        # methods
+        
+        # define protected members and methods
+        self.new_header.write("\tprotected:\n")
+        # members
+
+        # methods
+
+        # define public members and methods
+        self.new_header.write("\tpublic:\n")
+        # members
+
+        # methods
+        # default constructor
+        self.new_header.write("\t\t" + self.classname + "();\n")
+        # SimObject Constructor
+        self.new_header.write("\t\t" + self.classname + "(const " + self.classname + "Params &params);\n")
+
+        # end class body
+        self.new_header.write("};\n")
+        # end header gaurd
+        self.new_header.write("#endif // __HWMODEL_" + str(inst_params).upper() + "_HH__")
+
+        self.new_header.close()
+
+        # Define source files
+        self.new_source = open(self.source_name, 'w')
+
+        # Include header file
+        self.new_source.write("#include \"" + str(inst_params) + ".hh\"\n\n")
+        
+        # Warning
+        self.new_source.write("//AUTO-GENERATED FILE\n\n")
+        self.new_source.write(self.classname + "::" + self.classname + "(const " + self.classname + "Params &params) :\n")
+        self.new_source.write("\tSimObject(params),\n")
+        self.new_source.write("\tInstConfigBase( params.functional_unit,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.functional_unit_limit,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.opcode_num,\n")
+        self.new_source.write("\t\t\t\t\t\tparams.runtime_cycles) { }\n")
+
+    def initialize_inst_config_base_header_file(self):
+        self.base_header = "src/hwacc/HWModeling/generated/instructions/base.hh"
+        with open(self.base_header, 'w+') as self.base_header_file:
+
+            self.base_header_file.write("#ifndef __HWMODEL_INST_CONFIG_BASE_HH__\n")
+            self.base_header_file.write("#define __HWMODEL_INST_CONFIG_BASE_HH__\n\n")
+            self.base_header_file.write("#include <map>\n")
+            self.base_header_file.write("#include <iostream>\n")
+            self.base_header_file.write("#include <cstdlib>\n")
+            self.base_header_file.write("#include <vector>\n\n")
+ 
+            self.base_header_file.write("class InstConfigBase\n")
+            self.base_header_file.write("{\n")
+
+            # define class body
+            # define private members and methods
+            self.base_header_file.write("\tprivate:\n")
+            # members
+
+            # methods
+            
+            # define protected members and methods
+            self.base_header_file.write("\tprotected:\n")
+            # members
+            self.base_header_file.write("\t\tuint32_t _functional_unit;\n")
+            self.base_header_file.write("\t\tuint32_t _functional_unit_limit;\n")
+            self.base_header_file.write("\t\tuint32_t _opcode_num;\n")
+            self.base_header_file.write("\t\tuint32_t _runtime_cycles;\n")
+
+            # methods
+
+            # define public members and methods
+            self.base_header_file.write("\tpublic:\n")
+            # members
+
+            # methods
+            # default constructor
+            self.base_header_file.write("\t\tInstConfigBase();\n")
+            # SimObject Constructor
+            self.base_header_file.write("\t\tInstConfigBase( uint32_t functional_unit,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t functional_unit_limit,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t opcode_num,\n")
+            self.base_header_file.write("\t\t\t\t\t\t\tuint32_t runtime_cycles) { }\n")
+
+            # Getters / Setters
+            self.base_header_file.write("\t\tuint32_t get_functional_unit() { return _functional_unit; }\n")
+            self.base_header_file.write("\t\tuint32_t get_functional_unit_limit() { return _functional_unit_limit; }\n")
+            self.base_header_file.write("\t\tuint32_t get_opcode_num() { return _opcode_num; }\n")
+            self.base_header_file.write("\t\tuint32_t get_runtime_cycles() { return _runtime_cycles; }\n")
+            
+            # end class body
+            self.base_header_file.write("};\n")
+            # end header gaurd
+            self.base_header_file.write("#endif // __HWMODEL_INST_CONFIG_BASE_HH__")
+
+            self.base_header_file.close()
+
+    def generate_inst_config_sconscript(self, inst_list = []):
+        self.inst_list = inst_list
+        with open(self.scons_dir_inst, 'w+') as self.scons_file:
+            self.scons_file.write("Import('*')\n")
+            self.scons_file.write("if env['TARGET_ISA'] == 'arm':\n\n")
+            for inst in self.inst_list:
+                self.scons_file.write("    Source('" + inst + ".cc')\n")
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/hw_generator/SALAMInstructionGenerator.py gem5-SALAM/tools/hw_generator/SALAMInstructionGenerator.py
--- gem5/tools/hw_generator/SALAMInstructionGenerator.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/hw_generator/SALAMInstructionGenerator.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,6 @@
+
+class InstructionGenerator():
+    def __init__(self, functional_unit, opcode_num, runtime_cycles):
+        self.functional_unit = functional_unit
+        self.opcode_num = opcode_num
+        self.runtime_cycles = runtime_cycles
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/run_system.sh gem5-SALAM/tools/run_system.sh
--- gem5/tools/run_system.sh	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/run_system.sh	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,144 @@
+#!/bin/bash
+BENCH=""
+BENCH_PATH=""
+CONFIG_NAME=""
+FLAGS=""
+# FLAGS="SALAM_Debug,CommInterface,NoncoherentDma,LLVMParse"
+BUILD=False
+DEBUG=False
+PRINT_TO_FILE=False
+VALGRIND=False
+
+while [[ $# -gt 0 ]]; do
+  case $1 in
+    --bench)
+      BENCH="$2"
+      shift # past argument
+      shift # past value
+      ;;
+    --bench-path)
+      BENCH_PATH="$2"
+      shift # past argument
+      shift # past value
+      ;;
+    --config-name)
+      CONFIG_NAME="$2"
+      shift # past argument
+      shift # past value
+      ;;
+    -f|--flags)
+      FLAGS="$2"
+      shift # past argument
+      shift # past value
+      ;;
+    -d|--debug)
+      DEBUG=True
+      shift # past argument
+      ;;
+    -b|--build)
+      BUILD=True
+      shift # past argument
+      ;;
+    -p|--print)
+      PRINT_TO_FILE=True
+      shift # past argument
+      shift # past value
+      ;;
+    -v|--valgrind)
+      VALGRIND=True
+      shift # past argument
+      shift # past value
+      ;;
+    -*)
+      echo "Unknown option $1"
+      exit 1
+      ;;
+    *)
+      shift # past argument
+      ;;
+  esac
+done
+
+if [ "$BENCH" == "" ]; then
+	echo "BENCH env var is not set, exiting"
+	exit 1
+fi
+
+if [ "$M5_PATH" == "" ]; then
+	echo "M5_PATH env var is not set, exiting"
+	exit 1
+fi
+
+if [ "$CONFIG_NAME" == "" ]; then
+	CONFIG_NAME="config.yml"
+fi
+
+if [ "$BENCH_PATH" == "" ]; then
+	BENCH_PATH=$BENCH
+fi
+
+if [ ${DEBUG} == True ]; then
+	BINARY="gdb --args ${M5_PATH}/build/ARM/gem5.debug"
+elif [ ${VALGRIND} == True ]; then
+	BINARY="valgrind --leak-check=yes --suppressions=util/valgrind-suppressions --suppressions=util/salam.supp --track-origins=yes --error-limit=no --leak-check=full --show-leak-kinds=definite,possible --show-reachable=no --log-file=$BENCH.log  ${M5_PATH}/build/ARM/gem5.debug" #--gen-suppressions=all
+else
+	BINARY="${M5_PATH}/build/ARM/gem5.opt"
+fi
+
+KERNEL=$M5_PATH/"$BENCH_PATH"/sw/main.elf
+
+SYS_OPTS="--mem-size=4GB \
+		  --mem-type=DDR4_2400_8x8 \
+          --kernel=$KERNEL \
+          --disk-image=$M5_PATH/benchmarks/common/fake.iso \
+          --machine-type=VExpress_GEM5_V1 \
+          --dtb-file=none --bare-metal \
+          --cpu-type=DerivO3CPU"
+
+CACHE_OPTS="--caches --l2cache"
+
+OUTDIR=BM_ARM_OUT/$BENCH_PATH/
+
+DEBUG_FLAGS=""
+
+if [ "${FLAGS}"  != "" ]; then
+	DEBUG_FLAGS+="--debug-flags="
+	DEBUG_FLAGS+=$FLAGS
+fi
+
+RUN_SCRIPT="$BINARY $DEBUG_FLAGS --outdir=$OUTDIR \
+			$M5_PATH/configs/SALAM/fs_$BENCH.py $SYS_OPTS \
+			--accpath=$M5_PATH/$BENCH_PATH \
+			--accbench=$BENCH $CACHE_OPTS"
+
+if (! "$M5_PATH"/tools/SALAM-Configurator/systembuilder.py --sys-name "$BENCH" --bench-path "$BENCH_PATH" --config-name $CONFIG_NAME) then
+	echo "Configurator failed"
+	exit 1
+fi
+
+if [ $BUILD ]; then
+  echo "Building Bench"
+  make all -C "$M5_PATH/$BENCH_PATH"
+fi
+
+if [ ${PRINT_TO_FILE} == True ]; then
+	mkdir -p "$OUTDIR"
+	$RUN_SCRIPT > "${OUTDIR}"/debug-trace.txt
+else
+	$RUN_SCRIPT
+fi
+
+# Debug Flags List
+#
+# IOAcc
+# ClassDetail
+# CommInterface
+# ComputeUnit
+# LLVMInterface
+# ComputeNode
+# LLVMRegister
+# LLVMOp
+# LLVMParse
+# LLVMGEP
+# LLVMRuntime == ComputeNode + LLVMRegister + LLVMOp + LLVMParse
+# NoncoherentDma - bfs, fft, gemm, md-knn, nw, spmv
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/SALAM-Configurator/config_parser.py gem5-SALAM/tools/SALAM-Configurator/config_parser.py
--- gem5/tools/SALAM-Configurator/config_parser.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/SALAM-Configurator/config_parser.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,619 @@
+
+class AccCluster:
+    def __init__(
+        self,
+        name: str,
+        dmas,
+        accs,
+        base_address: int,
+        working_dir: str,
+        config_path: str,
+        hw_config_path: str = None
+    ):
+        self.name = name
+        self.dmas = dmas
+        self.accs = accs
+        self.base_address = base_address
+        self.top_address = base_address
+        self.config_path = config_path
+        # Do this to point the hardware configuration to the
+        # sys config YAML file when HWPath isn't defined
+        self.hw_config_path = hw_config_path
+        self.process_config(working_dir=working_dir)
+
+    def process_config(self, working_dir):
+        dma_class = []
+        acc_class = []
+        top_address = self.base_address
+
+        # Parse DMAs
+        for dma in self.dmas:
+            for device_dict in dma['DMA']:
+                # Decide whether the DMA is NonCoherent or Stream
+                if 'NonCoherent' in device_dict['Type']:
+                    pio_size = 21
+                    pio_masters = []
+                    if 'PIOMaster' in device_dict:
+                        pio_masters.extend(
+                            (device_dict['PIOMaster'].split(',')))
+                    if 'InterruptNum' in device_dict:
+                        dma_class.append(
+                            DMA(
+                                name=device_dict['Name'],
+                                pio=pio_size,
+                                pio_masters=pio_masters,
+                                address=top_address,
+                                dmaType=device_dict['Type'],
+                                int_num=device_dict['InterruptNum'],
+                                size=device_dict['BufferSize'],
+                                maxReq=device_dict['MaxReqSize']
+                            )
+                        )
+                    else:
+                        dma_class.append(
+                            DMA(
+                                name=device_dict['Name'],
+                                pio=pio_size,
+                                pio_masters=pio_masters,
+                                address=top_address,
+                                dmaType=device_dict['Type'],
+                                int_num=device_dict['BufferSize'],
+                                size=device_dict['MaxReqSize']
+                            )
+                        )
+                    aligned_inc = int(pio_size) + (64 - (int(pio_size) % 64))
+                    top_address = top_address + aligned_inc
+                elif 'Stream' in device_dict['Type']:
+                    pio_size = 32
+                    statusSize = 4
+                    pio_masters = []
+
+                    alignedStatusInc = int(statusSize) + \
+                        (64 - (int(statusSize) % 64))
+                    aligned_inc = int(pio_size) + (64 - (int(pio_size) % 64))
+
+                    statusAddress = top_address + aligned_inc
+
+                    if 'PIOMaster' in device_dict:
+                        pio_masters.extend(
+                            (device_dict['PIOMaster'].split(',')))
+                    # Can come back and get rid of this if/else tree
+                    if 'ReadInt' in device_dict:
+                        if 'WriteInt' in device_dict:
+                            dma_class.append(
+                                StreamDMA(
+                                    name=device_dict['Name'],
+                                    pio=pio_size,
+                                    pio_masters=pio_masters,
+                                    address=top_address,
+                                    statusAddress=statusAddress,
+                                    dmaType=device_dict['Type'],
+                                    rd_int=device_dict['ReadInt'],
+                                    wr_int=device_dict['WriteInt'],
+                                    size=device_dict['BufferSize']
+                                )
+                            )
+                        else:
+                            dma_class.append(
+                                StreamDMA(
+                                    name=device_dict['Name'],
+                                    pio=pio_size,
+                                    pio_masters=pio_masters,
+                                    address=top_address,
+                                    statusAddress=statusAddress,
+                                    dmaType=device_dict['Type'],
+                                    rd_int=device_dict['ReadInt'],
+                                    wr_int=None,
+                                    size=device_dict['BufferSize']
+                                )
+                            )
+                    elif 'WriteInt' in device_dict:
+                        dma_class.append(
+                            StreamDMA(
+                                name=device_dict['Name'],
+                                pio=pio_size,
+                                pio_masters=pio_masters,
+                                address=top_address,
+                                statusAddress=statusAddress,
+                                dmaType=device_dict['Type'],
+                                rd_int=None,
+                                wr_int=device_dict['WriteInt'],
+                                size=device_dict['BufferSize']
+                            )
+                        )
+                    else:
+                        dma_class.append(
+                            StreamDMA(
+                                name=device_dict['Name'],
+                                pio=pio_size,
+                                pio_masters=pio_masters,
+                                address=top_address,
+                                statusAddress=statusAddress,
+                                dmaType=device_dict['Type'],
+                                rd_int=None,
+                                wr_int=None,
+                                size=device_dict['BufferSize']
+                            )
+                        )
+
+                    # Increment Top Address
+                    top_address = top_address + aligned_inc + alignedStatusInc
+        # Parse Accelerators
+        for acc in self.accs:
+            name = None
+            pio_masters = []
+            stream_in = []
+            stream_out = []
+            local_connections = []
+            variables = []
+            pio_address = None
+            pio_size = None
+            int_num = None
+            ir_path = None
+            hw_config_path = self.hw_config_path
+            debug = False
+
+            # Find the name first...
+            # Also, find a non-stupid way to find the name first
+            for device_dict in acc['Accelerator']:
+                if 'Name' in device_dict:
+                    name = device_dict['Name']
+            # Parse the rest of the parameters
+            for device_dict in acc['Accelerator']:
+                if 'PIOSize' in device_dict:
+                    pio_address = top_address
+                    pio_size = device_dict['PIOSize'] + \
+                        (64 - (device_dict['PIOSize'] % 64))
+                    top_address = top_address + pio_size
+                    if ((top_address + pio_size) % 64) != 0:
+                        print("Acc Error: " + hex(pio_address))
+                if 'IrPath' in device_dict:
+                    ir_path = device_dict['IrPath']
+                if 'HWPath' in device_dict:
+                    hw_config_path = device_dict['HWPath']
+                if 'PIOMaster' in device_dict:
+                    pio_masters.extend((device_dict['PIOMaster'].split(',')))
+                if 'StreamIn' in device_dict:
+                    stream_in.extend((device_dict['StreamIn'].split(',')))
+                if 'StreamOut' in device_dict:
+                    stream_out.extend((device_dict['StreamOut'].split(',')))
+                if 'LocalSlaves' in device_dict:
+                    local_connections.extend(
+                        (device_dict['LocalSlaves'].split(',')))
+                if 'InterruptNum' in device_dict:
+                    int_num = device_dict['InterruptNum']
+                if 'Debug' in device_dict:
+                    debug = device_dict['Debug']
+                if 'Var' in device_dict:
+                    for var in device_dict['Var']:
+                        # Setup the variable's parameters to pass
+                        varParams = dict(var)
+                        varParams['Address'] = top_address
+                        varParams['AccName'] = name
+
+                        if varParams['Type'] == "Stream":
+                            aligned_inc = int(
+                                var['StreamSize']+4) + (64 - (int(var['StreamSize']+4) % 64))
+                            statusAddress = top_address + aligned_inc
+                            varParams['StatusAddress'] = statusAddress
+
+                        # Create and append a new variable
+                        variables.append(Variable(**varParams))
+                        # Increment the current address based on size
+                        if "SPM" in var['Type']:
+                            aligned_inc = int(
+                                var['Size']) + (64 - (int(var['Size']) % 64))
+                            top_address = top_address + aligned_inc
+                        elif "Stream" in var['Type']:
+                            statusSize = 4
+                            aligned_inc = int(
+                                var['StreamSize']+4) + (64 - (int(var['StreamSize']+4) % 64))
+                            status_inc = int(statusSize) + \
+                                (64 - (int(statusSize) % 64))
+                            top_address = top_address + aligned_inc + status_inc
+                        elif "RegisterBank" in var['Type']:
+                            aligned_inc = int(
+                                var['Size']) + (64 - (int(var['Size']) % 64))
+                            top_address = top_address + aligned_inc
+                        elif "Cache" in var['Type']:
+                            # Don't need to change anything for cache
+                            top_address = top_address
+                        else:
+                            # Should never get here... but just in case throw an exception
+                            exceptionString = ("The Variable: " + name
+                                               + " has an invalid type named: " + self.type)
+                            raise Exception(exceptionString)
+            # Append accelerator to the cluster
+            acc_class.append(
+                Accelerator(
+                    name=name,
+                    pio_masters=pio_masters,
+                    local_connections=local_connections,
+                    address=pio_address,
+                    size=pio_size,
+                    stream_in=stream_in,
+                    stream_out=stream_out,
+                    int_num=int_num,
+                    working_dir=working_dir,
+                    ir_path=ir_path,
+                    config_path=self.config_path,
+                    hw_config_path=hw_config_path,
+                    variables=variables,
+                    debug=debug
+                )
+            )
+
+        self.accs = acc_class
+        self.dmas = dma_class
+        self.top_address = top_address
+
+    def genConfig(self):
+        lines = []
+        # Need to add some customization here. Consider this a placeholder
+        # Also need to edit AccCluster.py's addresses to match the gem5 supported ones
+        lines.append("def build" + self.name +
+                     "(options, system, clstr):" + "\n")
+        lines.append("	local_low = " + hex(self.base_address))
+        lines.append("	local_high = " + hex(self.top_address))
+        lines.append("	local_range = AddrRange(local_low, local_high)")
+        lines.append(
+            "	external_range = [AddrRange(0x00000000, local_low-1), AddrRange(local_high+1, 0xFFFFFFFF)]")
+        lines.append(
+            "	system.iobus.mem_side_ports = clstr.local_bus.cpu_side_ports")
+        # Need to define l2coherency in the YAML file?
+        lines.append(
+            "	clstr._connect_caches(system, options, l2coherent=False)")
+        lines.append("	gic = system.realview.gic")
+        lines.append("")
+
+        return lines
+
+
+class Accelerator:
+
+    def __init__(
+        self,
+        name: str,
+        pio_masters: str,
+        local_connections: str,
+        address: int,
+        size: int,
+        stream_in: str,
+        stream_out: str,
+        int_num: int,
+        working_dir: str,
+        ir_path: str,
+        config_path: str,
+        hw_config_path: str,
+        variables=None,
+        debug: bool = False
+    ):
+
+        self.name = name.lower()
+        self.pio_masters = pio_masters
+        self.local_connections = local_connections
+        self.address = address
+        self.size = size
+        self.stream_in = stream_in
+        self.stream_out = stream_out
+        self.int_num = int_num
+
+        self.working_dir = working_dir
+        self.ir_path = ir_path
+        self.config_path = config_path
+        self.hw_config_path = hw_config_path
+        self.variables = variables
+        self.debug = debug
+
+    def genDefinition(self):
+        lines = []
+        lines.append("# " + self.name + " Definition")
+        lines.append("acc = " + "\"" + self.name + "\"")
+        lines.append("ir = " + "\"" + self.working_dir +
+                     "/" + self.ir_path + "\"")
+        lines.append("hw_config = ""\"" + self.hw_config_path + "\"")
+
+        # Add interrupt number if it exists
+        if self.int_num is not None:
+            lines.append("clstr." + self.name + " = CommInterface(devicename=acc, gic=gic, pio_addr="
+                         + str(hex(self.address)) + ", pio_size=" + str(self.size) + ", int_num=" + str(self.int_num) + ")")
+        else:
+            lines.append("clstr." + self.name + " = CommInterface(devicename=acc, gic=gic, pio_addr="
+                         + str(hex(self.address)) + ", pio_size=" + str(self.size) + ")")
+
+        lines.append("AccConfig(clstr." + self.name + ", ir, hw_config)")
+        lines.append("")
+
+        return lines
+
+    def genConfig(self):
+        lines = []
+
+        lines.append("# " + self.name + " Config")
+
+        for connection in self.local_connections:
+            if "LocalBus" in connection:
+                lines.append("clstr." + self.name +
+                             ".local = clstr.local_bus.cpu_side_ports")
+            else:
+                lines.append("clstr." + self.name +
+                             ".local = clstr." + connection.lower() + ".pio")
+
+        # Assign PIO Masters
+        for master in self.pio_masters:
+            if "LocalBus" in master:
+                lines.append("clstr." + self.name +
+                             ".pio = clstr.local_bus.mem_side_ports")
+            else:
+                assert False, "Shouldn't be here?"
+                # lines.append("clstr." + self.name + ".pio " +
+                #              "=" " clstr." + i + ".local")
+        # Add StreamIn
+        for inCon in self.stream_in:
+            lines.append("clstr." + self.name +
+                         ".stream = clstr." + inCon.lower() + ".stream_in")
+        # Add StreamOut
+        for outCon in self.stream_out:
+            lines.append("clstr." + self.name +
+                         ".stream = clstr." + outCon.lower() + ".stream_out")
+
+        lines.append("clstr." + self.name +
+                     ".enable_debug_msgs = " + str(self.debug))
+        lines.append("")
+
+        # Add scratchpad variables
+        for var in self.variables:
+            # Have the variable create its config
+            lines = var.genConfig(lines)
+            lines.append("")
+        # Return finished config portion
+        return lines
+
+
+class StreamDMA:
+    def __init__(
+        self,
+        name: str,
+        pio: int,
+        pio_masters: str,
+        address: int,
+        statusAddress: int,
+        dmaType: str,
+        rd_int: int = None,
+        wr_int: int = None,
+        size: int = 64
+    ):
+        self.name = name.lower()
+        self.pio = pio
+        self.pio_masters = pio_masters
+        self.size = size
+        self.address = address
+        self.statusAddress = statusAddress
+        self.dmaType = dmaType
+        self.rd_int = rd_int
+        self.wr_int = wr_int
+
+        for master in self.pio_masters:
+            count = 0
+            if "localbus" in master.lower():
+                pio_masters[count] = "local_bus"
+                count += 1
+    # Probably could apply the style used here in other genConfigs
+
+    def genConfig(self):
+        lines = []
+        dmaPath = "clstr." + self.name + "."
+        # Need to fix max_pending?
+        lines.append("# Stream DMA")
+        lines.append("clstr." + self.name + " = StreamDma(pio_addr=" + hex(self.address) +
+                     ", status_addr=" + hex(self.statusAddress) + ", pio_size = " + str(self.pio) + ", gic=gic, max_pending = " + str(self.pio) + ")")
+        lines.append(dmaPath + "stream_addr = " +
+                     hex(self.address) + " + " + str(self.pio))
+        lines.append(dmaPath + "stream_size = " + str(self.size))
+        lines.append(dmaPath + "pio_delay = '1ns'")
+        if self.rd_int != None:
+            lines.append(dmaPath + "rd_int = " + str(self.rd_int))
+        if self.wr_int != None:
+            lines.append(dmaPath + "wr_int = " + str(self.wr_int))
+        lines.append("clstr." + self.name +
+                     ".dma = clstr.coherency_bus.cpu_side_ports")
+        if self.pio_masters is not None:
+            for master in self.pio_masters:
+                lines.append("clstr." + master.lower() +
+                             ".mem_side_ports = clstr." + self.name + ".pio")
+        lines.append("")
+
+        return lines
+
+
+class DMA:
+    def __init__(
+        self,
+        name: str,
+        pio: int,
+        pio_masters: str,
+        address: int,
+        dmaType: str,
+        int_num=None,
+        size: int = 64,
+        maxReq: int = 4
+    ):
+        self.name = name.lower()
+        self.pio = pio
+        self.pio_masters = pio_masters
+        self.size = size
+        self.address = address
+        self.dmaType = dmaType
+        self.int_num = int_num
+        self.maxReq = maxReq
+
+        for master in self.pio_masters:
+            count = 0
+            if "localbus" in master.lower():
+                pio_masters[count] = "local_bus"
+                count += 1
+    # Probably could apply the style used here in other genConfigs
+
+    def genConfig(self):
+        lines = []
+        dmaPath = "clstr." + self.name + "."
+        systemPath = "clstr."
+        lines.append("# Noncoherent DMA")
+        lines.append("clstr." + self.name + " = NoncoherentDma(pio_addr="
+                     + hex(self.address) + ", pio_size = " + str(self.pio)
+                     + ", gic=gic, int_num=" + str(self.int_num) + ")")
+        lines.append(dmaPath + "cluster_dma = " +
+                     systemPath + "local_bus.cpu_side_ports")
+        lines.append(dmaPath + "max_req_size = " + str(self.maxReq))
+        lines.append(dmaPath + "buffer_size = " + str(self.size))
+        lines.append("clstr." + self.name +
+                     ".dma = clstr.coherency_bus.cpu_side_ports")
+        if self.pio_masters is not None:
+            for master in self.pio_masters:
+                lines.append("clstr." + master.lower() +
+                             ".mem_side_ports = clstr." + self.name + ".pio")
+        lines.append("")
+
+        return lines
+
+
+class PortedConnection:
+    def __init__(self, conName: str, numPorts: int):
+        self.conName = conName
+        self.numPorts = numPorts
+
+
+class Variable:
+    def __init__(self, **kwargs):
+        # Read the type first
+        self.type = kwargs.get('Type')
+        if self.type == 'SPM':
+            self.connections = []
+            # Read in SPM args
+            self.name = kwargs.get('Name')
+            self.accName = kwargs.get('AccName')
+            self.size = kwargs.get('Size')
+            self.ports = kwargs.get('Ports', 1)
+            self.address = kwargs.get('Address')
+            self.readyMode = kwargs.get('ReadyMode', False)
+            self.resetOnRead = kwargs.get('ResetOnRead', True)
+            self.readOnInvalid = kwargs.get('ReadOnInvalid', False)
+            self.writeOnValid = kwargs.get('WriteOnValid', True)
+            # Append the default connection here... probably need to be more elegant
+            self.connections.append(PortedConnection(self.accName, self.ports))
+            # Append other connections to the connections list
+            if 'Connections' in kwargs:
+                for conDef in kwargs.get('Connections').split(','):
+                    con, numPorts = conDef.split(':')
+                    self.connections.append(PortedConnection(con, numPorts))
+        elif self.type == 'Stream':
+            # Read in Stream args
+            self.name = kwargs.get('Name')
+            self.accName = kwargs.get('AccName')
+            self.inCon = kwargs.get('InCon')
+            self.outCon = kwargs.get('OutCon')
+            self.streamSize = kwargs.get('StreamSize')
+            self.bufferSize = kwargs.get('BufferSize')
+            self.address = kwargs.get('Address')
+            self.statusAddress = kwargs.get('StatusAddress')
+            # Convert connection definitions to lowercase
+            self.inCon = self.inCon.lower()
+            self.outCon = self.outCon.lower()
+        elif self.type == 'RegisterBank':
+            self.connections = []
+            # Read in SPM args
+            self.name = kwargs.get('Name')
+            self.accName = kwargs.get('AccName')
+            self.size = kwargs.get('Size')
+            self.address = kwargs.get('Address')
+            # Append the default connection here... probably need to be more elegant
+            self.connections.append(PortedConnection(self.accName, 1))
+            # Append other connections to the connections list
+            if 'Connections' in kwargs:
+                for conDef in kwargs.get('Connections').split(','):
+                    con, numPorts = conDef.split(':')
+                    self.connections.append(PortedConnection(con, numPorts))
+        elif self.type == 'Cache':
+            self.name = kwargs.get('Name')
+            self.accName = kwargs.get('AccName')
+            self.size = kwargs.get('Size')
+        else:
+            # Throw an exception if we don't know the type
+            exceptionString = ("The variable: " + kwargs.get('Name')
+                               + " has an invalid type named: " + self.type)
+            raise Exception(exceptionString)
+
+    def genConfig(self, lines):
+        # Add new variable configs here
+        # Stream Buffer Variable
+        if self.type == 'Stream':
+            lines.append("# " + self.name + " (Stream Variable)")
+            lines.append("addr = " + hex(self.address))
+            lines.append("clstr." + self.name.lower() + " = StreamBuffer(stream_address = addr, status_address= " + hex(self.statusAddress)
+                         + ", stream_size = " + str(self.streamSize) + ", buffer_size = " + str(self.bufferSize) + ")")
+            lines.append("clstr." + self.inCon + ".stream = " +
+                         "clstr." + self.name.lower() + ".stream_in")
+            lines.append("clstr." + self.outCon + ".stream = " +
+                         "clstr." + self.name.lower() + ".stream_out")
+            lines.append("")
+        # Scratchpad Memory
+        elif self.type == 'SPM':
+            lines.append("# " + self.name + " (Variable)")
+            lines.append("addr = " + hex(self.address))
+            lines.append(
+                "spmRange = AddrRange(addr, addr + " + hex(self.size) + ")")
+            # When appending convert all connections to lowercase for standardization
+            lines.append("clstr." + self.name.lower() +
+                         " = ScratchpadMemory(range = spmRange)")
+            # Probably need to add table and read mode to the YAML File
+            lines.append("clstr." + self.name.lower() +
+                         "." + "conf_table_reported = False")
+            lines.append("clstr." + self.name.lower() + "." +
+                         "ready_mode = " + str(self.readyMode))
+            lines.append("clstr." + self.name.lower() + "." +
+                         "reset_on_scratchpad_read = " + str(self.resetOnRead))
+            lines.append("clstr." + self.name.lower() + "." +
+                         "read_on_invalid = " + str(self.readOnInvalid))
+            lines.append("clstr." + self.name.lower() + "." +
+                         "write_on_valid = " + str(self.writeOnValid))
+            lines.append("clstr." + self.name.lower() + "." +
+                         "port" + " = " + "clstr.local_bus.mem_side_ports")
+            for con in self.connections:
+                lines.append("")
+                lines.append("# Connecting " + self.name +
+                             " to " + con.conName)
+                lines.append("for i in range(" + str(con.numPorts) + "):")
+                lines.append("	clstr." + con.conName.lower() + ".spm = " +
+                             "clstr." + self.name.lower() + ".spm_ports")
+        # RegisterBank
+        elif self.type == 'RegisterBank':
+            lines.append("# " + self.name + " (Variable)")
+            lines.append("addr = " + hex(self.address))
+            lines.append(
+                "regRange = AddrRange(addr, addr + " + hex(self.size) + ")")
+            # When appending convert all connections to lowercase for standardization
+            lines.append("clstr." + self.name.lower() +
+                         " = RegisterBank(range = regRange)")
+            lines.append("clstr." + self.name.lower() + "." +
+                         "load_port" + " = " + "clstr.local_bus.mem_side_ports")
+            for con in self.connections:
+                lines.append("")
+                lines.append("# Connecting " + self.name +
+                             " to " + con.conName)
+                lines.append("clstr." + con.conName.lower() + ".reg = " +
+                             "clstr." + self.name.lower() + ".reg_port")
+        # L1 Cache, need to add L2 still...
+        elif self.type == 'Cache':
+            lines.append("# " + self.name + " (Cache)")
+            lines.append("clstr." + self.name +
+                         " = L1Cache(size = '" + str(self.size) + "B')")
+            lines.append("clstr." + self.name +
+                         ".mem_side = clstr.coherency_bus.cpu_side_ports")
+            lines.append("clstr." + self.name +
+                         ".cpu_side = clstr." + self.accName + ".local")
+        else:
+            # Should never get here... but just in case throw an exception
+            exceptionString = ("The variable: " + self.name
+                               + " has an invalid type named: " + self.type)
+            raise Exception(exceptionString)
+        return lines
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/SALAM-Configurator/fs_template.py gem5-SALAM/tools/SALAM-Configurator/fs_template.py
--- gem5/tools/SALAM-Configurator/fs_template.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/SALAM-Configurator/fs_template.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,401 @@
+# Copyright (c) 2010-2013, 2016, 2019-2020 ARM Limited
+# Copyright (c) 2020 Barkhausen Institut
+# All rights reserved.
+#
+# The license below extends only to copyright in the software and shall
+# not be construed as granting a license to any other intellectual
+# property including but not limited to intellectual property relating
+# to a hardware implementation of the functionality of the software
+# licensed hereunder.  You may use the software subject to the license
+# terms below provided that you ensure that this notice is replicated
+# unmodified and in its entirety in all distributions of the software,
+# modified or unmodified, in source code or in binary form.
+#
+# Copyright (c) 2012-2014 Mark D. Hill and David A. Wood
+# Copyright (c) 2009-2011 Advanced Micro Devices, Inc.
+# Copyright (c) 2006-2007 The Regents of The University of Michigan
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions are
+# met: redistributions of source code must retain the above copyright
+# notice, this list of conditions and the following disclaimer;
+# redistributions in binary form must reproduce the above copyright
+# notice, this list of conditions and the following disclaimer in the
+# documentation and/or other materials provided with the distribution;
+# neither the name of the copyright holders nor the names of its
+# contributors may be used to endorse or promote products derived from
+# this software without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+import argparse
+import sys
+
+import m5
+from m5.defines import buildEnv
+from m5.objects import *
+from m5.util import addToPath, fatal, warn
+from m5.util.fdthelper import *
+
+addToPath('../')
+addToPath('../../')
+
+from ruby import Ruby
+
+from common.FSConfig import *
+from common.SysPaths import *
+from common.Benchmarks import *
+from common import Simulation
+from common import CacheConfig
+from common import CpuConfig
+from common import MemConfig
+from common import ObjectList
+from common.Caches import *
+from common import Options
+import TEMPLATE
+
+# Add hardware accelerator options for gem5-SALAM
+def addHWAccOptions(parser):
+    parser.add_argument("--acc_cache", action="store_true")
+    parser.add_argument("--accpath", action="store", type=str,
+                      help="""Path to folders containing accelerator benchmarks""", default="")
+    parser.add_argument("--accbench", action="store", type=str,
+                      help="""Name of benchmark to accelerate""", default="")
+
+def cmd_line_template():
+    if args.command_line and args.command_line_file:
+        print("Error: --command-line and --command-line-file are "
+              "mutually exclusive")
+        sys.exit(1)
+    if args.command_line:
+        return args.command_line
+    if args.command_line_file:
+        return open(args.command_line_file).read().strip()
+    return None
+
+def build_test_system(np):
+    cmdline = cmd_line_template()
+    if buildEnv['TARGET_ISA'] == "mips":
+        test_sys = makeLinuxMipsSystem(test_mem_mode, bm[0], cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == "sparc":
+        test_sys = makeSparcSystem(test_mem_mode, bm[0], cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == "riscv":
+        test_sys = makeBareMetalRiscvSystem(test_mem_mode, bm[0],
+                                            cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == "x86":
+        test_sys = makeLinuxX86System(test_mem_mode, np, bm[0], args.ruby,
+                                      cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == "arm":
+        test_sys = makeArmSystem(
+            test_mem_mode,
+            args.machine_type,
+            np,
+            bm[0],
+            args.dtb_filename,
+            bare_metal=args.bare_metal,
+            cmdline=cmdline,
+            external_memory=args.external_memory_system,
+            ruby=args.ruby,
+            security=args.enable_security_extensions,
+            vio_9p=args.vio_9p,
+            bootloader=args.bootloader,
+        )
+        if args.enable_context_switch_stats_dump:
+            test_sys.enable_context_switch_stats_dump = True
+    else:
+        fatal("Incapable of building %s full system!", buildEnv['TARGET_ISA'])
+
+    # Set the cache line size for the entire system
+    test_sys.cache_line_size = args.cacheline_size
+
+    # Create a top-level voltage domain
+    test_sys.voltage_domain = VoltageDomain(voltage = args.sys_voltage)
+
+    # Create a source clock for the system and set the clock period
+    test_sys.clk_domain = SrcClockDomain(clock =  args.sys_clock,
+            voltage_domain = test_sys.voltage_domain)
+
+    # Create a CPU voltage domain
+    test_sys.cpu_voltage_domain = VoltageDomain()
+
+    # Create a source clock for the CPUs and set the clock period
+    test_sys.cpu_clk_domain = SrcClockDomain(clock = args.cpu_clock,
+                                             voltage_domain =
+                                             test_sys.cpu_voltage_domain)
+
+    if buildEnv['TARGET_ISA'] == 'riscv':
+        test_sys.workload.bootloader = args.kernel
+    elif args.kernel is not None:
+        test_sys.workload.object_file = binary(args.kernel)
+
+    if args.script is not None:
+        test_sys.readfile = args.script
+
+    if args.lpae:
+        test_sys.have_lpae = True
+
+    if args.virtualisation:
+        test_sys.have_virtualization = True
+
+    test_sys.init_param = args.init_param
+
+    # For now, assign all the CPUs to the same clock domain
+    test_sys.cpu = [TestCPUClass(clk_domain=test_sys.cpu_clk_domain, cpu_id=i)
+                    for i in range(np)]
+
+    if args.ruby:
+        bootmem = getattr(test_sys, '_bootmem', None)
+        Ruby.create_system(args, True, test_sys, test_sys.iobus,
+                           test_sys._dma_ports, bootmem)
+
+        # Create a seperate clock domain for Ruby
+        test_sys.ruby.clk_domain = SrcClockDomain(clock = args.ruby_clock,
+                                        voltage_domain = test_sys.voltage_domain)
+
+        # Connect the ruby io port to the PIO bus,
+        # assuming that there is just one such port.
+        test_sys.iobus.mem_side_ports = test_sys.ruby._io_port.cpu_side_ports
+
+        for (i, cpu) in enumerate(test_sys.cpu):
+            #
+            # Tie the cpu ports to the correct ruby system ports
+            #
+            cpu.clk_domain = test_sys.cpu_clk_domain
+            cpu.createThreads()
+            cpu.createInterruptController()
+
+            test_sys.ruby._cpu_ports[i].connectCpuPorts(cpu)
+
+    else:
+        if args.caches or args.l2cache:
+            # By default the IOCache runs at the system clock
+            test_sys.iocache = IOCache(addr_ranges = test_sys.mem_ranges)
+            test_sys.iocache.cpu_side = test_sys.iobus.mem_side_ports
+            test_sys.iocache.mem_side = test_sys.membus.cpu_side_ports
+        elif not args.external_memory_system:
+            test_sys.iobridge = Bridge(delay='50ns', ranges = test_sys.mem_ranges)
+            test_sys.iobridge.cpu_side_ports = test_sys.iobus.mem_side_ports
+            test_sys.iobridge.mem_side_ports = test_sys.membus.cpu_side_ports
+
+        # Sanity check
+        if args.simpoint_profile:
+            if not ObjectList.is_noncaching_cpu(TestCPUClass):
+                fatal("SimPoint generation should be done with atomic cpu")
+            if np > 1:
+                fatal("SimPoint generation not supported with more than one CPUs")
+
+        for i in range(np):
+            if args.simpoint_profile:
+                test_sys.cpu[i].addSimPointProbe(args.simpoint_interval)
+            if args.checker:
+                test_sys.cpu[i].addCheckerCpu()
+            if not ObjectList.is_kvm_cpu(TestCPUClass):
+                if args.bp_type:
+                    bpClass = ObjectList.bp_list.get(args.bp_type)
+                    test_sys.cpu[i].branchPred = bpClass()
+                if args.indirect_bp_type:
+                    IndirectBPClass = ObjectList.indirect_bp_list.get(
+                        args.indirect_bp_type)
+                    test_sys.cpu[i].branchPred.indirectBranchPred = \
+                        IndirectBPClass()
+            test_sys.cpu[i].createThreads()
+
+        # If elastic tracing is enabled when not restoring from checkpoint and
+        # when not fast forwarding using the atomic cpu, then check that the
+        # TestCPUClass is DerivO3CPU or inherits from DerivO3CPU. If the check
+        # passes then attach the elastic trace probe.
+        # If restoring from checkpoint or fast forwarding, the code that does this for
+        # FutureCPUClass is in the Simulation module. If the check passes then the
+        # elastic trace probe is attached to the switch CPUs.
+        if args.elastic_trace_en and args.checkpoint_restore == None and \
+            not args.fast_forward:
+            CpuConfig.config_etrace(TestCPUClass, test_sys.cpu, args)
+
+        CacheConfig.config_cache(args, test_sys)
+
+        MemConfig.config_mem(args, test_sys)
+
+    if buildEnv['TARGET_ISA'] == "arm":
+        TEMPLATE.makeHWAcc(args, test_sys)
+
+    if ObjectList.is_kvm_cpu(TestCPUClass) or \
+        ObjectList.is_kvm_cpu(FutureClass):
+        # Assign KVM CPUs to their own event queues / threads. This
+        # has to be done after creating caches and other child objects
+        # since these mustn't inherit the CPU event queue.
+        for i,cpu in enumerate(test_sys.cpu):
+            # Child objects usually inherit the parent's event
+            # queue. Override that and use the same event queue for
+            # all devices.
+            for obj in cpu.descendants():
+                obj.eventq_index = 0
+            cpu.eventq_index = i + 1
+        test_sys.kvm_vm = KvmVM()
+
+    return test_sys
+
+def build_drive_system(np):
+    # driver system CPU is always simple, so is the memory
+    # Note this is an assignment of a class, not an instance.
+    DriveCPUClass = AtomicSimpleCPU
+    drive_mem_mode = 'atomic'
+    DriveMemClass = SimpleMemory
+
+    cmdline = cmd_line_template()
+    if buildEnv['TARGET_ISA'] == 'mips':
+        drive_sys = makeLinuxMipsSystem(drive_mem_mode, bm[1], cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == 'sparc':
+        drive_sys = makeSparcSystem(drive_mem_mode, bm[1], cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == 'x86':
+        drive_sys = makeLinuxX86System(drive_mem_mode, np, bm[1],
+                                       cmdline=cmdline)
+    elif buildEnv['TARGET_ISA'] == 'arm':
+        drive_sys = makeArmSystem(drive_mem_mode, args.machine_type, np,
+                                  bm[1], args.dtb_filename, cmdline=cmdline)
+
+    # Create a top-level voltage domain
+    drive_sys.voltage_domain = VoltageDomain(voltage = args.sys_voltage)
+
+    # Create a source clock for the system and set the clock period
+    drive_sys.clk_domain = SrcClockDomain(clock =  args.sys_clock,
+            voltage_domain = drive_sys.voltage_domain)
+
+    # Create a CPU voltage domain
+    drive_sys.cpu_voltage_domain = VoltageDomain()
+
+    # Create a source clock for the CPUs and set the clock period
+    drive_sys.cpu_clk_domain = SrcClockDomain(clock = args.cpu_clock,
+                                              voltage_domain =
+                                              drive_sys.cpu_voltage_domain)
+
+    drive_sys.cpu = DriveCPUClass(clk_domain=drive_sys.cpu_clk_domain,
+                                  cpu_id=0)
+    drive_sys.cpu.createThreads()
+    drive_sys.cpu.createInterruptController()
+    drive_sys.cpu.connectAllPorts(drive_sys.membus)
+    if args.kernel is not None:
+        drive_sys.workload.object_file = binary(args.kernel)
+
+    if ObjectList.is_kvm_cpu(DriveCPUClass):
+        drive_sys.kvm_vm = KvmVM()
+
+    drive_sys.iobridge = Bridge(delay='50ns',
+                                ranges = drive_sys.mem_ranges)
+    drive_sys.iobridge.cpu_side_ports = drive_sys.iobus.mem_side_ports
+    drive_sys.iobridge.mem_side_ports = drive_sys.membus.cpu_side_ports
+
+    # Create the appropriate memory controllers and connect them to the
+    # memory bus
+    drive_sys.mem_ctrls = [DriveMemClass(range = r)
+                           for r in drive_sys.mem_ranges]
+    for i in range(len(drive_sys.mem_ctrls)):
+        drive_sys.mem_ctrls[i].port = drive_sys.membus.mem_side_ports
+
+    drive_sys.init_param = args.init_param
+
+    return drive_sys
+
+# Add args
+parser = argparse.ArgumentParser()
+Options.addCommonOptions(parser)
+Options.addFSOptions(parser)
+addHWAccOptions(parser)
+
+# Add the ruby specific and protocol specific args
+if '--ruby' in sys.argv:
+    Ruby.define_options(parser)
+
+args = parser.parse_args()
+
+# system under test can be any CPU
+(TestCPUClass, test_mem_mode, FutureClass) = Simulation.setCPUClass(args)
+
+# Match the memories with the CPUs, based on the options for the test system
+TestMemClass = Simulation.setMemClass(args)
+
+if args.benchmark:
+    try:
+        bm = Benchmarks[args.benchmark]
+    except KeyError:
+        print("Error benchmark %s has not been defined." % args.benchmark)
+        print("Valid benchmarks are: %s" % DefinedBenchmarks)
+        sys.exit(1)
+else:
+    if args.dual:
+        bm = [SysConfig(disks=args.disk_image, rootdev=args.root_device,
+                        mem=args.mem_size, os_type=args.os_type),
+              SysConfig(disks=args.disk_image, rootdev=args.root_device,
+                        mem=args.mem_size, os_type=args.os_type)]
+    else:
+        bm = [SysConfig(disks=args.disk_image, rootdev=args.root_device,
+                        mem=args.mem_size, os_type=args.os_type)]
+
+np = args.num_cpus
+
+test_sys = build_test_system(np)
+
+if len(bm) == 2:
+    drive_sys = build_drive_system(np)
+    root = makeDualRoot(True, test_sys, drive_sys, args.etherdump)
+elif len(bm) == 1 and args.dist:
+    # This system is part of a dist-gem5 simulation
+    root = makeDistRoot(test_sys,
+                        args.dist_rank,
+                        args.dist_size,
+                        args.dist_server_name,
+                        args.dist_server_port,
+                        args.dist_sync_repeat,
+                        args.dist_sync_start,
+                        args.ethernet_linkspeed,
+                        args.ethernet_linkdelay,
+                        args.etherdump);
+elif len(bm) == 1:
+    root = Root(full_system=True, system=test_sys)
+else:
+    print("Error I don't know how to create more than 2 systems.")
+    sys.exit(1)
+
+if ObjectList.is_kvm_cpu(TestCPUClass) or \
+    ObjectList.is_kvm_cpu(FutureClass):
+    # Required for running kvm on multiple host cores.
+    # Uses gem5's parallel event queue feature
+    # Note: The simulator is quite picky about this number!
+    root.sim_quantum = int(1e9) # 1 ms
+
+if args.timesync:
+    root.time_sync_enable = True
+
+if args.frame_capture:
+    VncServer.frame_capture = True
+
+if buildEnv['TARGET_ISA'] == "arm" and not args.bare_metal \
+        and not args.dtb_filename:
+    if args.machine_type not in ["VExpress_GEM5",
+                                    "VExpress_GEM5_V1",
+                                    "VExpress_GEM5_V2",
+                                    "VExpress_GEM5_Foundation"]:
+        warn("Can only correctly generate a dtb for VExpress_GEM5_* " \
+             "platforms, unless custom hardware models have been equipped "\
+             "with generation functionality.")
+
+    # Generate a Device Tree
+    for sysname in ('system', 'testsys', 'drivesys'):
+        if hasattr(root, sysname):
+            sys = getattr(root, sysname)
+            sys.workload.dtb_filename = \
+                os.path.join(m5.options.outdir, '%s.dtb' % sysname)
+            sys.generateDtb(sys.workload.dtb_filename)
+
+Simulation.setWorkCountOptions(test_sys, args)
+Simulation.run(args, root, test_sys, FutureClass)
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/SALAM-Configurator/systembuilder.py gem5-SALAM/tools/SALAM-Configurator/systembuilder.py
--- gem5/tools/SALAM-Configurator/systembuilder.py	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/SALAM-Configurator/systembuilder.py	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,331 @@
+#!/usr/bin/env python3
+
+# Import needed packages
+import argparse
+from http.client import FOUND
+import os
+import shutil
+from unittest import expectedFailure
+import config_parser
+
+import yaml
+
+# Define the imports of the gem5 script
+imports = """import m5\nfrom m5.objects import *\nfrom m5.util import *\nfrom configparser import ConfigParser\nfrom HWAccConfig import *\n\n"""
+# L1 Cache defined here for now, need to add some more configurability to this
+l1Cache = """class L1Cache(Cache):
+\tassoc = 2
+\ttag_latency = 2
+\tdata_latency = 2
+\tresponse_latency = 2
+\tmshrs = 4
+\ttgts_per_mshr = 20\n\t
+def __init__(self, size, options=None):
+\t\tself.size = size
+\t\tsuper(L1Cache, self).__init__()
+\t\tpass\n\n"""
+
+
+def parse_cur_args():
+    argparser = argparse.ArgumentParser(description="SALAM System Builder")
+    argparser.add_argument(
+        '--bench-path',
+        help="Path to Benchmark Directory Relative to M5_PATH. e.g. gemm's bench path will be benchmarks/sys_validation/gemm",
+        required=True
+    )
+    argparser.add_argument(
+        '--sys-name',
+        help="Name of the generated python files. For a sys_name of gemm, the configurator will generate both fs_gemm.py & gemm.py in configs/SALAM).",
+        required=True,
+        default=None
+    )
+    argparser.add_argument(
+        '--config-name',
+        help="Name of the configuration file in the root of the bench. Defaults to config.yml",
+        required=False,
+        default="config.yml"
+    )
+    argparser.add_argument(
+        '--m5-path',
+        help="Path to M5 Directory",
+        required=False,
+        default=None
+    )
+    return argparser.parse_args()
+
+
+def parse_yaml(
+    parent_config,
+    base_address,
+    working_dir: str,
+    parent_path: str = None,
+    hw_path: str = None
+):
+    clusters = []
+    # Load in each acc cluster and add it to the list
+    for cluster_dict in parent_config:
+        for list_type, params in cluster_dict.items():
+            FOUND_SYS_PATH = False
+            FOUND_HW_PATH = False
+            FOUND_DEVICE = False
+            if list_type == "acc_cluster":
+                for param in params:
+                    if "SysPath" in param:
+                        FOUND_SYS_PATH = True
+                        cur_config = open_yaml(
+                            yml_path=(working_dir + param["SysPath"])
+                        )
+                        cur_path = working_dir + param["SysPath"]
+                    elif "HWPath" in param:
+                        FOUND_HW_PATH = True
+                        hw_path = working_dir + param["HWPath"]
+                    else:
+                        FOUND_DEVICE = True
+                        cur_config = parent_config
+                        # Set the hard
+                        if not FOUND_HW_PATH and hw_path is None:
+                            hw_path = parent_path
+            if FOUND_SYS_PATH and FOUND_DEVICE:
+                raise Exception(
+                    "Found device definitions in a cluster with a path to another YAML file."
+                )
+            if FOUND_SYS_PATH:
+                # Recursion Alert!
+                base_address, temp_cluster = parse_yaml(
+                    parent_config=cur_config,
+                    base_address=base_address,
+                    working_dir=working_dir,
+                    parent_path=cur_path,
+                    hw_path=hw_path
+                )
+                clusters.extend(temp_cluster)
+            elif FOUND_HW_PATH:
+                raise Exception(
+                    "HW Path should be defined with a System Config file")
+
+        cluster_name = None
+        dmas = []
+        accs = []
+        for list_type, devices in cluster_dict.items():
+            if list_type == "acc_cluster":
+                for device in devices:
+                    if "Name" in device:
+                        cluster_name = device['Name']
+                    if "DMA" in device:
+                        dmas.append(device)
+                    if "Accelerator" in device:
+                        accs.append(device)
+        if cluster_name is None:
+            continue
+        clusters.append(
+            config_parser.AccCluster(
+                name=cluster_name,
+                dmas=dmas,
+                accs=accs,
+                base_address=base_address,
+                working_dir=working_dir,
+                config_path=parent_path,
+                hw_config_path=hw_path
+            )
+        )
+        base_address = clusters[-1].top_address + \
+            (64 - (int(clusters[-1].top_address) % 64))
+        if (int(base_address) % 64) != 0:
+            print("Address Alignment Error: " + hex(base_address))
+    return base_address, clusters
+
+
+def open_yaml(yml_path: str):
+    stream = open(yml_path, "r")
+    config = yaml.safe_load_all(stream)
+    return config
+
+
+def gen_config(clusters, config_path: str, file_name: str):
+    # Write out config file
+    with open(config_path + file_name + ".py", 'w') as writer:
+        writer.write(imports)
+        writer.write(l1Cache)
+        for cluster in clusters:
+            for line in cluster.genConfig():
+                writer.write(line + "\n")
+            # Add cluster definitions here
+            for dma in cluster.dmas:
+                writeLines(writer, dma.genConfig())
+            # Come back here later and see if you can get away with doing these at the same time (probably not)
+            for acc in cluster.accs:
+                writeLines(writer, acc.genDefinition())
+            for acc in cluster.accs:
+                writeLines(writer, acc.genConfig())
+        # Write cluster creation
+        writer.write("def makeHWAcc(args, system):\n\n")
+        for i in clusters:
+            writer.write("	system." + i.name.lower() +
+                         " = AccCluster()" + "\n")
+            writer.write("	build" + i.name +
+                         "(args, system, system." + i.name.lower() + ")\n\n")
+
+
+def load_og_header(clusters, working_dir: str):
+    begin = None
+    end = None
+    # Read in existing header
+    header_list = []
+    for i in clusters:
+        try:
+            # f = open(working_dir + i.name  + "_" + args.headerName + ".h", 'r')
+            f = open(working_dir + i.name + "_hw_defines.h", 'r')
+            oldHeader = f.readlines()
+            for i in range(0, len(oldHeader)):
+                if oldHeader[i] == "//BEGIN GENERATED CODE\n":
+                    begin = i
+                elif oldHeader[i] == "//END GENERATED CODE\n" or oldHeader[i] == "//END GENERATED CODE":
+                    end = i
+            del oldHeader[begin:end+1]
+            header_list.append(oldHeader)
+        except:
+            print("No Header Found")
+            emptyList = []
+            header_list.append(emptyList)
+    return header_list
+
+
+def gen_header(header_list, clusters, working_dir: str):
+    # Write out headers
+    for current_header in header_list:
+        for cluster in clusters:
+            with open(working_dir + cluster.name + "_hw_defines.h", 'w') as f:
+                current_header.append("//BEGIN GENERATED CODE\n")
+                current_header.append(
+                    "//Cluster: " + cluster.name.upper() + "\n")
+                for dma in cluster.dmas:
+                    if dma.dmaType == "NonCoherent":
+                        current_header.append(
+                            "//" + dma.dmaType + "DMA" + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_Flags " + hex(dma.address) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_RdAddr " + hex(dma.address + 1) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_WrAddr " + hex(dma.address + 9) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_CopyLen " + hex(dma.address + 17) + "\n")
+                    elif dma.dmaType == "Stream":
+                        current_header.append(
+                            "//" + dma.dmaType + "DMA" + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_Flags " + hex(dma.address) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_RdAddr " + hex(dma.address + 4) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_WrAddr " + hex(dma.address + 12) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_RdFrameSize " + hex(dma.address + 20) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_NumRdFrames " + hex(dma.address + 24) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_RdFrameBufSize " + hex(dma.address + 25) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_WrFrameSize " + hex(dma.address + 26) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_NumWrFrames " + hex(dma.address + 30) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_WrFrameBufSize " + hex(dma.address + 31) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_Stream " + hex(dma.address + 32) + "\n")
+                        current_header.append(
+                            "#define " + dma.name.upper() + "_Status " + hex(dma.statusAddress) + "\n")
+                for acc in cluster.accs:
+                    current_header.append(
+                        "//Accelerator: " + acc.name.upper() + "\n")
+                    current_header.append(
+                        "#define " + acc.name.upper() + " " + hex(acc.address) + "\n")
+                    for var in acc.variables:
+                        if "Cache" in var.type:
+                            continue
+                        elif "Stream" in var.type:
+                            current_header.append(
+                                "#define " + var.name + " " + hex(var.address) + "\n")
+                            current_header.append(
+                                "#define " + var.name + "_Status " + hex(var.statusAddress) + "\n")
+                        else:
+                            current_header.append(
+                                "#define " + var.name + " " + hex(var.address) + "\n")
+                current_header.append("//END GENERATED CODE")
+                f.writelines(current_header)
+                current_header = []
+
+
+def writeLines(writer, lines):
+    for line in lines:
+        writer.write("	" + line + "\n")
+
+
+def main():
+
+    args = parse_cur_args()
+    # This requires M5_PATH to point to your gem5-SALAM directory
+    M5_Path = os.getenv('M5_PATH')
+
+    if M5_Path is None:
+        print("Looking for Path Argument from Command Line")
+        if args.m5_path is None:
+            raise Exception("Path argument required when M5_PATH not set")
+        M5_Path = args.path
+        if M5_Path is None:
+            raise Exception("M5_PATH Not Found")
+
+    # Set file information
+    if args.sys_name == None:
+        file_name = os.path.basename(os.path.normpath(args.sys_path))
+    else:
+        file_name = args.sys_name
+    config_path = M5_Path + "/configs/SALAM/"
+    working_dir = M5_Path + "/" + args.bench_path + "/"
+    main_yml_path = working_dir + args.config_name
+
+    # Set base addresses
+    base_address = 0x10020000
+    max_address = 0x13ffffff
+    # Load in the YAML file
+    config = open_yaml(yml_path=main_yml_path)
+    # Parse YAML File
+    base_address, clusters = parse_yaml(
+        parent_config=config,
+        base_address=base_address,
+        working_dir=working_dir,
+        parent_path=main_yml_path
+    )
+    # Generate SALAM Config
+    gen_config(
+        clusters=clusters,
+        config_path=config_path,
+        file_name=file_name
+    )
+    # Parse original header for custom code
+    header_list = load_og_header(
+        clusters=clusters,
+        working_dir=working_dir
+    )
+    # Make the header files with custom code
+    gen_header(
+        header_list=header_list,
+        clusters=clusters,
+        working_dir=working_dir
+    )
+    # Generate full system file
+    shutil.copyfile(M5_Path + "/tools/SALAM-Configurator/fs_template.py",
+                    config_path + "fs_" + file_name + ".py")
+    f = open(config_path + "fs_" + file_name + ".py", "r")
+    fullSystem = f.readlines()
+    fullSystem[65] = "import " + file_name
+    fullSystem[229] = "        " + file_name + ".makeHWAcc(args, test_sys)\n"
+    f = open(config_path + "fs_" + file_name + ".py", "w")
+    f.writelines(fullSystem)
+    # Warn if the size is greater than allowed
+    if (clusters[-1].top_address > max_address):
+        print("WARNING: Address range is greater than defined for gem5")
+
+
+if __name__ == "__main__":
+    main()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/tools/SALAM-Configurator/template.yml gem5-SALAM/tools/SALAM-Configurator/template.yml
--- gem5/tools/SALAM-Configurator/template.yml	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/tools/SALAM-Configurator/template.yml	2024-02-22 18:17:15.452946317 -0600
@@ -0,0 +1,73 @@
+# Each new cluster is denoted by a new document in YAML (---)
+---
+acc_cluster:
+  - Name: # Cluster name here (Required)
+  # NonCoherent DMA Example
+  - DMA:
+    - Name: # DMA name here (Required)
+      MaxReqSize: # Max Request Size for DMA in Bytes (Optional)
+      BufferSize: # DMA Buffer Size in Bytes (Optional)
+      PIOMaster: # PIO Master list (Required)
+      # Can be LocalBus or any combination of Accs
+      # e.g. FirstAcc,SecondAcc 
+      Type: # Selects the type of DMA, can be NonCoherent or Stream (Required)
+      InterruptNum: # Sets the Interrupt Number (Optional)
+  # Streaming DMA Example
+  - DMA:
+    - Name: # DMA name here (Required)
+      PIOMaster: # PIO Master list (Required)
+      # Can be LocalBus or any combination of Accs
+      # e.g. FirstAcc,SecondAcc 
+      BufferSize: # DMA Buffer Size in Bytes (Optional)
+      Type: # Selects the type of DMA, can be NonCoherent or Stream (Required)
+      ReadInt: # Interrupt Number for when read frames are finished (Optional)
+      WriteInt: # Interrupt Number for when write frames are finished (Optional)
+  # Accelerator Example
+  - Accelerator:
+    - Name: # Acc name here (Required)
+      IrPath: # Path for the IR file relative to M5_PATH (Required)
+      # E.g. benchmarks/mobilenetv2/hw/ir/tail/Reshape.ll
+      ConfigPath: # Path for the Config file relative to M5_PATH (Required)
+      # E.g. benchmarks/mobilenetv2/hw/ir/tail/Reshape.ini
+      Debug: # True or False, prints acc debug messages (Optional)
+      PIOSize: # Sets the PIO register size in bytes (Required)
+      PIOMaster: # PIO Master list (Required)
+      # Can be LocalBus or any combination of Accs
+      # e.g. FirstAcc,SecondAcc 
+    # Standard SPM Example, automatically connects to parent acc
+    - Var:
+      - Name: # Var name here (Required)
+        Type: # SPM
+        Size: # Size in Bytes (Required)
+        Ports: # Number of ports to connect to parent Acc
+        ResetOnRead: # True/False | Reset ready bit on private scratchpad memory read
+        ReadOnInvalid: # True/False | Enable reads on invalid memory segments when ready mode is used
+        WriteOnValid: # True/False | Enable writes on valid memory sectors when ready mode is used
+    # SPM with Multiple Accs Example
+    - Var:
+      - Name: # Var name here (Required)
+        Type: # SPM
+        Size: # Size in Bytes
+        Ports: # Number of ports to connect to parent Acc
+        Connections: # Define extra connections here with porting
+        # e.g. SecondAcc:1,ThirdAccAcc:1
+    # Stream Buffer Example
+    - Var:
+      - Name: # Var name here (Required)
+        Type: # Stream
+        StreamSize: # Stream buffer width in bytes (Optional)
+        BufferSize: # Stream buffer size in bytes (Optional)
+        InCon: # Input connection, Acc Name (Required)
+        OutCon: # Output connection, Acc Name (Required)
+    # RegisterBank Example
+    - Var:
+      - Name: # Var name here (Required)
+        Type: # RegisterBank
+        Size: # Register size in Bytes
+        Connections: # Define extra connections here with porting
+        # e.g. SecondAcc:1,ThirdAccAcc:1
+    # L1 Cache Example
+    - Var:
+      - Name: # Var name here (Required)
+        Type: # Cache
+        Size: # Cache size in Bytes
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgrader.py gem5-SALAM/util/cpt_upgrader.py
--- gem5/util/cpt_upgrader.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgrader.py	2024-02-22 18:17:15.452946317 -0600
@@ -297,7 +297,7 @@
         print("{")
         print()
         print("std::set<std::string> version_tags = {")
-        for tag in sorted(Upgrader.tag_set):
+        for tag in Upgrader.tag_set:
             print("  \"{}\",".format(tag))
         print("};")
         print()
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-ccregs.py gem5-SALAM/util/cpt_upgraders/arm-ccregs.py
--- gem5/util/cpt_upgraders/arm-ccregs.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-ccregs.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,7 +1,7 @@
 # Use condition code registers for the ARM architecture.
 # Previously the integer register file was used for these registers.
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-contextidr-el2.py gem5-SALAM/util/cpt_upgraders/arm-contextidr-el2.py
--- gem5/util/cpt_upgraders/arm-contextidr-el2.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-contextidr-el2.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,6 +1,6 @@
 # Add the ARM CONTEXTIDR_EL2 miscreg.
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-gem5-gic-ext.py gem5-SALAM/util/cpt_upgraders/arm-gem5-gic-ext.py
--- gem5/util/cpt_upgraders/arm-gem5-gic-ext.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-gem5-gic-ext.py	2024-02-22 18:17:15.452946317 -0600
@@ -38,7 +38,7 @@
     structures. Resize them to match the new GIC."""
 
     import re
-    if cpt.get('root', 'isa', fallback='') != 'arm':
+    if cpt.get('root','isa') != 'arm':
         return
 
     old_cpu_max = 8
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-gicv2-banked-regs.py gem5-SALAM/util/cpt_upgraders/arm-gicv2-banked-regs.py
--- gem5/util/cpt_upgraders/arm-gicv2-banked-regs.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-gicv2-banked-regs.py	2024-02-22 18:17:15.452946317 -0600
@@ -35,7 +35,7 @@
 
 # duplicate banked registers into new per-cpu arrays.
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
 
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-hdlcd-upgrade.py gem5-SALAM/util/cpt_upgraders/arm-hdlcd-upgrade.py
--- gem5/util/cpt_upgraders/arm-hdlcd-upgrade.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-hdlcd-upgrade.py	2024-02-22 18:17:15.452946317 -0600
@@ -39,7 +39,7 @@
     after they are loaded. Expect some timing differences."""
 
     import re
-    if cpt.get('root', 'isa', fallback='') != 'arm':
+    if cpt.get('root','isa') != 'arm':
         return
 
     option_names = {
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-miscreg-teehbr.py gem5-SALAM/util/cpt_upgraders/arm-miscreg-teehbr.py
--- gem5/util/cpt_upgraders/arm-miscreg-teehbr.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-miscreg-teehbr.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,6 +1,6 @@
 # Add the ARM MISCREG TEEHBR
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-sve.py gem5-SALAM/util/cpt_upgraders/arm-sve.py
--- gem5/util/cpt_upgraders/arm-sve.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-sve.py	2024-02-22 18:17:15.452946317 -0600
@@ -7,7 +7,7 @@
     2) Set isa.sveVL to 1
     3) Add SVE misc registers in the checkpoint
     """
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/arm-sysreg-mapping-ns.py gem5-SALAM/util/cpt_upgraders/arm-sysreg-mapping-ns.py
--- gem5/util/cpt_upgraders/arm-sysreg-mapping-ns.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/arm-sysreg-mapping-ns.py	2024-02-22 18:17:15.452946317 -0600
@@ -35,7 +35,7 @@
 
 # reflect updated register mappings for ARM ISA
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/armv8.py gem5-SALAM/util/cpt_upgraders/armv8.py
--- gem5/util/cpt_upgraders/armv8.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/armv8.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,6 +1,6 @@
 # Add all ARMv8 state
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') != 'arm':
+    if cpt.get('root','isa') != 'arm':
         return
     import re
     print("Warning: The size of the FP register file has changed. "
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/isa-is-simobject.py gem5-SALAM/util/cpt_upgraders/isa-is-simobject.py
--- gem5/util/cpt_upgraders/isa-is-simobject.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/isa-is-simobject.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,9 +1,7 @@
 # The ISA is now a separate SimObject, which means that we serialize
 # it in a separate section instead of as a part of the ThreadContext.
 def upgrader(cpt):
-    isa = cpt.get('root', 'isa', fallback='')
-    if isa == '':
-        return
+    isa = cpt.get('root','isa')
     isa_fields = {
         "arm" : ( "miscRegs" ),
         "sparc" : ( "asi", "tick", "fprs", "gsr", "softint", "tick_cmpr",
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/remove-arm-cpsr-mode-miscreg.py gem5-SALAM/util/cpt_upgraders/remove-arm-cpsr-mode-miscreg.py
--- gem5/util/cpt_upgraders/remove-arm-cpsr-mode-miscreg.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/remove-arm-cpsr-mode-miscreg.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,6 +1,6 @@
 # Remove the MISCREG_CPSR_MODE register from the ARM register file
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'arm':
+    if cpt.get('root','isa') == 'arm':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/cpt_upgraders/x86-add-tlb.py gem5-SALAM/util/cpt_upgraders/x86-add-tlb.py
--- gem5/util/cpt_upgraders/x86-add-tlb.py	2024-02-22 18:25:43.999606642 -0600
+++ gem5-SALAM/util/cpt_upgraders/x86-add-tlb.py	2024-02-22 18:17:15.452946317 -0600
@@ -1,6 +1,6 @@
 # Add TLB to x86 checkpoints
 def upgrader(cpt):
-    if cpt.get('root', 'isa', fallback='') == 'x86':
+    if cpt.get('root','isa') == 'x86':
         for sec in cpt.sections():
             import re
             # Search for all ISA sections
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/dockerfiles/gcn-gpu/Dockerfile gem5-SALAM/util/dockerfiles/gcn-gpu/Dockerfile
--- gem5/util/dockerfiles/gcn-gpu/Dockerfile	2024-02-22 18:25:44.003606663 -0600
+++ gem5-SALAM/util/dockerfiles/gcn-gpu/Dockerfile	2024-02-22 18:17:15.456946338 -0600
@@ -70,7 +70,7 @@
 
 WORKDIR /ROCclr
 # The patch allows us to avoid building blit kernels on-the-fly in gem5
-RUN wget -q -O - dist.gem5.org/dist/develop/rocm_patches/ROCclr.patch | git apply -v
+RUN wget -q -O - dist.gem5.org/dist/v21-1/rocm_patches/ROCclr.patch | git apply -v
 
 WORKDIR /ROCclr/build
 RUN cmake -DOPENCL_DIR="/ROCm-OpenCL-Runtime" \
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/gerrit-bot/util.py gem5-SALAM/util/gerrit-bot/util.py
--- gem5/util/gerrit-bot/util.py	2024-02-22 18:25:44.007606684 -0600
+++ gem5-SALAM/util/gerrit-bot/util.py	2024-02-22 18:17:15.456946338 -0600
@@ -30,10 +30,9 @@
     parsed_subject = subject.split(":", maxsplit = 1)
 
     # If the subject does not have a colon, it either does not have tags
-    # or does not have a message. In this case, we assume that the subject
-    # is the commit message.
+    # or does not have a message
     if len(parsed_subject) <= 1:
-        return [], parsed_subject[0]
+        return None, None
 
     tags = [ tag.strip() for tag in parsed_subject[0].split(",") ]
     message = parsed_subject[1]
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/lsan-suppressions gem5-SALAM/util/lsan-suppressions
--- gem5/util/lsan-suppressions	2024-02-22 18:16:36.944744995 -0600
+++ gem5-SALAM/util/lsan-suppressions	2024-02-22 18:17:15.456946338 -0600
@@ -1,2 +1,2 @@
 # Suppress detection of leaks from within the python3 interpreter.
-leak:libpython3*.so
+leak:libpython3.so
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/salam.supp gem5-SALAM/util/salam.supp
--- gem5/util/salam.supp	1969-12-31 18:00:00.000000000 -0600
+++ gem5-SALAM/util/salam.supp	2024-02-22 18:17:15.464946380 -0600
@@ -0,0 +1,44 @@
+{
+   mismatch free
+   Memcheck:Free
+   fun:free
+   ...
+   fun:*
+}
+{
+   python
+   Memcheck:Cond
+   obj:/usr/lib/x86_64-linux-gnu/libpython3.*
+   ...
+   obj:/usr/lib/x86_64-linux-gnu/libpython3.*
+}
+{
+   python
+   Memcheck:Addr4
+   obj:/usr/lib/x86_64-linux-gnu/libpython3.*
+   ...
+   fun:*
+}
+{
+   python
+   Memcheck:Value8
+   obj:/usr/lib/x86_64-linux-gnu/libpython3.*
+   ...
+   obj:*
+}
+{
+   python
+   Memcheck:Leak
+   match-leak-kinds: possible
+   fun:*
+   ...
+   obj:/usr/lib/x86_64-linux-gnu/libpython3.*
+}
+{
+   python
+   Memcheck:Leak
+   match-leak-kinds: possible
+   fun:malloc
+   ...
+   fun:_Py*
+}
\ No newline at end of file
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/tlm/README gem5-SALAM/util/tlm/README
--- gem5/util/tlm/README	2024-02-22 18:25:44.023606767 -0600
+++ gem5-SALAM/util/tlm/README	2024-02-22 18:17:15.468946401 -0600
@@ -93,12 +93,12 @@
 
 > cd ../..
 > scons build/ARM/gem5.opt
-> scons --with-cxx-config --without-python --without-tcmalloc USE_SYSTEMC=0 \
+> scons --with-cxx-config --without-python --without-tcmalloc \
 >       build/ARM/libgem5_opt.so
 > cd util/tlm
 
 Note: For MAC / OSX this command should be used:
-> scons --with-cxx-config --without-python --without-tcmalloc USE_SYSTEMC=0 \
+> scons --with-cxx-config --without-python --without-tcmalloc \
 >       build/ARM/libgem5_opt.dylib
 
 To build all sources of the SystemC binding and the examples simply run scons:
diff -ruN '--exclude=link.ld' '--exclude=.git' gem5/util/valgrind-suppressions gem5-SALAM/util/valgrind-suppressions
--- gem5/util/valgrind-suppressions	2024-02-22 18:16:36.956745058 -0600
+++ gem5-SALAM/util/valgrind-suppressions	2024-02-22 18:17:15.472946422 -0600
@@ -1,60 +1,117 @@
 {
    python error
    Memcheck:Cond
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Addr1
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Addr2
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Addr4
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Addr8
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Addr16
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Value1
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Value2
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Value4
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Value8
-   obj:*libpython3*
+   fun:PyObject_Free
 }
 {
    python error
    Memcheck:Value16
-   obj:*libpython3*
+   fun:PyObject_Free
+}
+
+{
+   python error
+   Memcheck:Cond
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Addr1
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Addr2
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Addr4
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Addr8
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Addr16
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Value1
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Value2
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Value4
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Value8
+   fun:PyObject_Realloc
+}
+{
+   python error
+   Memcheck:Value16
+   fun:PyObject_Realloc
 }
 {
    zlib error
    Memcheck:Cond
    fun:inflateReset2
 }
+
